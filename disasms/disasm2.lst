
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ce f9 00 00       	call   c000f9ee <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 6b 02 c0       	mov    eax,0xc0026b28
c0000025:	3d 28 6b 02 c0       	cmp    eax,0xc0026b28
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 6b 02 c0       	push   0xc0026b28
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 6b 02 c0       	mov    eax,0xc0026b28
c0000051:	2d 28 6b 02 c0       	sub    eax,0xc0026b28
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 6b 02 c0       	push   0xc0026b28
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 60 25 02 c0       	mov    ebx,0xc0022560
c0000097:	81 eb 5c 25 02 c0    	sub    ebx,0xc002255c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 5c 25 02 c0       	mov    esi,0xc002255c
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 6b 02 c0       	push   0xc0026b28
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 28 6b 02 c0       	push   0xc0026b28
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 1b 61 01 00       	call   c00163c8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 2c 40 01 00       	call   c00142f1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 f9 60 01 00       	call   c00163c8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 5a 66 01 00       	call   c0016948 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b1 6b 01 00       	call   c0016ea8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 c1 02 c0 	lgdtd  ds:0xc002c118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 72 eb 00 00       	jmp    c000eef1 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 25 02 c0 02 	test   BYTE PTR [edx-0x3ffdda80],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 25 02 c0 01 	test   BYTE PTR [edx-0x3ffdda80],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 25 02 c0 08 	test   BYTE PTR [edx-0x3ffdda80],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 25 02 c0 08 	test   BYTE PTR [edx-0x3ffdda80],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 25 02 c0 04 	test   BYTE PTR [ecx-0x3ffdda80],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 25 02 c0 01 	test   BYTE PTR [edx-0x3ffdda80],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000e2a:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e8e:	e8 9f e7 00 00       	call   c000f632 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 ac e6 00 00       	call   c000f5d4 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 87 e5 00 00       	call   c000f59e <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 82 e5 00 00       	call   c000f5d4 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 78 e4 00 00       	call   c000f59e <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 93 e3 00 00       	call   c000f59e <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 7d e3 00 00       	call   c000f59e <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c0001313:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000136a:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c00013b3:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013ce:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c0001488:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c000148e:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001495:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000155b:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001561:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c0001568:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c00016b6:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 84 26 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd97c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 29 a2 01 00       	jmp    c001c1e4 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 53 a2 01 00       	jmp    c001c224 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 74 a2 01 00       	jmp    c001c264 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 e0 27 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd820]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 e0 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd820]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 08 57 02 c0       	mov    edx,0xc0025708
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 9c 26 02 c0       	mov    edx,0xc002269c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 a2 26 02 c0       	mov    eax,0xc00226a2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 60 27 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd8a0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 ab 26 02 c0       	mov    eax,0xc00226ab
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 e0 27 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdd820]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 30 27 02 c0       	mov    eax,0xc0022730
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 20 27 02 c0       	mov    ebx,0xc0022720
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 00 27 02 c0       	mov    eax,0xc0022700
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 10 27 02 c0       	mov    eax,0xc0022710
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba b2 26 02 c0       	mov    edx,0xc00226b2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba be 26 02 c0       	mov    edx,0xc00226be
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba d2 26 02 c0       	mov    edx,0xc00226d2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 71 98 00 00       	call   c000f6b4 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 69 98 00 00       	call   c000f6c4 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 00 2b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022b00
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 00 2b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022b00
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 00 29 02 c0       	mov    eax,0xc0022900
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 40 28 02 c0       	mov    eax,0xc0022840
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 00 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd800]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 00 2c 02 c0       	push   0xc0022c00
c0006327:	e8 5c 68 01 00       	call   c001cb88 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 0e 2c 02 c0       	push   0xc0022c0e
c000635f:	e8 24 68 01 00       	call   c001cb88 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 8d 67 01 00       	call   c001cb2c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 80 02 c0       	mov    eax,0xc0028020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 1d 2c 02 c0       	push   0xc0022c1d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c000675b:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006765:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c000677d:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067f6:	8b 9d 4c 85 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd7ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c000688d:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068ef:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c000692c:	05 40 85 02 c0       	add    eax,0xc0028540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069ec:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 20 2c 02 c0       	push   0xc0022c20
c0006a0f:	e8 74 61 01 00       	call   c001cb88 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 82 61 01 00       	call   c001cba4 <iso_kprintfd>
c0006a22:	c7 04 24 25 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c25
c0006a29:	e8 5a 61 01 00       	call   c001cb88 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a35:	e8 6a 61 01 00       	call   c001cba4 <iso_kprintfd>
c0006a3a:	c7 04 24 2b 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c2b
c0006a41:	e8 42 61 01 00       	call   c001cb88 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a4d:	e8 52 61 01 00       	call   c001cba4 <iso_kprintfd>
c0006a52:	c7 04 24 31 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c31
c0006a59:	e8 2a 61 01 00       	call   c001cb88 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a65:	e8 3a 61 01 00       	call   c001cba4 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006acb:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 85 02 c0    	lea    ebp,[edi-0x3ffd7aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 85 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd7aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 1d 2c 02 c0       	push   0xc0022c1d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006c0a:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006c10:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 85 02 c0    	lea    eax,[edi-0x3ffd7ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 3a 2c 02 c0       	push   0xc0022c3a
c0006c32:	e8 51 5f 01 00       	call   c001cb88 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c67:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 45 2c 02 c0       	push   0xc0022c45
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 4c 2c 02 c0       	push   0xc0022c4c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006d05:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d28:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 53 2c 02 c0       	push   0xc0022c53
c0006d49:	e8 3a 5e 01 00       	call   c001cb88 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 5e 2c 02 c0       	push   0xc0022c5e
c0006d64:	e8 1f 5e 01 00       	call   c001cb88 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 85 02 c0       	push   0xc0028540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 21 89 00 00       	call   c000f6b4 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d9f:	e8 10 89 00 00       	call   c000f6b4 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 fb 88 00 00       	call   c000f6b4 <malloc>
c0006db9:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 e2 88 00 00       	call   c000f6b4 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006dff:	e8 c0 88 00 00       	call   c000f6c4 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 b2 88 00 00       	call   c000f6c4 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 98 88 00 00       	call   c000f6c4 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 83 88 00 00       	call   c000f6c4 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 e5 62 00 00       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 41 62 00 00       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 a8 2c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd358]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 70 2c 02 c0       	push   0xc0022c70
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 f8 2d 02 c0       	push   0xc0022df8
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 0c 2e 02 c0       	push   0xc0022e0c
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 16 2e 02 c0       	push   0xc0022e16
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 20 2e 02 c0       	push   0xc0022e20
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 64 2f 02 c0       	push   0xc0022f64
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 2a 2e 02 c0       	push   0xc0022e2a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 84 2f 02 c0       	push   0xc0022f84
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 3f 2e 02 c0       	push   0xc0022e3f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 59 2e 02 c0       	push   0xc0022e59
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 c0 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f40]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 ac 2f 02 c0       	push   0xc0022fac
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 64 2f 02 c0       	push   0xc0022f64
c0007218:	e8 f3 88 00 00       	call   c000fb10 <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 f4 2f 02 c0       	push   0xc0022ff4
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 f4 2f 02 c0       	push   0xc0022ff4
c0007247:	e8 c4 88 00 00       	call   c000fb10 <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 64 2e 02 c0       	push   0xc0022e64
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 64 2e 02 c0       	push   0xc0022e64
c0007273:	e8 98 88 00 00       	call   c000fb10 <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 81 2e 02 c0       	push   0xc0022e81
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 81 2e 02 c0       	push   0xc0022e81
c000729f:	e8 6c 88 00 00       	call   c000fb10 <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 14 30 02 c0       	push   0xc0023014
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 14 30 02 c0       	push   0xc0023014
c00072cb:	e8 40 88 00 00       	call   c000fb10 <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 38 30 02 c0       	push   0xc0023038
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 38 30 02 c0       	push   0xc0023038
c00072f7:	e8 14 88 00 00       	call   c000fb10 <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 9d 2e 02 c0       	push   0xc0022e9d
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 9d 2e 02 c0       	push   0xc0022e9d
c0007323:	e8 e8 87 00 00       	call   c000fb10 <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 b9 2e 02 c0       	push   0xc0022eb9
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 b9 2e 02 c0       	push   0xc0022eb9
c000734f:	e8 bc 87 00 00       	call   c000fb10 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 58 30 02 c0       	push   0xc0023058
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 58 30 02 c0       	push   0xc0023058
c000737b:	e8 90 87 00 00       	call   c000fb10 <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 7c 30 02 c0       	push   0xc002307c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 7c 30 02 c0       	push   0xc002307c
c00073a7:	e8 64 87 00 00       	call   c000fb10 <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <KiIsHashInTable(unsigned short)>:
c00073b4:	0f b7 d0             	movzx  edx,ax
c00073b7:	83 e0 07             	and    eax,0x7
c00073ba:	c1 fa 03             	sar    edx,0x3
c00073bd:	88 c1                	mov    cl,al
c00073bf:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c00073c6:	d3 fa                	sar    edx,cl
c00073c8:	89 d0                	mov    eax,edx
c00073ca:	83 e0 01             	and    eax,0x1
c00073cd:	c3                   	ret    

c00073ce <KiSetHashInTable(unsigned short, bool)>:
c00073ce:	56                   	push   esi
c00073cf:	53                   	push   ebx
c00073d0:	0f b7 d8             	movzx  ebx,ax
c00073d3:	c1 fb 03             	sar    ebx,0x3
c00073d6:	83 e0 07             	and    eax,0x7
c00073d9:	89 c1                	mov    ecx,eax
c00073db:	b8 01 00 00 00       	mov    eax,0x1
c00073e0:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c00073e7:	d3 e0                	shl    eax,cl
c00073e9:	84 d2                	test   dl,dl
c00073eb:	74 04                	je     c00073f1 <KiSetHashInTable(unsigned short, bool)+0x23>
c00073ed:	09 f0                	or     eax,esi
c00073ef:	eb 04                	jmp    c00073f5 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073f1:	f7 d0                	not    eax
c00073f3:	21 f0                	and    eax,esi
c00073f5:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c00073fb:	5b                   	pop    ebx
c00073fc:	5e                   	pop    esi
c00073fd:	c3                   	ret    

c00073fe <KiFlushSymlinkChanges()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 1c             	sub    esp,0x1c
c0007404:	68 14 01 00 00       	push   0x114
c0007409:	e8 a6 82 00 00       	call   c000f6b4 <malloc>
c000740e:	83 c4 0c             	add    esp,0xc
c0007411:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007417:	68 9b 30 02 c0       	push   0xc002309b
c000741c:	50                   	push   eax
c000741d:	89 c3                	mov    ebx,eax
c000741f:	e8 64 0d 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007424:	83 c4 10             	add    esp,0x10
c0007427:	85 db                	test   ebx,ebx
c0007429:	75 10                	jne    c000743b <KiFlushSymlinkChanges()+0x3d>
c000742b:	83 ec 0c             	sub    esp,0xc
c000742e:	68 b9 30 02 c0       	push   0xc00230b9
c0007433:	e8 d8 86 00 00       	call   c000fb10 <KePanic(char const*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	50                   	push   eax
c000743c:	50                   	push   eax
c000743d:	6a 06                	push   0x6
c000743f:	53                   	push   ebx
c0007440:	e8 61 0d 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007445:	83 c4 10             	add    esp,0x10
c0007448:	85 c0                	test   eax,eax
c000744a:	74 10                	je     c000745c <KiFlushSymlinkChanges()+0x5e>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	68 d3 30 02 c0       	push   0xc00230d3
c0007454:	e8 b7 86 00 00       	call   c000fb10 <KePanic(char const*)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	31 f6                	xor    esi,esi
c000745e:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007464:	7e 70                	jle    c00074d6 <KiFlushSymlinkChanges()+0xd8>
c0007466:	83 ec 0c             	sub    esp,0xc
c0007469:	89 f0                	mov    eax,esi
c000746b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000746d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007471:	c1 e0 08             	shl    eax,0x8
c0007474:	57                   	push   edi
c0007475:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000747a:	50                   	push   eax
c000747b:	6a 00                	push   0x0
c000747d:	68 00 01 00 00       	push   0x100
c0007482:	53                   	push   ebx
c0007483:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007486:	83 c4 20             	add    esp,0x20
c0007489:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007491:	74 10                	je     c00074a3 <KiFlushSymlinkChanges()+0xa5>
c0007493:	83 ec 0c             	sub    esp,0xc
c0007496:	68 ed 30 02 c0       	push   0xc00230ed
c000749b:	e8 70 86 00 00       	call   c000fb10 <KePanic(char const*)>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a5:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c00074ac:	83 ec 0c             	sub    esp,0xc
c00074af:	57                   	push   edi
c00074b0:	52                   	push   edx
c00074b1:	6a 00                	push   0x0
c00074b3:	6a 08                	push   0x8
c00074b5:	53                   	push   ebx
c00074b6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074b9:	83 c4 20             	add    esp,0x20
c00074bc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074c1:	74 10                	je     c00074d3 <KiFlushSymlinkChanges()+0xd5>
c00074c3:	83 ec 0c             	sub    esp,0xc
c00074c6:	68 07 31 02 c0       	push   0xc0023107
c00074cb:	e8 40 86 00 00       	call   c000fb10 <KePanic(char const*)>
c00074d0:	83 c4 10             	add    esp,0x10
c00074d3:	46                   	inc    esi
c00074d4:	eb 88                	jmp    c000745e <KiFlushSymlinkChanges()+0x60>
c00074d6:	83 ec 0c             	sub    esp,0xc
c00074d9:	53                   	push   ebx
c00074da:	e8 25 0d 00 00       	call   c0008204 <File::close()>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	85 db                	test   ebx,ebx
c00074e4:	74 0c                	je     c00074f2 <KiFlushSymlinkChanges()+0xf4>
c00074e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	53                   	push   ebx
c00074ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ef:	83 c4 10             	add    esp,0x10
c00074f2:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074fc:	83 c4 10             	add    esp,0x10
c00074ff:	5b                   	pop    ebx
c0007500:	5e                   	pop    esi
c0007501:	5f                   	pop    edi
c0007502:	c3                   	ret    

c0007503 <KiDeinitialiseSymlinks(void*)>:
c0007503:	e9 f6 fe ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>

c0007508 <KiGetSymlinkHash(char const*)>:
c0007508:	53                   	push   ebx
c0007509:	89 c3                	mov    ebx,eax
c000750b:	83 ec 14             	sub    esp,0x14
c000750e:	50                   	push   eax
c000750f:	e8 6c 90 ff ff       	call   c0000580 <strlen>
c0007514:	5a                   	pop    edx
c0007515:	59                   	pop    ecx
c0007516:	50                   	push   eax
c0007517:	53                   	push   ebx
c0007518:	e8 52 6b 00 00       	call   c000e06f <KeCalculateCRC32(unsigned char*, int)>
c000751d:	83 c4 18             	add    esp,0x18
c0007520:	5b                   	pop    ebx
c0007521:	89 c2                	mov    edx,eax
c0007523:	c1 ea 10             	shr    edx,0x10
c0007526:	31 d0                	xor    eax,edx
c0007528:	c3                   	ret    

c0007529 <KiCreateSymlinkID()>:
c0007529:	55                   	push   ebp
c000752a:	57                   	push   edi
c000752b:	56                   	push   esi
c000752c:	53                   	push   ebx
c000752d:	31 db                	xor    ebx,ebx
c000752f:	83 ec 1c             	sub    esp,0x1c
c0007532:	e8 53 90 00 00       	call   c001058a <KeRand()>
c0007537:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c000753d:	31 d2                	xor    edx,edx
c000753f:	43                   	inc    ebx
c0007540:	31 ff                	xor    edi,edi
c0007542:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007545:	89 ee                	mov    esi,ebp
c0007547:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c000754d:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007555:	c1 e0 1f             	shl    eax,0x1f
c0007558:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000755e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007562:	75 10                	jne    c0007574 <KiCreateSymlinkID()+0x4b>
c0007564:	83 ec 0c             	sub    esp,0xc
c0007567:	68 21 31 02 c0       	push   0xc0023121
c000756c:	e8 9f 85 00 00       	call   c000fb10 <KePanic(char const*)>
c0007571:	83 c4 10             	add    esp,0x10
c0007574:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007578:	75 06                	jne    c0007580 <KiCreateSymlinkID()+0x57>
c000757a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000757e:	74 b2                	je     c0007532 <KiCreateSymlinkID()+0x9>
c0007580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007588:	83 c4 1c             	add    esp,0x1c
c000758b:	5b                   	pop    ebx
c000758c:	31 f0                	xor    eax,esi
c000758e:	5e                   	pop    esi
c000758f:	31 fa                	xor    edx,edi
c0007591:	5f                   	pop    edi
c0007592:	5d                   	pop    ebp
c0007593:	c3                   	ret    

c0007594 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007594:	53                   	push   ebx
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000759c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075a0:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075a9:	68 00 01 00 00       	push   0x100
c00075ae:	6a 00                	push   0x0
c00075b0:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c00075b7:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c00075be:	c1 e0 08             	shl    eax,0x8
c00075c1:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075c6:	50                   	push   eax
c00075c7:	e8 24 8f ff ff       	call   c00004f0 <memset>
c00075cc:	58                   	pop    eax
c00075cd:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075d2:	5a                   	pop    edx
c00075d3:	c1 e0 08             	shl    eax,0x8
c00075d6:	53                   	push   ebx
c00075d7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075dc:	50                   	push   eax
c00075dd:	e8 6e 90 ff ff       	call   c0000650 <strcpy>
c00075e2:	89 d8                	mov    eax,ebx
c00075e4:	e8 1f ff ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c00075e9:	ba 01 00 00 00       	mov    edx,0x1
c00075ee:	0f b7 c0             	movzx  eax,ax
c00075f1:	e8 d8 fd ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c00075f6:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075fb:	83 c4 10             	add    esp,0x10
c00075fe:	40                   	inc    eax
c00075ff:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c0007604:	83 f8 03             	cmp    eax,0x3
c0007607:	7e 09                	jle    c0007612 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007609:	83 c4 08             	add    esp,0x8
c000760c:	5b                   	pop    ebx
c000760d:	e9 ec fd ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>
c0007612:	83 c4 08             	add    esp,0x8
c0007615:	5b                   	pop    ebx
c0007616:	c3                   	ret    

c0007617 <KeInitialiseSymlinks()>:
c0007617:	57                   	push   edi
c0007618:	56                   	push   esi
c0007619:	53                   	push   ebx
c000761a:	81 ec 14 01 00 00    	sub    esp,0x114
c0007620:	68 00 20 00 00       	push   0x2000
c0007625:	6a 00                	push   0x0
c0007627:	68 00 93 02 c0       	push   0xc0029300
c000762c:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c0007636:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c0007640:	e8 ab 8e ff ff       	call   c00004f0 <memset>
c0007645:	59                   	pop    ecx
c0007646:	5b                   	pop    ebx
c0007647:	6a 00                	push   0x0
c0007649:	68 03 75 00 c0       	push   0xc0007503
c000764e:	e8 01 5b 00 00       	call   c000d154 <KeRegisterAtexit(void (*)(void*), void*)>
c0007653:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000765a:	e8 55 80 00 00       	call   c000f6b4 <malloc>
c000765f:	83 c4 0c             	add    esp,0xc
c0007662:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007668:	68 9b 30 02 c0       	push   0xc002309b
c000766d:	50                   	push   eax
c000766e:	89 c3                	mov    ebx,eax
c0007670:	e8 13 0b 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007675:	83 c4 10             	add    esp,0x10
c0007678:	85 db                	test   ebx,ebx
c000767a:	75 10                	jne    c000768c <KeInitialiseSymlinks()+0x75>
c000767c:	83 ec 0c             	sub    esp,0xc
c000767f:	68 2a 31 02 c0       	push   0xc002312a
c0007684:	e8 87 84 00 00       	call   c000fb10 <KePanic(char const*)>
c0007689:	83 c4 10             	add    esp,0x10
c000768c:	83 ec 0c             	sub    esp,0xc
c000768f:	53                   	push   ebx
c0007690:	e8 d5 0d 00 00       	call   c000846a <File::exists()>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	84 c0                	test   al,al
c000769a:	75 3a                	jne    c00076d6 <KeInitialiseSymlinks()+0xbf>
c000769c:	52                   	push   edx
c000769d:	52                   	push   edx
c000769e:	6a 12                	push   0x12
c00076a0:	53                   	push   ebx
c00076a1:	e8 00 0b 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076a6:	83 c4 10             	add    esp,0x10
c00076a9:	85 c0                	test   eax,eax
c00076ab:	74 10                	je     c00076bd <KeInitialiseSymlinks()+0xa6>
c00076ad:	83 ec 0c             	sub    esp,0xc
c00076b0:	68 47 31 02 c0       	push   0xc0023147
c00076b5:	e8 56 84 00 00       	call   c000fb10 <KePanic(char const*)>
c00076ba:	83 c4 10             	add    esp,0x10
c00076bd:	83 ec 0c             	sub    esp,0xc
c00076c0:	53                   	push   ebx
c00076c1:	e8 3e 0b 00 00       	call   c0008204 <File::close()>
c00076c6:	83 c4 10             	add    esp,0x10
c00076c9:	85 db                	test   ebx,ebx
c00076cb:	0f 84 9e 00 00 00    	je     c000776f <KeInitialiseSymlinks()+0x158>
c00076d1:	e9 8d 00 00 00       	jmp    c0007763 <KeInitialiseSymlinks()+0x14c>
c00076d6:	50                   	push   eax
c00076d7:	50                   	push   eax
c00076d8:	6a 01                	push   0x1
c00076da:	53                   	push   ebx
c00076db:	e8 c6 0a 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076e0:	83 c4 10             	add    esp,0x10
c00076e3:	85 c0                	test   eax,eax
c00076e5:	74 10                	je     c00076f7 <KeInitialiseSymlinks()+0xe0>
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	68 64 31 02 c0       	push   0xc0023164
c00076ef:	e8 1c 84 00 00       	call   c000fb10 <KePanic(char const*)>
c00076f4:	83 c4 10             	add    esp,0x10
c00076f7:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007704:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007706:	57                   	push   edi
c0007707:	8d 74 24 20          	lea    esi,[esp+0x20]
c000770b:	56                   	push   esi
c000770c:	6a 00                	push   0x0
c000770e:	68 00 01 00 00       	push   0x100
c0007713:	53                   	push   ebx
c0007714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007717:	83 c4 20             	add    esp,0x20
c000771a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007722:	75 33                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007729:	57                   	push   edi
c000772a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000772e:	52                   	push   edx
c000772f:	6a 00                	push   0x0
c0007731:	6a 08                	push   0x8
c0007733:	53                   	push   ebx
c0007734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007737:	83 c4 20             	add    esp,0x20
c000773a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000773f:	75 16                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007741:	89 f0                	mov    eax,esi
c0007743:	e8 c0 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007748:	ba 01 00 00 00       	mov    edx,0x1
c000774d:	0f b7 c0             	movzx  eax,ax
c0007750:	e8 79 fc ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c0007755:	eb a0                	jmp    c00076f7 <KeInitialiseSymlinks()+0xe0>
c0007757:	83 ec 0c             	sub    esp,0xc
c000775a:	53                   	push   ebx
c000775b:	e8 a4 0a 00 00       	call   c0008204 <File::close()>
c0007760:	83 c4 10             	add    esp,0x10
c0007763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007765:	83 ec 0c             	sub    esp,0xc
c0007768:	53                   	push   ebx
c0007769:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	81 c4 10 01 00 00    	add    esp,0x110
c0007775:	5b                   	pop    ebx
c0007776:	5e                   	pop    esi
c0007777:	5f                   	pop    edi
c0007778:	c3                   	ret    

c0007779 <KiIsSymlinkRegistered(char const*)>:
c0007779:	55                   	push   ebp
c000777a:	57                   	push   edi
c000777b:	56                   	push   esi
c000777c:	53                   	push   ebx
c000777d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007783:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000778a:	89 f0                	mov    eax,esi
c000778c:	e8 77 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007791:	0f b7 c0             	movzx  eax,ax
c0007794:	e8 1b fc ff ff       	call   c00073b4 <KiIsHashInTable(unsigned short)>
c0007799:	31 d2                	xor    edx,edx
c000779b:	88 c1                	mov    cl,al
c000779d:	31 c0                	xor    eax,eax
c000779f:	84 c9                	test   cl,cl
c00077a1:	0f 84 31 01 00 00    	je     c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077a7:	31 db                	xor    ebx,ebx
c00077a9:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c00077af:	7e 30                	jle    c00077e1 <KiIsSymlinkRegistered(char const*)+0x68>
c00077b1:	89 d8                	mov    eax,ebx
c00077b3:	c1 e0 08             	shl    eax,0x8
c00077b6:	51                   	push   ecx
c00077b7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00077bc:	51                   	push   ecx
c00077bd:	50                   	push   eax
c00077be:	56                   	push   esi
c00077bf:	e8 bc 8f ff ff       	call   c0000780 <strcmp>
c00077c4:	83 c4 10             	add    esp,0x10
c00077c7:	85 c0                	test   eax,eax
c00077c9:	75 13                	jne    c00077de <KiIsSymlinkRegistered(char const*)+0x65>
c00077cb:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c00077d2:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c00077d9:	e9 fa 00 00 00       	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077de:	43                   	inc    ebx
c00077df:	eb c8                	jmp    c00077a9 <KiIsSymlinkRegistered(char const*)+0x30>
c00077e1:	83 ec 0c             	sub    esp,0xc
c00077e4:	68 14 01 00 00       	push   0x114
c00077e9:	e8 c6 7e 00 00       	call   c000f6b4 <malloc>
c00077ee:	83 c4 0c             	add    esp,0xc
c00077f1:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c00077f7:	68 9b 30 02 c0       	push   0xc002309b
c00077fc:	50                   	push   eax
c00077fd:	89 c3                	mov    ebx,eax
c00077ff:	e8 84 09 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007804:	83 c4 10             	add    esp,0x10
c0007807:	85 db                	test   ebx,ebx
c0007809:	75 12                	jne    c000781d <KiIsSymlinkRegistered(char const*)+0xa4>
c000780b:	83 ec 0c             	sub    esp,0xc
c000780e:	68 7f 31 02 c0       	push   0xc002317f
c0007813:	e8 f8 82 00 00       	call   c000fb10 <KePanic(char const*)>
c0007818:	83 c4 10             	add    esp,0x10
c000781b:	eb 10                	jmp    c000782d <KiIsSymlinkRegistered(char const*)+0xb4>
c000781d:	83 ec 0c             	sub    esp,0xc
c0007820:	53                   	push   ebx
c0007821:	e8 44 0c 00 00       	call   c000846a <File::exists()>
c0007826:	83 c4 10             	add    esp,0x10
c0007829:	84 c0                	test   al,al
c000782b:	74 de                	je     c000780b <KiIsSymlinkRegistered(char const*)+0x92>
c000782d:	52                   	push   edx
c000782e:	52                   	push   edx
c000782f:	6a 01                	push   0x1
c0007831:	53                   	push   ebx
c0007832:	e8 6f 09 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007837:	83 c4 10             	add    esp,0x10
c000783a:	85 c0                	test   eax,eax
c000783c:	74 10                	je     c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c000783e:	83 ec 0c             	sub    esp,0xc
c0007841:	68 9a 31 02 c0       	push   0xc002319a
c0007846:	e8 c5 82 00 00       	call   c000fb10 <KePanic(char const*)>
c000784b:	83 c4 10             	add    esp,0x10
c000784e:	83 ec 0c             	sub    esp,0xc
c0007851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007853:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007857:	55                   	push   ebp
c0007858:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000785c:	57                   	push   edi
c000785d:	6a 00                	push   0x0
c000785f:	68 00 01 00 00       	push   0x100
c0007864:	53                   	push   ebx
c0007865:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007873:	75 4b                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007875:	83 ec 0c             	sub    esp,0xc
c0007878:	8b 03                	mov    eax,DWORD PTR [ebx]
c000787a:	55                   	push   ebp
c000787b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000787f:	52                   	push   edx
c0007880:	6a 00                	push   0x0
c0007882:	6a 08                	push   0x8
c0007884:	53                   	push   ebx
c0007885:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007888:	83 c4 20             	add    esp,0x20
c000788b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007890:	75 2e                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007892:	50                   	push   eax
c0007893:	50                   	push   eax
c0007894:	57                   	push   edi
c0007895:	56                   	push   esi
c0007896:	e8 e5 8e ff ff       	call   c0000780 <strcmp>
c000789b:	83 c4 10             	add    esp,0x10
c000789e:	85 c0                	test   eax,eax
c00078a0:	75 ac                	jne    c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c00078a2:	83 ec 0c             	sub    esp,0xc
c00078a5:	53                   	push   ebx
c00078a6:	e8 59 09 00 00       	call   c0008204 <File::close()>
c00078ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bb:	83 c4 10             	add    esp,0x10
c00078be:	eb 18                	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00078c0:	83 ec 0c             	sub    esp,0xc
c00078c3:	53                   	push   ebx
c00078c4:	e8 3b 09 00 00       	call   c0008204 <File::close()>
c00078c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	31 d2                	xor    edx,edx
c00078d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078de:	5b                   	pop    ebx
c00078df:	5e                   	pop    esi
c00078e0:	5f                   	pop    edi
c00078e1:	5d                   	pop    ebp
c00078e2:	c3                   	ret    

c00078e3 <KeDereferenceSymlink(char const*, char*)>:
c00078e3:	55                   	push   ebp
c00078e4:	57                   	push   edi
c00078e5:	56                   	push   esi
c00078e6:	53                   	push   ebx
c00078e7:	83 ec 48             	sub    esp,0x48
c00078ea:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ee:	56                   	push   esi
c00078ef:	e8 85 fe ff ff       	call   c0007779 <KiIsSymlinkRegistered(char const*)>
c00078f4:	83 c4 10             	add    esp,0x10
c00078f7:	89 c7                	mov    edi,eax
c00078f9:	89 d0                	mov    eax,edx
c00078fb:	09 f8                	or     eax,edi
c00078fd:	75 07                	jne    c0007906 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078ff:	31 c0                	xor    eax,eax
c0007901:	e9 7c 01 00 00       	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007906:	83 ec 0c             	sub    esp,0xc
c0007909:	89 d5                	mov    ebp,edx
c000790b:	68 14 01 00 00       	push   0x114
c0007910:	e8 9f 7d 00 00       	call   c000f6b4 <malloc>
c0007915:	83 c4 0c             	add    esp,0xc
c0007918:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000791e:	56                   	push   esi
c000791f:	50                   	push   eax
c0007920:	89 c3                	mov    ebx,eax
c0007922:	e8 61 08 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007927:	83 c4 10             	add    esp,0x10
c000792a:	85 db                	test   ebx,ebx
c000792c:	0f 84 32 01 00 00    	je     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007932:	56                   	push   esi
c0007933:	56                   	push   esi
c0007934:	6a 01                	push   0x1
c0007936:	53                   	push   ebx
c0007937:	e8 6a 08 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c000793c:	83 c4 10             	add    esp,0x10
c000793f:	85 c0                	test   eax,eax
c0007941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007943:	74 09                	je     c000794e <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007945:	83 ec 0c             	sub    esp,0xc
c0007948:	53                   	push   ebx
c0007949:	e9 10 01 00 00       	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x17b>
c000794e:	83 ec 0c             	sub    esp,0xc
c0007951:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007955:	56                   	push   esi
c0007956:	8d 54 24 37          	lea    edx,[esp+0x37]
c000795a:	52                   	push   edx
c000795b:	6a 00                	push   0x0
c000795d:	6a 08                	push   0x8
c000795f:	53                   	push   ebx
c0007960:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007963:	83 c4 20             	add    esp,0x20
c0007966:	85 c0                	test   eax,eax
c0007968:	0f 85 e2 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000796e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007973:	0f 85 d7 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007979:	83 ec 0c             	sub    esp,0xc
c000797c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000797e:	56                   	push   esi
c000797f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007983:	52                   	push   edx
c0007984:	6a 00                	push   0x0
c0007986:	6a 08                	push   0x8
c0007988:	53                   	push   ebx
c0007989:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000798c:	83 c4 20             	add    esp,0x20
c000798f:	85 c0                	test   eax,eax
c0007991:	0f 85 b9 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007997:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000799c:	0f 85 ae 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079a2:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079a6:	0f 85 53 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079ac:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079b0:	0f 85 49 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079be:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079c6:	51                   	push   ecx
c00079c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079cb:	50                   	push   eax
c00079cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079d0:	50                   	push   eax
c00079d1:	53                   	push   ebx
c00079d2:	e8 d1 0a 00 00       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079df:	75 6f                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079e5:	31 c9                	xor    ecx,ecx
c00079e7:	bf 0f 00 00 00       	mov    edi,0xf
c00079ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079f0:	39 c7                	cmp    edi,eax
c00079f2:	89 cf                	mov    edi,ecx
c00079f4:	19 d7                	sbb    edi,edx
c00079f6:	73 58                	jae    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f8:	83 c0 f0             	add    eax,0xfffffff0
c00079fb:	bf ff 00 00 00       	mov    edi,0xff
c0007a00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a04:	83 d2 ff             	adc    edx,0xffffffff
c0007a07:	39 c7                	cmp    edi,eax
c0007a09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a0d:	19 d1                	sbb    ecx,edx
c0007a0f:	72 53                	jb     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a11:	40                   	inc    eax
c0007a12:	52                   	push   edx
c0007a13:	50                   	push   eax
c0007a14:	6a 00                	push   0x0
c0007a16:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a1a:	e8 d1 8a ff ff       	call   c00004f0 <memset>
c0007a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a21:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a30:	53                   	push   ebx
c0007a31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	75 15                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a3f:	89 c7                	mov    edi,eax
c0007a41:	c1 ff 1f             	sar    edi,0x1f
c0007a44:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a48:	75 06                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a4e:	74 19                	je     c0007a69 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a50:	83 ec 0c             	sub    esp,0xc
c0007a53:	53                   	push   ebx
c0007a54:	e8 ab 07 00 00       	call   c0008204 <File::close()>
c0007a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a61:	83 c4 10             	add    esp,0x10
c0007a64:	83 c8 ff             	or     eax,0xffffffff
c0007a67:	eb 19                	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a69:	83 ec 0c             	sub    esp,0xc
c0007a6c:	53                   	push   ebx
c0007a6d:	e8 92 07 00 00       	call   c0008204 <File::close()>
c0007a72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	b8 01 00 00 00       	mov    eax,0x1
c0007a82:	83 c4 3c             	add    esp,0x3c
c0007a85:	5b                   	pop    ebx
c0007a86:	5e                   	pop    esi
c0007a87:	5f                   	pop    edi
c0007a88:	5d                   	pop    ebp
c0007a89:	c3                   	ret    

c0007a8a <KeCreateSymlink(char const*, char const*)>:
c0007a8a:	55                   	push   ebp
c0007a8b:	57                   	push   edi
c0007a8c:	56                   	push   esi
c0007a8d:	53                   	push   ebx
c0007a8e:	83 ec 38             	sub    esp,0x38
c0007a91:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a95:	68 14 01 00 00       	push   0x114
c0007a9a:	e8 15 7c 00 00       	call   c000f6b4 <malloc>
c0007a9f:	6a 00                	push   0x0
c0007aa1:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007aa7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007aab:	89 c3                	mov    ebx,eax
c0007aad:	50                   	push   eax
c0007aae:	e8 d7 05 00 00       	call   c000808a <File::File(char const*, Process*, bool)>
c0007ab3:	83 c4 20             	add    esp,0x20
c0007ab6:	85 db                	test   ebx,ebx
c0007ab8:	b8 01 00 00 00       	mov    eax,0x1
c0007abd:	0f 84 fb 00 00 00    	je     c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ac3:	52                   	push   edx
c0007ac4:	52                   	push   edx
c0007ac5:	6a 12                	push   0x12
c0007ac7:	53                   	push   ebx
c0007ac8:	e8 d9 06 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007acd:	83 c4 10             	add    esp,0x10
c0007ad0:	85 c0                	test   eax,eax
c0007ad2:	74 0b                	je     c0007adf <KeCreateSymlink(char const*, char const*)+0x55>
c0007ad4:	83 ec 0c             	sub    esp,0xc
c0007ad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad9:	53                   	push   ebx
c0007ada:	e9 d4 00 00 00       	jmp    c0007bb3 <KeCreateSymlink(char const*, char const*)+0x129>
c0007adf:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007ae3:	be b5 31 02 c0       	mov    esi,0xc00231b5
c0007ae8:	b9 09 00 00 00       	mov    ecx,0x9
c0007aed:	fc                   	cld    
c0007aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007af0:	83 ec 0c             	sub    esp,0xc
c0007af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007af7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af9:	56                   	push   esi
c0007afa:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007afe:	52                   	push   edx
c0007aff:	6a 00                	push   0x0
c0007b01:	6a 08                	push   0x8
c0007b03:	53                   	push   ebx
c0007b04:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b07:	83 c4 20             	add    esp,0x20
c0007b0a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b0f:	0f 85 90 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b15:	85 c0                	test   eax,eax
c0007b17:	0f 85 88 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1d:	e8 07 fa ff ff       	call   c0007529 <KiCreateSymlinkID()>
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b2f:	56                   	push   esi
c0007b30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b34:	52                   	push   edx
c0007b35:	6a 00                	push   0x0
c0007b37:	6a 08                	push   0x8
c0007b39:	53                   	push   ebx
c0007b3a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b3d:	83 c4 20             	add    esp,0x20
c0007b40:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b45:	75 5e                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b47:	85 c0                	test   eax,eax
c0007b49:	75 5a                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b4d:	83 ec 0c             	sub    esp,0xc
c0007b50:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b53:	55                   	push   ebp
c0007b54:	e8 27 8a ff ff       	call   c0000580 <strlen>
c0007b59:	31 d2                	xor    edx,edx
c0007b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5e:	55                   	push   ebp
c0007b5f:	52                   	push   edx
c0007b60:	50                   	push   eax
c0007b61:	53                   	push   ebx
c0007b62:	ff d7                	call   edi
c0007b64:	83 c4 14             	add    esp,0x14
c0007b67:	55                   	push   ebp
c0007b68:	89 c6                	mov    esi,eax
c0007b6a:	e8 11 8a ff ff       	call   c0000580 <strlen>
c0007b6f:	83 c4 10             	add    esp,0x10
c0007b72:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b76:	75 2d                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b78:	85 f6                	test   esi,esi
c0007b7a:	75 29                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b7c:	50                   	push   eax
c0007b7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b85:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b89:	e8 06 fa ff ff       	call   c0007594 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b91:	e8 6e 06 00 00       	call   c0008204 <File::close()>
c0007b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b9e:	83 c4 10             	add    esp,0x10
c0007ba1:	31 c0                	xor    eax,eax
c0007ba3:	eb 19                	jmp    c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ba5:	83 ec 0c             	sub    esp,0xc
c0007ba8:	53                   	push   ebx
c0007ba9:	e8 56 06 00 00       	call   c0008204 <File::close()>
c0007bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb6:	83 c4 10             	add    esp,0x10
c0007bb9:	b8 01 00 00 00       	mov    eax,0x1
c0007bbe:	83 c4 2c             	add    esp,0x2c
c0007bc1:	5b                   	pop    ebx
c0007bc2:	5e                   	pop    esi
c0007bc3:	5f                   	pop    edi
c0007bc4:	5d                   	pop    ebp
c0007bc5:	c3                   	ret    

c0007bc6 <File::read(unsigned long long, void*, int*)>:
c0007bc6:	53                   	push   ebx
c0007bc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd6:	83 f8 19             	cmp    eax,0x19
c0007bd9:	77 35                	ja     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bdb:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007be2:	85 c0                	test   eax,eax
c0007be4:	74 2a                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007be6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bec:	85 c0                	test   eax,eax
c0007bee:	74 20                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf4:	74 21                	je     c0007c17 <File::read(unsigned long long, void*, int*)+0x51>
c0007bf6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bfc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c0a:	5b                   	pop    ebx
c0007c0b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c0e:	ff e0                	jmp    eax
c0007c10:	b8 0b 00 00 00       	mov    eax,0xb
c0007c15:	eb 05                	jmp    c0007c1c <File::read(unsigned long long, void*, int*)+0x56>
c0007c17:	b8 05 00 00 00       	mov    eax,0x5
c0007c1c:	5b                   	pop    ebx
c0007c1d:	c3                   	ret    

c0007c1e <File::write(unsigned long long, void*, int*)>:
c0007c1e:	53                   	push   ebx
c0007c1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2e:	83 f8 19             	cmp    eax,0x19
c0007c31:	77 35                	ja     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c33:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c3a:	85 c0                	test   eax,eax
c0007c3c:	74 2a                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c3e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c44:	85 c0                	test   eax,eax
c0007c46:	74 20                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c4c:	74 21                	je     c0007c6f <File::write(unsigned long long, void*, int*)+0x51>
c0007c4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c54:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c62:	5b                   	pop    ebx
c0007c63:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c66:	ff e0                	jmp    eax
c0007c68:	b8 0b 00 00 00       	mov    eax,0xb
c0007c6d:	eb 05                	jmp    c0007c74 <File::write(unsigned long long, void*, int*)+0x56>
c0007c6f:	b8 05 00 00 00       	mov    eax,0x5
c0007c74:	5b                   	pop    ebx
c0007c75:	c3                   	ret    

c0007c76 <Directory::read(unsigned long long, void*, int*)>:
c0007c76:	53                   	push   ebx
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c86:	83 f8 19             	cmp    eax,0x19
c0007c89:	77 35                	ja     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c8b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c92:	85 c0                	test   eax,eax
c0007c94:	74 2a                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c96:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c9c:	85 c0                	test   eax,eax
c0007c9e:	74 20                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007ca4:	74 21                	je     c0007cc7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007ca8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cba:	5b                   	pop    ebx
c0007cbb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cbe:	ff e0                	jmp    eax
c0007cc0:	b8 0b 00 00 00       	mov    eax,0xb
c0007cc5:	eb 05                	jmp    c0007ccc <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cc7:	b8 05 00 00 00       	mov    eax,0x5
c0007ccc:	5b                   	pop    ebx
c0007ccd:	c3                   	ret    

c0007cce <Directory::write(unsigned long long, void*, int*)>:
c0007cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cd9:	b8 0b 00 00 00       	mov    eax,0xb
c0007cde:	83 fa 19             	cmp    edx,0x19
c0007ce1:	77 18                	ja     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ce3:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007cea:	85 d2                	test   edx,edx
c0007cec:	74 0d                	je     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cf5:	19 c0                	sbb    eax,eax
c0007cf7:	83 e0 0a             	and    eax,0xa
c0007cfa:	40                   	inc    eax
c0007cfb:	c3                   	ret    

c0007cfc <File::isAtty()>:
c0007cfc:	31 c0                	xor    eax,eax
c0007cfe:	c3                   	ret    
c0007cff:	90                   	nop

c0007d00 <Directory::isAtty()>:
c0007d00:	31 c0                	xor    eax,eax
c0007d02:	c3                   	ret    
c0007d03:	90                   	nop

c0007d04 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d04:	b8 0a 00 00 00       	mov    eax,0xa
c0007d09:	c3                   	ret    

c0007d0a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d0a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d0f:	c3                   	ret    

c0007d10 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d10:	31 c0                	xor    eax,eax
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <File::~File()>:
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c0007d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d22:	89 10                	mov    DWORD PTR [eax],edx
c0007d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d28:	83 ec 0c             	sub    esp,0xc
c0007d2b:	50                   	push   eax
c0007d2c:	e8 5d b1 00 00       	call   c0012e8e <UnixFile::~UnixFile()>
c0007d31:	83 c4 10             	add    esp,0x10
c0007d34:	90                   	nop
c0007d35:	83 c4 0c             	add    esp,0xc
c0007d38:	c3                   	ret    
c0007d39:	90                   	nop

c0007d3a <File::~File()>:
c0007d3a:	83 ec 0c             	sub    esp,0xc
c0007d3d:	83 ec 0c             	sub    esp,0xc
c0007d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d44:	e8 cd ff ff ff       	call   c0007d16 <File::~File()>
c0007d49:	83 c4 10             	add    esp,0x10
c0007d4c:	83 ec 08             	sub    esp,0x8
c0007d4f:	68 14 01 00 00       	push   0x114
c0007d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d58:	e8 5f 55 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0007d5d:	83 c4 10             	add    esp,0x10
c0007d60:	83 c4 0c             	add    esp,0xc
c0007d63:	c3                   	ret    

c0007d64 <Directory::~Directory()>:
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	ba a8 32 02 c0       	mov    edx,0xc00232a8
c0007d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d70:	89 10                	mov    DWORD PTR [eax],edx
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	83 ec 0c             	sub    esp,0xc
c0007d79:	50                   	push   eax
c0007d7a:	e8 0f b1 00 00       	call   c0012e8e <UnixFile::~UnixFile()>
c0007d7f:	83 c4 10             	add    esp,0x10
c0007d82:	90                   	nop
c0007d83:	83 c4 0c             	add    esp,0xc
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Directory::~Directory()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	83 ec 0c             	sub    esp,0xc
c0007d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d92:	e8 cd ff ff ff       	call   c0007d64 <Directory::~Directory()>
c0007d97:	83 c4 10             	add    esp,0x10
c0007d9a:	83 ec 08             	sub    esp,0x8
c0007d9d:	68 14 01 00 00       	push   0x114
c0007da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da6:	e8 11 55 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 0c             	add    esp,0xc
c0007db1:	c3                   	ret    

c0007db2 <Filesystem::Filesystem()>:
c0007db2:	ba 20 32 02 c0       	mov    edx,0xc0023220
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 10                	mov    DWORD PTR [eax],edx
c0007dbd:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dce:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007dd3:	90                   	nop
c0007dd4:	c3                   	ret    
c0007dd5:	90                   	nop

c0007dd6 <Filesystem::~Filesystem()>:
c0007dd6:	ba 20 32 02 c0       	mov    edx,0xc0023220
c0007ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddf:	89 10                	mov    DWORD PTR [eax],edx
c0007de1:	90                   	nop
c0007de2:	c3                   	ret    
c0007de3:	90                   	nop

c0007de4 <Filesystem::~Filesystem()>:
c0007de4:	83 ec 0c             	sub    esp,0xc
c0007de7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007deb:	e8 e6 ff ff ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c0007df0:	83 c4 04             	add    esp,0x4
c0007df3:	83 ec 08             	sub    esp,0x8
c0007df6:	6a 08                	push   0x8
c0007df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dfc:	e8 bb 54 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0007e01:	83 c4 10             	add    esp,0x10
c0007e04:	83 c4 0c             	add    esp,0xc
c0007e07:	c3                   	ret    

c0007e08 <Fs::getcwd(Process*, char*, int)>:
c0007e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e0c:	31 c0                	xor    eax,eax
c0007e0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e12:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e15:	7d 15                	jge    c0007e2c <Fs::getcwd(Process*, char*, int)+0x24>
c0007e17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e1b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e22:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e25:	84 c9                	test   cl,cl
c0007e27:	74 06                	je     c0007e2f <Fs::getcwd(Process*, char*, int)+0x27>
c0007e29:	40                   	inc    eax
c0007e2a:	eb e2                	jmp    c0007e0e <Fs::getcwd(Process*, char*, int)+0x6>
c0007e2c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e2f:	31 c0                	xor    eax,eax
c0007e31:	c3                   	ret    

c0007e32 <Fs::initVFS()>:
c0007e32:	83 ec 18             	sub    esp,0x18
c0007e35:	6a 08                	push   0x8
c0007e37:	e8 78 78 00 00       	call   c000f6b4 <malloc>
c0007e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e3f:	e8 40 45 01 00       	call   c001c384 <FAT::FAT()>
c0007e44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e4b:	e8 64 78 00 00       	call   c000f6b4 <malloc>
c0007e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e53:	e8 5a 54 01 00       	call   c001d2b2 <ISO9660::ISO9660()>
c0007e58:	83 c4 1c             	add    esp,0x1c
c0007e5b:	c3                   	ret    

c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e5c:	55                   	push   ebp
c0007e5d:	57                   	push   edi
c0007e5e:	56                   	push   esi
c0007e5f:	53                   	push   ebx
c0007e60:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e66:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e6d:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e74:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e7b:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e86:	68 00 04 00 00       	push   0x400
c0007e8b:	6a 00                	push   0x0
c0007e8d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e91:	57                   	push   edi
c0007e92:	e8 59 86 ff ff       	call   c00004f0 <memset>
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e9e:	75 0b                	jne    c0007eab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007ea0:	50                   	push   eax
c0007ea1:	50                   	push   eax
c0007ea2:	56                   	push   esi
c0007ea3:	57                   	push   edi
c0007ea4:	e8 a7 87 ff ff       	call   c0000650 <strcpy>
c0007ea9:	eb 45                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007eab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007eae:	83 f8 2f             	cmp    eax,0x2f
c0007eb1:	74 05                	je     c0007eb8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007eb3:	83 f8 5c             	cmp    eax,0x5c
c0007eb6:	75 19                	jne    c0007ed1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007eb8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007ebb:	3c 60                	cmp    al,0x60
c0007ebd:	7e 03                	jle    c0007ec2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007ebf:	83 e8 20             	sub    eax,0x20
c0007ec2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ec6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ecd:	50                   	push   eax
c0007ece:	50                   	push   eax
c0007ecf:	eb 18                	jmp    c0007ee9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007ed1:	50                   	push   eax
c0007ed2:	50                   	push   eax
c0007ed3:	55                   	push   ebp
c0007ed4:	57                   	push   edi
c0007ed5:	e8 76 87 ff ff       	call   c0000650 <strcpy>
c0007eda:	58                   	pop    eax
c0007edb:	5a                   	pop    edx
c0007edc:	68 75 4c 02 c0       	push   0xc0024c75
c0007ee1:	57                   	push   edi
c0007ee2:	e8 89 89 ff ff       	call   c0000870 <strcat>
c0007ee7:	59                   	pop    ecx
c0007ee8:	5d                   	pop    ebp
c0007ee9:	56                   	push   esi
c0007eea:	57                   	push   edi
c0007eeb:	e8 80 89 ff ff       	call   c0000870 <strcat>
c0007ef0:	83 c4 10             	add    esp,0x10
c0007ef3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007ef7:	3c 60                	cmp    al,0x60
c0007ef9:	7e 03                	jle    c0007efe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007efb:	83 e8 20             	sub    eax,0x20
c0007efe:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007f02:	be 03 00 00 00       	mov    esi,0x3
c0007f07:	88 03                	mov    BYTE PTR [ebx],al
c0007f09:	b8 03 00 00 00       	mov    eax,0x3
c0007f0e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007f15:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007f1b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007f1f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007f24:	89 fa                	mov    edx,edi
c0007f26:	0f be ea             	movsx  ebp,dl
c0007f29:	85 ed                	test   ebp,ebp
c0007f2b:	0f 84 a1 00 00 00    	je     c0007fd2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007f31:	8d 56 01             	lea    edx,[esi+0x1]
c0007f34:	83 fd 2f             	cmp    ebp,0x2f
c0007f37:	74 05                	je     c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007f39:	83 fd 5c             	cmp    ebp,0x5c
c0007f3c:	75 12                	jne    c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f3e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f43:	89 c5                	mov    ebp,eax
c0007f45:	74 09                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f47:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007f4b:	40                   	inc    eax
c0007f4c:	89 d6                	mov    esi,edx
c0007f4e:	eb cf                	jmp    c0007f1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f50:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007f55:	89 f9                	mov    ecx,edi
c0007f57:	0f be e9             	movsx  ebp,cl
c0007f5a:	75 61                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f5c:	83 fd 2e             	cmp    ebp,0x2e
c0007f5f:	75 5c                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f61:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f66:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f6b:	74 19                	je     c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f6d:	83 fd 2e             	cmp    ebp,0x2e
c0007f70:	74 55                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f72:	89 f2                	mov    edx,esi
c0007f74:	42                   	inc    edx
c0007f75:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f7a:	83 f9 2f             	cmp    ecx,0x2f
c0007f7d:	74 f5                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f7f:	83 f9 5c             	cmp    ecx,0x5c
c0007f82:	74 f0                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f84:	eb c6                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f86:	83 fd 2e             	cmp    ebp,0x2e
c0007f89:	74 3c                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f8b:	83 f8 03             	cmp    eax,0x3
c0007f8e:	74 bc                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f90:	42                   	inc    edx
c0007f91:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f96:	83 f9 2f             	cmp    ecx,0x2f
c0007f99:	74 f5                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f9b:	83 f9 5c             	cmp    ecx,0x5c
c0007f9e:	74 f0                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007fa0:	48                   	dec    eax
c0007fa1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fa5:	75 06                	jne    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fa7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fab:	eb f3                	jmp    c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007fad:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fb1:	74 07                	je     c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007fb3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fb7:	48                   	dec    eax
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fba:	40                   	inc    eax
c0007fbb:	eb 8f                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fbd:	83 fd 2f             	cmp    ebp,0x2f
c0007fc0:	74 8a                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc2:	83 fd 5c             	cmp    ebp,0x5c
c0007fc5:	74 85                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc7:	89 f9                	mov    ecx,edi
c0007fc9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007fcc:	40                   	inc    eax
c0007fcd:	e9 7a ff ff ff       	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fd6:	83 ec 0c             	sub    esp,0xc
c0007fd9:	53                   	push   ebx
c0007fda:	e8 a1 85 ff ff       	call   c0000580 <strlen>
c0007fdf:	83 c4 10             	add    esp,0x10
c0007fe2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007fe7:	74 1c                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fe9:	83 ec 0c             	sub    esp,0xc
c0007fec:	53                   	push   ebx
c0007fed:	e8 8e 85 ff ff       	call   c0000580 <strlen>
c0007ff2:	83 c4 10             	add    esp,0x10
c0007ff5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ffa:	74 09                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007ffc:	31 ff                	xor    edi,edi
c0007ffe:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008003:	eb 5c                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008005:	83 ec 0c             	sub    esp,0xc
c0008008:	53                   	push   ebx
c0008009:	e8 72 85 ff ff       	call   c0000580 <strlen>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008016:	74 e4                	je     c0007ffc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008018:	83 ec 0c             	sub    esp,0xc
c000801b:	53                   	push   ebx
c000801c:	e8 5f 85 ff ff       	call   c0000580 <strlen>
c0008021:	83 c4 10             	add    esp,0x10
c0008024:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008029:	eb ab                	jmp    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000802b:	52                   	push   edx
c000802c:	52                   	push   edx
c000802d:	53                   	push   ebx
c000802e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008032:	55                   	push   ebp
c0008033:	e8 18 86 ff ff       	call   c0000650 <strcpy>
c0008038:	59                   	pop    ecx
c0008039:	58                   	pop    eax
c000803a:	53                   	push   ebx
c000803b:	55                   	push   ebp
c000803c:	e8 a2 f8 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0008041:	83 c4 10             	add    esp,0x10
c0008044:	48                   	dec    eax
c0008045:	75 37                	jne    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008047:	50                   	push   eax
c0008048:	53                   	push   ebx
c0008049:	55                   	push   ebp
c000804a:	68 be 31 02 c0       	push   0xc00231be
c000804f:	e8 12 ef ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008054:	8d 47 01             	lea    eax,[edi+0x1]
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	83 ff 14             	cmp    edi,0x14
c000805d:	74 08                	je     c0008067 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000805f:	89 c7                	mov    edi,eax
c0008061:	85 f6                	test   esi,esi
c0008063:	75 c6                	jne    c000802b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008065:	eb 17                	jmp    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008067:	83 ec 0c             	sub    esp,0xc
c000806a:	bf 15 00 00 00       	mov    edi,0x15
c000806f:	68 d9 31 02 c0       	push   0xc00231d9
c0008074:	e8 97 7a 00 00       	call   c000fb10 <KePanic(char const*)>
c0008079:	83 c4 10             	add    esp,0x10
c000807c:	eb e3                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000807e:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008084:	5b                   	pop    ebx
c0008085:	5e                   	pop    esi
c0008086:	5f                   	pop    edi
c0008087:	5d                   	pop    ebp
c0008088:	c3                   	ret    
c0008089:	90                   	nop

c000808a <File::File(char const*, Process*, bool)>:
c000808a:	83 ec 1c             	sub    esp,0x1c
c000808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008091:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008099:	83 ec 08             	sub    esp,0x8
c000809c:	6a 00                	push   0x0
c000809e:	50                   	push   eax
c000809f:	e8 04 ac 00 00       	call   c0012ca8 <UnixFile::UnixFile(int)>
c00080a4:	83 c4 10             	add    esp,0x10
c00080a7:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c00080ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b0:	89 10                	mov    DWORD PTR [eax],edx
c00080b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b7:	85 c0                	test   eax,eax
c00080b9:	74 0f                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080bb:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00080c0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c4:	74 04                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080c6:	b0 01                	mov    al,0x1
c00080c8:	eb 02                	jmp    c00080cc <File::File(char const*, Process*, bool)+0x42>
c00080ca:	b0 00                	mov    al,0x0
c00080cc:	0f b6 c0             	movzx  eax,al
c00080cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080dd:	83 c2 0d             	add    edx,0xd
c00080e0:	50                   	push   eax
c00080e1:	51                   	push   ecx
c00080e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e6:	52                   	push   edx
c00080e7:	e8 70 fd ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ec:	83 c4 10             	add    esp,0x10
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fa:	83 c2 0d             	add    edx,0xd
c00080fd:	83 ec 04             	sub    esp,0x4
c0008100:	50                   	push   eax
c0008101:	52                   	push   edx
c0008102:	68 ff 31 02 c0       	push   0xc00231ff
c0008107:	e8 5a ee ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008113:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008116:	83 e8 41             	sub    eax,0x41
c0008119:	88 c2                	mov    dl,al
c000811b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000811f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008129:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008131:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008141:	85 c0                	test   eax,eax
c0008143:	74 3e                	je     c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008149:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000814f:	0f b6 c0             	movzx  eax,al
c0008152:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008159:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000815f:	85 c0                	test   eax,eax
c0008161:	75 20                	jne    c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008167:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816d:	0f b6 c0             	movzx  eax,al
c0008170:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008177:	83 ec 0c             	sub    esp,0xc
c000817a:	50                   	push   eax
c000817b:	e8 0a 28 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	90                   	nop
c0008184:	83 c4 1c             	add    esp,0x1c
c0008187:	c3                   	ret    

c0008188 <File::File(char const*, Process*)>:
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	6a 01                	push   0x1
c000818d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 ec fe ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <File::open(FileOpenMode)>:
c00081a6:	53                   	push   ebx
c00081a7:	b8 0b 00 00 00       	mov    eax,0xb
c00081ac:	83 ec 08             	sub    esp,0x8
c00081af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081ba:	83 fa 19             	cmp    edx,0x19
c00081bd:	77 40                	ja     c00081ff <File::open(FileOpenMode)+0x59>
c00081bf:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00081c6:	85 d2                	test   edx,edx
c00081c8:	74 35                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d0:	85 d2                	test   edx,edx
c00081d2:	74 2b                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081d4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081d8:	b8 06 00 00 00       	mov    eax,0x6
c00081dd:	75 20                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081df:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081eb:	51                   	push   ecx
c00081ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081ef:	51                   	push   ecx
c00081f0:	52                   	push   edx
c00081f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	85 c0                	test   eax,eax
c00081f9:	75 04                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081ff:	83 c4 08             	add    esp,0x8
c0008202:	5b                   	pop    ebx
c0008203:	c3                   	ret    

c0008204 <File::close()>:
c0008204:	53                   	push   ebx
c0008205:	b8 0b 00 00 00       	mov    eax,0xb
c000820a:	83 ec 08             	sub    esp,0x8
c000820d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008211:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008218:	83 f9 19             	cmp    ecx,0x19
c000821b:	77 41                	ja     c000825e <File::close()+0x5a>
c000821d:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008224:	85 db                	test   ebx,ebx
c0008226:	74 36                	je     c000825e <File::close()+0x5a>
c0008228:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000822f:	74 2d                	je     c000825e <File::close()+0x5a>
c0008231:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008235:	b8 05 00 00 00       	mov    eax,0x5
c000823a:	74 22                	je     c000825e <File::close()+0x5a>
c000823c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008240:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008247:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824d:	53                   	push   ebx
c000824e:	53                   	push   ebx
c000824f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008251:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008257:	50                   	push   eax
c0008258:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	83 c4 08             	add    esp,0x8
c0008261:	5b                   	pop    ebx
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::seek(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	b8 0b 00 00 00       	mov    eax,0xb
c000826a:	53                   	push   ebx
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008278:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::seek(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c0008299:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000829d:	b8 05 00 00 00       	mov    eax,0x5
c00082a2:	74 11                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::truncate(unsigned long long)>:
c00082ba:	56                   	push   esi
c00082bb:	b8 0b 00 00 00       	mov    eax,0xb
c00082c0:	53                   	push   ebx
c00082c1:	51                   	push   ecx
c00082c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d5:	83 fa 19             	cmp    edx,0x19
c00082d8:	77 31                	ja     c000830b <File::truncate(unsigned long long)+0x51>
c00082da:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082e1:	85 d2                	test   edx,edx
c00082e3:	74 26                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082eb:	85 d2                	test   edx,edx
c00082ed:	74 1c                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082f3:	b8 05 00 00 00       	mov    eax,0x5
c00082f8:	74 11                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fc:	53                   	push   ebx
c00082fd:	51                   	push   ecx
c00082fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008304:	52                   	push   edx
c0008305:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	5a                   	pop    edx
c000830c:	5b                   	pop    ebx
c000830d:	5e                   	pop    esi
c000830e:	c3                   	ret    
c000830f:	90                   	nop

c0008310 <File::tell(unsigned long long*)>:
c0008310:	83 ec 0c             	sub    esp,0xc
c0008313:	b8 0b 00 00 00       	mov    eax,0xb
c0008318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008323:	83 fa 19             	cmp    edx,0x19
c0008326:	77 34                	ja     c000835c <File::tell(unsigned long long*)+0x4c>
c0008328:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000832f:	85 d2                	test   edx,edx
c0008331:	74 29                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008333:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008339:	85 d2                	test   edx,edx
c000833b:	74 1f                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c000833d:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008341:	b8 05 00 00 00       	mov    eax,0x5
c0008346:	74 14                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008348:	50                   	push   eax
c0008349:	8b 02                	mov    eax,DWORD PTR [edx]
c000834b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000834f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008355:	52                   	push   edx
c0008356:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008359:	83 c4 10             	add    esp,0x10
c000835c:	83 c4 0c             	add    esp,0xc
c000835f:	c3                   	ret    

c0008360 <File::rewind()>:
c0008360:	83 ec 10             	sub    esp,0x10
c0008363:	6a 00                	push   0x0
c0008365:	6a 00                	push   0x0
c0008367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836b:	e8 f4 fe ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0008370:	83 c4 1c             	add    esp,0x1c
c0008373:	c3                   	ret    

c0008374 <File::unlink()>:
c0008374:	83 ec 0c             	sub    esp,0xc
c0008377:	b8 0b 00 00 00       	mov    eax,0xb
c000837c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008380:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008387:	83 f9 19             	cmp    ecx,0x19
c000838a:	77 2f                	ja     c00083bb <File::unlink()+0x47>
c000838c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 24                	je     c00083bb <File::unlink()+0x47>
c0008397:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839d:	85 c9                	test   ecx,ecx
c000839f:	74 1a                	je     c00083bb <File::unlink()+0x47>
c00083a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a5:	b8 06 00 00 00       	mov    eax,0x6
c00083aa:	75 0f                	jne    c00083bb <File::unlink()+0x47>
c00083ac:	50                   	push   eax
c00083ad:	83 c2 0d             	add    edx,0xd
c00083b0:	50                   	push   eax
c00083b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b3:	52                   	push   edx
c00083b4:	51                   	push   ecx
c00083b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083b8:	83 c4 10             	add    esp,0x10
c00083bb:	83 c4 0c             	add    esp,0xc
c00083be:	c3                   	ret    
c00083bf:	90                   	nop

c00083c0 <File::rename(char const*)>:
c00083c0:	83 ec 0c             	sub    esp,0xc
c00083c3:	b8 0b 00 00 00       	mov    eax,0xb
c00083c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 32                	ja     c000840a <File::rename(char const*)+0x4a>
c00083d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 27                	je     c000840a <File::rename(char const*)+0x4a>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 1d                	je     c000840a <File::rename(char const*)+0x4a>
c00083ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f1:	b8 06 00 00 00       	mov    eax,0x6
c00083f6:	75 12                	jne    c000840a <File::rename(char const*)+0x4a>
c00083f8:	50                   	push   eax
c00083f9:	83 c2 0d             	add    edx,0xd
c00083fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008402:	52                   	push   edx
c0008403:	51                   	push   ecx
c0008404:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008407:	83 c4 10             	add    esp,0x10
c000840a:	83 c4 0c             	add    esp,0xc
c000840d:	c3                   	ret    

c000840e <File::chfatattr(unsigned char, unsigned char)>:
c000840e:	57                   	push   edi
c000840f:	b8 0b 00 00 00       	mov    eax,0xb
c0008414:	56                   	push   esi
c0008415:	53                   	push   ebx
c0008416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000841e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008429:	83 f9 19             	cmp    ecx,0x19
c000842c:	77 37                	ja     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842e:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008435:	85 c9                	test   ecx,ecx
c0008437:	74 2c                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008439:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843f:	85 c9                	test   ecx,ecx
c0008441:	74 22                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008443:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008447:	b8 06 00 00 00       	mov    eax,0x6
c000844c:	75 17                	jne    c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000844e:	89 f0                	mov    eax,esi
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	0f b6 db             	movzx  ebx,bl
c0008455:	0f b6 f0             	movzx  esi,al
c0008458:	83 c2 0d             	add    edx,0xd
c000845b:	56                   	push   esi
c000845c:	53                   	push   ebx
c000845d:	52                   	push   edx
c000845e:	51                   	push   ecx
c000845f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <File::exists()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	31 c0                	xor    eax,eax
c000846f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008473:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847a:	83 f9 19             	cmp    ecx,0x19
c000847d:	77 24                	ja     c00084a3 <File::exists()+0x39>
c000847f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008486:	85 c9                	test   ecx,ecx
c0008488:	74 19                	je     c00084a3 <File::exists()+0x39>
c000848a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008490:	85 c9                	test   ecx,ecx
c0008492:	74 0f                	je     c00084a3 <File::exists()+0x39>
c0008494:	50                   	push   eax
c0008495:	83 c2 0d             	add    edx,0xd
c0008498:	50                   	push   eax
c0008499:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849b:	52                   	push   edx
c000849c:	51                   	push   ecx
c000849d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	83 c4 0c             	add    esp,0xc
c00084a6:	c3                   	ret    
c00084a7:	90                   	nop

c00084a8 <File::stat(unsigned long long*, bool*)>:
c00084a8:	56                   	push   esi
c00084a9:	53                   	push   ebx
c00084aa:	50                   	push   eax
c00084ab:	b8 0b 00 00 00       	mov    eax,0xb
c00084b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c3:	83 f9 19             	cmp    ecx,0x19
c00084c6:	77 3d                	ja     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084c8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00084cf:	85 c9                	test   ecx,ecx
c00084d1:	74 32                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084d9:	85 c9                	test   ecx,ecx
c00084db:	74 28                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e3:	74 13                	je     c00084f8 <File::stat(unsigned long long*, bool*)+0x50>
c00084e5:	83 ec 04             	sub    esp,0x4
c00084e8:	56                   	push   esi
c00084e9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084ef:	51                   	push   ecx
c00084f0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f6:	eb 0a                	jmp    c0008502 <File::stat(unsigned long long*, bool*)+0x5a>
c00084f8:	53                   	push   ebx
c00084f9:	83 c2 0d             	add    edx,0xd
c00084fc:	56                   	push   esi
c00084fd:	52                   	push   edx
c00084fe:	51                   	push   ecx
c00084ff:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	5a                   	pop    edx
c0008506:	5b                   	pop    ebx
c0008507:	5e                   	pop    esi
c0008508:	c3                   	ret    

c0008509 <Fs::setcwd(Process*, char*)>:
c0008509:	55                   	push   ebp
c000850a:	57                   	push   edi
c000850b:	56                   	push   esi
c000850c:	53                   	push   ebx
c000850d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008513:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851a:	6a 00                	push   0x0
c000851c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008522:	57                   	push   edi
c0008523:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000852e:	56                   	push   esi
c000852f:	e8 28 f9 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008534:	89 34 24             	mov    DWORD PTR [esp],esi
c0008537:	e8 44 80 ff ff       	call   c0000580 <strlen>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	83 f8 02             	cmp    eax,0x2
c0008542:	77 15                	ja     c0008559 <Fs::setcwd(Process*, char*)+0x50>
c0008544:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008549:	83 eb 41             	sub    ebx,0x41
c000854c:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c0008553:	85 c0                	test   eax,eax
c0008555:	75 1c                	jne    c0008573 <Fs::setcwd(Process*, char*)+0x6a>
c0008557:	eb 2f                	jmp    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c0008559:	83 ec 0c             	sub    esp,0xc
c000855c:	56                   	push   esi
c000855d:	e8 1e 80 ff ff       	call   c0000580 <strlen>
c0008562:	83 c4 10             	add    esp,0x10
c0008565:	83 f8 03             	cmp    eax,0x3
c0008568:	75 57                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c000856a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000856f:	75 50                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c0008571:	eb d1                	jmp    c0008544 <Fs::setcwd(Process*, char*)+0x3b>
c0008573:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857a:	75 0c                	jne    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c000857c:	83 ec 0c             	sub    esp,0xc
c000857f:	50                   	push   eax
c0008580:	e8 05 24 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	83 fb 19             	cmp    ebx,0x19
c000858b:	b8 03 00 00 00       	mov    eax,0x3
c0008590:	0f 87 c6 00 00 00    	ja     c000865c <Fs::setcwd(Process*, char*)+0x153>
c0008596:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c000859d:	b8 05 00 00 00       	mov    eax,0x5
c00085a2:	85 d2                	test   edx,edx
c00085a4:	0f 84 b2 00 00 00    	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085aa:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b1:	b8 06 00 00 00       	mov    eax,0x6
c00085b6:	0f 85 92 00 00 00    	jne    c000864e <Fs::setcwd(Process*, char*)+0x145>
c00085bc:	e9 9b 00 00 00       	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085c1:	83 ec 0c             	sub    esp,0xc
c00085c4:	68 14 01 00 00       	push   0x114
c00085c9:	e8 e6 70 00 00       	call   c000f6b4 <malloc>
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	55                   	push   ebp
c00085d2:	56                   	push   esi
c00085d3:	50                   	push   eax
c00085d4:	89 c3                	mov    ebx,eax
c00085d6:	e8 ad fb ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00085db:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e0:	83 c4 0c             	add    esp,0xc
c00085e3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e7:	50                   	push   eax
c00085e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ec:	50                   	push   eax
c00085ed:	53                   	push   ebx
c00085ee:	e8 b5 fe ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00085f3:	83 c4 10             	add    esp,0x10
c00085f6:	83 f8 02             	cmp    eax,0x2
c00085f9:	74 27                	je     c0008622 <Fs::setcwd(Process*, char*)+0x119>
c00085fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008600:	75 1c                	jne    c000861e <Fs::setcwd(Process*, char*)+0x115>
c0008602:	85 db                	test   ebx,ebx
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	74 51                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000860b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	53                   	push   ebx
c0008611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	b8 02 00 00 00       	mov    eax,0x2
c000861c:	eb 3e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000861e:	85 c0                	test   eax,eax
c0008620:	74 1c                	je     c000863e <Fs::setcwd(Process*, char*)+0x135>
c0008622:	85 db                	test   ebx,ebx
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	74 31                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000862b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	53                   	push   ebx
c0008631:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008634:	83 c4 10             	add    esp,0x10
c0008637:	b8 01 00 00 00       	mov    eax,0x1
c000863c:	eb 1e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000863e:	85 db                	test   ebx,ebx
c0008640:	74 0c                	je     c000864e <Fs::setcwd(Process*, char*)+0x145>
c0008642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	53                   	push   ebx
c0008648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	50                   	push   eax
c000864f:	50                   	push   eax
c0008650:	56                   	push   esi
c0008651:	57                   	push   edi
c0008652:	e8 f9 7f ff ff       	call   c0000650 <strcpy>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	31 c0                	xor    eax,eax
c000865c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008662:	5b                   	pop    ebx
c0008663:	5e                   	pop    esi
c0008664:	5f                   	pop    edi
c0008665:	5d                   	pop    ebp
c0008666:	c3                   	ret    
c0008667:	90                   	nop

c0008668 <Directory::Directory(char const*, Process*)>:
c0008668:	83 ec 0c             	sub    esp,0xc
c000866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866f:	83 ec 08             	sub    esp,0x8
c0008672:	6a 00                	push   0x0
c0008674:	50                   	push   eax
c0008675:	e8 2e a6 00 00       	call   c0012ca8 <UnixFile::UnixFile(int)>
c000867a:	83 c4 10             	add    esp,0x10
c000867d:	ba a8 32 02 c0       	mov    edx,0xc00232a8
c0008682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008686:	89 10                	mov    DWORD PTR [eax],edx
c0008688:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000868d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008691:	0f 95 c0             	setne  al
c0008694:	0f b6 c0             	movzx  eax,al
c0008697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a5:	83 c2 0d             	add    edx,0xd
c00086a8:	50                   	push   eax
c00086a9:	51                   	push   ecx
c00086aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086ae:	52                   	push   edx
c00086af:	e8 a8 f7 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b4:	83 c4 10             	add    esp,0x10
c00086b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086be:	83 e8 41             	sub    eax,0x41
c00086c1:	88 c2                	mov    dl,al
c00086c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086e9:	85 c0                	test   eax,eax
c00086eb:	74 3e                	je     c000872b <Directory::Directory(char const*, Process*)+0xc3>
c00086ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f7:	0f b6 c0             	movzx  eax,al
c00086fa:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008701:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008707:	85 c0                	test   eax,eax
c0008709:	75 20                	jne    c000872b <Directory::Directory(char const*, Process*)+0xc3>
c000870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000870f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008715:	0f b6 c0             	movzx  eax,al
c0008718:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000871f:	83 ec 0c             	sub    esp,0xc
c0008722:	50                   	push   eax
c0008723:	e8 62 22 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	90                   	nop
c000872c:	83 c4 0c             	add    esp,0xc
c000872f:	c3                   	ret    

c0008730 <Directory::open()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008744:	83 fa 19             	cmp    edx,0x19
c0008747:	77 3d                	ja     c0008786 <Directory::open()+0x56>
c0008749:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008750:	85 d2                	test   edx,edx
c0008752:	74 32                	je     c0008786 <Directory::open()+0x56>
c0008754:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875a:	85 d2                	test   edx,edx
c000875c:	74 28                	je     c0008786 <Directory::open()+0x56>
c000875e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008762:	b8 06 00 00 00       	mov    eax,0x6
c0008767:	75 1d                	jne    c0008786 <Directory::open()+0x56>
c0008769:	50                   	push   eax
c000876a:	8b 02                	mov    eax,DWORD PTR [edx]
c000876c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008772:	51                   	push   ecx
c0008773:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008776:	51                   	push   ecx
c0008777:	52                   	push   edx
c0008778:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877b:	83 c4 10             	add    esp,0x10
c000877e:	85 c0                	test   eax,eax
c0008780:	75 04                	jne    c0008786 <Directory::open()+0x56>
c0008782:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008786:	83 c4 08             	add    esp,0x8
c0008789:	5b                   	pop    ebx
c000878a:	c3                   	ret    
c000878b:	90                   	nop

c000878c <Directory::close()>:
c000878c:	53                   	push   ebx
c000878d:	b8 0b 00 00 00       	mov    eax,0xb
c0008792:	83 ec 08             	sub    esp,0x8
c0008795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008799:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a0:	83 f9 19             	cmp    ecx,0x19
c00087a3:	77 41                	ja     c00087e6 <Directory::close()+0x5a>
c00087a5:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 36                	je     c00087e6 <Directory::close()+0x5a>
c00087b0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b7:	74 2d                	je     c00087e6 <Directory::close()+0x5a>
c00087b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087bd:	b8 05 00 00 00       	mov    eax,0x5
c00087c2:	74 22                	je     c00087e6 <Directory::close()+0x5a>
c00087c4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087c8:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00087cf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d5:	53                   	push   ebx
c00087d6:	53                   	push   ebx
c00087d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087d9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087df:	50                   	push   eax
c00087e0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e3:	83 c4 10             	add    esp,0x10
c00087e6:	83 c4 08             	add    esp,0x8
c00087e9:	5b                   	pop    ebx
c00087ea:	c3                   	ret    
c00087eb:	90                   	nop

c00087ec <Directory::unlink()>:
c00087ec:	83 ec 0c             	sub    esp,0xc
c00087ef:	b8 0b 00 00 00       	mov    eax,0xb
c00087f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ff:	83 f9 19             	cmp    ecx,0x19
c0008802:	77 2f                	ja     c0008833 <Directory::unlink()+0x47>
c0008804:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 24                	je     c0008833 <Directory::unlink()+0x47>
c000880f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008815:	85 c9                	test   ecx,ecx
c0008817:	74 1a                	je     c0008833 <Directory::unlink()+0x47>
c0008819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000881d:	b8 06 00 00 00       	mov    eax,0x6
c0008822:	75 0f                	jne    c0008833 <Directory::unlink()+0x47>
c0008824:	50                   	push   eax
c0008825:	83 c2 0d             	add    edx,0xd
c0008828:	50                   	push   eax
c0008829:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882b:	52                   	push   edx
c000882c:	51                   	push   ecx
c000882d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008830:	83 c4 10             	add    esp,0x10
c0008833:	83 c4 0c             	add    esp,0xc
c0008836:	c3                   	ret    
c0008837:	90                   	nop

c0008838 <Directory::rename(char const*)>:
c0008838:	83 ec 0c             	sub    esp,0xc
c000883b:	b8 0b 00 00 00       	mov    eax,0xb
c0008840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008844:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884b:	83 f9 19             	cmp    ecx,0x19
c000884e:	77 32                	ja     c0008882 <Directory::rename(char const*)+0x4a>
c0008850:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008857:	85 c9                	test   ecx,ecx
c0008859:	74 27                	je     c0008882 <Directory::rename(char const*)+0x4a>
c000885b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008861:	85 c9                	test   ecx,ecx
c0008863:	74 1d                	je     c0008882 <Directory::rename(char const*)+0x4a>
c0008865:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008869:	b8 06 00 00 00       	mov    eax,0x6
c000886e:	75 12                	jne    c0008882 <Directory::rename(char const*)+0x4a>
c0008870:	50                   	push   eax
c0008871:	83 c2 0d             	add    edx,0xd
c0008874:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008876:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887a:	52                   	push   edx
c000887b:	51                   	push   ecx
c000887c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000887f:	83 c4 10             	add    esp,0x10
c0008882:	83 c4 0c             	add    esp,0xc
c0008885:	c3                   	ret    

c0008886 <Directory::exists()>:
c0008886:	83 ec 0c             	sub    esp,0xc
c0008889:	31 c0                	xor    eax,eax
c000888b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000888f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008896:	83 f9 19             	cmp    ecx,0x19
c0008899:	77 24                	ja     c00088bf <Directory::exists()+0x39>
c000889b:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088a2:	85 c9                	test   ecx,ecx
c00088a4:	74 19                	je     c00088bf <Directory::exists()+0x39>
c00088a6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ac:	85 c9                	test   ecx,ecx
c00088ae:	74 0f                	je     c00088bf <Directory::exists()+0x39>
c00088b0:	50                   	push   eax
c00088b1:	83 c2 0d             	add    edx,0xd
c00088b4:	50                   	push   eax
c00088b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b7:	52                   	push   edx
c00088b8:	51                   	push   ecx
c00088b9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 c4 0c             	add    esp,0xc
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <Directory::read(dirent*)>:
c00088c4:	83 ec 1c             	sub    esp,0x1c
c00088c7:	b8 0b 00 00 00       	mov    eax,0xb
c00088cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d7:	83 f9 19             	cmp    ecx,0x19
c00088da:	77 30                	ja     c000890c <Directory::read(dirent*)+0x48>
c00088dc:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 25                	je     c000890c <Directory::read(dirent*)+0x48>
c00088e7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088ee:	74 1c                	je     c000890c <Directory::read(dirent*)+0x48>
c00088f0:	83 ec 0c             	sub    esp,0xc
c00088f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088f9:	51                   	push   ecx
c00088fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088fe:	6a 00                	push   0x0
c0008900:	68 10 01 00 00       	push   0x110
c0008905:	52                   	push   edx
c0008906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008909:	83 c4 20             	add    esp,0x20
c000890c:	83 c4 1c             	add    esp,0x1c
c000890f:	c3                   	ret    

c0008910 <Directory::create()>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	b8 0b 00 00 00       	mov    eax,0xb
c0008918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008923:	83 f9 19             	cmp    ecx,0x19
c0008926:	77 2f                	ja     c0008957 <Directory::create()+0x47>
c0008928:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000892f:	85 c9                	test   ecx,ecx
c0008931:	74 24                	je     c0008957 <Directory::create()+0x47>
c0008933:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008939:	85 c9                	test   ecx,ecx
c000893b:	74 1a                	je     c0008957 <Directory::create()+0x47>
c000893d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008941:	b8 06 00 00 00       	mov    eax,0x6
c0008946:	75 0f                	jne    c0008957 <Directory::create()+0x47>
c0008948:	50                   	push   eax
c0008949:	83 c2 0d             	add    edx,0xd
c000894c:	50                   	push   eax
c000894d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000894f:	52                   	push   edx
c0008950:	51                   	push   ecx
c0008951:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	83 c4 0c             	add    esp,0xc
c000895a:	c3                   	ret    
c000895b:	90                   	nop

c000895c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895c:	b8 0a 00 00 00       	mov    eax,0xa
c0008961:	c3                   	ret    
c0008962:	66 90                	xchg   ax,ax

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 e0 11 00 00       	call   c0009b58 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba c4 32 02 c0       	mov    edx,0xc00232c4
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba c4 32 02 c0       	mov    edx,0xc00232c4
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 41 0f 00 00       	call   c00098f8 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 d9 48 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00089f8:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 29 e4 00 00       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 c4 1a 01 00       	call   c001a4df <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 d9 e2 00 00       	jmp    c0016d04 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 9e 1a 01 00       	call   c001a4df <HalMakeBeep(int)>
c0008a41:	89 f0                	mov    eax,esi
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 e1 e3 00 00       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 76 1a 01 00       	jmp    c001a4df <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0008a7a:	e8 1d df 00 00       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 0e 6c 00 00       	call   c000f6b4 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 00 33 02 c0       	push   0xc0023300
c0008ab9:	53                   	push   ebx
c0008aba:	e8 c9 f6 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 1f 33 02 c0       	push   0xc002331f
c0008ad3:	e8 38 70 00 00       	call   c000fb10 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 be f6 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 aa f9 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 35 33 02 c0       	push   0xc0023335
c0008b10:	e8 51 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 8a 6b 00 00       	call   c000f6b4 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 45 33 02 c0       	push   0xc0023345
c0008b77:	e8 ea e3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7a f6 ff ff       	call   c0008204 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 eb 6a 00 00       	call   c000f6b4 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 4e 33 02 c0       	push   0xc002334e
c0008bea:	50                   	push   eax
c0008beb:	e8 60 7a ff ff       	call   c0000650 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 3a 79 ff ff       	call   c0000580 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 4e 33 02 c0       	push   0xc002334e
c0008c6c:	50                   	push   eax
c0008c6d:	e8 fe 7b ff ff       	call   c0000870 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 e7 78 ff ff       	call   c0000580 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 4e 33 02 c0       	push   0xc002334e
c0008cbb:	50                   	push   eax
c0008cbc:	e8 af 7b ff ff       	call   c0000870 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 50 33 02 c0       	push   0xc0023350
c0008cf7:	e8 6a e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 65 33 02 c0       	push   0xc0023365
c0008d0d:	e8 54 e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 4c 78 ff ff       	call   c0000580 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 15 7b ff ff       	call   c0000870 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 0a 78 ff ff       	call   c0000580 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 69 33 02 c0       	push   0xc0023369
c0008d9c:	50                   	push   eax
c0008d9d:	e8 ce 7a ff ff       	call   c0000870 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 6e 33 02 c0       	push   0xc002336e
c0008de3:	e8 7e e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 7c 33 02 c0       	push   0xc002337c
c0008e01:	e8 60 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 85 33 02 c0       	push   0xc0023385
c0008e26:	e8 3b e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 a3 33 02 c0       	push   0xc00233a3
c0008e4a:	e8 17 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 b4 33 02 c0       	push   0xc00233b4
c0008e63:	e8 fe e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 c7 33 02 c0       	push   0xc00233c7
c0008e9b:	e8 c6 e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	d1 e0                	shl    eax,1
c0008f57:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f98:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f9f:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 d4 33 02 c0       	push   0xc00233d4
c0008fba:	e8 51 43 00 00       	call   c000d310 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 f9 33 02 c0       	push   0xc00233f9
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 36 4f 00 00       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 fb 47 00 00       	call   c000d7e2 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 39 44 00 00       	call   c000d42e <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 d4 33 02 c0       	push   0xc00233d4
c0009054:	e8 b7 42 00 00       	call   c000d310 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 f9 33 02 c0       	push   0xc00233f9
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 9c 4e 00 00       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 f0 43 00 00       	call   c000d480 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 90 43 00 00       	call   c000d42e <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 8e 0a 00 00       	call   c0009b58 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 58 34 02 c0       	mov    edx,0xc0023458
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba 58 34 02 c0       	mov    edx,0xc0023458
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 f1 07 00 00       	call   c00098f8 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 89 41 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009167:	01 d0                	add    eax,edx
c0009169:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000916f:	89 c2                	mov    edx,eax
c0009171:	c1 fa 1f             	sar    edx,0x1f
c0009174:	01 c1                	add    ecx,eax
c0009176:	11 d3                	adc    ebx,edx
c0009178:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000917d:	0f b6 c0             	movzx  eax,al
c0009180:	85 c0                	test   eax,eax
c0009182:	74 0c                	je     c0009190 <Clock::timeInSecondsLocal()+0x56>
c0009184:	b8 08 07 00 00       	mov    eax,0x708
c0009189:	ba 00 00 00 00       	mov    edx,0x0
c000918e:	eb 0a                	jmp    c000919a <Clock::timeInSecondsLocal()+0x60>
c0009190:	b8 00 00 00 00       	mov    eax,0x0
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	01 c8                	add    eax,ecx
c000919c:	11 da                	adc    edx,ebx
c000919e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091a1:	c9                   	leave  
c00091a2:	c3                   	ret    
c00091a3:	90                   	nop

c00091a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091a4:	55                   	push   ebp
c00091a5:	89 e5                	mov    ebp,esp
c00091a7:	56                   	push   esi
c00091a8:	53                   	push   ebx
c00091a9:	83 ec 10             	sub    esp,0x10
c00091ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091bd:	83 c0 2c             	add    eax,0x2c
c00091c0:	8b 30                	mov    esi,DWORD PTR [eax]
c00091c2:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c00091c7:	0f b6 d0             	movzx  edx,al
c00091ca:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c00091cf:	01 d0                	add    eax,edx
c00091d1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00091d7:	89 c2                	mov    edx,eax
c00091d9:	c1 fa 1f             	sar    edx,0x1f
c00091dc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091df:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091e2:	29 c1                	sub    ecx,eax
c00091e4:	19 d3                	sbb    ebx,edx
c00091e6:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00091eb:	0f b6 c0             	movzx  eax,al
c00091ee:	85 c0                	test   eax,eax
c00091f0:	74 0c                	je     c00091fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00091f2:	b8 08 07 00 00       	mov    eax,0x708
c00091f7:	ba 00 00 00 00       	mov    edx,0x0
c00091fc:	eb 0a                	jmp    c0009208 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091fe:	b8 00 00 00 00       	mov    eax,0x0
c0009203:	ba 00 00 00 00       	mov    edx,0x0
c0009208:	29 c1                	sub    ecx,eax
c000920a:	19 d3                	sbb    ebx,edx
c000920c:	89 c8                	mov    eax,ecx
c000920e:	89 da                	mov    edx,ebx
c0009210:	83 ec 04             	sub    esp,0x4
c0009213:	52                   	push   edx
c0009214:	50                   	push   eax
c0009215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009218:	ff d6                	call   esi
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009220:	5b                   	pop    ebx
c0009221:	5e                   	pop    esi
c0009222:	5d                   	pop    ebp
c0009223:	c3                   	ret    

c0009224 <KeDatetimeToSeconds(datetime_t)>:
c0009224:	55                   	push   ebp
c0009225:	89 e5                	mov    ebp,esp
c0009227:	53                   	push   ebx
c0009228:	83 ec 24             	sub    esp,0x24
c000922b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000922f:	2d 6c 07 00 00       	sub    eax,0x76c
c0009234:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009238:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000923b:	83 e8 01             	sub    eax,0x1
c000923e:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009241:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009248:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000924f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009256:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000925d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009260:	0f b6 c8             	movzx  ecx,al
c0009263:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009266:	0f b6 d0             	movzx  edx,al
c0009269:	89 d0                	mov    eax,edx
c000926b:	c1 e0 04             	shl    eax,0x4
c000926e:	29 d0                	sub    eax,edx
c0009270:	c1 e0 02             	shl    eax,0x2
c0009273:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009276:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009279:	0f b6 c0             	movzx  eax,al
c000927c:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009282:	01 d0                	add    eax,edx
c0009284:	89 c2                	mov    edx,eax
c0009286:	c1 fa 1f             	sar    edx,0x1f
c0009289:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000928c:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000928f:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009292:	0f b6 c0             	movzx  eax,al
c0009295:	83 e8 01             	sub    eax,0x1
c0009298:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000929b:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000929e:	0f b6 c0             	movzx  eax,al
c00092a1:	8b 04 85 20 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbe0]
c00092a8:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092ab:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092ae:	0f b6 c0             	movzx  eax,al
c00092b1:	83 f8 01             	cmp    eax,0x1
c00092b4:	76 7c                	jbe    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092b6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ba:	0f b7 c0             	movzx  eax,ax
c00092bd:	83 e0 03             	and    eax,0x3
c00092c0:	85 c0                	test   eax,eax
c00092c2:	75 6e                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092c4:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092c8:	0f b7 c8             	movzx  ecx,ax
c00092cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092d0:	89 c8                	mov    eax,ecx
c00092d2:	f7 e2                	mul    edx
c00092d4:	c1 ea 05             	shr    edx,0x5
c00092d7:	89 d0                	mov    eax,edx
c00092d9:	c1 e0 02             	shl    eax,0x2
c00092dc:	01 d0                	add    eax,edx
c00092de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	c1 e0 02             	shl    eax,0x2
c00092ea:	29 c1                	sub    ecx,eax
c00092ec:	89 c8                	mov    eax,ecx
c00092ee:	0f b7 c0             	movzx  eax,ax
c00092f1:	85 c0                	test   eax,eax
c00092f3:	75 39                	jne    c000932e <KeDatetimeToSeconds(datetime_t)+0x10a>
c00092f5:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f9:	0f b7 c0             	movzx  eax,ax
c00092fc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009302:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009307:	f7 e9                	imul   ecx
c0009309:	c1 fa 07             	sar    edx,0x7
c000930c:	89 c8                	mov    eax,ecx
c000930e:	c1 f8 1f             	sar    eax,0x1f
c0009311:	29 c2                	sub    edx,eax
c0009313:	89 d0                	mov    eax,edx
c0009315:	c1 e0 02             	shl    eax,0x2
c0009318:	01 d0                	add    eax,edx
c000931a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009321:	01 d0                	add    eax,edx
c0009323:	c1 e0 04             	shl    eax,0x4
c0009326:	29 c1                	sub    ecx,eax
c0009328:	89 ca                	mov    edx,ecx
c000932a:	85 d2                	test   edx,edx
c000932c:	75 04                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000932e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009332:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009336:	0f b7 c0             	movzx  eax,ax
c0009339:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 f8 46             	cmp    eax,0x46
c0009342:	0f 9f c0             	setg   al
c0009345:	0f b6 c0             	movzx  eax,al
c0009348:	85 c0                	test   eax,eax
c000934a:	0f 84 a4 00 00 00    	je     c00093f4 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009350:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009357:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000935b:	0f b7 d0             	movzx  edx,ax
c000935e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009361:	39 c2                	cmp    edx,eax
c0009363:	0f 8e b8 01 00 00    	jle    c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009369:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936c:	83 e0 03             	and    eax,0x3
c000936f:	85 c0                	test   eax,eax
c0009371:	75 6b                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009373:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009376:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000937b:	f7 e9                	imul   ecx
c000937d:	c1 fa 05             	sar    edx,0x5
c0009380:	89 c8                	mov    eax,ecx
c0009382:	c1 f8 1f             	sar    eax,0x1f
c0009385:	29 c2                	sub    edx,eax
c0009387:	89 d0                	mov    eax,edx
c0009389:	c1 e0 02             	shl    eax,0x2
c000938c:	01 d0                	add    eax,edx
c000938e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009395:	01 d0                	add    eax,edx
c0009397:	c1 e0 02             	shl    eax,0x2
c000939a:	29 c1                	sub    ecx,eax
c000939c:	89 ca                	mov    edx,ecx
c000939e:	85 d2                	test   edx,edx
c00093a0:	75 35                	jne    c00093d7 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c00093a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093a5:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ab:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093b0:	f7 e9                	imul   ecx
c00093b2:	c1 fa 07             	sar    edx,0x7
c00093b5:	89 c8                	mov    eax,ecx
c00093b7:	c1 f8 1f             	sar    eax,0x1f
c00093ba:	29 c2                	sub    edx,eax
c00093bc:	89 d0                	mov    eax,edx
c00093be:	c1 e0 02             	shl    eax,0x2
c00093c1:	01 d0                	add    eax,edx
c00093c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093ca:	01 d0                	add    eax,edx
c00093cc:	c1 e0 04             	shl    eax,0x4
c00093cf:	29 c1                	sub    ecx,eax
c00093d1:	89 ca                	mov    edx,ecx
c00093d3:	85 d2                	test   edx,edx
c00093d5:	75 07                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00093d7:	b8 6e 01 00 00       	mov    eax,0x16e
c00093dc:	eb 05                	jmp    c00093e3 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00093de:	b8 6d 01 00 00       	mov    eax,0x16d
c00093e3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e9:	83 c0 01             	add    eax,0x1
c00093ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093ef:	e9 63 ff ff ff       	jmp    c0009357 <KeDatetimeToSeconds(datetime_t)+0x133>
c00093f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f7:	83 f8 45             	cmp    eax,0x45
c00093fa:	0f 8f 21 01 00 00    	jg     c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009400:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009407:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000940b:	0f b7 d0             	movzx  edx,ax
c000940e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009411:	39 c2                	cmp    edx,eax
c0009413:	0f 8d 8b 00 00 00    	jge    c00094a4 <KeDatetimeToSeconds(datetime_t)+0x280>
c0009419:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000941c:	83 e0 03             	and    eax,0x3
c000941f:	85 c0                	test   eax,eax
c0009421:	75 6b                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009423:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009426:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000942b:	f7 e9                	imul   ecx
c000942d:	c1 fa 05             	sar    edx,0x5
c0009430:	89 c8                	mov    eax,ecx
c0009432:	c1 f8 1f             	sar    eax,0x1f
c0009435:	29 c2                	sub    edx,eax
c0009437:	89 d0                	mov    eax,edx
c0009439:	c1 e0 02             	shl    eax,0x2
c000943c:	01 d0                	add    eax,edx
c000943e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009445:	01 d0                	add    eax,edx
c0009447:	c1 e0 02             	shl    eax,0x2
c000944a:	29 c1                	sub    ecx,eax
c000944c:	89 ca                	mov    edx,ecx
c000944e:	85 d2                	test   edx,edx
c0009450:	75 35                	jne    c0009487 <KeDatetimeToSeconds(datetime_t)+0x263>
c0009452:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009455:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000945b:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009460:	f7 e9                	imul   ecx
c0009462:	c1 fa 07             	sar    edx,0x7
c0009465:	89 c8                	mov    eax,ecx
c0009467:	c1 f8 1f             	sar    eax,0x1f
c000946a:	29 c2                	sub    edx,eax
c000946c:	89 d0                	mov    eax,edx
c000946e:	c1 e0 02             	shl    eax,0x2
c0009471:	01 d0                	add    eax,edx
c0009473:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000947a:	01 d0                	add    eax,edx
c000947c:	c1 e0 04             	shl    eax,0x4
c000947f:	29 c1                	sub    ecx,eax
c0009481:	89 ca                	mov    edx,ecx
c0009483:	85 d2                	test   edx,edx
c0009485:	75 07                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009487:	b8 6e 01 00 00       	mov    eax,0x16e
c000948c:	eb 05                	jmp    c0009493 <KeDatetimeToSeconds(datetime_t)+0x26f>
c000948e:	b8 6d 01 00 00       	mov    eax,0x16d
c0009493:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009499:	83 e8 01             	sub    eax,0x1
c000949c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000949f:	e9 63 ff ff ff       	jmp    c0009407 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c00094a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094a7:	83 e0 03             	and    eax,0x3
c00094aa:	85 c0                	test   eax,eax
c00094ac:	75 6b                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094ae:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094b1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094b6:	f7 e9                	imul   ecx
c00094b8:	c1 fa 05             	sar    edx,0x5
c00094bb:	89 c8                	mov    eax,ecx
c00094bd:	c1 f8 1f             	sar    eax,0x1f
c00094c0:	29 c2                	sub    edx,eax
c00094c2:	89 d0                	mov    eax,edx
c00094c4:	c1 e0 02             	shl    eax,0x2
c00094c7:	01 d0                	add    eax,edx
c00094c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d0:	01 d0                	add    eax,edx
c00094d2:	c1 e0 02             	shl    eax,0x2
c00094d5:	29 c1                	sub    ecx,eax
c00094d7:	89 ca                	mov    edx,ecx
c00094d9:	85 d2                	test   edx,edx
c00094db:	75 35                	jne    c0009512 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00094dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094e0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094e6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094eb:	f7 e9                	imul   ecx
c00094ed:	c1 fa 07             	sar    edx,0x7
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	c1 f8 1f             	sar    eax,0x1f
c00094f5:	29 c2                	sub    edx,eax
c00094f7:	89 d0                	mov    eax,edx
c00094f9:	c1 e0 02             	shl    eax,0x2
c00094fc:	01 d0                	add    eax,edx
c00094fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009505:	01 d0                	add    eax,edx
c0009507:	c1 e0 04             	shl    eax,0x4
c000950a:	29 c1                	sub    ecx,eax
c000950c:	89 ca                	mov    edx,ecx
c000950e:	85 d2                	test   edx,edx
c0009510:	75 07                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009512:	b8 6e 01 00 00       	mov    eax,0x16e
c0009517:	eb 05                	jmp    c000951e <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009519:	b8 6d 01 00 00       	mov    eax,0x16d
c000951e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009524:	89 c2                	mov    edx,eax
c0009526:	c1 fa 1f             	sar    edx,0x1f
c0009529:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000952f:	6b c8 00             	imul   ecx,eax,0x0
c0009532:	01 d9                	add    ecx,ebx
c0009534:	bb 80 51 01 00       	mov    ebx,0x15180
c0009539:	f7 e3                	mul    ebx
c000953b:	01 d1                	add    ecx,edx
c000953d:	89 ca                	mov    edx,ecx
c000953f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009542:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009545:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009548:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000954b:	83 c4 24             	add    esp,0x24
c000954e:	5b                   	pop    ebx
c000954f:	5d                   	pop    ebp
c0009550:	c3                   	ret    
c0009551:	90                   	nop

c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009552:	55                   	push   ebp
c0009553:	89 e5                	mov    ebp,esp
c0009555:	56                   	push   esi
c0009556:	53                   	push   ebx
c0009557:	83 ec 20             	sub    esp,0x20
c000955a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000955d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009560:	e8 bf fc ff ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c0009565:	83 c4 08             	add    esp,0x8
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009571:	0f b6 d0             	movzx  edx,al
c0009574:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009579:	01 d0                	add    eax,edx
c000957b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009581:	89 c2                	mov    edx,eax
c0009583:	c1 fa 1f             	sar    edx,0x1f
c0009586:	29 c3                	sub    ebx,eax
c0009588:	19 d6                	sbb    esi,edx
c000958a:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000958f:	0f b6 c0             	movzx  eax,al
c0009592:	85 c0                	test   eax,eax
c0009594:	74 0c                	je     c00095a2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009596:	b8 08 07 00 00       	mov    eax,0x708
c000959b:	ba 00 00 00 00       	mov    edx,0x0
c00095a0:	eb 0a                	jmp    c00095ac <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c00095a2:	b8 00 00 00 00       	mov    eax,0x0
c00095a7:	ba 00 00 00 00       	mov    edx,0x0
c00095ac:	29 c3                	sub    ebx,eax
c00095ae:	19 d6                	sbb    esi,edx
c00095b0:	89 d8                	mov    eax,ebx
c00095b2:	89 f2                	mov    edx,esi
c00095b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095bd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095c0:	89 d0                	mov    eax,edx
c00095c2:	31 d2                	xor    edx,edx
c00095c4:	89 c3                	mov    ebx,eax
c00095c6:	89 d6                	mov    esi,edx
c00095c8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095cb:	80 e5 ff             	and    ch,0xff
c00095ce:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095d4:	83 e1 00             	and    ecx,0x0
c00095d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095da:	83 ec 0c             	sub    esp,0xc
c00095dd:	56                   	push   esi
c00095de:	53                   	push   ebx
c00095df:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095e5:	68 0e 34 02 c0       	push   0xc002340e
c00095ea:	e8 77 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00095ef:	83 c4 20             	add    esp,0x20
c00095f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00095f7:	83 c0 2c             	add    eax,0x2c
c00095fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00095fc:	83 ec 04             	sub    esp,0x4
c00095ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009602:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009605:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009608:	ff d0                	call   eax
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009610:	5b                   	pop    ebx
c0009611:	5e                   	pop    esi
c0009612:	5d                   	pop    ebp
c0009613:	c3                   	ret    

c0009614 <KeSecondsToDatetime(unsigned long long)>:
c0009614:	55                   	push   ebp
c0009615:	89 e5                	mov    ebp,esp
c0009617:	83 ec 48             	sub    esp,0x48
c000961a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000961d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009620:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009623:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009626:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009629:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000962c:	6a 00                	push   0x0
c000962e:	68 80 51 01 00       	push   0x15180
c0009633:	52                   	push   edx
c0009634:	50                   	push   eax
c0009635:	e8 5a 82 01 00       	call   c0021894 <__udivdi3>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009642:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009645:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009648:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000964b:	6a 00                	push   0x0
c000964d:	68 80 51 01 00       	push   0x15180
c0009652:	52                   	push   edx
c0009653:	50                   	push   eax
c0009654:	e8 3b 83 01 00       	call   c0021994 <__umoddi3>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000965f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009663:	79 0b                	jns    c0009670 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009665:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000966c:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009670:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009673:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009678:	89 c8                	mov    eax,ecx
c000967a:	f7 ea                	imul   edx
c000967c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000967f:	c1 f8 0b             	sar    eax,0xb
c0009682:	89 c2                	mov    edx,eax
c0009684:	89 c8                	mov    eax,ecx
c0009686:	c1 f8 1f             	sar    eax,0x1f
c0009689:	29 c2                	sub    edx,eax
c000968b:	89 d0                	mov    eax,edx
c000968d:	88 c2                	mov    dl,al
c000968f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009692:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009695:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009698:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000969d:	89 c8                	mov    eax,ecx
c000969f:	f7 ea                	imul   edx
c00096a1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096a4:	c1 f8 0b             	sar    eax,0xb
c00096a7:	89 c2                	mov    edx,eax
c00096a9:	89 c8                	mov    eax,ecx
c00096ab:	c1 f8 1f             	sar    eax,0x1f
c00096ae:	29 c2                	sub    edx,eax
c00096b0:	89 d0                	mov    eax,edx
c00096b2:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00096b8:	29 c1                	sub    ecx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096c2:	ba 89 88 88 88       	mov    edx,0x88888889
c00096c7:	89 c8                	mov    eax,ecx
c00096c9:	f7 ea                	imul   edx
c00096cb:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096ce:	c1 f8 05             	sar    eax,0x5
c00096d1:	89 c2                	mov    edx,eax
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	c1 f8 1f             	sar    eax,0x1f
c00096d8:	29 c2                	sub    edx,eax
c00096da:	89 d0                	mov    eax,edx
c00096dc:	88 c2                	mov    dl,al
c00096de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096e4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096e7:	ba 89 88 88 88       	mov    edx,0x88888889
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	f7 ea                	imul   edx
c00096f0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096f3:	c1 f8 05             	sar    eax,0x5
c00096f6:	89 c2                	mov    edx,eax
c00096f8:	89 c8                	mov    eax,ecx
c00096fa:	c1 f8 1f             	sar    eax,0x1f
c00096fd:	29 c2                	sub    edx,eax
c00096ff:	89 d0                	mov    eax,edx
c0009701:	c1 e0 04             	shl    eax,0x4
c0009704:	29 d0                	sub    eax,edx
c0009706:	c1 e0 02             	shl    eax,0x2
c0009709:	29 c1                	sub    ecx,eax
c000970b:	89 ca                	mov    edx,ecx
c000970d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009710:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009713:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009717:	79 20                	jns    c0009739 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000971c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009722:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009727:	89 c8                	mov    eax,ecx
c0009729:	f7 ea                	imul   edx
c000972b:	c1 fa 0f             	sar    edx,0xf
c000972e:	89 c8                	mov    eax,ecx
c0009730:	c1 f8 1f             	sar    eax,0x1f
c0009733:	29 c2                	sub    edx,eax
c0009735:	89 d0                	mov    eax,edx
c0009737:	eb 18                	jmp    c0009751 <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009739:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000973c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009741:	89 c8                	mov    eax,ecx
c0009743:	f7 ea                	imul   edx
c0009745:	c1 fa 0f             	sar    edx,0xf
c0009748:	89 c8                	mov    eax,ecx
c000974a:	c1 f8 1f             	sar    eax,0x1f
c000974d:	29 c2                	sub    edx,eax
c000974f:	89 d0                	mov    eax,edx
c0009751:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009754:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009757:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000975d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009760:	01 d0                	add    eax,edx
c0009762:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009768:	c1 e8 02             	shr    eax,0x2
c000976b:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009770:	f7 e2                	mul    edx
c0009772:	c1 ea 07             	shr    edx,0x7
c0009775:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009778:	29 d0                	sub    eax,edx
c000977a:	89 c1                	mov    ecx,eax
c000977c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977f:	c1 e8 02             	shr    eax,0x2
c0009782:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009787:	f7 e2                	mul    edx
c0009789:	89 d0                	mov    eax,edx
c000978b:	c1 e8 0b             	shr    eax,0xb
c000978e:	01 c1                	add    ecx,eax
c0009790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009793:	c1 e8 04             	shr    eax,0x4
c0009796:	ba 41 d6 72 00       	mov    edx,0x72d641
c000979b:	f7 e2                	mul    edx
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e8 04             	shr    eax,0x4
c00097a2:	29 c1                	sub    ecx,eax
c00097a4:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097a9:	89 c8                	mov    eax,ecx
c00097ab:	f7 e2                	mul    edx
c00097ad:	89 c8                	mov    eax,ecx
c00097af:	29 d0                	sub    eax,edx
c00097b1:	d1 e8                	shr    eax,1
c00097b3:	01 d0                	add    eax,edx
c00097b5:	c1 e8 08             	shr    eax,0x8
c00097b8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097be:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c3:	f7 e2                	mul    edx
c00097c5:	89 d1                	mov    ecx,edx
c00097c7:	c1 e9 05             	shr    ecx,0x5
c00097ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097cd:	89 d0                	mov    eax,edx
c00097cf:	c1 e0 03             	shl    eax,0x3
c00097d2:	01 d0                	add    eax,edx
c00097d4:	c1 e0 03             	shl    eax,0x3
c00097d7:	01 d0                	add    eax,edx
c00097d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e0:	01 c2                	add    edx,eax
c00097e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097e5:	c1 e8 02             	shr    eax,0x2
c00097e8:	01 d0                	add    eax,edx
c00097ea:	29 c1                	sub    ecx,eax
c00097ec:	89 ca                	mov    edx,ecx
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	01 d0                	add    eax,edx
c00097f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097f6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097f9:	89 d0                	mov    eax,edx
c00097fb:	c1 e0 02             	shl    eax,0x2
c00097fe:	01 d0                	add    eax,edx
c0009800:	83 c0 02             	add    eax,0x2
c0009803:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009808:	f7 e2                	mul    edx
c000980a:	89 d0                	mov    eax,edx
c000980c:	c1 e8 07             	shr    eax,0x7
c000980f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009812:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009815:	89 d0                	mov    eax,edx
c0009817:	c1 e0 03             	shl    eax,0x3
c000981a:	01 d0                	add    eax,edx
c000981c:	89 c2                	mov    edx,eax
c000981e:	c1 e2 04             	shl    edx,0x4
c0009821:	01 d0                	add    eax,edx
c0009823:	83 c0 02             	add    eax,0x2
c0009826:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000982b:	f7 e2                	mul    edx
c000982d:	c1 ea 02             	shr    edx,0x2
c0009830:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009833:	29 d0                	sub    eax,edx
c0009835:	83 c0 01             	add    eax,0x1
c0009838:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000983b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000983f:	77 07                	ja     c0009848 <KeSecondsToDatetime(unsigned long long)+0x234>
c0009841:	b8 02 00 00 00       	mov    eax,0x2
c0009846:	eb 05                	jmp    c000984d <KeSecondsToDatetime(unsigned long long)+0x239>
c0009848:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000984d:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009853:	89 d0                	mov    eax,edx
c0009855:	c1 e0 02             	shl    eax,0x2
c0009858:	01 d0                	add    eax,edx
c000985a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009861:	01 d0                	add    eax,edx
c0009863:	c1 e0 04             	shl    eax,0x4
c0009866:	89 c2                	mov    edx,eax
c0009868:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000986b:	01 c2                	add    edx,eax
c000986d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009871:	0f 96 c0             	setbe  al
c0009874:	0f b6 c0             	movzx  eax,al
c0009877:	01 d0                	add    eax,edx
c0009879:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000987c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000987f:	89 c2                	mov    edx,eax
c0009881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009884:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009888:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000988b:	83 c0 01             	add    eax,0x1
c000988e:	88 c2                	mov    dl,al
c0009890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009893:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009899:	88 c2                	mov    dl,al
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	88 10                	mov    BYTE PTR [eax],dl
c00098a0:	90                   	nop
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	c9                   	leave  
c00098a5:	c2 04 00             	ret    0x4

c00098a8 <Clock::timeInDatetimeLocal()>:
c00098a8:	55                   	push   ebp
c00098a9:	89 e5                	mov    ebp,esp
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	83 ec 0c             	sub    esp,0xc
c00098b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098b4:	e8 81 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098bf:	83 ec 04             	sub    esp,0x4
c00098c2:	52                   	push   edx
c00098c3:	50                   	push   eax
c00098c4:	51                   	push   ecx
c00098c5:	e8 4a fd ff ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c00098ca:	83 c4 0c             	add    esp,0xc
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	c9                   	leave  
c00098d1:	c2 04 00             	ret    0x4

c00098d4 <Device::hibernate()>:
c00098d4:	c3                   	ret    
c00098d5:	90                   	nop

c00098d6 <Device::wake()>:
c00098d6:	c3                   	ret    
c00098d7:	90                   	nop

c00098d8 <Device::detect()>:
c00098d8:	c3                   	ret    
c00098d9:	90                   	nop

c00098da <Device::disableLegacy()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::powerSaving(PowerSavingLevel)>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <DriverlessDevice::close(int, int, void*)>:
c00098de:	31 c0                	xor    eax,eax
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <DriverlessDevice::detect()>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::open(int, int, void*)>:
c00098e4:	83 ec 18             	sub    esp,0x18
c00098e7:	68 8c 34 02 c0       	push   0xc002348c
c00098ec:	e8 1f 62 00 00       	call   c000fb10 <KePanic(char const*)>
c00098f1:	83 c8 ff             	or     eax,0xffffffff
c00098f4:	83 c4 1c             	add    esp,0x1c
c00098f7:	c3                   	ret    

c00098f8 <Device::~Device()>:
c00098f8:	ba 30 35 02 c0       	mov    edx,0xc0023530
c00098fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009901:	89 10                	mov    DWORD PTR [eax],edx
c0009903:	90                   	nop
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::~Device()>:
c0009906:	83 ec 0c             	sub    esp,0xc
c0009909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000990d:	e8 e6 ff ff ff       	call   c00098f8 <Device::~Device()>
c0009912:	83 c4 04             	add    esp,0x4
c0009915:	83 ec 08             	sub    esp,0x8
c0009918:	68 58 01 00 00       	push   0x158
c000991d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009921:	e8 96 39 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009926:	83 c4 10             	add    esp,0x10
c0009929:	83 c4 0c             	add    esp,0xc
c000992c:	c3                   	ret    
c000992d:	90                   	nop

c000992e <Device::findAndLoadDriver()>:
c000992e:	c7 44 24 04 aa 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc00234aa
c0009936:	e9 2b d6 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000993b:	90                   	nop

c000993c <Device::preOpenPCI(PCIDeviceInfo)>:
c000993c:	57                   	push   edi
c000993d:	b9 09 00 00 00       	mov    ecx,0x9
c0009942:	56                   	push   esi
c0009943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000994b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009955:	81 c7 18 01 00 00    	add    edi,0x118
c000995b:	fc                   	cld    
c000995c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000995e:	5e                   	pop    esi
c000995f:	5f                   	pop    edi
c0009960:	c3                   	ret    
c0009961:	90                   	nop

c0009962 <Device::preOpenACPI(void*, char*, char*)>:
c0009962:	57                   	push   edi
c0009963:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009968:	56                   	push   esi
c0009969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009971:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000997f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009985:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000998b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000998d:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009993:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009997:	b9 0e 00 00 00       	mov    ecx,0xe
c000999c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000999e:	5e                   	pop    esi
c000999f:	5f                   	pop    edi
c00099a0:	c3                   	ret    
c00099a1:	90                   	nop

c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a2:	53                   	push   ebx
c00099a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b3:	0f b6 c0             	movzx  eax,al
c00099b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099be:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	5b                   	pop    ebx
c00099c7:	e9 c7 0f 01 00       	jmp    c001a993 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099cc <Device::getParent()>:
c00099cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f1:	e9 0e 11 01 00       	jmp    c001ab04 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099f6 <Device::addChild(Device*)>:
c00099f6:	53                   	push   ebx
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a10:	85 d2                	test   edx,edx
c0009a12:	74 04                	je     c0009a18 <Device::addChild(Device*)+0x22>
c0009a14:	89 d3                	mov    ebx,edx
c0009a16:	eb f6                	jmp    c0009a0e <Device::addChild(Device*)+0x18>
c0009a18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a1b:	83 ec 0c             	sub    esp,0xc
c0009a1e:	6a 08                	push   0x8
c0009a20:	e8 8f 5c 00 00       	call   c000f6b4 <malloc>
c0009a25:	89 03                	mov    DWORD PTR [ebx],eax
c0009a27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a34:	83 c4 18             	add    esp,0x18
c0009a37:	5b                   	pop    ebx
c0009a38:	c3                   	ret    
c0009a39:	90                   	nop

c0009a3a <Device::removeAllChildren()>:
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	52                   	push   edx
c0009a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a4a:	74 17                	je     c0009a63 <Device::removeAllChildren()+0x29>
c0009a4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a4f:	85 c0                	test   eax,eax
c0009a51:	74 0c                	je     c0009a5f <Device::removeAllChildren()+0x25>
c0009a53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	50                   	push   eax
c0009a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a61:	eb e4                	jmp    c0009a47 <Device::removeAllChildren()+0xd>
c0009a63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a7c:	58                   	pop    eax
c0009a7d:	5b                   	pop    ebx
c0009a7e:	5e                   	pop    esi
c0009a7f:	c3                   	ret    

c0009a80 <Device::hibernateAll()>:
c0009a80:	53                   	push   ebx
c0009a81:	83 ec 14             	sub    esp,0x14
c0009a84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8a:	53                   	push   ebx
c0009a8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9a:	74 0f                	je     c0009aab <Device::hibernateAll()+0x2b>
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa2:	e8 d9 ff ff ff       	call   c0009a80 <Device::hibernateAll()>
c0009aa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aa9:	eb e9                	jmp    c0009a94 <Device::hibernateAll()+0x14>
c0009aab:	83 c4 08             	add    esp,0x8
c0009aae:	5b                   	pop    ebx
c0009aaf:	c3                   	ret    

c0009ab0 <Device::wakeAll()>:
c0009ab0:	53                   	push   ebx
c0009ab1:	83 ec 14             	sub    esp,0x14
c0009ab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aba:	53                   	push   ebx
c0009abb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009abe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ac4:	83 c4 10             	add    esp,0x10
c0009ac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aca:	74 0f                	je     c0009adb <Device::wakeAll()+0x2b>
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad2:	e8 d9 ff ff ff       	call   c0009ab0 <Device::wakeAll()>
c0009ad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ad9:	eb e9                	jmp    c0009ac4 <Device::wakeAll()+0x14>
c0009adb:	83 c4 08             	add    esp,0x8
c0009ade:	5b                   	pop    ebx
c0009adf:	c3                   	ret    

c0009ae0 <Device::detectAll()>:
c0009ae0:	53                   	push   ebx
c0009ae1:	83 ec 14             	sub    esp,0x14
c0009ae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aea:	53                   	push   ebx
c0009aeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009aee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009afa:	74 0f                	je     c0009b0b <Device::detectAll()+0x2b>
c0009afc:	83 ec 0c             	sub    esp,0xc
c0009aff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b02:	e8 d9 ff ff ff       	call   c0009ae0 <Device::detectAll()>
c0009b07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b09:	eb e9                	jmp    c0009af4 <Device::detectAll()+0x14>
c0009b0b:	83 c4 08             	add    esp,0x8
c0009b0e:	5b                   	pop    ebx
c0009b0f:	c3                   	ret    

c0009b10 <Device::disableLegacyAll()>:
c0009b10:	c3                   	ret    
c0009b11:	90                   	nop

c0009b12 <Device::loadDriversForAll()>:
c0009b12:	c3                   	ret    
c0009b13:	90                   	nop

c0009b14 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b14:	56                   	push   esi
c0009b15:	53                   	push   ebx
c0009b16:	83 ec 0c             	sub    esp,0xc
c0009b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b23:	56                   	push   esi
c0009b24:	53                   	push   ebx
c0009b25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b34:	74 0f                	je     c0009b45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b36:	52                   	push   edx
c0009b37:	52                   	push   edx
c0009b38:	56                   	push   esi
c0009b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b3c:	e8 d3 ff ff ff       	call   c0009b14 <Device::powerSavingAll(PowerSavingLevel)>
c0009b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b43:	eb e9                	jmp    c0009b2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b45:	58                   	pop    eax
c0009b46:	5b                   	pop    ebx
c0009b47:	5e                   	pop    esi
c0009b48:	c3                   	ret    
c0009b49:	90                   	nop

c0009b4a <Device::setName(char const*)>:
c0009b4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b52:	e9 f9 6a ff ff       	jmp    c0000650 <strcpy>
c0009b57:	90                   	nop

c0009b58 <Device::Device(char const*)>:
c0009b58:	83 ec 1c             	sub    esp,0x1c
c0009b5b:	ba 30 35 02 c0       	mov    edx,0xc0023530
c0009b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b64:	89 10                	mov    DWORD PTR [eax],edx
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b9e:	83 ec 08             	sub    esp,0x8
c0009ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba9:	e8 9c ff ff ff       	call   c0009b4a <Device::setName(char const*)>
c0009bae:	83 c4 10             	add    esp,0x10
c0009bb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bb9:	83 ec 0c             	sub    esp,0xc
c0009bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc0:	e8 ef 5a 00 00       	call   c000f6b4 <malloc>
c0009bc5:	83 c4 10             	add    esp,0x10
c0009bc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009be9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c44:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c4e:	90                   	nop
c0009c4f:	83 c4 1c             	add    esp,0x1c
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <Device::getName()>:
c0009c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c58:	05 d0 00 00 00       	add    eax,0xd0
c0009c5d:	c3                   	ret    

c0009c5e <Device::closeAll()>:
c0009c5e:	53                   	push   ebx
c0009c5f:	83 ec 08             	sub    esp,0x8
c0009c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c66:	53                   	push   ebx
c0009c67:	e8 e8 ff ff ff       	call   c0009c54 <Device::getName()>
c0009c6c:	52                   	push   edx
c0009c6d:	50                   	push   eax
c0009c6e:	68 e4 34 02 c0       	push   0xc00234e4
c0009c73:	e8 ee d2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7a:	6a 00                	push   0x0
c0009c7c:	6a 00                	push   0x0
c0009c7e:	6a 00                	push   0x0
c0009c80:	53                   	push   ebx
c0009c81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c8a:	83 c4 20             	add    esp,0x20
c0009c8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c90:	74 12                	je     c0009ca4 <Device::closeAll()+0x46>
c0009c92:	83 ec 0c             	sub    esp,0xc
c0009c95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c98:	e8 c1 ff ff ff       	call   c0009c5e <Device::closeAll()>
c0009c9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c9f:	83 c4 10             	add    esp,0x10
c0009ca2:	eb e9                	jmp    c0009c8d <Device::closeAll()+0x2f>
c0009ca4:	83 c4 08             	add    esp,0x8
c0009ca7:	5b                   	pop    ebx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <DriverlessDevice::DriverlessDevice(char const*)>:
c0009caa:	83 ec 0c             	sub    esp,0xc
c0009cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb1:	83 ec 08             	sub    esp,0x8
c0009cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb8:	50                   	push   eax
c0009cb9:	e8 9a fe ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009cbe:	83 c4 10             	add    esp,0x10
c0009cc1:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	89 10                	mov    DWORD PTR [eax],edx
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cda:	90                   	nop
c0009cdb:	83 c4 0c             	add    esp,0xc
c0009cde:	c3                   	ret    
c0009cdf:	90                   	nop

c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce0:	57                   	push   edi
c0009ce1:	56                   	push   esi
c0009ce2:	53                   	push   ebx
c0009ce3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ce7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009ceb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cf5:	75 0c                	jne    c0009d03 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cf7:	52                   	push   edx
c0009cf8:	52                   	push   edx
c0009cf9:	53                   	push   ebx
c0009cfa:	56                   	push   esi
c0009cfb:	e8 0c 7e 01 00       	call   c0021b0c <LinkedList<Device>::addElement(Device*)>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d0c:	74 12                	je     c0009d20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d0e:	50                   	push   eax
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d14:	e8 c7 ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	eb e9                	jmp    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d20:	5b                   	pop    ebx
c0009d21:	5e                   	pop    esi
c0009d22:	5f                   	pop    edi
c0009d23:	c3                   	ret    

c0009d24 <getDevicesOfType(DeviceType)>:
c0009d24:	53                   	push   ebx
c0009d25:	83 ec 14             	sub    esp,0x14
c0009d28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d2c:	53                   	push   ebx
c0009d2d:	e8 b6 7e 01 00       	call   c0021be8 <LinkedList<Device>::LinkedList()>
c0009d32:	83 c4 0c             	add    esp,0xc
c0009d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d39:	53                   	push   ebx
c0009d3a:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c0009d40:	e8 9b ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d45:	83 c4 18             	add    esp,0x18
c0009d48:	89 d8                	mov    eax,ebx
c0009d4a:	5b                   	pop    ebx
c0009d4b:	c2 04 00             	ret    0x4
c0009d4e:	66 90                	xchg   ax,ax

c0009d50 <HardDiskController::HardDiskController(char const*)>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d57:	83 ec 08             	sub    esp,0x8
c0009d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5e:	50                   	push   eax
c0009d5f:	e8 f4 fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009d64:	83 c4 10             	add    esp,0x10
c0009d67:	ba 88 35 02 c0       	mov    edx,0xc0023588
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	89 10                	mov    DWORD PTR [eax],edx
c0009d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d76:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop
c0009d86:	66 90                	xchg   ax,ax

c0009d88 <HardDiskController::~HardDiskController()>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	ba 88 35 02 c0       	mov    edx,0xc0023588
c0009d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d94:	89 10                	mov    DWORD PTR [eax],edx
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	83 ec 0c             	sub    esp,0xc
c0009d9d:	50                   	push   eax
c0009d9e:	e8 55 fb ff ff       	call   c00098f8 <Device::~Device()>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	90                   	nop
c0009da7:	83 c4 0c             	add    esp,0xc
c0009daa:	c3                   	ret    
c0009dab:	90                   	nop

c0009dac <HardDiskController::~HardDiskController()>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db6:	e8 cd ff ff ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	83 ec 08             	sub    esp,0x8
c0009dc1:	68 58 01 00 00       	push   0x158
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 ed 34 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 c4 0c             	add    esp,0xc
c0009dd5:	c3                   	ret    

c0009dd6 <PhysicalDisk::eject()>:
c0009dd6:	83 c8 ff             	or     eax,0xffffffff
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de1:	83 ec 08             	sub    esp,0x8
c0009de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de8:	50                   	push   eax
c0009de9:	e8 6a fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009dee:	83 c4 10             	add    esp,0x10
c0009df1:	ba b4 35 02 c0       	mov    edx,0xc00235b4
c0009df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfa:	89 10                	mov    DWORD PTR [eax],edx
c0009dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e00:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e28:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e3c:	90                   	nop
c0009e3d:	83 c4 0c             	add    esp,0xc
c0009e40:	c3                   	ret    
c0009e41:	90                   	nop

c0009e42 <PhysicalDisk::startCache()>:
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	83 ec 10             	sub    esp,0x10
c0009e47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4b:	6a 44                	push   0x44
c0009e4d:	e8 62 58 00 00       	call   c000f6b4 <malloc>
c0009e52:	89 c6                	mov    esi,eax
c0009e54:	58                   	pop    eax
c0009e55:	5a                   	pop    edx
c0009e56:	53                   	push   ebx
c0009e57:	56                   	push   esi
c0009e58:	e8 d3 13 00 00       	call   c000b230 <VCache::VCache(PhysicalDisk*)>
c0009e5d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e63:	83 c4 14             	add    esp,0x14
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	c3                   	ret    
c0009e69:	90                   	nop

c0009e6a <PhysicalDisk::~PhysicalDisk()>:
c0009e6a:	83 ec 0c             	sub    esp,0xc
c0009e6d:	ba b4 35 02 c0       	mov    edx,0xc00235b4
c0009e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e76:	89 10                	mov    DWORD PTR [eax],edx
c0009e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7c:	83 ec 0c             	sub    esp,0xc
c0009e7f:	50                   	push   eax
c0009e80:	e8 73 fa ff ff       	call   c00098f8 <Device::~Device()>
c0009e85:	83 c4 10             	add    esp,0x10
c0009e88:	90                   	nop
c0009e89:	83 c4 0c             	add    esp,0xc
c0009e8c:	c3                   	ret    
c0009e8d:	90                   	nop

c0009e8e <PhysicalDisk::~PhysicalDisk()>:
c0009e8e:	83 ec 0c             	sub    esp,0xc
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e98:	e8 cd ff ff ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	68 6c 01 00 00       	push   0x16c
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	e8 0b 34 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	83 c4 0c             	add    esp,0xc
c0009eb7:	c3                   	ret    

c0009eb8 <startGUI(void*)>:
c0009eb8:	55                   	push   ebp
c0009eb9:	89 e5                	mov    ebp,esp
c0009ebb:	53                   	push   ebx
c0009ebc:	83 ec 04             	sub    esp,0x4
c0009ebf:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009ec7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009ecc:	85 c0                	test   eax,eax
c0009ece:	75 01                	jne    c0009ed1 <startGUI(void*)+0x19>
c0009ed0:	fb                   	sti    
c0009ed1:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009ed7:	83 ec 08             	sub    esp,0x8
c0009eda:	6a 01                	push   0x1
c0009edc:	68 e4 35 02 c0       	push   0xc00235e4
c0009ee1:	e8 c1 c1 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c0009ee6:	83 c4 10             	add    esp,0x10
c0009ee9:	83 ec 08             	sub    esp,0x8
c0009eec:	53                   	push   ebx
c0009eed:	50                   	push   eax
c0009eee:	e8 15 c4 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	6a 01                	push   0x1
c0009f01:	68 fe 35 02 c0       	push   0xc00235fe
c0009f06:	e8 9c c1 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c0009f0b:	83 c4 10             	add    esp,0x10
c0009f0e:	83 ec 08             	sub    esp,0x8
c0009f11:	53                   	push   ebx
c0009f12:	50                   	push   eax
c0009f13:	e8 f0 c3 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c0009f18:	83 c4 10             	add    esp,0x10
c0009f1b:	eb fe                	jmp    c0009f1b <startGUI(void*)+0x63>

c0009f1d <startGUIVESA(void*)>:
c0009f1d:	55                   	push   ebp
c0009f1e:	89 e5                	mov    ebp,esp
c0009f20:	53                   	push   ebx
c0009f21:	83 ec 04             	sub    esp,0x4
c0009f24:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009f2c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009f31:	85 c0                	test   eax,eax
c0009f33:	75 01                	jne    c0009f36 <startGUIVESA(void*)+0x19>
c0009f35:	fb                   	sti    
c0009f36:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f3c:	83 ec 08             	sub    esp,0x8
c0009f3f:	6a 01                	push   0x1
c0009f41:	68 1c 36 02 c0       	push   0xc002361c
c0009f46:	e8 5c c1 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c0009f4b:	83 c4 10             	add    esp,0x10
c0009f4e:	83 ec 08             	sub    esp,0x8
c0009f51:	53                   	push   ebx
c0009f52:	50                   	push   eax
c0009f53:	e8 b0 c3 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c0009f58:	83 c4 10             	add    esp,0x10
c0009f5b:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	6a 01                	push   0x1
c0009f66:	68 fe 35 02 c0       	push   0xc00235fe
c0009f6b:	e8 37 c1 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	83 ec 08             	sub    esp,0x8
c0009f76:	53                   	push   ebx
c0009f77:	50                   	push   eax
c0009f78:	e8 8b c3 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c0009f7d:	83 c4 10             	add    esp,0x10
c0009f80:	eb fe                	jmp    c0009f80 <startGUIVESA(void*)+0x63>

c0009f82 <sendKeyToTerminal(unsigned char)>:
c0009f82:	55                   	push   ebp
c0009f83:	89 e5                	mov    ebp,esp
c0009f85:	83 ec 28             	sub    esp,0x28
c0009f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f8e:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c0009f93:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f97:	83 ec 08             	sub    esp,0x8
c0009f9a:	52                   	push   edx
c0009f9b:	50                   	push   eax
c0009f9c:	e8 9b 88 00 00       	call   c001283c <VgaText::receiveKey(unsigned char)>
c0009fa1:	83 c4 10             	add    esp,0x10
c0009fa4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fa8:	83 f8 0a             	cmp    eax,0xa
c0009fab:	74 16                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb1:	83 f8 03             	cmp    eax,0x3
c0009fb4:	74 0d                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fba:	83 f8 1c             	cmp    eax,0x1c
c0009fbd:	0f 85 92 00 00 00    	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc3:	fa                   	cli    
c0009fc4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009fc9:	83 c0 01             	add    eax,0x1
c0009fcc:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0009fd1:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0009fd6:	83 c0 01             	add    eax,0x1
c0009fd9:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0009fde:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009fe3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fe6:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009ff0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff4:	74 1f                	je     c000a015 <sendKeyToTerminal(unsigned char)+0x93>
c0009ff6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ff9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009ffc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a005:	83 ec 0c             	sub    esp,0xc
c000a008:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00b:	e8 8c cf 00 00       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	eb db                	jmp    c0009ff0 <sendKeyToTerminal(unsigned char)+0x6e>
c000a015:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a01a:	83 e8 01             	sub    eax,0x1
c000a01d:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000a022:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a027:	85 c0                	test   eax,eax
c000a029:	75 18                	jne    c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02b:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c000a030:	85 c0                	test   eax,eax
c000a032:	74 0f                	je     c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a034:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000a03e:	e8 01 cc 00 00       	call   c0016c44 <schedule()>
c000a043:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a04b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a050:	85 c0                	test   eax,eax
c000a052:	75 01                	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c000a054:	fb                   	sti    
c000a055:	90                   	nop
c000a056:	c9                   	leave  
c000a057:	c3                   	ret    

c000a058 <sendKeyboardToken(KeyboardToken)>:
c000a058:	55                   	push   ebp
c000a059:	89 e5                	mov    ebp,esp
c000a05b:	83 ec 18             	sub    esp,0x18
c000a05e:	e8 cc 63 00 00       	call   c001042f <KeUserIOReceived()>
c000a063:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a069:	0f b7 c0             	movzx  eax,ax
c000a06c:	83 f2 01             	xor    edx,0x1
c000a06f:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a075:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a07a:	85 c0                	test   eax,eax
c000a07c:	74 24                	je     c000a0a2 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a07e:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a084:	83 ec 04             	sub    esp,0x4
c000a087:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a08c:	83 ec 08             	sub    esp,0x8
c000a08f:	89 e0                	mov    eax,esp
c000a091:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a094:	89 08                	mov    DWORD PTR [eax],ecx
c000a096:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a099:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a09d:	ff d2                	call   edx
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0a6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0a9:	0f b6 c0             	movzx  eax,al
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	0f 84 da 00 00 00    	je     c000a18e <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0b7:	0f b7 c0             	movzx  eax,ax
c000a0ba:	3d 18 03 00 00       	cmp    eax,0x318
c000a0bf:	75 06                	jne    c000a0c7 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ca:	0f b7 c0             	movzx  eax,ax
c000a0cd:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d2:	75 06                	jne    c000a0da <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dd:	0f b7 c0             	movzx  eax,ax
c000a0e0:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e5:	75 06                	jne    c000a0ed <sendKeyboardToken(KeyboardToken)+0x95>
c000a0e7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	0f b7 c0             	movzx  eax,ax
c000a0f3:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0f8:	75 06                	jne    c000a100 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fa:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a103:	0f b7 c0             	movzx  eax,ax
c000a106:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10b:	75 06                	jne    c000a113 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a10d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a116:	0f b7 c0             	movzx  eax,ax
c000a119:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a11e:	75 06                	jne    c000a126 <sendKeyboardToken(KeyboardToken)+0xce>
c000a120:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a129:	0f b7 c0             	movzx  eax,ax
c000a12c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a131:	75 06                	jne    c000a139 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a133:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13c:	0f b7 c0             	movzx  eax,ax
c000a13f:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a144:	75 06                	jne    c000a14c <sendKeyboardToken(KeyboardToken)+0xf4>
c000a146:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a14c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14f:	0f b7 c0             	movzx  eax,ax
c000a152:	3d 20 03 00 00       	cmp    eax,0x320
c000a157:	75 06                	jne    c000a15f <sendKeyboardToken(KeyboardToken)+0x107>
c000a159:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a162:	0f b7 c0             	movzx  eax,ax
c000a165:	3d 21 03 00 00       	cmp    eax,0x321
c000a16a:	75 06                	jne    c000a172 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a16c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a175:	0f b7 c0             	movzx  eax,ax
c000a178:	3d 22 03 00 00       	cmp    eax,0x322
c000a17d:	0f 85 f1 00 00 00    	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a183:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a189:	e9 e6 00 00 00       	jmp    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a191:	0f b7 c0             	movzx  eax,ax
c000a194:	3d 18 03 00 00       	cmp    eax,0x318
c000a199:	75 0a                	jne    c000a1a5 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a8:	0f b7 c0             	movzx  eax,ax
c000a1ab:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b0:	75 0a                	jne    c000a1bc <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1bf:	0f b7 c0             	movzx  eax,ax
c000a1c2:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1c7:	75 0a                	jne    c000a1d3 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1c9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d6:	0f b7 c0             	movzx  eax,ax
c000a1d9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1de:	75 0a                	jne    c000a1ea <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1f7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a20e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a225:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a23c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 20 03 00 00       	cmp    eax,0x320
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x205>
c000a253:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 21 03 00 00       	cmp    eax,0x321
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 00 02 00 00       	cmp    eax,0x200
c000a27f:	75 2f                	jne    c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a281:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a286:	83 f0 01             	xor    eax,0x1
c000a289:	0f b6 c0             	movzx  eax,al
c000a28c:	85 c0                	test   eax,eax
c000a28e:	74 20                	je     c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a290:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a295:	6a 01                	push   0x1
c000a297:	6a 00                	push   0x0
c000a299:	68 b8 9e 00 c0       	push   0xc0009eb8
c000a29e:	50                   	push   eax
c000a29f:	e8 f8 c6 00 00       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c000a2a4:	83 c4 10             	add    esp,0x10
c000a2a7:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ae:	eb 3a                	jmp    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b3:	0f b7 c0             	movzx  eax,ax
c000a2b6:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bb:	75 2d                	jne    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2bd:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2c2:	83 f0 01             	xor    eax,0x1
c000a2c5:	0f b6 c0             	movzx  eax,al
c000a2c8:	85 c0                	test   eax,eax
c000a2ca:	74 1e                	je     c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2cc:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a2d1:	6a 01                	push   0x1
c000a2d3:	6a 00                	push   0x0
c000a2d5:	68 1d 9f 00 c0       	push   0xc0009f1d
c000a2da:	50                   	push   eax
c000a2db:	e8 bc c6 00 00       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c000a2e0:	83 c4 10             	add    esp,0x10
c000a2e3:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ed:	0f b7 c0             	movzx  eax,ax
c000a2f0:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f5:	75 06                	jne    c000a2fd <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2f7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a300:	0f b7 c0             	movzx  eax,ax
c000a303:	3d 24 03 00 00       	cmp    eax,0x324
c000a308:	75 06                	jne    c000a310 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a313:	0f b7 c0             	movzx  eax,ax
c000a316:	3d 23 03 00 00       	cmp    eax,0x323
c000a31b:	75 06                	jne    c000a323 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a31d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a326:	0f b7 c0             	movzx  eax,ax
c000a329:	3d 26 03 00 00       	cmp    eax,0x326
c000a32e:	75 06                	jne    c000a336 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a330:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a339:	0f b7 c0             	movzx  eax,ax
c000a33c:	3d 27 03 00 00       	cmp    eax,0x327
c000a341:	75 06                	jne    c000a349 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a343:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34c:	0f b7 c0             	movzx  eax,ax
c000a34f:	3d 22 03 00 00       	cmp    eax,0x322
c000a354:	75 06                	jne    c000a35c <sendKeyboardToken(KeyboardToken)+0x304>
c000a356:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a35c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a360:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a363:	83 f0 01             	xor    eax,0x1
c000a366:	0f b6 c0             	movzx  eax,al
c000a369:	85 c0                	test   eax,eax
c000a36b:	74 7c                	je     c000a3e9 <sendKeyboardToken(KeyboardToken)+0x391>
c000a36d:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a372:	0f b6 c0             	movzx  eax,al
c000a375:	85 c0                	test   eax,eax
c000a377:	74 43                	je     c000a3bc <sendKeyboardToken(KeyboardToken)+0x364>
c000a379:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a37d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a381:	85 c0                	test   eax,eax
c000a383:	74 2b                	je     c000a3b0 <sendKeyboardToken(KeyboardToken)+0x358>
c000a385:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a38b:	89 d0                	mov    eax,edx
c000a38d:	c1 e0 02             	shl    eax,0x2
c000a390:	01 d0                	add    eax,edx
c000a392:	d1 e0                	shl    eax,1
c000a394:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a39c:	0f b7 c0             	movzx  eax,ax
c000a39f:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a2:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3a7:	01 d0                	add    eax,edx
c000a3a9:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3ae:	eb 71                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b0:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3ba:	eb 65                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3bc:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3c1:	85 c0                	test   eax,eax
c000a3c3:	74 18                	je     c000a3dd <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c5:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ca:	0f b6 c0             	movzx  eax,al
c000a3cd:	83 ec 0c             	sub    esp,0xc
c000a3d0:	50                   	push   eax
c000a3d1:	e8 ac fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3dd:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3e7:	eb 38                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3ec:	0f b7 c0             	movzx  eax,ax
c000a3ef:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f4:	75 2b                	jne    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3f6:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3fb:	85 c0                	test   eax,eax
c000a3fd:	74 18                	je     c000a417 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3ff:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a404:	0f b6 c0             	movzx  eax,al
c000a407:	83 ec 0c             	sub    esp,0xc
c000a40a:	50                   	push   eax
c000a40b:	e8 72 fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a410:	83 c4 10             	add    esp,0x10
c000a413:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a417:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a421:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a424:	83 f0 01             	xor    eax,0x1
c000a427:	0f b6 c0             	movzx  eax,al
c000a42a:	85 c0                	test   eax,eax
c000a42c:	74 5a                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a42e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a431:	83 f0 01             	xor    eax,0x1
c000a434:	0f b6 c0             	movzx  eax,al
c000a437:	85 c0                	test   eax,eax
c000a439:	74 4d                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a43b:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a440:	83 f0 01             	xor    eax,0x1
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	85 c0                	test   eax,eax
c000a448:	74 3e                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a44d:	0f b7 c0             	movzx  eax,ax
c000a450:	83 f8 1f             	cmp    eax,0x1f
c000a453:	76 0b                	jbe    c000a460 <sendKeyboardToken(KeyboardToken)+0x408>
c000a455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a458:	0f b7 c0             	movzx  eax,ax
c000a45b:	83 f8 7e             	cmp    eax,0x7e
c000a45e:	76 16                	jbe    c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a463:	0f b7 c0             	movzx  eax,ax
c000a466:	83 f8 0a             	cmp    eax,0xa
c000a469:	74 0b                	je     c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a46e:	0f b7 c0             	movzx  eax,ax
c000a471:	83 f8 08             	cmp    eax,0x8
c000a474:	75 12                	jne    c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a479:	0f b6 c0             	movzx  eax,al
c000a47c:	83 ec 0c             	sub    esp,0xc
c000a47f:	50                   	push   eax
c000a480:	e8 fd fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a485:	83 c4 10             	add    esp,0x10
c000a488:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48b:	83 f0 01             	xor    eax,0x1
c000a48e:	0f b6 c0             	movzx  eax,al
c000a491:	85 c0                	test   eax,eax
c000a493:	74 5d                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a495:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a498:	83 f0 01             	xor    eax,0x1
c000a49b:	0f b6 c0             	movzx  eax,al
c000a49e:	85 c0                	test   eax,eax
c000a4a0:	74 50                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a2:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a4a7:	0f b6 c0             	movzx  eax,al
c000a4aa:	85 c0                	test   eax,eax
c000a4ac:	74 44                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b1:	0f b7 c0             	movzx  eax,ax
c000a4b4:	83 f8 3f             	cmp    eax,0x3f
c000a4b7:	76 39                	jbe    c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bc:	0f b7 c0             	movzx  eax,ax
c000a4bf:	83 f8 7f             	cmp    eax,0x7f
c000a4c2:	77 2e                	ja     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c7:	88 c2                	mov    dl,al
c000a4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cc:	0f b7 c0             	movzx  eax,ax
c000a4cf:	83 f8 5f             	cmp    eax,0x5f
c000a4d2:	76 04                	jbe    c000a4d8 <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d4:	b0 20                	mov    al,0x20
c000a4d6:	eb 02                	jmp    c000a4da <sendKeyboardToken(KeyboardToken)+0x482>
c000a4d8:	b0 00                	mov    al,0x0
c000a4da:	89 d1                	mov    ecx,edx
c000a4dc:	29 c1                	sub    ecx,eax
c000a4de:	89 c8                	mov    eax,ecx
c000a4e0:	83 e8 40             	sub    eax,0x40
c000a4e3:	0f b6 c0             	movzx  eax,al
c000a4e6:	83 ec 0c             	sub    esp,0xc
c000a4e9:	50                   	push   eax
c000a4ea:	e8 93 fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a4ef:	83 c4 10             	add    esp,0x10
c000a4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f5:	0f b7 c0             	movzx  eax,ax
c000a4f8:	3d 00 03 00 00       	cmp    eax,0x300
c000a4fd:	75 12                	jne    c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a502:	83 f0 01             	xor    eax,0x1
c000a505:	0f b6 c0             	movzx  eax,al
c000a508:	85 c0                	test   eax,eax
c000a50a:	74 05                	je     c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a50c:	e8 30 7a 00 00       	call   c0011f41 <doTerminalCycle()>
c000a511:	90                   	nop
c000a512:	c9                   	leave  
c000a513:	c3                   	ret    

c000a514 <clearInternalKeybuffer(VgaText*)>:
c000a514:	55                   	push   ebp
c000a515:	89 e5                	mov    ebp,esp
c000a517:	83 ec 08             	sub    esp,0x8
c000a51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a51d:	05 02 01 00 00       	add    eax,0x102
c000a522:	83 ec 0c             	sub    esp,0xc
c000a525:	50                   	push   eax
c000a526:	e8 55 60 ff ff       	call   c0000580 <strlen>
c000a52b:	83 c4 10             	add    esp,0x10
c000a52e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a531:	81 c2 02 01 00 00    	add    edx,0x102
c000a537:	83 ec 04             	sub    esp,0x4
c000a53a:	50                   	push   eax
c000a53b:	6a 00                	push   0x0
c000a53d:	52                   	push   edx
c000a53e:	e8 ad 5f ff ff       	call   c00004f0 <memset>
c000a543:	83 c4 10             	add    esp,0x10
c000a546:	90                   	nop
c000a547:	c9                   	leave  
c000a548:	c3                   	ret    

c000a549 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a549:	55                   	push   ebp
c000a54a:	89 e5                	mov    ebp,esp
c000a54c:	83 ec 18             	sub    esp,0x18
c000a54f:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a554:	85 c0                	test   eax,eax
c000a556:	74 2a                	je     c000a582 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a558:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a55e:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a564:	83 ec 04             	sub    esp,0x4
c000a567:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 e0                	mov    eax,esp
c000a571:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a574:	89 08                	mov    DWORD PTR [eax],ecx
c000a576:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a579:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a57d:	ff d2                	call   edx
c000a57f:	83 c4 10             	add    esp,0x10
c000a582:	fb                   	sti    
c000a583:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a58e:	0f 84 08 01 00 00    	je     c000a69c <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a597:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a59d:	0f be c0             	movsx  eax,al
c000a5a0:	85 c0                	test   eax,eax
c000a5a2:	75 27                	jne    c000a5cb <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a4:	fa                   	cli    
c000a5a5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a5aa:	83 c0 01             	add    eax,0x1
c000a5ad:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000a5b2:	e8 8d c6 00 00       	call   c0016c44 <schedule()>
c000a5b7:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a5bf:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a5c4:	85 c0                	test   eax,eax
c000a5c6:	75 cc                	jne    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5c8:	fb                   	sti    
c000a5c9:	eb c9                	jmp    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5ce:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5d7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5dd:	88 10                	mov    BYTE PTR [eax],dl
c000a5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5e8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5eb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5ef:	83 f8 03             	cmp    eax,0x3
c000a5f2:	75 1e                	jne    c000a612 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5fe:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a604:	83 ec 08             	sub    esp,0x8
c000a607:	6a 02                	push   0x2
c000a609:	50                   	push   eax
c000a60a:	e8 b4 67 00 00       	call   c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a60f:	83 c4 10             	add    esp,0x10
c000a612:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a616:	83 f8 1c             	cmp    eax,0x1c
c000a619:	75 1e                	jne    c000a639 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a620:	8b 00                	mov    eax,DWORD PTR [eax]
c000a622:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a625:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a62b:	83 ec 08             	sub    esp,0x8
c000a62e:	6a 09                	push   0x9
c000a630:	50                   	push   eax
c000a631:	e8 8d 67 00 00       	call   c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a636:	83 c4 10             	add    esp,0x10
c000a639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63c:	05 02 01 00 00       	add    eax,0x102
c000a641:	83 ec 0c             	sub    esp,0xc
c000a644:	50                   	push   eax
c000a645:	e8 36 5f ff ff       	call   c0000580 <strlen>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a650:	81 c2 02 01 00 00    	add    edx,0x102
c000a656:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a659:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a65c:	81 c2 02 01 00 00    	add    edx,0x102
c000a662:	83 ec 04             	sub    esp,0x4
c000a665:	50                   	push   eax
c000a666:	51                   	push   ecx
c000a667:	52                   	push   edx
c000a668:	e8 63 5d ff ff       	call   c00003d0 <memmove>
c000a66d:	83 c4 10             	add    esp,0x10
c000a670:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a674:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a678:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a67c:	83 f8 0a             	cmp    eax,0xa
c000a67f:	74 16                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a681:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a685:	83 f8 03             	cmp    eax,0x3
c000a688:	74 0d                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a68e:	83 f8 1c             	cmp    eax,0x1c
c000a691:	0f 85 f3 fe ff ff    	jne    c000a58a <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a697:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69a:	eb 03                	jmp    c000a69f <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a69c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69f:	c9                   	leave  
c000a6a0:	c3                   	ret    
c000a6a1:	90                   	nop

c000a6a2 <Keyboard::Keyboard(char const*)>:
c000a6a2:	83 ec 0c             	sub    esp,0xc
c000a6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a9:	83 ec 08             	sub    esp,0x8
c000a6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b0:	50                   	push   eax
c000a6b1:	e8 a2 f4 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	ba 40 36 02 c0       	mov    edx,0xc0023640
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	89 10                	mov    DWORD PTR [eax],edx
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d2:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a6d9:	90                   	nop
c000a6da:	83 c4 0c             	add    esp,0xc
c000a6dd:	c3                   	ret    

c000a6de <Keyboard::~Keyboard()>:
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	ba 40 36 02 c0       	mov    edx,0xc0023640
c000a6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ea:	89 10                	mov    DWORD PTR [eax],edx
c000a6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f0:	83 ec 0c             	sub    esp,0xc
c000a6f3:	50                   	push   eax
c000a6f4:	e8 ff f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a6f9:	83 c4 10             	add    esp,0x10
c000a6fc:	90                   	nop
c000a6fd:	83 c4 0c             	add    esp,0xc
c000a700:	c3                   	ret    
c000a701:	90                   	nop

c000a702 <Keyboard::~Keyboard()>:
c000a702:	83 ec 0c             	sub    esp,0xc
c000a705:	83 ec 0c             	sub    esp,0xc
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	e8 cd ff ff ff       	call   c000a6de <Keyboard::~Keyboard()>
c000a711:	83 c4 10             	add    esp,0x10
c000a714:	83 ec 08             	sub    esp,0x8
c000a717:	68 5c 01 00 00       	push   0x15c
c000a71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a720:	e8 97 2b 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000a725:	83 c4 10             	add    esp,0x10
c000a728:	83 c4 0c             	add    esp,0xc
c000a72b:	c3                   	ret    

c000a72c <LogicalDisk::close(int, int, void*)>:
c000a72c:	83 c8 ff             	or     eax,0xffffffff
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::~LogicalDisk()>:
c000a730:	83 ec 0c             	sub    esp,0xc
c000a733:	ba b8 36 02 c0       	mov    edx,0xc00236b8
c000a738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73c:	89 10                	mov    DWORD PTR [eax],edx
c000a73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	50                   	push   eax
c000a746:	e8 ad f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a74b:	83 c4 10             	add    esp,0x10
c000a74e:	90                   	nop
c000a74f:	83 c4 0c             	add    esp,0xc
c000a752:	c3                   	ret    
c000a753:	90                   	nop

c000a754 <LogicalDisk::~LogicalDisk()>:
c000a754:	83 ec 0c             	sub    esp,0xc
c000a757:	83 ec 0c             	sub    esp,0xc
c000a75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a75e:	e8 cd ff ff ff       	call   c000a730 <LogicalDisk::~LogicalDisk()>
c000a763:	83 c4 10             	add    esp,0x10
c000a766:	83 ec 08             	sub    esp,0x8
c000a769:	68 78 01 00 00       	push   0x178
c000a76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a772:	e8 45 2b 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000a777:	83 c4 10             	add    esp,0x10
c000a77a:	83 c4 0c             	add    esp,0xc
c000a77d:	c3                   	ret    

c000a77e <LogicalDisk::open(int, int, void*)>:
c000a77e:	83 ec 18             	sub    esp,0x18
c000a781:	68 6c 36 02 c0       	push   0xc002366c
c000a786:	e8 85 53 00 00       	call   c000fb10 <KePanic(char const*)>
c000a78b:	83 c8 ff             	or     eax,0xffffffff
c000a78e:	83 c4 1c             	add    esp,0x1c
c000a791:	c3                   	ret    

c000a792 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a792:	53                   	push   ebx
c000a793:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a79f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7ab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b1:	77 10                	ja     c000a7c3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7b9:	89 d3                	mov    ebx,edx
c000a7bb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c1:	72 05                	jb     c000a7c8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c3:	83 c8 ff             	or     eax,0xffffffff
c000a7c6:	89 c2                	mov    edx,eax
c000a7c8:	5b                   	pop    ebx
c000a7c9:	c3                   	ret    

c000a7ca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ca:	56                   	push   esi
c000a7cb:	83 c8 ff             	or     eax,0xffffffff
c000a7ce:	53                   	push   ebx
c000a7cf:	89 c2                	mov    edx,eax
c000a7d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e3:	77 27                	ja     c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7eb:	89 d8                	mov    eax,ebx
c000a7ed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7f8:	89 c2                	mov    edx,eax
c000a7fa:	73 10                	jae    c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7fc:	89 c8                	mov    eax,ecx
c000a7fe:	89 da                	mov    edx,ebx
c000a800:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a806:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a80c:	5b                   	pop    ebx
c000a80d:	5e                   	pop    esi
c000a80e:	c3                   	ret    
c000a80f:	90                   	nop

c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a810:	83 ec 1c             	sub    esp,0x1c
c000a813:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a81f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a823:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a827:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a82e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a836:	83 ec 08             	sub    esp,0x8
c000a839:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a83d:	50                   	push   eax
c000a83e:	e8 15 f3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	ba b8 36 02 c0       	mov    edx,0xc00236b8
c000a84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a84f:	89 10                	mov    DWORD PTR [eax],edx
c000a851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a855:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a860:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a876:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a880:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a88c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a892:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a898:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a89c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a89f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a3:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8a9:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8b7:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cb:	90                   	nop
c000a8cc:	83 c4 1c             	add    esp,0x1c
c000a8cf:	c3                   	ret    

c000a8d0 <LogicalDisk::assignDriveLetter()>:
c000a8d0:	55                   	push   ebp
c000a8d1:	57                   	push   edi
c000a8d2:	56                   	push   esi
c000a8d3:	53                   	push   ebx
c000a8d4:	83 ec 14             	sub    esp,0x14
c000a8d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8db:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e1:	b0 41                	mov    al,0x41
c000a8e3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8e9:	84 d2                	test   dl,dl
c000a8eb:	75 02                	jne    c000a8ef <LogicalDisk::assignDriveLetter()+0x1f>
c000a8ed:	b0 43                	mov    al,0x43
c000a8ef:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a8f5:	0f b6 ca             	movzx  ecx,dl
c000a8f8:	0f be e8             	movsx  ebp,al
c000a8fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8ff:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a903:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a909:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a90d:	3c 43                	cmp    al,0x43
c000a90f:	75 10                	jne    c000a921 <LogicalDisk::assignDriveLetter()+0x51>
c000a911:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a918:	75 5a                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a91f:	75 53                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a921:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a924:	ba 01 00 00 00       	mov    edx,0x1
c000a929:	89 34 24             	mov    DWORD PTR [esp],esi
c000a92c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a92f:	d3 e2                	shl    edx,cl
c000a931:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a935:	89 d7                	mov    edi,edx
c000a937:	89 d6                	mov    esi,edx
c000a939:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	21 f9                	and    ecx,edi
c000a942:	09 d1                	or     ecx,edx
c000a944:	75 2e                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	09 f2                	or     edx,esi
c000a950:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a953:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a959:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a95d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a963:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a96a:	09 fa                	or     edx,edi
c000a96c:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a972:	eb 0d                	jmp    c000a981 <LogicalDisk::assignDriveLetter()+0xb1>
c000a974:	8d 50 01             	lea    edx,[eax+0x1]
c000a977:	45                   	inc    ebp
c000a978:	80 fa 5b             	cmp    dl,0x5b
c000a97b:	88 d0                	mov    al,dl
c000a97d:	75 8e                	jne    c000a90d <LogicalDisk::assignDriveLetter()+0x3d>
c000a97f:	31 c0                	xor    eax,eax
c000a981:	83 c4 14             	add    esp,0x14
c000a984:	5b                   	pop    ebx
c000a985:	5e                   	pop    esi
c000a986:	5f                   	pop    edi
c000a987:	5d                   	pop    ebp
c000a988:	c3                   	ret    
c000a989:	90                   	nop

c000a98a <LogicalDisk::mount()>:
c000a98a:	56                   	push   esi
c000a98b:	53                   	push   ebx
c000a98c:	53                   	push   ebx
c000a98d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a991:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a997:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a1:	85 db                	test   ebx,ebx
c000a9a3:	74 27                	je     c000a9cc <LogicalDisk::mount()+0x42>
c000a9a5:	51                   	push   ecx
c000a9a6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9af:	83 e8 41             	sub    eax,0x41
c000a9b2:	50                   	push   eax
c000a9b3:	56                   	push   esi
c000a9b4:	53                   	push   ebx
c000a9b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9b8:	83 c4 10             	add    esp,0x10
c000a9bb:	84 c0                	test   al,al
c000a9bd:	74 08                	je     c000a9c7 <LogicalDisk::mount()+0x3d>
c000a9bf:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c5:	eb 07                	jmp    c000a9ce <LogicalDisk::mount()+0x44>
c000a9c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ca:	eb d5                	jmp    c000a9a1 <LogicalDisk::mount()+0x17>
c000a9cc:	31 c0                	xor    eax,eax
c000a9ce:	5a                   	pop    edx
c000a9cf:	5b                   	pop    ebx
c000a9d0:	5e                   	pop    esi
c000a9d1:	c3                   	ret    

c000a9d2 <LogicalDisk::unmount()>:
c000a9d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9d6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e0:	c3                   	ret    
c000a9e1:	90                   	nop

c000a9e2 <LogicalDisk::eject()>:
c000a9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f5:	90                   	nop

c000a9f6 <LogicalDisk::unassignDriveLetter()>:
c000a9f6:	57                   	push   edi
c000a9f7:	56                   	push   esi
c000a9f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9fc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa03:	85 c9                	test   ecx,ecx
c000aa05:	75 0f                	jne    c000aa16 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa07:	c7 44 24 0c 90 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023690
c000aa0f:	5e                   	pop    esi
c000aa10:	5f                   	pop    edi
c000aa11:	e9 fa 50 00 00       	jmp    c000fb10 <KePanic(char const*)>
c000aa16:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa1d:	83 e9 41             	sub    ecx,0x41
c000aa20:	b8 01 00 00 00       	mov    eax,0x1
c000aa25:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa30:	d3 e0                	shl    eax,cl
c000aa32:	89 c7                	mov    edi,eax
c000aa34:	f7 d0                	not    eax
c000aa36:	c1 ff 1f             	sar    edi,0x1f
c000aa39:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa3f:	89 fe                	mov    esi,edi
c000aa41:	f7 d6                	not    esi
c000aa43:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	c3                   	ret    

c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa4c:	57                   	push   edi
c000aa4d:	56                   	push   esi
c000aa4e:	53                   	push   ebx
c000aa4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa65:	77 41                	ja     c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa67:	99                   	cdq    
c000aa68:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa6e:	01 c8                	add    eax,ecx
c000aa70:	11 da                	adc    edx,ebx
c000aa72:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa78:	19 d7                	sbb    edi,edx
c000aa7a:	72 33                	jb     c000aaaf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa7c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa82:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa8c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa90:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa0:	5b                   	pop    ebx
c000aaa1:	5e                   	pop    esi
c000aaa2:	5f                   	pop    edi
c000aaa3:	e9 a2 0b 00 00       	jmp    c000b64a <VCache::read(unsigned long long, int, void*)>
c000aaa8:	b8 05 00 00 00       	mov    eax,0x5
c000aaad:	eb 05                	jmp    c000aab4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aaaf:	b8 07 00 00 00       	mov    eax,0x7
c000aab4:	5b                   	pop    ebx
c000aab5:	5e                   	pop    esi
c000aab6:	5f                   	pop    edi
c000aab7:	c3                   	ret    

c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aab8:	57                   	push   edi
c000aab9:	56                   	push   esi
c000aaba:	53                   	push   ebx
c000aabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aabf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad1:	77 41                	ja     c000ab14 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad3:	99                   	cdq    
c000aad4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aada:	01 c8                	add    eax,ecx
c000aadc:	11 da                	adc    edx,ebx
c000aade:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae4:	19 d7                	sbb    edi,edx
c000aae6:	72 33                	jb     c000ab1b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aae8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aaf8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aafc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab0c:	5b                   	pop    ebx
c000ab0d:	5e                   	pop    esi
c000ab0e:	5f                   	pop    edi
c000ab0f:	e9 68 09 00 00       	jmp    c000b47c <VCache::write(unsigned long long, int, void*)>
c000ab14:	b8 05 00 00 00       	mov    eax,0x5
c000ab19:	eb 05                	jmp    c000ab20 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1b:	b8 07 00 00 00       	mov    eax,0x7
c000ab20:	5b                   	pop    ebx
c000ab21:	5e                   	pop    esi
c000ab22:	5f                   	pop    edi
c000ab23:	c3                   	ret    

c000ab24 <Mouse::Mouse(char const*)>:
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	50                   	push   eax
c000ab33:	e8 20 f0 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	89 10                	mov    DWORD PTR [eax],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab54:	90                   	nop
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	c3                   	ret    
c000ab59:	90                   	nop
c000ab5a:	66 90                	xchg   ax,ax

c000ab5c <Mouse::~Mouse()>:
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c000ab64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab68:	89 10                	mov    DWORD PTR [eax],edx
c000ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6e:	83 ec 0c             	sub    esp,0xc
c000ab71:	50                   	push   eax
c000ab72:	e8 81 ed ff ff       	call   c00098f8 <Device::~Device()>
c000ab77:	83 c4 10             	add    esp,0x10
c000ab7a:	90                   	nop
c000ab7b:	83 c4 0c             	add    esp,0xc
c000ab7e:	c3                   	ret    
c000ab7f:	90                   	nop

c000ab80 <Mouse::~Mouse()>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	83 ec 0c             	sub    esp,0xc
c000ab86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8a:	e8 cd ff ff ff       	call   c000ab5c <Mouse::~Mouse()>
c000ab8f:	83 c4 10             	add    esp,0x10
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	68 58 01 00 00       	push   0x158
c000ab9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9e:	e8 19 27 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000aba3:	83 c4 10             	add    esp,0x10
c000aba6:	83 c4 0c             	add    esp,0xc
c000aba9:	c3                   	ret    

c000abaa <NIC::getMAC()>:
c000abaa:	31 c0                	xor    eax,eax
c000abac:	31 d2                	xor    edx,edx
c000abae:	c3                   	ret    
c000abaf:	90                   	nop

c000abb0 <NIC::write(int, unsigned char*, int*)>:
c000abb0:	b8 01 00 00 00       	mov    eax,0x1
c000abb5:	c3                   	ret    

c000abb6 <NIC::NIC(char const*)>:
c000abb6:	83 ec 0c             	sub    esp,0xc
c000abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbd:	83 ec 08             	sub    esp,0x8
c000abc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc4:	50                   	push   eax
c000abc5:	e8 8e ef ff ff       	call   c0009b58 <Device::Device(char const*)>
c000abca:	83 c4 10             	add    esp,0x10
c000abcd:	ba 10 37 02 c0       	mov    edx,0xc0023710
c000abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd6:	89 10                	mov    DWORD PTR [eax],edx
c000abd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abe6:	90                   	nop
c000abe7:	83 c4 0c             	add    esp,0xc
c000abea:	c3                   	ret    
c000abeb:	90                   	nop

c000abec <NIC::~NIC()>:
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	ba 10 37 02 c0       	mov    edx,0xc0023710
c000abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf8:	89 10                	mov    DWORD PTR [eax],edx
c000abfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfe:	83 ec 0c             	sub    esp,0xc
c000ac01:	50                   	push   eax
c000ac02:	e8 f1 ec ff ff       	call   c00098f8 <Device::~Device()>
c000ac07:	83 c4 10             	add    esp,0x10
c000ac0a:	90                   	nop
c000ac0b:	83 c4 0c             	add    esp,0xc
c000ac0e:	c3                   	ret    
c000ac0f:	90                   	nop

c000ac10 <NIC::~NIC()>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 0c             	sub    esp,0xc
c000ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1a:	e8 cd ff ff ff       	call   c000abec <NIC::~NIC()>
c000ac1f:	83 c4 10             	add    esp,0x10
c000ac22:	83 ec 08             	sub    esp,0x8
c000ac25:	68 58 01 00 00       	push   0x158
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 89 26 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	83 c4 0c             	add    esp,0xc
c000ac39:	c3                   	ret    

c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3a:	55                   	push   ebp
c000ac3b:	57                   	push   edi
c000ac3c:	56                   	push   esi
c000ac3d:	53                   	push   ebx
c000ac3e:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac44:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000ac4b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000ac52:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000ac59:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac6f:	e8 e0 ef ff ff       	call   c0009c54 <Device::getName()>
c000ac74:	5a                   	pop    edx
c000ac75:	59                   	pop    ecx
c000ac76:	50                   	push   eax
c000ac77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7b:	55                   	push   ebp
c000ac7c:	e8 cf 59 ff ff       	call   c0000650 <strcpy>
c000ac81:	5b                   	pop    ebx
c000ac82:	58                   	pop    eax
c000ac83:	68 3c 37 02 c0       	push   0xc002373c
c000ac88:	55                   	push   ebp
c000ac89:	e8 e2 5b ff ff       	call   c0000870 <strcat>
c000ac8e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac95:	e8 1a 4a 00 00       	call   c000f6b4 <malloc>
c000ac9a:	83 c4 0c             	add    esp,0xc
c000ac9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca5:	89 c3                	mov    ebx,eax
c000aca7:	57                   	push   edi
c000aca8:	56                   	push   esi
c000aca9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb0:	55                   	push   ebp
c000acb1:	50                   	push   eax
c000acb2:	e8 59 fb ff ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acb7:	83 c4 14             	add    esp,0x14
c000acba:	53                   	push   ebx
c000acbb:	e8 10 fc ff ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c000acc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc3:	e8 c2 fc ff ff       	call   c000a98a <LogicalDisk::mount()>
c000acc8:	58                   	pop    eax
c000acc9:	5a                   	pop    edx
c000acca:	53                   	push   ebx
c000accb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd2:	e8 1f ed ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000acd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000acdd:	5b                   	pop    ebx
c000acde:	5e                   	pop    esi
c000acdf:	5f                   	pop    edi
c000ace0:	5d                   	pop    ebp
c000ace1:	c3                   	ret    

c000ace2 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace2:	55                   	push   ebp
c000ace3:	57                   	push   edi
c000ace4:	56                   	push   esi
c000ace5:	53                   	push   ebx
c000ace6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acf9:	3d 00 02 00 00       	cmp    eax,0x200
c000acfe:	74 27                	je     c000ad27 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad00:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad06:	83 ec 10             	sub    esp,0x10
c000ad09:	99                   	cdq    
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	52                   	push   edx
c000ad11:	50                   	push   eax
c000ad12:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad16:	c1 e6 0a             	shl    esi,0xa
c000ad19:	89 fd                	mov    ebp,edi
c000ad1b:	55                   	push   ebp
c000ad1c:	56                   	push   esi
c000ad1d:	e8 72 6b 01 00       	call   c0021894 <__udivdi3>
c000ad22:	e9 b9 00 00 00       	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad27:	83 ec 0c             	sub    esp,0xc
c000ad2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad2c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad30:	56                   	push   esi
c000ad31:	6a 01                	push   0x1
c000ad33:	6a 00                	push   0x0
c000ad35:	6a 00                	push   0x0
c000ad37:	53                   	push   ebx
c000ad38:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3b:	83 c4 20             	add    esp,0x20
c000ad3e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad46:	75 0a                	jne    c000ad52 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad48:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad50:	74 2c                	je     c000ad7e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad52:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad58:	83 ec 10             	sub    esp,0x10
c000ad5b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad61:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad67:	89 f7                	mov    edi,esi
c000ad69:	c1 ff 1f             	sar    edi,0x1f
c000ad6c:	57                   	push   edi
c000ad6d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad71:	56                   	push   esi
c000ad72:	c1 e0 0a             	shl    eax,0xa
c000ad75:	52                   	push   edx
c000ad76:	50                   	push   eax
c000ad77:	e8 18 6b 01 00       	call   c0021894 <__udivdi3>
c000ad7c:	eb 62                	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad7e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad85:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad8c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad93:	89 cf                	mov    edi,ecx
c000ad95:	83 e2 7f             	and    edx,0x7f
c000ad98:	83 e7 7f             	and    edi,0x7f
c000ad9b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad9e:	83 e0 7f             	and    eax,0x7f
c000ada1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adab:	83 e0 7f             	and    eax,0x7f
c000adae:	01 d0                	add    eax,edx
c000adb0:	84 c0                	test   al,al
c000adb2:	89 c5                	mov    ebp,eax
c000adb4:	74 41                	je     c000adf7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adbc:	83 ec 10             	sub    esp,0x10
c000adbf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adcb:	89 f7                	mov    edi,esi
c000adcd:	c1 ff 1f             	sar    edi,0x1f
c000add0:	57                   	push   edi
c000add1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add5:	56                   	push   esi
c000add6:	c1 e0 0a             	shl    eax,0xa
c000add9:	52                   	push   edx
c000adda:	50                   	push   eax
c000addb:	e8 b4 6a 01 00       	call   c0021894 <__udivdi3>
c000ade0:	83 c4 14             	add    esp,0x14
c000ade3:	52                   	push   edx
c000ade4:	50                   	push   eax
c000ade5:	6a 00                	push   0x0
c000ade7:	6a 00                	push   0x0
c000ade9:	53                   	push   ebx
c000adea:	e8 4b fe ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adef:	83 c4 20             	add    esp,0x20
c000adf2:	e9 73 01 00 00       	jmp    c000af6a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adf7:	89 f0                	mov    eax,esi
c000adf9:	31 c9                	xor    ecx,ecx
c000adfb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae02:	75 02                	jne    c000ae06 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae04:	89 cd                	mov    ebp,ecx
c000ae06:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae0e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae15:	83 c0 10             	add    eax,0x10
c000ae18:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae20:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ae27:	c1 e2 08             	shl    edx,0x8
c000ae2a:	c1 e6 10             	shl    esi,0x10
c000ae2d:	09 f2                	or     edx,esi
c000ae2f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ae36:	09 f2                	or     edx,esi
c000ae38:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae3f:	c1 e6 18             	shl    esi,0x18
c000ae42:	09 f2                	or     edx,esi
c000ae44:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae4f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae56:	c1 e6 10             	shl    esi,0x10
c000ae59:	c1 e2 08             	shl    edx,0x8
c000ae5c:	09 f2                	or     edx,esi
c000ae5e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae65:	09 f2                	or     edx,esi
c000ae67:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae6e:	c1 e6 18             	shl    esi,0x18
c000ae71:	09 f2                	or     edx,esi
c000ae73:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae77:	41                   	inc    ecx
c000ae78:	83 f9 04             	cmp    ecx,0x4
c000ae7b:	0f 85 7a ff ff ff    	jne    c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae85:	83 f0 01             	xor    eax,0x1
c000ae88:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae8c:	75 4f                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae92:	83 f0 01             	xor    eax,0x1
c000ae95:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae99:	75 42                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aea1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeb7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebd:	89 f7                	mov    edi,esi
c000aebf:	c1 ff 1f             	sar    edi,0x1f
c000aec2:	57                   	push   edi
c000aec3:	56                   	push   esi
c000aec4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec8:	52                   	push   edx
c000aec9:	c1 e0 0a             	shl    eax,0xa
c000aecc:	50                   	push   eax
c000aecd:	e8 c2 69 01 00       	call   c0021894 <__udivdi3>
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aed9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aedd:	89 e8                	mov    eax,ebp
c000aedf:	0f b6 e8             	movzx  ebp,al
c000aee2:	85 ed                	test   ebp,ebp
c000aee4:	74 50                	je     c000af36 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aeee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aef6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af1e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af2e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af32:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af36:	31 ed                	xor    ebp,ebp
c000af38:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	89 f8                	mov    eax,edi
c000af42:	09 f0                	or     eax,esi
c000af44:	74 1e                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af46:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	89 d1                	mov    ecx,edx
c000af50:	09 c1                	or     ecx,eax
c000af52:	74 10                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af54:	83 ec 0c             	sub    esp,0xc
c000af57:	57                   	push   edi
c000af58:	56                   	push   esi
c000af59:	52                   	push   edx
c000af5a:	50                   	push   eax
c000af5b:	53                   	push   ebx
c000af5c:	e8 d9 fc ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af61:	83 c4 20             	add    esp,0x20
c000af64:	45                   	inc    ebp
c000af65:	83 fd 04             	cmp    ebp,0x4
c000af68:	75 ce                	jne    c000af38 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af70:	5b                   	pop    ebx
c000af71:	5e                   	pop    esi
c000af72:	5f                   	pop    edi
c000af73:	5d                   	pop    ebp
c000af74:	c3                   	ret    
c000af75:	66 90                	xchg   ax,ax
c000af77:	90                   	nop

c000af78 <Serial::Serial(char const*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af86:	50                   	push   eax
c000af87:	e8 cc eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	ba 50 37 02 c0       	mov    edx,0xc0023750
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	89 10                	mov    DWORD PTR [eax],edx
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afa8:	90                   	nop
c000afa9:	83 c4 0c             	add    esp,0xc
c000afac:	c3                   	ret    
c000afad:	90                   	nop
c000afae:	66 90                	xchg   ax,ax

c000afb0 <Serial::~Serial()>:
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	ba 50 37 02 c0       	mov    edx,0xc0023750
c000afb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbc:	89 10                	mov    DWORD PTR [eax],edx
c000afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 2d e9 ff ff       	call   c00098f8 <Device::~Device()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	90                   	nop
c000afcf:	83 c4 0c             	add    esp,0xc
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <Serial::~Serial()>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	83 ec 0c             	sub    esp,0xc
c000afda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afde:	e8 cd ff ff ff       	call   c000afb0 <Serial::~Serial()>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	83 ec 08             	sub    esp,0x8
c000afe9:	68 58 01 00 00       	push   0x158
c000afee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff2:	e8 c5 22 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	83 c4 0c             	add    esp,0xc
c000affd:	c3                   	ret    
c000affe:	66 90                	xchg   ax,ax

c000b000 <Timer::Timer(char const*)>:
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b007:	83 ec 08             	sub    esp,0x8
c000b00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00e:	50                   	push   eax
c000b00f:	e8 44 eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000b01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b020:	89 10                	mov    DWORD PTR [eax],edx
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b030:	90                   	nop
c000b031:	83 c4 0c             	add    esp,0xc
c000b034:	c3                   	ret    
c000b035:	90                   	nop
c000b036:	66 90                	xchg   ax,ax

c000b038 <Timer::~Timer()>:
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	89 10                	mov    DWORD PTR [eax],edx
c000b046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04a:	83 ec 0c             	sub    esp,0xc
c000b04d:	50                   	push   eax
c000b04e:	e8 a5 e8 ff ff       	call   c00098f8 <Device::~Device()>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	90                   	nop
c000b057:	83 c4 0c             	add    esp,0xc
c000b05a:	c3                   	ret    
c000b05b:	90                   	nop

c000b05c <Timer::~Timer()>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	83 ec 0c             	sub    esp,0xc
c000b062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b066:	e8 cd ff ff ff       	call   c000b038 <Timer::~Timer()>
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 ec 08             	sub    esp,0x8
c000b071:	68 5c 01 00 00       	push   0x15c
c000b076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07a:	e8 3d 22 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	83 c4 0c             	add    esp,0xc
c000b085:	c3                   	ret    

c000b086 <Timer::read()>:
c000b086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b090:	c3                   	ret    

c000b091 <setupTimer(int)>:
c000b091:	53                   	push   ebx
c000b092:	83 ec 14             	sub    esp,0x14
c000b095:	68 5c 01 00 00       	push   0x15c
c000b09a:	e8 15 46 00 00       	call   c000f6b4 <malloc>
c000b09f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a2:	89 c3                	mov    ebx,eax
c000b0a4:	e8 9f 60 01 00       	call   c0021148 <PIT::PIT()>
c000b0a9:	58                   	pop    eax
c000b0aa:	5a                   	pop    edx
c000b0ab:	53                   	push   ebx
c000b0ac:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c000b0b2:	e8 3f e9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000b0b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b9:	6a 00                	push   0x0
c000b0bb:	6a 00                	push   0x0
c000b0bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c1:	53                   	push   ebx
c000b0c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c5:	83 c4 28             	add    esp,0x28
c000b0c8:	89 d8                	mov    eax,ebx
c000b0ca:	5b                   	pop    ebx
c000b0cb:	c3                   	ret    

c000b0cc <timerHandler(unsigned int)>:
c000b0cc:	57                   	push   edi
c000b0cd:	31 d2                	xor    edx,edx
c000b0cf:	56                   	push   esi
c000b0d0:	53                   	push   ebx
c000b0d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0d5:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b0db:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b0e1:	80 3d 0d c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10d,0x0
c000b0e8:	75 12                	jne    c000b0fc <timerHandler(unsigned int)+0x30>
c000b0ea:	c7 44 24 10 df 37 02 c0 	mov    DWORD PTR [esp+0x10],0xc00237df
c000b0f2:	5b                   	pop    ebx
c000b0f3:	5e                   	pop    esi
c000b0f4:	5f                   	pop    edi
c000b0f5:	e9 6c be ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b0fa:	66 90                	xchg   ax,ax
c000b0fc:	fa                   	cli    
c000b0fd:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000b103:	83 ec 0c             	sub    esp,0xc
c000b106:	68 80 ca 02 c0       	push   0xc002ca80
c000b10b:	e8 1c 6b 01 00       	call   c0021c2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	84 c0                	test   al,al
c000b115:	0f 85 a9 00 00 00    	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b11b:	83 ec 0c             	sub    esp,0xc
c000b11e:	68 80 ca 02 c0       	push   0xc002ca80
c000b123:	e8 20 6b 01 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b128:	83 c4 10             	add    esp,0x10
c000b12b:	89 c6                	mov    esi,eax
c000b12d:	8d 76 00             	lea    esi,[esi+0x0]
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	68 80 ca 02 c0       	push   0xc002ca80
c000b138:	e8 0b 6b 01 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b13d:	c7 04 24 80 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca80
c000b144:	89 c7                	mov    edi,eax
c000b146:	e8 05 6b 01 00       	call   c0021c50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b14b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b14e:	83 c4 10             	add    esp,0x10
c000b151:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b154:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b159:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b15f:	19 c8                	sbb    eax,ecx
c000b161:	72 21                	jb     c000b184 <timerHandler(unsigned int)+0xb8>
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	57                   	push   edi
c000b167:	e8 30 be 00 00       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	39 fe                	cmp    esi,edi
c000b171:	75 25                	jne    c000b198 <timerHandler(unsigned int)+0xcc>
c000b173:	83 ec 0c             	sub    esp,0xc
c000b176:	68 80 ca 02 c0       	push   0xc002ca80
c000b17b:	e8 c8 6a 01 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b180:	89 c6                	mov    esi,eax
c000b182:	eb 10                	jmp    c000b194 <timerHandler(unsigned int)+0xc8>
c000b184:	51                   	push   ecx
c000b185:	51                   	push   ecx
c000b186:	57                   	push   edi
c000b187:	68 80 ca 02 c0       	push   0xc002ca80
c000b18c:	e8 7b 6b 01 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b191:	8d 76 00             	lea    esi,[esi+0x0]
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	90                   	nop
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	68 80 ca 02 c0       	push   0xc002ca80
c000b1a0:	e8 87 6a 01 00       	call   c0021c2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	84 c0                	test   al,al
c000b1aa:	75 18                	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	68 80 ca 02 c0       	push   0xc002ca80
c000b1b4:	e8 8f 6a 01 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	39 f0                	cmp    eax,esi
c000b1be:	0f 85 6c ff ff ff    	jne    c000b130 <timerHandler(unsigned int)+0x64>
c000b1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1cc:	85 c0                	test   eax,eax
c000b1ce:	74 48                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d0:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c000b1d7:	74 3f                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d9:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1de:	76 1c                	jbe    c000b1fc <timerHandler(unsigned int)+0x130>
c000b1e0:	52                   	push   edx
c000b1e1:	52                   	push   edx
c000b1e2:	50                   	push   eax
c000b1e3:	68 f5 37 02 c0       	push   0xc00237f5
c000b1e8:	e8 79 bd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b1ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1f2:	83 c4 10             	add    esp,0x10
c000b1f5:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b1fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b202:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b205:	89 c1                	mov    ecx,eax
c000b207:	29 d9                	sub    ecx,ebx
c000b209:	39 d8                	cmp    eax,ebx
c000b20b:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b20e:	77 08                	ja     c000b218 <timerHandler(unsigned int)+0x14c>
c000b210:	e8 2f ba 00 00       	call   c0016c44 <schedule()>
c000b215:	8d 76 00             	lea    esi,[esi+0x0]
c000b218:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000b21f:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000b226:	75 04                	jne    c000b22c <timerHandler(unsigned int)+0x160>
c000b228:	fb                   	sti    
c000b229:	8d 76 00             	lea    esi,[esi+0x0]
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	c3                   	ret    

c000b230 <VCache::VCache(PhysicalDisk*)>:
c000b230:	53                   	push   ebx
c000b231:	83 ec 18             	sub    esp,0x18
c000b234:	ba a0 38 02 c0       	mov    edx,0xc00238a0
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	89 10                	mov    DWORD PTR [eax],edx
c000b23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b243:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b259:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b260:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b272:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b288:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b290:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b297:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2d0:	e8 df 43 00 00       	call   c000f6b4 <malloc>
c000b2d5:	83 c4 10             	add    esp,0x10
c000b2d8:	89 c3                	mov    ebx,eax
c000b2da:	83 ec 0c             	sub    esp,0xc
c000b2dd:	53                   	push   ebx
c000b2de:	e8 0d 48 00 00       	call   c000faf0 <Mutex::Mutex()>
c000b2e3:	83 c4 10             	add    esp,0x10
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b303:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b307:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b30d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b311:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b314:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b318:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b31e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b324:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b328:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b32b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b332:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b336:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b340:	05 00 01 00 00       	add    eax,0x100
c000b345:	c1 e0 04             	shl    eax,0x4
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	50                   	push   eax
c000b34c:	e8 63 43 00 00       	call   c000f6b4 <malloc>
c000b351:	83 c4 10             	add    esp,0x10
c000b354:	89 c2                	mov    edx,eax
c000b356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b35a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b361:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b37a:	89 d0                	mov    eax,edx
c000b37c:	c1 e0 02             	shl    eax,0x2
c000b37f:	01 d0                	add    eax,edx
c000b381:	c1 e0 04             	shl    eax,0x4
c000b384:	83 ec 0c             	sub    esp,0xc
c000b387:	50                   	push   eax
c000b388:	e8 27 43 00 00       	call   c000f6b4 <malloc>
c000b38d:	83 c4 10             	add    esp,0x10
c000b390:	89 c2                	mov    edx,eax
c000b392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b396:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b399:	90                   	nop
c000b39a:	83 c4 18             	add    esp,0x18
c000b39d:	5b                   	pop    ebx
c000b39e:	c3                   	ret    
c000b39f:	90                   	nop

c000b3a0 <VCache::invalidateReadBuffer()>:
c000b3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <VCache::writeWriteBuffer()>:
c000b3b0:	53                   	push   ebx
c000b3b1:	83 ec 08             	sub    esp,0x8
c000b3b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3bc:	74 1e                	je     c000b3dc <VCache::writeWriteBuffer()+0x2c>
c000b3be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3c1:	83 ec 0c             	sub    esp,0xc
c000b3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3d2:	50                   	push   eax
c000b3d3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3d6:	83 c4 20             	add    esp,0x20
c000b3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b3dc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3e3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3ee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3f5:	83 c4 08             	add    esp,0x8
c000b3f8:	5b                   	pop    ebx
c000b3f9:	c3                   	ret    
c000b3fa:	66 90                	xchg   ax,ax

c000b3fc <VCache::~VCache()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	ba a0 38 02 c0       	mov    edx,0xc00238a0
c000b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b408:	89 10                	mov    DWORD PTR [eax],edx
c000b40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b411:	0f b6 c0             	movzx  eax,al
c000b414:	85 c0                	test   eax,eax
c000b416:	74 10                	je     c000b428 <VCache::~VCache()+0x2c>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41f:	e8 8c ff ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	90                   	nop
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	50                   	push   eax
c000b433:	e8 8c 42 00 00       	call   c000f6c4 <free>
c000b438:	83 c4 10             	add    esp,0x10
c000b43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b442:	83 ec 0c             	sub    esp,0xc
c000b445:	50                   	push   eax
c000b446:	e8 79 42 00 00       	call   c000f6c4 <free>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	90                   	nop
c000b44f:	83 c4 0c             	add    esp,0xc
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <VCache::~VCache()>:
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	83 ec 0c             	sub    esp,0xc
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 99 ff ff ff       	call   c000b3fc <VCache::~VCache()>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 ec 08             	sub    esp,0x8
c000b469:	6a 44                	push   0x44
c000b46b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46f:	e8 48 1e 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000b474:	83 c4 10             	add    esp,0x10
c000b477:	83 c4 0c             	add    esp,0xc
c000b47a:	c3                   	ret    
c000b47b:	90                   	nop

c000b47c <VCache::write(unsigned long long, int, void*)>:
c000b47c:	55                   	push   ebp
c000b47d:	57                   	push   edi
c000b47e:	56                   	push   esi
c000b47f:	53                   	push   ebx
c000b480:	83 ec 1c             	sub    esp,0x1c
c000b483:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b487:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b48b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b48f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b493:	e8 bc b4 00 00       	call   c0016954 <KeDisablePreemption()>
c000b498:	b9 00 10 00 00       	mov    ecx,0x1000
c000b49d:	50                   	push   eax
c000b49e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4a1:	0f af c3             	imul   eax,ebx
c000b4a4:	05 ff 0f 00 00       	add    eax,0xfff
c000b4a9:	99                   	cdq    
c000b4aa:	f7 f9                	idiv   ecx
c000b4ac:	50                   	push   eax
c000b4ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4b1:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b4b7:	e8 96 89 00 00       	call   c0013e52 <VAS::canLockPages(unsigned long, int)>
c000b4bc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4c8:	74 2a                	je     c000b4f4 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ca:	50                   	push   eax
c000b4cb:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d3:	0f af c3             	imul   eax,ebx
c000b4d6:	05 ff 0f 00 00       	add    eax,0xfff
c000b4db:	99                   	cdq    
c000b4dc:	f7 f9                	idiv   ecx
c000b4de:	50                   	push   eax
c000b4df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e3:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b4e9:	e8 ee 8b 00 00       	call   c00140dc <VAS::lockPages(unsigned long, int)>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f4:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4f8:	74 0e                	je     c000b508 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	55                   	push   ebp
c000b4fe:	e8 9d fe ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	66 90                	xchg   ax,ax
c000b508:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b50c:	74 72                	je     c000b580 <VCache::write(unsigned long long, int, void*)+0x104>
c000b50e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b511:	89 c8                	mov    eax,ecx
c000b513:	99                   	cdq    
c000b514:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b517:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b526:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b52a:	31 f0                	xor    eax,esi
c000b52c:	31 fa                	xor    edx,edi
c000b52e:	09 d0                	or     eax,edx
c000b530:	75 42                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b532:	83 fb 01             	cmp    ebx,0x1
c000b535:	75 3d                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b53a:	89 cf                	mov    edi,ecx
c000b53c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b540:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b546:	0f af f8             	imul   edi,eax
c000b549:	89 c1                	mov    ecx,eax
c000b54b:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b550:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b553:	40                   	inc    eax
c000b554:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b557:	83 f8 50             	cmp    eax,0x50
c000b55a:	0f 85 a8 00 00 00    	jne    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	55                   	push   ebp
c000b564:	e8 47 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b569:	83 c4 10             	add    esp,0x10
c000b56c:	e9 97 00 00 00       	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b571:	8d 76 00             	lea    esi,[esi+0x0]
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	55                   	push   ebp
c000b578:	e8 33 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b57d:	83 c4 10             	add    esp,0x10
c000b580:	83 fb 4f             	cmp    ebx,0x4f
c000b583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b586:	7f 20                	jg     c000b5a8 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b588:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b58b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b58f:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b592:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b595:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b598:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b59c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5a4:	eb 62                	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a6:	66 90                	xchg   ax,ax
c000b5a8:	83 ec 0c             	sub    esp,0xc
c000b5ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5b1:	53                   	push   ebx
c000b5b2:	57                   	push   edi
c000b5b3:	56                   	push   esi
c000b5b4:	50                   	push   eax
c000b5b5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5b8:	83 c4 20             	add    esp,0x20
c000b5bb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5c0:	89 c6                	mov    esi,eax
c000b5c2:	74 28                	je     c000b5ec <VCache::write(unsigned long long, int, void*)+0x170>
c000b5c4:	52                   	push   edx
c000b5c5:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5ca:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5ce:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5d4:	99                   	cdq    
c000b5d5:	f7 f9                	idiv   ecx
c000b5d7:	50                   	push   eax
c000b5d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5dc:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b5e2:	e8 a7 88 00 00       	call   c0013e8e <VAS::unlockPages(unsigned long, int)>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	66 90                	xchg   ax,ax
c000b5ec:	e8 8b b3 00 00       	call   c001697c <KeRestorePreemption()>
c000b5f1:	85 f6                	test   esi,esi
c000b5f3:	74 4b                	je     c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5f5:	83 ec 0c             	sub    esp,0xc
c000b5f8:	68 58 38 02 c0       	push   0xc0023858
c000b5fd:	e8 64 b9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b602:	83 c4 10             	add    esp,0x10
c000b605:	eb 39                	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b607:	90                   	nop
c000b608:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b60d:	74 29                	je     c000b638 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b60f:	50                   	push   eax
c000b610:	b9 00 10 00 00       	mov    ecx,0x1000
c000b615:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b619:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b61f:	99                   	cdq    
c000b620:	f7 f9                	idiv   ecx
c000b622:	50                   	push   eax
c000b623:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b627:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b62d:	e8 5c 88 00 00       	call   c0013e8e <VAS::unlockPages(unsigned long, int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8d 76 00             	lea    esi,[esi+0x0]
c000b638:	e8 3f b3 00 00       	call   c001697c <KeRestorePreemption()>
c000b63d:	31 f6                	xor    esi,esi
c000b63f:	90                   	nop
c000b640:	83 c4 1c             	add    esp,0x1c
c000b643:	89 f0                	mov    eax,esi
c000b645:	5b                   	pop    ebx
c000b646:	5e                   	pop    esi
c000b647:	5f                   	pop    edi
c000b648:	5d                   	pop    ebp
c000b649:	c3                   	ret    

c000b64a <VCache::read(unsigned long long, int, void*)>:
c000b64a:	55                   	push   ebp
c000b64b:	bd 00 10 00 00       	mov    ebp,0x1000
c000b650:	57                   	push   edi
c000b651:	56                   	push   esi
c000b652:	53                   	push   ebx
c000b653:	83 ec 2c             	sub    esp,0x2c
c000b656:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b65a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b65e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b662:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66e:	e8 e1 b2 00 00       	call   c0016954 <KeDisablePreemption()>
c000b673:	50                   	push   eax
c000b674:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b677:	0f af c6             	imul   eax,esi
c000b67a:	05 ff 0f 00 00       	add    eax,0xfff
c000b67f:	99                   	cdq    
c000b680:	f7 fd                	idiv   ebp
c000b682:	50                   	push   eax
c000b683:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b687:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b68d:	e8 c0 87 00 00       	call   c0013e52 <VAS::canLockPages(unsigned long, int)>
c000b692:	83 c4 10             	add    esp,0x10
c000b695:	84 c0                	test   al,al
c000b697:	89 c7                	mov    edi,eax
c000b699:	74 25                	je     c000b6c0 <VCache::read(unsigned long long, int, void*)+0x76>
c000b69b:	50                   	push   eax
c000b69c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b69f:	0f af c6             	imul   eax,esi
c000b6a2:	05 ff 0f 00 00       	add    eax,0xfff
c000b6a7:	99                   	cdq    
c000b6a8:	f7 fd                	idiv   ebp
c000b6aa:	50                   	push   eax
c000b6ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b6af:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b6b5:	e8 22 8a 00 00       	call   c00140dc <VAS::lockPages(unsigned long, int)>
c000b6ba:	83 c4 10             	add    esp,0x10
c000b6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b6c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6c4:	74 0e                	je     c000b6d4 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	53                   	push   ebx
c000b6ca:	e8 e1 fc ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	66 90                	xchg   ax,ax
c000b6d4:	83 fe 01             	cmp    esi,0x1
c000b6d7:	0f 85 fb 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6e0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6eb:	0f 85 e7 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6f1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6f4:	89 ee                	mov    esi,ebp
c000b6f6:	f7 de                	neg    esi
c000b6f8:	89 f0                	mov    eax,esi
c000b6fa:	c1 f8 1f             	sar    eax,0x1f
c000b6fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b701:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b705:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b709:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b70d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b711:	89 ca                	mov    edx,ecx
c000b713:	89 f9                	mov    ecx,edi
c000b715:	0f b6 f9             	movzx  edi,cl
c000b718:	89 f0                	mov    eax,esi
c000b71a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b71e:	74 0c                	je     c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b720:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b723:	75 07                	jne    c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b725:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b728:	74 56                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b72a:	66 90                	xchg   ax,ax
c000b72c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b736:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b73a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b73d:	8b 37                	mov    esi,DWORD PTR [edi]
c000b73f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b742:	55                   	push   ebp
c000b743:	52                   	push   edx
c000b744:	50                   	push   eax
c000b745:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b749:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b74c:	83 c4 20             	add    esp,0x20
c000b74f:	85 c0                	test   eax,eax
c000b751:	89 c5                	mov    ebp,eax
c000b753:	74 2b                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	68 70 38 02 c0       	push   0xc0023870
c000b75d:	e8 04 b8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b762:	83 c4 10             	add    esp,0x10
c000b765:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b76a:	0f 84 bc 00 00 00    	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b770:	56                   	push   esi
c000b771:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b774:	05 ff 0f 00 00       	add    eax,0xfff
c000b779:	e9 92 00 00 00       	jmp    c000b810 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b77e:	66 90                	xchg   ax,ax
c000b780:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b783:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b787:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b78d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b790:	8d 70 ff             	lea    esi,[eax-0x1]
c000b793:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b797:	0f af f1             	imul   esi,ecx
c000b79a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b79d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b79f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b7a4:	74 26                	je     c000b7cc <VCache::read(unsigned long long, int, void*)+0x182>
c000b7a6:	51                   	push   ecx
c000b7a7:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7af:	05 ff 0f 00 00       	add    eax,0xfff
c000b7b4:	99                   	cdq    
c000b7b5:	f7 f9                	idiv   ecx
c000b7b7:	50                   	push   eax
c000b7b8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7bc:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b7c2:	e8 c7 86 00 00       	call   c0013e8e <VAS::unlockPages(unsigned long, int)>
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	66 90                	xchg   ax,ax
c000b7cc:	e8 ab b1 00 00       	call   c001697c <KeRestorePreemption()>
c000b7d1:	31 ed                	xor    ebp,ebp
c000b7d3:	eb 5f                	jmp    c000b834 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	53                   	push   ebx
c000b7dc:	e8 bf fb ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b7e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7e4:	5a                   	pop    edx
c000b7e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7eb:	56                   	push   esi
c000b7ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f4:	50                   	push   eax
c000b7f5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7f8:	83 c4 20             	add    esp,0x20
c000b7fb:	89 c5                	mov    ebp,eax
c000b7fd:	89 f8                	mov    eax,edi
c000b7ff:	84 c0                	test   al,al
c000b801:	74 29                	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b803:	50                   	push   eax
c000b804:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b808:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b80e:	66 90                	xchg   ax,ax
c000b810:	b9 00 10 00 00       	mov    ecx,0x1000
c000b815:	99                   	cdq    
c000b816:	f7 f9                	idiv   ecx
c000b818:	50                   	push   eax
c000b819:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b81d:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b823:	e8 66 86 00 00       	call   c0013e8e <VAS::unlockPages(unsigned long, int)>
c000b828:	83 c4 10             	add    esp,0x10
c000b82b:	90                   	nop
c000b82c:	e8 4b b1 00 00       	call   c001697c <KeRestorePreemption()>
c000b831:	8d 76 00             	lea    esi,[esi+0x0]
c000b834:	83 c4 2c             	add    esp,0x2c
c000b837:	89 e8                	mov    eax,ebp
c000b839:	5b                   	pop    ebx
c000b83a:	5e                   	pop    esi
c000b83b:	5f                   	pop    edi
c000b83c:	5d                   	pop    ebp
c000b83d:	c3                   	ret    

c000b83e <Video::putrect(int, int, int, int, unsigned int)>:
c000b83e:	55                   	push   ebp
c000b83f:	57                   	push   edi
c000b840:	56                   	push   esi
c000b841:	53                   	push   ebx
c000b842:	83 ec 1c             	sub    esp,0x1c
c000b845:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b849:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b84d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b851:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b855:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b85d:	01 df                	add    edi,ebx
c000b85f:	39 fb                	cmp    ebx,edi
c000b861:	7d 1f                	jge    c000b882 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b863:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b867:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b86b:	7d 12                	jge    c000b87f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b86d:	8b 16                	mov    edx,DWORD PTR [esi]
c000b86f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b873:	53                   	push   ebx
c000b874:	55                   	push   ebp
c000b875:	45                   	inc    ebp
c000b876:	56                   	push   esi
c000b877:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b87a:	83 c4 10             	add    esp,0x10
c000b87d:	eb e8                	jmp    c000b867 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b87f:	43                   	inc    ebx
c000b880:	eb dd                	jmp    c000b85f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b882:	83 c4 1c             	add    esp,0x1c
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	31 ff                	xor    edi,edi
c000b88e:	56                   	push   esi
c000b88f:	53                   	push   ebx
c000b890:	83 ec 1c             	sub    esp,0x1c
c000b893:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b897:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b89b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8a2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8af:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8b3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8b6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ba:	01 f9                	add    ecx,edi
c000b8bc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8c0:	7d 2f                	jge    c000b8f1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8c2:	31 f6                	xor    esi,esi
c000b8c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8c8:	01 f2                	add    edx,esi
c000b8ca:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8ce:	7d 1a                	jge    c000b8ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8d3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8d6:	46                   	inc    esi
c000b8d7:	51                   	push   ecx
c000b8d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8dc:	52                   	push   edx
c000b8dd:	55                   	push   ebp
c000b8de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8e8:	eb da                	jmp    c000b8c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8ea:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8ee:	47                   	inc    edi
c000b8ef:	eb c5                	jmp    c000b8b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8f1:	83 c4 1c             	add    esp,0x1c
c000b8f4:	5b                   	pop    ebx
c000b8f5:	5e                   	pop    esi
c000b8f6:	5f                   	pop    edi
c000b8f7:	5d                   	pop    ebp
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Video::blit(unsigned int*, int, int, int, int)>:
c000b8fa:	55                   	push   ebp
c000b8fb:	ba 00 00 00 00       	mov    edx,0x0
c000b900:	57                   	push   edi
c000b901:	56                   	push   esi
c000b902:	53                   	push   ebx
c000b903:	83 ec 1c             	sub    esp,0x1c
c000b906:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b90a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b90e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b912:	85 c0                	test   eax,eax
c000b914:	0f 49 d0             	cmovns edx,eax
c000b917:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b91e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b922:	89 eb                	mov    ebx,ebp
c000b924:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b928:	01 ea                	add    edx,ebp
c000b92a:	39 da                	cmp    edx,ebx
c000b92c:	7e 54                	jle    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b92e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b934:	7c 4c                	jl     c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b936:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b93a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b93e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b942:	01 c1                	add    ecx,eax
c000b944:	39 f9                	cmp    ecx,edi
c000b946:	7e 2f                	jle    c000b977 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b948:	83 c2 04             	add    edx,0x4
c000b94b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b951:	7c 21                	jl     c000b974 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b953:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b957:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b959:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b95c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b960:	55                   	push   ebp
c000b961:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b965:	56                   	push   esi
c000b966:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b970:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b974:	47                   	inc    edi
c000b975:	eb c7                	jmp    c000b93e <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b977:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b97b:	43                   	inc    ebx
c000b97c:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b980:	eb a2                	jmp    c000b924 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b982:	83 c4 1c             	add    esp,0x1c
c000b985:	5b                   	pop    ebx
c000b986:	5e                   	pop    esi
c000b987:	5f                   	pop    edi
c000b988:	5d                   	pop    ebp
c000b989:	c3                   	ret    

c000b98a <Video::clearScreen(unsigned int)>:
c000b98a:	57                   	push   edi
c000b98b:	56                   	push   esi
c000b98c:	53                   	push   ebx
c000b98d:	31 db                	xor    ebx,ebx
c000b98f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b993:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b999:	7e 1f                	jle    c000b9ba <Video::clearScreen(unsigned int)+0x30>
c000b99b:	31 ff                	xor    edi,edi
c000b99d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9a3:	7e 12                	jle    c000b9b7 <Video::clearScreen(unsigned int)+0x2d>
c000b9a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ab:	53                   	push   ebx
c000b9ac:	57                   	push   edi
c000b9ad:	47                   	inc    edi
c000b9ae:	56                   	push   esi
c000b9af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9b2:	83 c4 10             	add    esp,0x10
c000b9b5:	eb e6                	jmp    c000b99d <Video::clearScreen(unsigned int)+0x13>
c000b9b7:	43                   	inc    ebx
c000b9b8:	eb d9                	jmp    c000b993 <Video::clearScreen(unsigned int)+0x9>
c000b9ba:	5b                   	pop    ebx
c000b9bb:	5e                   	pop    esi
c000b9bc:	5f                   	pop    edi
c000b9bd:	c3                   	ret    

c000b9be <Video::putpixel(int, int, unsigned int)>:
c000b9be:	c7 44 24 04 a8 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc00238a8
c000b9c6:	e9 45 41 00 00       	jmp    c000fb10 <KePanic(char const*)>
c000b9cb:	90                   	nop

c000b9cc <Video::readPixelApprox(int, int)>:
c000b9cc:	83 ec 18             	sub    esp,0x18
c000b9cf:	68 c9 38 02 c0       	push   0xc00238c9
c000b9d4:	e8 37 41 00 00       	call   c000fb10 <KePanic(char const*)>
c000b9d9:	31 c0                	xor    eax,eax
c000b9db:	83 c4 1c             	add    esp,0x1c
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Video::Video(char const*)>:
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e7:	83 ec 08             	sub    esp,0x8
c000b9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ee:	50                   	push   eax
c000b9ef:	e8 64 e1 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b9f4:	83 c4 10             	add    esp,0x10
c000b9f7:	ba 6c 39 02 c0       	mov    edx,0xc002396c
c000b9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba00:	89 10                	mov    DWORD PTR [eax],edx
c000ba02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba06:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba10:	90                   	nop
c000ba11:	83 c4 0c             	add    esp,0xc
c000ba14:	c3                   	ret    
c000ba15:	90                   	nop

c000ba16 <Video::~Video()>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	ba 6c 39 02 c0       	mov    edx,0xc002396c
c000ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba22:	89 10                	mov    DWORD PTR [eax],edx
c000ba24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 c7 de ff ff       	call   c00098f8 <Device::~Device()>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	90                   	nop
c000ba35:	83 c4 0c             	add    esp,0xc
c000ba38:	c3                   	ret    
c000ba39:	90                   	nop

c000ba3a <Video::~Video()>:
c000ba3a:	83 ec 0c             	sub    esp,0xc
c000ba3d:	83 ec 0c             	sub    esp,0xc
c000ba40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba44:	e8 cd ff ff ff       	call   c000ba16 <Video::~Video()>
c000ba49:	83 c4 10             	add    esp,0x10
c000ba4c:	83 ec 08             	sub    esp,0x8
c000ba4f:	68 64 01 00 00       	push   0x164
c000ba54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba58:	e8 5f 18 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000ba5d:	83 c4 10             	add    esp,0x10
c000ba60:	83 c4 0c             	add    esp,0xc
c000ba63:	c3                   	ret    

c000ba64 <Video::isMonochrome()>:
c000ba64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba68:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba6e:	c3                   	ret    
c000ba6f:	90                   	nop

c000ba70 <Video::getWidth()>:
c000ba70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba7a:	c3                   	ret    
c000ba7b:	90                   	nop

c000ba7c <Video::getHeight()>:
c000ba7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba86:	c3                   	ret    
c000ba87:	90                   	nop

c000ba88 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba88:	55                   	push   ebp
c000ba89:	57                   	push   edi
c000ba8a:	56                   	push   esi
c000ba8b:	53                   	push   ebx
c000ba8c:	83 ec 2c             	sub    esp,0x2c
c000ba8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba97:	83 f8 01             	cmp    eax,0x1
c000ba9a:	19 c9                	sbb    ecx,ecx
c000ba9c:	31 db                	xor    ebx,ebx
c000ba9e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000baa2:	89 ce                	mov    esi,ecx
c000baa4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000baac:	f7 d6                	not    esi
c000baae:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000bab4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bab8:	01 d8                	add    eax,ebx
c000baba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000babe:	57                   	push   edi
c000babf:	e8 b8 ff ff ff       	call   c000ba7c <Video::getHeight()>
c000bac4:	59                   	pop    ecx
c000bac5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bac9:	7e 70                	jle    c000bb3b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bacb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bacf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000bad3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bad6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bada:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bade:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae9:	89 e8                	mov    eax,ebp
c000baeb:	83 c0 20             	add    eax,0x20
c000baee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000baf2:	57                   	push   edi
c000baf3:	e8 78 ff ff ff       	call   c000ba70 <Video::getWidth()>
c000baf8:	5a                   	pop    edx
c000baf9:	39 c5                	cmp    ebp,eax
c000bafb:	7d 34                	jge    c000bb31 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bafd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb02:	74 05                	je     c000bb09 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb04:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb06:	56                   	push   esi
c000bb07:	eb 0d                	jmp    c000bb16 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb09:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb0e:	74 12                	je     c000bb22 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb10:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb1a:	55                   	push   ebp
c000bb1b:	57                   	push   edi
c000bb1c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb1f:	83 c4 10             	add    esp,0x10
c000bb22:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb26:	45                   	inc    ebp
c000bb27:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb2b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bb2f:	75 c1                	jne    c000baf2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb31:	43                   	inc    ebx
c000bb32:	83 fb 20             	cmp    ebx,0x20
c000bb35:	0f 85 79 ff ff ff    	jne    c000bab4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb3b:	83 c4 2c             	add    esp,0x2c
c000bb3e:	5b                   	pop    ebx
c000bb3f:	5e                   	pop    esi
c000bb40:	5f                   	pop    edi
c000bb41:	5d                   	pop    ebp
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb44:	55                   	push   ebp
c000bb45:	57                   	push   edi
c000bb46:	56                   	push   esi
c000bb47:	53                   	push   ebx
c000bb48:	83 ec 48             	sub    esp,0x48
c000bb4b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb4f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb53:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb57:	c1 e0 08             	shl    eax,0x8
c000bb5a:	01 d0                	add    eax,edx
c000bb5c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb64:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb68:	c1 e0 08             	shl    eax,0x8
c000bb6b:	01 d0                	add    eax,edx
c000bb6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb75:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb82:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb89:	50                   	push   eax
c000bb8a:	e8 25 3b 00 00       	call   c000f6b4 <malloc>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	85 c0                	test   eax,eax
c000bb94:	89 c5                	mov    ebp,eax
c000bb96:	75 10                	jne    c000bba8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	68 f4 38 02 c0       	push   0xc00238f4
c000bba0:	e8 6b 3f 00 00       	call   c000fb10 <KePanic(char const*)>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	52                   	push   edx
c000bba9:	bf 12 00 00 00       	mov    edi,0x12
c000bbae:	52                   	push   edx
c000bbaf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbb3:	50                   	push   eax
c000bbb4:	68 04 39 02 c0       	push   0xc0023904
c000bbb9:	e8 a8 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbbe:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbc1:	83 e0 20             	and    eax,0x20
c000bbc4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bbc8:	85 c0                	test   eax,eax
c000bbca:	59                   	pop    ecx
c000bbcb:	0f 94 c0             	sete   al
c000bbce:	0f b6 c0             	movzx  eax,al
c000bbd1:	5e                   	pop    esi
c000bbd2:	50                   	push   eax
c000bbd3:	68 0e 39 02 c0       	push   0xc002390e
c000bbd8:	e8 89 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbdd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbe1:	83 c4 10             	add    esp,0x10
c000bbe4:	85 c0                	test   eax,eax
c000bbe6:	89 c2                	mov    edx,eax
c000bbe8:	74 11                	je     c000bbfb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbea:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbee:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbf2:	c1 ff 03             	sar    edi,0x3
c000bbf5:	0f af f9             	imul   edi,ecx
c000bbf8:	83 c7 12             	add    edi,0x12
c000bbfb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bc00:	74 07                	je     c000bc09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bc02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc07:	75 12                	jne    c000bc1b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bc09:	83 ec 0c             	sub    esp,0xc
c000bc0c:	68 1c 39 02 c0       	push   0xc002391c
c000bc11:	e8 50 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bc16:	e9 aa 02 00 00       	jmp    c000bec5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bc1b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc1f:	83 f9 02             	cmp    ecx,0x2
c000bc22:	74 0e                	je     c000bc32 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bc24:	83 f9 0a             	cmp    ecx,0xa
c000bc27:	0f 84 d1 00 00 00    	je     c000bcfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc2d:	e9 7e 02 00 00       	jmp    c000beb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc32:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc37:	75 0e                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc39:	84 d2                	test   dl,dl
c000bc3b:	75 0a                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc3d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc40:	83 e8 18             	sub    eax,0x18
c000bc43:	a8 f7                	test   al,0xf7
c000bc45:	74 0d                	je     c000bc54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc47:	83 ec 0c             	sub    esp,0xc
c000bc4a:	68 31 39 02 c0       	push   0xc0023931
c000bc4f:	e9 64 02 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc54:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc5c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc61:	31 c0                	xor    eax,eax
c000bc63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc6f:	89 c6                	mov    esi,eax
c000bc71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc76:	75 15                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc78:	99                   	cdq    
c000bc79:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc7d:	85 d2                	test   edx,edx
c000bc7f:	75 0c                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc81:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc85:	29 c6                	sub    esi,eax
c000bc87:	4e                   	dec    esi
c000bc88:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc8d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc99:	75 0c                	jne    c000bca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc9b:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bca0:	c1 e2 18             	shl    edx,0x18
c000bca3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bca7:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bcac:	8d 46 01             	lea    eax,[esi+0x1]
c000bcaf:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bcb3:	c1 e1 10             	shl    ecx,0x10
c000bcb6:	89 ca                	mov    edx,ecx
c000bcb8:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bcbd:	c1 e1 08             	shl    ecx,0x8
c000bcc0:	09 d1                	or     ecx,edx
c000bcc2:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bcc6:	09 d1                	or     ecx,edx
c000bcc8:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bccc:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bcd0:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcd4:	c1 fa 03             	sar    edx,0x3
c000bcd7:	01 d7                	add    edi,edx
c000bcd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcdd:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bce1:	7e 04                	jle    c000bce7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bce3:	89 c6                	mov    esi,eax
c000bce5:	eb 8a                	jmp    c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bce7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bceb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcef:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcf3:	0f 8f 6e ff ff ff    	jg     c000bc67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bcf9:	e9 ce 01 00 00       	jmp    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcfe:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd03:	75 0e                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd05:	85 c0                	test   eax,eax
c000bd07:	75 0a                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd09:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd0c:	83 e8 18             	sub    eax,0x18
c000bd0f:	a8 f7                	test   al,0xf7
c000bd11:	74 0d                	je     c000bd20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bd13:	83 ec 0c             	sub    esp,0xc
c000bd16:	68 3f 39 02 c0       	push   0xc002393f
c000bd1b:	e9 98 01 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bd20:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bd28:	31 c9                	xor    ecx,ecx
c000bd2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd32:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd36:	0f 8d 90 01 00 00    	jge    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd40:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd44:	0f 8e 82 01 00 00    	jle    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd4a:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd4e:	8d 77 01             	lea    esi,[edi+0x1]
c000bd51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd55:	83 fa 7f             	cmp    edx,0x7f
c000bd58:	89 d0                	mov    eax,edx
c000bd5a:	0f 8e a3 00 00 00    	jle    c000be03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd60:	83 e0 7f             	and    eax,0x7f
c000bd63:	31 d2                	xor    edx,edx
c000bd65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd69:	40                   	inc    eax
c000bd6a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd72:	75 08                	jne    c000bd7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd74:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd79:	c1 e2 18             	shl    edx,0x18
c000bd7c:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd81:	c1 e0 10             	shl    eax,0x10
c000bd84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd88:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd8d:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd91:	c1 e0 08             	shl    eax,0x8
c000bd94:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd98:	09 f8                	or     eax,edi
c000bd9a:	31 ff                	xor    edi,edi
c000bd9c:	09 d0                	or     eax,edx
c000bd9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bda2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bda7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdab:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bdb0:	75 1d                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdb2:	89 c8                	mov    eax,ecx
c000bdb4:	99                   	cdq    
c000bdb5:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bdb9:	85 d2                	test   edx,edx
c000bdbb:	75 12                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdc1:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bdc5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bdc9:	49                   	dec    ecx
c000bdca:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bdcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdd3:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdd6:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdda:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdde:	8d 47 01             	lea    eax,[edi+0x1]
c000bde1:	7e 06                	jle    c000bde9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bde3:	89 c7                	mov    edi,eax
c000bde5:	89 d1                	mov    ecx,edx
c000bde7:	eb c2                	jmp    c000bdab <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bde9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bded:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bdf1:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bdf5:	c1 f8 03             	sar    eax,0x3
c000bdf8:	01 c6                	add    esi,eax
c000bdfa:	89 d1                	mov    ecx,edx
c000bdfc:	89 f7                	mov    edi,esi
c000bdfe:	e9 2f ff ff ff       	jmp    c000bd32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000be03:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000be0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be0f:	40                   	inc    eax
c000be10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be1d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be22:	75 1d                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be24:	89 c8                	mov    eax,ecx
c000be26:	99                   	cdq    
c000be27:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be2b:	85 d2                	test   edx,edx
c000be2d:	75 12                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be33:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be37:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be3b:	49                   	dec    ecx
c000be3c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be41:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be45:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be4d:	75 0c                	jne    c000be5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be4f:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be54:	c1 e7 18             	shl    edi,0x18
c000be57:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be5b:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be60:	8d 51 01             	lea    edx,[ecx+0x1]
c000be63:	c1 e0 10             	shl    eax,0x10
c000be66:	89 c7                	mov    edi,eax
c000be68:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be6d:	c1 e0 08             	shl    eax,0x8
c000be70:	09 f8                	or     eax,edi
c000be72:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be76:	09 f8                	or     eax,edi
c000be78:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be7c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be84:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be88:	c1 f8 03             	sar    eax,0x3
c000be8b:	01 c6                	add    esi,eax
c000be8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be91:	40                   	inc    eax
c000be92:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be96:	7e 0b                	jle    c000bea3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be9c:	89 d1                	mov    ecx,edx
c000be9e:	e9 7a ff ff ff       	jmp    c000be1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000bea3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000bea7:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000beab:	e9 4a ff ff ff       	jmp    c000bdfa <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000beb0:	50                   	push   eax
c000beb1:	50                   	push   eax
c000beb2:	51                   	push   ecx
c000beb3:	68 4e 39 02 c0       	push   0xc002394e
c000beb8:	e8 a9 b0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bebd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bec0:	e8 ff 37 00 00       	call   c000f6c4 <free>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	31 ed                	xor    ebp,ebp
c000beca:	eb 14                	jmp    c000bee0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000becc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bed0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000bed4:	89 18                	mov    DWORD PTR [eax],ebx
c000bed6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beda:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bede:	89 18                	mov    DWORD PTR [eax],ebx
c000bee0:	83 c4 3c             	add    esp,0x3c
c000bee3:	89 e8                	mov    eax,ebp
c000bee5:	5b                   	pop    ebx
c000bee6:	5e                   	pop    esi
c000bee7:	5f                   	pop    edi
c000bee8:	5d                   	pop    ebp
c000bee9:	c3                   	ret    

c000beea <Video::putTGA(int, int, unsigned char*, int)>:
c000beea:	55                   	push   ebp
c000beeb:	57                   	push   edi
c000beec:	56                   	push   esi
c000beed:	53                   	push   ebx
c000beee:	83 ec 28             	sub    esp,0x28
c000bef1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bef5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bef9:	50                   	push   eax
c000befa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000befe:	50                   	push   eax
c000beff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf07:	55                   	push   ebp
c000bf08:	e8 37 fc ff ff       	call   c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf0d:	83 c4 20             	add    esp,0x20
c000bf10:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf14:	85 c0                	test   eax,eax
c000bf16:	74 3b                	je     c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf18:	89 c6                	mov    esi,eax
c000bf1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf22:	39 d8                	cmp    eax,ebx
c000bf24:	7e 2d                	jle    c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf26:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf2e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf32:	39 f8                	cmp    eax,edi
c000bf34:	7e 1a                	jle    c000bf50 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf36:	83 c6 04             	add    esi,0x4
c000bf39:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	79 0d                	jns    c000bf4d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf40:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf43:	50                   	push   eax
c000bf44:	53                   	push   ebx
c000bf45:	57                   	push   edi
c000bf46:	55                   	push   ebp
c000bf47:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	47                   	inc    edi
c000bf4e:	eb da                	jmp    c000bf2a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf50:	43                   	inc    ebx
c000bf51:	eb c7                	jmp    c000bf1a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf53:	83 c4 1c             	add    esp,0x1c
c000bf56:	5b                   	pop    ebx
c000bf57:	5e                   	pop    esi
c000bf58:	5f                   	pop    edi
c000bf59:	5d                   	pop    ebp
c000bf5a:	c3                   	ret    
c000bf5b:	90                   	nop

c000bf5c <ACPI::close(int, int, void*)>:
c000bf5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf61:	c3                   	ret    
c000bf62:	66 90                	xchg   ax,ax

c000bf64 <loadACPITables(unsigned char*)>:
c000bf64:	57                   	push   edi
c000bf65:	56                   	push   esi
c000bf66:	53                   	push   ebx
c000bf67:	83 ec 60             	sub    esp,0x60
c000bf6a:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf6f:	0f 84 43 02 00 00    	je     c000c1b8 <loadACPITables(unsigned char*)+0x254>
c000bf75:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf7a:	0f b6 c0             	movzx  eax,al
c000bf7d:	85 c0                	test   eax,eax
c000bf7f:	74 7b                	je     c000bffc <loadACPITables(unsigned char*)+0x98>
c000bf81:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf90:	83 e8 24             	sub    eax,0x24
c000bf93:	c1 e8 03             	shr    eax,0x3
c000bf96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf9a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfa2:	66 90                	xchg   ax,ax
c000bfa4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfa8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfac:	0f 8d ba 00 00 00    	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000bfb2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfb6:	83 c0 24             	add    eax,0x24
c000bfb9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfbd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfc5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfc9:	c1 e0 03             	shl    eax,0x3
c000bfcc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfd7:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfd9:	89 c1                	mov    ecx,eax
c000bfdb:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfe0:	8d 50 01             	lea    edx,[eax+0x1]
c000bfe3:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bfe9:	89 ca                	mov    edx,ecx
c000bfeb:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bff2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bff7:	eb ab                	jmp    c000bfa4 <loadACPITables(unsigned char*)+0x40>
c000bff9:	8d 76 00             	lea    esi,[esi+0x0]
c000bffc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c000:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c004:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c00b:	83 e8 24             	sub    eax,0x24
c000c00e:	c1 e8 02             	shr    eax,0x2
c000c011:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c015:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c01d:	8d 76 00             	lea    esi,[esi+0x0]
c000c020:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c024:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c028:	7d 42                	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000c02a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c02e:	83 c0 24             	add    eax,0x24
c000c031:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c035:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c039:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c03d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c041:	c1 e0 02             	shl    eax,0x2
c000c044:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c048:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c04c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c04e:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c053:	8d 50 01             	lea    edx,[eax+0x1]
c000c056:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c05c:	89 ca                	mov    edx,ecx
c000c05e:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c065:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c06a:	eb b4                	jmp    c000c020 <loadACPITables(unsigned char*)+0xbc>
c000c06c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c074:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c079:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c07d:	0f 8d 39 01 00 00    	jge    c000c1bc <loadACPITables(unsigned char*)+0x258>
c000c083:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c087:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c08e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c09a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c09e:	25 ff 0f 00 00       	and    eax,0xfff
c000c0a3:	89 c6                	mov    esi,eax
c000c0a5:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c0ab:	83 ec 0c             	sub    esp,0xc
c000c0ae:	6a 01                	push   0x1
c000c0b0:	e8 46 70 00 00       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	6a 01                	push   0x1
c000c0c7:	6a 01                	push   0x1
c000c0c9:	50                   	push   eax
c000c0ca:	52                   	push   edx
c000c0cb:	53                   	push   ebx
c000c0cc:	e8 fd 78 00 00       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0d1:	83 c4 20             	add    esp,0x20
c000c0d4:	09 f0                	or     eax,esi
c000c0d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0de:	c1 e0 03             	shl    eax,0x3
c000c0e1:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c0e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0f2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c102:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c106:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c10a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c10e:	89 c6                	mov    esi,eax
c000c110:	89 d7                	mov    edi,edx
c000c112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c114:	89 c8                	mov    eax,ecx
c000c116:	89 fa                	mov    edx,edi
c000c118:	89 f3                	mov    ebx,esi
c000c11a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c11e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c12d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c135:	05 00 10 00 00       	add    eax,0x1000
c000c13a:	c1 e8 0c             	shr    eax,0xc
c000c13d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c145:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c14d:	25 ff 0f 00 00       	and    eax,0xfff
c000c152:	89 c6                	mov    esi,eax
c000c154:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c15a:	83 ec 0c             	sub    esp,0xc
c000c15d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c161:	e8 95 6f 00 00       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c000c166:	83 c4 10             	add    esp,0x10
c000c169:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c16d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	6a 01                	push   0x1
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	50                   	push   eax
c000c17d:	52                   	push   edx
c000c17e:	53                   	push   ebx
c000c17f:	e8 4a 78 00 00       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c184:	83 c4 20             	add    esp,0x20
c000c187:	09 f0                	or     eax,esi
c000c189:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c191:	83 ec 0c             	sub    esp,0xc
c000c194:	50                   	push   eax
c000c195:	e8 5f 72 00 00       	call   c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1a5:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c1ac:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1b1:	e9 be fe ff ff       	jmp    c000c074 <loadACPITables(unsigned char*)+0x110>
c000c1b6:	66 90                	xchg   ax,ax
c000c1b8:	90                   	nop
c000c1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c1bc:	83 c4 60             	add    esp,0x60
c000c1bf:	5b                   	pop    ebx
c000c1c0:	5e                   	pop    esi
c000c1c1:	5f                   	pop    edi
c000c1c2:	c3                   	ret    
c000c1c3:	90                   	nop

c000c1c4 <findRSDT(unsigned char*)>:
c000c1c4:	57                   	push   edi
c000c1c5:	56                   	push   esi
c000c1c6:	53                   	push   ebx
c000c1c7:	83 ec 50             	sub    esp,0x50
c000c1ca:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c1cf:	85 c0                	test   eax,eax
c000c1d1:	75 0d                	jne    c000c1e0 <findRSDT(unsigned char*)+0x1c>
c000c1d3:	b8 00 00 00 00       	mov    eax,0x0
c000c1d8:	e9 2b 01 00 00       	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c1dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1e0:	89 e0                	mov    eax,esp
c000c1e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1ee:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c202:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c206:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c20a:	89 c6                	mov    esi,eax
c000c20c:	89 d7                	mov    edi,edx
c000c20e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c210:	89 c8                	mov    eax,ecx
c000c212:	89 fa                	mov    edx,edi
c000c214:	89 f3                	mov    ebx,esi
c000c216:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c21a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c21e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c222:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c226:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c22a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c23a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c242:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c246:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c24a:	25 ff 0f 00 00       	and    eax,0xfff
c000c24f:	89 c6                	mov    esi,eax
c000c251:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c257:	83 ec 0c             	sub    esp,0xc
c000c25a:	6a 02                	push   0x2
c000c25c:	e8 9a 6e 00 00       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c000c261:	83 c4 10             	add    esp,0x10
c000c264:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c268:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c26e:	83 ec 0c             	sub    esp,0xc
c000c271:	6a 01                	push   0x1
c000c273:	6a 02                	push   0x2
c000c275:	50                   	push   eax
c000c276:	52                   	push   edx
c000c277:	53                   	push   ebx
c000c278:	e8 51 77 00 00       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c27d:	83 c4 20             	add    esp,0x20
c000c280:	09 f0                	or     eax,esi
c000c282:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c286:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28a:	25 ff 0f 00 00       	and    eax,0xfff
c000c28f:	89 c6                	mov    esi,eax
c000c291:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c297:	83 ec 0c             	sub    esp,0xc
c000c29a:	6a 02                	push   0x2
c000c29c:	e8 5a 6e 00 00       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ae:	83 ec 0c             	sub    esp,0xc
c000c2b1:	6a 01                	push   0x1
c000c2b3:	6a 02                	push   0x2
c000c2b5:	50                   	push   eax
c000c2b6:	52                   	push   edx
c000c2b7:	53                   	push   ebx
c000c2b8:	e8 11 77 00 00       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2bd:	83 c4 20             	add    esp,0x20
c000c2c0:	09 f0                	or     eax,esi
c000c2c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2c6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2cb:	85 c0                	test   eax,eax
c000c2cd:	75 11                	jne    c000c2e0 <findRSDT(unsigned char*)+0x11c>
c000c2cf:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c2d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2de:	eb 24                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2e0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2e5:	83 f8 02             	cmp    eax,0x2
c000c2e8:	75 12                	jne    c000c2fc <findRSDT(unsigned char*)+0x138>
c000c2ea:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c2f1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2f5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2f9:	eb 09                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2fb:	90                   	nop
c000c2fc:	b8 00 00 00 00       	mov    eax,0x0
c000c301:	eb 05                	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c303:	90                   	nop
c000c304:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c308:	83 c4 50             	add    esp,0x50
c000c30b:	5b                   	pop    ebx
c000c30c:	5e                   	pop    esi
c000c30d:	5f                   	pop    edi
c000c30e:	c3                   	ret    
c000c30f:	90                   	nop

c000c310 <findDataTable(unsigned char*, char*)>:
c000c310:	83 ec 1c             	sub    esp,0x1c
c000c313:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c318:	75 0a                	jne    c000c324 <findDataTable(unsigned char*, char*)+0x14>
c000c31a:	b8 00 00 00 00       	mov    eax,0x0
c000c31f:	eb 5f                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c321:	8d 76 00             	lea    esi,[esi+0x0]
c000c324:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c32c:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c331:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c335:	7d 41                	jge    c000c378 <findDataTable(unsigned char*, char*)+0x68>
c000c337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33b:	c1 e0 03             	shl    eax,0x3
c000c33e:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c343:	83 ec 04             	sub    esp,0x4
c000c346:	6a 04                	push   0x4
c000c348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c34c:	50                   	push   eax
c000c34d:	e8 2e 40 ff ff       	call   c0000380 <memcmp>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	85 c0                	test   eax,eax
c000c357:	0f 94 c0             	sete   al
c000c35a:	0f b6 c0             	movzx  eax,al
c000c35d:	85 c0                	test   eax,eax
c000c35f:	74 0f                	je     c000c370 <findDataTable(unsigned char*, char*)+0x60>
c000c361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c365:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c36c:	eb 12                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c36e:	66 90                	xchg   ax,ax
c000c370:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c375:	eb b5                	jmp    c000c32c <findDataTable(unsigned char*, char*)+0x1c>
c000c377:	90                   	nop
c000c378:	b8 00 00 00 00       	mov    eax,0x0
c000c37d:	8d 76 00             	lea    esi,[esi+0x0]
c000c380:	83 c4 1c             	add    esp,0x1c
c000c383:	c3                   	ret    

c000c384 <scanMADT()>:
c000c384:	53                   	push   ebx
c000c385:	83 ec 38             	sub    esp,0x38
c000c388:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c392:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	68 b0 39 02 c0       	push   0xc00239b0
c000c3a4:	e8 bd ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	e8 03 d7 00 00       	call   c0019ab4 <HalFindRSDP()>
c000c3b1:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c3b6:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3bb:	85 c0                	test   eax,eax
c000c3bd:	0f 84 59 04 00 00    	je     c000c81c <scanMADT()+0x498>
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	68 be 39 02 c0       	push   0xc00239be
c000c3cb:	e8 96 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3d0:	83 c4 10             	add    esp,0x10
c000c3d3:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	50                   	push   eax
c000c3dc:	e8 e3 fd ff ff       	call   c000c1c4 <findRSDT(unsigned char*)>
c000c3e1:	83 c4 10             	add    esp,0x10
c000c3e4:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c3e9:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 84 2a 04 00 00    	je     c000c820 <scanMADT()+0x49c>
c000c3f6:	8b 15 84 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd84
c000c3fc:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c401:	83 ec 04             	sub    esp,0x4
c000c404:	52                   	push   edx
c000c405:	50                   	push   eax
c000c406:	68 68 3b 02 c0       	push   0xc0023b68
c000c40b:	e8 56 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	50                   	push   eax
c000c41c:	e8 43 fb ff ff       	call   c000bf64 <loadACPITables(unsigned char*)>
c000c421:	83 c4 10             	add    esp,0x10
c000c424:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	68 cd 39 02 c0       	push   0xc00239cd
c000c431:	50                   	push   eax
c000c432:	e8 d9 fe ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c43e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c443:	0f 84 db 03 00 00    	je     c000c824 <scanMADT()+0x4a0>
c000c449:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c451:	8d 76 00             	lea    esi,[esi+0x0]
c000c454:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c458:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c45b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c45f:	0f 87 c7 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c465:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c46d:	0f 87 b9 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c477:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c47f:	8d 50 01             	lea    edx,[eax+0x1]
c000c482:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c486:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c48a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c48e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c492:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c496:	8d 50 01             	lea    edx,[eax+0x1]
c000c499:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c49d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4a5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4a9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ae:	83 f8 02             	cmp    eax,0x2
c000c4b1:	0f 86 71 03 00 00    	jbe    c000c828 <scanMADT()+0x4a4>
c000c4b7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4bc:	85 c0                	test   eax,eax
c000c4be:	75 58                	jne    c000c518 <scanMADT()+0x194>
c000c4c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4cb:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4d1:	0f b6 d2             	movzx  edx,dl
c000c4d4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4d8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4dc:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c4e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4e6:	8d 50 01             	lea    edx,[eax+0x1]
c000c4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ed:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4f3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4f6:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c4fc:	0f b6 d2             	movzx  edx,dl
c000c4ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c503:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c507:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c50d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c512:	e9 f1 02 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c517:	90                   	nop
c000c518:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c51d:	83 f8 01             	cmp    eax,0x1
c000c520:	0f 85 32 01 00 00    	jne    c000c658 <scanMADT()+0x2d4>
c000c526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52a:	8d 50 01             	lea    edx,[eax+0x1]
c000c52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c531:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c537:	0f b6 d2             	movzx  edx,dl
c000c53a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c542:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c548:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c54d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c555:	01 d0                	add    eax,edx
c000c557:	83 c0 2c             	add    eax,0x2c
c000c55a:	8a 00                	mov    al,BYTE PTR [eax]
c000c55c:	0f b6 d0             	movzx  edx,al
c000c55f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c563:	8d 48 01             	lea    ecx,[eax+0x1]
c000c566:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c56a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c56e:	0f b6 c0             	movzx  eax,al
c000c571:	c1 e0 08             	shl    eax,0x8
c000c574:	89 d1                	mov    ecx,edx
c000c576:	09 c1                	or     ecx,eax
c000c578:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c57c:	8d 50 02             	lea    edx,[eax+0x2]
c000c57f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c583:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c587:	0f b6 c0             	movzx  eax,al
c000c58a:	c1 e0 10             	shl    eax,0x10
c000c58d:	09 c1                	or     ecx,eax
c000c58f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c593:	8d 50 03             	lea    edx,[eax+0x3]
c000c596:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c59a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59e:	0f b6 c0             	movzx  eax,al
c000c5a1:	c1 e0 18             	shl    eax,0x18
c000c5a4:	09 c1                	or     ecx,eax
c000c5a6:	89 ca                	mov    edx,ecx
c000c5a8:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5ad:	0f b6 c0             	movzx  eax,al
c000c5b0:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c5b7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c4:	01 d0                	add    eax,edx
c000c5c6:	83 c0 2c             	add    eax,0x2c
c000c5c9:	8a 00                	mov    al,BYTE PTR [eax]
c000c5cb:	0f b6 d0             	movzx  edx,al
c000c5ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5d2:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5dd:	0f b6 c0             	movzx  eax,al
c000c5e0:	c1 e0 08             	shl    eax,0x8
c000c5e3:	89 d1                	mov    ecx,edx
c000c5e5:	09 c1                	or     ecx,eax
c000c5e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5eb:	8d 50 02             	lea    edx,[eax+0x2]
c000c5ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5f6:	0f b6 c0             	movzx  eax,al
c000c5f9:	c1 e0 10             	shl    eax,0x10
c000c5fc:	09 c1                	or     ecx,eax
c000c5fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c602:	8d 50 03             	lea    edx,[eax+0x3]
c000c605:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c609:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c60d:	0f b6 c0             	movzx  eax,al
c000c610:	c1 e0 18             	shl    eax,0x18
c000c613:	09 c1                	or     ecx,eax
c000c615:	89 ca                	mov    edx,ecx
c000c617:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c61c:	0f b6 c0             	movzx  eax,al
c000c61f:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c626:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c62b:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c630:	83 c0 01             	add    eax,0x1
c000c633:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c638:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c63d:	0f b6 c0             	movzx  eax,al
c000c640:	83 ec 08             	sub    esp,0x8
c000c643:	50                   	push   eax
c000c644:	68 d2 39 02 c0       	push   0xc00239d2
c000c649:	e8 18 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c64e:	83 c4 10             	add    esp,0x10
c000c651:	e9 b2 01 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c656:	66 90                	xchg   ax,ax
c000c658:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c65d:	83 f8 02             	cmp    eax,0x2
c000c660:	0f 85 ea 00 00 00    	jne    c000c750 <scanMADT()+0x3cc>
c000c666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66a:	8d 50 01             	lea    edx,[eax+0x1]
c000c66d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c675:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c679:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c67d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c681:	8d 50 01             	lea    edx,[eax+0x1]
c000c684:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c68c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c690:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c698:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69c:	01 d0                	add    eax,edx
c000c69e:	83 c0 2c             	add    eax,0x2c
c000c6a1:	8a 00                	mov    al,BYTE PTR [eax]
c000c6a3:	0f b6 d0             	movzx  edx,al
c000c6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6b5:	0f b6 c0             	movzx  eax,al
c000c6b8:	c1 e0 08             	shl    eax,0x8
c000c6bb:	89 d1                	mov    ecx,edx
c000c6bd:	09 c1                	or     ecx,eax
c000c6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6c3:	8d 50 02             	lea    edx,[eax+0x2]
c000c6c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6ce:	0f b6 c0             	movzx  eax,al
c000c6d1:	c1 e0 10             	shl    eax,0x10
c000c6d4:	09 c1                	or     ecx,eax
c000c6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6da:	8d 50 03             	lea    edx,[eax+0x3]
c000c6dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6e5:	0f b6 c0             	movzx  eax,al
c000c6e8:	c1 e0 18             	shl    eax,0x18
c000c6eb:	09 c8                	or     eax,ecx
c000c6ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fe:	01 d0                	add    eax,edx
c000c700:	83 c0 2c             	add    eax,0x2c
c000c703:	8a 00                	mov    al,BYTE PTR [eax]
c000c705:	0f b6 d0             	movzx  edx,al
c000c708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c70c:	8d 48 01             	lea    ecx,[eax+0x1]
c000c70f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c713:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c717:	0f b6 c0             	movzx  eax,al
c000c71a:	c1 e0 08             	shl    eax,0x8
c000c71d:	09 d0                	or     eax,edx
c000c71f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c724:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c729:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c72e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c732:	88 90 e8 60 02 c0    	mov    BYTE PTR [eax-0x3ffd9f18],dl
c000c738:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c73d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c742:	66 89 94 00 20 be 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd41e0],dx
c000c74a:	e9 b9 00 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c74f:	90                   	nop
c000c750:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c755:	83 f8 04             	cmp    eax,0x4
c000c758:	0f 85 9a 00 00 00    	jne    c000c7f8 <scanMADT()+0x474>
c000c75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c762:	8d 50 01             	lea    edx,[eax+0x1]
c000c765:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c769:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c76d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c771:	0f b6 c0             	movzx  eax,al
c000c774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c778:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c77c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c780:	01 d0                	add    eax,edx
c000c782:	83 c0 2c             	add    eax,0x2c
c000c785:	8a 00                	mov    al,BYTE PTR [eax]
c000c787:	0f b6 d0             	movzx  edx,al
c000c78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c78e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c795:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c799:	0f b6 c0             	movzx  eax,al
c000c79c:	c1 e0 08             	shl    eax,0x8
c000c79f:	09 d0                	or     eax,edx
c000c7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7a5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c7b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7bd:	0f b6 c0             	movzx  eax,al
c000c7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c8:	c1 e0 08             	shl    eax,0x8
c000c7cb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7cf:	89 c1                	mov    ecx,eax
c000c7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d5:	c1 e0 18             	shl    eax,0x18
c000c7d8:	89 c3                	mov    ebx,eax
c000c7da:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c7df:	8d 50 01             	lea    edx,[eax+0x1]
c000c7e2:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c7e8:	09 d9                	or     ecx,ebx
c000c7ea:	89 ca                	mov    edx,ecx
c000c7ec:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c7f3:	eb 13                	jmp    c000c808 <scanMADT()+0x484>
c000c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7fd:	83 f8 05             	cmp    eax,0x5
c000c800:	75 06                	jne    c000c808 <scanMADT()+0x484>
c000c802:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c807:	90                   	nop
c000c808:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c80d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c811:	01 d0                	add    eax,edx
c000c813:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c817:	e9 38 fc ff ff       	jmp    c000c454 <scanMADT()+0xd0>
c000c81c:	90                   	nop
c000c81d:	eb 0d                	jmp    c000c82c <scanMADT()+0x4a8>
c000c81f:	90                   	nop
c000c820:	90                   	nop
c000c821:	eb 09                	jmp    c000c82c <scanMADT()+0x4a8>
c000c823:	90                   	nop
c000c824:	90                   	nop
c000c825:	eb 05                	jmp    c000c82c <scanMADT()+0x4a8>
c000c827:	90                   	nop
c000c828:	90                   	nop
c000c829:	8d 76 00             	lea    esi,[esi+0x0]
c000c82c:	83 c4 38             	add    esp,0x38
c000c82f:	5b                   	pop    ebx
c000c830:	c3                   	ret    
c000c831:	90                   	nop
c000c832:	66 90                	xchg   ax,ax

c000c834 <ACPI::ACPI()>:
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83b:	83 ec 08             	sub    esp,0x8
c000c83e:	68 ee 39 02 c0       	push   0xc00239ee
c000c843:	50                   	push   eax
c000c844:	e8 0f d3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	ba 0c 3c 02 c0       	mov    edx,0xc0023c0c
c000c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c855:	89 10                	mov    DWORD PTR [eax],edx
c000c857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c85b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c866:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c874:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c87e:	90                   	nop
c000c87f:	83 c4 0c             	add    esp,0xc
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c884:	83 ec 2c             	sub    esp,0x2c
c000c887:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c88b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c88f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c893:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c897:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c89c:	88 c8                	mov    al,cl
c000c89e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8af:	90                   	nop
c000c8b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8b4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8ba:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8be:	0f 8d b0 00 00 00    	jge    c000c974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8cc:	83 c2 2a             	add    edx,0x2a
c000c8cf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8d8:	0f b7 c0             	movzx  eax,ax
c000c8db:	39 c2                	cmp    edx,eax
c000c8dd:	0f 85 85 00 00 00    	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8eb:	83 c2 2a             	add    edx,0x2a
c000c8ee:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8f2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8f7:	0f b6 c0             	movzx  eax,al
c000c8fa:	39 c2                	cmp    edx,eax
c000c8fc:	75 6a                	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8fe:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c903:	85 c0                	test   eax,eax
c000c905:	74 3d                	je     c000c944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c907:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c90b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c90f:	83 c2 2a             	add    edx,0x2a
c000c912:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c91d:	39 c2                	cmp    edx,eax
c000c91f:	74 13                	je     c000c934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c921:	83 ec 0c             	sub    esp,0xc
c000c924:	68 8c 3b 02 c0       	push   0xc0023b8c
c000c929:	e8 e2 31 00 00       	call   c000fb10 <KePanic(char const*)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	8d 76 00             	lea    esi,[esi+0x0]
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	68 f3 39 02 c0       	push   0xc00239f3
c000c93c:	e8 cf 31 00 00       	call   c000fb10 <KePanic(char const*)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c948:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c94c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c950:	83 c2 2a             	add    edx,0x2a
c000c953:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c957:	8b 02                	mov    eax,DWORD PTR [edx]
c000c959:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c95c:	89 01                	mov    DWORD PTR [ecx],eax
c000c95e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c961:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c966:	66 90                	xchg   ax,ax
c000c968:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c96d:	e9 3e ff ff ff       	jmp    c000c8b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c972:	66 90                	xchg   ax,ax
c000c974:	90                   	nop
c000c975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c979:	83 c4 2c             	add    esp,0x2c
c000c97c:	c2 04 00             	ret    0x4
c000c97f:	90                   	nop

c000c980 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c980:	83 ec 1c             	sub    esp,0x1c
c000c983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c987:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c98b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c98f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c994:	88 c8                	mov    al,cl
c000c996:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c99a:	88 d0                	mov    al,dl
c000c99c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ae:	83 c2 2a             	add    edx,0x2a
c000c9b1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c9b5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ce:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9dd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9e1:	83 c0 01             	add    eax,0x1
c000c9e4:	88 c1                	mov    cl,al
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	83 c2 2a             	add    edx,0x2a
c000c9ed:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ff:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca06:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca14:	8d 50 01             	lea    edx,[eax+0x1]
c000ca17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca25:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca2b:	3d 00 02 00 00       	cmp    eax,0x200
c000ca30:	75 12                	jne    c000ca44 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	68 02 3a 02 c0       	push   0xc0023a02
c000ca3a:	e8 d1 30 00 00       	call   c000fb10 <KePanic(char const*)>
c000ca3f:	83 c4 10             	add    esp,0x10
c000ca42:	66 90                	xchg   ax,ax
c000ca44:	90                   	nop
c000ca45:	83 c4 1c             	add    esp,0x1c
c000ca48:	c3                   	ret    
c000ca49:	90                   	nop
c000ca4a:	66 90                	xchg   ax,ax

c000ca4c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca4c:	b8 00 00 00 00       	mov    eax,0x0
c000ca51:	c3                   	ret    
c000ca52:	66 90                	xchg   ax,ax

c000ca54 <ACPI::detectPCI()>:
c000ca54:	53                   	push   ebx
c000ca55:	83 ec 28             	sub    esp,0x28
c000ca58:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca5d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca62:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000ca67:	83 ec 08             	sub    esp,0x8
c000ca6a:	68 1f 3a 02 c0       	push   0xc0023a1f
c000ca6f:	50                   	push   eax
c000ca70:	e8 9b f8 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca7c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca81:	74 0d                	je     c000ca90 <ACPI::detectPCI()+0x3c>
c000ca83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca88:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca90:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca9e:	0f b6 c0             	movzx  eax,al
c000caa1:	83 f8 01             	cmp    eax,0x1
c000caa4:	75 0e                	jne    c000cab4 <ACPI::detectPCI()+0x60>
c000caa6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cab0:	eb 2e                	jmp    c000cae0 <ACPI::detectPCI()+0x8c>
c000cab2:	66 90                	xchg   ax,ax
c000cab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cab8:	8a 00                	mov    al,BYTE PTR [eax]
c000caba:	0f b6 c0             	movzx  eax,al
c000cabd:	83 f8 02             	cmp    eax,0x2
c000cac0:	75 1e                	jne    c000cae0 <ACPI::detectPCI()+0x8c>
c000cac2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cacc:	85 c0                	test   eax,eax
c000cace:	74 10                	je     c000cae0 <ACPI::detectPCI()+0x8c>
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	68 bc 3b 02 c0       	push   0xc0023bbc
c000cad8:	e8 33 30 00 00       	call   c000fb10 <KePanic(char const*)>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cae4:	83 f0 01             	xor    eax,0x1
c000cae7:	0f b6 c0             	movzx  eax,al
c000caea:	85 c0                	test   eax,eax
c000caec:	74 46                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000caee:	e8 3d 36 ff ff       	call   c0000130 <manualPCIProbe>
c000caf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000caf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cafc:	75 0e                	jne    c000cb0c <ACPI::detectPCI()+0xb8>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb08:	eb 2a                	jmp    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb0a:	66 90                	xchg   ax,ax
c000cb0c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb11:	75 21                	jne    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb18:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb1d:	85 c0                	test   eax,eax
c000cb1f:	74 13                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000cb21:	83 ec 0c             	sub    esp,0xc
c000cb24:	68 bc 3b 02 c0       	push   0xc0023bbc
c000cb29:	e8 e2 2f 00 00       	call   c000fb10 <KePanic(char const*)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	8d 76 00             	lea    esi,[esi+0x0]
c000cb34:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb39:	85 c0                	test   eax,eax
c000cb3b:	0f 84 87 00 00 00    	je     c000cbc8 <ACPI::detectPCI()+0x174>
c000cb41:	83 ec 0c             	sub    esp,0xc
c000cb44:	68 24 3a 02 c0       	push   0xc0023a24
c000cb49:	e8 c3 06 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cb4e:	83 c4 10             	add    esp,0x10
c000cb51:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb59:	83 ec 0c             	sub    esp,0xc
c000cb5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb60:	e8 4f 2b 00 00       	call   c000f6b4 <malloc>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	89 c3                	mov    ebx,eax
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	53                   	push   ebx
c000cb6e:	e8 27 0e 01 00       	call   c001d99a <PCI::PCI()>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb7e:	83 ec 08             	sub    esp,0x8
c000cb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb85:	50                   	push   eax
c000cb86:	e8 6b ce ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb92:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb94:	83 c0 08             	add    eax,0x8
c000cb97:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb99:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb9e:	85 d2                	test   edx,edx
c000cba0:	74 0a                	je     c000cbac <ACPI::detectPCI()+0x158>
c000cba2:	ba 01 00 00 00       	mov    edx,0x1
c000cba7:	eb 0b                	jmp    c000cbb4 <ACPI::detectPCI()+0x160>
c000cba9:	8d 76 00             	lea    esi,[esi+0x0]
c000cbac:	ba 02 00 00 00       	mov    edx,0x2
c000cbb1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbb4:	6a 00                	push   0x0
c000cbb6:	6a 00                	push   0x0
c000cbb8:	52                   	push   edx
c000cbb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbd:	ff d0                	call   eax
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	e9 91 00 00 00       	jmp    c000cc58 <ACPI::detectPCI()+0x204>
c000cbc7:	90                   	nop
c000cbc8:	83 ec 0c             	sub    esp,0xc
c000cbcb:	68 3c 3a 02 c0       	push   0xc0023a3c
c000cbd0:	e8 3c 06 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbdf:	83 ec 0c             	sub    esp,0xc
c000cbe2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe6:	e8 c9 2a 00 00       	call   c000f6b4 <malloc>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	89 c3                	mov    ebx,eax
c000cbf0:	83 ec 0c             	sub    esp,0xc
c000cbf3:	53                   	push   ebx
c000cbf4:	e8 a9 19 01 00       	call   c001e5a2 <IDE::IDE()>
c000cbf9:	83 c4 10             	add    esp,0x10
c000cbfc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc04:	83 ec 08             	sub    esp,0x8
c000cc07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc0b:	50                   	push   eax
c000cc0c:	e8 e5 cd ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc18:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc26:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc33:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc42:	83 c0 08             	add    eax,0x8
c000cc45:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc47:	6a 00                	push   0x0
c000cc49:	6a 00                	push   0x0
c000cc4b:	6a 00                	push   0x0
c000cc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc51:	ff d0                	call   eax
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	66 90                	xchg   ax,ax
c000cc58:	90                   	nop
c000cc59:	83 c4 28             	add    esp,0x28
c000cc5c:	5b                   	pop    ebx
c000cc5d:	c3                   	ret    
c000cc5e:	66 90                	xchg   ax,ax

c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	83 ec 0c             	sub    esp,0xc
c000cc66:	68 51 3a 02 c0       	push   0xc0023a51
c000cc6b:	e8 a0 2e 00 00       	call   c000fb10 <KePanic(char const*)>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	90                   	nop
c000cc74:	83 c4 0c             	add    esp,0xc
c000cc77:	c3                   	ret    

c000cc78 <ACPI::open(int, int, void*)>:
c000cc78:	55                   	push   ebp
c000cc79:	89 e5                	mov    ebp,esp
c000cc7b:	53                   	push   ebx
c000cc7c:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc82:	83 ec 0c             	sub    esp,0xc
c000cc85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc88:	e8 c7 fd ff ff       	call   c000ca54 <ACPI::detectPCI()>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	83 ec 0c             	sub    esp,0xc
c000cc93:	68 e4 3b 02 c0       	push   0xc0023be4
c000cc98:	e8 74 05 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cc9d:	83 c4 10             	add    esp,0x10
c000cca0:	b8 4c 05 00 00       	mov    eax,0x54c
c000cca5:	8a 00                	mov    al,BYTE PTR [eax]
c000cca7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000ccaa:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000ccae:	83 f8 01             	cmp    eax,0x1
c000ccb1:	75 15                	jne    c000ccc8 <ACPI::open(int, int, void*)+0x50>
c000ccb3:	83 ec 0c             	sub    esp,0xc
c000ccb6:	68 62 3a 02 c0       	push   0xc0023a62
c000ccbb:	e8 43 89 00 00       	call   c0015603 <Thr::loadKernelSymbolTable(char const*)>
c000ccc0:	83 c4 10             	add    esp,0x10
c000ccc3:	eb 33                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000ccc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccc8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cccc:	3d bb 00 00 00       	cmp    eax,0xbb
c000ccd1:	75 15                	jne    c000cce8 <ACPI::open(int, int, void*)+0x70>
c000ccd3:	83 ec 0c             	sub    esp,0xc
c000ccd6:	68 80 3a 02 c0       	push   0xc0023a80
c000ccdb:	e8 23 89 00 00       	call   c0015603 <Thr::loadKernelSymbolTable(char const*)>
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	eb 13                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000cce5:	8d 76 00             	lea    esi,[esi+0x0]
c000cce8:	83 ec 0c             	sub    esp,0xc
c000cceb:	68 9e 3a 02 c0       	push   0xc0023a9e
c000ccf0:	e8 1b 2e 00 00       	call   c000fb10 <KePanic(char const*)>
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ccfc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cd09:	e8 a6 29 00 00       	call   c000f6b4 <malloc>
c000cd0e:	83 c4 10             	add    esp,0x10
c000cd11:	89 c3                	mov    ebx,eax
c000cd13:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cd18:	83 ec 04             	sub    esp,0x4
c000cd1b:	50                   	push   eax
c000cd1c:	68 b8 3a 02 c0       	push   0xc0023ab8
c000cd21:	53                   	push   ebx
c000cd22:	e8 61 b4 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cd27:	83 c4 10             	add    esp,0x10
c000cd2a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cd2d:	83 ec 08             	sub    esp,0x8
c000cd30:	6a 01                	push   0x1
c000cd32:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd35:	e8 6c b4 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000cd3a:	83 c4 10             	add    esp,0x10
c000cd3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cd40:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cd44:	75 12                	jne    c000cd58 <ACPI::open(int, int, void*)+0xe0>
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd4c:	e8 b3 b4 ff ff       	call   c0008204 <File::close()>
c000cd51:	83 c4 10             	add    esp,0x10
c000cd54:	eb 06                	jmp    c000cd5c <ACPI::open(int, int, void*)+0xe4>
c000cd56:	66 90                	xchg   ax,ax
c000cd58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cd5c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cd60:	74 16                	je     c000cd78 <ACPI::open(int, int, void*)+0x100>
c000cd62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd65:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd67:	83 c0 08             	add    eax,0x8
c000cd6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd6c:	83 ec 0c             	sub    esp,0xc
c000cd6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd72:	ff d0                	call   eax
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	90                   	nop
c000cd78:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cd7b:	83 f0 01             	xor    eax,0x1
c000cd7e:	0f b6 c0             	movzx  eax,al
c000cd81:	85 c0                	test   eax,eax
c000cd83:	74 27                	je     c000cdac <ACPI::open(int, int, void*)+0x134>
c000cd85:	83 ec 0c             	sub    esp,0xc
c000cd88:	68 d6 3a 02 c0       	push   0xc0023ad6
c000cd8d:	e8 7f 04 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cd92:	83 c4 10             	add    esp,0x10
c000cd95:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd9c:	83 ec 0c             	sub    esp,0xc
c000cd9f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cda2:	e8 79 65 00 00       	call   c0013320 <Virt::setupPageSwapping(int)>
c000cda7:	83 c4 10             	add    esp,0x10
c000cdaa:	66 90                	xchg   ax,ax
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	68 f1 3a 02 c0       	push   0xc0023af1
c000cdb4:	e8 58 04 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdbf:	83 ec 08             	sub    esp,0x8
c000cdc2:	6a 13                	push   0x13
c000cdc4:	50                   	push   eax
c000cdc5:	e8 5a cf ff ff       	call   c0009d24 <getDevicesOfType(DeviceType)>
c000cdca:	83 c4 0c             	add    esp,0xc
c000cdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdd6:	50                   	push   eax
c000cdd7:	e8 60 50 01 00       	call   c0021e3c <LinkedList<Device>::isEmpty()>
c000cddc:	83 c4 10             	add    esp,0x10
c000cddf:	83 f0 01             	xor    eax,0x1
c000cde2:	0f b6 c0             	movzx  eax,al
c000cde5:	85 c0                	test   eax,eax
c000cde7:	0f 84 1f 01 00 00    	je     c000cf0c <ACPI::open(int, int, void*)+0x294>
c000cded:	83 ec 0c             	sub    esp,0xc
c000cdf0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdf3:	50                   	push   eax
c000cdf4:	e8 5f 50 01 00       	call   c0021e58 <LinkedList<Device>::getFirstElement()>
c000cdf9:	83 c4 10             	add    esp,0x10
c000cdfc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cdff:	83 ec 0c             	sub    esp,0xc
c000ce02:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ce05:	50                   	push   eax
c000ce06:	e8 55 50 01 00       	call   c0021e60 <LinkedList<Device>::removeFirst()>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ce11:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ce14:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ce17:	b8 24 00 00 00       	mov    eax,0x24
c000ce1c:	83 e0 fc             	and    eax,0xfffffffc
c000ce1f:	89 c3                	mov    ebx,eax
c000ce21:	b8 00 00 00 00       	mov    eax,0x0
c000ce26:	66 90                	xchg   ax,ax
c000ce28:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ce2f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ce36:	83 c0 04             	add    eax,0x4
c000ce39:	39 d8                	cmp    eax,ebx
c000ce3b:	72 eb                	jb     c000ce28 <ACPI::open(int, int, void*)+0x1b0>
c000ce3d:	83 ec 08             	sub    esp,0x8
c000ce40:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ce46:	50                   	push   eax
c000ce47:	83 ec 24             	sub    esp,0x24
c000ce4a:	89 e1                	mov    ecx,esp
c000ce4c:	b8 24 00 00 00       	mov    eax,0x24
c000ce51:	83 e0 fc             	and    eax,0xfffffffc
c000ce54:	89 c3                	mov    ebx,eax
c000ce56:	b8 00 00 00 00       	mov    eax,0x0
c000ce5b:	90                   	nop
c000ce5c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ce63:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ce66:	83 c0 04             	add    eax,0x4
c000ce69:	39 d8                	cmp    eax,ebx
c000ce6b:	72 ef                	jb     c000ce5c <ACPI::open(int, int, void*)+0x1e4>
c000ce6d:	e8 10 10 01 00       	call   c001de82 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce72:	83 c4 30             	add    esp,0x30
c000ce75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ce78:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce7c:	0f 84 4e ff ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000ce82:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce89:	83 ec 0c             	sub    esp,0xc
c000ce8c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce8f:	e8 20 28 00 00       	call   c000f6b4 <malloc>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	89 c3                	mov    ebx,eax
c000ce99:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000ce9e:	83 ec 04             	sub    esp,0x4
c000cea1:	50                   	push   eax
c000cea2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cea5:	53                   	push   ebx
c000cea6:	e8 dd b2 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ceb7:	e8 ae b5 ff ff       	call   c000846a <File::exists()>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	0f b6 c0             	movzx  eax,al
c000cec2:	85 c0                	test   eax,eax
c000cec4:	74 22                	je     c000cee8 <ACPI::open(int, int, void*)+0x270>
c000cec6:	83 ec 08             	sub    esp,0x8
c000cec9:	6a 01                	push   0x1
c000cecb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cece:	e8 d4 91 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c000ced3:	83 c4 10             	add    esp,0x10
c000ced6:	83 ec 08             	sub    esp,0x8
c000ced9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cedc:	50                   	push   eax
c000cedd:	e8 26 94 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c000cee2:	83 c4 10             	add    esp,0x10
c000cee5:	8d 76 00             	lea    esi,[esi+0x0]
c000cee8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ceec:	0f 84 de fe ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cef2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000cef5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cef7:	83 c0 08             	add    eax,0x8
c000cefa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefc:	83 ec 0c             	sub    esp,0xc
c000ceff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cf02:	ff d0                	call   eax
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	e9 c4 fe ff ff       	jmp    c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cf0c:	83 ec 0c             	sub    esp,0xc
c000cf0f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cf12:	50                   	push   eax
c000cf13:	e8 20 4f 01 00       	call   c0021e38 <LinkedList<Device>::~LinkedList()>
c000cf18:	83 c4 10             	add    esp,0x10
c000cf1b:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000cf21:	83 ec 08             	sub    esp,0x8
c000cf24:	6a 01                	push   0x1
c000cf26:	68 0b 3b 02 c0       	push   0xc0023b0b
c000cf2b:	e8 77 91 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c000cf30:	83 c4 10             	add    esp,0x10
c000cf33:	83 ec 08             	sub    esp,0x8
c000cf36:	53                   	push   ebx
c000cf37:	50                   	push   eax
c000cf38:	e8 cb 93 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c000cf3d:	83 c4 10             	add    esp,0x10
c000cf40:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf45:	85 c0                	test   eax,eax
c000cf47:	0f 84 ef 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf4d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cf52:	85 c0                	test   eax,eax
c000cf54:	0f 84 e2 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	68 28 3b 02 c0       	push   0xc0023b28
c000cf62:	e8 aa 02 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cf67:	83 c4 10             	add    esp,0x10
c000cf6a:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cf71:	83 ec 0c             	sub    esp,0xc
c000cf74:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cf77:	e8 38 27 00 00       	call   c000f6b4 <malloc>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	89 c3                	mov    ebx,eax
c000cf81:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cf86:	83 ec 04             	sub    esp,0x4
c000cf89:	50                   	push   eax
c000cf8a:	68 45 3b 02 c0       	push   0xc0023b45
c000cf8f:	53                   	push   ebx
c000cf90:	e8 f3 b1 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf9b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf9f:	74 1b                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cfa7:	e8 be b4 ff ff       	call   c000846a <File::exists()>
c000cfac:	83 c4 10             	add    esp,0x10
c000cfaf:	0f b6 c0             	movzx  eax,al
c000cfb2:	85 c0                	test   eax,eax
c000cfb4:	74 06                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfb6:	b0 01                	mov    al,0x1
c000cfb8:	eb 06                	jmp    c000cfc0 <ACPI::open(int, int, void*)+0x348>
c000cfba:	66 90                	xchg   ax,ax
c000cfbc:	b0 00                	mov    al,0x0
c000cfbe:	66 90                	xchg   ax,ax
c000cfc0:	0f b6 c0             	movzx  eax,al
c000cfc3:	85 c0                	test   eax,eax
c000cfc5:	74 21                	je     c000cfe8 <ACPI::open(int, int, void*)+0x370>
c000cfc7:	83 ec 08             	sub    esp,0x8
c000cfca:	6a 01                	push   0x1
c000cfcc:	68 45 3b 02 c0       	push   0xc0023b45
c000cfd1:	e8 d1 90 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfdf:	50                   	push   eax
c000cfe0:	e8 23 93 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c000cfe5:	83 c4 10             	add    esp,0x10
c000cfe8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfec:	74 1e                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cfee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cff2:	74 18                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cff4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cff7:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff9:	83 c0 08             	add    eax,0x8
c000cffc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d004:	ff d0                	call   eax
c000d006:	83 c4 10             	add    esp,0x10
c000d009:	8d 76 00             	lea    esi,[esi+0x0]
c000d00c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d011:	83 ec 08             	sub    esp,0x8
c000d014:	68 62 3b 02 c0       	push   0xc0023b62
c000d019:	50                   	push   eax
c000d01a:	e8 f1 f2 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000d025:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000d029:	74 11                	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000d02b:	83 ec 08             	sub    esp,0x8
c000d02e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000d031:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d034:	e8 27 fc ff ff       	call   c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d039:	83 c4 10             	add    esp,0x10
c000d03c:	b8 00 00 00 00       	mov    eax,0x0
c000d041:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d044:	c9                   	leave  
c000d045:	c3                   	ret    
c000d046:	66 90                	xchg   ax,ax

c000d048 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d048:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d04e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d055:	89 c2                	mov    edx,eax
c000d057:	c1 fa 1f             	sar    edx,0x1f
c000d05a:	83 ec 04             	sub    esp,0x4
c000d05d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d061:	51                   	push   ecx
c000d062:	52                   	push   edx
c000d063:	50                   	push   eax
c000d064:	e8 43 24 00 00       	call   c000f4ac <KeItoa(long long, char*)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	83 ec 08             	sub    esp,0x8
c000d06f:	68 30 3c 02 c0       	push   0xc0023c30
c000d074:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d078:	50                   	push   eax
c000d079:	e8 d2 35 ff ff       	call   c0000650 <strcpy>
c000d07e:	83 c4 10             	add    esp,0x10
c000d081:	83 ec 08             	sub    esp,0x8
c000d084:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d08b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d08f:	50                   	push   eax
c000d090:	e8 db 37 ff ff       	call   c0000870 <strcat>
c000d095:	83 c4 10             	add    esp,0x10
c000d098:	83 ec 08             	sub    esp,0x8
c000d09b:	68 3e 3c 02 c0       	push   0xc0023c3e
c000d0a0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0a4:	50                   	push   eax
c000d0a5:	e8 c6 37 ff ff       	call   c0000870 <strcat>
c000d0aa:	83 c4 10             	add    esp,0x10
c000d0ad:	83 ec 08             	sub    esp,0x8
c000d0b0:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0bb:	50                   	push   eax
c000d0bc:	e8 af 37 ff ff       	call   c0000870 <strcat>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	83 ec 08             	sub    esp,0x8
c000d0c7:	68 41 3c 02 c0       	push   0xc0023c41
c000d0cc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d0:	50                   	push   eax
c000d0d1:	e8 9a 37 ff ff       	call   c0000870 <strcat>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	83 ec 08             	sub    esp,0x8
c000d0dc:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d0e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0e7:	50                   	push   eax
c000d0e8:	e8 83 37 ff ff       	call   c0000870 <strcat>
c000d0ed:	83 c4 10             	add    esp,0x10
c000d0f0:	83 ec 08             	sub    esp,0x8
c000d0f3:	68 41 3c 02 c0       	push   0xc0023c41
c000d0f8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0fc:	50                   	push   eax
c000d0fd:	e8 6e 37 ff ff       	call   c0000870 <strcat>
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	83 ec 08             	sub    esp,0x8
c000d108:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d10c:	50                   	push   eax
c000d10d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d111:	50                   	push   eax
c000d112:	e8 59 37 ff ff       	call   c0000870 <strcat>
c000d117:	83 c4 10             	add    esp,0x10
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d121:	50                   	push   eax
c000d122:	e8 e9 29 00 00       	call   c000fb10 <KePanic(char const*)>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	90                   	nop
c000d12b:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d131:	c3                   	ret    

c000d132 <KeInitialiseAtexit()>:
c000d132:	83 ec 10             	sub    esp,0x10
c000d135:	68 80 00 00 00       	push   0x80
c000d13a:	6a 00                	push   0x0
c000d13c:	68 80 c0 02 c0       	push   0xc002c080
c000d141:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d14b:	e8 a0 33 ff ff       	call   c00004f0 <memset>
c000d150:	83 c4 1c             	add    esp,0x1c
c000d153:	c3                   	ret    

c000d154 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d154:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d159:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d15d:	89 14 85 80 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f80],edx
c000d164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d168:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d16f:	40                   	inc    eax
c000d170:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d175:	83 f8 1f             	cmp    eax,0x1f
c000d178:	7e 0d                	jle    c000d187 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d17a:	c7 44 24 04 43 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023c43
c000d182:	e9 89 29 00 00       	jmp    c000fb10 <KePanic(char const*)>
c000d187:	c3                   	ret    

c000d188 <KeExecuteAtexit()>:
c000d188:	53                   	push   ebx
c000d189:	31 db                	xor    ebx,ebx
c000d18b:	83 ec 08             	sub    esp,0x8
c000d18e:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d194:	7e 28                	jle    c000d1be <KeExecuteAtexit()+0x36>
c000d196:	8b 04 9d 80 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3f80]
c000d19d:	85 c0                	test   eax,eax
c000d19f:	74 1a                	je     c000d1bb <KeExecuteAtexit()+0x33>
c000d1a1:	83 ec 0c             	sub    esp,0xc
c000d1a4:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d1ab:	ff d0                	call   eax
c000d1ad:	c7 04 9d 80 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3f80],0x0
c000d1b8:	83 c4 10             	add    esp,0x10
c000d1bb:	43                   	inc    ebx
c000d1bc:	eb d0                	jmp    c000d18e <KeExecuteAtexit()+0x6>
c000d1be:	83 c4 08             	add    esp,0x8
c000d1c1:	5b                   	pop    ebx
c000d1c2:	c3                   	ret    
c000d1c3:	90                   	nop

c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d1c4:	8b 15 00 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c100
c000d1ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1ce:	21 d0                	and    eax,edx
c000d1d0:	0f 95 c0             	setne  al
c000d1d3:	c3                   	ret    

c000d1d4 <KeInitialiseBootConfigurationFlags()>:
c000d1d4:	b8 00 05 00 00       	mov    eax,0x500
c000d1d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1db:	a3 00 c1 02 c0       	mov    ds:0xc002c100,eax
c000d1e0:	90                   	nop
c000d1e1:	c3                   	ret    

c000d1e2 <KeDisplaySplashScreen()>:
c000d1e2:	53                   	push   ebx
c000d1e3:	bb 01 00 00 00       	mov    ebx,0x1
c000d1e8:	83 ec 08             	sub    esp,0x8
c000d1eb:	43                   	inc    ebx
c000d1ec:	0f be 83 5a 3c 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc3a6]
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	74 15                	je     c000d20c <KeDisplaySplashScreen()+0x2a>
c000d1f7:	83 ec 0c             	sub    esp,0xc
c000d1fa:	6a 01                	push   0x1
c000d1fc:	53                   	push   ebx
c000d1fd:	6a 00                	push   0x0
c000d1ff:	6a 0f                	push   0xf
c000d201:	50                   	push   eax
c000d202:	e8 45 e3 00 00       	call   c001b54c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d207:	83 c4 20             	add    esp,0x20
c000d20a:	eb df                	jmp    c000d1eb <KeDisplaySplashScreen()+0x9>
c000d20c:	83 c4 08             	add    esp,0x8
c000d20f:	5b                   	pop    ebx
c000d210:	c3                   	ret    

c000d211 <KeSetBootMessage(char const*)>:
c000d211:	57                   	push   edi
c000d212:	56                   	push   esi
c000d213:	53                   	push   ebx
c000d214:	31 db                	xor    ebx,ebx
c000d216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d21a:	83 ec 0c             	sub    esp,0xc
c000d21d:	6a 14                	push   0x14
c000d21f:	53                   	push   ebx
c000d220:	43                   	inc    ebx
c000d221:	6a 00                	push   0x0
c000d223:	6a 00                	push   0x0
c000d225:	6a 20                	push   0x20
c000d227:	e8 20 e3 00 00       	call   c001b54c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d22c:	83 c4 20             	add    esp,0x20
c000d22f:	83 fb 50             	cmp    ebx,0x50
c000d232:	75 e6                	jne    c000d21a <KeSetBootMessage(char const*)+0x9>
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	56                   	push   esi
c000d238:	e8 43 33 ff ff       	call   c0000580 <strlen>
c000d23d:	83 c4 10             	add    esp,0x10
c000d240:	29 c3                	sub    ebx,eax
c000d242:	d1 eb                	shr    ebx,1
c000d244:	89 df                	mov    edi,ebx
c000d246:	89 f0                	mov    eax,esi
c000d248:	29 d8                	sub    eax,ebx
c000d24a:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d24e:	85 c0                	test   eax,eax
c000d250:	74 16                	je     c000d268 <KeSetBootMessage(char const*)+0x57>
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	6a 14                	push   0x14
c000d257:	57                   	push   edi
c000d258:	47                   	inc    edi
c000d259:	6a 00                	push   0x0
c000d25b:	6a 07                	push   0x7
c000d25d:	50                   	push   eax
c000d25e:	e8 e9 e2 00 00       	call   c001b54c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d263:	83 c4 20             	add    esp,0x20
c000d266:	eb de                	jmp    c000d246 <KeSetBootMessage(char const*)+0x35>
c000d268:	5b                   	pop    ebx
c000d269:	5e                   	pop    esi
c000d26a:	5f                   	pop    edi
c000d26b:	c3                   	ret    

c000d26c <__cxa_atexit>:
c000d26c:	31 c0                	xor    eax,eax
c000d26e:	c3                   	ret    

c000d26f <__cxa_finalize>:
c000d26f:	c3                   	ret    

c000d270 <__stack_chk_fail>:
c000d270:	55                   	push   ebp
c000d271:	89 e5                	mov    ebp,esp
c000d273:	83 ec 10             	sub    esp,0x10
c000d276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d279:	68 6f 3c 02 c0       	push   0xc0023c6f
c000d27e:	e8 e3 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d283:	58                   	pop    eax
c000d284:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d287:	5a                   	pop    edx
c000d288:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d28b:	68 6f 3c 02 c0       	push   0xc0023c6f
c000d290:	e8 d1 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d295:	c7 04 24 77 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c77
c000d29c:	e8 6f 28 00 00       	call   c000fb10 <KePanic(char const*)>
c000d2a1:	83 c4 10             	add    esp,0x10
c000d2a4:	c9                   	leave  
c000d2a5:	c3                   	ret    

c000d2a6 <__cxa_pure_virtual>:
c000d2a6:	83 ec 18             	sub    esp,0x18
c000d2a9:	68 8f 3c 02 c0       	push   0xc0023c8f
c000d2ae:	e8 5d 28 00 00       	call   c000fb10 <KePanic(char const*)>
c000d2b3:	83 c4 1c             	add    esp,0x1c
c000d2b6:	c3                   	ret    

c000d2b7 <operator new[](unsigned long)>:
c000d2b7:	e9 f8 23 00 00       	jmp    c000f6b4 <malloc>

c000d2bc <operator delete(void*, unsigned long)>:
c000d2bc:	e9 13 24 00 00       	jmp    c000f6d4 <rfree>

c000d2c1 <operator delete[](void*)>:
c000d2c1:	e9 0e 24 00 00       	jmp    c000f6d4 <rfree>

c000d2c6 <operator delete[](void*, unsigned long)>:
c000d2c6:	e9 09 24 00 00       	jmp    c000f6d4 <rfree>
c000d2cb:	90                   	nop

c000d2cc <CUnlockScheduler>:
c000d2cc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000d2d4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d2d9:	85 c0                	test   eax,eax
c000d2db:	75 03                	jne    c000d2e0 <CUnlockScheduler+0x14>
c000d2dd:	fb                   	sti    
c000d2de:	66 90                	xchg   ax,ax
c000d2e0:	90                   	nop
c000d2e1:	c3                   	ret    
c000d2e2:	66 90                	xchg   ax,ax

c000d2e4 <CLockScheduler>:
c000d2e4:	fa                   	cli    
c000d2e5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d2ea:	83 c0 01             	add    eax,0x1
c000d2ed:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000d2f2:	90                   	nop
c000d2f3:	c3                   	ret    

c000d2f4 <CPrintf>:
c000d2f4:	83 ec 0c             	sub    esp,0xc
c000d2f7:	83 ec 08             	sub    esp,0x8
c000d2fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2fe:	68 a2 3c 02 c0       	push   0xc0023ca2
c000d303:	e8 5e 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	90                   	nop
c000d30c:	83 c4 0c             	add    esp,0xc
c000d30f:	c3                   	ret    

c000d310 <CmOpen(char const*)>:
c000d310:	57                   	push   edi
c000d311:	56                   	push   esi
c000d312:	53                   	push   ebx
c000d313:	83 ec 1c             	sub    esp,0x1c
c000d316:	6a 30                	push   0x30
c000d318:	e8 97 23 00 00       	call   c000f6b4 <malloc>
c000d31d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d324:	89 c3                	mov    ebx,eax
c000d326:	e8 89 23 00 00       	call   c000f6b4 <malloc>
c000d32b:	83 c4 0c             	add    esp,0xc
c000d32e:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000d334:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d338:	89 c6                	mov    esi,eax
c000d33a:	50                   	push   eax
c000d33b:	e8 48 ae ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000d340:	83 c4 0c             	add    esp,0xc
c000d343:	89 33                	mov    DWORD PTR [ebx],esi
c000d345:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d349:	50                   	push   eax
c000d34a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d34e:	50                   	push   eax
c000d34f:	56                   	push   esi
c000d350:	e8 53 b1 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c000d355:	5a                   	pop    edx
c000d356:	59                   	pop    ecx
c000d357:	6a 01                	push   0x1
c000d359:	ff 33                	push   DWORD PTR [ebx]
c000d35b:	e8 46 ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d360:	5e                   	pop    esi
c000d361:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d365:	e8 4a 23 00 00       	call   c000f6b4 <malloc>
c000d36a:	5a                   	pop    edx
c000d36b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d36f:	89 c7                	mov    edi,eax
c000d371:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d373:	8b 10                	mov    edx,DWORD PTR [eax]
c000d375:	56                   	push   esi
c000d376:	57                   	push   edi
c000d377:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d37b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d37f:	50                   	push   eax
c000d380:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d383:	83 c4 14             	add    esp,0x14
c000d386:	ff 33                	push   DWORD PTR [ebx]
c000d388:	e8 77 ae ff ff       	call   c0008204 <File::close()>
c000d38d:	59                   	pop    ecx
c000d38e:	58                   	pop    eax
c000d38f:	6a 13                	push   0x13
c000d391:	ff 33                	push   DWORD PTR [ebx]
c000d393:	e8 0e ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d398:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d39a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d39c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d39f:	57                   	push   edi
c000d3a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3a8:	50                   	push   eax
c000d3a9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d3ac:	83 c4 14             	add    esp,0x14
c000d3af:	57                   	push   edi
c000d3b0:	e8 0f 23 00 00       	call   c000f6c4 <free>
c000d3b5:	83 c4 10             	add    esp,0x10
c000d3b8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d3bb:	75 10                	jne    c000d3cd <CmOpen(char const*)+0xbd>
c000d3bd:	83 ec 0c             	sub    esp,0xc
c000d3c0:	68 a5 3c 02 c0       	push   0xc0023ca5
c000d3c5:	e8 46 27 00 00       	call   c000fb10 <KePanic(char const*)>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	50                   	push   eax
c000d3ce:	6a 00                	push   0x0
c000d3d0:	6a 00                	push   0x0
c000d3d2:	ff 33                	push   DWORD PTR [ebx]
c000d3d4:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d3d7:	e8 88 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d3dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3de:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3e0:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3e3:	57                   	push   edi
c000d3e4:	6a 00                	push   0x0
c000d3e6:	6a 2b                	push   0x2b
c000d3e8:	50                   	push   eax
c000d3e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3ec:	83 c4 1c             	add    esp,0x1c
c000d3ef:	6a 00                	push   0x0
c000d3f1:	6a 00                	push   0x0
c000d3f3:	ff 33                	push   DWORD PTR [ebx]
c000d3f5:	e8 6a ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d3fa:	83 c4 0c             	add    esp,0xc
c000d3fd:	6a 08                	push   0x8
c000d3ff:	68 c7 3c 02 c0       	push   0xc0023cc7
c000d404:	57                   	push   edi
c000d405:	e8 76 2f ff ff       	call   c0000380 <memcmp>
c000d40a:	83 c4 10             	add    esp,0x10
c000d40d:	85 c0                	test   eax,eax
c000d40f:	74 10                	je     c000d421 <CmOpen(char const*)+0x111>
c000d411:	83 ec 0c             	sub    esp,0xc
c000d414:	68 d0 3c 02 c0       	push   0xc0023cd0
c000d419:	e8 f2 26 00 00       	call   c000fb10 <KePanic(char const*)>
c000d41e:	83 c4 10             	add    esp,0x10
c000d421:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d425:	83 c4 10             	add    esp,0x10
c000d428:	89 d8                	mov    eax,ebx
c000d42a:	5b                   	pop    ebx
c000d42b:	5e                   	pop    esi
c000d42c:	5f                   	pop    edi
c000d42d:	c3                   	ret    

c000d42e <CmClose(Reghive_Tag*)>:
c000d42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d432:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d436:	74 0b                	je     c000d443 <CmClose(Reghive_Tag*)+0x15>
c000d438:	8b 00                	mov    eax,DWORD PTR [eax]
c000d43a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d43e:	e9 c1 ad ff ff       	jmp    c0008204 <File::close()>
c000d443:	c3                   	ret    

c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d444:	53                   	push   ebx
c000d445:	83 ec 18             	sub    esp,0x18
c000d448:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d44c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d450:	74 29                	je     c000d47b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d452:	50                   	push   eax
c000d453:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d458:	99                   	cdq    
c000d459:	52                   	push   edx
c000d45a:	50                   	push   eax
c000d45b:	ff 33                	push   DWORD PTR [ebx]
c000d45d:	e8 02 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d462:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d464:	5a                   	pop    edx
c000d465:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d469:	8b 10                	mov    edx,DWORD PTR [eax]
c000d46b:	51                   	push   ecx
c000d46c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d470:	6a 00                	push   0x0
c000d472:	6a 2b                	push   0x2b
c000d474:	50                   	push   eax
c000d475:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d478:	83 c4 20             	add    esp,0x20
c000d47b:	83 c4 18             	add    esp,0x18
c000d47e:	5b                   	pop    ebx
c000d47f:	c3                   	ret    

c000d480 <CmGetString(Reghive_Tag*, int, char*)>:
c000d480:	55                   	push   ebp
c000d481:	57                   	push   edi
c000d482:	56                   	push   esi
c000d483:	53                   	push   ebx
c000d484:	31 db                	xor    ebx,ebx
c000d486:	83 ec 70             	sub    esp,0x70
c000d489:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d48d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d494:	50                   	push   eax
c000d495:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d49c:	55                   	push   ebp
c000d49d:	e8 a2 ff ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4a2:	83 c4 10             	add    esp,0x10
c000d4a5:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d4aa:	c1 e0 08             	shl    eax,0x8
c000d4ad:	89 c2                	mov    edx,eax
c000d4af:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d4b4:	09 d0                	or     eax,edx
c000d4b6:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d4bb:	c1 e0 08             	shl    eax,0x8
c000d4be:	09 d0                	or     eax,edx
c000d4c0:	74 25                	je     c000d4e7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d4c2:	52                   	push   edx
c000d4c3:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d4c7:	52                   	push   edx
c000d4c8:	6b fb 0d             	imul   edi,ebx,0xd
c000d4cb:	50                   	push   eax
c000d4cc:	55                   	push   ebp
c000d4cd:	e8 72 ff ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4d2:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d4d6:	b9 27 00 00 00       	mov    ecx,0x27
c000d4db:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d4e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d4e4:	83 c4 10             	add    esp,0x10
c000d4e7:	83 c3 03             	add    ebx,0x3
c000d4ea:	83 fb 15             	cmp    ebx,0x15
c000d4ed:	75 b6                	jne    c000d4a5 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d4ef:	83 c4 6c             	add    esp,0x6c
c000d4f2:	5b                   	pop    ebx
c000d4f3:	5e                   	pop    esi
c000d4f4:	5f                   	pop    edi
c000d4f5:	5d                   	pop    ebp
c000d4f6:	c3                   	ret    

c000d4f7 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d4f7:	83 ec 40             	sub    esp,0x40
c000d4fa:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4fe:	50                   	push   eax
c000d4ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d503:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d507:	e8 38 ff ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d50c:	83 c4 10             	add    esp,0x10
c000d50f:	83 c8 ff             	or     eax,0xffffffff
c000d512:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d517:	75 19                	jne    c000d532 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d519:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d51e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d523:	c1 e0 08             	shl    eax,0x8
c000d526:	09 c2                	or     edx,eax
c000d528:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d52d:	c1 e0 10             	shl    eax,0x10
c000d530:	09 d0                	or     eax,edx
c000d532:	83 c4 3c             	add    esp,0x3c
c000d535:	c3                   	ret    

c000d536 <CmGetNext(Reghive_Tag*, int)>:
c000d536:	83 ec 40             	sub    esp,0x40
c000d539:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d53d:	50                   	push   eax
c000d53e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d542:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d546:	e8 f9 fe ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d54b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d550:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d555:	c1 e0 08             	shl    eax,0x8
c000d558:	09 c2                	or     edx,eax
c000d55a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d55f:	83 c4 4c             	add    esp,0x4c
c000d562:	c1 e0 10             	shl    eax,0x10
c000d565:	09 d0                	or     eax,edx
c000d567:	c3                   	ret    

c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d568:	53                   	push   ebx
c000d569:	83 ec 18             	sub    esp,0x18
c000d56c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d570:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d574:	74 29                	je     c000d59f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d576:	50                   	push   eax
c000d577:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d57c:	99                   	cdq    
c000d57d:	52                   	push   edx
c000d57e:	50                   	push   eax
c000d57f:	ff 33                	push   DWORD PTR [ebx]
c000d581:	e8 de ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d586:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d588:	5a                   	pop    edx
c000d589:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d58d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d58f:	51                   	push   ecx
c000d590:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d594:	6a 00                	push   0x0
c000d596:	6a 2b                	push   0x2b
c000d598:	50                   	push   eax
c000d599:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d59c:	83 c4 20             	add    esp,0x20
c000d59f:	83 c4 18             	add    esp,0x18
c000d5a2:	5b                   	pop    ebx
c000d5a3:	c3                   	ret    

c000d5a4 <CmFreeExtent(Reghive_Tag*, int)>:
c000d5a4:	53                   	push   ebx
c000d5a5:	83 ec 3c             	sub    esp,0x3c
c000d5a8:	6a 2b                	push   0x2b
c000d5aa:	6a 00                	push   0x0
c000d5ac:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d5b0:	53                   	push   ebx
c000d5b1:	e8 3a 2f ff ff       	call   c00004f0 <memset>
c000d5b6:	83 c4 0c             	add    esp,0xc
c000d5b9:	53                   	push   ebx
c000d5ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5c2:	e8 a1 ff ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5c7:	83 c4 48             	add    esp,0x48
c000d5ca:	5b                   	pop    ebx
c000d5cb:	c3                   	ret    

c000d5cc <CmUpdateHeader(Reghive_Tag*)>:
c000d5cc:	83 ec 0c             	sub    esp,0xc
c000d5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d5d7:	74 10                	je     c000d5e9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d5d9:	52                   	push   edx
c000d5da:	8d 50 05             	lea    edx,[eax+0x5]
c000d5dd:	52                   	push   edx
c000d5de:	6a 00                	push   0x0
c000d5e0:	50                   	push   eax
c000d5e1:	e8 82 ff ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5e6:	83 c4 10             	add    esp,0x10
c000d5e9:	83 c4 0c             	add    esp,0xc
c000d5ec:	c3                   	ret    

c000d5ed <CmExpand(Reghive_Tag*, int)>:
c000d5ed:	55                   	push   ebp
c000d5ee:	57                   	push   edi
c000d5ef:	83 cf ff             	or     edi,0xffffffff
c000d5f2:	56                   	push   esi
c000d5f3:	53                   	push   ebx
c000d5f4:	83 ec 3c             	sub    esp,0x3c
c000d5f7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d5fb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d5ff:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d603:	74 59                	je     c000d65e <CmExpand(Reghive_Tag*, int)+0x71>
c000d605:	50                   	push   eax
c000d606:	31 d2                	xor    edx,edx
c000d608:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d60c:	31 ff                	xor    edi,edi
c000d60e:	52                   	push   edx
c000d60f:	50                   	push   eax
c000d610:	ff 33                	push   DWORD PTR [ebx]
c000d612:	e8 4d ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d617:	83 c4 0c             	add    esp,0xc
c000d61a:	6a 2b                	push   0x2b
c000d61c:	6a 00                	push   0x0
c000d61e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d622:	55                   	push   ebp
c000d623:	e8 c8 2e ff ff       	call   c00004f0 <memset>
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	39 f7                	cmp    edi,esi
c000d62d:	7d 1b                	jge    c000d64a <CmExpand(Reghive_Tag*, int)+0x5d>
c000d62f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d631:	83 ec 0c             	sub    esp,0xc
c000d634:	47                   	inc    edi
c000d635:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d639:	8b 10                	mov    edx,DWORD PTR [eax]
c000d63b:	51                   	push   ecx
c000d63c:	55                   	push   ebp
c000d63d:	6a 00                	push   0x0
c000d63f:	6a 2b                	push   0x2b
c000d641:	50                   	push   eax
c000d642:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d645:	83 c4 20             	add    esp,0x20
c000d648:	eb e1                	jmp    c000d62b <CmExpand(Reghive_Tag*, int)+0x3e>
c000d64a:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d64d:	83 ec 0c             	sub    esp,0xc
c000d650:	01 fe                	add    esi,edi
c000d652:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d655:	53                   	push   ebx
c000d656:	e8 71 ff ff ff       	call   c000d5cc <CmUpdateHeader(Reghive_Tag*)>
c000d65b:	83 c4 10             	add    esp,0x10
c000d65e:	83 c4 3c             	add    esp,0x3c
c000d661:	89 f8                	mov    eax,edi
c000d663:	5b                   	pop    ebx
c000d664:	5e                   	pop    esi
c000d665:	5f                   	pop    edi
c000d666:	5d                   	pop    ebp
c000d667:	c3                   	ret    

c000d668 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d668:	55                   	push   ebp
c000d669:	57                   	push   edi
c000d66a:	56                   	push   esi
c000d66b:	53                   	push   ebx
c000d66c:	83 cb ff             	or     ebx,0xffffffff
c000d66f:	83 ec 1c             	sub    esp,0x1c
c000d672:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d676:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d67a:	74 68                	je     c000d6e4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d67c:	51                   	push   ecx
c000d67d:	be 2b 00 00 00       	mov    esi,0x2b
c000d682:	6a 00                	push   0x0
c000d684:	31 ff                	xor    edi,edi
c000d686:	6a 00                	push   0x0
c000d688:	31 db                	xor    ebx,ebx
c000d68a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d68d:	e8 d2 ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d692:	83 c4 10             	add    esp,0x10
c000d695:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d698:	76 3b                	jbe    c000d6d5 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d69a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d69d:	83 ec 0c             	sub    esp,0xc
c000d6a0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6a6:	51                   	push   ecx
c000d6a7:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d6ab:	51                   	push   ecx
c000d6ac:	6a 00                	push   0x0
c000d6ae:	6a 01                	push   0x1
c000d6b0:	50                   	push   eax
c000d6b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d6b4:	83 c4 20             	add    esp,0x20
c000d6b7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d6bc:	74 26                	je     c000d6e4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6be:	52                   	push   edx
c000d6bf:	43                   	inc    ebx
c000d6c0:	57                   	push   edi
c000d6c1:	56                   	push   esi
c000d6c2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6c5:	e8 9a ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d6ca:	83 c6 2b             	add    esi,0x2b
c000d6cd:	83 d7 00             	adc    edi,0x0
c000d6d0:	83 c4 10             	add    esp,0x10
c000d6d3:	eb c0                	jmp    c000d695 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d6d5:	50                   	push   eax
c000d6d6:	50                   	push   eax
c000d6d7:	6a 40                	push   0x40
c000d6d9:	55                   	push   ebp
c000d6da:	e8 0e ff ff ff       	call   c000d5ed <CmExpand(Reghive_Tag*, int)>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 c3                	mov    ebx,eax
c000d6e4:	83 c4 1c             	add    esp,0x1c
c000d6e7:	89 d8                	mov    eax,ebx
c000d6e9:	5b                   	pop    ebx
c000d6ea:	5e                   	pop    esi
c000d6eb:	5f                   	pop    edi
c000d6ec:	5d                   	pop    ebp
c000d6ed:	c3                   	ret    

c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d6ee:	55                   	push   ebp
c000d6ef:	57                   	push   edi
c000d6f0:	56                   	push   esi
c000d6f1:	53                   	push   ebx
c000d6f2:	81 ec 88 00 00 00    	sub    esp,0x88
c000d6f8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d6ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d706:	e8 5d ff ff ff       	call   c000d668 <CmFindUnusedExtent(Reghive_Tag*)>
c000d70b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d70f:	83 c4 0c             	add    esp,0xc
c000d712:	6a 2b                	push   0x2b
c000d714:	6a 00                	push   0x0
c000d716:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d71a:	55                   	push   ebp
c000d71b:	e8 d0 2d ff ff       	call   c00004f0 <memset>
c000d720:	83 c4 10             	add    esp,0x10
c000d723:	85 db                	test   ebx,ebx
c000d725:	74 12                	je     c000d739 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d727:	51                   	push   ecx
c000d728:	55                   	push   ebp
c000d729:	53                   	push   ebx
c000d72a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d731:	e8 0e fd ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d73d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d744:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d749:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d74b:	85 db                	test   ebx,ebx
c000d74d:	74 49                	je     c000d798 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d74f:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d754:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d759:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d75d:	c1 e0 08             	shl    eax,0x8
c000d760:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d766:	09 c8                	or     eax,ecx
c000d768:	74 11                	je     c000d77b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d76a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d76e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d772:	c1 e8 10             	shr    eax,0x10
c000d775:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d779:	eb 0f                	jmp    c000d78a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d77b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d780:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d785:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d78a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d78e:	c1 ea 08             	shr    edx,0x8
c000d791:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d796:	eb 0f                	jmp    c000d7a7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d798:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d79d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7a2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7a7:	52                   	push   edx
c000d7a8:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d7ac:	50                   	push   eax
c000d7ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7b8:	e8 ab fd ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7bd:	83 c4 10             	add    esp,0x10
c000d7c0:	85 db                	test   ebx,ebx
c000d7c2:	74 12                	je     c000d7d6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d7c4:	50                   	push   eax
c000d7c5:	55                   	push   ebp
c000d7c6:	53                   	push   ebx
c000d7c7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7ce:	e8 95 fd ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7da:	83 c4 7c             	add    esp,0x7c
c000d7dd:	5b                   	pop    ebx
c000d7de:	5e                   	pop    esi
c000d7df:	5f                   	pop    edi
c000d7e0:	5d                   	pop    ebp
c000d7e1:	c3                   	ret    

c000d7e2 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d7e2:	55                   	push   ebp
c000d7e3:	57                   	push   edi
c000d7e4:	56                   	push   esi
c000d7e5:	53                   	push   ebx
c000d7e6:	bb 27 00 00 00       	mov    ebx,0x27
c000d7eb:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7f1:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d7f8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d7ff:	e8 7c 2d ff ff       	call   c0000580 <strlen>
c000d804:	8d 48 26             	lea    ecx,[eax+0x26]
c000d807:	89 c8                	mov    eax,ecx
c000d809:	99                   	cdq    
c000d80a:	f7 fb                	idiv   ebx
c000d80c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d810:	83 c4 10             	add    esp,0x10
c000d813:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d819:	7e 10                	jle    c000d82b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d81b:	83 ec 0c             	sub    esp,0xc
c000d81e:	68 eb 3c 02 c0       	push   0xc0023ceb
c000d823:	e8 e8 22 00 00       	call   c000fb10 <KePanic(char const*)>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	53                   	push   ebx
c000d82c:	31 ed                	xor    ebp,ebp
c000d82e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d832:	53                   	push   ebx
c000d833:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d83a:	57                   	push   edi
c000d83b:	e8 04 fc ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d847:	89 f0                	mov    eax,esi
c000d849:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d84d:	c1 e0 08             	shl    eax,0x8
c000d850:	09 c6                	or     esi,eax
c000d852:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d856:	c1 e6 08             	shl    esi,0x8
c000d859:	09 c6                	or     esi,eax
c000d85b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d85f:	7e 72                	jle    c000d8d3 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d861:	85 f6                	test   esi,esi
c000d863:	75 25                	jne    c000d88a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d865:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d86a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d86e:	50                   	push   eax
c000d86f:	6a 00                	push   0x0
c000d871:	6a 00                	push   0x0
c000d873:	57                   	push   edi
c000d874:	e8 75 fe ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d879:	83 c4 10             	add    esp,0x10
c000d87c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d87f:	89 c6                	mov    esi,eax
c000d881:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d884:	c1 f8 10             	sar    eax,0x10
c000d887:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d88a:	51                   	push   ecx
c000d88b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d88f:	52                   	push   edx
c000d890:	56                   	push   esi
c000d891:	57                   	push   edi
c000d892:	e8 ad fb ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d897:	83 c4 0c             	add    esp,0xc
c000d89a:	6a 27                	push   0x27
c000d89c:	6a 00                	push   0x0
c000d89e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8a2:	51                   	push   ecx
c000d8a3:	e8 48 2c ff ff       	call   c00004f0 <memset>
c000d8a8:	6b c5 27             	imul   eax,ebp,0x27
c000d8ab:	83 c4 0c             	add    esp,0xc
c000d8ae:	6a 27                	push   0x27
c000d8b0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d8b7:	50                   	push   eax
c000d8b8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8bc:	51                   	push   ecx
c000d8bd:	e8 ce 2d ff ff       	call   c0000690 <strncpy>
c000d8c2:	83 c4 0c             	add    esp,0xc
c000d8c5:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d8c9:	52                   	push   edx
c000d8ca:	56                   	push   esi
c000d8cb:	57                   	push   edi
c000d8cc:	e8 97 fc ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8d1:	eb 19                	jmp    c000d8ec <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d8d3:	85 f6                	test   esi,esi
c000d8d5:	74 18                	je     c000d8ef <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d8d7:	52                   	push   edx
c000d8d8:	52                   	push   edx
c000d8d9:	56                   	push   esi
c000d8da:	57                   	push   edi
c000d8db:	e8 c4 fc ff ff       	call   c000d5a4 <CmFreeExtent(Reghive_Tag*, int)>
c000d8e0:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d8e4:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d8e8:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	45                   	inc    ebp
c000d8f0:	83 c3 03             	add    ebx,0x3
c000d8f3:	83 fd 07             	cmp    ebp,0x7
c000d8f6:	0f 85 47 ff ff ff    	jne    c000d843 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d8fc:	50                   	push   eax
c000d8fd:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d901:	50                   	push   eax
c000d902:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d909:	57                   	push   edi
c000d90a:	e8 59 fc ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d90f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d915:	5b                   	pop    ebx
c000d916:	5e                   	pop    esi
c000d917:	5f                   	pop    edi
c000d918:	5d                   	pop    ebp
c000d919:	c3                   	ret    

c000d91a <CmGetMatch(char*, char*, bool, bool*)>:
c000d91a:	56                   	push   esi
c000d91b:	53                   	push   ebx
c000d91c:	50                   	push   eax
c000d91d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d922:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d926:	74 25                	je     c000d94d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d928:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d92b:	31 db                	xor    ebx,ebx
c000d92d:	50                   	push   eax
c000d92e:	50                   	push   eax
c000d92f:	8d 04 9d 00 61 02 c0 	lea    eax,[ebx*4-0x3ffd9f00]
c000d936:	50                   	push   eax
c000d937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93b:	e8 40 2e ff ff       	call   c0000780 <strcmp>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	74 2e                	je     c000d975 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d947:	43                   	inc    ebx
c000d948:	83 fb 3f             	cmp    ebx,0x3f
c000d94b:	75 e0                	jne    c000d92d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d94d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d950:	31 db                	xor    ebx,ebx
c000d952:	51                   	push   ecx
c000d953:	51                   	push   ecx
c000d954:	8d 04 9d 00 61 02 c0 	lea    eax,[ebx*4-0x3ffd9f00]
c000d95b:	50                   	push   eax
c000d95c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d960:	e8 1b 2e ff ff       	call   c0000780 <strcmp>
c000d965:	83 c4 10             	add    esp,0x10
c000d968:	85 c0                	test   eax,eax
c000d96a:	74 09                	je     c000d975 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d96c:	43                   	inc    ebx
c000d96d:	83 fb 3f             	cmp    ebx,0x3f
c000d970:	75 e0                	jne    c000d952 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d972:	83 cb ff             	or     ebx,0xffffffff
c000d975:	5a                   	pop    edx
c000d976:	89 d8                	mov    eax,ebx
c000d978:	5b                   	pop    ebx
c000d979:	5e                   	pop    esi
c000d97a:	c3                   	ret    

c000d97b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d97b:	55                   	push   ebp
c000d97c:	31 c0                	xor    eax,eax
c000d97e:	57                   	push   edi
c000d97f:	56                   	push   esi
c000d980:	53                   	push   ebx
c000d981:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d985:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d989:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d98d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d991:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d993:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d996:	83 fd 1f             	cmp    ebp,0x1f
c000d999:	7f 0b                	jg     c000d9a6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d99b:	0f b6 c2             	movzx  eax,dl
c000d99e:	d3 e0                	shl    eax,cl
c000d9a0:	09 07                	or     DWORD PTR [edi],eax
c000d9a2:	b0 01                	mov    al,0x1
c000d9a4:	01 33                	add    DWORD PTR [ebx],esi
c000d9a6:	5b                   	pop    ebx
c000d9a7:	5e                   	pop    esi
c000d9a8:	5f                   	pop    edi
c000d9a9:	5d                   	pop    ebp
c000d9aa:	c3                   	ret    

c000d9ab <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d9ab:	57                   	push   edi
c000d9ac:	56                   	push   esi
c000d9ad:	53                   	push   ebx
c000d9ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d9b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9b6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d9ba:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9be:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d9c0:	7c 17                	jl     c000d9d9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d9c2:	8b 17                	mov    edx,DWORD PTR [edi]
c000d9c4:	b8 01 00 00 00       	mov    eax,0x1
c000d9c9:	d3 e0                	shl    eax,cl
c000d9cb:	48                   	dec    eax
c000d9cc:	21 d0                	and    eax,edx
c000d9ce:	d3 ea                	shr    edx,cl
c000d9d0:	89 17                	mov    DWORD PTR [edi],edx
c000d9d2:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d9d4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d9d7:	eb 05                	jmp    c000d9de <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d9d9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9dc:	31 c0                	xor    eax,eax
c000d9de:	5b                   	pop    ebx
c000d9df:	5e                   	pop    esi
c000d9e0:	5f                   	pop    edi
c000d9e1:	c3                   	ret    

c000d9e2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d9e2:	83 ec 40             	sub    esp,0x40
c000d9e5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d9e9:	50                   	push   eax
c000d9ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9f2:	e8 4d fa ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9f7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d9fb:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d9ff:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da03:	89 10                	mov    DWORD PTR [eax],edx
c000da05:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000da08:	83 c4 4c             	add    esp,0x4c
c000da0b:	c3                   	ret    

c000da0c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000da0c:	55                   	push   ebp
c000da0d:	57                   	push   edi
c000da0e:	56                   	push   esi
c000da0f:	53                   	push   ebx
c000da10:	83 ec 40             	sub    esp,0x40
c000da13:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000da17:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000da1b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000da1f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000da23:	53                   	push   ebx
c000da24:	56                   	push   esi
c000da25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da29:	e8 16 fa ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da2e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000da32:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da36:	83 c4 0c             	add    esp,0xc
c000da39:	53                   	push   ebx
c000da3a:	56                   	push   esi
c000da3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da3f:	e8 24 fb ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da44:	83 c4 4c             	add    esp,0x4c
c000da47:	5b                   	pop    ebx
c000da48:	5e                   	pop    esi
c000da49:	5f                   	pop    edi
c000da4a:	5d                   	pop    ebp
c000da4b:	c3                   	ret    

c000da4c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da4c:	55                   	push   ebp
c000da4d:	57                   	push   edi
c000da4e:	56                   	push   esi
c000da4f:	31 f6                	xor    esi,esi
c000da51:	53                   	push   ebx
c000da52:	31 db                	xor    ebx,ebx
c000da54:	83 ec 40             	sub    esp,0x40
c000da57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da5f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da67:	6a 12                	push   0x12
c000da69:	68 ee 00 00 00       	push   0xee
c000da6e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da72:	e8 79 2a ff ff       	call   c00004f0 <memset>
c000da77:	83 c4 10             	add    esp,0x10
c000da7a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000da7e:	6a 08                	push   0x8
c000da80:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da84:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000da88:	50                   	push   eax
c000da89:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da8d:	55                   	push   ebp
c000da8e:	57                   	push   edi
c000da8f:	e8 e7 fe ff ff       	call   c000d97b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da94:	83 c4 10             	add    esp,0x10
c000da97:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da9b:	50                   	push   eax
c000da9c:	6a 06                	push   0x6
c000da9e:	55                   	push   ebp
c000da9f:	57                   	push   edi
c000daa0:	e8 06 ff ff ff       	call   c000d9ab <CmGetShift(unsigned int*, int*, int, bool*)>
c000daa5:	83 c4 10             	add    esp,0x10
c000daa8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000daad:	74 07                	je     c000dab6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000daaf:	46                   	inc    esi
c000dab0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dab4:	eb e1                	jmp    c000da97 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dab6:	43                   	inc    ebx
c000dab7:	83 fb 12             	cmp    ebx,0x12
c000daba:	75 c2                	jne    c000da7e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dabc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dac0:	31 f6                	xor    esi,esi
c000dac2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dac5:	50                   	push   eax
c000dac6:	50                   	push   eax
c000dac7:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000dacc:	46                   	inc    esi
c000dacd:	8d 04 85 00 61 02 c0 	lea    eax,[eax*4-0x3ffd9f00]
c000dad4:	50                   	push   eax
c000dad5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dad9:	e8 92 2d ff ff       	call   c0000870 <strcat>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	83 fe 18             	cmp    esi,0x18
c000dae4:	75 df                	jne    c000dac5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dae6:	83 c4 3c             	add    esp,0x3c
c000dae9:	31 c0                	xor    eax,eax
c000daeb:	5b                   	pop    ebx
c000daec:	5e                   	pop    esi
c000daed:	5f                   	pop    edi
c000daee:	5d                   	pop    ebp
c000daef:	c3                   	ret    

c000daf0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000daf0:	83 ec 40             	sub    esp,0x40
c000daf3:	8d 44 24 09          	lea    eax,[esp+0x9]
c000daf7:	50                   	push   eax
c000daf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dafc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db00:	e8 3f f9 ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db05:	58                   	pop    eax
c000db06:	5a                   	pop    edx
c000db07:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000db0b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000db0f:	50                   	push   eax
c000db10:	e8 37 ff ff ff       	call   c000da4c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000db15:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000db1a:	83 c4 4c             	add    esp,0x4c
c000db1d:	c3                   	ret    

c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000db1e:	55                   	push   ebp
c000db1f:	57                   	push   edi
c000db20:	56                   	push   esi
c000db21:	53                   	push   ebx
c000db22:	31 db                	xor    ebx,ebx
c000db24:	83 ec 70             	sub    esp,0x70
c000db27:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000db2e:	6a 30                	push   0x30
c000db30:	6a 00                	push   0x0
c000db32:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db36:	56                   	push   esi
c000db37:	e8 b4 29 ff ff       	call   c00004f0 <memset>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	83 ec 0c             	sub    esp,0xc
c000db42:	57                   	push   edi
c000db43:	e8 38 2a ff ff       	call   c0000580 <strlen>
c000db48:	83 c4 10             	add    esp,0x10
c000db4b:	39 d8                	cmp    eax,ebx
c000db4d:	76 16                	jbe    c000db65 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db4f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db53:	83 ec 0c             	sub    esp,0xc
c000db56:	50                   	push   eax
c000db57:	e8 04 2e ff ff       	call   c0000960 <toupper>
c000db5c:	83 c4 10             	add    esp,0x10
c000db5f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db62:	43                   	inc    ebx
c000db63:	eb da                	jmp    c000db3f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db65:	52                   	push   edx
c000db66:	31 db                	xor    ebx,ebx
c000db68:	6a 18                	push   0x18
c000db6a:	31 ff                	xor    edi,edi
c000db6c:	6a 3f                	push   0x3f
c000db6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db72:	50                   	push   eax
c000db73:	e8 78 29 ff ff       	call   c00004f0 <memset>
c000db78:	83 c4 10             	add    esp,0x10
c000db7b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000db7f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db83:	84 c0                	test   al,al
c000db85:	0f 84 af 00 00 00    	je     c000dc3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000db8b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000db8f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000db92:	83 ec 0c             	sub    esp,0xc
c000db95:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000db9a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db9e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000dba2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000dba7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dbab:	56                   	push   esi
c000dbac:	e8 cf 29 ff ff       	call   c0000580 <strlen>
c000dbb1:	83 c4 10             	add    esp,0x10
c000dbb4:	85 c0                	test   eax,eax
c000dbb6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbba:	74 0b                	je     c000dbc7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dbbc:	50                   	push   eax
c000dbbd:	6a 01                	push   0x1
c000dbbf:	56                   	push   esi
c000dbc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dbc4:	50                   	push   eax
c000dbc5:	eb 0a                	jmp    c000dbd1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dbc7:	50                   	push   eax
c000dbc8:	6a 00                	push   0x0
c000dbca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dbce:	50                   	push   eax
c000dbcf:	6a 00                	push   0x0
c000dbd1:	e8 44 fd ff ff       	call   c000d91a <CmGetMatch(char*, char*, bool, bool*)>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	83 f8 ff             	cmp    eax,0xffffffff
c000dbdc:	75 1a                	jne    c000dbf8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dbde:	83 ec 0c             	sub    esp,0xc
c000dbe1:	68 00 3d 02 c0       	push   0xc0023d00
c000dbe6:	e8 25 1f 00 00       	call   c000fb10 <KePanic(char const*)>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	b8 02 00 00 00       	mov    eax,0x2
c000dbf3:	e9 bb 00 00 00       	jmp    c000dcb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbf8:	83 ff 18             	cmp    edi,0x18
c000dbfb:	75 1a                	jne    c000dc17 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dbfd:	83 ec 0c             	sub    esp,0xc
c000dc00:	68 15 3d 02 c0       	push   0xc0023d15
c000dc05:	e8 06 1f 00 00       	call   c000fb10 <KePanic(char const*)>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	b8 01 00 00 00       	mov    eax,0x1
c000dc12:	e9 9c 00 00 00       	jmp    c000dcb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc17:	47                   	inc    edi
c000dc18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc1d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dc21:	0f 45 dd             	cmovne ebx,ebp
c000dc24:	83 ec 0c             	sub    esp,0xc
c000dc27:	56                   	push   esi
c000dc28:	e8 53 29 ff ff       	call   c0000580 <strlen>
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	85 c0                	test   eax,eax
c000dc32:	74 06                	je     c000dc3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dc34:	43                   	inc    ebx
c000dc35:	e9 41 ff ff ff       	jmp    c000db7b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dc3a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc42:	31 db                	xor    ebx,ebx
c000dc44:	31 ff                	xor    edi,edi
c000dc46:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc4e:	50                   	push   eax
c000dc4f:	6a 12                	push   0x12
c000dc51:	68 ee 00 00 00       	push   0xee
c000dc56:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc5d:	e8 8e 28 ff ff       	call   c00004f0 <memset>
c000dc62:	83 c4 10             	add    esp,0x10
c000dc65:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc69:	83 fb 17             	cmp    ebx,0x17
c000dc6c:	7e 26                	jle    c000dc94 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dc6e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc72:	50                   	push   eax
c000dc73:	6a 08                	push   0x8
c000dc75:	55                   	push   ebp
c000dc76:	56                   	push   esi
c000dc77:	e8 2f fd ff ff       	call   c000d9ab <CmGetShift(unsigned int*, int*, int, bool*)>
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc84:	74 26                	je     c000dcac <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dc86:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dc8d:	4b                   	dec    ebx
c000dc8e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dc91:	47                   	inc    edi
c000dc92:	eb 1c                	jmp    c000dcb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc94:	6a 06                	push   0x6
c000dc96:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dc9b:	50                   	push   eax
c000dc9c:	55                   	push   ebp
c000dc9d:	56                   	push   esi
c000dc9e:	e8 d8 fc ff ff       	call   c000d97b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	84 c0                	test   al,al
c000dca8:	75 06                	jne    c000dcb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dcaa:	eb c2                	jmp    c000dc6e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dcac:	31 c0                	xor    eax,eax
c000dcae:	eb 03                	jmp    c000dcb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dcb0:	43                   	inc    ebx
c000dcb1:	eb b2                	jmp    c000dc65 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dcb3:	83 c4 6c             	add    esp,0x6c
c000dcb6:	5b                   	pop    ebx
c000dcb7:	5e                   	pop    esi
c000dcb8:	5f                   	pop    edi
c000dcb9:	5d                   	pop    ebp
c000dcba:	c3                   	ret    

c000dcbb <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dcbb:	53                   	push   ebx
c000dcbc:	83 ec 3c             	sub    esp,0x3c
c000dcbf:	6a 2b                	push   0x2b
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dcc7:	53                   	push   ebx
c000dcc8:	e8 23 28 ff ff       	call   c00004f0 <memset>
c000dccd:	58                   	pop    eax
c000dcce:	5a                   	pop    edx
c000dccf:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dcd3:	50                   	push   eax
c000dcd4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcd8:	e8 41 fe ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcdd:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dce2:	83 c4 0c             	add    esp,0xc
c000dce5:	6a 15                	push   0x15
c000dce7:	6a 00                	push   0x0
c000dce9:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dced:	50                   	push   eax
c000dcee:	e8 fd 27 ff ff       	call   c00004f0 <memset>
c000dcf3:	53                   	push   ebx
c000dcf4:	6a 00                	push   0x0
c000dcf6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcfa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcfe:	e8 eb f9 ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd03:	83 c4 58             	add    esp,0x58
c000dd06:	5b                   	pop    ebx
c000dd07:	c3                   	ret    

c000dd08 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dd08:	56                   	push   esi
c000dd09:	53                   	push   ebx
c000dd0a:	83 ec 48             	sub    esp,0x48
c000dd0d:	6a 12                	push   0x12
c000dd0f:	68 ff 00 00 00       	push   0xff
c000dd14:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dd18:	56                   	push   esi
c000dd19:	e8 d2 27 ff ff       	call   c00004f0 <memset>
c000dd1e:	5a                   	pop    edx
c000dd1f:	59                   	pop    ecx
c000dd20:	56                   	push   esi
c000dd21:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd25:	e8 f4 fd ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd2a:	83 c4 10             	add    esp,0x10
c000dd2d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd31:	85 db                	test   ebx,ebx
c000dd33:	74 42                	je     c000dd77 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd35:	50                   	push   eax
c000dd36:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dd3a:	50                   	push   eax
c000dd3b:	53                   	push   ebx
c000dd3c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd40:	e8 ff f6 ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd45:	83 c4 0c             	add    esp,0xc
c000dd48:	6a 12                	push   0x12
c000dd4a:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd4e:	50                   	push   eax
c000dd4f:	56                   	push   esi
c000dd50:	e8 2b 26 ff ff       	call   c0000380 <memcmp>
c000dd55:	83 c4 10             	add    esp,0x10
c000dd58:	85 c0                	test   eax,eax
c000dd5a:	74 1e                	je     c000dd7a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd5c:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd61:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd66:	c1 e3 08             	shl    ebx,0x8
c000dd69:	09 d8                	or     eax,ebx
c000dd6b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd70:	c1 e3 10             	shl    ebx,0x10
c000dd73:	09 c3                	or     ebx,eax
c000dd75:	eb ba                	jmp    c000dd31 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dd77:	83 cb ff             	or     ebx,0xffffffff
c000dd7a:	83 c4 44             	add    esp,0x44
c000dd7d:	89 d8                	mov    eax,ebx
c000dd7f:	5b                   	pop    ebx
c000dd80:	5e                   	pop    esi
c000dd81:	c3                   	ret    

c000dd82 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dd82:	57                   	push   edi
c000dd83:	56                   	push   esi
c000dd84:	53                   	push   ebx
c000dd85:	83 ec 34             	sub    esp,0x34
c000dd88:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dd8c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dd90:	6a 2b                	push   0x2b
c000dd92:	6a 00                	push   0x0
c000dd94:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd98:	53                   	push   ebx
c000dd99:	e8 52 27 ff ff       	call   c00004f0 <memset>
c000dd9e:	58                   	pop    eax
c000dd9f:	5a                   	pop    edx
c000dda0:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dda4:	50                   	push   eax
c000dda5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dda9:	e8 70 fd ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddae:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000ddb2:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000ddb6:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000ddba:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000ddbe:	53                   	push   ebx
c000ddbf:	6a 00                	push   0x0
c000ddc1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddc5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddc9:	e8 20 f9 ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddce:	83 c4 50             	add    esp,0x50
c000ddd1:	5b                   	pop    ebx
c000ddd2:	5e                   	pop    esi
c000ddd3:	5f                   	pop    edi
c000ddd4:	c3                   	ret    

c000ddd5 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000ddd5:	55                   	push   ebp
c000ddd6:	57                   	push   edi
c000ddd7:	56                   	push   esi
c000ddd8:	53                   	push   ebx
c000ddd9:	83 ec 40             	sub    esp,0x40
c000dddc:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dde0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dde4:	6a 2b                	push   0x2b
c000dde6:	6a 00                	push   0x0
c000dde8:	8d 74 24 11          	lea    esi,[esp+0x11]
c000ddec:	56                   	push   esi
c000dded:	e8 fe 26 ff ff       	call   c00004f0 <memset>
c000ddf2:	5f                   	pop    edi
c000ddf3:	89 ef                	mov    edi,ebp
c000ddf5:	58                   	pop    eax
c000ddf6:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddfa:	50                   	push   eax
c000ddfb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddff:	e8 1a fd ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de04:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000de09:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000de0e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000de13:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000de18:	83 c4 10             	add    esp,0x10
c000de1b:	85 ed                	test   ebp,ebp
c000de1d:	74 14                	je     c000de33 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de1f:	51                   	push   ecx
c000de20:	51                   	push   ecx
c000de21:	57                   	push   edi
c000de22:	53                   	push   ebx
c000de23:	e8 0e f7 ff ff       	call   c000d536 <CmGetNext(Reghive_Tag*, int)>
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	85 c0                	test   eax,eax
c000de2d:	74 04                	je     c000de33 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de2f:	89 c7                	mov    edi,eax
c000de31:	eb e8                	jmp    c000de1b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000de33:	56                   	push   esi
c000de34:	6a 00                	push   0x0
c000de36:	57                   	push   edi
c000de37:	53                   	push   ebx
c000de38:	e8 b1 f8 ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de3d:	83 c4 0c             	add    esp,0xc
c000de40:	56                   	push   esi
c000de41:	50                   	push   eax
c000de42:	89 c7                	mov    edi,eax
c000de44:	53                   	push   ebx
c000de45:	e8 fa f5 ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de4a:	58                   	pop    eax
c000de4b:	5a                   	pop    edx
c000de4c:	6a 6c                	push   0x6c
c000de4e:	6a 00                	push   0x0
c000de50:	6a 00                	push   0x0
c000de52:	68 26 3d 02 c0       	push   0xc0023d26
c000de57:	57                   	push   edi
c000de58:	53                   	push   ebx
c000de59:	e8 24 ff ff ff       	call   c000dd82 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de5e:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de62:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de66:	c1 e8 10             	shr    eax,0x10
c000de69:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de6d:	83 c4 1c             	add    esp,0x1c
c000de70:	56                   	push   esi
c000de71:	57                   	push   edi
c000de72:	53                   	push   ebx
c000de73:	e8 f0 f6 ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de78:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000de7d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000de82:	c1 e0 08             	shl    eax,0x8
c000de85:	09 c2                	or     edx,eax
c000de87:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000de8c:	83 c4 4c             	add    esp,0x4c
c000de8f:	5b                   	pop    ebx
c000de90:	5e                   	pop    esi
c000de91:	c1 e0 10             	shl    eax,0x10
c000de94:	09 d0                	or     eax,edx
c000de96:	5f                   	pop    edi
c000de97:	5d                   	pop    ebp
c000de98:	c3                   	ret    

c000de99 <zStrtok(char*, char const*)>:
c000de99:	55                   	push   ebp
c000de9a:	57                   	push   edi
c000de9b:	56                   	push   esi
c000de9c:	53                   	push   ebx
c000de9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dea5:	85 db                	test   ebx,ebx
c000dea7:	74 2f                	je     c000ded8 <zStrtok(char*, char const*)+0x3f>
c000dea9:	85 c0                	test   eax,eax
c000deab:	75 09                	jne    c000deb6 <zStrtok(char*, char const*)+0x1d>
c000dead:	a1 04 c1 02 c0       	mov    eax,ds:0xc002c104
c000deb2:	85 c0                	test   eax,eax
c000deb4:	74 50                	je     c000df06 <zStrtok(char*, char const*)+0x6d>
c000deb6:	31 c9                	xor    ecx,ecx
c000deb8:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000debc:	74 03                	je     c000dec1 <zStrtok(char*, char const*)+0x28>
c000debe:	41                   	inc    ecx
c000debf:	eb f7                	jmp    c000deb8 <zStrtok(char*, char const*)+0x1f>
c000dec1:	31 d2                	xor    edx,edx
c000dec3:	39 ca                	cmp    edx,ecx
c000dec5:	74 15                	je     c000dedc <zStrtok(char*, char const*)+0x43>
c000dec7:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000decb:	8d 3c 10             	lea    edi,[eax+edx*1]
c000dece:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000ded1:	39 ee                	cmp    esi,ebp
c000ded3:	74 13                	je     c000dee8 <zStrtok(char*, char const*)+0x4f>
c000ded5:	42                   	inc    edx
c000ded6:	eb eb                	jmp    c000dec3 <zStrtok(char*, char const*)+0x2a>
c000ded8:	31 c0                	xor    eax,eax
c000deda:	eb 2a                	jmp    c000df06 <zStrtok(char*, char const*)+0x6d>
c000dedc:	c7 05 04 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c104,0x0
c000dee6:	eb 1e                	jmp    c000df06 <zStrtok(char*, char const*)+0x6d>
c000dee8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000deeb:	39 ce                	cmp    esi,ecx
c000deed:	75 0a                	jne    c000def9 <zStrtok(char*, char const*)+0x60>
c000deef:	40                   	inc    eax
c000def0:	a3 04 c1 02 c0       	mov    ds:0xc002c104,eax
c000def5:	89 d8                	mov    eax,ebx
c000def7:	eb 0d                	jmp    c000df06 <zStrtok(char*, char const*)+0x6d>
c000def9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000defc:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df00:	89 15 04 c1 02 c0    	mov    DWORD PTR ds:0xc002c104,edx
c000df06:	5b                   	pop    ebx
c000df07:	5e                   	pop    esi
c000df08:	5f                   	pop    edi
c000df09:	5d                   	pop    ebp
c000df0a:	c3                   	ret    

c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000df0b:	57                   	push   edi
c000df0c:	56                   	push   esi
c000df0d:	53                   	push   ebx
c000df0e:	81 ec 08 01 00 00    	sub    esp,0x108
c000df14:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000df1b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000df22:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000df26:	53                   	push   ebx
c000df27:	e8 24 27 ff ff       	call   c0000650 <strcpy>
c000df2c:	59                   	pop    ecx
c000df2d:	5e                   	pop    esi
c000df2e:	68 75 4c 02 c0       	push   0xc0024c75
c000df33:	53                   	push   ebx
c000df34:	bb 01 00 00 00       	mov    ebx,0x1
c000df39:	e8 5b ff ff ff       	call   c000de99 <zStrtok(char*, char const*)>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	85 c0                	test   eax,eax
c000df43:	74 3b                	je     c000df80 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df45:	52                   	push   edx
c000df46:	50                   	push   eax
c000df47:	6a 01                	push   0x1
c000df49:	57                   	push   edi
c000df4a:	e8 b9 fd ff ff       	call   c000dd08 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df4f:	59                   	pop    ecx
c000df50:	5e                   	pop    esi
c000df51:	89 c3                	mov    ebx,eax
c000df53:	68 75 4c 02 c0       	push   0xc0024c75
c000df58:	6a 00                	push   0x0
c000df5a:	e8 3a ff ff ff       	call   c000de99 <zStrtok(char*, char const*)>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	85 c0                	test   eax,eax
c000df64:	89 c6                	mov    esi,eax
c000df66:	74 18                	je     c000df80 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df68:	52                   	push   edx
c000df69:	52                   	push   edx
c000df6a:	53                   	push   ebx
c000df6b:	57                   	push   edi
c000df6c:	e8 86 f5 ff ff       	call   c000d4f7 <CmEnterDirectory(Reghive_Tag*, int)>
c000df71:	83 c4 10             	add    esp,0x10
c000df74:	83 f8 ff             	cmp    eax,0xffffffff
c000df77:	89 c3                	mov    ebx,eax
c000df79:	74 05                	je     c000df80 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df7b:	50                   	push   eax
c000df7c:	56                   	push   esi
c000df7d:	53                   	push   ebx
c000df7e:	eb c9                	jmp    c000df49 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000df80:	81 c4 00 01 00 00    	add    esp,0x100
c000df86:	89 d8                	mov    eax,ebx
c000df88:	5b                   	pop    ebx
c000df89:	5e                   	pop    esi
c000df8a:	5f                   	pop    edi
c000df8b:	c3                   	ret    

c000df8c <Computer::close(int, int, void*)>:
c000df8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df91:	c3                   	ret    

c000df92 <Computer::Computer()>:
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df99:	83 ec 08             	sub    esp,0x8
c000df9c:	68 2c 3d 02 c0       	push   0xc0023d2c
c000dfa1:	50                   	push   eax
c000dfa2:	e8 b1 bb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	ba 84 3d 02 c0       	mov    edx,0xc0023d84
c000dfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb3:	89 10                	mov    DWORD PTR [eax],edx
c000dfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfd1:	90                   	nop
c000dfd2:	83 c4 0c             	add    esp,0xc
c000dfd5:	c3                   	ret    

c000dfd6 <Computer::open(int, int, void*)>:
c000dfd6:	56                   	push   esi
c000dfd7:	53                   	push   ebx
c000dfd8:	83 ec 04             	sub    esp,0x4
c000dfdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfdf:	39 1d 08 c1 02 c0    	cmp    DWORD PTR ds:0xc002c108,ebx
c000dfe5:	74 10                	je     c000dff7 <Computer::open(int, int, void*)+0x21>
c000dfe7:	83 ec 0c             	sub    esp,0xc
c000dfea:	68 50 3d 02 c0       	push   0xc0023d50
c000dfef:	e8 1c 1b 00 00       	call   c000fb10 <KePanic(char const*)>
c000dff4:	83 c4 10             	add    esp,0x10
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	68 78 11 00 00       	push   0x1178
c000dfff:	e8 b0 16 00 00       	call   c000f6b4 <malloc>
c000e004:	89 04 24             	mov    DWORD PTR [esp],eax
c000e007:	89 c6                	mov    esi,eax
c000e009:	e8 3a c5 00 00       	call   c001a548 <CPU::CPU()>
c000e00e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e012:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e018:	50                   	push   eax
c000e019:	6a 00                	push   0x0
c000e01b:	6a 00                	push   0x0
c000e01d:	56                   	push   esi
c000e01e:	e8 07 c7 00 00       	call   c001a72a <CPU::open(int, int, void*)>
c000e023:	83 c4 14             	add    esp,0x14
c000e026:	68 35 3d 02 c0       	push   0xc0023d35
c000e02b:	e8 e1 f1 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000e030:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e037:	e8 78 16 00 00       	call   c000f6b4 <malloc>
c000e03c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e03f:	89 c6                	mov    esi,eax
c000e041:	e8 ee e7 ff ff       	call   c000c834 <ACPI::ACPI()>
c000e046:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e04c:	5a                   	pop    edx
c000e04d:	59                   	pop    ecx
c000e04e:	56                   	push   esi
c000e04f:	53                   	push   ebx
c000e050:	e8 a1 b9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e055:	5e                   	pop    esi
c000e056:	58                   	pop    eax
c000e057:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e05d:	50                   	push   eax
c000e05e:	53                   	push   ebx
c000e05f:	e8 92 b9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e064:	83 c4 14             	add    esp,0x14
c000e067:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e06c:	5b                   	pop    ebx
c000e06d:	5e                   	pop    esi
c000e06e:	c3                   	ret    

c000e06f <KeCalculateCRC32(unsigned char*, int)>:
c000e06f:	53                   	push   ebx
c000e070:	83 c8 ff             	or     eax,0xffffffff
c000e073:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e077:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e07b:	01 cb                	add    ebx,ecx
c000e07d:	39 d9                	cmp    ecx,ebx
c000e07f:	74 15                	je     c000e096 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e081:	41                   	inc    ecx
c000e082:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e085:	31 c2                	xor    edx,eax
c000e087:	c1 e8 08             	shr    eax,0x8
c000e08a:	0f b6 d2             	movzx  edx,dl
c000e08d:	33 04 95 00 62 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9e00]
c000e094:	eb e7                	jmp    c000e07d <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e096:	5b                   	pop    ebx
c000e097:	f7 d0                	not    eax
c000e099:	c3                   	ret    

c000e09a <EnvVarContainer::getEnv(char const*)>:
c000e09a:	57                   	push   edi
c000e09b:	56                   	push   esi
c000e09c:	53                   	push   ebx
c000e09d:	31 db                	xor    ebx,ebx
c000e09f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e0a3:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e0a5:	7e 2b                	jle    c000e0d2 <EnvVarContainer::getEnv(char const*)+0x38>
c000e0a7:	50                   	push   eax
c000e0a8:	50                   	push   eax
c000e0a9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e0ac:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e0b3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e0b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0ba:	e8 c1 26 ff ff       	call   c0000780 <strcmp>
c000e0bf:	83 c4 10             	add    esp,0x10
c000e0c2:	85 c0                	test   eax,eax
c000e0c4:	75 09                	jne    c000e0cf <EnvVarContainer::getEnv(char const*)+0x35>
c000e0c6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e0c9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e0cd:	eb 05                	jmp    c000e0d4 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e0cf:	43                   	inc    ebx
c000e0d0:	eb d1                	jmp    c000e0a3 <EnvVarContainer::getEnv(char const*)+0x9>
c000e0d2:	31 c0                	xor    eax,eax
c000e0d4:	5b                   	pop    ebx
c000e0d5:	5e                   	pop    esi
c000e0d6:	5f                   	pop    edi
c000e0d7:	c3                   	ret    

c000e0d8 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e0d8:	55                   	push   ebp
c000e0d9:	57                   	push   edi
c000e0da:	56                   	push   esi
c000e0db:	53                   	push   ebx
c000e0dc:	83 ec 28             	sub    esp,0x28
c000e0df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e0e3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e0e7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e0eb:	56                   	push   esi
c000e0ec:	e8 8f 24 ff ff       	call   c0000580 <strlen>
c000e0f1:	40                   	inc    eax
c000e0f2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0f5:	e8 ba 15 00 00       	call   c000f6b4 <malloc>
c000e0fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e101:	e8 7a 24 ff ff       	call   c0000580 <strlen>
c000e106:	40                   	inc    eax
c000e107:	89 04 24             	mov    DWORD PTR [esp],eax
c000e10a:	e8 a5 15 00 00       	call   c000f6b4 <malloc>
c000e10f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e116:	e8 65 24 ff ff       	call   c0000580 <strlen>
c000e11b:	83 c4 0c             	add    esp,0xc
c000e11e:	40                   	inc    eax
c000e11f:	50                   	push   eax
c000e120:	6a 00                	push   0x0
c000e122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e126:	e8 c5 23 ff ff       	call   c00004f0 <memset>
c000e12b:	89 34 24             	mov    DWORD PTR [esp],esi
c000e12e:	e8 4d 24 ff ff       	call   c0000580 <strlen>
c000e133:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e137:	8d 48 01             	lea    ecx,[eax+0x1]
c000e13a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e13c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e13f:	89 de                	mov    esi,ebx
c000e141:	e8 3a 24 ff ff       	call   c0000580 <strlen>
c000e146:	83 c4 0c             	add    esp,0xc
c000e149:	40                   	inc    eax
c000e14a:	50                   	push   eax
c000e14b:	6a 00                	push   0x0
c000e14d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e151:	e8 9a 23 ff ff       	call   c00004f0 <memset>
c000e156:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e159:	e8 22 24 ff ff       	call   c0000580 <strlen>
c000e15e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e162:	8d 48 01             	lea    ecx,[eax+0x1]
c000e165:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e167:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e16a:	40                   	inc    eax
c000e16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e16e:	c1 e0 03             	shl    eax,0x3
c000e171:	5a                   	pop    edx
c000e172:	59                   	pop    ecx
c000e173:	50                   	push   eax
c000e174:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e177:	e8 24 15 00 00       	call   c000f6a0 <realloc>
c000e17c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e17f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e183:	b9 08 00 00 00       	mov    ecx,0x8
c000e188:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e18b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e18f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e191:	83 c4 2c             	add    esp,0x2c
c000e194:	5b                   	pop    ebx
c000e195:	5e                   	pop    esi
c000e196:	5f                   	pop    edi
c000e197:	5d                   	pop    ebp
c000e198:	c3                   	ret    
c000e199:	90                   	nop

c000e19a <EnvVarContainer::deleteEnv(char const*)>:
c000e19a:	c3                   	ret    
c000e19b:	90                   	nop

c000e19c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e19c:	55                   	push   ebp
c000e19d:	57                   	push   edi
c000e19e:	56                   	push   esi
c000e19f:	53                   	push   ebx
c000e1a0:	81 ec 38 01 00 00    	sub    esp,0x138
c000e1a6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e1ad:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e1b4:	68 14 01 00 00       	push   0x114
c000e1b9:	e8 f6 14 00 00       	call   c000f6b4 <malloc>
c000e1be:	83 c4 0c             	add    esp,0xc
c000e1c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e1c4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e1cb:	89 c3                	mov    ebx,eax
c000e1cd:	50                   	push   eax
c000e1ce:	e8 b5 9f ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000e1d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1d6:	e8 8f a2 ff ff       	call   c000846a <File::exists()>
c000e1db:	83 c4 10             	add    esp,0x10
c000e1de:	84 c0                	test   al,al
c000e1e0:	75 31                	jne    c000e213 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e1e2:	50                   	push   eax
c000e1e3:	50                   	push   eax
c000e1e4:	6a 12                	push   0x12
c000e1e6:	53                   	push   ebx
c000e1e7:	e8 ba 9f ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e1ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1ee:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e1f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1f4:	e8 87 23 ff ff       	call   c0000580 <strlen>
c000e1f9:	5a                   	pop    edx
c000e1fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e1fe:	52                   	push   edx
c000e1ff:	31 d2                	xor    edx,edx
c000e201:	56                   	push   esi
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	53                   	push   ebx
c000e205:	ff d7                	call   edi
c000e207:	83 c4 14             	add    esp,0x14
c000e20a:	53                   	push   ebx
c000e20b:	e8 f4 9f ff ff       	call   c0008204 <File::close()>
c000e210:	83 c4 10             	add    esp,0x10
c000e213:	56                   	push   esi
c000e214:	31 f6                	xor    esi,esi
c000e216:	68 00 01 00 00       	push   0x100
c000e21b:	6a 00                	push   0x0
c000e21d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e221:	50                   	push   eax
c000e222:	e8 c9 22 ff ff       	call   c00004f0 <memset>
c000e227:	5f                   	pop    edi
c000e228:	58                   	pop    eax
c000e229:	6a 01                	push   0x1
c000e22b:	53                   	push   ebx
c000e22c:	e8 75 9f ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e23c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e244:	83 ec 0c             	sub    esp,0xc
c000e247:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e24b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e24d:	52                   	push   edx
c000e24e:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e252:	51                   	push   ecx
c000e253:	6a 00                	push   0x0
c000e255:	6a 01                	push   0x1
c000e257:	53                   	push   ebx
c000e258:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e25b:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e260:	83 c4 20             	add    esp,0x20
c000e263:	85 c0                	test   eax,eax
c000e265:	89 c1                	mov    ecx,eax
c000e267:	0f 84 36 01 00 00    	je     c000e3a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e26d:	83 f8 0d             	cmp    eax,0xd
c000e270:	0f 84 22 01 00 00    	je     c000e398 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e276:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e27b:	0f 84 f0 00 00 00    	je     c000e371 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e281:	83 f8 0a             	cmp    eax,0xa
c000e284:	74 13                	je     c000e299 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e286:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e28b:	74 0c                	je     c000e299 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e28d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e293:	0f 8e f6 00 00 00    	jle    c000e38f <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e299:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e29d:	83 ec 0c             	sub    esp,0xc
c000e2a0:	8d 78 01             	lea    edi,[eax+0x1]
c000e2a3:	57                   	push   edi
c000e2a4:	e8 0b 14 00 00       	call   c000f6b4 <malloc>
c000e2a9:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e2ad:	8d 56 04             	lea    edx,[esi+0x4]
c000e2b0:	89 14 24             	mov    DWORD PTR [esp],edx
c000e2b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e2bb:	e8 f4 13 00 00       	call   c000f6b4 <malloc>
c000e2c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2c4:	83 c4 0c             	add    esp,0xc
c000e2c7:	57                   	push   edi
c000e2c8:	6a 00                	push   0x0
c000e2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2ce:	e8 1d 22 ff ff       	call   c00004f0 <memset>
c000e2d3:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e2d7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e2db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e2df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e2e8:	52                   	push   edx
c000e2e9:	6a 00                	push   0x0
c000e2eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2ef:	e8 fc 21 ff ff       	call   c00004f0 <memset>
c000e2f4:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e2f8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e2fc:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2ff:	e8 7c 22 ff ff       	call   c0000580 <strlen>
c000e304:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e308:	89 c1                	mov    ecx,eax
c000e30a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e30c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e30f:	83 c4 10             	add    esp,0x10
c000e312:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e315:	40                   	inc    eax
c000e316:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e319:	85 d2                	test   edx,edx
c000e31b:	75 0c                	jne    c000e329 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e31d:	83 ec 0c             	sub    esp,0xc
c000e320:	6a 08                	push   0x8
c000e322:	e8 8d 13 00 00       	call   c000f6b4 <malloc>
c000e327:	eb 0c                	jmp    c000e335 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e329:	51                   	push   ecx
c000e32a:	51                   	push   ecx
c000e32b:	c1 e0 03             	shl    eax,0x3
c000e32e:	50                   	push   eax
c000e32f:	52                   	push   edx
c000e330:	e8 6b 13 00 00       	call   c000f6a0 <realloc>
c000e335:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e338:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e341:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e345:	b9 08 00 00 00       	mov    ecx,0x8
c000e34a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e34e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e350:	50                   	push   eax
c000e351:	31 f6                	xor    esi,esi
c000e353:	68 00 01 00 00       	push   0x100
c000e358:	6a 00                	push   0x0
c000e35a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e35e:	50                   	push   eax
c000e35f:	e8 8c 21 ff ff       	call   c00004f0 <memset>
c000e364:	83 c4 10             	add    esp,0x10
c000e367:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e36f:	eb 27                	jmp    c000e398 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e371:	83 f8 3d             	cmp    eax,0x3d
c000e374:	74 1e                	je     c000e394 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e376:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e37c:	7f 07                	jg     c000e385 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e37e:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e382:	46                   	inc    esi
c000e383:	eb 13                	jmp    c000e398 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e385:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e38d:	eb 09                	jmp    c000e398 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e38f:	83 f8 3d             	cmp    eax,0x3d
c000e392:	75 ea                	jne    c000e37e <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e394:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e398:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e39d:	0f 85 99 fe ff ff    	jne    c000e23c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e3a3:	83 ec 0c             	sub    esp,0xc
c000e3a6:	53                   	push   ebx
c000e3a7:	e8 58 9e ff ff       	call   c0008204 <File::close()>
c000e3ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3b4:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e3ba:	5b                   	pop    ebx
c000e3bb:	5e                   	pop    esi
c000e3bc:	5f                   	pop    edi
c000e3bd:	5d                   	pop    ebp
c000e3be:	c3                   	ret    
c000e3bf:	90                   	nop

c000e3c0 <EnvVarContainer::__loadSystem()>:
c000e3c0:	83 ec 10             	sub    esp,0x10
c000e3c3:	68 00 66 02 c0       	push   0xc0026600
c000e3c8:	68 a8 3d 02 c0       	push   0xc0023da8
c000e3cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d1:	e8 c6 fd ff ff       	call   c000e19c <EnvVarContainer::loadFrom(char const*, char const*)>
c000e3d6:	83 c4 1c             	add    esp,0x1c
c000e3d9:	c3                   	ret    

c000e3da <EnvVarContainer::__loadUser()>:
c000e3da:	c3                   	ret    
c000e3db:	90                   	nop

c000e3dc <EnvVarContainer::EnvVarContainer(Process*)>:
c000e3dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3fc:	90                   	nop
c000e3fd:	c3                   	ret    

c000e3fe <EnvVarContainer::~EnvVarContainer()>:
c000e3fe:	83 ec 0c             	sub    esp,0xc
c000e401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e405:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e408:	85 c0                	test   eax,eax
c000e40a:	74 1d                	je     c000e429 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e410:	8b 00                	mov    eax,DWORD PTR [eax]
c000e412:	85 c0                	test   eax,eax
c000e414:	74 13                	je     c000e429 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e41d:	83 ec 0c             	sub    esp,0xc
c000e420:	50                   	push   eax
c000e421:	e8 9e 12 00 00       	call   c000f6c4 <free>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	90                   	nop
c000e42a:	83 c4 0c             	add    esp,0xc
c000e42d:	c3                   	ret    

c000e42e <KeGetEnv(Process*, char const*)>:
c000e42e:	53                   	push   ebx
c000e42f:	83 ec 08             	sub    esp,0x8
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	39 05 98 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca98,eax
c000e43c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e440:	74 04                	je     c000e446 <KeGetEnv(Process*, char const*)+0x18>
c000e442:	85 c0                	test   eax,eax
c000e444:	75 0b                	jne    c000e451 <KeGetEnv(Process*, char const*)+0x23>
c000e446:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e44b:	85 c0                	test   eax,eax
c000e44d:	75 19                	jne    c000e468 <KeGetEnv(Process*, char const*)+0x3a>
c000e44f:	eb 27                	jmp    c000e478 <KeGetEnv(Process*, char const*)+0x4a>
c000e451:	52                   	push   edx
c000e452:	52                   	push   edx
c000e453:	53                   	push   ebx
c000e454:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e45a:	e8 3b fc ff ff       	call   c000e09a <EnvVarContainer::getEnv(char const*)>
c000e45f:	83 c4 10             	add    esp,0x10
c000e462:	85 c0                	test   eax,eax
c000e464:	75 28                	jne    c000e48e <KeGetEnv(Process*, char const*)+0x60>
c000e466:	eb de                	jmp    c000e446 <KeGetEnv(Process*, char const*)+0x18>
c000e468:	52                   	push   edx
c000e469:	52                   	push   edx
c000e46a:	53                   	push   ebx
c000e46b:	50                   	push   eax
c000e46c:	e8 29 fc ff ff       	call   c000e09a <EnvVarContainer::getEnv(char const*)>
c000e471:	83 c4 10             	add    esp,0x10
c000e474:	85 c0                	test   eax,eax
c000e476:	75 16                	jne    c000e48e <KeGetEnv(Process*, char const*)+0x60>
c000e478:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e47c:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e481:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e485:	83 c4 08             	add    esp,0x8
c000e488:	5b                   	pop    ebx
c000e489:	e9 0c fc ff ff       	jmp    c000e09a <EnvVarContainer::getEnv(char const*)>
c000e48e:	83 c4 08             	add    esp,0x8
c000e491:	5b                   	pop    ebx
c000e492:	c3                   	ret    

c000e493 <KeSetEnvSystem(char const*, char const*)>:
c000e493:	83 ec 10             	sub    esp,0x10
c000e496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e49a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e49e:	ff 35 14 c1 02 c0    	push   DWORD PTR ds:0xc002c114
c000e4a4:	e8 2f fc ff ff       	call   c000e0d8 <EnvVarContainer::setEnv(char const*, char const*)>
c000e4a9:	83 c4 1c             	add    esp,0x1c
c000e4ac:	c3                   	ret    

c000e4ad <KeSetEnvUser(char const*, char const*)>:
c000e4ad:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e4b2:	85 c0                	test   eax,eax
c000e4b4:	74 15                	je     c000e4cb <KeSetEnvUser(char const*, char const*)+0x1e>
c000e4b6:	83 ec 10             	sub    esp,0x10
c000e4b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4c1:	50                   	push   eax
c000e4c2:	e8 11 fc ff ff       	call   c000e0d8 <EnvVarContainer::setEnv(char const*, char const*)>
c000e4c7:	83 c4 1c             	add    esp,0x1c
c000e4ca:	c3                   	ret    
c000e4cb:	c3                   	ret    

c000e4cc <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d0:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e4d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4da:	e9 f9 fb ff ff       	jmp    c000e0d8 <EnvVarContainer::setEnv(char const*, char const*)>

c000e4df <KeDeleteEnvSystem(char const*)>:
c000e4df:	c3                   	ret    

c000e4e0 <KeDeleteEnvUser(char const*)>:
c000e4e0:	c3                   	ret    

c000e4e1 <KeDeleteEnvProcess(Process*, char const*)>:
c000e4e1:	c3                   	ret    

c000e4e2 <KeNewProcessEnv(Process*)>:
c000e4e2:	83 ec 28             	sub    esp,0x28
c000e4e5:	6a 0c                	push   0xc
c000e4e7:	e8 c8 11 00 00       	call   c000f6b4 <malloc>
c000e4ec:	5a                   	pop    edx
c000e4ed:	59                   	pop    ecx
c000e4ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4f2:	50                   	push   eax
c000e4f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4f7:	e8 e0 fe ff ff       	call   c000e3dc <EnvVarContainer::EnvVarContainer(Process*)>
c000e4fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e500:	83 c4 2c             	add    esp,0x2c
c000e503:	c3                   	ret    

c000e504 <KeCopyProcessEnv(Process*, Process*)>:
c000e504:	57                   	push   edi
c000e505:	56                   	push   esi
c000e506:	53                   	push   ebx
c000e507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50b:	83 ec 0c             	sub    esp,0xc
c000e50e:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e514:	6a 0c                	push   0xc
c000e516:	e8 99 11 00 00       	call   c000f6b4 <malloc>
c000e51b:	89 c3                	mov    ebx,eax
c000e51d:	58                   	pop    eax
c000e51e:	5a                   	pop    edx
c000e51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e523:	53                   	push   ebx
c000e524:	e8 b3 fe ff ff       	call   c000e3dc <EnvVarContainer::EnvVarContainer(Process*)>
c000e529:	8b 07                	mov    eax,DWORD PTR [edi]
c000e52b:	89 03                	mov    DWORD PTR [ebx],eax
c000e52d:	c1 e0 03             	shl    eax,0x3
c000e530:	89 04 24             	mov    DWORD PTR [esp],eax
c000e533:	e8 7c 11 00 00       	call   c000f6b4 <malloc>
c000e538:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e53b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e53d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e540:	89 c7                	mov    edi,eax
c000e542:	c1 e1 03             	shl    ecx,0x3
c000e545:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e547:	83 c4 10             	add    esp,0x10
c000e54a:	89 d8                	mov    eax,ebx
c000e54c:	5b                   	pop    ebx
c000e54d:	5e                   	pop    esi
c000e54e:	5f                   	pop    edi
c000e54f:	c3                   	ret    

c000e550 <KeLoadSystemEnv()>:
c000e550:	53                   	push   ebx
c000e551:	83 ec 14             	sub    esp,0x14
c000e554:	6a 0c                	push   0xc
c000e556:	e8 59 11 00 00       	call   c000f6b4 <malloc>
c000e55b:	89 c3                	mov    ebx,eax
c000e55d:	58                   	pop    eax
c000e55e:	5a                   	pop    edx
c000e55f:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e565:	53                   	push   ebx
c000e566:	e8 71 fe ff ff       	call   c000e3dc <EnvVarContainer::EnvVarContainer(Process*)>
c000e56b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e56e:	89 1d 14 c1 02 c0    	mov    DWORD PTR ds:0xc002c114,ebx
c000e574:	e8 47 fe ff ff       	call   c000e3c0 <EnvVarContainer::__loadSystem()>
c000e579:	83 c4 18             	add    esp,0x18
c000e57c:	5b                   	pop    ebx
c000e57d:	c3                   	ret    

c000e57e <KeLoadUserEnv()>:
c000e57e:	53                   	push   ebx
c000e57f:	83 ec 14             	sub    esp,0x14
c000e582:	6a 0c                	push   0xc
c000e584:	e8 2b 11 00 00       	call   c000f6b4 <malloc>
c000e589:	89 c3                	mov    ebx,eax
c000e58b:	58                   	pop    eax
c000e58c:	5a                   	pop    edx
c000e58d:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e593:	53                   	push   ebx
c000e594:	e8 43 fe ff ff       	call   c000e3dc <EnvVarContainer::EnvVarContainer(Process*)>
c000e599:	89 1d 10 c1 02 c0    	mov    DWORD PTR ds:0xc002c110,ebx
c000e59f:	83 c4 18             	add    esp,0x18
c000e5a2:	5b                   	pop    ebx
c000e5a3:	c3                   	ret    

c000e5a4 <KeFlushEnv()>:
c000e5a4:	c3                   	ret    

c000e5a5 <KeGetProcessTotalEnvCount(Process*)>:
c000e5a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5a9:	8b 15 10 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c110
c000e5af:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e5b5:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e5ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5bc:	03 01                	add    eax,DWORD PTR [ecx]
c000e5be:	85 d2                	test   edx,edx
c000e5c0:	74 02                	je     c000e5c4 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e5c2:	03 02                	add    eax,DWORD PTR [edx]
c000e5c4:	c3                   	ret    

c000e5c5 <KeGetProcessEnvPair(Process*, int)>:
c000e5c5:	57                   	push   edi
c000e5c6:	56                   	push   esi
c000e5c7:	8b 35 10 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c110
c000e5cd:	53                   	push   ebx
c000e5ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5d6:	85 f6                	test   esi,esi
c000e5d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e5dc:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e5e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e5e4:	75 16                	jne    c000e5fc <KeGetProcessEnvPair(Process*, int)+0x37>
c000e5e6:	39 c2                	cmp    edx,eax
c000e5e8:	7c 16                	jl     c000e600 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e5ea:	8b 0d 14 c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c114
c000e5f0:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e5f2:	01 c6                	add    esi,eax
c000e5f4:	39 d6                	cmp    esi,edx
c000e5f6:	7e 3c                	jle    c000e634 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e5f8:	29 c2                	sub    edx,eax
c000e5fa:	eb 04                	jmp    c000e600 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e5fc:	39 c2                	cmp    edx,eax
c000e5fe:	7d 05                	jge    c000e605 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e600:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e603:	eb 20                	jmp    c000e625 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e605:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e607:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e60a:	39 d1                	cmp    ecx,edx
c000e60c:	7e 04                	jle    c000e612 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e60e:	29 c2                	sub    edx,eax
c000e610:	eb 10                	jmp    c000e622 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e612:	8b 35 14 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c114
c000e618:	03 0e                	add    ecx,DWORD PTR [esi]
c000e61a:	39 d1                	cmp    ecx,edx
c000e61c:	7e 16                	jle    c000e634 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e61e:	29 c2                	sub    edx,eax
c000e620:	29 fa                	sub    edx,edi
c000e622:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e625:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e628:	8b 02                	mov    eax,DWORD PTR [edx]
c000e62a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e62d:	89 03                	mov    DWORD PTR [ebx],eax
c000e62f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e632:	eb 1d                	jmp    c000e651 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e634:	83 ec 0c             	sub    esp,0xc
c000e637:	68 ca 3d 02 c0       	push   0xc0023dca
c000e63c:	e8 cf 14 00 00       	call   c000fb10 <KePanic(char const*)>
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e64a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e651:	89 d8                	mov    eax,ebx
c000e653:	5b                   	pop    ebx
c000e654:	5e                   	pop    esi
c000e655:	5f                   	pop    edi
c000e656:	c2 04 00             	ret    0x4
c000e659:	66 90                	xchg   ax,ax
c000e65b:	90                   	nop

c000e65c <KeDisplayProgramFault(char const*)>:
c000e65c:	83 ec 0c             	sub    esp,0xc
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e666:	e8 fb 88 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e66b:	83 c4 10             	add    esp,0x10
c000e66e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e673:	8b 00                	mov    eax,DWORD PTR [eax]
c000e675:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e678:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e67e:	85 c0                	test   eax,eax
c000e680:	74 22                	je     c000e6a4 <KeDisplayProgramFault(char const*)+0x48>
c000e682:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e687:	8b 00                	mov    eax,DWORD PTR [eax]
c000e689:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e68c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e692:	6a 04                	push   0x4
c000e694:	6a 0f                	push   0xf
c000e696:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e69a:	50                   	push   eax
c000e69b:	e8 c2 3e 00 00       	call   c0012562 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	90                   	nop
c000e6a4:	90                   	nop
c000e6a5:	83 c4 0c             	add    esp,0xc
c000e6a8:	c3                   	ret    
c000e6a9:	8d 76 00             	lea    esi,[esi+0x0]

c000e6ac <KeGeneralProtectionFault(void*, void*)>:
c000e6ac:	83 ec 0c             	sub    esp,0xc
c000e6af:	83 ec 08             	sub    esp,0x8
c000e6b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6ba:	e8 df b3 00 00       	call   c0019a9e <HalHandleGeneralProtectionFault(void*, void*)>
c000e6bf:	83 c4 10             	add    esp,0x10
c000e6c2:	0f b6 c0             	movzx  eax,al
c000e6c5:	85 c0                	test   eax,eax
c000e6c7:	75 2f                	jne    c000e6f8 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e6c9:	83 ec 0c             	sub    esp,0xc
c000e6cc:	68 e4 3d 02 c0       	push   0xc0023de4
c000e6d1:	e8 86 ff ff ff       	call   c000e65c <KeDisplayProgramFault(char const*)>
c000e6d6:	83 c4 10             	add    esp,0x10
c000e6d9:	83 ec 0c             	sub    esp,0xc
c000e6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6e0:	e8 1d b5 00 00       	call   c0019c02 <HalDisplayDebugInfo(void*)>
c000e6e5:	83 c4 10             	add    esp,0x10
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	6a 7e                	push   0x7e
c000e6ed:	e8 46 8d 00 00       	call   c0017438 <KeTerminateCurrentThread(int)>
c000e6f2:	83 c4 10             	add    esp,0x10
c000e6f5:	eb 05                	jmp    c000e6fc <KeGeneralProtectionFault(void*, void*)+0x50>
c000e6f7:	90                   	nop
c000e6f8:	90                   	nop
c000e6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6fc:	83 c4 0c             	add    esp,0xc
c000e6ff:	c3                   	ret    

c000e700 <KePageFault(void*, void*)>:
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	83 ec 08             	sub    esp,0x8
c000e706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e70a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e70e:	e8 7e b4 00 00       	call   c0019b91 <HalHandlePageFault(void*, void*)>
c000e713:	83 c4 10             	add    esp,0x10
c000e716:	0f b6 c0             	movzx  eax,al
c000e719:	85 c0                	test   eax,eax
c000e71b:	75 2f                	jne    c000e74c <KePageFault(void*, void*)+0x4c>
c000e71d:	83 ec 0c             	sub    esp,0xc
c000e720:	68 fd 3d 02 c0       	push   0xc0023dfd
c000e725:	e8 32 ff ff ff       	call   c000e65c <KeDisplayProgramFault(char const*)>
c000e72a:	83 c4 10             	add    esp,0x10
c000e72d:	83 ec 0c             	sub    esp,0xc
c000e730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e734:	e8 c9 b4 00 00       	call   c0019c02 <HalDisplayDebugInfo(void*)>
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	83 ec 0c             	sub    esp,0xc
c000e73f:	6a 7f                	push   0x7f
c000e741:	e8 f2 8c 00 00       	call   c0017438 <KeTerminateCurrentThread(int)>
c000e746:	83 c4 10             	add    esp,0x10
c000e749:	eb 05                	jmp    c000e750 <KePageFault(void*, void*)+0x50>
c000e74b:	90                   	nop
c000e74c:	90                   	nop
c000e74d:	8d 76 00             	lea    esi,[esi+0x0]
c000e750:	83 c4 0c             	add    esp,0xc
c000e753:	c3                   	ret    

c000e754 <KeOpcodeFault(void*, void*)>:
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	83 ec 08             	sub    esp,0x8
c000e75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e762:	e8 59 b4 00 00       	call   c0019bc0 <HalHandleOpcodeFault(void*, void*)>
c000e767:	83 c4 10             	add    esp,0x10
c000e76a:	0f b6 c0             	movzx  eax,al
c000e76d:	85 c0                	test   eax,eax
c000e76f:	75 2f                	jne    c000e7a0 <KeOpcodeFault(void*, void*)+0x4c>
c000e771:	83 ec 0c             	sub    esp,0xc
c000e774:	68 08 3e 02 c0       	push   0xc0023e08
c000e779:	e8 de fe ff ff       	call   c000e65c <KeDisplayProgramFault(char const*)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	83 ec 0c             	sub    esp,0xc
c000e784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e788:	e8 75 b4 00 00       	call   c0019c02 <HalDisplayDebugInfo(void*)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	6a 7c                	push   0x7c
c000e795:	e8 9e 8c 00 00       	call   c0017438 <KeTerminateCurrentThread(int)>
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	eb 05                	jmp    c000e7a4 <KeOpcodeFault(void*, void*)+0x50>
c000e79f:	90                   	nop
c000e7a0:	90                   	nop
c000e7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7a4:	83 c4 0c             	add    esp,0xc
c000e7a7:	c3                   	ret    

c000e7a8 <KeOtherFault(void*, void*)>:
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	83 ec 0c             	sub    esp,0xc
c000e7ae:	68 24 3e 02 c0       	push   0xc0023e24
c000e7b3:	e8 a4 fe ff ff       	call   c000e65c <KeDisplayProgramFault(char const*)>
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	83 ec 0c             	sub    esp,0xc
c000e7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7c2:	e8 3b b4 00 00       	call   c0019c02 <HalDisplayDebugInfo(void*)>
c000e7c7:	83 c4 10             	add    esp,0x10
c000e7ca:	83 ec 0c             	sub    esp,0xc
c000e7cd:	6a 7d                	push   0x7d
c000e7cf:	e8 64 8c 00 00       	call   c0017438 <KeTerminateCurrentThread(int)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	90                   	nop
c000e7d8:	83 c4 0c             	add    esp,0xc
c000e7db:	c3                   	ret    

c000e7dc <KeNonMaskableInterrupt(void*, void*)>:
c000e7dc:	83 ec 0c             	sub    esp,0xc
c000e7df:	e8 ac b7 00 00       	call   c0019f90 <HalReceivedNMI()>
c000e7e4:	90                   	nop
c000e7e5:	83 c4 0c             	add    esp,0xc
c000e7e8:	c3                   	ret    
c000e7e9:	8d 76 00             	lea    esi,[esi+0x0]

c000e7ec <KeDoubleFault(void*, void*)>:
c000e7ec:	83 ec 0c             	sub    esp,0xc
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	68 15 3e 02 c0       	push   0xc0023e15
c000e7f7:	e8 14 13 00 00       	call   c000fb10 <KePanic(char const*)>
c000e7fc:	83 c4 10             	add    esp,0x10
c000e7ff:	90                   	nop
c000e800:	83 c4 0c             	add    esp,0xc
c000e803:	c3                   	ret    

c000e804 <GDTEntry::setBase(unsigned int)>:
c000e804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e808:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e80c:	89 c1                	mov    ecx,eax
c000e80e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e812:	c1 e9 10             	shr    ecx,0x10
c000e815:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e818:	c1 e8 18             	shr    eax,0x18
c000e81b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e81e:	c3                   	ret    
c000e81f:	90                   	nop

c000e820 <GDTEntry::setLimit(unsigned int)>:
c000e820:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e828:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e82b:	66 89 01             	mov    WORD PTR [ecx],ax
c000e82e:	c1 e8 10             	shr    eax,0x10
c000e831:	83 e0 0f             	and    eax,0xf
c000e834:	83 e2 f0             	and    edx,0xfffffff0
c000e837:	09 d0                	or     eax,edx
c000e839:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e83c:	c3                   	ret    
c000e83d:	90                   	nop

c000e83e <GDT::GDT()>:
c000e83e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e842:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e84c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e852:	90                   	nop
c000e853:	c3                   	ret    

c000e854 <GDT::addEntry(GDTEntry)>:
c000e854:	53                   	push   ebx
c000e855:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e859:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e85d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e861:	8b 02                	mov    eax,DWORD PTR [edx]
c000e863:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e867:	8d 48 01             	lea    ecx,[eax+0x1]
c000e86a:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e86e:	c1 e0 03             	shl    eax,0x3
c000e871:	89 0a                	mov    DWORD PTR [edx],ecx
c000e873:	5b                   	pop    ebx
c000e874:	c3                   	ret    
c000e875:	90                   	nop

c000e876 <GDT::getNumberOfEntries()>:
c000e876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e87a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e87c:	c3                   	ret    
c000e87d:	90                   	nop

c000e87e <GDT::flush()>:
c000e87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e882:	8b 10                	mov    edx,DWORD PTR [eax]
c000e884:	83 c0 04             	add    eax,0x4
c000e887:	a3 1a c1 02 c0       	mov    ds:0xc002c11a,eax
c000e88c:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e893:	66 89 15 18 c1 02 c0 	mov    WORD PTR ds:0xc002c118,dx
c000e89a:	e9 bb 1a ff ff       	jmp    c000035a <loadGDT>
c000e89f:	90                   	nop

c000e8a0 <GDT::setup()>:
c000e8a0:	57                   	push   edi
c000e8a1:	56                   	push   esi
c000e8a2:	53                   	push   ebx
c000e8a3:	83 ec 30             	sub    esp,0x30
c000e8a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e8aa:	6a 00                	push   0x0
c000e8ac:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e8b0:	56                   	push   esi
c000e8b1:	e8 4e ff ff ff       	call   c000e804 <GDTEntry::setBase(unsigned int)>
c000e8b6:	6a 00                	push   0x0
c000e8b8:	56                   	push   esi
c000e8b9:	e8 62 ff ff ff       	call   c000e820 <GDTEntry::setLimit(unsigned int)>
c000e8be:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e8c6:	6a 00                	push   0x0
c000e8c8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e8cc:	56                   	push   esi
c000e8cd:	e8 32 ff ff ff       	call   c000e804 <GDTEntry::setBase(unsigned int)>
c000e8d2:	68 ff ff ff 00       	push   0xffffff
c000e8d7:	56                   	push   esi
c000e8d8:	e8 43 ff ff ff       	call   c000e820 <GDTEntry::setLimit(unsigned int)>
c000e8dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8e5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e8ea:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e8ee:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e8f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e8f7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e8fb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e8ff:	89 f8                	mov    eax,edi
c000e901:	89 fa                	mov    edx,edi
c000e903:	80 e4 f7             	and    ah,0xf7
c000e906:	80 ce 60             	or     dh,0x60
c000e909:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e90d:	89 c7                	mov    edi,eax
c000e90f:	80 cc 60             	or     ah,0x60
c000e912:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e916:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e91a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e91e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e922:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e926:	83 c4 20             	add    esp,0x20
c000e929:	6a 00                	push   0x0
c000e92b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e92f:	50                   	push   eax
c000e930:	e8 cf fe ff ff       	call   c000e804 <GDTEntry::setBase(unsigned int)>
c000e935:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e939:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e93d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e941:	83 e0 3f             	and    eax,0x3f
c000e944:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e948:	6a 00                	push   0x0
c000e94a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e94e:	50                   	push   eax
c000e94f:	e8 b0 fe ff ff       	call   c000e804 <GDTEntry::setBase(unsigned int)>
c000e954:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e958:	83 e0 3f             	and    eax,0x3f
c000e95b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e95f:	83 c4 0c             	add    esp,0xc
c000e962:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e966:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e96a:	53                   	push   ebx
c000e96b:	e8 e4 fe ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c000e970:	83 c4 0c             	add    esp,0xc
c000e973:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e977:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e97b:	53                   	push   ebx
c000e97c:	e8 d3 fe ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c000e981:	83 c4 0c             	add    esp,0xc
c000e984:	57                   	push   edi
c000e985:	56                   	push   esi
c000e986:	53                   	push   ebx
c000e987:	e8 c8 fe ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c000e98c:	83 c4 0c             	add    esp,0xc
c000e98f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e993:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e997:	53                   	push   ebx
c000e998:	e8 b7 fe ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c000e99d:	83 c4 0c             	add    esp,0xc
c000e9a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9a8:	53                   	push   ebx
c000e9a9:	e8 a6 fe ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c000e9ae:	83 c4 0c             	add    esp,0xc
c000e9b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e9b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e9b9:	53                   	push   ebx
c000e9ba:	e8 95 fe ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c000e9bf:	83 c4 0c             	add    esp,0xc
c000e9c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e9c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e9ca:	53                   	push   ebx
c000e9cb:	e8 84 fe ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c000e9d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e9d3:	e8 a6 fe ff ff       	call   c000e87e <GDT::flush()>
c000e9d8:	83 c4 40             	add    esp,0x40
c000e9db:	5b                   	pop    ebx
c000e9dc:	5e                   	pop    esi
c000e9dd:	5f                   	pop    edi
c000e9de:	c3                   	ret    

c000e9df <idleFunction(void*)>:
c000e9df:	83 ec 0c             	sub    esp,0xc
c000e9e2:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000e9e9:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000e9f0:	75 01                	jne    c000e9f3 <idleFunction(void*)+0x14>
c000e9f2:	fb                   	sti    
c000e9f3:	e8 33 b6 00 00       	call   c001a02b <HalSystemIdle()>
c000e9f8:	e8 69 35 01 00       	call   c0021f66 <idleCommon()>
c000e9fd:	eb f4                	jmp    c000e9f3 <idleFunction(void*)+0x14>
c000e9ff:	90                   	nop

c000ea00 <IDTEntry::IDTEntry(bool)>:
c000ea00:	53                   	push   ebx
c000ea01:	83 ec 04             	sub    esp,0x4
c000ea04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea08:	88 04 24             	mov    BYTE PTR [esp],al
c000ea0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea0f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ea15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea19:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ea1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea21:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea24:	83 e2 f0             	and    edx,0xfffffff0
c000ea27:	83 ca 0e             	or     edx,0xe
c000ea2a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea31:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea34:	83 e2 ef             	and    edx,0xffffffef
c000ea37:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea3a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ea3e:	85 c0                	test   eax,eax
c000ea40:	74 06                	je     c000ea48 <IDTEntry::IDTEntry(bool)+0x48>
c000ea42:	b2 03                	mov    dl,0x3
c000ea44:	eb 06                	jmp    c000ea4c <IDTEntry::IDTEntry(bool)+0x4c>
c000ea46:	66 90                	xchg   ax,ax
c000ea48:	b2 00                	mov    dl,0x0
c000ea4a:	66 90                	xchg   ax,ax
c000ea4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea50:	83 e2 03             	and    edx,0x3
c000ea53:	89 d3                	mov    ebx,edx
c000ea55:	c1 e3 05             	shl    ebx,0x5
c000ea58:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea5b:	83 e2 9f             	and    edx,0xffffff9f
c000ea5e:	88 d1                	mov    cl,dl
c000ea60:	88 da                	mov    dl,bl
c000ea62:	09 ca                	or     edx,ecx
c000ea64:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea6b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea6e:	83 ca 80             	or     edx,0xffffff80
c000ea71:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea74:	90                   	nop
c000ea75:	83 c4 04             	add    esp,0x4
c000ea78:	5b                   	pop    ebx
c000ea79:	c3                   	ret    

c000ea7a <IDTEntry::setOffset(unsigned int)>:
c000ea7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ea7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea82:	66 89 02             	mov    WORD PTR [edx],ax
c000ea85:	c1 e8 10             	shr    eax,0x10
c000ea88:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ea8c:	c3                   	ret    
c000ea8d:	90                   	nop
c000ea8e:	66 90                	xchg   ax,ax

c000ea90 <IDT::IDT()>:
c000ea90:	90                   	nop
c000ea91:	c3                   	ret    

c000ea92 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ea92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea96:	83 c0 30             	add    eax,0x30
c000ea99:	c3                   	ret    

c000ea9a <IDT::addEntry(IDTEntry, int)>:
c000ea9a:	53                   	push   ebx
c000ea9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eaa3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eaab:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eaae:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eab2:	5b                   	pop    ebx
c000eab3:	c3                   	ret    

c000eab4 <IDT::addEntry(int, void (*)(), bool)>:
c000eab4:	53                   	push   ebx
c000eab5:	83 ec 10             	sub    esp,0x10
c000eab8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eabd:	50                   	push   eax
c000eabe:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eac2:	53                   	push   ebx
c000eac3:	e8 38 ff ff ff       	call   c000ea00 <IDTEntry::IDTEntry(bool)>
c000eac8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eacc:	53                   	push   ebx
c000eacd:	e8 a8 ff ff ff       	call   c000ea7a <IDTEntry::setOffset(unsigned int)>
c000ead2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ead6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eada:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eade:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eae2:	e8 b3 ff ff ff       	call   c000ea9a <IDT::addEntry(IDTEntry, int)>
c000eae7:	83 c4 30             	add    esp,0x30
c000eaea:	5b                   	pop    ebx
c000eaeb:	c3                   	ret    

c000eaec <IDT::flush()>:
c000eaec:	66 c7 05 20 c1 02 c0 ff 07 	mov    WORD PTR ds:0xc002c120,0x7ff
c000eaf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf9:	a3 22 c1 02 c0       	mov    ds:0xc002c122,eax
c000eafe:	0f 01 1d 20 c1 02 c0 	lidtd  ds:0xc002c120
c000eb05:	c3                   	ret    

c000eb06 <IDT::setup()>:
c000eb06:	57                   	push   edi
c000eb07:	56                   	push   esi
c000eb08:	53                   	push   ebx
c000eb09:	83 ec 10             	sub    esp,0x10
c000eb0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000eb10:	6a 00                	push   0x0
c000eb12:	68 40 12 02 c0       	push   0xc0021240
c000eb17:	6a 00                	push   0x0
c000eb19:	53                   	push   ebx
c000eb1a:	e8 95 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb1f:	6a 00                	push   0x0
c000eb21:	68 50 12 02 c0       	push   0xc0021250
c000eb26:	6a 01                	push   0x1
c000eb28:	53                   	push   ebx
c000eb29:	e8 86 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb2e:	83 c4 20             	add    esp,0x20
c000eb31:	6a 00                	push   0x0
c000eb33:	68 5a 12 02 c0       	push   0xc002125a
c000eb38:	6a 02                	push   0x2
c000eb3a:	53                   	push   ebx
c000eb3b:	e8 74 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb40:	6a 00                	push   0x0
c000eb42:	68 64 12 02 c0       	push   0xc0021264
c000eb47:	6a 03                	push   0x3
c000eb49:	53                   	push   ebx
c000eb4a:	e8 65 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb4f:	83 c4 20             	add    esp,0x20
c000eb52:	6a 00                	push   0x0
c000eb54:	68 6e 12 02 c0       	push   0xc002126e
c000eb59:	6a 04                	push   0x4
c000eb5b:	53                   	push   ebx
c000eb5c:	e8 53 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb61:	6a 00                	push   0x0
c000eb63:	68 78 12 02 c0       	push   0xc0021278
c000eb68:	6a 05                	push   0x5
c000eb6a:	53                   	push   ebx
c000eb6b:	e8 44 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb70:	83 c4 20             	add    esp,0x20
c000eb73:	6a 00                	push   0x0
c000eb75:	68 82 12 02 c0       	push   0xc0021282
c000eb7a:	6a 06                	push   0x6
c000eb7c:	53                   	push   ebx
c000eb7d:	e8 32 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb82:	6a 00                	push   0x0
c000eb84:	68 8c 12 02 c0       	push   0xc002128c
c000eb89:	6a 07                	push   0x7
c000eb8b:	53                   	push   ebx
c000eb8c:	e8 23 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eb91:	83 c4 20             	add    esp,0x20
c000eb94:	6a 00                	push   0x0
c000eb96:	68 96 12 02 c0       	push   0xc0021296
c000eb9b:	6a 08                	push   0x8
c000eb9d:	53                   	push   ebx
c000eb9e:	e8 11 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eba3:	6a 00                	push   0x0
c000eba5:	68 9e 12 02 c0       	push   0xc002129e
c000ebaa:	6a 09                	push   0x9
c000ebac:	53                   	push   ebx
c000ebad:	e8 02 ff ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ebb2:	83 c4 20             	add    esp,0x20
c000ebb5:	6a 00                	push   0x0
c000ebb7:	68 a8 12 02 c0       	push   0xc00212a8
c000ebbc:	6a 0a                	push   0xa
c000ebbe:	53                   	push   ebx
c000ebbf:	e8 f0 fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ebc4:	6a 00                	push   0x0
c000ebc6:	68 b0 12 02 c0       	push   0xc00212b0
c000ebcb:	6a 0b                	push   0xb
c000ebcd:	53                   	push   ebx
c000ebce:	e8 e1 fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ebd3:	83 c4 20             	add    esp,0x20
c000ebd6:	6a 00                	push   0x0
c000ebd8:	68 b8 12 02 c0       	push   0xc00212b8
c000ebdd:	6a 0c                	push   0xc
c000ebdf:	53                   	push   ebx
c000ebe0:	e8 cf fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ebe5:	6a 00                	push   0x0
c000ebe7:	68 c0 12 02 c0       	push   0xc00212c0
c000ebec:	6a 0d                	push   0xd
c000ebee:	53                   	push   ebx
c000ebef:	e8 c0 fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ebf4:	83 c4 20             	add    esp,0x20
c000ebf7:	6a 00                	push   0x0
c000ebf9:	68 da 12 02 c0       	push   0xc00212da
c000ebfe:	6a 0e                	push   0xe
c000ec00:	53                   	push   ebx
c000ec01:	e8 ae fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec06:	6a 00                	push   0x0
c000ec08:	68 e2 12 02 c0       	push   0xc00212e2
c000ec0d:	6a 0f                	push   0xf
c000ec0f:	53                   	push   ebx
c000ec10:	e8 9f fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec15:	83 c4 20             	add    esp,0x20
c000ec18:	6a 00                	push   0x0
c000ec1a:	68 ec 12 02 c0       	push   0xc00212ec
c000ec1f:	6a 10                	push   0x10
c000ec21:	53                   	push   ebx
c000ec22:	e8 8d fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec27:	6a 00                	push   0x0
c000ec29:	68 f6 12 02 c0       	push   0xc00212f6
c000ec2e:	6a 11                	push   0x11
c000ec30:	53                   	push   ebx
c000ec31:	e8 7e fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec36:	83 c4 20             	add    esp,0x20
c000ec39:	6a 00                	push   0x0
c000ec3b:	68 00 13 02 c0       	push   0xc0021300
c000ec40:	6a 12                	push   0x12
c000ec42:	53                   	push   ebx
c000ec43:	e8 6c fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec48:	6a 01                	push   0x1
c000ec4a:	68 9a 13 02 c0       	push   0xc002139a
c000ec4f:	6a 60                	push   0x60
c000ec51:	53                   	push   ebx
c000ec52:	e8 5d fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec57:	83 c4 20             	add    esp,0x20
c000ec5a:	6a 00                	push   0x0
c000ec5c:	68 a1 13 02 c0       	push   0xc00213a1
c000ec61:	6a 20                	push   0x20
c000ec63:	53                   	push   ebx
c000ec64:	e8 4b fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec69:	6a 00                	push   0x0
c000ec6b:	68 8c 13 02 c0       	push   0xc002138c
c000ec70:	6a 21                	push   0x21
c000ec72:	53                   	push   ebx
c000ec73:	e8 3c fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec78:	83 c4 20             	add    esp,0x20
c000ec7b:	6a 00                	push   0x0
c000ec7d:	68 93 13 02 c0       	push   0xc0021393
c000ec82:	6a 22                	push   0x22
c000ec84:	53                   	push   ebx
c000ec85:	e8 2a fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec8a:	6a 00                	push   0x0
c000ec8c:	68 0a 13 02 c0       	push   0xc002130a
c000ec91:	6a 23                	push   0x23
c000ec93:	53                   	push   ebx
c000ec94:	e8 1b fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ec99:	83 c4 20             	add    esp,0x20
c000ec9c:	6a 00                	push   0x0
c000ec9e:	68 14 13 02 c0       	push   0xc0021314
c000eca3:	6a 24                	push   0x24
c000eca5:	53                   	push   ebx
c000eca6:	e8 09 fe ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ecab:	6a 00                	push   0x0
c000ecad:	68 1e 13 02 c0       	push   0xc002131e
c000ecb2:	6a 25                	push   0x25
c000ecb4:	53                   	push   ebx
c000ecb5:	e8 fa fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ecba:	83 c4 20             	add    esp,0x20
c000ecbd:	6a 00                	push   0x0
c000ecbf:	68 28 13 02 c0       	push   0xc0021328
c000ecc4:	6a 26                	push   0x26
c000ecc6:	53                   	push   ebx
c000ecc7:	e8 e8 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eccc:	6a 00                	push   0x0
c000ecce:	68 32 13 02 c0       	push   0xc0021332
c000ecd3:	6a 27                	push   0x27
c000ecd5:	53                   	push   ebx
c000ecd6:	e8 d9 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ecdb:	83 c4 20             	add    esp,0x20
c000ecde:	6a 00                	push   0x0
c000ece0:	68 3c 13 02 c0       	push   0xc002133c
c000ece5:	6a 28                	push   0x28
c000ece7:	53                   	push   ebx
c000ece8:	e8 c7 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eced:	6a 00                	push   0x0
c000ecef:	68 46 13 02 c0       	push   0xc0021346
c000ecf4:	6a 29                	push   0x29
c000ecf6:	53                   	push   ebx
c000ecf7:	e8 b8 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ecfc:	83 c4 20             	add    esp,0x20
c000ecff:	6a 00                	push   0x0
c000ed01:	68 50 13 02 c0       	push   0xc0021350
c000ed06:	6a 2a                	push   0x2a
c000ed08:	53                   	push   ebx
c000ed09:	e8 a6 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed0e:	6a 00                	push   0x0
c000ed10:	68 5a 13 02 c0       	push   0xc002135a
c000ed15:	6a 2b                	push   0x2b
c000ed17:	53                   	push   ebx
c000ed18:	e8 97 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed1d:	83 c4 20             	add    esp,0x20
c000ed20:	6a 00                	push   0x0
c000ed22:	68 64 13 02 c0       	push   0xc0021364
c000ed27:	6a 2c                	push   0x2c
c000ed29:	53                   	push   ebx
c000ed2a:	e8 85 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed2f:	6a 00                	push   0x0
c000ed31:	68 6e 13 02 c0       	push   0xc002136e
c000ed36:	6a 2d                	push   0x2d
c000ed38:	53                   	push   ebx
c000ed39:	e8 76 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed3e:	83 c4 20             	add    esp,0x20
c000ed41:	6a 00                	push   0x0
c000ed43:	68 78 13 02 c0       	push   0xc0021378
c000ed48:	6a 2e                	push   0x2e
c000ed4a:	53                   	push   ebx
c000ed4b:	e8 64 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed50:	6a 00                	push   0x0
c000ed52:	68 82 13 02 c0       	push   0xc0021382
c000ed57:	6a 2f                	push   0x2f
c000ed59:	53                   	push   ebx
c000ed5a:	e8 55 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed5f:	83 c4 20             	add    esp,0x20
c000ed62:	6a 00                	push   0x0
c000ed64:	68 a4 14 02 c0       	push   0xc00214a4
c000ed69:	6a 30                	push   0x30
c000ed6b:	53                   	push   ebx
c000ed6c:	e8 43 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed71:	6a 00                	push   0x0
c000ed73:	68 ae 14 02 c0       	push   0xc00214ae
c000ed78:	6a 31                	push   0x31
c000ed7a:	53                   	push   ebx
c000ed7b:	e8 34 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed80:	83 c4 20             	add    esp,0x20
c000ed83:	6a 00                	push   0x0
c000ed85:	68 b8 14 02 c0       	push   0xc00214b8
c000ed8a:	6a 32                	push   0x32
c000ed8c:	53                   	push   ebx
c000ed8d:	e8 22 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ed92:	6a 00                	push   0x0
c000ed94:	68 c2 14 02 c0       	push   0xc00214c2
c000ed99:	6a 33                	push   0x33
c000ed9b:	53                   	push   ebx
c000ed9c:	e8 13 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000eda1:	83 c4 20             	add    esp,0x20
c000eda4:	6a 00                	push   0x0
c000eda6:	68 cc 14 02 c0       	push   0xc00214cc
c000edab:	6a 34                	push   0x34
c000edad:	53                   	push   ebx
c000edae:	e8 01 fd ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000edb3:	6a 00                	push   0x0
c000edb5:	68 d6 14 02 c0       	push   0xc00214d6
c000edba:	6a 35                	push   0x35
c000edbc:	53                   	push   ebx
c000edbd:	e8 f2 fc ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000edc2:	83 c4 20             	add    esp,0x20
c000edc5:	6a 00                	push   0x0
c000edc7:	68 e0 14 02 c0       	push   0xc00214e0
c000edcc:	6a 36                	push   0x36
c000edce:	53                   	push   ebx
c000edcf:	e8 e0 fc ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000edd4:	6a 00                	push   0x0
c000edd6:	68 ea 14 02 c0       	push   0xc00214ea
c000eddb:	6a 37                	push   0x37
c000eddd:	53                   	push   ebx
c000edde:	e8 d1 fc ff ff       	call   c000eab4 <IDT::addEntry(int, void (*)(), bool)>
c000ede3:	83 c4 1c             	add    esp,0x1c
c000ede6:	6a 03                	push   0x3
c000ede8:	6a 02                	push   0x2
c000edea:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000edf0:	e8 e7 4a 00 00       	call   c00138dc <VAS::allocatePages(int, int)>
c000edf5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000edfc:	89 c6                	mov    esi,eax
c000edfe:	e8 b1 08 00 00       	call   c000f6b4 <malloc>
c000ee03:	81 c6 00 20 00 00    	add    esi,0x2000
c000ee09:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee0c:	89 c7                	mov    edi,eax
c000ee0e:	e8 99 3b 00 00       	call   c00129ac <TSS::TSS()>
c000ee13:	83 c4 0c             	add    esp,0xc
c000ee16:	68 96 12 02 c0       	push   0xc0021296
c000ee1b:	56                   	push   esi
c000ee1c:	57                   	push   edi
c000ee1d:	e8 ce 3b 00 00       	call   c00129f0 <TSS::setup(unsigned long, unsigned long)>
c000ee22:	89 c6                	mov    esi,eax
c000ee24:	58                   	pop    eax
c000ee25:	5a                   	pop    edx
c000ee26:	6a 00                	push   0x0
c000ee28:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ee2c:	50                   	push   eax
c000ee2d:	e8 ce fb ff ff       	call   c000ea00 <IDTEntry::IDTEntry(bool)>
c000ee32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee36:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ee3b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ee42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee46:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ee4c:	80 ce 05             	or     dh,0x5
c000ee4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ee53:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ee56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee5a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ee5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee60:	e8 87 fc ff ff       	call   c000eaec <IDT::flush()>
c000ee65:	83 c4 20             	add    esp,0x20
c000ee68:	5b                   	pop    ebx
c000ee69:	5e                   	pop    esi
c000ee6a:	5f                   	pop    edi
c000ee6b:	c3                   	ret    

c000ee6c <CPU::current()>:
c000ee6c:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000ee71:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ee77:	c3                   	ret    

c000ee78 <operator new(unsigned long)>:
c000ee78:	e9 37 08 00 00       	jmp    c000f6b4 <malloc>

c000ee7d <operator delete(void*)>:
c000ee7d:	e9 52 08 00 00       	jmp    c000f6d4 <rfree>

c000ee82 <disableIRQs()>:
c000ee82:	fa                   	cli    
c000ee83:	c3                   	ret    

c000ee84 <enableIRQs()>:
c000ee84:	fb                   	sti    
c000ee85:	c3                   	ret    

c000ee86 <lockScheduler()>:
c000ee86:	fa                   	cli    
c000ee87:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000ee8d:	c3                   	ret    

c000ee8e <unlockScheduler()>:
c000ee8e:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000ee95:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000ee9c:	75 01                	jne    c000ee9f <unlockScheduler()+0x11>
c000ee9e:	fb                   	sti    
c000ee9f:	c3                   	ret    

c000eea0 <lockStuff()>:
c000eea0:	fa                   	cli    
c000eea1:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000eea7:	ff 05 6c ca 02 c0    	inc    DWORD PTR ds:0xc002ca6c
c000eead:	c3                   	ret    

c000eeae <unlockStuff()>:
c000eeae:	83 ec 0c             	sub    esp,0xc
c000eeb1:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000eeb6:	48                   	dec    eax
c000eeb7:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000eebc:	75 18                	jne    c000eed6 <unlockStuff()+0x28>
c000eebe:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c000eec5:	74 0f                	je     c000eed6 <unlockStuff()+0x28>
c000eec7:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000eed1:	e8 6e 7d 00 00       	call   c0016c44 <schedule()>
c000eed6:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000eedd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000eee4:	75 01                	jne    c000eee7 <unlockStuff()+0x39>
c000eee6:	fb                   	sti    
c000eee7:	83 c4 0c             	add    esp,0xc
c000eeea:	c3                   	ret    

c000eeeb <Virt::getAKernelVAS()>:
c000eeeb:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c000eef0:	c3                   	ret    

c000eef1 <__not_memcpy>:
c000eef1:	57                   	push   edi
c000eef2:	56                   	push   esi
c000eef3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eef7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eefb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeff:	89 c7                	mov    edi,eax
c000ef01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef03:	5e                   	pop    esi
c000ef04:	5f                   	pop    edi
c000ef05:	c3                   	ret    

c000ef06 <KeFormatDate(char*, int, int, int, int, bool)>:
c000ef06:	55                   	push   ebp
c000ef07:	57                   	push   edi
c000ef08:	56                   	push   esi
c000ef09:	be e8 03 00 00       	mov    esi,0x3e8
c000ef0e:	53                   	push   ebx
c000ef0f:	bb 0a 00 00 00       	mov    ebx,0xa
c000ef14:	81 ec ac 00 00 00    	sub    esp,0xac
c000ef1a:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000ef1f:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000ef26:	89 c8                	mov    eax,ecx
c000ef28:	99                   	cdq    
c000ef29:	f7 fb                	idiv   ebx
c000ef2b:	89 d5                	mov    ebp,edx
c000ef2d:	99                   	cdq    
c000ef2e:	f7 fb                	idiv   ebx
c000ef30:	8d 42 30             	lea    eax,[edx+0x30]
c000ef33:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ef37:	8d 45 30             	lea    eax,[ebp+0x30]
c000ef3a:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000ef42:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000ef46:	89 c8                	mov    eax,ecx
c000ef48:	99                   	cdq    
c000ef49:	f7 fe                	idiv   esi
c000ef4b:	be 64 00 00 00       	mov    esi,0x64
c000ef50:	99                   	cdq    
c000ef51:	f7 fb                	idiv   ebx
c000ef53:	8d 42 30             	lea    eax,[edx+0x30]
c000ef56:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000ef5a:	89 c8                	mov    eax,ecx
c000ef5c:	99                   	cdq    
c000ef5d:	f7 fe                	idiv   esi
c000ef5f:	99                   	cdq    
c000ef60:	f7 fb                	idiv   ebx
c000ef62:	31 db                	xor    ebx,ebx
c000ef64:	8d 42 30             	lea    eax,[edx+0x30]
c000ef67:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ef6b:	0f be 8b 44 c1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd3ebc]
c000ef72:	83 f9 59             	cmp    ecx,0x59
c000ef75:	0f 84 1f 01 00 00    	je     c000f09a <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000ef7b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ef7f:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000ef86:	83 f9 4d             	cmp    ecx,0x4d
c000ef89:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000ef91:	57                   	push   edi
c000ef92:	57                   	push   edi
c000ef93:	89 d7                	mov    edi,edx
c000ef95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ef99:	c1 ff 1f             	sar    edi,0x1f
c000ef9c:	57                   	push   edi
c000ef9d:	52                   	push   edx
c000ef9e:	e8 6d 04 00 00       	call   c000f410 <KeGetDigitsInNumber(long long)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efaa:	48                   	dec    eax
c000efab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000efaf:	75 1c                	jne    c000efcd <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000efb1:	83 f9 44             	cmp    ecx,0x44
c000efb4:	75 09                	jne    c000efbf <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000efb6:	80 3d 60 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c160,0x0
c000efbd:	eb 0c                	jmp    c000efcb <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000efbf:	83 f9 4d             	cmp    ecx,0x4d
c000efc2:	75 60                	jne    c000f024 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000efc4:	80 3d 61 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c161,0x0
c000efcb:	74 57                	je     c000f024 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000efcd:	89 d0                	mov    eax,edx
c000efcf:	b9 0a 00 00 00       	mov    ecx,0xa
c000efd4:	99                   	cdq    
c000efd5:	f7 f9                	idiv   ecx
c000efd7:	89 d6                	mov    esi,edx
c000efd9:	99                   	cdq    
c000efda:	f7 f9                	idiv   ecx
c000efdc:	83 c2 30             	add    edx,0x30
c000efdf:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000efe3:	8d 56 30             	lea    edx,[esi+0x30]
c000efe6:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000efea:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000efef:	56                   	push   esi
c000eff0:	56                   	push   esi
c000eff1:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000eff5:	57                   	push   edi
c000eff6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000effa:	56                   	push   esi
c000effb:	e8 70 18 ff ff       	call   c0000870 <strcat>
c000f000:	83 c4 10             	add    esp,0x10
c000f003:	83 fb 02             	cmp    ebx,0x2
c000f006:	74 34                	je     c000f03c <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f008:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f00d:	a0 48 c1 02 c0       	mov    al,ds:0xc002c148
c000f012:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f016:	51                   	push   ecx
c000f017:	51                   	push   ecx
c000f018:	57                   	push   edi
c000f019:	56                   	push   esi
c000f01a:	e8 51 18 ff ff       	call   c0000870 <strcat>
c000f01f:	83 c4 10             	add    esp,0x10
c000f022:	eb 18                	jmp    c000f03c <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f024:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f029:	89 d0                	mov    eax,edx
c000f02b:	b9 0a 00 00 00       	mov    ecx,0xa
c000f030:	99                   	cdq    
c000f031:	f7 f9                	idiv   ecx
c000f033:	83 c2 30             	add    edx,0x30
c000f036:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f03a:	eb b3                	jmp    c000efef <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f03c:	43                   	inc    ebx
c000f03d:	83 fb 03             	cmp    ebx,0x3
c000f040:	0f 85 25 ff ff ff    	jne    c000ef6b <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f046:	52                   	push   edx
c000f047:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f04e:	6a 00                	push   0x0
c000f050:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f057:	e8 94 14 ff ff       	call   c00004f0 <memset>
c000f05c:	89 34 24             	mov    DWORD PTR [esp],esi
c000f05f:	e8 1c 15 ff ff       	call   c0000580 <strlen>
c000f064:	83 c4 10             	add    esp,0x10
c000f067:	40                   	inc    eax
c000f068:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f06f:	72 14                	jb     c000f085 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f071:	50                   	push   eax
c000f072:	50                   	push   eax
c000f073:	56                   	push   esi
c000f074:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f07b:	e8 d0 15 ff ff       	call   c0000650 <strcpy>
c000f080:	83 c4 10             	add    esp,0x10
c000f083:	eb 58                	jmp    c000f0dd <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f085:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f08c:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f093:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f096:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f098:	eb 43                	jmp    c000f0dd <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f09a:	85 ed                	test   ebp,ebp
c000f09c:	74 2a                	je     c000f0c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f09e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f0a3:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f0a7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0ab:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f0af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0b3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f0b7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f0bb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f0bf:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f0c3:	e9 27 ff ff ff       	jmp    c000efef <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f0c8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f0cc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0d0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f0d4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0d8:	e9 0d ff ff ff       	jmp    c000efea <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f0dd:	81 c4 ac 00 00 00    	add    esp,0xac
c000f0e3:	5b                   	pop    ebx
c000f0e4:	5e                   	pop    esi
c000f0e5:	5f                   	pop    edi
c000f0e6:	5d                   	pop    ebp
c000f0e7:	c3                   	ret    

c000f0e8 <KeFormatShortDate(char*, int, int, int, int)>:
c000f0e8:	83 ec 14             	sub    esp,0x14
c000f0eb:	6a 00                	push   0x0
c000f0ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f101:	e8 00 fe ff ff       	call   c000ef06 <KeFormatDate(char*, int, int, int, int, bool)>
c000f106:	83 c4 2c             	add    esp,0x2c
c000f109:	c3                   	ret    

c000f10a <KeFormatLongDate(char*, int, int, int, int)>:
c000f10a:	83 ec 14             	sub    esp,0x14
c000f10d:	6a 01                	push   0x1
c000f10f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f113:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f117:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f11b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f11f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f123:	e8 de fd ff ff       	call   c000ef06 <KeFormatDate(char*, int, int, int, int, bool)>
c000f128:	83 c4 2c             	add    esp,0x2c
c000f12b:	c3                   	ret    

c000f12c <KeSetLocale(klocale_t)>:
c000f12c:	57                   	push   edi
c000f12d:	b9 09 00 00 00       	mov    ecx,0x9
c000f132:	56                   	push   esi
c000f133:	bf 40 c1 02 c0       	mov    edi,0xc002c140
c000f138:	fc                   	cld    
c000f139:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f13d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f13f:	5e                   	pop    esi
c000f140:	5f                   	pop    edi
c000f141:	c3                   	ret    

c000f142 <KeInitialiseLocale()>:
c000f142:	57                   	push   edi
c000f143:	56                   	push   esi
c000f144:	83 ec 3c             	sub    esp,0x3c
c000f147:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f14f:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f157:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f15f:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f167:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f16e:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f176:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f17e:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f185:	68 4c 3e 02 c0       	push   0xc0023e4c
c000f18a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f18e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f192:	50                   	push   eax
c000f193:	e8 b8 14 ff ff       	call   c0000650 <strcpy>
c000f198:	83 ec 20             	sub    esp,0x20
c000f19b:	b9 09 00 00 00       	mov    ecx,0x9
c000f1a0:	fc                   	cld    
c000f1a1:	89 e7                	mov    edi,esp
c000f1a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f1a5:	e8 82 ff ff ff       	call   c000f12c <KeSetLocale(klocale_t)>
c000f1aa:	83 c4 64             	add    esp,0x64
c000f1ad:	5e                   	pop    esi
c000f1ae:	5f                   	pop    edi
c000f1af:	c3                   	ret    

c000f1b0 <KeFormatCurrency(char*, int, long long, long long)>:
c000f1b0:	c3                   	ret    

c000f1b1 <KeFormatCurrency(char*, int, double)>:
c000f1b1:	c3                   	ret    

c000f1b2 <KeFormatNumber(char*, long long, long long)>:
c000f1b2:	c3                   	ret    

c000f1b3 <KeFormatNumber(char*, double)>:
c000f1b3:	c3                   	ret    

c000f1b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f1b4:	55                   	push   ebp
c000f1b5:	57                   	push   edi
c000f1b6:	56                   	push   esi
c000f1b7:	53                   	push   ebx
c000f1b8:	83 ec 4c             	sub    esp,0x4c
c000f1bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1c3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f1c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f1cb:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f1d3:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f1db:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f1e3:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f1eb:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f1f0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f1f4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f200:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f204:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f208:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f20d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f211:	89 c2                	mov    edx,eax
c000f213:	c1 fa 1f             	sar    edx,0x1f
c000f216:	52                   	push   edx
c000f217:	50                   	push   eax
c000f218:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f21c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f220:	e8 6f 26 01 00       	call   c0021894 <__udivdi3>
c000f225:	83 c4 10             	add    esp,0x10
c000f228:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f22c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f234:	80 f4 00             	xor    ah,0x0
c000f237:	89 c7                	mov    edi,eax
c000f239:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f23d:	80 f4 00             	xor    ah,0x0
c000f240:	89 c5                	mov    ebp,eax
c000f242:	89 e8                	mov    eax,ebp
c000f244:	09 f8                	or     eax,edi
c000f246:	74 04                	je     c000f24c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f248:	eb be                	jmp    c000f208 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f24a:	66 90                	xchg   ax,ax
c000f24c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f250:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f253:	90                   	nop
c000f254:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f258:	89 c7                	mov    edi,eax
c000f25a:	89 c5                	mov    ebp,eax
c000f25c:	c1 fd 1f             	sar    ebp,0x1f
c000f25f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f263:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f267:	55                   	push   ebp
c000f268:	57                   	push   edi
c000f269:	52                   	push   edx
c000f26a:	50                   	push   eax
c000f26b:	e8 24 27 01 00       	call   c0021994 <__umoddi3>
c000f270:	83 c4 10             	add    esp,0x10
c000f273:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f278:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f27c:	01 c8                	add    eax,ecx
c000f27e:	8a 10                	mov    dl,BYTE PTR [eax]
c000f280:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f284:	88 10                	mov    BYTE PTR [eax],dl
c000f286:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f28a:	89 c2                	mov    edx,eax
c000f28c:	c1 fa 1f             	sar    edx,0x1f
c000f28f:	52                   	push   edx
c000f290:	50                   	push   eax
c000f291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f299:	e8 f6 25 01 00       	call   c0021894 <__udivdi3>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ad:	80 f4 00             	xor    ah,0x0
c000f2b0:	89 c3                	mov    ebx,eax
c000f2b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2b6:	80 f4 00             	xor    ah,0x0
c000f2b9:	89 c6                	mov    esi,eax
c000f2bb:	89 f0                	mov    eax,esi
c000f2bd:	09 d8                	or     eax,ebx
c000f2bf:	74 03                	je     c000f2c4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f2c1:	eb 91                	jmp    c000f254 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f2c3:	90                   	nop
c000f2c4:	90                   	nop
c000f2c5:	83 c4 4c             	add    esp,0x4c
c000f2c8:	5b                   	pop    ebx
c000f2c9:	5e                   	pop    esi
c000f2ca:	5f                   	pop    edi
c000f2cb:	5d                   	pop    ebp
c000f2cc:	c3                   	ret    
c000f2cd:	8d 76 00             	lea    esi,[esi+0x0]

c000f2d0 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f2d0:	55                   	push   ebp
c000f2d1:	57                   	push   edi
c000f2d2:	56                   	push   esi
c000f2d3:	53                   	push   ebx
c000f2d4:	83 ec 4c             	sub    esp,0x4c
c000f2d7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2df:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f2e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2e7:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f2ef:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f2f7:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f2ff:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f307:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f30c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f310:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f319:	79 1d                	jns    c000f338 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f31b:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f31f:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f324:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f328:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f32c:	8d 50 01             	lea    edx,[eax+0x1]
c000f32f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f333:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f336:	66 90                	xchg   ax,ax
c000f338:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f33c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f340:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f344:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f348:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f34d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f351:	89 c2                	mov    edx,eax
c000f353:	c1 fa 1f             	sar    edx,0x1f
c000f356:	52                   	push   edx
c000f357:	50                   	push   eax
c000f358:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f35c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f360:	e8 2f 25 01 00       	call   c0021894 <__udivdi3>
c000f365:	83 c4 10             	add    esp,0x10
c000f368:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f36c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f374:	80 f4 00             	xor    ah,0x0
c000f377:	89 c7                	mov    edi,eax
c000f379:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f37d:	80 f4 00             	xor    ah,0x0
c000f380:	89 c5                	mov    ebp,eax
c000f382:	89 e8                	mov    eax,ebp
c000f384:	09 f8                	or     eax,edi
c000f386:	74 04                	je     c000f38c <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f388:	eb be                	jmp    c000f348 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f38a:	66 90                	xchg   ax,ax
c000f38c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f390:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f393:	90                   	nop
c000f394:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f398:	89 c7                	mov    edi,eax
c000f39a:	89 c5                	mov    ebp,eax
c000f39c:	c1 fd 1f             	sar    ebp,0x1f
c000f39f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f3a7:	55                   	push   ebp
c000f3a8:	57                   	push   edi
c000f3a9:	52                   	push   edx
c000f3aa:	50                   	push   eax
c000f3ab:	e8 64 23 01 00       	call   c0021714 <__moddi3>
c000f3b0:	83 c4 10             	add    esp,0x10
c000f3b3:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f3b8:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f3bc:	01 c8                	add    eax,ecx
c000f3be:	8a 10                	mov    dl,BYTE PTR [eax]
c000f3c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f3c4:	88 10                	mov    BYTE PTR [eax],dl
c000f3c6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f3ca:	89 c2                	mov    edx,eax
c000f3cc:	c1 fa 1f             	sar    edx,0x1f
c000f3cf:	52                   	push   edx
c000f3d0:	50                   	push   eax
c000f3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3d9:	e8 ea 21 01 00       	call   c00215c8 <__divdi3>
c000f3de:	83 c4 10             	add    esp,0x10
c000f3e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3ed:	80 f4 00             	xor    ah,0x0
c000f3f0:	89 c3                	mov    ebx,eax
c000f3f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3f6:	80 f4 00             	xor    ah,0x0
c000f3f9:	89 c6                	mov    esi,eax
c000f3fb:	89 f0                	mov    eax,esi
c000f3fd:	09 d8                	or     eax,ebx
c000f3ff:	74 03                	je     c000f404 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f401:	eb 91                	jmp    c000f394 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f403:	90                   	nop
c000f404:	90                   	nop
c000f405:	83 c4 4c             	add    esp,0x4c
c000f408:	5b                   	pop    ebx
c000f409:	5e                   	pop    esi
c000f40a:	5f                   	pop    edi
c000f40b:	5d                   	pop    ebp
c000f40c:	c3                   	ret    
c000f40d:	8d 76 00             	lea    esi,[esi+0x0]

c000f410 <KeGetDigitsInNumber(long long)>:
c000f410:	56                   	push   esi
c000f411:	53                   	push   ebx
c000f412:	83 ec 24             	sub    esp,0x24
c000f415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f419:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f41d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f425:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f42d:	8d 76 00             	lea    esi,[esi+0x0]
c000f430:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f434:	80 f4 00             	xor    ah,0x0
c000f437:	89 c3                	mov    ebx,eax
c000f439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f43d:	80 f4 00             	xor    ah,0x0
c000f440:	89 c6                	mov    esi,eax
c000f442:	89 f0                	mov    eax,esi
c000f444:	09 d8                	or     eax,ebx
c000f446:	74 28                	je     c000f470 <KeGetDigitsInNumber(long long)+0x60>
c000f448:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f44c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f450:	6a 00                	push   0x0
c000f452:	6a 0a                	push   0xa
c000f454:	52                   	push   edx
c000f455:	50                   	push   eax
c000f456:	e8 6d 21 01 00       	call   c00215c8 <__divdi3>
c000f45b:	83 c4 10             	add    esp,0x10
c000f45e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f462:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f466:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f46b:	eb c3                	jmp    c000f430 <KeGetDigitsInNumber(long long)+0x20>
c000f46d:	8d 76 00             	lea    esi,[esi+0x0]
c000f470:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f474:	83 c4 24             	add    esp,0x24
c000f477:	5b                   	pop    ebx
c000f478:	5e                   	pop    esi
c000f479:	c3                   	ret    
c000f47a:	66 90                	xchg   ax,ax

c000f47c <KeItoa(unsigned long long, char*)>:
c000f47c:	83 ec 1c             	sub    esp,0x1c
c000f47f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f483:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f487:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f48b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f48f:	6a 0a                	push   0xa
c000f491:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f499:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f49d:	e8 12 fd ff ff       	call   c000f1b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	90                   	nop
c000f4a6:	83 c4 1c             	add    esp,0x1c
c000f4a9:	c3                   	ret    
c000f4aa:	66 90                	xchg   ax,ax

c000f4ac <KeItoa(long long, char*)>:
c000f4ac:	83 ec 1c             	sub    esp,0x1c
c000f4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f4b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f4bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4bf:	6a 0a                	push   0xa
c000f4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4cd:	e8 fe fd ff ff       	call   c000f2d0 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	90                   	nop
c000f4d6:	83 c4 1c             	add    esp,0x1c
c000f4d9:	c3                   	ret    
c000f4da:	66 90                	xchg   ax,ax

c000f4dc <KeXtoa(unsigned long long, char*)>:
c000f4dc:	83 ec 1c             	sub    esp,0x1c
c000f4df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f4e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f4eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4ef:	6a 10                	push   0x10
c000f4f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4fd:	e8 b2 fc ff ff       	call   c000f1b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f502:	83 c4 10             	add    esp,0x10
c000f505:	90                   	nop
c000f506:	83 c4 1c             	add    esp,0x1c
c000f509:	c3                   	ret    

c000f50a <sbrk>:
c000f50a:	55                   	push   ebp
c000f50b:	57                   	push   edi
c000f50c:	56                   	push   esi
c000f50d:	53                   	push   ebx
c000f50e:	83 ec 1c             	sub    esp,0x1c
c000f511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f515:	85 c0                	test   eax,eax
c000f517:	74 66                	je     c000f57f <sbrk+0x75>
c000f519:	78 6b                	js     c000f586 <sbrk+0x7c>
c000f51b:	8b 15 50 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026650
c000f521:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f525:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f52b:	05 ff 0f 00 00       	add    eax,0xfff
c000f530:	0f 49 e8             	cmovns ebp,eax
c000f533:	c1 fd 0c             	sar    ebp,0xc
c000f536:	bb 00 00 00 00       	mov    ebx,0x0
c000f53b:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f541:	8b 3d 50 66 02 c0    	mov    edi,DWORD PTR ds:0xc0026650
c000f547:	e8 be 07 00 00       	call   c000fd0a <Phys::allocatePage()>
c000f54c:	68 01 04 00 00       	push   0x401
c000f551:	57                   	push   edi
c000f552:	50                   	push   eax
c000f553:	56                   	push   esi
c000f554:	e8 7b 42 00 00       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f559:	81 05 50 66 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026650,0x1000
c000f563:	83 c3 01             	add    ebx,0x1
c000f566:	83 c4 10             	add    esp,0x10
c000f569:	39 dd                	cmp    ebp,ebx
c000f56b:	75 ce                	jne    c000f53b <sbrk+0x31>
c000f56d:	0f 20 d8             	mov    eax,cr3
c000f570:	0f 22 d8             	mov    cr3,eax
c000f573:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f577:	83 c4 1c             	add    esp,0x1c
c000f57a:	5b                   	pop    ebx
c000f57b:	5e                   	pop    esi
c000f57c:	5f                   	pop    edi
c000f57d:	5d                   	pop    ebp
c000f57e:	c3                   	ret    
c000f57f:	a1 50 66 02 c0       	mov    eax,ds:0xc0026650
c000f584:	eb f1                	jmp    c000f577 <sbrk+0x6d>
c000f586:	83 ec 08             	sub    esp,0x8
c000f589:	50                   	push   eax
c000f58a:	68 50 3e 02 c0       	push   0xc0023e50
c000f58f:	e8 d2 79 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f594:	83 c4 10             	add    esp,0x10
c000f597:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f59c:	eb d9                	jmp    c000f577 <sbrk+0x6d>

c000f59e <sbrk_thunk>:
c000f59e:	83 ec 0c             	sub    esp,0xc
c000f5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5a5:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f5aa:	7f 10                	jg     c000f5bc <sbrk_thunk+0x1e>
c000f5ac:	83 ec 0c             	sub    esp,0xc
c000f5af:	50                   	push   eax
c000f5b0:	e8 55 ff ff ff       	call   c000f50a <sbrk>
c000f5b5:	83 c4 10             	add    esp,0x10
c000f5b8:	83 c4 0c             	add    esp,0xc
c000f5bb:	c3                   	ret    
c000f5bc:	83 ec 08             	sub    esp,0x8
c000f5bf:	50                   	push   eax
c000f5c0:	68 80 3e 02 c0       	push   0xc0023e80
c000f5c5:	e8 9c 79 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f5ca:	83 c4 10             	add    esp,0x10
c000f5cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5d2:	eb e4                	jmp    c000f5b8 <sbrk_thunk+0x1a>

c000f5d4 <mmap>:
c000f5d4:	55                   	push   ebp
c000f5d5:	57                   	push   edi
c000f5d6:	56                   	push   esi
c000f5d7:	53                   	push   ebx
c000f5d8:	83 ec 18             	sub    esp,0x18
c000f5db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5df:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f5e5:	89 fb                	mov    ebx,edi
c000f5e7:	c1 eb 0c             	shr    ebx,0xc
c000f5ea:	53                   	push   ebx
c000f5eb:	e8 0b 3b 00 00       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c000f5f0:	89 c5                	mov    ebp,eax
c000f5f2:	83 c4 10             	add    esp,0x10
c000f5f5:	85 db                	test   ebx,ebx
c000f5f7:	7e 2f                	jle    c000f628 <mmap+0x54>
c000f5f9:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f5ff:	01 c7                	add    edi,eax
c000f601:	89 c3                	mov    ebx,eax
c000f603:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f609:	e8 fc 06 00 00       	call   c000fd0a <Phys::allocatePage()>
c000f60e:	68 01 04 00 00       	push   0x401
c000f613:	53                   	push   ebx
c000f614:	50                   	push   eax
c000f615:	56                   	push   esi
c000f616:	e8 b9 41 00 00       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f61b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	39 fb                	cmp    ebx,edi
c000f626:	75 db                	jne    c000f603 <mmap+0x2f>
c000f628:	89 e8                	mov    eax,ebp
c000f62a:	83 c4 0c             	add    esp,0xc
c000f62d:	5b                   	pop    ebx
c000f62e:	5e                   	pop    esi
c000f62f:	5f                   	pop    edi
c000f630:	5d                   	pop    ebp
c000f631:	c3                   	ret    

c000f632 <munmap>:
c000f632:	83 ec 18             	sub    esp,0x18
c000f635:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f639:	e8 bb 3d 00 00       	call   c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c000f63e:	b8 00 00 00 00       	mov    eax,0x0
c000f643:	83 c4 1c             	add    esp,0x1c
c000f646:	c3                   	ret    

c000f647 <liballoc_lock()>:
c000f647:	fa                   	cli    
c000f648:	83 05 70 ca 02 c0 01 	add    DWORD PTR ds:0xc002ca70,0x1
c000f64f:	b8 00 00 00 00       	mov    eax,0x0
c000f654:	c3                   	ret    

c000f655 <liballoc_unlock()>:
c000f655:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f65d:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000f664:	75 01                	jne    c000f667 <liballoc_unlock()+0x12>
c000f666:	fb                   	sti    
c000f667:	b8 00 00 00 00       	mov    eax,0x0
c000f66c:	c3                   	ret    

c000f66d <liballoc_alloc(int)>:
c000f66d:	83 ec 10             	sub    esp,0x10
c000f670:	6a 01                	push   0x1
c000f672:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f676:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f67c:	e8 5b 42 00 00       	call   c00138dc <VAS::allocatePages(int, int)>
c000f681:	83 c4 1c             	add    esp,0x1c
c000f684:	c3                   	ret    

c000f685 <liballoc_free(void*, int)>:
c000f685:	83 ec 14             	sub    esp,0x14
c000f688:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f68c:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f692:	e8 9f 3e 00 00       	call   c0013536 <VAS::freeAllocatedPages(unsigned long)>
c000f697:	b8 00 00 00 00       	mov    eax,0x0
c000f69c:	83 c4 1c             	add    esp,0x1c
c000f69f:	c3                   	ret    

c000f6a0 <realloc>:
c000f6a0:	83 ec 14             	sub    esp,0x14
c000f6a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6ab:	e8 d5 20 ff ff       	call   c0001785 <dlrealloc>
c000f6b0:	83 c4 1c             	add    esp,0x1c
c000f6b3:	c3                   	ret    

c000f6b4 <malloc>:
c000f6b4:	83 ec 18             	sub    esp,0x18
c000f6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6bb:	e8 88 1b ff ff       	call   c0001248 <dlmalloc>
c000f6c0:	83 c4 1c             	add    esp,0x1c
c000f6c3:	c3                   	ret    

c000f6c4 <free>:
c000f6c4:	83 ec 18             	sub    esp,0x18
c000f6c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6cb:	e8 b6 16 ff ff       	call   c0000d86 <dlfree>
c000f6d0:	83 c4 1c             	add    esp,0x1c
c000f6d3:	c3                   	ret    

c000f6d4 <rfree>:
c000f6d4:	83 ec 18             	sub    esp,0x18
c000f6d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6db:	e8 a6 16 ff ff       	call   c0000d86 <dlfree>
c000f6e0:	83 c4 1c             	add    esp,0x1c
c000f6e3:	c3                   	ret    

c000f6e4 <calloc>:
c000f6e4:	56                   	push   esi
c000f6e5:	53                   	push   ebx
c000f6e6:	83 ec 10             	sub    esp,0x10
c000f6e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f6ed:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f6f2:	53                   	push   ebx
c000f6f3:	e8 bc ff ff ff       	call   c000f6b4 <malloc>
c000f6f8:	89 c6                	mov    esi,eax
c000f6fa:	83 c4 0c             	add    esp,0xc
c000f6fd:	53                   	push   ebx
c000f6fe:	6a 00                	push   0x0
c000f700:	50                   	push   eax
c000f701:	e8 ea 0d ff ff       	call   c00004f0 <memset>
c000f706:	89 f0                	mov    eax,esi
c000f708:	83 c4 14             	add    esp,0x14
c000f70b:	5b                   	pop    ebx
c000f70c:	5e                   	pop    esi
c000f70d:	c3                   	ret    
c000f70e:	66 90                	xchg   ax,ax

c000f710 <KeMailboxTryPost(Mailbox*, void*)>:
c000f710:	83 ec 10             	sub    esp,0x10
c000f713:	fa                   	cli    
c000f714:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f719:	83 c0 01             	add    eax,0x1
c000f71c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f721:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f726:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f72a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f72d:	85 c0                	test   eax,eax
c000f72f:	75 23                	jne    c000f754 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f735:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f739:	89 10                	mov    DWORD PTR [eax],edx
c000f73b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f73f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f742:	8d 50 01             	lea    edx,[eax+0x1]
c000f745:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f749:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f74c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f751:	8d 76 00             	lea    esi,[esi+0x0]
c000f754:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f75c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f761:	85 c0                	test   eax,eax
c000f763:	75 03                	jne    c000f768 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f765:	fb                   	sti    
c000f766:	66 90                	xchg   ax,ax
c000f768:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f76c:	83 c4 10             	add    esp,0x10
c000f76f:	c3                   	ret    

c000f770 <KeMailboxTryGet(Mailbox*, void**)>:
c000f770:	83 ec 10             	sub    esp,0x10
c000f773:	fa                   	cli    
c000f774:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f779:	83 c0 01             	add    eax,0x1
c000f77c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f781:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f786:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f78a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f78d:	83 f8 01             	cmp    eax,0x1
c000f790:	75 22                	jne    c000f7b4 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f792:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f796:	8b 10                	mov    edx,DWORD PTR [eax]
c000f798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f79c:	89 10                	mov    DWORD PTR [eax],edx
c000f79e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7a5:	8d 50 ff             	lea    edx,[eax-0x1]
c000f7a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f7af:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f7b4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f7bc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f7c1:	85 c0                	test   eax,eax
c000f7c3:	75 03                	jne    c000f7c8 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f7c5:	fb                   	sti    
c000f7c6:	66 90                	xchg   ax,ax
c000f7c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f7cc:	83 c4 10             	add    esp,0x10
c000f7cf:	c3                   	ret    

c000f7d0 <KeMailboxCreate()>:
c000f7d0:	83 ec 1c             	sub    esp,0x1c
c000f7d3:	83 ec 0c             	sub    esp,0xc
c000f7d6:	6a 08                	push   0x8
c000f7d8:	e8 d7 fe ff ff       	call   c000f6b4 <malloc>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f7ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f7f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7fd:	83 c4 1c             	add    esp,0x1c
c000f800:	c3                   	ret    
c000f801:	8d 76 00             	lea    esi,[esi+0x0]

c000f804 <KeMailboxPost(Mailbox*, void*)>:
c000f804:	83 ec 1c             	sub    esp,0x1c
c000f807:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f80c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f814:	e8 f7 fe ff ff       	call   c000f710 <KeMailboxTryPost(Mailbox*, void*)>
c000f819:	83 c4 08             	add    esp,0x8
c000f81c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f820:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f824:	83 f0 01             	xor    eax,0x1
c000f827:	0f b6 c0             	movzx  eax,al
c000f82a:	85 c0                	test   eax,eax
c000f82c:	74 26                	je     c000f854 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f82e:	fa                   	cli    
c000f82f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f834:	83 c0 01             	add    eax,0x1
c000f837:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f83c:	e8 03 74 00 00       	call   c0016c44 <schedule()>
c000f841:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f849:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f84e:	85 c0                	test   eax,eax
c000f850:	75 02                	jne    c000f854 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f852:	fb                   	sti    
c000f853:	90                   	nop
c000f854:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f859:	85 c0                	test   eax,eax
c000f85b:	75 03                	jne    c000f860 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f85d:	eb ad                	jmp    c000f80c <KeMailboxPost(Mailbox*, void*)+0x8>
c000f85f:	90                   	nop
c000f860:	90                   	nop
c000f861:	83 c4 1c             	add    esp,0x1c
c000f864:	c3                   	ret    
c000f865:	8d 76 00             	lea    esi,[esi+0x0]

c000f868 <KeMailboxGet(Mailbox*, void**)>:
c000f868:	83 ec 1c             	sub    esp,0x1c
c000f86b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f870:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f874:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f878:	e8 f3 fe ff ff       	call   c000f770 <KeMailboxTryGet(Mailbox*, void**)>
c000f87d:	83 c4 08             	add    esp,0x8
c000f880:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f884:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f888:	83 f0 01             	xor    eax,0x1
c000f88b:	0f b6 c0             	movzx  eax,al
c000f88e:	85 c0                	test   eax,eax
c000f890:	74 26                	je     c000f8b8 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f892:	fa                   	cli    
c000f893:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f898:	83 c0 01             	add    eax,0x1
c000f89b:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f8a0:	e8 9f 73 00 00       	call   c0016c44 <schedule()>
c000f8a5:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f8ad:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f8b2:	85 c0                	test   eax,eax
c000f8b4:	75 02                	jne    c000f8b8 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f8b6:	fb                   	sti    
c000f8b7:	90                   	nop
c000f8b8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f8bd:	85 c0                	test   eax,eax
c000f8bf:	75 03                	jne    c000f8c4 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f8c1:	eb ad                	jmp    c000f870 <KeMailboxGet(Mailbox*, void**)+0x8>
c000f8c3:	90                   	nop
c000f8c4:	90                   	nop
c000f8c5:	83 c4 1c             	add    esp,0x1c
c000f8c8:	c3                   	ret    
c000f8c9:	8d 76 00             	lea    esi,[esi+0x0]

c000f8cc <KeMailboxDestroy(Mailbox*)>:
c000f8cc:	83 ec 0c             	sub    esp,0xc
c000f8cf:	83 ec 0c             	sub    esp,0xc
c000f8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d6:	e8 e9 fd ff ff       	call   c000f6c4 <free>
c000f8db:	83 c4 10             	add    esp,0x10
c000f8de:	90                   	nop
c000f8df:	83 c4 0c             	add    esp,0xc
c000f8e2:	c3                   	ret    

c000f8e3 <KeFirstTask()>:
c000f8e3:	53                   	push   ebx
c000f8e4:	83 ec 08             	sub    esp,0x8
c000f8e7:	fb                   	sti    
c000f8e8:	e8 02 a1 00 00       	call   c00199ef <HalEnableNMI()>
c000f8ed:	83 ec 0c             	sub    esp,0xc
c000f8f0:	68 8f 3e 02 c0       	push   0xc0023e8f
c000f8f5:	e8 17 d9 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000f8fa:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000f901:	e8 ae fd ff ff       	call   c000f6b4 <malloc>
c000f906:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000f90d:	89 c3                	mov    ebx,eax
c000f90f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000f914:	50                   	push   eax
c000f915:	68 a8 3e 02 c0       	push   0xc0023ea8
c000f91a:	6a 01                	push   0x1
c000f91c:	53                   	push   ebx
c000f91d:	e8 3a 6e 00 00       	call   c001675c <Process::Process(bool, char const*, Process*, char**)>
c000f922:	83 c4 20             	add    esp,0x20
c000f925:	68 ff 00 00 00       	push   0xff
c000f92a:	6a 00                	push   0x0
c000f92c:	68 df e9 00 c0       	push   0xc000e9df
c000f931:	53                   	push   ebx
c000f932:	e8 65 70 00 00       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c000f937:	8b 15 98 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca98
c000f93d:	6a 7a                	push   0x7a
c000f93f:	6a 00                	push   0x0
c000f941:	68 20 73 01 c0       	push   0xc0017320
c000f946:	52                   	push   edx
c000f947:	e8 50 70 00 00       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c000f94c:	83 c4 14             	add    esp,0x14
c000f94f:	68 30 3f 02 c0       	push   0xc0023f30
c000f954:	a3 50 ca 02 c0       	mov    ds:0xc002ca50,eax
c000f959:	e8 b3 d8 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000f95e:	c6 05 0d c1 02 c0 01 	mov    BYTE PTR ds:0xc002c10d,0x1
c000f965:	e8 89 0c 00 00       	call   c00105f3 <KeInitRand()>
c000f96a:	e8 7f 7d 00 00       	call   c00176ee <Vm::initialise8086()>
c000f96f:	e8 be 84 ff ff       	call   c0007e32 <Fs::initVFS()>
c000f974:	c7 04 24 f1 3a 02 c0 	mov    DWORD PTR [esp],0xc0023af1
c000f97b:	e8 91 d8 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000f980:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000f985:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000f98b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f98d:	6a 00                	push   0x0
c000f98f:	6a 00                	push   0x0
c000f991:	6a 00                	push   0x0
c000f993:	50                   	push   eax
c000f994:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f997:	83 c4 14             	add    esp,0x14
c000f99a:	68 30 3f 02 c0       	push   0xc0023f30
c000f99f:	e8 6d d8 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000f9a4:	e8 6e 7c ff ff       	call   c0007617 <KeInitialiseSymlinks()>
c000f9a9:	e8 a2 eb ff ff       	call   c000e550 <KeLoadSystemEnv()>
c000f9ae:	e8 87 0a 00 00       	call   c001043a <KeSetupPowerManager()>
c000f9b3:	c7 04 24 b5 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eb5
c000f9ba:	e8 52 d8 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000f9bf:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000f9c5:	59                   	pop    ecx
c000f9c6:	58                   	pop    eax
c000f9c7:	6a 01                	push   0x1
c000f9c9:	68 c6 3e 02 c0       	push   0xc0023ec6
c000f9ce:	e8 d4 66 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c000f9d3:	5a                   	pop    edx
c000f9d4:	59                   	pop    ecx
c000f9d5:	53                   	push   ebx
c000f9d6:	50                   	push   eax
c000f9d7:	e8 2c 69 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c000f9dc:	83 c4 10             	add    esp,0x10
c000f9df:	83 ec 0c             	sub    esp,0xc
c000f9e2:	6a 02                	push   0x2
c000f9e4:	e8 1b 73 00 00       	call   c0016d04 <blockTask(TaskState)>
c000f9e9:	83 c4 10             	add    esp,0x10
c000f9ec:	eb f1                	jmp    c000f9df <KeFirstTask()+0xfc>

c000f9ee <KeEntryPoint>:
c000f9ee:	57                   	push   edi
c000f9ef:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9f4:	56                   	push   esi
c000f9f5:	31 f6                	xor    esi,esi
c000f9f7:	53                   	push   ebx
c000f9f8:	83 ec 20             	sub    esp,0x20
c000f9fb:	e8 d4 d7 ff ff       	call   c000d1d4 <KeInitialiseBootConfigurationFlags()>
c000fa00:	89 f0                	mov    eax,esi
c000fa02:	89 fa                	mov    edx,edi
c000fa04:	ee                   	out    dx,al
c000fa05:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fa0a:	b0 80                	mov    al,0x80
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	ee                   	out    dx,al
c000fa0f:	b1 03                	mov    cl,0x3
c000fa11:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa16:	88 c8                	mov    al,cl
c000fa18:	ee                   	out    dx,al
c000fa19:	89 f0                	mov    eax,esi
c000fa1b:	89 fa                	mov    edx,edi
c000fa1d:	ee                   	out    dx,al
c000fa1e:	88 c8                	mov    al,cl
c000fa20:	89 da                	mov    edx,ebx
c000fa22:	ee                   	out    dx,al
c000fa23:	b0 c7                	mov    al,0xc7
c000fa25:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa2a:	ee                   	out    dx,al
c000fa2b:	b0 0b                	mov    al,0xb
c000fa2d:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa32:	ee                   	out    dx,al
c000fa33:	83 ec 0c             	sub    esp,0xc
c000fa36:	68 e2 3e 02 c0       	push   0xc0023ee2
c000fa3b:	e8 26 75 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fa40:	e8 9d d7 ff ff       	call   c000d1e2 <KeDisplaySplashScreen()>
c000fa45:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa4a:	05 ff 0f 00 00       	add    eax,0xfff
c000fa4f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa54:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa57:	e8 32 04 00 00       	call   c000fe8e <Phys::physicalMemorySetup(unsigned int)>
c000fa5c:	e8 6e 38 00 00       	call   c00132cf <Virt::virtualMemorySetup()>
c000fa61:	e8 cc d6 ff ff       	call   c000d132 <KeInitialiseAtexit()>
c000fa66:	58                   	pop    eax
c000fa67:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fa6b:	53                   	push   ebx
c000fa6c:	e8 45 3b 00 00       	call   c00135b6 <VAS::VAS()>
c000fa71:	89 1d 90 c2 02 c0    	mov    DWORD PTR ds:0xc002c290,ebx
c000fa77:	e8 32 20 01 00       	call   c0021aae <_init>
c000fa7c:	c7 04 24 f9 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ef9
c000fa83:	e8 89 d7 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fa88:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fa8f:	e8 20 fc ff ff       	call   c000f6b4 <malloc>
c000fa94:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa97:	89 c6                	mov    esi,eax
c000fa99:	e8 f4 e4 ff ff       	call   c000df92 <Computer::Computer()>
c000fa9e:	8b 15 90 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c290
c000faa4:	89 35 08 c1 02 c0    	mov    DWORD PTR ds:0xc002c108,esi
c000faaa:	52                   	push   edx
c000faab:	6a 00                	push   0x0
c000faad:	6a 00                	push   0x0
c000faaf:	56                   	push   esi
c000fab0:	e8 21 e5 ff ff       	call   c000dfd6 <Computer::open(int, int, void*)>
c000fab5:	83 c4 14             	add    esp,0x14
c000fab8:	68 54 3f 02 c0       	push   0xc0023f54
c000fabd:	e8 4f d7 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fac2:	e8 88 a6 00 00       	call   c001a14f <HalInitialiseCoprocessor()>
c000fac7:	c7 04 24 13 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f13
c000face:	e8 3e d7 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fad3:	c7 04 24 e3 f8 00 c0 	mov    DWORD PTR [esp],0xc000f8e3
c000fada:	e8 1d 70 00 00       	call   c0016afc <setupMultitasking(void (*)())>
c000fadf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fae2:	e8 85 3b 00 00       	call   c001366c <VAS::~VAS()>
c000fae7:	83 c4 30             	add    esp,0x30
c000faea:	5b                   	pop    ebx
c000faeb:	5e                   	pop    esi
c000faec:	5f                   	pop    edi
c000faed:	c3                   	ret    
c000faee:	66 90                	xchg   ax,ax

c000faf0 <Mutex::Mutex()>:
c000faf0:	83 ec 0c             	sub    esp,0xc
c000faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faf7:	83 ec 08             	sub    esp,0x8
c000fafa:	6a 01                	push   0x1
c000fafc:	50                   	push   eax
c000fafd:	e8 92 0d 00 00       	call   c0010894 <Semaphore::Semaphore(int)>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	90                   	nop
c000fb06:	83 c4 0c             	add    esp,0xc
c000fb09:	c3                   	ret    

c000fb0a <KeIsKernelInPanic()>:
c000fb0a:	a0 64 c1 02 c0       	mov    al,ds:0xc002c164
c000fb0f:	c3                   	ret    

c000fb10 <KePanic(char const*)>:
c000fb10:	c6 05 64 c1 02 c0 01 	mov    BYTE PTR ds:0xc002c164,0x1
c000fb17:	e9 b7 a6 00 00       	jmp    c001a1d3 <HalPanic(char const*)>

c000fb1c <Phys::allocateDMA(unsigned long)>:
c000fb1c:	55                   	push   ebp
c000fb1d:	31 ed                	xor    ebp,ebp
c000fb1f:	57                   	push   edi
c000fb20:	56                   	push   esi
c000fb21:	31 f6                	xor    esi,esi
c000fb23:	53                   	push   ebx
c000fb24:	31 db                	xor    ebx,ebx
c000fb26:	83 ec 1c             	sub    esp,0x1c
c000fb29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb2d:	05 ff 0f 00 00       	add    eax,0xfff
c000fb32:	c1 e8 0c             	shr    eax,0xc
c000fb35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb39:	31 c0                	xor    eax,eax
c000fb3b:	eb 1b                	jmp    c000fb58 <Phys::allocateDMA(unsigned long)+0x3c>
c000fb3d:	8d 78 01             	lea    edi,[eax+0x1]
c000fb40:	85 c0                	test   eax,eax
c000fb42:	0f 44 eb             	cmove  ebp,ebx
c000fb45:	0f 44 f3             	cmove  esi,ebx
c000fb48:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fb4c:	74 37                	je     c000fb85 <Phys::allocateDMA(unsigned long)+0x69>
c000fb4e:	89 f8                	mov    eax,edi
c000fb50:	83 c3 01             	add    ebx,0x1
c000fb53:	83 fb 0f             	cmp    ebx,0xf
c000fb56:	7f 13                	jg     c000fb6b <Phys::allocateDMA(unsigned long)+0x4f>
c000fb58:	80 bb 80 c1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3e80],0x0
c000fb5f:	74 dc                	je     c000fb3d <Phys::allocateDMA(unsigned long)+0x21>
c000fb61:	31 c0                	xor    eax,eax
c000fb63:	83 c3 01             	add    ebx,0x1
c000fb66:	83 fb 0f             	cmp    ebx,0xf
c000fb69:	7e ed                	jle    c000fb58 <Phys::allocateDMA(unsigned long)+0x3c>
c000fb6b:	83 ec 0c             	sub    esp,0xc
c000fb6e:	68 e4 3f 02 c0       	push   0xc0023fe4
c000fb73:	e8 98 ff ff ff       	call   c000fb10 <KePanic(char const*)>
c000fb78:	83 c4 10             	add    esp,0x10
c000fb7b:	31 c0                	xor    eax,eax
c000fb7d:	83 c4 1c             	add    esp,0x1c
c000fb80:	5b                   	pop    ebx
c000fb81:	5e                   	pop    esi
c000fb82:	5f                   	pop    edi
c000fb83:	5d                   	pop    ebp
c000fb84:	c3                   	ret    
c000fb85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb89:	89 f2                	mov    edx,esi
c000fb8b:	c1 fa 04             	sar    edx,0x4
c000fb8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb92:	01 f1                	add    ecx,esi
c000fb94:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fb97:	83 e9 01             	sub    ecx,0x1
c000fb9a:	0f 48 ca             	cmovs  ecx,edx
c000fb9d:	c1 f9 04             	sar    ecx,0x4
c000fba0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fba4:	74 06                	je     c000fbac <Phys::allocateDMA(unsigned long)+0x90>
c000fba6:	89 eb                	mov    ebx,ebp
c000fba8:	31 c0                	xor    eax,eax
c000fbaa:	eb b7                	jmp    c000fb63 <Phys::allocateDMA(unsigned long)+0x47>
c000fbac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fbb0:	85 d2                	test   edx,edx
c000fbb2:	74 17                	je     c000fbcb <Phys::allocateDMA(unsigned long)+0xaf>
c000fbb4:	8d 96 80 c1 02 c0    	lea    edx,[esi-0x3ffd3e80]
c000fbba:	8d 84 06 81 c1 02 c0 	lea    eax,[esi+eax*1-0x3ffd3e7f]
c000fbc1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fbc4:	83 c2 01             	add    edx,0x1
c000fbc7:	39 d0                	cmp    eax,edx
c000fbc9:	75 f6                	jne    c000fbc1 <Phys::allocateDMA(unsigned long)+0xa5>
c000fbcb:	8b 15 78 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c178
c000fbd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbd9:	01 c2                	add    edx,eax
c000fbdb:	89 15 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,edx
c000fbe1:	85 c9                	test   ecx,ecx
c000fbe3:	74 17                	je     c000fbfc <Phys::allocateDMA(unsigned long)+0xe0>
c000fbe5:	83 ec 0c             	sub    esp,0xc
c000fbe8:	68 78 3f 02 c0       	push   0xc0023f78
c000fbed:	e8 1e ff ff ff       	call   c000fb10 <KePanic(char const*)>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	89 f8                	mov    eax,edi
c000fbf7:	e9 54 ff ff ff       	jmp    c000fb50 <Phys::allocateDMA(unsigned long)+0x34>
c000fbfc:	c1 e6 0c             	shl    esi,0xc
c000fbff:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000fc05:	e9 73 ff ff ff       	jmp    c000fb7d <Phys::allocateDMA(unsigned long)+0x61>

c000fc0a <Phys::freeDMA(unsigned long, unsigned long)>:
c000fc0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc0e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fc14:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fc19:	c1 ea 0c             	shr    edx,0xc
c000fc1c:	29 d0                	sub    eax,edx
c000fc1e:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fc23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc27:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fc2c:	c1 e8 0c             	shr    eax,0xc
c000fc2f:	85 d2                	test   edx,edx
c000fc31:	74 11                	je     c000fc44 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fc33:	05 80 c1 02 c0       	add    eax,0xc002c180
c000fc38:	01 c2                	add    edx,eax
c000fc3a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fc3d:	83 c0 01             	add    eax,0x1
c000fc40:	39 d0                	cmp    eax,edx
c000fc42:	75 f6                	jne    c000fc3a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fc44:	c3                   	ret    

c000fc45 <Phys::setPageState(unsigned long, bool)>:
c000fc45:	57                   	push   edi
c000fc46:	56                   	push   esi
c000fc47:	8b 35 54 66 02 c0    	mov    esi,DWORD PTR ds:0xc0026654
c000fc4d:	53                   	push   ebx
c000fc4e:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fc53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc5b:	89 ca                	mov    edx,ecx
c000fc5d:	83 e1 07             	and    ecx,0x7
c000fc60:	c1 ea 03             	shr    edx,0x3
c000fc63:	0f b6 c0             	movzx  eax,al
c000fc66:	d3 c3                	rol    ebx,cl
c000fc68:	01 d6                	add    esi,edx
c000fc6a:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fc6d:	d3 e0                	shl    eax,cl
c000fc6f:	21 fb                	and    ebx,edi
c000fc71:	88 1e                	mov    BYTE PTR [esi],bl
c000fc73:	8b 1d 54 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026654
c000fc79:	01 da                	add    edx,ebx
c000fc7b:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fc7d:	09 c8                	or     eax,ecx
c000fc7f:	88 02                	mov    BYTE PTR [edx],al
c000fc81:	5b                   	pop    ebx
c000fc82:	5e                   	pop    esi
c000fc83:	5f                   	pop    edi
c000fc84:	c3                   	ret    

c000fc85 <Phys::getPageState(unsigned long)>:
c000fc85:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc89:	8b 15 54 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026654
c000fc8f:	89 c8                	mov    eax,ecx
c000fc91:	83 e1 07             	and    ecx,0x7
c000fc94:	c1 e8 03             	shr    eax,0x3
c000fc97:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc9b:	d3 f8                	sar    eax,cl
c000fc9d:	83 e0 01             	and    eax,0x1
c000fca0:	c3                   	ret    

c000fca1 <Phys::freePage(unsigned long)>:
c000fca1:	53                   	push   ebx
c000fca2:	83 ec 08             	sub    esp,0x8
c000fca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca9:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fcaf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fcb5:	76 41                	jbe    c000fcf8 <Phys::freePage(unsigned long)+0x57>
c000fcb7:	c1 e8 0c             	shr    eax,0xc
c000fcba:	50                   	push   eax
c000fcbb:	89 c3                	mov    ebx,eax
c000fcbd:	e8 c3 ff ff ff       	call   c000fc85 <Phys::getPageState(unsigned long)>
c000fcc2:	5a                   	pop    edx
c000fcc3:	84 c0                	test   al,al
c000fcc5:	74 20                	je     c000fce7 <Phys::freePage(unsigned long)+0x46>
c000fcc7:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fccc:	83 ec 08             	sub    esp,0x8
c000fccf:	6a 00                	push   0x0
c000fcd1:	53                   	push   ebx
c000fcd2:	83 e8 01             	sub    eax,0x1
c000fcd5:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fcda:	e8 66 ff ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	83 c4 08             	add    esp,0x8
c000fce5:	5b                   	pop    ebx
c000fce6:	c3                   	ret    
c000fce7:	c7 44 24 10 8a 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f8a
c000fcef:	83 c4 08             	add    esp,0x8
c000fcf2:	5b                   	pop    ebx
c000fcf3:	e9 18 fe ff ff       	jmp    c000fb10 <KePanic(char const*)>
c000fcf8:	68 00 10 00 00       	push   0x1000
c000fcfd:	50                   	push   eax
c000fcfe:	e8 07 ff ff ff       	call   c000fc0a <Phys::freeDMA(unsigned long, unsigned long)>
c000fd03:	59                   	pop    ecx
c000fd04:	5b                   	pop    ebx
c000fd05:	83 c4 08             	add    esp,0x8
c000fd08:	5b                   	pop    ebx
c000fd09:	c3                   	ret    

c000fd0a <Phys::allocatePage()>:
c000fd0a:	56                   	push   esi
c000fd0b:	53                   	push   ebx
c000fd0c:	83 ec 14             	sub    esp,0x14
c000fd0f:	8b 35 6c c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c16c
c000fd15:	89 f3                	mov    ebx,esi
c000fd17:	eb 0a                	jmp    c000fd23 <Phys::allocatePage()+0x19>
c000fd19:	89 1d 6c c1 02 c0    	mov    DWORD PTR ds:0xc002c16c,ebx
c000fd1f:	39 de                	cmp    esi,ebx
c000fd21:	74 26                	je     c000fd49 <Phys::allocatePage()+0x3f>
c000fd23:	53                   	push   ebx
c000fd24:	e8 5c ff ff ff       	call   c000fc85 <Phys::getPageState(unsigned long)>
c000fd29:	59                   	pop    ecx
c000fd2a:	84 c0                	test   al,al
c000fd2c:	74 5a                	je     c000fd88 <Phys::allocatePage()+0x7e>
c000fd2e:	83 c3 01             	add    ebx,0x1
c000fd31:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd37:	75 e0                	jne    c000fd19 <Phys::allocatePage()+0xf>
c000fd39:	c7 05 6c c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c16c,0x0
c000fd43:	31 db                	xor    ebx,ebx
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	75 da                	jne    c000fd23 <Phys::allocatePage()+0x19>
c000fd49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd4e:	83 ec 0c             	sub    esp,0xc
c000fd51:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd54:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000fd5a:	51                   	push   ecx
c000fd5b:	e8 58 44 00 00       	call   c00141b8 <VAS::scanForEviction()>
c000fd60:	83 c4 10             	add    esp,0x10
c000fd63:	85 c0                	test   eax,eax
c000fd65:	75 48                	jne    c000fdaf <Phys::allocatePage()+0xa5>
c000fd67:	83 ec 0c             	sub    esp,0xc
c000fd6a:	68 0c 40 02 c0       	push   0xc002400c
c000fd6f:	e8 9c fd ff ff       	call   c000fb10 <KePanic(char const*)>
c000fd74:	8b 1d 6c c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c16c
c000fd7a:	83 c4 10             	add    esp,0x10
c000fd7d:	53                   	push   ebx
c000fd7e:	e8 02 ff ff ff       	call   c000fc85 <Phys::getPageState(unsigned long)>
c000fd83:	59                   	pop    ecx
c000fd84:	84 c0                	test   al,al
c000fd86:	75 a6                	jne    c000fd2e <Phys::allocatePage()+0x24>
c000fd88:	6a 01                	push   0x1
c000fd8a:	53                   	push   ebx
c000fd8b:	e8 b5 fe ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c000fd90:	8b 1d 78 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c178
c000fd96:	5e                   	pop    esi
c000fd97:	a1 6c c1 02 c0       	mov    eax,ds:0xc002c16c
c000fd9c:	5a                   	pop    edx
c000fd9d:	83 c3 01             	add    ebx,0x1
c000fda0:	89 1d 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,ebx
c000fda6:	c1 e0 0c             	shl    eax,0xc
c000fda9:	83 c4 14             	add    esp,0x14
c000fdac:	5b                   	pop    ebx
c000fdad:	5e                   	pop    esi
c000fdae:	c3                   	ret    
c000fdaf:	8b 15 78 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c178
c000fdb5:	83 ec 08             	sub    esp,0x8
c000fdb8:	6a 01                	push   0x1
c000fdba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdbe:	83 c2 01             	add    edx,0x1
c000fdc1:	89 15 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,edx
c000fdc7:	89 c2                	mov    edx,eax
c000fdc9:	c1 ea 0c             	shr    edx,0xc
c000fdcc:	52                   	push   edx
c000fdcd:	e8 73 fe ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c000fdd2:	83 c4 10             	add    esp,0x10
c000fdd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdd9:	eb ce                	jmp    c000fda9 <Phys::allocatePage()+0x9f>

c000fddb <Phys::allocateContiguousPages(int)>:
c000fddb:	57                   	push   edi
c000fddc:	56                   	push   esi
c000fddd:	53                   	push   ebx
c000fdde:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fde2:	fa                   	cli    
c000fde3:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c000fde9:	83 ec 0c             	sub    esp,0xc
c000fdec:	31 db                	xor    ebx,ebx
c000fdee:	68 3c 40 02 c0       	push   0xc002403c
c000fdf3:	83 c2 01             	add    edx,0x1
c000fdf6:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c000fdfc:	e8 65 71 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fe01:	83 c4 10             	add    esp,0x10
c000fe04:	85 db                	test   ebx,ebx
c000fe06:	75 11                	jne    c000fe19 <Phys::allocateContiguousPages(int)+0x3e>
c000fe08:	e8 fd fe ff ff       	call   c000fd0a <Phys::allocatePage()>
c000fe0d:	83 ff 01             	cmp    edi,0x1
c000fe10:	89 c6                	mov    esi,eax
c000fe12:	74 21                	je     c000fe35 <Phys::allocateContiguousPages(int)+0x5a>
c000fe14:	bb 01 00 00 00       	mov    ebx,0x1
c000fe19:	e8 ec fe ff ff       	call   c000fd0a <Phys::allocatePage()>
c000fe1e:	89 da                	mov    edx,ebx
c000fe20:	c1 e2 0c             	shl    edx,0xc
c000fe23:	01 f2                	add    edx,esi
c000fe25:	39 c2                	cmp    edx,eax
c000fe27:	74 24                	je     c000fe4d <Phys::allocateContiguousPages(int)+0x72>
c000fe29:	83 ff 01             	cmp    edi,0x1
c000fe2c:	bb 01 00 00 00       	mov    ebx,0x1
c000fe31:	89 c6                	mov    esi,eax
c000fe33:	75 e4                	jne    c000fe19 <Phys::allocateContiguousPages(int)+0x3e>
c000fe35:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000fe3d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fe42:	85 c0                	test   eax,eax
c000fe44:	75 01                	jne    c000fe47 <Phys::allocateContiguousPages(int)+0x6c>
c000fe46:	fb                   	sti    
c000fe47:	5b                   	pop    ebx
c000fe48:	89 f0                	mov    eax,esi
c000fe4a:	5e                   	pop    esi
c000fe4b:	5f                   	pop    edi
c000fe4c:	c3                   	ret    
c000fe4d:	83 c3 01             	add    ebx,0x1
c000fe50:	39 fb                	cmp    ebx,edi
c000fe52:	75 b0                	jne    c000fe04 <Phys::allocateContiguousPages(int)+0x29>
c000fe54:	eb df                	jmp    c000fe35 <Phys::allocateContiguousPages(int)+0x5a>

c000fe56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fe56:	56                   	push   esi
c000fe57:	53                   	push   ebx
c000fe58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5c:	39 1d 70 c1 02 c0    	cmp    DWORD PTR ds:0xc002c170,ebx
c000fe62:	73 06                	jae    c000fe6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fe64:	89 1d 70 c1 02 c0    	mov    DWORD PTR ds:0xc002c170,ebx
c000fe6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe6e:	c1 eb 0c             	shr    ebx,0xc
c000fe71:	c1 e8 0c             	shr    eax,0xc
c000fe74:	39 d8                	cmp    eax,ebx
c000fe76:	73 13                	jae    c000fe8b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe78:	6a 00                	push   0x0
c000fe7a:	50                   	push   eax
c000fe7b:	8d 70 01             	lea    esi,[eax+0x1]
c000fe7e:	e8 c2 fd ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c000fe83:	39 f3                	cmp    ebx,esi
c000fe85:	89 f0                	mov    eax,esi
c000fe87:	5a                   	pop    edx
c000fe88:	59                   	pop    ecx
c000fe89:	75 ed                	jne    c000fe78 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe8b:	5b                   	pop    ebx
c000fe8c:	5e                   	pop    esi
c000fe8d:	c3                   	ret    

c000fe8e <Phys::physicalMemorySetup(unsigned int)>:
c000fe8e:	55                   	push   ebp
c000fe8f:	57                   	push   edi
c000fe90:	56                   	push   esi
c000fe91:	53                   	push   ebx
c000fe92:	31 db                	xor    ebx,ebx
c000fe94:	83 ec 40             	sub    esp,0x40
c000fe97:	6a 10                	push   0x10
c000fe99:	6a 00                	push   0x0
c000fe9b:	68 80 c1 02 c0       	push   0xc002c180
c000fea0:	e8 4b 06 ff ff       	call   c00004f0 <memset>
c000fea5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fea9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000feae:	05 00 10 00 00       	add    eax,0x1000
c000feb3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000feb7:	5a                   	pop    edx
c000feb8:	59                   	pop    ecx
c000feb9:	50                   	push   eax
c000feba:	68 a0 3f 02 c0       	push   0xc0023fa0
c000febf:	e8 a2 70 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	83 ec 08             	sub    esp,0x8
c000feca:	6a 01                	push   0x1
c000fecc:	53                   	push   ebx
c000fecd:	83 c3 01             	add    ebx,0x1
c000fed0:	e8 70 fd ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c000fed5:	83 c4 10             	add    esp,0x10
c000fed8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fede:	75 e7                	jne    c000fec7 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fee0:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000fee7:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000feee:	c1 e0 08             	shl    eax,0x8
c000fef1:	09 c2                	or     edx,eax
c000fef3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000fef7:	0f 84 43 01 00 00    	je     c0010040 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000fefd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ff05:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ff0a:	e9 82 00 00 00       	jmp    c000ff91 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000ff0f:	ba 00 00 08 00       	mov    edx,0x80000
c000ff14:	89 c1                	mov    ecx,eax
c000ff16:	39 f2                	cmp    edx,esi
c000ff18:	19 f9                	sbb    ecx,edi
c000ff1a:	0f 82 c0 00 00 00    	jb     c000ffe0 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000ff20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff24:	89 c5                	mov    ebp,eax
c000ff26:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000ff2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff2e:	19 cd                	sbb    ebp,ecx
c000ff30:	0f 83 af 00 00 00    	jae    c000ffe5 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000ff36:	89 d6                	mov    esi,edx
c000ff38:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff3d:	39 f2                	cmp    edx,esi
c000ff3f:	89 cf                	mov    edi,ecx
c000ff41:	19 c8                	sbb    eax,ecx
c000ff43:	73 07                	jae    c000ff4c <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000ff45:	be 00 00 0a 00       	mov    esi,0xa0000
c000ff4a:	31 ff                	xor    edi,edi
c000ff4c:	89 f2                	mov    edx,esi
c000ff4e:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000ff53:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000ff59:	89 f9                	mov    ecx,edi
c000ff5b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ff5f:	83 d1 ff             	adc    ecx,0xffffffff
c000ff62:	39 d0                	cmp    eax,edx
c000ff64:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000ff68:	b8 00 00 00 00       	mov    eax,0x0
c000ff6d:	19 c8                	sbb    eax,ecx
c000ff6f:	0f 82 9d 01 00 00    	jb     c0010112 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000ff75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff79:	83 c3 18             	add    ebx,0x18
c000ff7c:	83 c6 01             	add    esi,0x1
c000ff7f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ff83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff87:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000ff8b:	0f 84 bf 00 00 00    	je     c0010050 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000ff91:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ff93:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff96:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ff99:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ff9c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ffa0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ffa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffa7:	01 f0                	add    eax,esi
c000ffa9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ffb1:	55                   	push   ebp
c000ffb2:	11 fa                	adc    edx,edi
c000ffb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffb8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ffbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffc0:	50                   	push   eax
c000ffc1:	56                   	push   esi
c000ffc2:	68 9c 40 02 c0       	push   0xc002409c
c000ffc7:	e8 9a 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ffcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffd0:	83 c4 10             	add    esp,0x10
c000ffd3:	09 f8                	or     eax,edi
c000ffd5:	75 79                	jne    c0010050 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000ffd7:	83 fd 01             	cmp    ebp,0x1
c000ffda:	0f 84 2f ff ff ff    	je     c000ff0f <Phys::physicalMemorySetup(unsigned int)+0x81>
c000ffe0:	83 fd 01             	cmp    ebp,0x1
c000ffe3:	75 90                	jne    c000ff75 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000ffe5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ffe9:	31 d2                	xor    edx,edx
c000ffeb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000ffef:	89 c8                	mov    eax,ecx
c000fff1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fff5:	19 d1                	sbb    ecx,edx
c000fff7:	0f 82 78 ff ff ff    	jb     c000ff75 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000fffd:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0010002:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0010006:	b9 00 00 00 00       	mov    ecx,0x0
c001000b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c001000f:	0f 83 60 ff ff ff    	jae    c000ff75 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010015:	39 c6                	cmp    esi,eax
c0010017:	19 d7                	sbb    edi,edx
c0010019:	0f 83 ff 00 00 00    	jae    c001011e <Phys::physicalMemorySetup(unsigned int)+0x290>
c001001f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010023:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010027:	29 c7                	sub    edi,eax
c0010029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001002d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010031:	19 d5                	sbb    ebp,edx
c0010033:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010037:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001003b:	e9 de 00 00 00       	jmp    c001011e <Phys::physicalMemorySetup(unsigned int)+0x290>
c0010040:	83 ec 0c             	sub    esp,0xc
c0010043:	68 b8 3f 02 c0       	push   0xc0023fb8
c0010048:	e8 c3 fa ff ff       	call   c000fb10 <KePanic(char const*)>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	83 ec 08             	sub    esp,0x8
c0010053:	bb 60 00 00 00       	mov    ebx,0x60
c0010058:	6a 00                	push   0x0
c001005a:	6a 06                	push   0x6
c001005c:	e8 e4 fb ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c0010061:	58                   	pop    eax
c0010062:	5a                   	pop    edx
c0010063:	6a 00                	push   0x0
c0010065:	6a 07                	push   0x7
c0010067:	e8 d9 fb ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c001006c:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c0010072:	83 c4 10             	add    esp,0x10
c0010075:	83 c1 02             	add    ecx,0x2
c0010078:	89 0d 7c c1 02 c0    	mov    DWORD PTR ds:0xc002c17c,ecx
c001007e:	83 ec 08             	sub    esp,0x8
c0010081:	6a 00                	push   0x0
c0010083:	53                   	push   ebx
c0010084:	83 c3 01             	add    ebx,0x1
c0010087:	e8 b9 fb ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c001008c:	83 c4 10             	add    esp,0x10
c001008f:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0010095:	75 e7                	jne    c001007e <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0010097:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c001009c:	bb 40 01 00 00       	mov    ebx,0x140
c00100a1:	83 c0 20             	add    eax,0x20
c00100a4:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c00100a9:	eb 26                	jmp    c00100d1 <Phys::physicalMemorySetup(unsigned int)+0x243>
c00100ab:	83 ec 08             	sub    esp,0x8
c00100ae:	6a 00                	push   0x0
c00100b0:	53                   	push   ebx
c00100b1:	83 c3 01             	add    ebx,0x1
c00100b4:	e8 8c fb ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c00100b9:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00100be:	83 c4 10             	add    esp,0x10
c00100c1:	83 c0 01             	add    eax,0x1
c00100c4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00100ca:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c00100cf:	74 07                	je     c00100d8 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00100d1:	3d ff 03 00 00       	cmp    eax,0x3ff
c00100d6:	7e d3                	jle    c00100ab <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00100d8:	bb d0 01 00 00       	mov    ebx,0x1d0
c00100dd:	3d ff 07 00 00       	cmp    eax,0x7ff
c00100e2:	7f 26                	jg     c001010a <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00100e4:	83 ec 08             	sub    esp,0x8
c00100e7:	6a 00                	push   0x0
c00100e9:	53                   	push   ebx
c00100ea:	83 c3 01             	add    ebx,0x1
c00100ed:	e8 53 fb ff ff       	call   c000fc45 <Phys::setPageState(unsigned long, bool)>
c00100f2:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00100f7:	83 c4 10             	add    esp,0x10
c00100fa:	83 c0 01             	add    eax,0x1
c00100fd:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010103:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c0010108:	75 d3                	jne    c00100dd <Phys::physicalMemorySetup(unsigned int)+0x24f>
c001010a:	83 c4 3c             	add    esp,0x3c
c001010d:	5b                   	pop    ebx
c001010e:	5e                   	pop    esi
c001010f:	5f                   	pop    edi
c0010110:	5d                   	pop    ebp
c0010111:	c3                   	ret    
c0010112:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010116:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c001011e:	83 ec 04             	sub    esp,0x4
c0010121:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010125:	56                   	push   esi
c0010126:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001012a:	57                   	push   edi
c001012b:	68 c0 40 02 c0       	push   0xc00240c0
c0010130:	e8 31 6e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010135:	5d                   	pop    ebp
c0010136:	58                   	pop    eax
c0010137:	56                   	push   esi
c0010138:	57                   	push   edi
c0010139:	e8 18 fd ff ff       	call   c000fe56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001013e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010146:	83 c4 0c             	add    esp,0xc
c0010149:	8b 35 7c c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c17c
c001014f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010153:	01 f0                	add    eax,esi
c0010155:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c001015a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010161:	52                   	push   edx
c0010162:	50                   	push   eax
c0010163:	68 c6 3f 02 c0       	push   0xc0023fc6
c0010168:	e8 f9 6d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001016d:	83 c4 10             	add    esp,0x10
c0010170:	e9 00 fe ff ff       	jmp    c000ff75 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010175:	90                   	nop

c0010176 <Pipe::isAtty()>:
c0010176:	31 c0                	xor    eax,eax
c0010178:	c3                   	ret    
c0010179:	90                   	nop

c001017a <Pipe::~Pipe()>:
c001017a:	83 ec 0c             	sub    esp,0xc
c001017d:	ba 2c 41 02 c0       	mov    edx,0xc002412c
c0010182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010186:	89 10                	mov    DWORD PTR [eax],edx
c0010188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	50                   	push   eax
c0010190:	e8 f9 2c 00 00       	call   c0012e8e <UnixFile::~UnixFile()>
c0010195:	83 c4 10             	add    esp,0x10
c0010198:	90                   	nop
c0010199:	83 c4 0c             	add    esp,0xc
c001019c:	c3                   	ret    
c001019d:	90                   	nop

c001019e <Pipe::~Pipe()>:
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	83 ec 0c             	sub    esp,0xc
c00101a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a8:	e8 cd ff ff ff       	call   c001017a <Pipe::~Pipe()>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	83 ec 08             	sub    esp,0x8
c00101b3:	6a 20                	push   0x20
c00101b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b9:	e8 fe d0 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00101be:	83 c4 10             	add    esp,0x10
c00101c1:	83 c4 0c             	add    esp,0xc
c00101c4:	c3                   	ret    
c00101c5:	90                   	nop

c00101c6 <Pipe::write(unsigned long long, void*, int*)>:
c00101c6:	55                   	push   ebp
c00101c7:	57                   	push   edi
c00101c8:	56                   	push   esi
c00101c9:	53                   	push   ebx
c00101ca:	83 ec 1c             	sub    esp,0x1c
c00101cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00101d1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00101d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00101d9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00101dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101e0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00101e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00101e6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00101ea:	89 d8                	mov    eax,ebx
c00101ec:	89 d6                	mov    esi,edx
c00101ee:	89 d7                	mov    edi,edx
c00101f0:	c1 ff 1f             	sar    edi,0x1f
c00101f3:	03 34 24             	add    esi,DWORD PTR [esp]
c00101f6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00101fa:	c1 f8 1f             	sar    eax,0x1f
c00101fd:	39 f3                	cmp    ebx,esi
c00101ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010207:	19 f8                	sbb    eax,edi
c0010209:	b8 01 00 00 00       	mov    eax,0x1
c001020e:	72 72                	jb     c0010282 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010210:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010213:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010217:	01 d0                	add    eax,edx
c0010219:	99                   	cdq    
c001021a:	f7 fb                	idiv   ebx
c001021c:	89 d8                	mov    eax,ebx
c001021e:	29 d0                	sub    eax,edx
c0010220:	89 d6                	mov    esi,edx
c0010222:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010225:	89 c3                	mov    ebx,eax
c0010227:	c1 fb 1f             	sar    ebx,0x1f
c001022a:	39 c2                	cmp    edx,eax
c001022c:	19 df                	sbb    edi,ebx
c001022e:	bb 00 00 00 00       	mov    ebx,0x0
c0010233:	72 04                	jb     c0010239 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0010235:	89 d3                	mov    ebx,edx
c0010237:	29 c3                	sub    ebx,eax
c0010239:	89 d0                	mov    eax,edx
c001023b:	29 d8                	sub    eax,ebx
c001023d:	74 0d                	je     c001024c <Pipe::write(unsigned long long, void*, int*)+0x86>
c001023f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010242:	89 c1                	mov    ecx,eax
c0010244:	01 f7                	add    edi,esi
c0010246:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001024a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001024c:	85 db                	test   ebx,ebx
c001024e:	74 0d                	je     c001025d <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010250:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010254:	89 d9                	mov    ecx,ebx
c0010256:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010259:	89 c6                	mov    esi,eax
c001025b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001025d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010260:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010265:	75 10                	jne    c0010277 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010267:	83 ec 0c             	sub    esp,0xc
c001026a:	68 e9 40 02 c0       	push   0xc00240e9
c001026f:	e8 9c f8 ff ff       	call   c000fb10 <KePanic(char const*)>
c0010274:	83 c4 10             	add    esp,0x10
c0010277:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001027b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001027e:	89 08                	mov    DWORD PTR [eax],ecx
c0010280:	31 c0                	xor    eax,eax
c0010282:	83 c4 1c             	add    esp,0x1c
c0010285:	5b                   	pop    ebx
c0010286:	5e                   	pop    esi
c0010287:	5f                   	pop    edi
c0010288:	5d                   	pop    ebp
c0010289:	c3                   	ret    

c001028a <Pipe::read(unsigned long long, void*, int*)>:
c001028a:	55                   	push   ebp
c001028b:	57                   	push   edi
c001028c:	56                   	push   esi
c001028d:	53                   	push   ebx
c001028e:	83 ec 1c             	sub    esp,0x1c
c0010291:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010295:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010299:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001029d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102a0:	89 c8                	mov    eax,ecx
c00102a2:	99                   	cdq    
c00102a3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102a7:	74 27                	je     c00102d0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00102a9:	39 f9                	cmp    ecx,edi
c00102ab:	89 d1                	mov    ecx,edx
c00102ad:	19 f1                	sbb    ecx,esi
c00102af:	73 1f                	jae    c00102d0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00102b1:	fa                   	cli    
c00102b2:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c00102b8:	e8 87 69 00 00       	call   c0016c44 <schedule()>
c00102bd:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00102c4:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00102cb:	75 d0                	jne    c001029d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102cd:	fb                   	sti    
c00102ce:	eb cd                	jmp    c001029d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102d0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102d4:	39 f8                	cmp    eax,edi
c00102d6:	89 d1                	mov    ecx,edx
c00102d8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102dc:	19 f1                	sbb    ecx,esi
c00102de:	73 08                	jae    c00102e8 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c00102e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00102e8:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00102eb:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00102ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00102f2:	29 f7                	sub    edi,esi
c00102f4:	89 f8                	mov    eax,edi
c00102f6:	99                   	cdq    
c00102f7:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00102fb:	89 d0                	mov    eax,edx
c00102fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010301:	19 c2                	sbb    edx,eax
c0010303:	89 f8                	mov    eax,edi
c0010305:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c001030a:	89 ea                	mov    edx,ebp
c001030c:	29 c2                	sub    edx,eax
c001030e:	85 c0                	test   eax,eax
c0010310:	74 0b                	je     c001031d <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010312:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010315:	89 c1                	mov    ecx,eax
c0010317:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001031b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001031d:	85 d2                	test   edx,edx
c001031f:	74 0d                	je     c001032e <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0010321:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010325:	89 d1                	mov    ecx,edx
c0010327:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001032a:	89 c7                	mov    edi,eax
c001032c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001032e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010331:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010334:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010337:	99                   	cdq    
c0010338:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001033c:	89 f7                	mov    edi,esi
c001033e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010342:	c1 ff 1f             	sar    edi,0x1f
c0010345:	57                   	push   edi
c0010346:	56                   	push   esi
c0010347:	52                   	push   edx
c0010348:	50                   	push   eax
c0010349:	e8 46 16 01 00       	call   c0021994 <__umoddi3>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010356:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010359:	75 10                	jne    c001036b <Pipe::read(unsigned long long, void*, int*)+0xe1>
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	68 06 41 02 c0       	push   0xc0024106
c0010363:	e8 a8 f7 ff ff       	call   c000fb10 <KePanic(char const*)>
c0010368:	83 c4 10             	add    esp,0x10
c001036b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001036f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010373:	89 10                	mov    DWORD PTR [eax],edx
c0010375:	83 c4 1c             	add    esp,0x1c
c0010378:	31 c0                	xor    eax,eax
c001037a:	5b                   	pop    ebx
c001037b:	5e                   	pop    esi
c001037c:	5f                   	pop    edi
c001037d:	5d                   	pop    ebp
c001037e:	c3                   	ret    
c001037f:	90                   	nop

c0010380 <Pipe::Pipe(int)>:
c0010380:	83 ec 0c             	sub    esp,0xc
c0010383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010387:	83 ec 08             	sub    esp,0x8
c001038a:	6a 00                	push   0x0
c001038c:	50                   	push   eax
c001038d:	e8 16 29 00 00       	call   c0012ca8 <UnixFile::UnixFile(int)>
c0010392:	83 c4 10             	add    esp,0x10
c0010395:	ba 2c 41 02 c0       	mov    edx,0xc002412c
c001039a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001039e:	89 10                	mov    DWORD PTR [eax],edx
c00103a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00103a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00103ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103af:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00103b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ba:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00103c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c5:	83 ec 0c             	sub    esp,0xc
c00103c8:	50                   	push   eax
c00103c9:	e8 e6 f2 ff ff       	call   c000f6b4 <malloc>
c00103ce:	83 c4 10             	add    esp,0x10
c00103d1:	89 c2                	mov    edx,eax
c00103d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00103da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103de:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00103e2:	90                   	nop
c00103e3:	83 c4 0c             	add    esp,0xc
c00103e6:	c3                   	ret    

c00103e7 <KePowerThread(void*)>:
c00103e7:	83 ec 0c             	sub    esp,0xc
c00103ea:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00103f1:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00103f8:	75 01                	jne    c00103fb <KePowerThread(void*)+0x14>
c00103fa:	fb                   	sti    
c00103fb:	50                   	push   eax
c00103fc:	50                   	push   eax
c00103fd:	6a 00                	push   0x0
c00103ff:	6a 0a                	push   0xa
c0010401:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c0010408:	e8 43 6a 00 00       	call   c0016e50 <sleep(unsigned long long)>
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	83 05 e4 c1 02 c0 0a 	add    DWORD PTR ds:0xc002c1e4,0xa
c0010417:	eb e2                	jmp    c00103fb <KePowerThread(void*)+0x14>

c0010419 <KeChangePowerSettings(PowerSettings)>:
c0010419:	57                   	push   edi
c001041a:	b9 09 00 00 00       	mov    ecx,0x9
c001041f:	56                   	push   esi
c0010420:	bf c0 c1 02 c0       	mov    edi,0xc002c1c0
c0010425:	fc                   	cld    
c0010426:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001042a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001042c:	5e                   	pop    esi
c001042d:	5f                   	pop    edi
c001042e:	c3                   	ret    

c001042f <KeUserIOReceived()>:
c001042f:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c0010439:	c3                   	ret    

c001043a <KeSetupPowerManager()>:
c001043a:	83 ec 0c             	sub    esp,0xc
c001043d:	68 f0 00 00 00       	push   0xf0
c0010442:	6a 00                	push   0x0
c0010444:	68 e7 03 01 c0       	push   0xc00103e7
c0010449:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c001044f:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c0010459:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c0010460:	e8 37 65 00 00       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c0010465:	c7 05 c0 c1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c1c0,0x2
c001046f:	c7 05 c4 c1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c1c4,0x1
c0010479:	c7 05 c8 c1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c1c8,0x3
c0010483:	c7 05 cc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1cc,0x0
c001048d:	c7 05 d8 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d8,0x0
c0010497:	c7 05 d0 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d0,0x0
c00104a1:	c7 05 dc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1dc,0x0
c00104ab:	c7 05 d4 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1d4,0x3c
c00104b5:	c7 05 e0 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1e0,0x3c
c00104bf:	83 c4 1c             	add    esp,0x1c
c00104c2:	c3                   	ret    

c00104c3 <KePrepareShutdown()>:
c00104c3:	83 ec 0c             	sub    esp,0xc
c00104c6:	e8 bd cc ff ff       	call   c000d188 <KeExecuteAtexit()>
c00104cb:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00104d9:	e8 80 97 ff ff       	call   c0009c5e <Device::closeAll()>
c00104de:	83 c4 1c             	add    esp,0x1c
c00104e1:	c3                   	ret    

c00104e2 <KeRegisterShutdownHandler(void (*)())>:
c00104e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e6:	a3 a8 c1 02 c0       	mov    ds:0xc002c1a8,eax
c00104eb:	c3                   	ret    

c00104ec <KeRegisterRestartHandler(void (*)())>:
c00104ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104f0:	a3 a4 c1 02 c0       	mov    ds:0xc002c1a4,eax
c00104f5:	c3                   	ret    

c00104f6 <KeRegisterSleepHandler(void (*)())>:
c00104f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104fa:	a3 a0 c1 02 c0       	mov    ds:0xc002c1a0,eax
c00104ff:	c3                   	ret    

c0010500 <KeShutdown()>:
c0010500:	83 ec 0c             	sub    esp,0xc
c0010503:	e8 bb ff ff ff       	call   c00104c3 <KePrepareShutdown()>
c0010508:	a1 a8 c1 02 c0       	mov    eax,ds:0xc002c1a8
c001050d:	85 c0                	test   eax,eax
c001050f:	74 04                	je     c0010515 <KeShutdown()+0x15>
c0010511:	ff d0                	call   eax
c0010513:	eb 10                	jmp    c0010525 <KeShutdown()+0x25>
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	68 40 41 02 c0       	push   0xc0024140
c001051d:	e8 ee f5 ff ff       	call   c000fb10 <KePanic(char const*)>
c0010522:	83 c4 10             	add    esp,0x10
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	68 61 41 02 c0       	push   0xc0024161
c001052d:	e8 de f5 ff ff       	call   c000fb10 <KePanic(char const*)>
c0010532:	83 c4 1c             	add    esp,0x1c
c0010535:	c3                   	ret    

c0010536 <KeSleep()>:
c0010536:	a1 a0 c1 02 c0       	mov    eax,ds:0xc002c1a0
c001053b:	85 c0                	test   eax,eax
c001053d:	74 02                	je     c0010541 <KeSleep()+0xb>
c001053f:	ff e0                	jmp    eax
c0010541:	c3                   	ret    

c0010542 <KeHandlePowerButton()>:
c0010542:	a1 c0 c1 02 c0       	mov    eax,ds:0xc002c1c0
c0010547:	83 f8 02             	cmp    eax,0x2
c001054a:	75 02                	jne    c001054e <KeHandlePowerButton()+0xc>
c001054c:	eb b2                	jmp    c0010500 <KeShutdown()>
c001054e:	48                   	dec    eax
c001054f:	75 02                	jne    c0010553 <KeHandlePowerButton()+0x11>
c0010551:	eb e3                	jmp    c0010536 <KeSleep()>
c0010553:	c3                   	ret    

c0010554 <KeHandleSleepButton()>:
c0010554:	a1 c4 c1 02 c0       	mov    eax,ds:0xc002c1c4
c0010559:	83 f8 02             	cmp    eax,0x2
c001055c:	75 02                	jne    c0010560 <KeHandleSleepButton()+0xc>
c001055e:	eb a0                	jmp    c0010500 <KeShutdown()>
c0010560:	48                   	dec    eax
c0010561:	75 02                	jne    c0010565 <KeHandleSleepButton()+0x11>
c0010563:	eb d1                	jmp    c0010536 <KeSleep()>
c0010565:	c3                   	ret    

c0010566 <KeRestart()>:
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	e8 55 ff ff ff       	call   c00104c3 <KePrepareShutdown()>
c001056e:	a1 a4 c1 02 c0       	mov    eax,ds:0xc002c1a4
c0010573:	85 c0                	test   eax,eax
c0010575:	74 02                	je     c0010579 <KeRestart()+0x13>
c0010577:	ff d0                	call   eax
c0010579:	83 ec 0c             	sub    esp,0xc
c001057c:	68 85 41 02 c0       	push   0xc0024185
c0010581:	e8 8a f5 ff ff       	call   c000fb10 <KePanic(char const*)>
c0010586:	83 c4 1c             	add    esp,0x1c
c0010589:	c3                   	ret    

c001058a <KeRand()>:
c001058a:	69 05 e8 c1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002c1e8,0x2875
c0010594:	69 0d ec c1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002c1ec,0xa2e7b175
c001059e:	53                   	push   ebx
c001059f:	01 c1                	add    ecx,eax
c00105a1:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00105a6:	f7 25 e8 c1 02 c0    	mul    DWORD PTR ds:0xc002c1e8
c00105ac:	01 ca                	add    edx,ecx
c00105ae:	05 ef 04 b5 00       	add    eax,0xb504ef
c00105b3:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c00105b8:	83 d2 00             	adc    edx,0x0
c00105bb:	0f b7 da             	movzx  ebx,dx
c00105be:	89 1d ec c1 02 c0    	mov    DWORD PTR ds:0xc002c1ec,ebx
c00105c4:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00105c8:	5b                   	pop    ebx
c00105c9:	c3                   	ret    

c00105ca <KeSeedRand(unsigned int)>:
c00105ca:	53                   	push   ebx
c00105cb:	83 ec 08             	sub    esp,0x8
c00105ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105d2:	e8 42 9f 00 00       	call   c001a519 <HalGetRand()>
c00105d7:	c7 05 ec c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1ec,0x0
c00105e1:	31 d8                	xor    eax,ebx
c00105e3:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c00105e8:	e8 9d ff ff ff       	call   c001058a <KeRand()>
c00105ed:	83 c4 08             	add    esp,0x8
c00105f0:	5b                   	pop    ebx
c00105f1:	eb 97                	jmp    c001058a <KeRand()>

c00105f3 <KeInitRand()>:
c00105f3:	83 ec 0c             	sub    esp,0xc
c00105f6:	e8 ec 9c 00 00       	call   c001a2e7 <HalQueryPerformanceCounter()>
c00105fb:	0f 20 da             	mov    edx,cr3
c00105fe:	0f 22 da             	mov    cr3,edx
c0010601:	0f 20 da             	mov    edx,cr3
c0010604:	0f 22 da             	mov    cr3,edx
c0010607:	0f 20 da             	mov    edx,cr3
c001060a:	0f 22 da             	mov    cr3,edx
c001060d:	0f 20 da             	mov    edx,cr3
c0010610:	0f 22 da             	mov    cr3,edx
c0010613:	83 ec 0c             	sub    esp,0xc
c0010616:	35 03 8a 95 38       	xor    eax,0x38958a03
c001061b:	50                   	push   eax
c001061c:	e8 a9 ff ff ff       	call   c00105ca <KeSeedRand(unsigned int)>
c0010621:	83 c4 1c             	add    esp,0x1c
c0010624:	c3                   	ret    
c0010625:	66 90                	xchg   ax,ax
c0010627:	90                   	nop

c0010628 <KeResolveCompatibilitySymbol(char*)>:
c0010628:	83 ec 0c             	sub    esp,0xc
c001062b:	83 ec 08             	sub    esp,0x8
c001062e:	68 94 41 02 c0       	push   0xc0024194
c0010633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010637:	e8 44 01 ff ff       	call   c0000780 <strcmp>
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	85 c0                	test   eax,eax
c0010641:	0f 94 c0             	sete   al
c0010644:	0f b6 c0             	movzx  eax,al
c0010647:	85 c0                	test   eax,eax
c0010649:	74 0d                	je     c0010658 <KeResolveCompatibilitySymbol(char*)+0x30>
c001064b:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c0010650:	e9 3b 02 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010655:	8d 76 00             	lea    esi,[esi+0x0]
c0010658:	83 ec 08             	sub    esp,0x8
c001065b:	68 9d 41 02 c0       	push   0xc002419d
c0010660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010664:	e8 17 01 ff ff       	call   c0000780 <strcmp>
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	85 c0                	test   eax,eax
c001066e:	0f 94 c0             	sete   al
c0010671:	0f b6 c0             	movzx  eax,al
c0010674:	85 c0                	test   eax,eax
c0010676:	74 0c                	je     c0010684 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010678:	b8 94 18 02 c0       	mov    eax,0xc0021894
c001067d:	e9 0e 02 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010682:	66 90                	xchg   ax,ax
c0010684:	83 ec 08             	sub    esp,0x8
c0010687:	68 a7 41 02 c0       	push   0xc00241a7
c001068c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010690:	e8 eb 00 ff ff       	call   c0000780 <strcmp>
c0010695:	83 c4 10             	add    esp,0x10
c0010698:	85 c0                	test   eax,eax
c001069a:	0f 94 c0             	sete   al
c001069d:	0f b6 c0             	movzx  eax,al
c00106a0:	85 c0                	test   eax,eax
c00106a2:	74 0c                	je     c00106b0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00106a4:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c00106a9:	e9 e2 01 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c00106ae:	66 90                	xchg   ax,ax
c00106b0:	83 ec 08             	sub    esp,0x8
c00106b3:	68 ba 41 02 c0       	push   0xc00241ba
c00106b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106bc:	e8 bf 00 ff ff       	call   c0000780 <strcmp>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	85 c0                	test   eax,eax
c00106c6:	0f 94 c0             	sete   al
c00106c9:	0f b6 c0             	movzx  eax,al
c00106cc:	85 c0                	test   eax,eax
c00106ce:	74 0c                	je     c00106dc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00106d0:	b8 c8 15 02 c0       	mov    eax,0xc00215c8
c00106d5:	e9 b6 01 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c00106da:	66 90                	xchg   ax,ax
c00106dc:	83 ec 08             	sub    esp,0x8
c00106df:	68 c3 41 02 c0       	push   0xc00241c3
c00106e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e8:	e8 93 00 ff ff       	call   c0000780 <strcmp>
c00106ed:	83 c4 10             	add    esp,0x10
c00106f0:	85 c0                	test   eax,eax
c00106f2:	0f 94 c0             	sete   al
c00106f5:	0f b6 c0             	movzx  eax,al
c00106f8:	85 c0                	test   eax,eax
c00106fa:	74 0c                	je     c0010708 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00106fc:	b8 10 fb 00 c0       	mov    eax,0xc000fb10
c0010701:	e9 8a 01 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010706:	66 90                	xchg   ax,ax
c0010708:	83 ec 08             	sub    esp,0x8
c001070b:	68 d6 41 02 c0       	push   0xc00241d6
c0010710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010714:	e8 67 00 ff ff       	call   c0000780 <strcmp>
c0010719:	83 c4 10             	add    esp,0x10
c001071c:	85 c0                	test   eax,eax
c001071e:	0f 94 c0             	sete   al
c0010721:	0f b6 c0             	movzx  eax,al
c0010724:	85 c0                	test   eax,eax
c0010726:	74 0c                	je     c0010734 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010728:	b8 11 d2 00 c0       	mov    eax,0xc000d211
c001072d:	e9 5e 01 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010732:	66 90                	xchg   ax,ax
c0010734:	83 ec 08             	sub    esp,0x8
c0010737:	68 f3 41 02 c0       	push   0xc00241f3
c001073c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010740:	e8 3b 00 ff ff       	call   c0000780 <strcmp>
c0010745:	83 c4 10             	add    esp,0x10
c0010748:	85 c0                	test   eax,eax
c001074a:	0f 94 c0             	sete   al
c001074d:	0f b6 c0             	movzx  eax,al
c0010750:	85 c0                	test   eax,eax
c0010752:	74 0c                	je     c0010760 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010754:	b8 94 19 02 c0       	mov    eax,0xc0021994
c0010759:	e9 32 01 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c001075e:	66 90                	xchg   ax,ax
c0010760:	83 ec 08             	sub    esp,0x8
c0010763:	68 fd 41 02 c0       	push   0xc00241fd
c0010768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001076c:	e8 0f 00 ff ff       	call   c0000780 <strcmp>
c0010771:	83 c4 10             	add    esp,0x10
c0010774:	85 c0                	test   eax,eax
c0010776:	0f 94 c0             	sete   al
c0010779:	0f b6 c0             	movzx  eax,al
c001077c:	85 c0                	test   eax,eax
c001077e:	74 0c                	je     c001078c <KeResolveCompatibilitySymbol(char*)+0x164>
c0010780:	b8 14 17 02 c0       	mov    eax,0xc0021714
c0010785:	e9 06 01 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c001078a:	66 90                	xchg   ax,ax
c001078c:	83 ec 08             	sub    esp,0x8
c001078f:	68 06 42 02 c0       	push   0xc0024206
c0010794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010798:	e8 e3 ff fe ff       	call   c0000780 <strcmp>
c001079d:	83 c4 10             	add    esp,0x10
c00107a0:	85 c0                	test   eax,eax
c00107a2:	0f 94 c0             	sete   al
c00107a5:	0f b6 c0             	movzx  eax,al
c00107a8:	85 c0                	test   eax,eax
c00107aa:	74 0c                	je     c00107b8 <KeResolveCompatibilitySymbol(char*)+0x190>
c00107ac:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c00107b1:	e9 da 00 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107b6:	66 90                	xchg   ax,ax
c00107b8:	83 ec 08             	sub    esp,0x8
c00107bb:	68 1e 42 02 c0       	push   0xc002421e
c00107c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c4:	e8 b7 ff fe ff       	call   c0000780 <strcmp>
c00107c9:	83 c4 10             	add    esp,0x10
c00107cc:	85 c0                	test   eax,eax
c00107ce:	0f 94 c0             	sete   al
c00107d1:	0f b6 c0             	movzx  eax,al
c00107d4:	85 c0                	test   eax,eax
c00107d6:	74 0c                	je     c00107e4 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00107d8:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c00107dd:	e9 ae 00 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107e2:	66 90                	xchg   ax,ax
c00107e4:	83 ec 08             	sub    esp,0x8
c00107e7:	68 2b 42 02 c0       	push   0xc002422b
c00107ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f0:	e8 8b ff fe ff       	call   c0000780 <strcmp>
c00107f5:	83 c4 10             	add    esp,0x10
c00107f8:	85 c0                	test   eax,eax
c00107fa:	0f 94 c0             	sete   al
c00107fd:	0f b6 c0             	movzx  eax,al
c0010800:	85 c0                	test   eax,eax
c0010802:	74 0c                	je     c0010810 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010804:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c0010809:	e9 82 00 00 00       	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c001080e:	66 90                	xchg   ax,ax
c0010810:	83 ec 08             	sub    esp,0x8
c0010813:	68 38 42 02 c0       	push   0xc0024238
c0010818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081c:	e8 5f ff fe ff       	call   c0000780 <strcmp>
c0010821:	83 c4 10             	add    esp,0x10
c0010824:	85 c0                	test   eax,eax
c0010826:	0f 94 c0             	sete   al
c0010829:	0f b6 c0             	movzx  eax,al
c001082c:	85 c0                	test   eax,eax
c001082e:	74 08                	je     c0010838 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010830:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c0010835:	eb 59                	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010837:	90                   	nop
c0010838:	83 ec 08             	sub    esp,0x8
c001083b:	68 49 42 02 c0       	push   0xc0024249
c0010840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010844:	e8 37 ff fe ff       	call   c0000780 <strcmp>
c0010849:	83 c4 10             	add    esp,0x10
c001084c:	85 c0                	test   eax,eax
c001084e:	0f 94 c0             	sete   al
c0010851:	0f b6 c0             	movzx  eax,al
c0010854:	85 c0                	test   eax,eax
c0010856:	74 08                	je     c0010860 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010858:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c001085d:	eb 31                	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c001085f:	90                   	nop
c0010860:	83 ec 08             	sub    esp,0x8
c0010863:	68 5a 42 02 c0       	push   0xc002425a
c0010868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001086c:	e8 0f ff fe ff       	call   c0000780 <strcmp>
c0010871:	83 c4 10             	add    esp,0x10
c0010874:	85 c0                	test   eax,eax
c0010876:	0f 94 c0             	sete   al
c0010879:	0f b6 c0             	movzx  eax,al
c001087c:	85 c0                	test   eax,eax
c001087e:	74 08                	je     c0010888 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010880:	b8 38 74 01 c0       	mov    eax,0xc0017438
c0010885:	eb 09                	jmp    c0010890 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010887:	90                   	nop
c0010888:	b8 00 00 00 00       	mov    eax,0x0
c001088d:	8d 76 00             	lea    esi,[esi+0x0]
c0010890:	83 c4 0c             	add    esp,0xc
c0010893:	c3                   	ret    

c0010894 <Semaphore::Semaphore(int)>:
c0010894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010898:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001089c:	89 10                	mov    DWORD PTR [eax],edx
c001089e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00108a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00108bf:	90                   	nop
c00108c0:	c3                   	ret    
c00108c1:	90                   	nop
c00108c2:	66 90                	xchg   ax,ax

c00108c4 <Semaphore::tryAcquire()>:
c00108c4:	83 ec 0c             	sub    esp,0xc
c00108c7:	fa                   	cli    
c00108c8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00108cd:	83 c0 01             	add    eax,0x1
c00108d0:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00108d5:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00108da:	83 c0 01             	add    eax,0x1
c00108dd:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00108e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00108ef:	39 c2                	cmp    edx,eax
c00108f1:	7d 59                	jge    c001094c <Semaphore::tryAcquire()+0x88>
c00108f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108fa:	8d 50 01             	lea    edx,[eax+0x1]
c00108fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010901:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010904:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010909:	83 e8 01             	sub    eax,0x1
c001090c:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010911:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010916:	85 c0                	test   eax,eax
c0010918:	75 1a                	jne    c0010934 <Semaphore::tryAcquire()+0x70>
c001091a:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c001091f:	85 c0                	test   eax,eax
c0010921:	74 11                	je     c0010934 <Semaphore::tryAcquire()+0x70>
c0010923:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c001092d:	e8 12 63 00 00       	call   c0016c44 <schedule()>
c0010932:	66 90                	xchg   ax,ax
c0010934:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001093c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010941:	85 c0                	test   eax,eax
c0010943:	75 03                	jne    c0010948 <Semaphore::tryAcquire()+0x84>
c0010945:	fb                   	sti    
c0010946:	66 90                	xchg   ax,ax
c0010948:	b0 01                	mov    al,0x1
c001094a:	eb 48                	jmp    c0010994 <Semaphore::tryAcquire()+0xd0>
c001094c:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010951:	83 e8 01             	sub    eax,0x1
c0010954:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010959:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c001095e:	85 c0                	test   eax,eax
c0010960:	75 1a                	jne    c001097c <Semaphore::tryAcquire()+0xb8>
c0010962:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010967:	85 c0                	test   eax,eax
c0010969:	74 11                	je     c001097c <Semaphore::tryAcquire()+0xb8>
c001096b:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010975:	e8 ca 62 00 00       	call   c0016c44 <schedule()>
c001097a:	66 90                	xchg   ax,ax
c001097c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010984:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010989:	85 c0                	test   eax,eax
c001098b:	75 03                	jne    c0010990 <Semaphore::tryAcquire()+0xcc>
c001098d:	fb                   	sti    
c001098e:	66 90                	xchg   ax,ax
c0010990:	b0 00                	mov    al,0x0
c0010992:	66 90                	xchg   ax,ax
c0010994:	83 c4 0c             	add    esp,0xc
c0010997:	c3                   	ret    

c0010998 <Semaphore::assertLocked(char const*)>:
c0010998:	83 ec 0c             	sub    esp,0xc
c001099b:	fa                   	cli    
c001099c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00109a1:	83 c0 01             	add    eax,0x1
c00109a4:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00109a9:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00109ae:	83 c0 01             	add    eax,0x1
c00109b1:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00109b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ba:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00109bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00109c3:	39 c2                	cmp    edx,eax
c00109c5:	7d 11                	jge    c00109d8 <Semaphore::assertLocked(char const*)+0x40>
c00109c7:	83 ec 0c             	sub    esp,0xc
c00109ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00109ce:	e8 3d f1 ff ff       	call   c000fb10 <KePanic(char const*)>
c00109d3:	83 c4 10             	add    esp,0x10
c00109d6:	66 90                	xchg   ax,ax
c00109d8:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00109dd:	83 e8 01             	sub    eax,0x1
c00109e0:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00109e5:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00109ea:	85 c0                	test   eax,eax
c00109ec:	75 1a                	jne    c0010a08 <Semaphore::assertLocked(char const*)+0x70>
c00109ee:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c00109f3:	85 c0                	test   eax,eax
c00109f5:	74 11                	je     c0010a08 <Semaphore::assertLocked(char const*)+0x70>
c00109f7:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010a01:	e8 3e 62 00 00       	call   c0016c44 <schedule()>
c0010a06:	66 90                	xchg   ax,ax
c0010a08:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010a10:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010a15:	85 c0                	test   eax,eax
c0010a17:	75 03                	jne    c0010a1c <Semaphore::assertLocked(char const*)+0x84>
c0010a19:	fb                   	sti    
c0010a1a:	66 90                	xchg   ax,ax
c0010a1c:	90                   	nop
c0010a1d:	83 c4 0c             	add    esp,0xc
c0010a20:	c3                   	ret    
c0010a21:	90                   	nop
c0010a22:	66 90                	xchg   ax,ax

c0010a24 <Semaphore::acquire(int)>:
c0010a24:	83 ec 1c             	sub    esp,0x1c
c0010a27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010a2c:	0f 84 ae 00 00 00    	je     c0010ae0 <Semaphore::acquire(int)+0xbc>
c0010a32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a3a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010a3f:	90                   	nop
c0010a40:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010a45:	85 c0                	test   eax,eax
c0010a47:	0f 84 87 00 00 00    	je     c0010ad4 <Semaphore::acquire(int)+0xb0>
c0010a4d:	83 ec 0c             	sub    esp,0xc
c0010a50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010a54:	e8 6b fe ff ff       	call   c00108c4 <Semaphore::tryAcquire()>
c0010a59:	83 c4 10             	add    esp,0x10
c0010a5c:	83 f0 01             	xor    eax,0x1
c0010a5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010a63:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010a67:	83 f0 01             	xor    eax,0x1
c0010a6a:	0f b6 c0             	movzx  eax,al
c0010a6d:	85 c0                	test   eax,eax
c0010a6f:	75 5f                	jne    c0010ad0 <Semaphore::acquire(int)+0xac>
c0010a71:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010a76:	7f 34                	jg     c0010aac <Semaphore::acquire(int)+0x88>
c0010a78:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a7c:	89 d0                	mov    eax,edx
c0010a7e:	c1 e0 02             	shl    eax,0x2
c0010a81:	01 d0                	add    eax,edx
c0010a83:	d1 e0                	shl    eax,1
c0010a85:	89 c2                	mov    edx,eax
c0010a87:	c1 fa 1f             	sar    edx,0x1f
c0010a8a:	83 ec 08             	sub    esp,0x8
c0010a8d:	52                   	push   edx
c0010a8e:	50                   	push   eax
c0010a8f:	e8 a4 63 00 00       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0010a94:	83 c4 10             	add    esp,0x10
c0010a97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a9b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010a9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010aa7:	eb 97                	jmp    c0010a40 <Semaphore::acquire(int)+0x1c>
c0010aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0010aac:	83 ec 08             	sub    esp,0x8
c0010aaf:	6a 00                	push   0x0
c0010ab1:	68 90 01 00 00       	push   0x190
c0010ab6:	e8 7d 63 00 00       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010ac3:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010ac8:	e9 73 ff ff ff       	jmp    c0010a40 <Semaphore::acquire(int)+0x1c>
c0010acd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ad0:	90                   	nop
c0010ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ad4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ad8:	e9 fb 00 00 00       	jmp    c0010bd8 <Semaphore::acquire(int)+0x1b4>
c0010add:	8d 76 00             	lea    esi,[esi+0x0]
c0010ae0:	fa                   	cli    
c0010ae1:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010ae6:	83 c0 01             	add    eax,0x1
c0010ae9:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010aee:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010af3:	83 c0 01             	add    eax,0x1
c0010af6:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010afb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b08:	39 c2                	cmp    edx,eax
c0010b0a:	7d 14                	jge    c0010b20 <Semaphore::acquire(int)+0xfc>
c0010b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b13:	8d 50 01             	lea    edx,[eax+0x1]
c0010b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b1a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b1d:	eb 6d                	jmp    c0010b8c <Semaphore::acquire(int)+0x168>
c0010b1f:	90                   	nop
c0010b20:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b27:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b35:	85 c0                	test   eax,eax
c0010b37:	75 13                	jne    c0010b4c <Semaphore::acquire(int)+0x128>
c0010b39:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010b3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b47:	eb 17                	jmp    c0010b60 <Semaphore::acquire(int)+0x13c>
c0010b49:	8d 76 00             	lea    esi,[esi+0x0]
c0010b4c:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b55:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010b58:	8b 12                	mov    edx,DWORD PTR [edx]
c0010b5a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010b65:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010b6e:	83 ec 0c             	sub    esp,0xc
c0010b71:	68 70 42 02 c0       	push   0xc0024270
c0010b76:	e8 eb 63 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010b7b:	83 c4 10             	add    esp,0x10
c0010b7e:	83 ec 0c             	sub    esp,0xc
c0010b81:	6a 05                	push   0x5
c0010b83:	e8 7c 61 00 00       	call   c0016d04 <blockTask(TaskState)>
c0010b88:	83 c4 10             	add    esp,0x10
c0010b8b:	90                   	nop
c0010b8c:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b91:	83 e8 01             	sub    eax,0x1
c0010b94:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010b99:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b9e:	85 c0                	test   eax,eax
c0010ba0:	75 1a                	jne    c0010bbc <Semaphore::acquire(int)+0x198>
c0010ba2:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010ba7:	85 c0                	test   eax,eax
c0010ba9:	74 11                	je     c0010bbc <Semaphore::acquire(int)+0x198>
c0010bab:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010bb5:	e8 8a 60 00 00       	call   c0016c44 <schedule()>
c0010bba:	66 90                	xchg   ax,ax
c0010bbc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010bc4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010bc9:	85 c0                	test   eax,eax
c0010bcb:	75 03                	jne    c0010bd0 <Semaphore::acquire(int)+0x1ac>
c0010bcd:	fb                   	sti    
c0010bce:	66 90                	xchg   ax,ax
c0010bd0:	b8 00 00 00 00       	mov    eax,0x0
c0010bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bd8:	83 c4 1c             	add    esp,0x1c
c0010bdb:	c3                   	ret    

c0010bdc <Semaphore::acquire()>:
c0010bdc:	83 ec 0c             	sub    esp,0xc
c0010bdf:	83 ec 08             	sub    esp,0x8
c0010be2:	6a 00                	push   0x0
c0010be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be8:	e8 37 fe ff ff       	call   c0010a24 <Semaphore::acquire(int)>
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	90                   	nop
c0010bf1:	83 c4 0c             	add    esp,0xc
c0010bf4:	c3                   	ret    
c0010bf5:	90                   	nop
c0010bf6:	66 90                	xchg   ax,ax

c0010bf8 <Semaphore::release()>:
c0010bf8:	83 ec 1c             	sub    esp,0x1c
c0010bfb:	fa                   	cli    
c0010bfc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010c01:	83 c0 01             	add    eax,0x1
c0010c04:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010c09:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010c0e:	83 c0 01             	add    eax,0x1
c0010c11:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c1d:	85 c0                	test   eax,eax
c0010c1f:	74 2b                	je     c0010c4c <Semaphore::release()+0x54>
c0010c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c30:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c3a:	83 ec 0c             	sub    esp,0xc
c0010c3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c41:	e8 56 63 00 00       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	eb 15                	jmp    c0010c60 <Semaphore::release()+0x68>
c0010c4b:	90                   	nop
c0010c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c53:	8d 50 ff             	lea    edx,[eax-0x1]
c0010c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c5a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c60:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010c65:	83 e8 01             	sub    eax,0x1
c0010c68:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010c6d:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010c72:	85 c0                	test   eax,eax
c0010c74:	75 1a                	jne    c0010c90 <Semaphore::release()+0x98>
c0010c76:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010c7b:	85 c0                	test   eax,eax
c0010c7d:	74 11                	je     c0010c90 <Semaphore::release()+0x98>
c0010c7f:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010c89:	e8 b6 5f 00 00       	call   c0016c44 <schedule()>
c0010c8e:	66 90                	xchg   ax,ax
c0010c90:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010c98:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010c9d:	85 c0                	test   eax,eax
c0010c9f:	75 03                	jne    c0010ca4 <Semaphore::release()+0xac>
c0010ca1:	fb                   	sti    
c0010ca2:	66 90                	xchg   ax,ax
c0010ca4:	90                   	nop
c0010ca5:	83 c4 1c             	add    esp,0x1c
c0010ca8:	c3                   	ret    

c0010ca9 <KiSigKill(int)>:
c0010ca9:	83 ec 0c             	sub    esp,0xc
c0010cac:	6a 00                	push   0x0
c0010cae:	6a 00                	push   0x0
c0010cb0:	6a ff                	push   0xffffffff
c0010cb2:	6a 01                	push   0x1
c0010cb4:	e8 99 63 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010cb9:	83 c4 1c             	add    esp,0x1c
c0010cbc:	c3                   	ret    

c0010cbd <KiDefaultSignalHandlerIgnore(int)>:
c0010cbd:	c3                   	ret    

c0010cbe <KiDefaultSignalHandlerPause(int)>:
c0010cbe:	57                   	push   edi
c0010cbf:	b9 07 00 00 00       	mov    ecx,0x7
c0010cc4:	56                   	push   esi
c0010cc5:	be cb 42 02 c0       	mov    esi,0xc00242cb
c0010cca:	83 ec 24             	sub    esp,0x24
c0010ccd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010cd1:	fc                   	cld    
c0010cd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010cd4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010cd8:	50                   	push   eax
c0010cd9:	6a 00                	push   0x0
c0010cdb:	6a 00                	push   0x0
c0010cdd:	6a 27                	push   0x27
c0010cdf:	e8 6e 63 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ce4:	83 c4 34             	add    esp,0x34
c0010ce7:	5e                   	pop    esi
c0010ce8:	5f                   	pop    edi
c0010ce9:	c3                   	ret    

c0010cea <KiDefaultSignalHandlerResume(int)>:
c0010cea:	57                   	push   edi
c0010ceb:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010cf0:	56                   	push   esi
c0010cf1:	be e7 42 02 c0       	mov    esi,0xc00242e7
c0010cf6:	83 ec 24             	sub    esp,0x24
c0010cf9:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010cfd:	fc                   	cld    
c0010cfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d00:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010d04:	50                   	push   eax
c0010d05:	6a 00                	push   0x0
c0010d07:	6a 00                	push   0x0
c0010d09:	6a 27                	push   0x27
c0010d0b:	e8 42 63 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d10:	83 c4 34             	add    esp,0x34
c0010d13:	5e                   	pop    esi
c0010d14:	5f                   	pop    edi
c0010d15:	c3                   	ret    

c0010d16 <KeDeinitSignals(SigHandlerBlock*)>:
c0010d16:	e9 a9 e9 ff ff       	jmp    c000f6c4 <free>

c0010d1b <KeInitSignals()>:
c0010d1b:	53                   	push   ebx
c0010d1c:	83 ec 14             	sub    esp,0x14
c0010d1f:	68 c8 00 00 00       	push   0xc8
c0010d24:	e8 8b e9 ff ff       	call   c000f6b4 <malloc>
c0010d29:	83 c4 0c             	add    esp,0xc
c0010d2c:	6a 04                	push   0x4
c0010d2e:	6a 00                	push   0x0
c0010d30:	50                   	push   eax
c0010d31:	89 c3                	mov    ebx,eax
c0010d33:	e8 b8 f7 fe ff       	call   c00004f0 <memset>
c0010d38:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010d3e:	83 c4 0c             	add    esp,0xc
c0010d41:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010d4b:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010d55:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010d5c:	6a 20                	push   0x20
c0010d5e:	6a 00                	push   0x0
c0010d60:	50                   	push   eax
c0010d61:	e8 8a f7 fe ff       	call   c00004f0 <memset>
c0010d66:	83 c4 0c             	add    esp,0xc
c0010d69:	6a 44                	push   0x44
c0010d6b:	6a 00                	push   0x0
c0010d6d:	53                   	push   ebx
c0010d6e:	e8 7d f7 fe ff       	call   c00004f0 <memset>
c0010d73:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010d79:	83 c4 0c             	add    esp,0xc
c0010d7c:	6a 11                	push   0x11
c0010d7e:	6a 00                	push   0x0
c0010d80:	50                   	push   eax
c0010d81:	e8 6a f7 fe ff       	call   c00004f0 <memset>
c0010d86:	83 c4 18             	add    esp,0x18
c0010d89:	89 d8                	mov    eax,ebx
c0010d8b:	5b                   	pop    ebx
c0010d8c:	c3                   	ret    

c0010d8d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010d8d:	53                   	push   ebx
c0010d8e:	b8 01 00 00 00       	mov    eax,0x1
c0010d93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d9b:	83 f9 10             	cmp    ecx,0x10
c0010d9e:	7f 21                	jg     c0010dc1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010da7:	89 03                	mov    DWORD PTR [ebx],eax
c0010da9:	b8 01 00 00 00       	mov    eax,0x1
c0010dae:	d3 e0                	shl    eax,cl
c0010db0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010db4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010db7:	31 c0                	xor    eax,eax
c0010db9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010dc1:	5b                   	pop    ebx
c0010dc2:	c3                   	ret    

c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010dc3:	55                   	push   ebp
c0010dc4:	57                   	push   edi
c0010dc5:	bf 08 00 00 00       	mov    edi,0x8
c0010dca:	56                   	push   esi
c0010dcb:	53                   	push   ebx
c0010dcc:	83 ec 14             	sub    esp,0x14
c0010dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010dd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dd7:	68 04 43 02 c0       	push   0xc0024304
c0010ddc:	e8 85 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010de1:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010de7:	83 c4 10             	add    esp,0x10
c0010dea:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010df1:	31 c9                	xor    ecx,ecx
c0010df3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010df7:	99                   	cdq    
c0010df8:	f7 ff                	idiv   edi
c0010dfa:	8d 42 24             	lea    eax,[edx+0x24]
c0010dfd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010e01:	85 f6                	test   esi,esi
c0010e03:	75 1a                	jne    c0010e1f <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010e05:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010e09:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010e0d:	50                   	push   eax
c0010e0e:	50                   	push   eax
c0010e0f:	52                   	push   edx
c0010e10:	68 1a 43 02 c0       	push   0xc002431a
c0010e15:	e8 4c 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	eb 1b                	jmp    c0010e3a <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010e1f:	41                   	inc    ecx
c0010e20:	83 f9 08             	cmp    ecx,0x8
c0010e23:	75 ce                	jne    c0010df3 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010e25:	83 ec 0c             	sub    esp,0xc
c0010e28:	be 01 00 00 00       	mov    esi,0x1
c0010e2d:	68 3b 43 02 c0       	push   0xc002433b
c0010e32:	e8 2f 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	83 c4 0c             	add    esp,0xc
c0010e3d:	89 f0                	mov    eax,esi
c0010e3f:	5b                   	pop    ebx
c0010e40:	5e                   	pop    esi
c0010e41:	5f                   	pop    edi
c0010e42:	5d                   	pop    ebp
c0010e43:	c3                   	ret    

c0010e44 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010e44:	55                   	push   ebp
c0010e45:	57                   	push   edi
c0010e46:	56                   	push   esi
c0010e47:	53                   	push   ebx
c0010e48:	83 ec 1c             	sub    esp,0x1c
c0010e4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010e4f:	85 db                	test   ebx,ebx
c0010e51:	0f 84 e0 00 00 00    	je     c0010f37 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010e57:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010e5e:	0f 84 d3 00 00 00    	je     c0010f37 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010e64:	31 c9                	xor    ecx,ecx
c0010e66:	bf 08 00 00 00       	mov    edi,0x8
c0010e6b:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010e71:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010e74:	99                   	cdq    
c0010e75:	f7 ff                	idiv   edi
c0010e77:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010e7e:	85 ed                	test   ebp,ebp
c0010e80:	0f 84 d2 00 00 00    	je     c0010f58 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0010e86:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010e8c:	89 e9                	mov    ecx,ebp
c0010e8e:	bf 01 00 00 00       	mov    edi,0x1
c0010e93:	d3 e7                	shl    edi,cl
c0010e95:	31 c9                	xor    ecx,ecx
c0010e97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e9b:	b8 01 00 00 00       	mov    eax,0x1
c0010ea0:	d3 e0                	shl    eax,cl
c0010ea2:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0010ea6:	74 0a                	je     c0010eb2 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0010ea8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010eac:	0f 85 85 00 00 00    	jne    c0010f37 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010eb2:	41                   	inc    ecx
c0010eb3:	83 f9 11             	cmp    ecx,0x11
c0010eb6:	75 e3                	jne    c0010e9b <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0010eb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ebc:	46                   	inc    esi
c0010ebd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010ec3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010ece:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010ed5:	09 f8                	or     eax,edi
c0010ed7:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010edd:	31 c0                	xor    eax,eax
c0010edf:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010ee7:	74 09                	je     c0010ef2 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0010ee9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ef0:	eb 06                	jmp    c0010ef8 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0010ef2:	40                   	inc    eax
c0010ef3:	83 f8 08             	cmp    eax,0x8
c0010ef6:	75 e7                	jne    c0010edf <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0010ef8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010efc:	83 fd 09             	cmp    ebp,0x9
c0010eff:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010f02:	89 2a                	mov    DWORD PTR [edx],ebp
c0010f04:	75 14                	jne    c0010f1a <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010f06:	83 ec 0c             	sub    esp,0xc
c0010f09:	68 4c 43 02 c0       	push   0xc002434c
c0010f0e:	e8 53 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010f13:	b8 a9 0c 01 c0       	mov    eax,0xc0010ca9
c0010f18:	eb 39                	jmp    c0010f53 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0010f1a:	83 f8 01             	cmp    eax,0x1
c0010f1d:	75 1c                	jne    c0010f3b <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0010f1f:	83 ec 0c             	sub    esp,0xc
c0010f22:	f7 d7                	not    edi
c0010f24:	68 56 43 02 c0       	push   0xc0024356
c0010f29:	e8 38 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010f2e:	83 c4 10             	add    esp,0x10
c0010f31:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010f37:	31 c0                	xor    eax,eax
c0010f39:	eb 30                	jmp    c0010f6b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010f3b:	85 c0                	test   eax,eax
c0010f3d:	75 2c                	jne    c0010f6b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010f3f:	83 ec 0c             	sub    esp,0xc
c0010f42:	68 63 43 02 c0       	push   0xc0024363
c0010f47:	e8 1a 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010f4c:	8b 04 ad 60 66 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd99a0]
c0010f53:	83 c4 10             	add    esp,0x10
c0010f56:	eb 13                	jmp    c0010f6b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010f58:	41                   	inc    ecx
c0010f59:	46                   	inc    esi
c0010f5a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010f60:	83 f9 08             	cmp    ecx,0x8
c0010f63:	0f 85 02 ff ff ff    	jne    c0010e6b <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0010f69:	eb cc                	jmp    c0010f37 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f6b:	83 c4 1c             	add    esp,0x1c
c0010f6e:	5b                   	pop    ebx
c0010f6f:	5e                   	pop    esi
c0010f70:	5f                   	pop    edi
c0010f71:	5d                   	pop    ebp
c0010f72:	c3                   	ret    

c0010f73 <KiCheckSignalZ>:
c0010f73:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c0010f7a:	74 43                	je     c0010fbf <KiCheckSignalZ+0x4c>
c0010f7c:	83 ec 24             	sub    esp,0x24
c0010f7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0010f83:	50                   	push   eax
c0010f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f8c:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0010f92:	e8 ad fe ff ff       	call   c0010e44 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	31 d2                	xor    edx,edx
c0010f9c:	85 c0                	test   eax,eax
c0010f9e:	74 19                	je     c0010fb9 <KiCheckSignalZ+0x46>
c0010fa0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010fa6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010fa9:	89 02                	mov    DWORD PTR [edx],eax
c0010fab:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010fb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010fb9:	89 d0                	mov    eax,edx
c0010fbb:	83 c4 1c             	add    esp,0x1c
c0010fbe:	c3                   	ret    
c0010fbf:	31 d2                	xor    edx,edx
c0010fc1:	89 d0                	mov    eax,edx
c0010fc3:	c3                   	ret    

c0010fc4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010fc4:	56                   	push   esi
c0010fc5:	53                   	push   ebx
c0010fc6:	bb 01 00 00 00       	mov    ebx,0x1
c0010fcb:	52                   	push   edx
c0010fcc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010fd0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fd4:	d3 e3                	shl    ebx,cl
c0010fd6:	83 f9 10             	cmp    ecx,0x10
c0010fd9:	7f 08                	jg     c0010fe3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010fdb:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010fe1:	75 10                	jne    c0010ff3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010fe3:	83 ec 0c             	sub    esp,0xc
c0010fe6:	68 86 43 02 c0       	push   0xc0024386
c0010feb:	e8 20 eb ff ff       	call   c000fb10 <KePanic(char const*)>
c0010ff0:	83 c4 10             	add    esp,0x10
c0010ff3:	f7 d3                	not    ebx
c0010ff5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010ffb:	58                   	pop    eax
c0010ffc:	5b                   	pop    ebx
c0010ffd:	5e                   	pop    esi
c0010ffe:	c3                   	ret    

c0010fff <KiFinishSignalZ>:
c0010fff:	53                   	push   ebx
c0011000:	83 ec 08             	sub    esp,0x8
c0011003:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001100c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001100f:	83 fa 08             	cmp    edx,0x8
c0011012:	75 0c                	jne    c0011020 <KiFinishSignalZ+0x21>
c0011014:	83 ec 0c             	sub    esp,0xc
c0011017:	50                   	push   eax
c0011018:	e8 7f 5f 00 00       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c001101d:	83 c4 10             	add    esp,0x10
c0011020:	50                   	push   eax
c0011021:	50                   	push   eax
c0011022:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011025:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001102a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001102d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011033:	e8 8c ff ff ff       	call   c0010fc4 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011038:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001103e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011045:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001104c:	83 c4 18             	add    esp,0x18
c001104f:	5b                   	pop    ebx
c0011050:	c3                   	ret    

c0011051 <SysSeekDir(regs*)>:
c0011051:	31 c0                	xor    eax,eax
c0011053:	31 d2                	xor    edx,edx
c0011055:	c3                   	ret    

c0011056 <SysTellDir(regs*)>:
c0011056:	31 c0                	xor    eax,eax
c0011058:	31 d2                	xor    edx,edx
c001105a:	c3                   	ret    

c001105b <SysVerify(regs*)>:
c001105b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001105f:	31 d2                	xor    edx,edx
c0011061:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011064:	c3                   	ret    

c0011065 <SysGetArgc(regs*)>:
c0011065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001106a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001106d:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011073:	89 c2                	mov    edx,eax
c0011075:	c1 fa 1f             	sar    edx,0x1f
c0011078:	c3                   	ret    

c0011079 <SysTTYName(regs*)>:
c0011079:	b8 01 00 00 00       	mov    eax,0x1
c001107e:	31 d2                	xor    edx,edx
c0011080:	c3                   	ret    

c0011081 <SysFormatDisk(regs*)>:
c0011081:	56                   	push   esi
c0011082:	53                   	push   ebx
c0011083:	83 ec 04             	sub    esp,0x4
c0011086:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001108a:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011090:	eb 2a                	jmp    c00110bc <SysFormatDisk(regs*)+0x3b>
c0011092:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011095:	83 ec 0c             	sub    esp,0xc
c0011098:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001109b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001109d:	51                   	push   ecx
c001109e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00110a1:	51                   	push   ecx
c00110a2:	50                   	push   eax
c00110a3:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00110aa:	50                   	push   eax
c00110ab:	53                   	push   ebx
c00110ac:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00110af:	83 c4 20             	add    esp,0x20
c00110b2:	83 f8 08             	cmp    eax,0x8
c00110b5:	89 c1                	mov    ecx,eax
c00110b7:	75 14                	jne    c00110cd <SysFormatDisk(regs*)+0x4c>
c00110b9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00110bc:	85 db                	test   ebx,ebx
c00110be:	75 d2                	jne    c0011092 <SysFormatDisk(regs*)+0x11>
c00110c0:	b8 03 00 00 00       	mov    eax,0x3
c00110c5:	31 d2                	xor    edx,edx
c00110c7:	83 c4 04             	add    esp,0x4
c00110ca:	5b                   	pop    ebx
c00110cb:	5e                   	pop    esi
c00110cc:	c3                   	ret    
c00110cd:	85 c0                	test   eax,eax
c00110cf:	74 13                	je     c00110e4 <SysFormatDisk(regs*)+0x63>
c00110d1:	31 d2                	xor    edx,edx
c00110d3:	83 f9 09             	cmp    ecx,0x9
c00110d6:	b8 01 00 00 00       	mov    eax,0x1
c00110db:	74 ea                	je     c00110c7 <SysFormatDisk(regs*)+0x46>
c00110dd:	b8 02 00 00 00       	mov    eax,0x2
c00110e2:	eb e1                	jmp    c00110c5 <SysFormatDisk(regs*)+0x44>
c00110e4:	31 c0                	xor    eax,eax
c00110e6:	eb dd                	jmp    c00110c5 <SysFormatDisk(regs*)+0x44>

c00110e8 <SysSetDiskVolumeLabel(regs*)>:
c00110e8:	56                   	push   esi
c00110e9:	53                   	push   ebx
c00110ea:	83 ec 04             	sub    esp,0x4
c00110ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110f1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00110f4:	83 f8 19             	cmp    eax,0x19
c00110f7:	77 33                	ja     c001112c <SysSetDiskVolumeLabel(regs*)+0x44>
c00110f9:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c0011100:	85 c9                	test   ecx,ecx
c0011102:	74 28                	je     c001112c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011104:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011107:	85 db                	test   ebx,ebx
c0011109:	74 21                	je     c001112c <SysSetDiskVolumeLabel(regs*)+0x44>
c001110b:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011111:	85 d2                	test   edx,edx
c0011113:	74 17                	je     c001112c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011115:	8b 32                	mov    esi,DWORD PTR [edx]
c0011117:	53                   	push   ebx
c0011118:	50                   	push   eax
c0011119:	51                   	push   ecx
c001111a:	52                   	push   edx
c001111b:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	83 c4 04             	add    esp,0x4
c0011124:	5b                   	pop    ebx
c0011125:	5e                   	pop    esi
c0011126:	89 c2                	mov    edx,eax
c0011128:	c1 fa 1f             	sar    edx,0x1f
c001112b:	c3                   	ret    
c001112c:	83 c4 04             	add    esp,0x4
c001112f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011134:	5b                   	pop    ebx
c0011135:	ba ff ff ff ff       	mov    edx,0xffffffff
c001113a:	5e                   	pop    esi
c001113b:	c3                   	ret    

c001113c <SysGetDiskVolumeLabel(regs*)>:
c001113c:	57                   	push   edi
c001113d:	56                   	push   esi
c001113e:	53                   	push   ebx
c001113f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011143:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011146:	83 fa 19             	cmp    edx,0x19
c0011149:	77 3c                	ja     c0011187 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001114b:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c0011152:	85 c9                	test   ecx,ecx
c0011154:	74 31                	je     c0011187 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011156:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011159:	85 db                	test   ebx,ebx
c001115b:	74 2a                	je     c0011187 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001115d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011160:	85 f6                	test   esi,esi
c0011162:	74 23                	je     c0011187 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011164:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001116a:	85 c0                	test   eax,eax
c001116c:	74 19                	je     c0011187 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001116e:	83 ec 0c             	sub    esp,0xc
c0011171:	8b 38                	mov    edi,DWORD PTR [eax]
c0011173:	56                   	push   esi
c0011174:	53                   	push   ebx
c0011175:	52                   	push   edx
c0011176:	51                   	push   ecx
c0011177:	50                   	push   eax
c0011178:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001117b:	83 c4 20             	add    esp,0x20
c001117e:	5b                   	pop    ebx
c001117f:	5e                   	pop    esi
c0011180:	89 c2                	mov    edx,eax
c0011182:	c1 fa 1f             	sar    edx,0x1f
c0011185:	5f                   	pop    edi
c0011186:	c3                   	ret    
c0011187:	5b                   	pop    ebx
c0011188:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001118d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011192:	5e                   	pop    esi
c0011193:	5f                   	pop    edi
c0011194:	c3                   	ret    

c0011195 <SysRealpath(regs*)>:
c0011195:	53                   	push   ebx
c0011196:	83 ec 08             	sub    esp,0x8
c0011199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00111a0:	85 c9                	test   ecx,ecx
c00111a2:	74 36                	je     c00111da <SysRealpath(regs*)+0x45>
c00111a4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00111a7:	31 d2                	xor    edx,edx
c00111a9:	b8 01 00 00 00       	mov    eax,0x1
c00111ae:	85 db                	test   ebx,ebx
c00111b0:	75 05                	jne    c00111b7 <SysRealpath(regs*)+0x22>
c00111b2:	83 c4 08             	add    esp,0x8
c00111b5:	5b                   	pop    ebx
c00111b6:	c3                   	ret    
c00111b7:	6a 00                	push   0x0
c00111b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111c1:	05 0c 01 00 00       	add    eax,0x10c
c00111c6:	50                   	push   eax
c00111c7:	51                   	push   ecx
c00111c8:	53                   	push   ebx
c00111c9:	e8 8e 6c ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00111ce:	83 c4 10             	add    esp,0x10
c00111d1:	31 c0                	xor    eax,eax
c00111d3:	31 d2                	xor    edx,edx
c00111d5:	83 c4 08             	add    esp,0x8
c00111d8:	5b                   	pop    ebx
c00111d9:	c3                   	ret    
c00111da:	b8 01 00 00 00       	mov    eax,0x1
c00111df:	31 d2                	xor    edx,edx
c00111e1:	eb f2                	jmp    c00111d5 <SysRealpath(regs*)+0x40>

c00111e3 <SysReadDir(regs*)>:
c00111e3:	53                   	push   ebx
c00111e4:	83 ec 18             	sub    esp,0x18
c00111e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111eb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111ee:	83 f8 02             	cmp    eax,0x2
c00111f1:	76 4f                	jbe    c0011242 <SysReadDir(regs*)+0x5f>
c00111f3:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00111fa:	77 52                	ja     c001124e <SysReadDir(regs*)+0x6b>
c00111fc:	83 ec 0c             	sub    esp,0xc
c00111ff:	50                   	push   eax
c0011200:	e8 98 1d 00 00       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	85 c0                	test   eax,eax
c001120a:	74 42                	je     c001124e <SysReadDir(regs*)+0x6b>
c001120c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011214:	83 ec 0c             	sub    esp,0xc
c0011217:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001121b:	8b 10                	mov    edx,DWORD PTR [eax]
c001121d:	51                   	push   ecx
c001121e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011221:	51                   	push   ecx
c0011222:	6a 00                	push   0x0
c0011224:	68 10 01 00 00       	push   0x110
c0011229:	50                   	push   eax
c001122a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001122d:	83 c4 20             	add    esp,0x20
c0011230:	85 c0                	test   eax,eax
c0011232:	89 c1                	mov    ecx,eax
c0011234:	74 27                	je     c001125d <SysReadDir(regs*)+0x7a>
c0011236:	31 d2                	xor    edx,edx
c0011238:	83 f9 07             	cmp    ecx,0x7
c001123b:	b8 02 00 00 00       	mov    eax,0x2
c0011240:	75 16                	jne    c0011258 <SysReadDir(regs*)+0x75>
c0011242:	b8 01 00 00 00       	mov    eax,0x1
c0011247:	31 d2                	xor    edx,edx
c0011249:	83 c4 18             	add    esp,0x18
c001124c:	5b                   	pop    ebx
c001124d:	c3                   	ret    
c001124e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011253:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011258:	83 c4 18             	add    esp,0x18
c001125b:	5b                   	pop    ebx
c001125c:	c3                   	ret    
c001125d:	31 c0                	xor    eax,eax
c001125f:	31 d2                	xor    edx,edx
c0011261:	eb e6                	jmp    c0011249 <SysReadDir(regs*)+0x66>

c0011263 <SysIsATTY(regs*)>:
c0011263:	83 ec 0c             	sub    esp,0xc
c0011266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001126d:	83 f8 02             	cmp    eax,0x2
c0011270:	76 07                	jbe    c0011279 <SysIsATTY(regs*)+0x16>
c0011272:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011277:	75 26                	jne    c001129f <SysIsATTY(regs*)+0x3c>
c0011279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001127e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011281:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011287:	85 c0                	test   eax,eax
c0011289:	74 24                	je     c00112af <SysIsATTY(regs*)+0x4c>
c001128b:	8b 10                	mov    edx,DWORD PTR [eax]
c001128d:	83 ec 0c             	sub    esp,0xc
c0011290:	50                   	push   eax
c0011291:	ff 12                	call   DWORD PTR [edx]
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	31 d2                	xor    edx,edx
c0011298:	83 c4 0c             	add    esp,0xc
c001129b:	0f b6 c0             	movzx  eax,al
c001129e:	c3                   	ret    
c001129f:	83 ec 0c             	sub    esp,0xc
c00112a2:	50                   	push   eax
c00112a3:	e8 f5 1c 00 00       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c00112a8:	83 c4 10             	add    esp,0x10
c00112ab:	85 c0                	test   eax,eax
c00112ad:	75 dc                	jne    c001128b <SysIsATTY(regs*)+0x28>
c00112af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112b9:	83 c4 0c             	add    esp,0xc
c00112bc:	c3                   	ret    

c00112bd <SysSeek(regs*)>:
c00112bd:	53                   	push   ebx
c00112be:	83 ec 08             	sub    esp,0x8
c00112c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112c8:	8d 50 fd             	lea    edx,[eax-0x3]
c00112cb:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00112d1:	77 39                	ja     c001130c <SysSeek(regs*)+0x4f>
c00112d3:	83 ec 0c             	sub    esp,0xc
c00112d6:	50                   	push   eax
c00112d7:	e8 c1 1c 00 00       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c00112dc:	83 c4 10             	add    esp,0x10
c00112df:	85 c0                	test   eax,eax
c00112e1:	74 29                	je     c001130c <SysSeek(regs*)+0x4f>
c00112e3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00112e6:	83 ec 04             	sub    esp,0x4
c00112e9:	31 db                	xor    ebx,ebx
c00112eb:	53                   	push   ebx
c00112ec:	51                   	push   ecx
c00112ed:	50                   	push   eax
c00112ee:	e8 71 6f ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00112f3:	83 c4 10             	add    esp,0x10
c00112f6:	85 c0                	test   eax,eax
c00112f8:	0f 95 c0             	setne  al
c00112fb:	31 d2                	xor    edx,edx
c00112fd:	0f b6 c0             	movzx  eax,al
c0011300:	f7 d8                	neg    eax
c0011302:	83 d2 00             	adc    edx,0x0
c0011305:	83 c4 08             	add    esp,0x8
c0011308:	5b                   	pop    ebx
c0011309:	f7 da                	neg    edx
c001130b:	c3                   	ret    
c001130c:	83 c4 08             	add    esp,0x8
c001130f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011314:	5b                   	pop    ebx
c0011315:	ba ff ff ff ff       	mov    edx,0xffffffff
c001131a:	c3                   	ret    

c001131b <SysTell(regs*)>:
c001131b:	53                   	push   ebx
c001131c:	83 ec 08             	sub    esp,0x8
c001131f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011323:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011326:	83 f8 02             	cmp    eax,0x2
c0011329:	76 56                	jbe    c0011381 <SysTell(regs*)+0x66>
c001132b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011330:	76 19                	jbe    c001134b <SysTell(regs*)+0x30>
c0011332:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011335:	31 d2                	xor    edx,edx
c0011337:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001133d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011344:	83 c4 08             	add    esp,0x8
c0011347:	31 c0                	xor    eax,eax
c0011349:	5b                   	pop    ebx
c001134a:	c3                   	ret    
c001134b:	83 ec 0c             	sub    esp,0xc
c001134e:	50                   	push   eax
c001134f:	e8 49 1c 00 00       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c0011354:	83 c4 10             	add    esp,0x10
c0011357:	85 c0                	test   eax,eax
c0011359:	74 26                	je     c0011381 <SysTell(regs*)+0x66>
c001135b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001135e:	83 ec 08             	sub    esp,0x8
c0011361:	52                   	push   edx
c0011362:	50                   	push   eax
c0011363:	e8 a8 6f ff ff       	call   c0008310 <File::tell(unsigned long long*)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	85 c0                	test   eax,eax
c001136d:	0f 95 c0             	setne  al
c0011370:	31 d2                	xor    edx,edx
c0011372:	0f b6 c0             	movzx  eax,al
c0011375:	f7 d8                	neg    eax
c0011377:	83 d2 00             	adc    edx,0x0
c001137a:	83 c4 08             	add    esp,0x8
c001137d:	5b                   	pop    ebx
c001137e:	f7 da                	neg    edx
c0011380:	c3                   	ret    
c0011381:	83 c4 08             	add    esp,0x8
c0011384:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011389:	5b                   	pop    ebx
c001138a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001138f:	c3                   	ret    

c0011390 <SysSize(regs*)>:
c0011390:	53                   	push   ebx
c0011391:	83 ec 18             	sub    esp,0x18
c0011394:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011398:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001139b:	83 f8 02             	cmp    eax,0x2
c001139e:	76 5b                	jbe    c00113fb <SysSize(regs*)+0x6b>
c00113a0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113a5:	76 19                	jbe    c00113c0 <SysSize(regs*)+0x30>
c00113a7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00113aa:	31 d2                	xor    edx,edx
c00113ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113b9:	83 c4 18             	add    esp,0x18
c00113bc:	31 c0                	xor    eax,eax
c00113be:	5b                   	pop    ebx
c00113bf:	c3                   	ret    
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	50                   	push   eax
c00113c4:	e8 d4 1b 00 00       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c00113c9:	83 c4 10             	add    esp,0x10
c00113cc:	85 c0                	test   eax,eax
c00113ce:	74 2b                	je     c00113fb <SysSize(regs*)+0x6b>
c00113d0:	83 ec 04             	sub    esp,0x4
c00113d3:	8d 54 24 13          	lea    edx,[esp+0x13]
c00113d7:	52                   	push   edx
c00113d8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113db:	52                   	push   edx
c00113dc:	50                   	push   eax
c00113dd:	e8 c6 70 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00113e2:	83 c4 10             	add    esp,0x10
c00113e5:	85 c0                	test   eax,eax
c00113e7:	0f 95 c0             	setne  al
c00113ea:	31 d2                	xor    edx,edx
c00113ec:	0f b6 c0             	movzx  eax,al
c00113ef:	f7 d8                	neg    eax
c00113f1:	83 d2 00             	adc    edx,0x0
c00113f4:	83 c4 18             	add    esp,0x18
c00113f7:	5b                   	pop    ebx
c00113f8:	f7 da                	neg    edx
c00113fa:	c3                   	ret    
c00113fb:	83 c4 18             	add    esp,0x18
c00113fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011403:	5b                   	pop    ebx
c0011404:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011409:	c3                   	ret    

c001140a <SysSizeFromFilename(regs*)>:
c001140a:	55                   	push   ebp
c001140b:	57                   	push   edi
c001140c:	56                   	push   esi
c001140d:	53                   	push   ebx
c001140e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011414:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001141b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001141e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011421:	85 f6                	test   esi,esi
c0011423:	89 f8                	mov    eax,edi
c0011425:	74 09                	je     c0011430 <SysSizeFromFilename(regs*)+0x26>
c0011427:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001142d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011430:	83 f8 02             	cmp    eax,0x2
c0011433:	0f 86 c9 00 00 00    	jbe    c0011502 <SysSizeFromFilename(regs*)+0xf8>
c0011439:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001143e:	76 1f                	jbe    c001145f <SysSizeFromFilename(regs*)+0x55>
c0011440:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011443:	31 d2                	xor    edx,edx
c0011445:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001144b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011452:	31 c0                	xor    eax,eax
c0011454:	81 c4 4c 02 00 00    	add    esp,0x24c
c001145a:	5b                   	pop    ebx
c001145b:	5e                   	pop    esi
c001145c:	5f                   	pop    edi
c001145d:	5d                   	pop    ebp
c001145e:	c3                   	ret    
c001145f:	83 ec 0c             	sub    esp,0xc
c0011462:	68 14 01 00 00       	push   0x114
c0011467:	e8 48 e2 ff ff       	call   c000f6b4 <malloc>
c001146c:	6a 01                	push   0x1
c001146e:	89 c5                	mov    ebp,eax
c0011470:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011475:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011478:	50                   	push   eax
c0011479:	57                   	push   edi
c001147a:	55                   	push   ebp
c001147b:	e8 0a 6c ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011480:	83 c4 20             	add    esp,0x20
c0011483:	85 ed                	test   ebp,ebp
c0011485:	74 7b                	je     c0011502 <SysSizeFromFilename(regs*)+0xf8>
c0011487:	83 ec 04             	sub    esp,0x4
c001148a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001148e:	50                   	push   eax
c001148f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011492:	51                   	push   ecx
c0011493:	55                   	push   ebp
c0011494:	e8 0f 70 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0011499:	89 c3                	mov    ebx,eax
c001149b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001149e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00114a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114a4:	83 c4 10             	add    esp,0x10
c00114a7:	85 db                	test   ebx,ebx
c00114a9:	75 57                	jne    c0011502 <SysSizeFromFilename(regs*)+0xf8>
c00114ab:	6a 00                	push   0x0
c00114ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114b5:	05 0c 01 00 00       	add    eax,0x10c
c00114ba:	50                   	push   eax
c00114bb:	57                   	push   edi
c00114bc:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00114c3:	53                   	push   ebx
c00114c4:	e8 93 69 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00114c9:	58                   	pop    eax
c00114ca:	5a                   	pop    edx
c00114cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00114cf:	50                   	push   eax
c00114d0:	53                   	push   ebx
c00114d1:	e8 0d 64 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c00114d6:	83 c4 10             	add    esp,0x10
c00114d9:	ba 00 00 00 00       	mov    edx,0x0
c00114de:	83 f8 01             	cmp    eax,0x1
c00114e1:	b8 00 00 00 00       	mov    eax,0x0
c00114e6:	74 2f                	je     c0011517 <SysSizeFromFilename(regs*)+0x10d>
c00114e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00114ed:	74 3b                	je     c001152a <SysSizeFromFilename(regs*)+0x120>
c00114ef:	85 f6                	test   esi,esi
c00114f1:	0f 84 5d ff ff ff    	je     c0011454 <SysSizeFromFilename(regs*)+0x4a>
c00114f7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00114fd:	e9 52 ff ff ff       	jmp    c0011454 <SysSizeFromFilename(regs*)+0x4a>
c0011502:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011508:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001150d:	5b                   	pop    ebx
c001150e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011513:	5e                   	pop    esi
c0011514:	5f                   	pop    edi
c0011515:	5d                   	pop    ebp
c0011516:	c3                   	ret    
c0011517:	85 f6                	test   esi,esi
c0011519:	0f 84 35 ff ff ff    	je     c0011454 <SysSizeFromFilename(regs*)+0x4a>
c001151f:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011525:	e9 2a ff ff ff       	jmp    c0011454 <SysSizeFromFilename(regs*)+0x4a>
c001152a:	85 f6                	test   esi,esi
c001152c:	0f 84 22 ff ff ff    	je     c0011454 <SysSizeFromFilename(regs*)+0x4a>
c0011532:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011538:	e9 17 ff ff ff       	jmp    c0011454 <SysSizeFromFilename(regs*)+0x4a>

c001153d <SysSizeFromFilenameNoSymlink(regs*)>:
c001153d:	55                   	push   ebp
c001153e:	57                   	push   edi
c001153f:	56                   	push   esi
c0011540:	53                   	push   ebx
c0011541:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011547:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001154e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011551:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011554:	85 f6                	test   esi,esi
c0011556:	89 f8                	mov    eax,edi
c0011558:	74 09                	je     c0011563 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001155a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011560:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011563:	83 f8 02             	cmp    eax,0x2
c0011566:	0f 86 c9 00 00 00    	jbe    c0011635 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c001156c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011571:	76 1f                	jbe    c0011592 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0011573:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011576:	31 d2                	xor    edx,edx
c0011578:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001157e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011585:	31 c0                	xor    eax,eax
c0011587:	81 c4 4c 02 00 00    	add    esp,0x24c
c001158d:	5b                   	pop    ebx
c001158e:	5e                   	pop    esi
c001158f:	5f                   	pop    edi
c0011590:	5d                   	pop    ebp
c0011591:	c3                   	ret    
c0011592:	83 ec 0c             	sub    esp,0xc
c0011595:	68 14 01 00 00       	push   0x114
c001159a:	e8 15 e1 ff ff       	call   c000f6b4 <malloc>
c001159f:	6a 00                	push   0x0
c00115a1:	89 c5                	mov    ebp,eax
c00115a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115ab:	50                   	push   eax
c00115ac:	57                   	push   edi
c00115ad:	55                   	push   ebp
c00115ae:	e8 d7 6a ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00115b3:	83 c4 20             	add    esp,0x20
c00115b6:	85 ed                	test   ebp,ebp
c00115b8:	74 7b                	je     c0011635 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00115ba:	83 ec 04             	sub    esp,0x4
c00115bd:	8d 44 24 13          	lea    eax,[esp+0x13]
c00115c1:	50                   	push   eax
c00115c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115c5:	51                   	push   ecx
c00115c6:	55                   	push   ebp
c00115c7:	e8 dc 6e ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00115cc:	89 c3                	mov    ebx,eax
c00115ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00115d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00115d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	85 db                	test   ebx,ebx
c00115dc:	75 57                	jne    c0011635 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00115de:	6a 00                	push   0x0
c00115e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115e8:	05 0c 01 00 00       	add    eax,0x10c
c00115ed:	50                   	push   eax
c00115ee:	57                   	push   edi
c00115ef:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00115f6:	53                   	push   ebx
c00115f7:	e8 60 68 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115fc:	58                   	pop    eax
c00115fd:	5a                   	pop    edx
c00115fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011602:	50                   	push   eax
c0011603:	53                   	push   ebx
c0011604:	e8 da 62 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	ba 00 00 00 00       	mov    edx,0x0
c0011611:	83 f8 01             	cmp    eax,0x1
c0011614:	b8 00 00 00 00       	mov    eax,0x0
c0011619:	74 2f                	je     c001164a <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c001161b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011620:	74 3b                	je     c001165d <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011622:	85 f6                	test   esi,esi
c0011624:	0f 84 5d ff ff ff    	je     c0011587 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001162a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011630:	e9 52 ff ff ff       	jmp    c0011587 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011635:	81 c4 4c 02 00 00    	add    esp,0x24c
c001163b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011640:	5b                   	pop    ebx
c0011641:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011646:	5e                   	pop    esi
c0011647:	5f                   	pop    edi
c0011648:	5d                   	pop    ebp
c0011649:	c3                   	ret    
c001164a:	85 f6                	test   esi,esi
c001164c:	0f 84 35 ff ff ff    	je     c0011587 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011652:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011658:	e9 2a ff ff ff       	jmp    c0011587 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001165d:	85 f6                	test   esi,esi
c001165f:	0f 84 22 ff ff ff    	je     c0011587 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011665:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001166b:	e9 17 ff ff ff       	jmp    c0011587 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011670 <SysClose(regs*)>:
c0011670:	57                   	push   edi
c0011671:	56                   	push   esi
c0011672:	53                   	push   ebx
c0011673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011677:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001167a:	83 f8 02             	cmp    eax,0x2
c001167d:	76 44                	jbe    c00116c3 <SysClose(regs*)+0x53>
c001167f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011685:	31 f6                	xor    esi,esi
c0011687:	31 ff                	xor    edi,edi
c0011689:	83 fa 01             	cmp    edx,0x1
c001168c:	76 2d                	jbe    c00116bb <SysClose(regs*)+0x4b>
c001168e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011693:	77 2e                	ja     c00116c3 <SysClose(regs*)+0x53>
c0011695:	83 ec 0c             	sub    esp,0xc
c0011698:	50                   	push   eax
c0011699:	e8 ff 18 00 00       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c001169e:	83 c4 10             	add    esp,0x10
c00116a1:	85 c0                	test   eax,eax
c00116a3:	89 c3                	mov    ebx,eax
c00116a5:	74 1c                	je     c00116c3 <SysClose(regs*)+0x53>
c00116a7:	83 ec 0c             	sub    esp,0xc
c00116aa:	50                   	push   eax
c00116ab:	e8 54 6b ff ff       	call   c0008204 <File::close()>
c00116b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b8:	83 c4 10             	add    esp,0x10
c00116bb:	5b                   	pop    ebx
c00116bc:	89 f0                	mov    eax,esi
c00116be:	89 fa                	mov    edx,edi
c00116c0:	5e                   	pop    esi
c00116c1:	5f                   	pop    edi
c00116c2:	c3                   	ret    
c00116c3:	5b                   	pop    ebx
c00116c4:	be ff ff ff ff       	mov    esi,0xffffffff
c00116c9:	89 f0                	mov    eax,esi
c00116cb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00116d0:	89 fa                	mov    edx,edi
c00116d2:	5e                   	pop    esi
c00116d3:	5f                   	pop    edi
c00116d4:	c3                   	ret    

c00116d5 <SysOpenDir(regs*)>:
c00116d5:	56                   	push   esi
c00116d6:	53                   	push   ebx
c00116d7:	83 ec 04             	sub    esp,0x4
c00116da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116de:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00116e1:	85 c9                	test   ecx,ecx
c00116e3:	74 5d                	je     c0011742 <SysOpenDir(regs*)+0x6d>
c00116e5:	83 ec 0c             	sub    esp,0xc
c00116e8:	68 14 01 00 00       	push   0x114
c00116ed:	e8 c2 df ff ff       	call   c000f6b4 <malloc>
c00116f2:	83 c4 0c             	add    esp,0xc
c00116f5:	89 c6                	mov    esi,eax
c00116f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ff:	50                   	push   eax
c0011700:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011703:	52                   	push   edx
c0011704:	56                   	push   esi
c0011705:	e8 5e 6f ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	85 f6                	test   esi,esi
c001170f:	74 31                	je     c0011742 <SysOpenDir(regs*)+0x6d>
c0011711:	83 ec 0c             	sub    esp,0xc
c0011714:	56                   	push   esi
c0011715:	e8 16 70 ff ff       	call   c0008730 <Directory::open()>
c001171a:	83 c4 10             	add    esp,0x10
c001171d:	85 c0                	test   eax,eax
c001171f:	75 21                	jne    c0011742 <SysOpenDir(regs*)+0x6d>
c0011721:	83 ec 0c             	sub    esp,0xc
c0011724:	56                   	push   esi
c0011725:	e8 76 15 00 00       	call   c0012ca0 <UnixFile::getFileDescriptor()>
c001172a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	89 02                	mov    DWORD PTR [edx],eax
c0011732:	c1 f8 1f             	sar    eax,0x1f
c0011735:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011738:	83 c4 04             	add    esp,0x4
c001173b:	31 c0                	xor    eax,eax
c001173d:	5b                   	pop    ebx
c001173e:	31 d2                	xor    edx,edx
c0011740:	5e                   	pop    esi
c0011741:	c3                   	ret    
c0011742:	83 c4 04             	add    esp,0x4
c0011745:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001174a:	5b                   	pop    ebx
c001174b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011750:	5e                   	pop    esi
c0011751:	c3                   	ret    

c0011752 <SysMakeDir(regs*)>:
c0011752:	56                   	push   esi
c0011753:	53                   	push   ebx
c0011754:	83 ec 10             	sub    esp,0x10
c0011757:	68 14 01 00 00       	push   0x114
c001175c:	e8 53 df ff ff       	call   c000f6b4 <malloc>
c0011761:	83 c4 0c             	add    esp,0xc
c0011764:	89 c3                	mov    ebx,eax
c0011766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001176b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001176e:	50                   	push   eax
c001176f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011773:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011776:	52                   	push   edx
c0011777:	53                   	push   ebx
c0011778:	e8 eb 6e ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	85 db                	test   ebx,ebx
c0011782:	74 2c                	je     c00117b0 <SysMakeDir(regs*)+0x5e>
c0011784:	83 ec 0c             	sub    esp,0xc
c0011787:	53                   	push   ebx
c0011788:	e8 83 71 ff ff       	call   c0008910 <Directory::create()>
c001178d:	89 c6                	mov    esi,eax
c001178f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011791:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011794:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	31 c0                	xor    eax,eax
c001179c:	85 f6                	test   esi,esi
c001179e:	0f 95 c0             	setne  al
c00117a1:	31 d2                	xor    edx,edx
c00117a3:	f7 d8                	neg    eax
c00117a5:	83 d2 00             	adc    edx,0x0
c00117a8:	83 c4 04             	add    esp,0x4
c00117ab:	5b                   	pop    ebx
c00117ac:	f7 da                	neg    edx
c00117ae:	5e                   	pop    esi
c00117af:	c3                   	ret    
c00117b0:	83 c4 04             	add    esp,0x4
c00117b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117b8:	5b                   	pop    ebx
c00117b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117be:	5e                   	pop    esi
c00117bf:	c3                   	ret    

c00117c0 <SysCloseDir(regs*)>:
c00117c0:	53                   	push   ebx
c00117c1:	83 ec 08             	sub    esp,0x8
c00117c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117cb:	8d 50 fd             	lea    edx,[eax-0x3]
c00117ce:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00117d4:	77 2f                	ja     c0011805 <SysCloseDir(regs*)+0x45>
c00117d6:	83 ec 0c             	sub    esp,0xc
c00117d9:	50                   	push   eax
c00117da:	e8 be 17 00 00       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c00117df:	83 c4 10             	add    esp,0x10
c00117e2:	85 c0                	test   eax,eax
c00117e4:	89 c3                	mov    ebx,eax
c00117e6:	74 1d                	je     c0011805 <SysCloseDir(regs*)+0x45>
c00117e8:	83 ec 0c             	sub    esp,0xc
c00117eb:	50                   	push   eax
c00117ec:	e8 9b 6f ff ff       	call   c000878c <Directory::close()>
c00117f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	31 c0                	xor    eax,eax
c00117fe:	83 c4 08             	add    esp,0x8
c0011801:	31 d2                	xor    edx,edx
c0011803:	5b                   	pop    ebx
c0011804:	c3                   	ret    
c0011805:	83 c4 08             	add    esp,0x8
c0011808:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001180d:	5b                   	pop    ebx
c001180e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011813:	c3                   	ret    

c0011814 <SysWait(regs*)>:
c0011814:	83 ec 10             	sub    esp,0x10
c0011817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001181b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001181e:	52                   	push   edx
c001181f:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011822:	51                   	push   ecx
c0011823:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011826:	50                   	push   eax
c0011827:	e8 14 55 00 00       	call   c0016d40 <waitTask(int, int*, int)>
c001182c:	83 c4 1c             	add    esp,0x1c
c001182f:	89 c2                	mov    edx,eax
c0011831:	c1 fa 1f             	sar    edx,0x1f
c0011834:	c3                   	ret    

c0011835 <SysNotImpl(regs*)>:
c0011835:	83 ec 18             	sub    esp,0x18
c0011838:	68 97 43 02 c0       	push   0xc0024397
c001183d:	e8 ce e2 ff ff       	call   c000fb10 <KePanic(char const*)>
c0011842:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011847:	ba ff ff ff ff       	mov    edx,0xffffffff
c001184c:	83 c4 1c             	add    esp,0x1c
c001184f:	c3                   	ret    

c0011850 <SysPanic(regs*)>:
c0011850:	83 ec 18             	sub    esp,0x18
c0011853:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011857:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001185a:	50                   	push   eax
c001185b:	e8 b0 e2 ff ff       	call   c000fb10 <KePanic(char const*)>
c0011860:	b8 01 00 00 00       	mov    eax,0x1
c0011865:	31 d2                	xor    edx,edx
c0011867:	83 c4 1c             	add    esp,0x1c
c001186a:	c3                   	ret    

c001186b <SysRmdir(regs*)>:
c001186b:	56                   	push   esi
c001186c:	53                   	push   ebx
c001186d:	83 ec 10             	sub    esp,0x10
c0011870:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011874:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011877:	68 14 01 00 00       	push   0x114
c001187c:	e8 33 de ff ff       	call   c000f6b4 <malloc>
c0011881:	6a 00                	push   0x0
c0011883:	89 c3                	mov    ebx,eax
c0011885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001188a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001188d:	50                   	push   eax
c001188e:	56                   	push   esi
c001188f:	53                   	push   ebx
c0011890:	e8 f5 67 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011895:	83 c4 14             	add    esp,0x14
c0011898:	53                   	push   ebx
c0011899:	e8 d6 6a ff ff       	call   c0008374 <File::unlink()>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	85 db                	test   ebx,ebx
c00118a3:	89 c6                	mov    esi,eax
c00118a5:	74 0c                	je     c00118b3 <SysRmdir(regs*)+0x48>
c00118a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118a9:	83 ec 0c             	sub    esp,0xc
c00118ac:	53                   	push   ebx
c00118ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118b0:	83 c4 10             	add    esp,0x10
c00118b3:	31 c0                	xor    eax,eax
c00118b5:	85 f6                	test   esi,esi
c00118b7:	0f 95 c0             	setne  al
c00118ba:	31 d2                	xor    edx,edx
c00118bc:	f7 d8                	neg    eax
c00118be:	83 d2 00             	adc    edx,0x0
c00118c1:	83 c4 04             	add    esp,0x4
c00118c4:	5b                   	pop    ebx
c00118c5:	f7 da                	neg    edx
c00118c7:	5e                   	pop    esi
c00118c8:	c3                   	ret    

c00118c9 <SysUnlink(regs*)>:
c00118c9:	56                   	push   esi
c00118ca:	53                   	push   ebx
c00118cb:	83 ec 10             	sub    esp,0x10
c00118ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00118d5:	68 14 01 00 00       	push   0x114
c00118da:	e8 d5 dd ff ff       	call   c000f6b4 <malloc>
c00118df:	6a 00                	push   0x0
c00118e1:	89 c3                	mov    ebx,eax
c00118e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118eb:	50                   	push   eax
c00118ec:	56                   	push   esi
c00118ed:	53                   	push   ebx
c00118ee:	e8 97 67 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00118f3:	83 c4 14             	add    esp,0x14
c00118f6:	53                   	push   ebx
c00118f7:	e8 78 6a ff ff       	call   c0008374 <File::unlink()>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	85 db                	test   ebx,ebx
c0011901:	89 c6                	mov    esi,eax
c0011903:	74 0c                	je     c0011911 <SysUnlink(regs*)+0x48>
c0011905:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011907:	83 ec 0c             	sub    esp,0xc
c001190a:	53                   	push   ebx
c001190b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	31 c0                	xor    eax,eax
c0011913:	85 f6                	test   esi,esi
c0011915:	0f 95 c0             	setne  al
c0011918:	31 d2                	xor    edx,edx
c001191a:	f7 d8                	neg    eax
c001191c:	83 d2 00             	adc    edx,0x0
c001191f:	83 c4 04             	add    esp,0x4
c0011922:	5b                   	pop    ebx
c0011923:	f7 da                	neg    edx
c0011925:	5e                   	pop    esi
c0011926:	c3                   	ret    

c0011927 <SysGetArgv(regs*)>:
c0011927:	83 ec 0c             	sub    esp,0xc
c001192a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001192e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011931:	85 c0                	test   eax,eax
c0011933:	78 2c                	js     c0011961 <SysGetArgv(regs*)+0x3a>
c0011935:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001193b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001193e:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011944:	7d 1b                	jge    c0011961 <SysGetArgv(regs*)+0x3a>
c0011946:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c001194d:	85 c0                	test   eax,eax
c001194f:	74 18                	je     c0011969 <SysGetArgv(regs*)+0x42>
c0011951:	83 ec 08             	sub    esp,0x8
c0011954:	50                   	push   eax
c0011955:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011958:	50                   	push   eax
c0011959:	e8 f2 ec fe ff       	call   c0000650 <strcpy>
c001195e:	83 c4 10             	add    esp,0x10
c0011961:	31 c0                	xor    eax,eax
c0011963:	31 d2                	xor    edx,edx
c0011965:	83 c4 0c             	add    esp,0xc
c0011968:	c3                   	ret    
c0011969:	b8 01 00 00 00       	mov    eax,0x1
c001196e:	31 d2                	xor    edx,edx
c0011970:	83 c4 0c             	add    esp,0xc
c0011973:	c3                   	ret    

c0011974 <SysUSleep(regs*)>:
c0011974:	83 ec 1c             	sub    esp,0x1c
c0011977:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001197b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001197e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011981:	6a 00                	push   0x0
c0011983:	6a 64                	push   0x64
c0011985:	52                   	push   edx
c0011986:	50                   	push   eax
c0011987:	e8 08 ff 00 00       	call   c0021894 <__udivdi3>
c001198c:	83 c4 18             	add    esp,0x18
c001198f:	52                   	push   edx
c0011990:	50                   	push   eax
c0011991:	e8 a2 54 00 00       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0011996:	31 c0                	xor    eax,eax
c0011998:	31 d2                	xor    edx,edx
c001199a:	83 c4 1c             	add    esp,0x1c
c001199d:	c3                   	ret    

c001199e <SysSpawn(regs*)>:
c001199e:	56                   	push   esi
c001199f:	53                   	push   ebx
c00119a0:	83 ec 04             	sub    esp,0x4
c00119a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119a7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00119aa:	85 f6                	test   esi,esi
c00119ac:	75 0a                	jne    c00119b8 <SysSpawn(regs*)+0x1a>
c00119ae:	83 c4 04             	add    esp,0x4
c00119b1:	31 c0                	xor    eax,eax
c00119b3:	5b                   	pop    ebx
c00119b4:	31 d2                	xor    edx,edx
c00119b6:	5e                   	pop    esi
c00119b7:	c3                   	ret    
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	68 c4 07 00 00       	push   0x7c4
c00119c0:	e8 ef dc ff ff       	call   c000f6b4 <malloc>
c00119c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00119ce:	89 c6                	mov    esi,eax
c00119d0:	31 c0                	xor    eax,eax
c00119d2:	85 c9                	test   ecx,ecx
c00119d4:	74 08                	je     c00119de <SysSpawn(regs*)+0x40>
c00119d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119de:	52                   	push   edx
c00119df:	50                   	push   eax
c00119e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119e3:	50                   	push   eax
c00119e4:	56                   	push   esi
c00119e5:	e8 3a 4b 00 00       	call   c0016524 <Process::Process(char const*, Process*, char**)>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c00119f4:	75 b8                	jne    c00119ae <SysSpawn(regs*)+0x10>
c00119f6:	83 ec 0c             	sub    esp,0xc
c00119f9:	56                   	push   esi
c00119fa:	e8 dd 50 00 00       	call   c0016adc <Process::createUserThread()>
c00119ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	83 c4 04             	add    esp,0x4
c0011a07:	5b                   	pop    ebx
c0011a08:	89 c2                	mov    edx,eax
c0011a0a:	c1 fa 1f             	sar    edx,0x1f
c0011a0d:	5e                   	pop    esi
c0011a0e:	c3                   	ret    

c0011a0f <SysGetEnv(regs*)>:
c0011a0f:	57                   	push   edi
c0011a10:	56                   	push   esi
c0011a11:	53                   	push   ebx
c0011a12:	83 ec 1c             	sub    esp,0x1c
c0011a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a1e:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011a21:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a24:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a27:	51                   	push   ecx
c0011a28:	e8 78 cb ff ff       	call   c000e5a5 <KeGetProcessTotalEnvCount(Process*)>
c0011a2d:	83 c4 10             	add    esp,0x10
c0011a30:	39 c7                	cmp    edi,eax
c0011a32:	7c 12                	jl     c0011a46 <SysGetEnv(regs*)+0x37>
c0011a34:	31 c0                	xor    eax,eax
c0011a36:	31 d2                	xor    edx,edx
c0011a38:	85 f6                	test   esi,esi
c0011a3a:	74 03                	je     c0011a3f <SysGetEnv(regs*)+0x30>
c0011a3c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011a3f:	83 c4 10             	add    esp,0x10
c0011a42:	5b                   	pop    ebx
c0011a43:	5e                   	pop    esi
c0011a44:	5f                   	pop    edi
c0011a45:	c3                   	ret    
c0011a46:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011a4a:	83 ec 04             	sub    esp,0x4
c0011a4d:	57                   	push   edi
c0011a4e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011a54:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011a57:	57                   	push   edi
c0011a58:	50                   	push   eax
c0011a59:	e8 67 cb ff ff       	call   c000e5c5 <KeGetProcessEnvPair(Process*, int)>
c0011a5e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011a69:	83 c4 0c             	add    esp,0xc
c0011a6c:	85 d2                	test   edx,edx
c0011a6e:	75 23                	jne    c0011a93 <SysGetEnv(regs*)+0x84>
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	50                   	push   eax
c0011a74:	e8 07 eb fe ff       	call   c0000580 <strlen>
c0011a79:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a7c:	89 c3                	mov    ebx,eax
c0011a7e:	e8 fd ea fe ff       	call   c0000580 <strlen>
c0011a83:	83 c4 10             	add    esp,0x10
c0011a86:	31 d2                	xor    edx,edx
c0011a88:	83 c4 10             	add    esp,0x10
c0011a8b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011a8f:	5b                   	pop    ebx
c0011a90:	5e                   	pop    esi
c0011a91:	5f                   	pop    edi
c0011a92:	c3                   	ret    
c0011a93:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011a96:	83 ec 08             	sub    esp,0x8
c0011a99:	50                   	push   eax
c0011a9a:	56                   	push   esi
c0011a9b:	e8 b0 eb fe ff       	call   c0000650 <strcpy>
c0011aa0:	58                   	pop    eax
c0011aa1:	5a                   	pop    edx
c0011aa2:	68 b1 43 02 c0       	push   0xc00243b1
c0011aa7:	56                   	push   esi
c0011aa8:	e8 c3 ed fe ff       	call   c0000870 <strcat>
c0011aad:	59                   	pop    ecx
c0011aae:	5b                   	pop    ebx
c0011aaf:	57                   	push   edi
c0011ab0:	56                   	push   esi
c0011ab1:	e8 ba ed fe ff       	call   c0000870 <strcat>
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	31 c0                	xor    eax,eax
c0011abb:	83 c4 10             	add    esp,0x10
c0011abe:	31 d2                	xor    edx,edx
c0011ac0:	5b                   	pop    ebx
c0011ac1:	5e                   	pop    esi
c0011ac2:	5f                   	pop    edi
c0011ac3:	c3                   	ret    

c0011ac4 <SysSetFatAttrib(regs*)>:
c0011ac4:	57                   	push   edi
c0011ac5:	56                   	push   esi
c0011ac6:	53                   	push   ebx
c0011ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011acb:	83 ec 0c             	sub    esp,0xc
c0011ace:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011ad1:	68 14 01 00 00       	push   0x114
c0011ad6:	e8 d9 db ff ff       	call   c000f6b4 <malloc>
c0011adb:	83 c4 0c             	add    esp,0xc
c0011ade:	89 c3                	mov    ebx,eax
c0011ae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ae8:	50                   	push   eax
c0011ae9:	57                   	push   edi
c0011aea:	53                   	push   ebx
c0011aeb:	e8 98 66 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011af0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011af3:	83 c4 0c             	add    esp,0xc
c0011af6:	0f b6 d4             	movzx  edx,ah
c0011af9:	0f b6 c0             	movzx  eax,al
c0011afc:	52                   	push   edx
c0011afd:	50                   	push   eax
c0011afe:	53                   	push   ebx
c0011aff:	e8 0a 69 ff ff       	call   c000840e <File::chfatattr(unsigned char, unsigned char)>
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	85 db                	test   ebx,ebx
c0011b09:	89 c6                	mov    esi,eax
c0011b0b:	74 0c                	je     c0011b19 <SysSetFatAttrib(regs*)+0x55>
c0011b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b0f:	83 ec 0c             	sub    esp,0xc
c0011b12:	53                   	push   ebx
c0011b13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b16:	83 c4 10             	add    esp,0x10
c0011b19:	5b                   	pop    ebx
c0011b1a:	31 c0                	xor    eax,eax
c0011b1c:	85 f6                	test   esi,esi
c0011b1e:	0f 95 c0             	setne  al
c0011b21:	31 d2                	xor    edx,edx
c0011b23:	5e                   	pop    esi
c0011b24:	f7 d8                	neg    eax
c0011b26:	83 d2 00             	adc    edx,0x0
c0011b29:	f7 da                	neg    edx
c0011b2b:	5f                   	pop    edi
c0011b2c:	c3                   	ret    

c0011b2d <SysShutdown(regs*)>:
c0011b2d:	83 ec 1c             	sub    esp,0x1c
c0011b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b34:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011b37:	85 c9                	test   ecx,ecx
c0011b39:	74 18                	je     c0011b53 <SysShutdown(regs*)+0x26>
c0011b3b:	83 f9 01             	cmp    ecx,0x1
c0011b3e:	74 26                	je     c0011b66 <SysShutdown(regs*)+0x39>
c0011b40:	83 f9 02             	cmp    ecx,0x2
c0011b43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b48:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b4d:	74 24                	je     c0011b73 <SysShutdown(regs*)+0x46>
c0011b4f:	83 c4 1c             	add    esp,0x1c
c0011b52:	c3                   	ret    
c0011b53:	e8 a8 e9 ff ff       	call   c0010500 <KeShutdown()>
c0011b58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b62:	83 c4 1c             	add    esp,0x1c
c0011b65:	c3                   	ret    
c0011b66:	e8 cb e9 ff ff       	call   c0010536 <KeSleep()>
c0011b6b:	31 c0                	xor    eax,eax
c0011b6d:	31 d2                	xor    edx,edx
c0011b6f:	83 c4 1c             	add    esp,0x1c
c0011b72:	c3                   	ret    
c0011b73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011b77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011b7b:	e8 e6 e9 ff ff       	call   c0010566 <KeRestart()>
c0011b80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b88:	eb c5                	jmp    c0011b4f <SysShutdown(regs*)+0x22>

c0011b8a <SysPipe(regs*)>:
c0011b8a:	57                   	push   edi
c0011b8b:	56                   	push   esi
c0011b8c:	53                   	push   ebx
c0011b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b91:	83 ec 0c             	sub    esp,0xc
c0011b94:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011b97:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b9a:	6a 20                	push   0x20
c0011b9c:	e8 13 db ff ff       	call   c000f6b4 <malloc>
c0011ba1:	89 c3                	mov    ebx,eax
c0011ba3:	58                   	pop    eax
c0011ba4:	5a                   	pop    edx
c0011ba5:	68 00 50 00 00       	push   0x5000
c0011baa:	53                   	push   ebx
c0011bab:	e8 d0 e7 ff ff       	call   c0010380 <Pipe::Pipe(int)>
c0011bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bb3:	e8 e8 10 00 00       	call   c0012ca0 <UnixFile::getFileDescriptor()>
c0011bb8:	89 07                	mov    DWORD PTR [edi],eax
c0011bba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bbd:	e8 de 10 00 00       	call   c0012ca0 <UnixFile::getFileDescriptor()>
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	31 d2                	xor    edx,edx
c0011bc7:	89 06                	mov    DWORD PTR [esi],eax
c0011bc9:	31 c0                	xor    eax,eax
c0011bcb:	5b                   	pop    ebx
c0011bcc:	5e                   	pop    esi
c0011bcd:	5f                   	pop    edi
c0011bce:	c3                   	ret    

c0011bcf <SysGetUnixTime(regs*)>:
c0011bcf:	53                   	push   ebx
c0011bd0:	83 ec 10             	sub    esp,0x10
c0011bd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bd7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011bda:	52                   	push   edx
c0011bdb:	68 b3 43 02 c0       	push   0xc00243b3
c0011be0:	e8 81 53 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011be5:	83 c4 10             	add    esp,0x10
c0011be8:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011bec:	74 3b                	je     c0011c29 <SysGetUnixTime(regs*)+0x5a>
c0011bee:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011bf3:	83 ec 0c             	sub    esp,0xc
c0011bf6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011bfc:	50                   	push   eax
c0011bfd:	e8 38 75 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011c02:	83 c4 0c             	add    esp,0xc
c0011c05:	52                   	push   edx
c0011c06:	50                   	push   eax
c0011c07:	68 c7 43 02 c0       	push   0xc00243c7
c0011c0c:	e8 55 53 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011c11:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011c16:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011c1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011c20:	83 c4 18             	add    esp,0x18
c0011c23:	5b                   	pop    ebx
c0011c24:	e9 11 75 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011c29:	6b 0d 54 bb 02 c0 64 	imul   ecx,DWORD PTR ds:0xc002bb54,0x64
c0011c30:	b8 64 00 00 00       	mov    eax,0x64
c0011c35:	f7 25 50 bb 02 c0    	mul    DWORD PTR ds:0xc002bb50
c0011c3b:	83 c4 08             	add    esp,0x8
c0011c3e:	5b                   	pop    ebx
c0011c3f:	01 ca                	add    edx,ecx
c0011c41:	c3                   	ret    

c0011c42 <string_ends_with(char const*, char const*)>:
c0011c42:	57                   	push   edi
c0011c43:	56                   	push   esi
c0011c44:	53                   	push   ebx
c0011c45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c49:	83 ec 0c             	sub    esp,0xc
c0011c4c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c50:	53                   	push   ebx
c0011c51:	e8 2a e9 fe ff       	call   c0000580 <strlen>
c0011c56:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c59:	89 c6                	mov    esi,eax
c0011c5b:	e8 20 e9 fe ff       	call   c0000580 <strlen>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	31 d2                	xor    edx,edx
c0011c65:	39 c6                	cmp    esi,eax
c0011c67:	7d 06                	jge    c0011c6f <string_ends_with(char const*, char const*)+0x2d>
c0011c69:	5b                   	pop    ebx
c0011c6a:	89 d0                	mov    eax,edx
c0011c6c:	5e                   	pop    esi
c0011c6d:	5f                   	pop    edi
c0011c6e:	c3                   	ret    
c0011c6f:	83 ec 08             	sub    esp,0x8
c0011c72:	29 c6                	sub    esi,eax
c0011c74:	57                   	push   edi
c0011c75:	01 f3                	add    ebx,esi
c0011c77:	53                   	push   ebx
c0011c78:	e8 03 eb fe ff       	call   c0000780 <strcmp>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	31 d2                	xor    edx,edx
c0011c82:	5b                   	pop    ebx
c0011c83:	5e                   	pop    esi
c0011c84:	85 c0                	test   eax,eax
c0011c86:	5f                   	pop    edi
c0011c87:	0f 94 c2             	sete   dl
c0011c8a:	89 d0                	mov    eax,edx
c0011c8c:	c3                   	ret    

c0011c8d <SysOpen(regs*)>:
c0011c8d:	56                   	push   esi
c0011c8e:	53                   	push   ebx
c0011c8f:	81 ec 04 01 00 00    	sub    esp,0x104
c0011c95:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011c9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c9f:	85 c0                	test   eax,eax
c0011ca1:	0f 84 c4 01 00 00    	je     c0011e6b <SysOpen(regs*)+0x1de>
c0011ca7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011caa:	85 c0                	test   eax,eax
c0011cac:	0f 84 b9 01 00 00    	je     c0011e6b <SysOpen(regs*)+0x1de>
c0011cb2:	6a 00                	push   0x0
c0011cb4:	68 ce 43 02 c0       	push   0xc00243ce
c0011cb9:	50                   	push   eax
c0011cba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011cbe:	56                   	push   esi
c0011cbf:	e8 98 61 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011cc4:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cc7:	e8 b4 e8 fe ff       	call   c0000580 <strlen>
c0011ccc:	83 c4 10             	add    esp,0x10
c0011ccf:	83 e8 01             	sub    eax,0x1
c0011cd2:	74 29                	je     c0011cfd <SysOpen(regs*)+0x70>
c0011cd4:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011cd8:	83 fa 2e             	cmp    edx,0x2e
c0011cdb:	74 1c                	je     c0011cf9 <SysOpen(regs*)+0x6c>
c0011cdd:	83 fa 3a             	cmp    edx,0x3a
c0011ce0:	74 17                	je     c0011cf9 <SysOpen(regs*)+0x6c>
c0011ce2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011ce6:	83 e8 01             	sub    eax,0x1
c0011ce9:	74 12                	je     c0011cfd <SysOpen(regs*)+0x70>
c0011ceb:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011cef:	83 fa 3a             	cmp    edx,0x3a
c0011cf2:	74 05                	je     c0011cf9 <SysOpen(regs*)+0x6c>
c0011cf4:	83 fa 2e             	cmp    edx,0x2e
c0011cf7:	75 e9                	jne    c0011ce2 <SysOpen(regs*)+0x55>
c0011cf9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011cfd:	83 ec 08             	sub    esp,0x8
c0011d00:	68 d2 43 02 c0       	push   0xc00243d2
c0011d05:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d08:	50                   	push   eax
c0011d09:	e8 34 ff ff ff       	call   c0011c42 <string_ends_with(char const*, char const*)>
c0011d0e:	83 c4 10             	add    esp,0x10
c0011d11:	85 c0                	test   eax,eax
c0011d13:	74 1d                	je     c0011d32 <SysOpen(regs*)+0xa5>
c0011d15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d18:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d25:	81 c4 04 01 00 00    	add    esp,0x104
c0011d2b:	31 c0                	xor    eax,eax
c0011d2d:	5b                   	pop    ebx
c0011d2e:	31 d2                	xor    edx,edx
c0011d30:	5e                   	pop    esi
c0011d31:	c3                   	ret    
c0011d32:	83 ec 08             	sub    esp,0x8
c0011d35:	68 d7 43 02 c0       	push   0xc00243d7
c0011d3a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d3d:	50                   	push   eax
c0011d3e:	e8 ff fe ff ff       	call   c0011c42 <string_ends_with(char const*, char const*)>
c0011d43:	83 c4 10             	add    esp,0x10
c0011d46:	85 c0                	test   eax,eax
c0011d48:	75 cb                	jne    c0011d15 <SysOpen(regs*)+0x88>
c0011d4a:	83 ec 08             	sub    esp,0x8
c0011d4d:	68 d3 43 02 c0       	push   0xc00243d3
c0011d52:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d55:	50                   	push   eax
c0011d56:	e8 25 ea fe ff       	call   c0000780 <strcmp>
c0011d5b:	83 c4 10             	add    esp,0x10
c0011d5e:	85 c0                	test   eax,eax
c0011d60:	74 b3                	je     c0011d15 <SysOpen(regs*)+0x88>
c0011d62:	83 ec 08             	sub    esp,0x8
c0011d65:	68 d2 43 02 c0       	push   0xc00243d2
c0011d6a:	56                   	push   esi
c0011d6b:	e8 d2 fe ff ff       	call   c0011c42 <string_ends_with(char const*, char const*)>
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	85 c0                	test   eax,eax
c0011d75:	75 9e                	jne    c0011d15 <SysOpen(regs*)+0x88>
c0011d77:	83 ec 08             	sub    esp,0x8
c0011d7a:	68 dc 43 02 c0       	push   0xc00243dc
c0011d7f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d82:	50                   	push   eax
c0011d83:	e8 ba fe ff ff       	call   c0011c42 <string_ends_with(char const*, char const*)>
c0011d88:	83 c4 10             	add    esp,0x10
c0011d8b:	85 c0                	test   eax,eax
c0011d8d:	0f 85 eb 00 00 00    	jne    c0011e7e <SysOpen(regs*)+0x1f1>
c0011d93:	83 ec 08             	sub    esp,0x8
c0011d96:	68 e1 43 02 c0       	push   0xc00243e1
c0011d9b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d9e:	50                   	push   eax
c0011d9f:	e8 9e fe ff ff       	call   c0011c42 <string_ends_with(char const*, char const*)>
c0011da4:	83 c4 10             	add    esp,0x10
c0011da7:	85 c0                	test   eax,eax
c0011da9:	0f 85 cf 00 00 00    	jne    c0011e7e <SysOpen(regs*)+0x1f1>
c0011daf:	83 ec 08             	sub    esp,0x8
c0011db2:	68 dd 43 02 c0       	push   0xc00243dd
c0011db7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011dba:	51                   	push   ecx
c0011dbb:	e8 c0 e9 fe ff       	call   c0000780 <strcmp>
c0011dc0:	83 c4 10             	add    esp,0x10
c0011dc3:	85 c0                	test   eax,eax
c0011dc5:	0f 84 b3 00 00 00    	je     c0011e7e <SysOpen(regs*)+0x1f1>
c0011dcb:	83 ec 08             	sub    esp,0x8
c0011dce:	68 dc 43 02 c0       	push   0xc00243dc
c0011dd3:	56                   	push   esi
c0011dd4:	e8 69 fe ff ff       	call   c0011c42 <string_ends_with(char const*, char const*)>
c0011dd9:	83 c4 10             	add    esp,0x10
c0011ddc:	85 c0                	test   eax,eax
c0011dde:	0f 85 9a 00 00 00    	jne    c0011e7e <SysOpen(regs*)+0x1f1>
c0011de4:	83 ec 0c             	sub    esp,0xc
c0011de7:	68 14 01 00 00       	push   0x114
c0011dec:	e8 c3 d8 ff ff       	call   c000f6b4 <malloc>
c0011df1:	83 c4 0c             	add    esp,0xc
c0011df4:	89 c6                	mov    esi,eax
c0011df6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dfb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dfe:	50                   	push   eax
c0011dff:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e02:	52                   	push   edx
c0011e03:	56                   	push   esi
c0011e04:	e8 7f 63 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011e09:	83 c4 10             	add    esp,0x10
c0011e0c:	85 f6                	test   esi,esi
c0011e0e:	74 5b                	je     c0011e6b <SysOpen(regs*)+0x1de>
c0011e10:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e13:	0f b6 c2             	movzx  eax,dl
c0011e16:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e19:	89 d0                	mov    eax,edx
c0011e1b:	83 e0 01             	and    eax,0x1
c0011e1e:	f6 c2 02             	test   dl,0x2
c0011e21:	74 03                	je     c0011e26 <SysOpen(regs*)+0x199>
c0011e23:	83 c8 02             	or     eax,0x2
c0011e26:	f6 c2 04             	test   dl,0x4
c0011e29:	74 03                	je     c0011e2e <SysOpen(regs*)+0x1a1>
c0011e2b:	83 c8 04             	or     eax,0x4
c0011e2e:	f6 c2 08             	test   dl,0x8
c0011e31:	74 03                	je     c0011e36 <SysOpen(regs*)+0x1a9>
c0011e33:	83 c8 0a             	or     eax,0xa
c0011e36:	80 e2 10             	and    dl,0x10
c0011e39:	74 03                	je     c0011e3e <SysOpen(regs*)+0x1b1>
c0011e3b:	83 c8 12             	or     eax,0x12
c0011e3e:	83 ec 08             	sub    esp,0x8
c0011e41:	50                   	push   eax
c0011e42:	56                   	push   esi
c0011e43:	e8 5e 63 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0011e48:	83 c4 10             	add    esp,0x10
c0011e4b:	85 c0                	test   eax,eax
c0011e4d:	75 1c                	jne    c0011e6b <SysOpen(regs*)+0x1de>
c0011e4f:	83 ec 0c             	sub    esp,0xc
c0011e52:	56                   	push   esi
c0011e53:	e8 48 0e 00 00       	call   c0012ca0 <UnixFile::getFileDescriptor()>
c0011e58:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e5b:	83 c4 10             	add    esp,0x10
c0011e5e:	89 02                	mov    DWORD PTR [edx],eax
c0011e60:	c1 f8 1f             	sar    eax,0x1f
c0011e63:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e66:	e9 ba fe ff ff       	jmp    c0011d25 <SysOpen(regs*)+0x98>
c0011e6b:	81 c4 04 01 00 00    	add    esp,0x104
c0011e71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e76:	5b                   	pop    ebx
c0011e77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e7c:	5e                   	pop    esi
c0011e7d:	c3                   	ret    
c0011e7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e81:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e87:	e9 92 fe ff ff       	jmp    c0011d1e <SysOpen(regs*)+0x91>

c0011e8c <KeSystemCall(regs*, void*)>:
c0011e8c:	53                   	push   ebx
c0011e8d:	83 ec 08             	sub    esp,0x8
c0011e90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e94:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011e97:	83 f8 48             	cmp    eax,0x48
c0011e9a:	77 16                	ja     c0011eb2 <KeSystemCall(regs*, void*)+0x26>
c0011e9c:	8b 14 85 c0 66 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9940]
c0011ea3:	85 d2                	test   edx,edx
c0011ea5:	74 0b                	je     c0011eb2 <KeSystemCall(regs*, void*)+0x26>
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	53                   	push   ebx
c0011eab:	ff d2                	call   edx
c0011ead:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011eb0:	eb 0d                	jmp    c0011ebf <KeSystemCall(regs*, void*)+0x33>
c0011eb2:	52                   	push   edx
c0011eb3:	52                   	push   edx
c0011eb4:	50                   	push   eax
c0011eb5:	68 e6 43 02 c0       	push   0xc00243e6
c0011eba:	e8 a7 50 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011ebf:	83 c4 10             	add    esp,0x10
c0011ec2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011ec7:	83 c4 08             	add    esp,0x8
c0011eca:	31 d2                	xor    edx,edx
c0011ecc:	5b                   	pop    ebx
c0011ecd:	c3                   	ret    

c0011ece <VgaText::isAtty()>:
c0011ece:	b0 01                	mov    al,0x1
c0011ed0:	c3                   	ret    
c0011ed1:	90                   	nop

c0011ed2 <VgaText::~VgaText()>:
c0011ed2:	83 ec 0c             	sub    esp,0xc
c0011ed5:	ba 60 44 02 c0       	mov    edx,0xc0024460
c0011eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ede:	89 10                	mov    DWORD PTR [eax],edx
c0011ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee4:	83 ec 0c             	sub    esp,0xc
c0011ee7:	50                   	push   eax
c0011ee8:	e8 a1 0f 00 00       	call   c0012e8e <UnixFile::~UnixFile()>
c0011eed:	83 c4 10             	add    esp,0x10
c0011ef0:	90                   	nop
c0011ef1:	83 c4 0c             	add    esp,0xc
c0011ef4:	c3                   	ret    
c0011ef5:	90                   	nop

c0011ef6 <VgaText::~VgaText()>:
c0011ef6:	83 ec 0c             	sub    esp,0xc
c0011ef9:	83 ec 0c             	sub    esp,0xc
c0011efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f00:	e8 cd ff ff ff       	call   c0011ed2 <VgaText::~VgaText()>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	83 ec 08             	sub    esp,0x8
c0011f0b:	68 84 01 00 00       	push   0x184
c0011f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f14:	e8 a3 b3 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	83 c4 0c             	add    esp,0xc
c0011f1f:	c3                   	ret    

c0011f20 <VgaText::read(unsigned long long, void*, int*)>:
c0011f20:	83 ec 10             	sub    esp,0x10
c0011f23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011f2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f2f:	e8 15 86 ff ff       	call   c000a549 <readKeyboard(VgaText*, char*, unsigned long)>
c0011f34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f38:	89 02                	mov    DWORD PTR [edx],eax
c0011f3a:	31 c0                	xor    eax,eax
c0011f3c:	83 c4 1c             	add    esp,0x1c
c0011f3f:	c3                   	ret    

c0011f40 <setTerminalScrollLock(bool)>:
c0011f40:	c3                   	ret    

c0011f41 <doTerminalCycle()>:
c0011f41:	c3                   	ret    

c0011f42 <addToTerminalCycle(VgaText*)>:
c0011f42:	c3                   	ret    

c0011f43 <scrollTerminalScrollLock(int)>:
c0011f43:	c3                   	ret    

c0011f44 <VgaText::updateTitle()>:
c0011f44:	c3                   	ret    
c0011f45:	90                   	nop

c0011f46 <VgaText::load()>:
c0011f46:	c3                   	ret    
c0011f47:	90                   	nop

c0011f48 <VgaText::updateCursor()>:
c0011f48:	83 ec 14             	sub    esp,0x14
c0011f4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f4f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011f52:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011f55:	e8 56 96 00 00       	call   c001b5b0 <HalConsoleCursorUpdate(int, int)>
c0011f5a:	83 c4 1c             	add    esp,0x1c
c0011f5d:	c3                   	ret    

c0011f5e <VgaText::doANSI_SGR(int)>:
c0011f5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f66:	85 d2                	test   edx,edx
c0011f68:	75 0b                	jne    c0011f75 <VgaText::doANSI_SGR(int)+0x17>
c0011f6a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011f6d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011f70:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f73:	eb 59                	jmp    c0011fce <VgaText::doANSI_SGR(int)+0x70>
c0011f75:	83 fa 07             	cmp    edx,0x7
c0011f78:	75 0b                	jne    c0011f85 <VgaText::doANSI_SGR(int)+0x27>
c0011f7a:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011f7d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011f80:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0011f83:	eb 49                	jmp    c0011fce <VgaText::doANSI_SGR(int)+0x70>
c0011f85:	83 fa 1b             	cmp    edx,0x1b
c0011f88:	74 e0                	je     c0011f6a <VgaText::doANSI_SGR(int)+0xc>
c0011f8a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011f8d:	83 f9 07             	cmp    ecx,0x7
c0011f90:	77 09                	ja     c0011f9b <VgaText::doANSI_SGR(int)+0x3d>
c0011f92:	8b 14 8d 20 68 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd97e0]
c0011f99:	eb 20                	jmp    c0011fbb <VgaText::doANSI_SGR(int)+0x5d>
c0011f9b:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011f9e:	83 f9 07             	cmp    ecx,0x7
c0011fa1:	77 09                	ja     c0011fac <VgaText::doANSI_SGR(int)+0x4e>
c0011fa3:	8b 14 8d 20 68 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd97e0]
c0011faa:	eb 22                	jmp    c0011fce <VgaText::doANSI_SGR(int)+0x70>
c0011fac:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011faf:	83 f9 07             	cmp    ecx,0x7
c0011fb2:	77 0b                	ja     c0011fbf <VgaText::doANSI_SGR(int)+0x61>
c0011fb4:	8b 14 95 d8 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9928]
c0011fbb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011fbe:	c3                   	ret    
c0011fbf:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0011fc2:	83 f9 07             	cmp    ecx,0x7
c0011fc5:	77 0a                	ja     c0011fd1 <VgaText::doANSI_SGR(int)+0x73>
c0011fc7:	8b 14 95 b0 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9950]
c0011fce:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011fd1:	c3                   	ret    

c0011fd2 <VgaText::setDefaultBgColour(VgaColour)>:
c0011fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fda:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011fdd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011fe0:	c3                   	ret    
c0011fe1:	90                   	nop

c0011fe2 <VgaText::setDefaultFgColour(VgaColour)>:
c0011fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fea:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011fed:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011ff0:	c3                   	ret    
c0011ff1:	90                   	nop

c0011ff2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011ff2:	53                   	push   ebx
c0011ff3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ffb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011fff:	51                   	push   ecx
c0012000:	e8 cd ff ff ff       	call   c0011fd2 <VgaText::setDefaultBgColour(VgaColour)>
c0012005:	58                   	pop    eax
c0012006:	5a                   	pop    edx
c0012007:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001200b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001200f:	5b                   	pop    ebx
c0012010:	eb d0                	jmp    c0011fe2 <VgaText::setDefaultFgColour(VgaColour)>

c0012012 <VgaText::setTitleTextColour(VgaColour)>:
c0012012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012016:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001201a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001201d:	c3                   	ret    

c001201e <VgaText::setTitleColour(VgaColour)>:
c001201e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012022:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012026:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012029:	c3                   	ret    

c001202a <VgaText::setTitle(char*)>:
c001202a:	c3                   	ret    
c001202b:	90                   	nop

c001202c <VgaText::combineColours(unsigned char, unsigned char)>:
c001202c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012030:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012035:	83 e0 0f             	and    eax,0xf
c0012038:	c1 e2 04             	shl    edx,0x4
c001203b:	09 d0                	or     eax,edx
c001203d:	c3                   	ret    

c001203e <VgaText::scrollScreen()>:
c001203e:	55                   	push   ebp
c001203f:	57                   	push   edi
c0012040:	56                   	push   esi
c0012041:	be 01 00 00 00       	mov    esi,0x1
c0012046:	53                   	push   ebx
c0012047:	83 ec 0c             	sub    esp,0xc
c001204a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001204e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012051:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012057:	31 ff                	xor    edi,edi
c0012059:	01 e9                	add    ecx,ebp
c001205b:	8a 01                	mov    al,BYTE PTR [ecx]
c001205d:	83 fe 18             	cmp    esi,0x18
c0012060:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012066:	75 20                	jne    c0012088 <VgaText::scrollScreen()+0x4a>
c0012068:	f7 c7 01 00 00 00    	test   edi,0x1
c001206e:	74 15                	je     c0012085 <VgaText::scrollScreen()+0x47>
c0012070:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012074:	50                   	push   eax
c0012075:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012079:	50                   	push   eax
c001207a:	e8 ad ff ff ff       	call   c001202c <VgaText::combineColours(unsigned char, unsigned char)>
c001207f:	5a                   	pop    edx
c0012080:	5a                   	pop    edx
c0012081:	88 01                	mov    BYTE PTR [ecx],al
c0012083:	eb 03                	jmp    c0012088 <VgaText::scrollScreen()+0x4a>
c0012085:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012088:	47                   	inc    edi
c0012089:	41                   	inc    ecx
c001208a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012090:	75 c9                	jne    c001205b <VgaText::scrollScreen()+0x1d>
c0012092:	46                   	inc    esi
c0012093:	83 fe 19             	cmp    esi,0x19
c0012096:	75 b9                	jne    c0012051 <VgaText::scrollScreen()+0x13>
c0012098:	39 1d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,ebx
c001209e:	75 1f                	jne    c00120bf <VgaText::scrollScreen()+0x81>
c00120a0:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00120a4:	74 05                	je     c00120ab <VgaText::scrollScreen()+0x6d>
c00120a6:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00120a9:	eb 14                	jmp    c00120bf <VgaText::scrollScreen()+0x81>
c00120ab:	50                   	push   eax
c00120ac:	50                   	push   eax
c00120ad:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00120b1:	50                   	push   eax
c00120b2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00120b6:	50                   	push   eax
c00120b7:	e8 88 93 00 00       	call   c001b444 <HalConsoleScroll(int, int)>
c00120bc:	83 c4 10             	add    esp,0x10
c00120bf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00120c3:	83 c4 0c             	add    esp,0xc
c00120c6:	5b                   	pop    ebx
c00120c7:	5e                   	pop    esi
c00120c8:	5f                   	pop    edi
c00120c9:	5d                   	pop    ebp
c00120ca:	e9 79 fe ff ff       	jmp    c0011f48 <VgaText::updateCursor()>
c00120cf:	90                   	nop

c00120d0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00120d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00120d5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00120da:	c1 e0 08             	shl    eax,0x8
c00120dd:	09 d0                	or     eax,edx
c00120df:	c3                   	ret    

c00120e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00120e0:	55                   	push   ebp
c00120e1:	57                   	push   edi
c00120e2:	56                   	push   esi
c00120e3:	53                   	push   ebx
c00120e4:	83 ec 1c             	sub    esp,0x1c
c00120e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00120ef:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00120f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120f7:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00120fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012102:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012106:	85 ed                	test   ebp,ebp
c0012108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001210c:	75 14                	jne    c0012122 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001210e:	c7 44 24 30 fa 43 02 c0 	mov    DWORD PTR [esp+0x30],0xc00243fa
c0012116:	83 c4 1c             	add    esp,0x1c
c0012119:	5b                   	pop    ebx
c001211a:	5e                   	pop    esi
c001211b:	5f                   	pop    edi
c001211c:	5d                   	pop    ebp
c001211d:	e9 ee d9 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c0012122:	50                   	push   eax
c0012123:	50                   	push   eax
c0012124:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012129:	50                   	push   eax
c001212a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001212f:	50                   	push   eax
c0012130:	e8 f7 fe ff ff       	call   c001202c <VgaText::combineColours(unsigned char, unsigned char)>
c0012135:	5a                   	pop    edx
c0012136:	5a                   	pop    edx
c0012137:	0f b6 c0             	movzx  eax,al
c001213a:	0f be c9             	movsx  ecx,cl
c001213d:	50                   	push   eax
c001213e:	51                   	push   ecx
c001213f:	e8 8c ff ff ff       	call   c00120d0 <VgaText::combineCharAndColour(char, unsigned char)>
c0012144:	6b d6 50             	imul   edx,esi,0x50
c0012147:	83 c4 10             	add    esp,0x10
c001214a:	01 da                	add    edx,ebx
c001214c:	0f b7 d2             	movzx  edx,dx
c001214f:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012154:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c001215a:	75 28                	jne    c0012184 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c001215c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012164:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012168:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001216c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012174:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012178:	83 c4 1c             	add    esp,0x1c
c001217b:	5b                   	pop    ebx
c001217c:	5e                   	pop    esi
c001217d:	5f                   	pop    edi
c001217e:	5d                   	pop    ebp
c001217f:	e9 c8 93 00 00       	jmp    c001b54c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012184:	83 c4 1c             	add    esp,0x1c
c0012187:	5b                   	pop    ebx
c0012188:	5e                   	pop    esi
c0012189:	5f                   	pop    edi
c001218a:	5d                   	pop    ebp
c001218b:	c3                   	ret    

c001218c <VgaText::getCursorX()>:
c001218c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012190:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012193:	c3                   	ret    

c0012194 <VgaText::getCursorY()>:
c0012194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012198:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001219b:	c3                   	ret    

c001219c <VgaText::setCursor(int, int)>:
c001219c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121a4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00121a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00121ae:	e9 95 fd ff ff       	jmp    c0011f48 <VgaText::updateCursor()>

c00121b3 <setActiveTerminal(VgaText*)>:
c00121b3:	53                   	push   ebx
c00121b4:	83 ec 08             	sub    esp,0x8
c00121b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121bb:	85 db                	test   ebx,ebx
c00121bd:	75 11                	jne    c00121d0 <setActiveTerminal(VgaText*)+0x1d>
c00121bf:	c7 44 24 10 0a 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc002440a
c00121c7:	83 c4 08             	add    esp,0x8
c00121ca:	5b                   	pop    ebx
c00121cb:	e9 40 d9 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c00121d0:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c00121d5:	85 c0                	test   eax,eax
c00121d7:	74 0c                	je     c00121e5 <setActiveTerminal(VgaText*)+0x32>
c00121d9:	83 ec 0c             	sub    esp,0xc
c00121dc:	50                   	push   eax
c00121dd:	e8 66 fd ff ff       	call   c0011f48 <VgaText::updateCursor()>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	50                   	push   eax
c00121e6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00121e9:	89 1d f4 c1 02 c0    	mov    DWORD PTR ds:0xc002c1f4,ebx
c00121ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00121f2:	53                   	push   ebx
c00121f3:	e8 a4 ff ff ff       	call   c001219c <VgaText::setCursor(int, int)>
c00121f8:	83 c4 18             	add    esp,0x18
c00121fb:	5b                   	pop    ebx
c00121fc:	c3                   	ret    
c00121fd:	90                   	nop

c00121fe <VgaText::clearScreen()>:
c00121fe:	57                   	push   edi
c00121ff:	56                   	push   esi
c0012200:	31 f6                	xor    esi,esi
c0012202:	53                   	push   ebx
c0012203:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012207:	52                   	push   edx
c0012208:	6a 00                	push   0x0
c001220a:	6a 00                	push   0x0
c001220c:	53                   	push   ebx
c001220d:	e8 8a ff ff ff       	call   c001219c <VgaText::setCursor(int, int)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001221c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001221f:	7e 20                	jle    c0012241 <VgaText::clearScreen()+0x43>
c0012221:	31 ff                	xor    edi,edi
c0012223:	50                   	push   eax
c0012224:	50                   	push   eax
c0012225:	56                   	push   esi
c0012226:	57                   	push   edi
c0012227:	47                   	inc    edi
c0012228:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001222b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001222e:	6a 20                	push   0x20
c0012230:	53                   	push   ebx
c0012231:	e8 aa fe ff ff       	call   c00120e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012236:	83 c4 20             	add    esp,0x20
c0012239:	83 ff 50             	cmp    edi,0x50
c001223c:	75 e5                	jne    c0012223 <VgaText::clearScreen()+0x25>
c001223e:	46                   	inc    esi
c001223f:	eb db                	jmp    c001221c <VgaText::clearScreen()+0x1e>
c0012241:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012248:	5b                   	pop    ebx
c0012249:	5e                   	pop    esi
c001224a:	5f                   	pop    edi
c001224b:	c3                   	ret    

c001224c <VgaText::setCursorX(int)>:
c001224c:	83 ec 10             	sub    esp,0x10
c001224f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012253:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001225a:	50                   	push   eax
c001225b:	e8 3c ff ff ff       	call   c001219c <VgaText::setCursor(int, int)>
c0012260:	83 c4 1c             	add    esp,0x1c
c0012263:	c3                   	ret    

c0012264 <VgaText::setCursorY(int)>:
c0012264:	83 ec 10             	sub    esp,0x10
c0012267:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001226b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001226f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012272:	50                   	push   eax
c0012273:	e8 24 ff ff ff       	call   c001219c <VgaText::setCursor(int, int)>
c0012278:	83 c4 1c             	add    esp,0x1c
c001227b:	c3                   	ret    

c001227c <VgaText::incrementCursor(bool)>:
c001227c:	56                   	push   esi
c001227d:	53                   	push   ebx
c001227e:	51                   	push   ecx
c001227f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012283:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012287:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001228a:	40                   	inc    eax
c001228b:	83 f8 50             	cmp    eax,0x50
c001228e:	74 05                	je     c0012295 <VgaText::incrementCursor(bool)+0x19>
c0012290:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012293:	eb 24                	jmp    c00122b9 <VgaText::incrementCursor(bool)+0x3d>
c0012295:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001229c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001229f:	8d 50 01             	lea    edx,[eax+0x1]
c00122a2:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00122a5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00122a8:	75 0f                	jne    c00122b9 <VgaText::incrementCursor(bool)+0x3d>
c00122aa:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00122ad:	83 ec 0c             	sub    esp,0xc
c00122b0:	53                   	push   ebx
c00122b1:	e8 88 fd ff ff       	call   c001203e <VgaText::scrollScreen()>
c00122b6:	83 c4 10             	add    esp,0x10
c00122b9:	89 f0                	mov    eax,esi
c00122bb:	84 c0                	test   al,al
c00122bd:	74 0c                	je     c00122cb <VgaText::incrementCursor(bool)+0x4f>
c00122bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00122c3:	5a                   	pop    edx
c00122c4:	5b                   	pop    ebx
c00122c5:	5e                   	pop    esi
c00122c6:	e9 7d fc ff ff       	jmp    c0011f48 <VgaText::updateCursor()>
c00122cb:	58                   	pop    eax
c00122cc:	5b                   	pop    ebx
c00122cd:	5e                   	pop    esi
c00122ce:	c3                   	ret    
c00122cf:	90                   	nop

c00122d0 <VgaText::decrementCursor(bool)>:
c00122d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00122d8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00122db:	85 c0                	test   eax,eax
c00122dd:	74 04                	je     c00122e3 <VgaText::decrementCursor(bool)+0x13>
c00122df:	48                   	dec    eax
c00122e0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00122e3:	84 c9                	test   cl,cl
c00122e5:	74 09                	je     c00122f0 <VgaText::decrementCursor(bool)+0x20>
c00122e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122eb:	e9 58 fc ff ff       	jmp    c0011f48 <VgaText::updateCursor()>
c00122f0:	c3                   	ret    
c00122f1:	90                   	nop

c00122f2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00122f2:	53                   	push   ebx
c00122f3:	83 ec 08             	sub    esp,0x8
c00122f6:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00122fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012303:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012307:	83 f8 07             	cmp    eax,0x7
c001230a:	75 21                	jne    c001232d <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001230c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012314:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001231c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012324:	83 c4 08             	add    esp,0x8
c0012327:	5b                   	pop    ebx
c0012328:	e9 fe 66 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c001232d:	83 f8 0d             	cmp    eax,0xd
c0012330:	75 09                	jne    c001233b <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012332:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012339:	eb 2d                	jmp    c0012368 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001233b:	83 f8 0a             	cmp    eax,0xa
c001233e:	75 31                	jne    c0012371 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012340:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012347:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001234a:	8d 50 01             	lea    edx,[eax+0x1]
c001234d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012350:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012353:	75 0f                	jne    c0012364 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012355:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012358:	83 ec 0c             	sub    esp,0xc
c001235b:	53                   	push   ebx
c001235c:	e8 dd fc ff ff       	call   c001203e <VgaText::scrollScreen()>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012368:	83 c4 08             	add    esp,0x8
c001236b:	5b                   	pop    ebx
c001236c:	e9 d7 fb ff ff       	jmp    c0011f48 <VgaText::updateCursor()>
c0012371:	83 f8 08             	cmp    eax,0x8
c0012374:	75 25                	jne    c001239b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012376:	50                   	push   eax
c0012377:	50                   	push   eax
c0012378:	6a 01                	push   0x1
c001237a:	53                   	push   ebx
c001237b:	e8 50 ff ff ff       	call   c00122d0 <VgaText::decrementCursor(bool)>
c0012380:	5a                   	pop    edx
c0012381:	59                   	pop    ecx
c0012382:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012385:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012388:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001238b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001238e:	6a 20                	push   0x20
c0012390:	53                   	push   ebx
c0012391:	e8 4a fd ff ff       	call   c00120e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012396:	83 c4 28             	add    esp,0x28
c0012399:	5b                   	pop    ebx
c001239a:	c3                   	ret    
c001239b:	83 ec 08             	sub    esp,0x8
c001239e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00123a1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00123a4:	51                   	push   ecx
c00123a5:	52                   	push   edx
c00123a6:	50                   	push   eax
c00123a7:	53                   	push   ebx
c00123a8:	e8 33 fd ff ff       	call   c00120e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00123ad:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00123b1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00123b9:	83 c4 28             	add    esp,0x28
c00123bc:	5b                   	pop    ebx
c00123bd:	e9 ba fe ff ff       	jmp    c001227c <VgaText::incrementCursor(bool)>

c00123c2 <VgaText::putchar(char)>:
c00123c2:	57                   	push   edi
c00123c3:	56                   	push   esi
c00123c4:	53                   	push   ebx
c00123c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00123c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123cd:	0f be c2             	movsx  eax,dl
c00123d0:	83 f8 5b             	cmp    eax,0x5b
c00123d3:	75 18                	jne    c00123ed <VgaText::putchar(char)+0x2b>
c00123d5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00123d9:	74 20                	je     c00123fb <VgaText::putchar(char)+0x39>
c00123db:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00123e1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00123e8:	e9 b8 00 00 00       	jmp    c00124a5 <VgaText::putchar(char)+0xe3>
c00123ed:	83 f8 1b             	cmp    eax,0x1b
c00123f0:	75 09                	jne    c00123fb <VgaText::putchar(char)+0x39>
c00123f2:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00123f6:	e9 aa 00 00 00       	jmp    c00124a5 <VgaText::putchar(char)+0xe3>
c00123fb:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00123ff:	89 f9                	mov    ecx,edi
c0012401:	84 c9                	test   cl,cl
c0012403:	0f 84 8c 00 00 00    	je     c0012495 <VgaText::putchar(char)+0xd3>
c0012409:	8d 4a c0             	lea    ecx,[edx-0x40]
c001240c:	80 f9 3e             	cmp    cl,0x3e
c001240f:	77 70                	ja     c0012481 <VgaText::putchar(char)+0xbf>
c0012411:	83 f8 6d             	cmp    eax,0x6d
c0012414:	75 3f                	jne    c0012455 <VgaText::putchar(char)+0x93>
c0012416:	31 f6                	xor    esi,esi
c0012418:	31 d2                	xor    edx,edx
c001241a:	31 c0                	xor    eax,eax
c001241c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001241f:	7e 25                	jle    c0012446 <VgaText::putchar(char)+0x84>
c0012421:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012426:	83 fa 3b             	cmp    edx,0x3b
c0012429:	75 0f                	jne    c001243a <VgaText::putchar(char)+0x78>
c001242b:	50                   	push   eax
c001242c:	53                   	push   ebx
c001242d:	e8 2c fb ff ff       	call   c0011f5e <VgaText::doANSI_SGR(int)>
c0012432:	31 d2                	xor    edx,edx
c0012434:	59                   	pop    ecx
c0012435:	58                   	pop    eax
c0012436:	31 c0                	xor    eax,eax
c0012438:	eb 09                	jmp    c0012443 <VgaText::putchar(char)+0x81>
c001243a:	6b c0 0a             	imul   eax,eax,0xa
c001243d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012441:	89 fa                	mov    edx,edi
c0012443:	46                   	inc    esi
c0012444:	eb d6                	jmp    c001241c <VgaText::putchar(char)+0x5a>
c0012446:	84 d2                	test   dl,dl
c0012448:	74 2f                	je     c0012479 <VgaText::putchar(char)+0xb7>
c001244a:	50                   	push   eax
c001244b:	53                   	push   ebx
c001244c:	e8 0d fb ff ff       	call   c0011f5e <VgaText::doANSI_SGR(int)>
c0012451:	58                   	pop    eax
c0012452:	5a                   	pop    edx
c0012453:	eb 24                	jmp    c0012479 <VgaText::putchar(char)+0xb7>
c0012455:	83 f8 4a             	cmp    eax,0x4a
c0012458:	75 1f                	jne    c0012479 <VgaText::putchar(char)+0xb7>
c001245a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001245e:	75 19                	jne    c0012479 <VgaText::putchar(char)+0xb7>
c0012460:	83 ec 0c             	sub    esp,0xc
c0012463:	53                   	push   ebx
c0012464:	e8 95 fd ff ff       	call   c00121fe <VgaText::clearScreen()>
c0012469:	83 c4 0c             	add    esp,0xc
c001246c:	6a 00                	push   0x0
c001246e:	6a 00                	push   0x0
c0012470:	53                   	push   ebx
c0012471:	e8 26 fd ff ff       	call   c001219c <VgaText::setCursor(int, int)>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001247f:	eb 24                	jmp    c00124a5 <VgaText::putchar(char)+0xe3>
c0012481:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012484:	83 f8 0e             	cmp    eax,0xe
c0012487:	7f 1c                	jg     c00124a5 <VgaText::putchar(char)+0xe3>
c0012489:	8d 48 01             	lea    ecx,[eax+0x1]
c001248c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001248f:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0012493:	eb 10                	jmp    c00124a5 <VgaText::putchar(char)+0xe3>
c0012495:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012498:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001249b:	50                   	push   eax
c001249c:	53                   	push   ebx
c001249d:	e8 50 fe ff ff       	call   c00122f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c00124a2:	83 c4 10             	add    esp,0x10
c00124a5:	5b                   	pop    ebx
c00124a6:	5e                   	pop    esi
c00124a7:	5f                   	pop    edi
c00124a8:	c3                   	ret    
c00124a9:	90                   	nop

c00124aa <VgaText::putx(unsigned int)>:
c00124aa:	57                   	push   edi
c00124ab:	b9 11 00 00 00       	mov    ecx,0x11
c00124b0:	56                   	push   esi
c00124b1:	be 18 44 02 c0       	mov    esi,0xc0024418
c00124b6:	53                   	push   ebx
c00124b7:	83 ec 20             	sub    esp,0x20
c00124ba:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00124be:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00124c2:	fc                   	cld    
c00124c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00124c5:	be 08 00 00 00       	mov    esi,0x8
c00124ca:	50                   	push   eax
c00124cb:	50                   	push   eax
c00124cc:	89 d8                	mov    eax,ebx
c00124ce:	c1 e8 1c             	shr    eax,0x1c
c00124d1:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00124d6:	c1 e3 04             	shl    ebx,0x4
c00124d9:	50                   	push   eax
c00124da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124de:	e8 df fe ff ff       	call   c00123c2 <VgaText::putchar(char)>
c00124e3:	83 c4 10             	add    esp,0x10
c00124e6:	4e                   	dec    esi
c00124e7:	75 e1                	jne    c00124ca <VgaText::putx(unsigned int)+0x20>
c00124e9:	83 c4 20             	add    esp,0x20
c00124ec:	5b                   	pop    ebx
c00124ed:	5e                   	pop    esi
c00124ee:	5f                   	pop    edi
c00124ef:	c3                   	ret    

c00124f0 <VgaText::puts(char const*)>:
c00124f0:	53                   	push   ebx
c00124f1:	83 ec 08             	sub    esp,0x8
c00124f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00124f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124fb:	85 c0                	test   eax,eax
c00124fd:	74 12                	je     c0012511 <VgaText::puts(char const*)+0x21>
c00124ff:	51                   	push   ecx
c0012500:	43                   	inc    ebx
c0012501:	51                   	push   ecx
c0012502:	50                   	push   eax
c0012503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012507:	e8 b6 fe ff ff       	call   c00123c2 <VgaText::putchar(char)>
c001250c:	83 c4 10             	add    esp,0x10
c001250f:	eb e7                	jmp    c00124f8 <VgaText::puts(char const*)+0x8>
c0012511:	83 c4 08             	add    esp,0x8
c0012514:	5b                   	pop    ebx
c0012515:	c3                   	ret    

c0012516 <VgaText::write(unsigned long long, void*, int*)>:
c0012516:	55                   	push   ebp
c0012517:	57                   	push   edi
c0012518:	56                   	push   esi
c0012519:	53                   	push   ebx
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012521:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012525:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012529:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012530:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012533:	39 eb                	cmp    ebx,ebp
c0012535:	74 13                	je     c001254a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012537:	50                   	push   eax
c0012538:	43                   	inc    ebx
c0012539:	50                   	push   eax
c001253a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001253e:	50                   	push   eax
c001253f:	56                   	push   esi
c0012540:	e8 7d fe ff ff       	call   c00123c2 <VgaText::putchar(char)>
c0012545:	83 c4 10             	add    esp,0x10
c0012548:	eb e9                	jmp    c0012533 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001254a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012555:	89 38                	mov    DWORD PTR [eax],edi
c0012557:	83 c4 0c             	add    esp,0xc
c001255a:	31 c0                	xor    eax,eax
c001255c:	5b                   	pop    ebx
c001255d:	5e                   	pop    esi
c001255e:	5f                   	pop    edi
c001255f:	5d                   	pop    ebp
c0012560:	c3                   	ret    
c0012561:	90                   	nop

c0012562 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012562:	55                   	push   ebp
c0012563:	57                   	push   edi
c0012564:	56                   	push   esi
c0012565:	53                   	push   ebx
c0012566:	83 ec 1c             	sub    esp,0x1c
c0012569:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001256d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012571:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012575:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012579:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c001257c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012580:	85 db                	test   ebx,ebx
c0012582:	75 14                	jne    c0012598 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0012584:	c7 44 24 30 29 44 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024429
c001258c:	83 c4 1c             	add    esp,0x1c
c001258f:	5b                   	pop    ebx
c0012590:	5e                   	pop    esi
c0012591:	5f                   	pop    edi
c0012592:	5d                   	pop    ebp
c0012593:	e9 78 d5 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c0012598:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c001259f:	50                   	push   eax
c00125a0:	50                   	push   eax
c00125a1:	89 e8                	mov    eax,ebp
c00125a3:	0f b6 c0             	movzx  eax,al
c00125a6:	50                   	push   eax
c00125a7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00125ac:	50                   	push   eax
c00125ad:	e8 7a fa ff ff       	call   c001202c <VgaText::combineColours(unsigned char, unsigned char)>
c00125b2:	83 c4 10             	add    esp,0x10
c00125b5:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00125b9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00125bc:	0f b6 c0             	movzx  eax,al
c00125bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125c3:	0f b7 c9             	movzx  ecx,cx
c00125c6:	01 c9                	add    ecx,ecx
c00125c8:	01 cb                	add    ebx,ecx
c00125ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00125cd:	85 c0                	test   eax,eax
c00125cf:	0f 84 ef 00 00 00    	je     c00126c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00125d5:	83 f8 0d             	cmp    eax,0xd
c00125d8:	75 0c                	jne    c00125e6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00125da:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00125e1:	e9 d8 00 00 00       	jmp    c00126be <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00125e6:	83 f8 0a             	cmp    eax,0xa
c00125e9:	75 44                	jne    c001262f <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00125eb:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00125f2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00125f5:	8d 48 01             	lea    ecx,[eax+0x1]
c00125f8:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00125fb:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00125fe:	75 0f                	jne    c001260f <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012600:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012603:	83 ec 0c             	sub    esp,0xc
c0012606:	57                   	push   edi
c0012607:	e8 32 fa ff ff       	call   c001203e <VgaText::scrollScreen()>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	83 ec 0c             	sub    esp,0xc
c0012612:	57                   	push   edi
c0012613:	e8 30 f9 ff ff       	call   c0011f48 <VgaText::updateCursor()>
c0012618:	83 c4 10             	add    esp,0x10
c001261b:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001261f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012622:	0f b7 db             	movzx  ebx,bx
c0012625:	01 db                	add    ebx,ebx
c0012627:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001262a:	e9 8f 00 00 00       	jmp    c00126be <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001262f:	83 f8 08             	cmp    eax,0x8
c0012632:	75 34                	jne    c0012668 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012634:	51                   	push   ecx
c0012635:	51                   	push   ecx
c0012636:	6a 01                	push   0x1
c0012638:	57                   	push   edi
c0012639:	e8 92 fc ff ff       	call   c00122d0 <VgaText::decrementCursor(bool)>
c001263e:	5b                   	pop    ebx
c001263f:	58                   	pop    eax
c0012640:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012643:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012646:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012649:	ff 77 34             	push   DWORD PTR [edi+0x34]
c001264c:	6a 20                	push   0x20
c001264e:	57                   	push   edi
c001264f:	e8 8c fa ff ff       	call   c00120e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012654:	83 c4 20             	add    esp,0x20
c0012657:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001265b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001265e:	0f b7 db             	movzx  ebx,bx
c0012661:	01 db                	add    ebx,ebx
c0012663:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012666:	eb 56                	jmp    c00126be <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012668:	52                   	push   edx
c0012669:	52                   	push   edx
c001266a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001266e:	50                   	push   eax
c001266f:	e8 5c fa ff ff       	call   c00120d0 <VgaText::combineCharAndColour(char, unsigned char)>
c0012674:	83 c4 10             	add    esp,0x10
c0012677:	66 89 03             	mov    WORD PTR [ebx],ax
c001267a:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c0012680:	75 1a                	jne    c001269c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012682:	83 ec 0c             	sub    esp,0xc
c0012685:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012688:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001268b:	55                   	push   ebp
c001268c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012690:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012693:	50                   	push   eax
c0012694:	e8 b3 8e 00 00       	call   c001b54c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012699:	83 c4 20             	add    esp,0x20
c001269c:	50                   	push   eax
c001269d:	83 c3 02             	add    ebx,0x2
c00126a0:	50                   	push   eax
c00126a1:	6a 00                	push   0x0
c00126a3:	57                   	push   edi
c00126a4:	e8 d3 fb ff ff       	call   c001227c <VgaText::incrementCursor(bool)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00126b0:	75 0c                	jne    c00126be <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00126b2:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00126b6:	0f b7 db             	movzx  ebx,bx
c00126b9:	01 db                	add    ebx,ebx
c00126bb:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00126be:	46                   	inc    esi
c00126bf:	e9 06 ff ff ff       	jmp    c00125ca <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00126c4:	83 ec 0c             	sub    esp,0xc
c00126c7:	57                   	push   edi
c00126c8:	e8 7b f8 ff ff       	call   c0011f48 <VgaText::updateCursor()>
c00126cd:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00126d4:	83 c4 2c             	add    esp,0x2c
c00126d7:	5b                   	pop    ebx
c00126d8:	5e                   	pop    esi
c00126d9:	5f                   	pop    edi
c00126da:	5d                   	pop    ebp
c00126db:	c3                   	ret    

c00126dc <VgaText::VgaText(char const*)>:
c00126dc:	56                   	push   esi
c00126dd:	53                   	push   ebx
c00126de:	83 ec 04             	sub    esp,0x4
c00126e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126e5:	83 ec 08             	sub    esp,0x8
c00126e8:	6a 00                	push   0x0
c00126ea:	50                   	push   eax
c00126eb:	e8 b8 05 00 00       	call   c0012ca8 <UnixFile::UnixFile(int)>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	ba 60 44 02 c0       	mov    edx,0xc0024460
c00126f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126fc:	89 10                	mov    DWORD PTR [eax],edx
c00126fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012702:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001270d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012718:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001271c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012720:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012728:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001272f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012733:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001273a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001273e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012749:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012750:	83 ec 0c             	sub    esp,0xc
c0012753:	68 39 44 02 c0       	push   0xc0024439
c0012758:	e8 09 48 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012764:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001276b:	83 ec 0c             	sub    esp,0xc
c001276e:	6a 01                	push   0x1
c0012770:	e8 86 09 00 00       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c0012775:	83 c4 10             	add    esp,0x10
c0012778:	89 c2                	mov    edx,eax
c001277a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012781:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c0012787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001278e:	89 c6                	mov    esi,eax
c0012790:	e8 75 d5 ff ff       	call   c000fd0a <Phys::allocatePage()>
c0012795:	68 05 0c 00 00       	push   0xc05
c001279a:	56                   	push   esi
c001279b:	50                   	push   eax
c001279c:	53                   	push   ebx
c001279d:	e8 32 10 00 00       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00127a2:	83 c4 10             	add    esp,0x10
c00127a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127ac:	83 ec 04             	sub    esp,0x4
c00127af:	68 a0 0f 00 00       	push   0xfa0
c00127b4:	6a 00                	push   0x0
c00127b6:	50                   	push   eax
c00127b7:	e8 34 dd fe ff       	call   c00004f0 <memset>
c00127bc:	83 c4 10             	add    esp,0x10
c00127bf:	83 ec 04             	sub    esp,0x4
c00127c2:	6a 00                	push   0x0
c00127c4:	6a 07                	push   0x7
c00127c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127ca:	e8 23 f8 ff ff       	call   c0011ff2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	83 ec 04             	sub    esp,0x4
c00127d5:	6a 00                	push   0x0
c00127d7:	6a 00                	push   0x0
c00127d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127dd:	e8 ba f9 ff ff       	call   c001219c <VgaText::setCursor(int, int)>
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	83 ec 0c             	sub    esp,0xc
c00127e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127ec:	e8 0d fa ff ff       	call   c00121fe <VgaText::clearScreen()>
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00127fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012800:	05 82 00 00 00       	add    eax,0x82
c0012805:	83 ec 04             	sub    esp,0x4
c0012808:	68 80 00 00 00       	push   0x80
c001280d:	6a 00                	push   0x0
c001280f:	50                   	push   eax
c0012810:	e8 db dc fe ff       	call   c00004f0 <memset>
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001281c:	05 02 01 00 00       	add    eax,0x102
c0012821:	83 ec 04             	sub    esp,0x4
c0012824:	68 80 00 00 00       	push   0x80
c0012829:	6a 00                	push   0x0
c001282b:	50                   	push   eax
c001282c:	e8 bf dc fe ff       	call   c00004f0 <memset>
c0012831:	83 c4 10             	add    esp,0x10
c0012834:	90                   	nop
c0012835:	83 c4 04             	add    esp,0x4
c0012838:	5b                   	pop    ebx
c0012839:	5e                   	pop    esi
c001283a:	c3                   	ret    
c001283b:	90                   	nop

c001283c <VgaText::receiveKey(unsigned char)>:
c001283c:	55                   	push   ebp
c001283d:	57                   	push   edi
c001283e:	56                   	push   esi
c001283f:	53                   	push   ebx
c0012840:	83 ec 2c             	sub    esp,0x2c
c0012843:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012847:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001284b:	89 fd                	mov    ebp,edi
c001284d:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012853:	0f 84 48 01 00 00    	je     c00129a1 <VgaText::receiveKey(unsigned char)+0x165>
c0012859:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001285f:	83 fd 08             	cmp    ebp,0x8
c0012862:	75 6a                	jne    c00128ce <VgaText::receiveKey(unsigned char)+0x92>
c0012864:	83 ec 0c             	sub    esp,0xc
c0012867:	56                   	push   esi
c0012868:	e8 13 dd fe ff       	call   c0000580 <strlen>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	85 c0                	test   eax,eax
c0012872:	0f 84 ef 00 00 00    	je     c0012967 <VgaText::receiveKey(unsigned char)+0x12b>
c0012878:	50                   	push   eax
c0012879:	50                   	push   eax
c001287a:	6a 08                	push   0x8
c001287c:	53                   	push   ebx
c001287d:	e8 40 fb ff ff       	call   c00123c2 <VgaText::putchar(char)>
c0012882:	89 34 24             	mov    DWORD PTR [esp],esi
c0012885:	e8 f6 dc fe ff       	call   c0000580 <strlen>
c001288a:	83 c4 10             	add    esp,0x10
c001288d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012895:	83 fa 1f             	cmp    edx,0x1f
c0012898:	89 d0                	mov    eax,edx
c001289a:	7f 1c                	jg     c00128b8 <VgaText::receiveKey(unsigned char)+0x7c>
c001289c:	83 e8 08             	sub    eax,0x8
c001289f:	3c 02                	cmp    al,0x2
c00128a1:	76 15                	jbe    c00128b8 <VgaText::receiveKey(unsigned char)+0x7c>
c00128a3:	83 fa 0d             	cmp    edx,0xd
c00128a6:	74 10                	je     c00128b8 <VgaText::receiveKey(unsigned char)+0x7c>
c00128a8:	57                   	push   edi
c00128a9:	57                   	push   edi
c00128aa:	68 4c 44 02 c0       	push   0xc002444c
c00128af:	53                   	push   ebx
c00128b0:	e8 3b fc ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c00128b5:	83 c4 10             	add    esp,0x10
c00128b8:	83 ec 0c             	sub    esp,0xc
c00128bb:	56                   	push   esi
c00128bc:	e8 bf dc fe ff       	call   c0000580 <strlen>
c00128c1:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00128c9:	e9 96 00 00 00       	jmp    c0012964 <VgaText::receiveKey(unsigned char)+0x128>
c00128ce:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00128d4:	83 ec 0c             	sub    esp,0xc
c00128d7:	50                   	push   eax
c00128d8:	e8 a3 dc fe ff       	call   c0000580 <strlen>
c00128dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00128e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128e4:	e8 97 dc fe ff       	call   c0000580 <strlen>
c00128e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128ed:	83 c4 10             	add    esp,0x10
c00128f0:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00128f4:	3d 80 00 00 00       	cmp    eax,0x80
c00128f9:	0f 87 a2 00 00 00    	ja     c00129a1 <VgaText::receiveKey(unsigned char)+0x165>
c00128ff:	8d 47 ff             	lea    eax,[edi-0x1]
c0012902:	3c 1e                	cmp    al,0x1e
c0012904:	77 35                	ja     c001293b <VgaText::receiveKey(unsigned char)+0xff>
c0012906:	8d 47 f7             	lea    eax,[edi-0x9]
c0012909:	3c 01                	cmp    al,0x1
c001290b:	76 2e                	jbe    c001293b <VgaText::receiveKey(unsigned char)+0xff>
c001290d:	83 fd 0d             	cmp    ebp,0xd
c0012910:	74 29                	je     c001293b <VgaText::receiveKey(unsigned char)+0xff>
c0012912:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012915:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012918:	68 52 44 02 c0       	push   0xc0024452
c001291d:	53                   	push   ebx
c001291e:	e8 3f fc ff ff       	call   c0012562 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012923:	8d 47 40             	lea    eax,[edi+0x40]
c0012926:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012929:	0f b6 c0             	movzx  eax,al
c001292c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001292f:	50                   	push   eax
c0012930:	53                   	push   ebx
c0012931:	e8 bc f9 ff ff       	call   c00122f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012936:	83 c4 20             	add    esp,0x20
c0012939:	eb 11                	jmp    c001294c <VgaText::receiveKey(unsigned char)+0x110>
c001293b:	51                   	push   ecx
c001293c:	89 f8                	mov    eax,edi
c001293e:	51                   	push   ecx
c001293f:	0f be c0             	movsx  eax,al
c0012942:	50                   	push   eax
c0012943:	53                   	push   ebx
c0012944:	e8 79 fa ff ff       	call   c00123c2 <VgaText::putchar(char)>
c0012949:	83 c4 10             	add    esp,0x10
c001294c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012951:	89 f8                	mov    eax,edi
c0012953:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012957:	52                   	push   edx
c0012958:	52                   	push   edx
c0012959:	8d 44 24 26          	lea    eax,[esp+0x26]
c001295d:	50                   	push   eax
c001295e:	56                   	push   esi
c001295f:	e8 0c df fe ff       	call   c0000870 <strcat>
c0012964:	83 c4 10             	add    esp,0x10
c0012967:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c001296e:	75 0f                	jne    c001297f <VgaText::receiveKey(unsigned char)+0x143>
c0012970:	83 fd 1c             	cmp    ebp,0x1c
c0012973:	77 2c                	ja     c00129a1 <VgaText::receiveKey(unsigned char)+0x165>
c0012975:	b8 08 04 00 10       	mov    eax,0x10000408
c001297a:	0f a3 e8             	bt     eax,ebp
c001297d:	73 22                	jae    c00129a1 <VgaText::receiveKey(unsigned char)+0x165>
c001297f:	50                   	push   eax
c0012980:	81 c3 02 01 00 00    	add    ebx,0x102
c0012986:	50                   	push   eax
c0012987:	56                   	push   esi
c0012988:	53                   	push   ebx
c0012989:	e8 e2 de fe ff       	call   c0000870 <strcat>
c001298e:	83 c4 0c             	add    esp,0xc
c0012991:	68 80 00 00 00       	push   0x80
c0012996:	6a 00                	push   0x0
c0012998:	56                   	push   esi
c0012999:	e8 52 db fe ff       	call   c00004f0 <memset>
c001299e:	83 c4 10             	add    esp,0x10
c00129a1:	83 c4 2c             	add    esp,0x2c
c00129a4:	5b                   	pop    ebx
c00129a5:	5e                   	pop    esi
c00129a6:	5f                   	pop    edi
c00129a7:	5d                   	pop    ebp
c00129a8:	c3                   	ret    
c00129a9:	90                   	nop

c00129aa <VgaText::doUpdate()>:
c00129aa:	c3                   	ret    
c00129ab:	90                   	nop

c00129ac <TSS::TSS()>:
c00129ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129b7:	90                   	nop
c00129b8:	c3                   	ret    
c00129b9:	90                   	nop
c00129ba:	66 90                	xchg   ax,ax

c00129bc <TSS::setESP(unsigned long)>:
c00129bc:	55                   	push   ebp
c00129bd:	89 e5                	mov    ebp,esp
c00129bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00129c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129cb:	90                   	nop
c00129cc:	5d                   	pop    ebp
c00129cd:	c3                   	ret    
c00129ce:	66 90                	xchg   ax,ax

c00129d0 <TSS::flush()>:
c00129d0:	55                   	push   ebp
c00129d1:	89 e5                	mov    ebp,esp
c00129d3:	83 ec 10             	sub    esp,0x10
c00129d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129db:	83 c8 03             	or     eax,0x3
c00129de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00129e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00129e6:	66 89 d0             	mov    ax,dx
c00129e9:	0f 00 d8             	ltr    ax
c00129ec:	90                   	nop
c00129ed:	c9                   	leave  
c00129ee:	c3                   	ret    
c00129ef:	90                   	nop

c00129f0 <TSS::setup(unsigned long, unsigned long)>:
c00129f0:	55                   	push   ebp
c00129f1:	89 e5                	mov    ebp,esp
c00129f3:	83 ec 18             	sub    esp,0x18
c00129f6:	83 ec 0c             	sub    esp,0xc
c00129f9:	6a 68                	push   0x68
c00129fb:	e8 b4 cc ff ff       	call   c000f6b4 <malloc>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	89 c2                	mov    edx,eax
c0012a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a08:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a11:	83 ec 08             	sub    esp,0x8
c0012a14:	50                   	push   eax
c0012a15:	68 74 44 02 c0       	push   0xc0024474
c0012a1a:	e8 47 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a1f:	83 c4 10             	add    esp,0x10
c0012a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a28:	83 ec 04             	sub    esp,0x4
c0012a2b:	6a 68                	push   0x68
c0012a2d:	6a 00                	push   0x0
c0012a2f:	50                   	push   eax
c0012a30:	e8 bb da fe ff       	call   c00004f0 <memset>
c0012a35:	83 c4 10             	add    esp,0x10
c0012a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a3e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a4a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012a59:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a62:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a6e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a7a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a86:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a92:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a9e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aa7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012aaa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012aad:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ab3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ab9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012abf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ac2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012ac9:	83 ec 0c             	sub    esp,0xc
c0012acc:	68 8b 44 02 c0       	push   0xc002448b
c0012ad1:	e8 90 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ad6:	83 c4 10             	add    esp,0x10
c0012ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012adc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012adf:	0f 20 da             	mov    edx,cr3
c0012ae2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012ae5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012ae8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012aeb:	83 ec 0c             	sub    esp,0xc
c0012aee:	68 8e 44 02 c0       	push   0xc002448e
c0012af3:	e8 6e 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012af8:	83 c4 10             	add    esp,0x10
c0012afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012afe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b01:	83 ec 08             	sub    esp,0x8
c0012b04:	50                   	push   eax
c0012b05:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012b08:	50                   	push   eax
c0012b09:	e8 f6 bc ff ff       	call   c000e804 <GDTEntry::setBase(unsigned int)>
c0012b0e:	83 c4 10             	add    esp,0x10
c0012b11:	83 ec 08             	sub    esp,0x8
c0012b14:	6a 68                	push   0x68
c0012b16:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012b19:	50                   	push   eax
c0012b1a:	e8 01 bd ff ff       	call   c000e820 <GDTEntry::setLimit(unsigned int)>
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012b26:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012b29:	83 e0 0f             	and    eax,0xf
c0012b2c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012b2f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012b32:	83 c8 40             	or     eax,0x40
c0012b35:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012b38:	83 ec 0c             	sub    esp,0xc
c0012b3b:	68 91 44 02 c0       	push   0xc0024491
c0012b40:	e8 21 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012b45:	83 c4 10             	add    esp,0x10
c0012b48:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012b4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012b53:	83 ec 08             	sub    esp,0x8
c0012b56:	50                   	push   eax
c0012b57:	68 94 44 02 c0       	push   0xc0024494
c0012b5c:	e8 05 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012b61:	83 c4 10             	add    esp,0x10
c0012b64:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012b69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012b6f:	05 64 01 00 00       	add    eax,0x164
c0012b74:	83 ec 04             	sub    esp,0x4
c0012b77:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012b7a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012b7d:	50                   	push   eax
c0012b7e:	e8 d1 bc ff ff       	call   c000e854 <GDT::addEntry(GDTEntry)>
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	89 c2                	mov    edx,eax
c0012b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b8b:	89 10                	mov    DWORD PTR [eax],edx
c0012b8d:	83 ec 0c             	sub    esp,0xc
c0012b90:	68 a9 44 02 c0       	push   0xc00244a9
c0012b95:	e8 cc 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012ba2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ba8:	05 64 01 00 00       	add    eax,0x164
c0012bad:	83 ec 0c             	sub    esp,0xc
c0012bb0:	50                   	push   eax
c0012bb1:	e8 c8 bc ff ff       	call   c000e87e <GDT::flush()>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	83 ec 0c             	sub    esp,0xc
c0012bbc:	68 ac 44 02 c0       	push   0xc00244ac
c0012bc1:	e8 a0 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bce:	c9                   	leave  
c0012bcf:	c3                   	ret    

c0012bd0 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bdb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012be0:	75 08                	jne    c0012bea <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012be2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012be8:	eb 38                	jmp    c0012c22 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012bea:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012bef:	75 17                	jne    c0012c08 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012bf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bf6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012bf9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012bff:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c05:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012c08:	89 c1                	mov    ecx,eax
c0012c0a:	83 e1 fd             	and    ecx,0xfffffffd
c0012c0d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012c13:	74 cd                	je     c0012be2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012c15:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012c1a:	83 e0 ef             	and    eax,0xffffffef
c0012c1d:	83 f8 08             	cmp    eax,0x8
c0012c20:	76 c0                	jbe    c0012be2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012c22:	31 c0                	xor    eax,eax
c0012c24:	c3                   	ret    
c0012c25:	90                   	nop

c0012c26 <ReservedFilename::isAtty()>:
c0012c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c2a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012c2d:	31 c0                	xor    eax,eax
c0012c2f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012c35:	74 09                	je     c0012c40 <ReservedFilename::isAtty()+0x1a>
c0012c37:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012c3d:	0f 94 c0             	sete   al
c0012c40:	c3                   	ret    
c0012c41:	90                   	nop

c0012c42 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012c4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c51:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012c56:	75 08                	jne    c0012c60 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012c58:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012c5e:	eb 3d                	jmp    c0012c9d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012c60:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012c65:	75 17                	jne    c0012c7e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012c6f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012c75:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c7b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012c7e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012c83:	75 04                	jne    c0012c89 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012c85:	89 0a                	mov    DWORD PTR [edx],ecx
c0012c87:	eb 14                	jmp    c0012c9d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012c89:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012c8e:	74 c8                	je     c0012c58 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012c90:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012c95:	83 e0 ef             	and    eax,0xffffffef
c0012c98:	83 f8 08             	cmp    eax,0x8
c0012c9b:	76 bb                	jbe    c0012c58 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012c9d:	31 c0                	xor    eax,eax
c0012c9f:	c3                   	ret    

c0012ca0 <UnixFile::getFileDescriptor()>:
c0012ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ca7:	c3                   	ret    

c0012ca8 <UnixFile::UnixFile(int)>:
c0012ca8:	53                   	push   ebx
c0012ca9:	83 ec 28             	sub    esp,0x28
c0012cac:	ba d8 44 02 c0       	mov    edx,0xc00244d8
c0012cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cb5:	89 10                	mov    DWORD PTR [eax],edx
c0012cb7:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012cbf:	0f 8f 90 01 00 00    	jg     c0012e55 <UnixFile::UnixFile(int)+0x1ad>
c0012cc5:	a1 60 68 02 c0       	mov    eax,ds:0xc0026860
c0012cca:	8d 50 01             	lea    edx,[eax+0x1]
c0012ccd:	89 15 60 68 02 c0    	mov    DWORD PTR ds:0xc0026860,edx
c0012cd3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012cd7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012cda:	83 ec 08             	sub    esp,0x8
c0012cdd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ce1:	68 78 c2 02 c0       	push   0xc002c278
c0012ce6:	e8 e3 f2 00 00       	call   c0021fce <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012ceb:	83 c4 10             	add    esp,0x10
c0012cee:	a0 74 c2 02 c0       	mov    al,ds:0xc002c274
c0012cf3:	83 f0 01             	xor    eax,0x1
c0012cf6:	0f b6 c0             	movzx  eax,al
c0012cf9:	85 c0                	test   eax,eax
c0012cfb:	0f 84 55 01 00 00    	je     c0012e56 <UnixFile::UnixFile(int)+0x1ae>
c0012d01:	c6 05 74 c2 02 c0 01 	mov    BYTE PTR ds:0xc002c274,0x1
c0012d08:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012d10:	83 ec 0c             	sub    esp,0xc
c0012d13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d17:	e8 98 c9 ff ff       	call   c000f6b4 <malloc>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	89 c3                	mov    ebx,eax
c0012d21:	83 ec 08             	sub    esp,0x8
c0012d24:	68 03 ff ff 0f       	push   0xfffff03
c0012d29:	53                   	push   ebx
c0012d2a:	e8 2d 01 00 00       	call   c0012e5c <ReservedFilename::ReservedFilename(int)>
c0012d2f:	83 c4 10             	add    esp,0x10
c0012d32:	89 1d 6c c2 02 c0    	mov    DWORD PTR ds:0xc002c26c,ebx
c0012d38:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d47:	e8 68 c9 ff ff       	call   c000f6b4 <malloc>
c0012d4c:	83 c4 10             	add    esp,0x10
c0012d4f:	89 c3                	mov    ebx,eax
c0012d51:	83 ec 08             	sub    esp,0x8
c0012d54:	68 01 ff ff 0f       	push   0xfffff01
c0012d59:	53                   	push   ebx
c0012d5a:	e8 fd 00 00 00       	call   c0012e5c <ReservedFilename::ReservedFilename(int)>
c0012d5f:	83 c4 10             	add    esp,0x10
c0012d62:	89 1d 70 c2 02 c0    	mov    DWORD PTR ds:0xc002c270,ebx
c0012d68:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012d70:	83 ec 0c             	sub    esp,0xc
c0012d73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d77:	e8 38 c9 ff ff       	call   c000f6b4 <malloc>
c0012d7c:	83 c4 10             	add    esp,0x10
c0012d7f:	89 c3                	mov    ebx,eax
c0012d81:	83 ec 08             	sub    esp,0x8
c0012d84:	68 00 ff ff 0f       	push   0xfffff00
c0012d89:	53                   	push   ebx
c0012d8a:	e8 cd 00 00 00       	call   c0012e5c <ReservedFilename::ReservedFilename(int)>
c0012d8f:	83 c4 10             	add    esp,0x10
c0012d92:	89 1d 64 c2 02 c0    	mov    DWORD PTR ds:0xc002c264,ebx
c0012d98:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012da0:	83 ec 0c             	sub    esp,0xc
c0012da3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012da7:	e8 08 c9 ff ff       	call   c000f6b4 <malloc>
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	89 c3                	mov    ebx,eax
c0012db1:	83 ec 08             	sub    esp,0x8
c0012db4:	68 02 ff ff 0f       	push   0xfffff02
c0012db9:	53                   	push   ebx
c0012dba:	e8 9d 00 00 00       	call   c0012e5c <ReservedFilename::ReservedFilename(int)>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	89 1d 68 c2 02 c0    	mov    DWORD PTR ds:0xc002c268,ebx
c0012dc8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012dd0:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012dd5:	7f 7f                	jg     c0012e56 <UnixFile::UnixFile(int)+0x1ae>
c0012dd7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012ddf:	83 ec 0c             	sub    esp,0xc
c0012de2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012de6:	e8 c9 c8 ff ff       	call   c000f6b4 <malloc>
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	89 c3                	mov    ebx,eax
c0012df0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012df4:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012df9:	83 ec 08             	sub    esp,0x8
c0012dfc:	50                   	push   eax
c0012dfd:	53                   	push   ebx
c0012dfe:	e8 59 00 00 00       	call   c0012e5c <ReservedFilename::ReservedFilename(int)>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e0a:	89 1c 85 40 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3dc0],ebx
c0012e11:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012e19:	83 ec 0c             	sub    esp,0xc
c0012e1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e20:	e8 8f c8 ff ff       	call   c000f6b4 <malloc>
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	89 c3                	mov    ebx,eax
c0012e2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e2e:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012e33:	83 ec 08             	sub    esp,0x8
c0012e36:	50                   	push   eax
c0012e37:	53                   	push   ebx
c0012e38:	e8 1f 00 00 00       	call   c0012e5c <ReservedFilename::ReservedFilename(int)>
c0012e3d:	83 c4 10             	add    esp,0x10
c0012e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e44:	89 1c 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],ebx
c0012e4b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012e50:	e9 7b ff ff ff       	jmp    c0012dd0 <UnixFile::UnixFile(int)+0x128>
c0012e55:	90                   	nop
c0012e56:	83 c4 28             	add    esp,0x28
c0012e59:	5b                   	pop    ebx
c0012e5a:	c3                   	ret    
c0012e5b:	90                   	nop

c0012e5c <ReservedFilename::ReservedFilename(int)>:
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e63:	83 ec 08             	sub    esp,0x8
c0012e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e6a:	50                   	push   eax
c0012e6b:	e8 38 fe ff ff       	call   c0012ca8 <UnixFile::UnixFile(int)>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	ba f4 44 02 c0       	mov    edx,0xc00244f4
c0012e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7c:	89 10                	mov    DWORD PTR [eax],edx
c0012e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e86:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e89:	90                   	nop
c0012e8a:	83 c4 0c             	add    esp,0xc
c0012e8d:	c3                   	ret    

c0012e8e <UnixFile::~UnixFile()>:
c0012e8e:	83 ec 1c             	sub    esp,0x1c
c0012e91:	ba d8 44 02 c0       	mov    edx,0xc00244d8
c0012e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e9a:	89 10                	mov    DWORD PTR [eax],edx
c0012e9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ea3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012ea8:	7f 76                	jg     c0012f20 <UnixFile::~UnixFile()+0x92>
c0012eaa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012eb2:	83 ec 0c             	sub    esp,0xc
c0012eb5:	68 78 c2 02 c0       	push   0xc002c278
c0012eba:	e8 e3 f1 00 00       	call   c00220a2 <LinkedList<UnixFile>::getFirstElement()>
c0012ebf:	83 c4 10             	add    esp,0x10
c0012ec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ec6:	83 ec 0c             	sub    esp,0xc
c0012ec9:	68 78 c2 02 c0       	push   0xc002c278
c0012ece:	e8 d7 f1 00 00       	call   c00220aa <LinkedList<UnixFile>::removeFirst()>
c0012ed3:	83 c4 10             	add    esp,0x10
c0012ed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012eda:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012ede:	74 43                	je     c0012f23 <UnixFile::~UnixFile()+0x95>
c0012ee0:	83 ec 08             	sub    esp,0x8
c0012ee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ee7:	68 78 c2 02 c0       	push   0xc002c278
c0012eec:	e8 dd f0 00 00       	call   c0021fce <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012ef1:	83 c4 10             	add    esp,0x10
c0012ef4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ef8:	8d 50 01             	lea    edx,[eax+0x1]
c0012efb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012eff:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012f04:	0f 94 c0             	sete   al
c0012f07:	0f b6 c0             	movzx  eax,al
c0012f0a:	85 c0                	test   eax,eax
c0012f0c:	74 a4                	je     c0012eb2 <UnixFile::~UnixFile()+0x24>
c0012f0e:	83 ec 0c             	sub    esp,0xc
c0012f11:	68 b0 44 02 c0       	push   0xc00244b0
c0012f16:	e8 f5 cb ff ff       	call   c000fb10 <KePanic(char const*)>
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	eb 92                	jmp    c0012eb2 <UnixFile::~UnixFile()+0x24>
c0012f20:	90                   	nop
c0012f21:	eb 01                	jmp    c0012f24 <UnixFile::~UnixFile()+0x96>
c0012f23:	90                   	nop
c0012f24:	90                   	nop
c0012f25:	83 c4 1c             	add    esp,0x1c
c0012f28:	c3                   	ret    
c0012f29:	90                   	nop

c0012f2a <UnixFile::~UnixFile()>:
c0012f2a:	83 ec 0c             	sub    esp,0xc
c0012f2d:	83 ec 0c             	sub    esp,0xc
c0012f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f34:	e8 55 ff ff ff       	call   c0012e8e <UnixFile::~UnixFile()>
c0012f39:	83 c4 10             	add    esp,0x10
c0012f3c:	83 ec 08             	sub    esp,0x8
c0012f3f:	6a 0c                	push   0xc
c0012f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f45:	e8 72 a3 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0012f4a:	83 c4 10             	add    esp,0x10
c0012f4d:	83 c4 0c             	add    esp,0xc
c0012f50:	c3                   	ret    
c0012f51:	90                   	nop

c0012f52 <ReservedFilename::~ReservedFilename()>:
c0012f52:	83 ec 0c             	sub    esp,0xc
c0012f55:	ba f4 44 02 c0       	mov    edx,0xc00244f4
c0012f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5e:	89 10                	mov    DWORD PTR [eax],edx
c0012f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f64:	83 ec 0c             	sub    esp,0xc
c0012f67:	50                   	push   eax
c0012f68:	e8 21 ff ff ff       	call   c0012e8e <UnixFile::~UnixFile()>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	90                   	nop
c0012f71:	83 c4 0c             	add    esp,0xc
c0012f74:	c3                   	ret    
c0012f75:	90                   	nop

c0012f76 <ReservedFilename::~ReservedFilename()>:
c0012f76:	83 ec 0c             	sub    esp,0xc
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f80:	e8 cd ff ff ff       	call   c0012f52 <ReservedFilename::~ReservedFilename()>
c0012f85:	83 c4 10             	add    esp,0x10
c0012f88:	83 ec 08             	sub    esp,0x8
c0012f8b:	6a 0c                	push   0xc
c0012f8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f91:	e8 26 a3 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0012f96:	83 c4 10             	add    esp,0x10
c0012f99:	83 c4 0c             	add    esp,0xc
c0012f9c:	c3                   	ret    

c0012f9d <KeGetFileFromDescriptor(int)>:
c0012f9d:	53                   	push   ebx
c0012f9e:	83 ec 08             	sub    esp,0x8
c0012fa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fa5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0012fab:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0012fb1:	7f 30                	jg     c0012fe3 <KeGetFileFromDescriptor(int)+0x46>
c0012fb3:	83 ec 0c             	sub    esp,0xc
c0012fb6:	68 78 c2 02 c0       	push   0xc002c278
c0012fbb:	e8 e2 f0 00 00       	call   c00220a2 <LinkedList<UnixFile>::getFirstElement()>
c0012fc0:	8d 50 ff             	lea    edx,[eax-0x1]
c0012fc3:	83 c4 10             	add    esp,0x10
c0012fc6:	83 fa fd             	cmp    edx,0xfffffffd
c0012fc9:	76 04                	jbe    c0012fcf <KeGetFileFromDescriptor(int)+0x32>
c0012fcb:	31 c0                	xor    eax,eax
c0012fcd:	eb 6e                	jmp    c001303d <KeGetFileFromDescriptor(int)+0xa0>
c0012fcf:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012fd2:	74 69                	je     c001303d <KeGetFileFromDescriptor(int)+0xa0>
c0012fd4:	52                   	push   edx
c0012fd5:	52                   	push   edx
c0012fd6:	50                   	push   eax
c0012fd7:	68 78 c2 02 c0       	push   0xc002c278
c0012fdc:	e8 6b f1 00 00       	call   c002214c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0012fe1:	eb dd                	jmp    c0012fc0 <KeGetFileFromDescriptor(int)+0x23>
c0012fe3:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0012fe9:	a1 6c c2 02 c0       	mov    eax,ds:0xc002c26c
c0012fee:	74 4d                	je     c001303d <KeGetFileFromDescriptor(int)+0xa0>
c0012ff0:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012ff6:	a1 70 c2 02 c0       	mov    eax,ds:0xc002c270
c0012ffb:	74 40                	je     c001303d <KeGetFileFromDescriptor(int)+0xa0>
c0012ffd:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013003:	a1 68 c2 02 c0       	mov    eax,ds:0xc002c268
c0013008:	74 33                	je     c001303d <KeGetFileFromDescriptor(int)+0xa0>
c001300a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013010:	a1 64 c2 02 c0       	mov    eax,ds:0xc002c264
c0013015:	74 26                	je     c001303d <KeGetFileFromDescriptor(int)+0xa0>
c0013017:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001301d:	83 f8 08             	cmp    eax,0x8
c0013020:	77 09                	ja     c001302b <KeGetFileFromDescriptor(int)+0x8e>
c0013022:	8b 04 85 40 c2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3dc0]
c0013029:	eb 12                	jmp    c001303d <KeGetFileFromDescriptor(int)+0xa0>
c001302b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013031:	83 fb 08             	cmp    ebx,0x8
c0013034:	77 95                	ja     c0012fcb <KeGetFileFromDescriptor(int)+0x2e>
c0013036:	8b 04 9d 00 c2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3e00]
c001303d:	83 c4 08             	add    esp,0x8
c0013040:	5b                   	pop    ebx
c0013041:	c3                   	ret    

c0013042 <__static_initialization_and_destruction_0(int, int)>:
c0013042:	83 ec 0c             	sub    esp,0xc
c0013045:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001304a:	75 34                	jne    c0013080 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001304c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013054:	75 2a                	jne    c0013080 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	68 78 c2 02 c0       	push   0xc002c278
c001305e:	e8 29 ef 00 00       	call   c0021f8c <LinkedList<UnixFile>::LinkedList()>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	83 ec 04             	sub    esp,0x4
c0013069:	68 b4 60 02 c0       	push   0xc00260b4
c001306e:	68 78 c2 02 c0       	push   0xc002c278
c0013073:	68 8a 1f 02 c0       	push   0xc0021f8a
c0013078:	e8 ef a1 ff ff       	call   c000d26c <__cxa_atexit>
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	90                   	nop
c0013081:	83 c4 0c             	add    esp,0xc
c0013084:	c3                   	ret    

c0013085 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013085:	83 ec 0c             	sub    esp,0xc
c0013088:	83 ec 08             	sub    esp,0x8
c001308b:	68 ff ff 00 00       	push   0xffff
c0013090:	6a 01                	push   0x1
c0013092:	e8 ab ff ff ff       	call   c0013042 <__static_initialization_and_destruction_0(int, int)>
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	83 c4 0c             	add    esp,0xc
c001309d:	c3                   	ret    

c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001309e:	53                   	push   ebx
c001309f:	8b 15 68 68 02 c0    	mov    edx,DWORD PTR ds:0xc0026868
c00130a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00130ad:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00130b3:	89 d8                	mov    eax,ebx
c00130b5:	d1 e8                	shr    eax,1
c00130b7:	01 d0                	add    eax,edx
c00130b9:	80 e3 01             	and    bl,0x1
c00130bc:	8a 10                	mov    dl,BYTE PTR [eax]
c00130be:	75 09                	jne    c00130c9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00130c0:	83 e2 f0             	and    edx,0xfffffff0
c00130c3:	09 ca                	or     edx,ecx
c00130c5:	88 10                	mov    BYTE PTR [eax],dl
c00130c7:	5b                   	pop    ebx
c00130c8:	c3                   	ret    
c00130c9:	0f b6 c9             	movzx  ecx,cl
c00130cc:	83 e2 0f             	and    edx,0xf
c00130cf:	c1 e1 04             	shl    ecx,0x4
c00130d2:	09 ca                	or     edx,ecx
c00130d4:	88 10                	mov    BYTE PTR [eax],dl
c00130d6:	5b                   	pop    ebx
c00130d7:	c3                   	ret    

c00130d8 <Virt::getPageState(unsigned long)>:
c00130d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130dc:	8b 0d 68 68 02 c0    	mov    ecx,DWORD PTR ds:0xc0026868
c00130e2:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00130e8:	89 d0                	mov    eax,edx
c00130ea:	d1 e8                	shr    eax,1
c00130ec:	80 e2 01             	and    dl,0x1
c00130ef:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00130f2:	74 03                	je     c00130f7 <Virt::getPageState(unsigned long)+0x1f>
c00130f4:	c1 e8 04             	shr    eax,0x4
c00130f7:	83 e0 0f             	and    eax,0xf
c00130fa:	c3                   	ret    

c00130fb <Virt::allocateKernelVirtualPages(int)>:
c00130fb:	55                   	push   ebp
c00130fc:	57                   	push   edi
c00130fd:	56                   	push   esi
c00130fe:	31 f6                	xor    esi,esi
c0013100:	53                   	push   ebx
c0013101:	31 db                	xor    ebx,ebx
c0013103:	83 ec 1c             	sub    esp,0x1c
c0013106:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001310b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001310f:	8b 2d 64 68 02 c0    	mov    ebp,DWORD PTR ds:0xc0026864
c0013115:	55                   	push   ebp
c0013116:	e8 bd ff ff ff       	call   c00130d8 <Virt::getPageState(unsigned long)>
c001311b:	5a                   	pop    edx
c001311c:	84 c0                	test   al,al
c001311e:	75 3d                	jne    c001315d <Virt::allocateKernelVirtualPages(int)+0x62>
c0013120:	85 db                	test   ebx,ebx
c0013122:	0f 44 f5             	cmove  esi,ebp
c0013125:	83 c3 01             	add    ebx,0x1
c0013128:	39 fb                	cmp    ebx,edi
c001312a:	74 5e                	je     c001318a <Virt::allocateKernelVirtualPages(int)+0x8f>
c001312c:	83 c5 01             	add    ebp,0x1
c001312f:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013135:	76 33                	jbe    c001316a <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013137:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001313c:	c7 05 64 68 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026864,0xc8000
c0013146:	75 2a                	jne    c0013172 <Virt::allocateKernelVirtualPages(int)+0x77>
c0013148:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001314d:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0013152:	55                   	push   ebp
c0013153:	e8 80 ff ff ff       	call   c00130d8 <Virt::getPageState(unsigned long)>
c0013158:	5a                   	pop    edx
c0013159:	84 c0                	test   al,al
c001315b:	74 c3                	je     c0013120 <Virt::allocateKernelVirtualPages(int)+0x25>
c001315d:	83 c5 01             	add    ebp,0x1
c0013160:	31 db                	xor    ebx,ebx
c0013162:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013168:	77 cd                	ja     c0013137 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001316a:	89 2d 64 68 02 c0    	mov    DWORD PTR ds:0xc0026864,ebp
c0013170:	eb a3                	jmp    c0013115 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013172:	83 ec 0c             	sub    esp,0xc
c0013175:	68 08 45 02 c0       	push   0xc0024508
c001317a:	e8 91 c9 ff ff       	call   c000fb10 <KePanic(char const*)>
c001317f:	8b 2d 64 68 02 c0    	mov    ebp,DWORD PTR ds:0xc0026864
c0013185:	83 c4 10             	add    esp,0x10
c0013188:	eb 8b                	jmp    c0013115 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001318a:	89 35 64 68 02 c0    	mov    DWORD PTR ds:0xc0026864,esi
c0013190:	83 fb 01             	cmp    ebx,0x1
c0013193:	74 63                	je     c00131f8 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0013195:	85 ff                	test   edi,edi
c0013197:	74 41                	je     c00131da <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013199:	89 f0                	mov    eax,esi
c001319b:	31 db                	xor    ebx,ebx
c001319d:	8d 6f ff             	lea    ebp,[edi-0x1]
c00131a0:	eb 16                	jmp    c00131b8 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00131a2:	6a 01                	push   0x1
c00131a4:	83 c3 01             	add    ebx,0x1
c00131a7:	50                   	push   eax
c00131a8:	e8 f1 fe ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00131ad:	39 fb                	cmp    ebx,edi
c00131af:	58                   	pop    eax
c00131b0:	5a                   	pop    edx
c00131b1:	74 27                	je     c00131da <Virt::allocateKernelVirtualPages(int)+0xdf>
c00131b3:	a1 64 68 02 c0       	mov    eax,ds:0xc0026864
c00131b8:	8d 50 01             	lea    edx,[eax+0x1]
c00131bb:	85 db                	test   ebx,ebx
c00131bd:	89 15 64 68 02 c0    	mov    DWORD PTR ds:0xc0026864,edx
c00131c3:	74 22                	je     c00131e7 <Virt::allocateKernelVirtualPages(int)+0xec>
c00131c5:	39 dd                	cmp    ebp,ebx
c00131c7:	75 d9                	jne    c00131a2 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00131c9:	6a 03                	push   0x3
c00131cb:	83 c3 01             	add    ebx,0x1
c00131ce:	50                   	push   eax
c00131cf:	e8 ca fe ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00131d4:	39 fb                	cmp    ebx,edi
c00131d6:	59                   	pop    ecx
c00131d7:	58                   	pop    eax
c00131d8:	75 d9                	jne    c00131b3 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00131da:	83 c4 1c             	add    esp,0x1c
c00131dd:	89 f0                	mov    eax,esi
c00131df:	5b                   	pop    ebx
c00131e0:	c1 e0 0c             	shl    eax,0xc
c00131e3:	5e                   	pop    esi
c00131e4:	5f                   	pop    edi
c00131e5:	5d                   	pop    ebp
c00131e6:	c3                   	ret    
c00131e7:	6a 02                	push   0x2
c00131e9:	bb 01 00 00 00       	mov    ebx,0x1
c00131ee:	50                   	push   eax
c00131ef:	e8 aa fe ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00131f4:	58                   	pop    eax
c00131f5:	5a                   	pop    edx
c00131f6:	eb bb                	jmp    c00131b3 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00131f8:	6a 04                	push   0x4
c00131fa:	56                   	push   esi
c00131fb:	8d 46 01             	lea    eax,[esi+0x1]
c00131fe:	a3 64 68 02 c0       	mov    ds:0xc0026864,eax
c0013203:	e8 96 fe ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013208:	89 f0                	mov    eax,esi
c001320a:	59                   	pop    ecx
c001320b:	c1 e0 0c             	shl    eax,0xc
c001320e:	5b                   	pop    ebx
c001320f:	83 c4 1c             	add    esp,0x1c
c0013212:	5b                   	pop    ebx
c0013213:	5e                   	pop    esi
c0013214:	5f                   	pop    edi
c0013215:	5d                   	pop    ebp
c0013216:	c3                   	ret    

c0013217 <Virt::freeSwapfilePage(unsigned long)>:
c0013217:	53                   	push   ebx
c0013218:	8b 15 8c c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c28c
c001321e:	b8 01 00 00 00       	mov    eax,0x1
c0013223:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013227:	d3 e0                	shl    eax,cl
c0013229:	89 cb                	mov    ebx,ecx
c001322b:	c1 eb 05             	shr    ebx,0x5
c001322e:	f7 d0                	not    eax
c0013230:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013233:	21 c1                	and    ecx,eax
c0013235:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013238:	5b                   	pop    ebx
c0013239:	c3                   	ret    

c001323a <Virt::swapIDToSector(unsigned long)>:
c001323a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001323e:	8b 15 6c 68 02 c0    	mov    edx,DWORD PTR ds:0xc002686c
c0013244:	8b 0d 74 68 02 c0    	mov    ecx,DWORD PTR ds:0xc0026874
c001324a:	0f af c2             	imul   eax,edx
c001324d:	01 c8                	add    eax,ecx
c001324f:	c3                   	ret    

c0013250 <Virt::allocateSwapfilePage()>:
c0013250:	55                   	push   ebp
c0013251:	31 d2                	xor    edx,edx
c0013253:	57                   	push   edi
c0013254:	56                   	push   esi
c0013255:	53                   	push   ebx
c0013256:	83 ec 0c             	sub    esp,0xc
c0013259:	8b 1d 70 68 02 c0    	mov    ebx,DWORD PTR ds:0xc0026870
c001325f:	8b 0d 6c 68 02 c0    	mov    ecx,DWORD PTR ds:0xc002686c
c0013265:	89 d8                	mov    eax,ebx
c0013267:	f7 f1                	div    ecx
c0013269:	39 cb                	cmp    ebx,ecx
c001326b:	72 2f                	jb     c001329c <Virt::allocateSwapfilePage()+0x4c>
c001326d:	8b 35 8c c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c28c
c0013273:	8b 16                	mov    edx,DWORD PTR [esi]
c0013275:	f6 c2 01             	test   dl,0x1
c0013278:	74 3e                	je     c00132b8 <Virt::allocateSwapfilePage()+0x68>
c001327a:	31 c9                	xor    ecx,ecx
c001327c:	bf 01 00 00 00       	mov    edi,0x1
c0013281:	eb 12                	jmp    c0013295 <Virt::allocateSwapfilePage()+0x45>
c0013283:	89 ca                	mov    edx,ecx
c0013285:	89 fd                	mov    ebp,edi
c0013287:	c1 ea 05             	shr    edx,0x5
c001328a:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001328d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001328f:	d3 e5                	shl    ebp,cl
c0013291:	85 ea                	test   edx,ebp
c0013293:	74 2c                	je     c00132c1 <Virt::allocateSwapfilePage()+0x71>
c0013295:	83 c1 01             	add    ecx,0x1
c0013298:	39 c8                	cmp    eax,ecx
c001329a:	77 e7                	ja     c0013283 <Virt::allocateSwapfilePage()+0x33>
c001329c:	83 ec 0c             	sub    esp,0xc
c001329f:	68 1b 48 02 c0       	push   0xc002481b
c00132a4:	e8 67 c8 ff ff       	call   c000fb10 <KePanic(char const*)>
c00132a9:	83 c4 10             	add    esp,0x10
c00132ac:	31 c9                	xor    ecx,ecx
c00132ae:	83 c4 0c             	add    esp,0xc
c00132b1:	89 c8                	mov    eax,ecx
c00132b3:	5b                   	pop    ebx
c00132b4:	5e                   	pop    esi
c00132b5:	5f                   	pop    edi
c00132b6:	5d                   	pop    ebp
c00132b7:	c3                   	ret    
c00132b8:	89 f3                	mov    ebx,esi
c00132ba:	bd 01 00 00 00       	mov    ebp,0x1
c00132bf:	31 c9                	xor    ecx,ecx
c00132c1:	09 ea                	or     edx,ebp
c00132c3:	89 c8                	mov    eax,ecx
c00132c5:	89 13                	mov    DWORD PTR [ebx],edx
c00132c7:	83 c4 0c             	add    esp,0xc
c00132ca:	5b                   	pop    ebx
c00132cb:	5e                   	pop    esi
c00132cc:	5f                   	pop    edi
c00132cd:	5d                   	pop    ebp
c00132ce:	c3                   	ret    

c00132cf <Virt::virtualMemorySetup()>:
c00132cf:	53                   	push   ebx
c00132d0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00132d5:	6a 0f                	push   0xf
c00132d7:	53                   	push   ebx
c00132d8:	83 c3 01             	add    ebx,0x1
c00132db:	e8 be fd ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132e0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00132e6:	58                   	pop    eax
c00132e7:	5a                   	pop    edx
c00132e8:	75 eb                	jne    c00132d5 <Virt::virtualMemorySetup()+0x6>
c00132ea:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00132ef:	6a 00                	push   0x0
c00132f1:	53                   	push   ebx
c00132f2:	83 c3 01             	add    ebx,0x1
c00132f5:	e8 a4 fd ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132fa:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013300:	59                   	pop    ecx
c0013301:	58                   	pop    eax
c0013302:	75 eb                	jne    c00132ef <Virt::virtualMemorySetup()+0x20>
c0013304:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013309:	6a 0f                	push   0xf
c001330b:	53                   	push   ebx
c001330c:	83 c3 01             	add    ebx,0x1
c001330f:	e8 8a fd ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013314:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001331a:	58                   	pop    eax
c001331b:	5a                   	pop    edx
c001331c:	75 eb                	jne    c0013309 <Virt::virtualMemorySetup()+0x3a>
c001331e:	5b                   	pop    ebx
c001331f:	c3                   	ret    

c0013320 <Virt::setupPageSwapping(int)>:
c0013320:	53                   	push   ebx
c0013321:	83 ec 0c             	sub    esp,0xc
c0013324:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013329:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001332d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013333:	8b 10                	mov    edx,DWORD PTR [eax]
c0013335:	53                   	push   ebx
c0013336:	68 32 48 02 c0       	push   0xc0024832
c001333b:	50                   	push   eax
c001333c:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001333f:	c1 e3 0b             	shl    ebx,0xb
c0013342:	89 1d 70 68 02 c0    	mov    DWORD PTR ds:0xc0026870,ebx
c0013348:	c1 eb 08             	shr    ebx,0x8
c001334b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001334e:	c6 05 78 68 02 c0 43 	mov    BYTE PTR ds:0xc0026878,0x43
c0013355:	c7 05 6c 68 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002686c,0x8
c001335f:	a3 74 68 02 c0       	mov    ds:0xc0026874,eax
c0013364:	e8 4b c3 ff ff       	call   c000f6b4 <malloc>
c0013369:	31 d2                	xor    edx,edx
c001336b:	83 c4 0c             	add    esp,0xc
c001336e:	a3 8c c2 02 c0       	mov    ds:0xc002c28c,eax
c0013373:	89 c1                	mov    ecx,eax
c0013375:	a1 70 68 02 c0       	mov    eax,ds:0xc0026870
c001337a:	f7 35 6c 68 02 c0    	div    DWORD PTR ds:0xc002686c
c0013380:	c1 e8 05             	shr    eax,0x5
c0013383:	50                   	push   eax
c0013384:	6a 00                	push   0x0
c0013386:	51                   	push   ecx
c0013387:	e8 64 d1 fe ff       	call   c00004f0 <memset>
c001338c:	83 c4 18             	add    esp,0x18
c001338f:	5b                   	pop    ebx
c0013390:	c3                   	ret    
c0013391:	90                   	nop

c0013392 <VAS::setCPUSpecific(unsigned long)>:
c0013392:	c3                   	ret    
c0013393:	90                   	nop

c0013394 <VAS::VAS(VAS*)>:
c0013394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013398:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001339f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00133aa:	90                   	nop
c00133ab:	c3                   	ret    

c00133ac <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00133ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00133b0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00133b5:	89 c2                	mov    edx,eax
c00133b7:	c1 ea 16             	shr    edx,0x16
c00133ba:	c1 e8 0a             	shr    eax,0xa
c00133bd:	83 f9 01             	cmp    ecx,0x1
c00133c0:	19 c9                	sbb    ecx,ecx
c00133c2:	25 fc 0f 00 00       	and    eax,0xffc
c00133c7:	c1 e2 0c             	shl    edx,0xc
c00133ca:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00133d0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00133d7:	01 d0                	add    eax,edx
c00133d9:	c3                   	ret    

c00133da <VAS::getPageTableEntry(unsigned long)>:
c00133da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133de:	89 ca                	mov    edx,ecx
c00133e0:	c1 ea 16             	shr    edx,0x16
c00133e3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00133e9:	c1 e9 0a             	shr    ecx,0xa
c00133ec:	c1 e0 0c             	shl    eax,0xc
c00133ef:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00133f5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00133f8:	c3                   	ret    

c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00133f9:	55                   	push   ebp
c00133fa:	57                   	push   edi
c00133fb:	bf 01 00 00 00       	mov    edi,0x1
c0013400:	56                   	push   esi
c0013401:	53                   	push   ebx
c0013402:	83 ec 1c             	sub    esp,0x1c
c0013405:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013409:	c1 ee 0c             	shr    esi,0xc
c001340c:	eb 48                	jmp    c0013456 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001340e:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c0013413:	83 ec 08             	sub    esp,0x8
c0013416:	55                   	push   ebp
c0013417:	50                   	push   eax
c0013418:	e8 bd ff ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	8b 10                	mov    edx,DWORD PTR [eax]
c0013422:	f6 c6 04             	test   dh,0x4
c0013425:	75 70                	jne    c0013497 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013427:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001342d:	83 fb 04             	cmp    ebx,0x4
c0013430:	0f 84 8a 00 00 00    	je     c00134c0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013436:	83 fb 02             	cmp    ebx,0x2
c0013439:	0f 84 9a 00 00 00    	je     c00134d9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001343f:	83 fb 03             	cmp    ebx,0x3
c0013442:	0f 84 be 00 00 00    	je     c0013506 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013448:	83 fb 01             	cmp    ebx,0x1
c001344b:	0f 84 a2 00 00 00    	je     c00134f3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013451:	83 c6 01             	add    esi,0x1
c0013454:	31 ff                	xor    edi,edi
c0013456:	56                   	push   esi
c0013457:	89 f5                	mov    ebp,esi
c0013459:	e8 7a fc ff ff       	call   c00130d8 <Virt::getPageState(unsigned long)>
c001345e:	c1 e5 0c             	shl    ebp,0xc
c0013461:	5a                   	pop    edx
c0013462:	0f b6 d8             	movzx  ebx,al
c0013465:	85 db                	test   ebx,ebx
c0013467:	75 a5                	jne    c001340e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013469:	83 ec 0c             	sub    esp,0xc
c001346c:	68 49 48 02 c0       	push   0xc0024849
c0013471:	e8 9a c6 ff ff       	call   c000fb10 <KePanic(char const*)>
c0013476:	5a                   	pop    edx
c0013477:	59                   	pop    ecx
c0013478:	55                   	push   ebp
c0013479:	8b 2d 90 c2 02 c0    	mov    ebp,DWORD PTR ds:0xc002c290
c001347f:	55                   	push   ebp
c0013480:	e8 55 ff ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	8b 10                	mov    edx,DWORD PTR [eax]
c001348a:	f6 c6 04             	test   dh,0x4
c001348d:	75 08                	jne    c0013497 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001348f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013495:	eb ba                	jmp    c0013451 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013497:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001349b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00134a1:	83 ec 0c             	sub    esp,0xc
c00134a4:	52                   	push   edx
c00134a5:	e8 f7 c7 ff ff       	call   c000fca1 <Phys::freePage(unsigned long)>
c00134aa:	83 c4 10             	add    esp,0x10
c00134ad:	83 fb 04             	cmp    ebx,0x4
c00134b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00134ba:	0f 85 76 ff ff ff    	jne    c0013436 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00134c0:	83 e7 01             	and    edi,0x1
c00134c3:	75 46                	jne    c001350b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00134c5:	c7 44 24 30 28 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024528
c00134cd:	83 c4 1c             	add    esp,0x1c
c00134d0:	5b                   	pop    ebx
c00134d1:	5e                   	pop    esi
c00134d2:	5f                   	pop    edi
c00134d3:	5d                   	pop    ebp
c00134d4:	e9 37 c6 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c00134d9:	83 e7 01             	and    edi,0x1
c00134dc:	75 15                	jne    c00134f3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	68 65 48 02 c0       	push   0xc0024865
c00134e6:	e8 25 c6 ff ff       	call   c000fb10 <KePanic(char const*)>
c00134eb:	83 c4 10             	add    esp,0x10
c00134ee:	e9 5e ff ff ff       	jmp    c0013451 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00134f3:	83 ec 08             	sub    esp,0x8
c00134f6:	6a 00                	push   0x0
c00134f8:	56                   	push   esi
c00134f9:	e8 a0 fb ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	e9 4b ff ff ff       	jmp    c0013451 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013506:	83 e7 01             	and    edi,0x1
c0013509:	75 16                	jne    c0013521 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001350b:	83 ec 08             	sub    esp,0x8
c001350e:	6a 00                	push   0x0
c0013510:	56                   	push   esi
c0013511:	e8 88 fb ff ff       	call   c001309e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	83 c4 1c             	add    esp,0x1c
c001351c:	5b                   	pop    ebx
c001351d:	5e                   	pop    esi
c001351e:	5f                   	pop    edi
c001351f:	5d                   	pop    ebp
c0013520:	c3                   	ret    
c0013521:	c7 44 24 30 81 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024881
c0013529:	83 c4 1c             	add    esp,0x1c
c001352c:	5b                   	pop    ebx
c001352d:	5e                   	pop    esi
c001352e:	5f                   	pop    edi
c001352f:	5d                   	pop    ebp
c0013530:	e9 db c5 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c0013535:	90                   	nop

c0013536 <VAS::freeAllocatedPages(unsigned long)>:
c0013536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001353a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001353e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013542:	74 09                	je     c001354d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013544:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013548:	e9 ac fe ff ff       	jmp    c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c001354d:	c7 44 24 04 4c 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc002454c
c0013555:	e9 0c 3a ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c001355a <VAS::virtualToPhysical(unsigned long)>:
c001355a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001355e:	50                   	push   eax
c001355f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013563:	52                   	push   edx
c0013564:	e8 71 fe ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0013569:	59                   	pop    ecx
c001356a:	5a                   	pop    edx
c001356b:	8b 00                	mov    eax,DWORD PTR [eax]
c001356d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013572:	c3                   	ret    
c0013573:	90                   	nop

c0013574 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013574:	55                   	push   ebp
c0013575:	57                   	push   edi
c0013576:	56                   	push   esi
c0013577:	53                   	push   ebx
c0013578:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001357c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013580:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013584:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013588:	85 db                	test   ebx,ebx
c001358a:	7e 24                	jle    c00135b0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001358c:	c1 e3 0c             	shl    ebx,0xc
c001358f:	01 f3                	add    ebx,esi
c0013591:	56                   	push   esi
c0013592:	81 c6 00 10 00 00    	add    esi,0x1000
c0013598:	55                   	push   ebp
c0013599:	e8 3c fe ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c001359e:	5a                   	pop    edx
c001359f:	59                   	pop    ecx
c00135a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00135a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00135a6:	21 f9                	and    ecx,edi
c00135a8:	09 d1                	or     ecx,edx
c00135aa:	39 f3                	cmp    ebx,esi
c00135ac:	89 08                	mov    DWORD PTR [eax],ecx
c00135ae:	75 e1                	jne    c0013591 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00135b0:	5b                   	pop    ebx
c00135b1:	5e                   	pop    esi
c00135b2:	5f                   	pop    edi
c00135b3:	5d                   	pop    ebp
c00135b4:	c3                   	ret    
c00135b5:	90                   	nop

c00135b6 <VAS::VAS()>:
c00135b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135d0:	a3 90 c2 02 c0       	mov    ds:0xc002c290,eax
c00135d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135d9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00135dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00135e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00135ef:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c00135f4:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00135f9:	29 c2                	sub    edx,eax
c00135fb:	89 d0                	mov    eax,edx
c00135fd:	05 ff 0f 00 00       	add    eax,0xfff
c0013602:	c1 e8 0c             	shr    eax,0xc
c0013605:	89 c2                	mov    edx,eax
c0013607:	b8 00 70 02 c0       	mov    eax,0xc0027000
c001360c:	6a 04                	push   0x4
c001360e:	6a ff                	push   0xffffffff
c0013610:	52                   	push   edx
c0013611:	50                   	push   eax
c0013612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013616:	e8 59 ff ff ff       	call   c0013574 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001361b:	83 c4 14             	add    esp,0x14
c001361e:	90                   	nop
c001361f:	c3                   	ret    

c0013620 <VAS::setToWriteCombining(unsigned long, int)>:
c0013620:	a1 64 cb 02 c0       	mov    eax,ds:0xc002cb64
c0013625:	50                   	push   eax
c0013626:	6a ff                	push   0xffffffff
c0013628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001362c:	52                   	push   edx
c001362d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013631:	51                   	push   ecx
c0013632:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013636:	50                   	push   eax
c0013637:	e8 38 ff ff ff       	call   c0013574 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001363c:	83 c4 14             	add    esp,0x14
c001363f:	c3                   	ret    

c0013640 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013644:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013647:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001364b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001364e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013653:	83 f8 01             	cmp    eax,0x1
c0013656:	19 c0                	sbb    eax,eax
c0013658:	83 ca 03             	or     edx,0x3
c001365b:	83 e0 fc             	and    eax,0xfffffffc
c001365e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013665:	0f 20 d8             	mov    eax,cr3
c0013668:	0f 22 d8             	mov    cr3,eax
c001366b:	c3                   	ret    

c001366c <VAS::~VAS()>:
c001366c:	83 ec 2c             	sub    esp,0x2c
c001366f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013677:	fa                   	cli    
c0013678:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001367d:	83 c0 01             	add    eax,0x1
c0013680:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0013685:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001368a:	8b 00                	mov    eax,DWORD PTR [eax]
c001368c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001368f:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013695:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013699:	6a 01                	push   0x1
c001369b:	50                   	push   eax
c001369c:	e8 9f ff ff ff       	call   c0013640 <VAS::mapOtherVASIn(bool, VAS*)>
c00136a1:	83 c4 0c             	add    esp,0xc
c00136a4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00136ac:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00136b4:	0f 8f d8 00 00 00    	jg     c0013792 <VAS::~VAS()+0x126>
c00136ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00136c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136c5:	c1 e2 02             	shl    edx,0x2
c00136c8:	01 d0                	add    eax,edx
c00136ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00136cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d4:	83 e0 01             	and    eax,0x1
c00136d7:	0f 84 ab 00 00 00    	je     c0013788 <VAS::~VAS()+0x11c>
c00136dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00136e5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00136ed:	7f 74                	jg     c0013763 <VAS::~VAS()+0xf7>
c00136ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136f3:	c1 e0 0a             	shl    eax,0xa
c00136f6:	89 c2                	mov    edx,eax
c00136f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136fc:	01 d0                	add    eax,edx
c00136fe:	c1 e0 0c             	shl    eax,0xc
c0013701:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013705:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001370a:	8b 00                	mov    eax,DWORD PTR [eax]
c001370c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001370f:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013719:	6a 01                	push   0x1
c001371b:	50                   	push   eax
c001371c:	e8 8b fc ff ff       	call   c00133ac <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013721:	83 c4 0c             	add    esp,0xc
c0013724:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013728:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001372c:	8b 00                	mov    eax,DWORD PTR [eax]
c001372e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013736:	25 01 04 00 00       	and    eax,0x401
c001373b:	3d 01 04 00 00       	cmp    eax,0x401
c0013740:	75 1a                	jne    c001375c <VAS::~VAS()+0xf0>
c0013742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013746:	25 00 f0 ff ff       	and    eax,0xfffff000
c001374b:	83 ec 0c             	sub    esp,0xc
c001374e:	50                   	push   eax
c001374f:	e8 4d c5 ff ff       	call   c000fca1 <Phys::freePage(unsigned long)>
c0013754:	83 c4 10             	add    esp,0x10
c0013757:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001375c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013761:	eb 82                	jmp    c00136e5 <VAS::~VAS()+0x79>
c0013763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013767:	25 00 04 00 00       	and    eax,0x400
c001376c:	74 1a                	je     c0013788 <VAS::~VAS()+0x11c>
c001376e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013772:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013777:	83 ec 0c             	sub    esp,0xc
c001377a:	50                   	push   eax
c001377b:	e8 21 c5 ff ff       	call   c000fca1 <Phys::freePage(unsigned long)>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013788:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001378d:	e9 1a ff ff ff       	jmp    c00136ac <VAS::~VAS()+0x40>
c0013792:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013796:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013799:	83 ec 0c             	sub    esp,0xc
c001379c:	50                   	push   eax
c001379d:	e8 57 fc ff ff       	call   c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00137ac:	83 ec 0c             	sub    esp,0xc
c00137af:	50                   	push   eax
c00137b0:	e8 ec c4 ff ff       	call   c000fca1 <Phys::freePage(unsigned long)>
c00137b5:	83 c4 10             	add    esp,0x10
c00137b8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00137bd:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00137c5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00137ca:	85 c0                	test   eax,eax
c00137cc:	75 01                	jne    c00137cf <VAS::~VAS()+0x163>
c00137ce:	fb                   	sti    
c00137cf:	90                   	nop
c00137d0:	83 c4 2c             	add    esp,0x2c
c00137d3:	c3                   	ret    

c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00137d4:	55                   	push   ebp
c00137d5:	57                   	push   edi
c00137d6:	56                   	push   esi
c00137d7:	53                   	push   ebx
c00137d8:	83 ec 1c             	sub    esp,0x1c
c00137db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00137df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00137e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137e7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00137ed:	77 08                	ja     c00137f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00137ef:	0f 20 d8             	mov    eax,cr3
c00137f2:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00137f5:	75 43                	jne    c001383a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00137f7:	89 d8                	mov    eax,ebx
c00137f9:	09 f8                	or     eax,edi
c00137fb:	a9 ff 0f 00 00       	test   eax,0xfff
c0013800:	75 53                	jne    c0013855 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0013802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0013805:	89 de                	mov    esi,ebx
c0013807:	c1 ee 16             	shr    esi,0x16
c001380a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013811:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013815:	74 50                	je     c0013867 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013817:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001381b:	c1 eb 0a             	shr    ebx,0xa
c001381e:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013824:	c1 e6 0c             	shl    esi,0xc
c0013827:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001382d:	09 c7                	or     edi,eax
c001382f:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013832:	83 c4 1c             	add    esp,0x1c
c0013835:	5b                   	pop    ebx
c0013836:	5e                   	pop    esi
c0013837:	5f                   	pop    edi
c0013838:	5d                   	pop    ebp
c0013839:	c3                   	ret    
c001383a:	83 ec 0c             	sub    esp,0xc
c001383d:	68 70 45 02 c0       	push   0xc0024570
c0013842:	e8 1f 37 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013847:	89 d8                	mov    eax,ebx
c0013849:	83 c4 10             	add    esp,0x10
c001384c:	09 f8                	or     eax,edi
c001384e:	a9 ff 0f 00 00       	test   eax,0xfff
c0013853:	74 ad                	je     c0013802 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013855:	83 ec 0c             	sub    esp,0xc
c0013858:	68 d8 45 02 c0       	push   0xc00245d8
c001385d:	e8 ae c2 ff ff       	call   c000fb10 <KePanic(char const*)>
c0013862:	83 c4 10             	add    esp,0x10
c0013865:	eb 9b                	jmp    c0013802 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013867:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001386b:	e8 9a c4 ff ff       	call   c000fd0a <Phys::allocatePage()>
c0013870:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013876:	83 ec 0c             	sub    esp,0xc
c0013879:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001387d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013881:	6a 01                	push   0x1
c0013883:	e8 73 f8 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c0013888:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001388f:	6a 01                	push   0x1
c0013891:	50                   	push   eax
c0013892:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013896:	52                   	push   edx
c0013897:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001389b:	51                   	push   ecx
c001389c:	e8 2d 01 00 00       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00138a1:	83 c4 1c             	add    esp,0x1c
c00138a4:	68 00 10 00 00       	push   0x1000
c00138a9:	6a 00                	push   0x0
c00138ab:	50                   	push   eax
c00138ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00138b0:	e8 3b cc fe ff       	call   c00004f0 <memset>
c00138b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00138b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00138bc:	e8 38 fb ff ff       	call   c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c00138c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00138cf:	0d 07 04 00 00       	or     eax,0x407
c00138d4:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00138d7:	e9 3b ff ff ff       	jmp    c0013817 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00138dc <VAS::allocatePages(int, int)>:
c00138dc:	55                   	push   ebp
c00138dd:	57                   	push   edi
c00138de:	56                   	push   esi
c00138df:	53                   	push   ebx
c00138e0:	83 ec 1c             	sub    esp,0x1c
c00138e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00138eb:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00138ef:	75 75                	jne    c0013966 <VAS::allocatePages(int, int)+0x8a>
c00138f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00138f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138f8:	85 c0                	test   eax,eax
c00138fa:	74 49                	je     c0013945 <VAS::allocatePages(int, int)+0x69>
c00138fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013900:	89 d5                	mov    ebp,edx
c0013902:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013906:	c1 e5 0c             	shl    ebp,0xc
c0013909:	01 dd                	add    ebp,ebx
c001390b:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c001390e:	81 cf 00 04 00 00    	or     edi,0x400
c0013914:	85 d2                	test   edx,edx
c0013916:	7e 1b                	jle    c0013933 <VAS::allocatePages(int, int)+0x57>
c0013918:	e8 ed c3 ff ff       	call   c000fd0a <Phys::allocatePage()>
c001391d:	57                   	push   edi
c001391e:	53                   	push   ebx
c001391f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013925:	50                   	push   eax
c0013926:	56                   	push   esi
c0013927:	e8 a8 fe ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001392c:	83 c4 10             	add    esp,0x10
c001392f:	39 dd                	cmp    ebp,ebx
c0013931:	75 e5                	jne    c0013918 <VAS::allocatePages(int, int)+0x3c>
c0013933:	0f 20 d8             	mov    eax,cr3
c0013936:	0f 22 d8             	mov    cr3,eax
c0013939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001393d:	83 c4 1c             	add    esp,0x1c
c0013940:	5b                   	pop    ebx
c0013941:	5e                   	pop    esi
c0013942:	5f                   	pop    edi
c0013943:	5d                   	pop    ebp
c0013944:	c3                   	ret    
c0013945:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013949:	83 ec 0c             	sub    esp,0xc
c001394c:	68 fc 45 02 c0       	push   0xc00245fc
c0013951:	e8 ba c1 ff ff       	call   c000fb10 <KePanic(char const*)>
c0013956:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013959:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001395d:	83 c4 10             	add    esp,0x10
c0013960:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013964:	eb 96                	jmp    c00138fc <VAS::allocatePages(int, int)+0x20>
c0013966:	83 ec 0c             	sub    esp,0xc
c0013969:	52                   	push   edx
c001396a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c001396e:	e8 88 f7 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c0013973:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001397f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013983:	77 38                	ja     c00139bd <VAS::allocatePages(int, int)+0xe1>
c0013985:	85 d2                	test   edx,edx
c0013987:	7e aa                	jle    c0013933 <VAS::allocatePages(int, int)+0x57>
c0013989:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001398d:	c1 e2 0c             	shl    edx,0xc
c0013990:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013994:	81 cf 00 04 00 00    	or     edi,0x400
c001399a:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c001399d:	e8 68 c3 ff ff       	call   c000fd0a <Phys::allocatePage()>
c00139a2:	57                   	push   edi
c00139a3:	53                   	push   ebx
c00139a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00139aa:	50                   	push   eax
c00139ab:	56                   	push   esi
c00139ac:	e8 23 fe ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	39 dd                	cmp    ebp,ebx
c00139b6:	75 e5                	jne    c001399d <VAS::allocatePages(int, int)+0xc1>
c00139b8:	e9 76 ff ff ff       	jmp    c0013933 <VAS::allocatePages(int, int)+0x57>
c00139bd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00139c1:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c00139c6:	09 c1                	or     ecx,eax
c00139c8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00139cc:	eb b7                	jmp    c0013985 <VAS::allocatePages(int, int)+0xa9>

c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00139ce:	55                   	push   ebp
c00139cf:	57                   	push   edi
c00139d0:	56                   	push   esi
c00139d1:	53                   	push   ebx
c00139d2:	83 ec 1c             	sub    esp,0x1c
c00139d5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00139d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00139dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00139e1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00139e5:	85 db                	test   ebx,ebx
c00139e7:	7e 2c                	jle    c0013a15 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00139e9:	c1 e3 0c             	shl    ebx,0xc
c00139ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00139ef:	89 f3                	mov    ebx,esi
c00139f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139f5:	55                   	push   ebp
c00139f6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00139fa:	29 f2                	sub    edx,esi
c00139fc:	01 da                	add    edx,ebx
c00139fe:	52                   	push   edx
c00139ff:	53                   	push   ebx
c0013a00:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a06:	57                   	push   edi
c0013a07:	e8 c8 fd ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013a13:	75 e0                	jne    c00139f5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013a15:	0f 20 d8             	mov    eax,cr3
c0013a18:	0f 22 d8             	mov    cr3,eax
c0013a1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013a1f:	83 c4 1c             	add    esp,0x1c
c0013a22:	5b                   	pop    ebx
c0013a23:	5e                   	pop    esi
c0013a24:	5f                   	pop    edi
c0013a25:	5d                   	pop    ebp
c0013a26:	c3                   	ret    
c0013a27:	90                   	nop

c0013a28 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013a28:	55                   	push   ebp
c0013a29:	57                   	push   edi
c0013a2a:	56                   	push   esi
c0013a2b:	53                   	push   ebx
c0013a2c:	83 ec 1c             	sub    esp,0x1c
c0013a2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013a37:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013a43:	09 d8                	or     eax,ebx
c0013a45:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a4a:	75 4b                	jne    c0013a97 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013a4f:	89 de                	mov    esi,ebx
c0013a51:	c1 ee 16             	shr    esi,0x16
c0013a54:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013a5b:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013a5f:	74 48                	je     c0013aa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013a61:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013a66:	c1 eb 0a             	shr    ebx,0xa
c0013a69:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013a6d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013a71:	83 ff 01             	cmp    edi,0x1
c0013a74:	19 c0                	sbb    eax,eax
c0013a76:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013a7c:	c1 e6 0c             	shl    esi,0xc
c0013a7f:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013a84:	01 f3                	add    ebx,esi
c0013a86:	09 ca                	or     edx,ecx
c0013a88:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013a8f:	83 c4 1c             	add    esp,0x1c
c0013a92:	5b                   	pop    ebx
c0013a93:	5e                   	pop    esi
c0013a94:	5f                   	pop    edi
c0013a95:	5d                   	pop    ebp
c0013a96:	c3                   	ret    
c0013a97:	83 ec 0c             	sub    esp,0xc
c0013a9a:	68 28 46 02 c0       	push   0xc0024628
c0013a9f:	e8 6c c0 ff ff       	call   c000fb10 <KePanic(char const*)>
c0013aa4:	83 c4 10             	add    esp,0x10
c0013aa7:	eb a3                	jmp    c0013a4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013aa9:	e8 5c c2 ff ff       	call   c000fd0a <Phys::allocatePage()>
c0013aae:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013ab4:	83 ec 0c             	sub    esp,0xc
c0013ab7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013abb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013abf:	6a 01                	push   0x1
c0013ac1:	e8 35 f6 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c0013ac6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013acd:	6a 01                	push   0x1
c0013acf:	50                   	push   eax
c0013ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ad4:	50                   	push   eax
c0013ad5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013ad9:	51                   	push   ecx
c0013ada:	e8 ef fe ff ff       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013adf:	83 c4 1c             	add    esp,0x1c
c0013ae2:	68 00 10 00 00       	push   0x1000
c0013ae7:	6a 00                	push   0x0
c0013ae9:	50                   	push   eax
c0013aea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013aee:	e8 fd c9 fe ff       	call   c00004f0 <memset>
c0013af3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013af7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013afa:	e8 fa f8 ff ff       	call   c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013aff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b03:	83 c4 10             	add    esp,0x10
c0013b06:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b09:	81 ca 07 04 00 00    	or     edx,0x407
c0013b0f:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013b12:	e9 4a ff ff ff       	jmp    c0013a61 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013b17:	90                   	nop

c0013b18 <VAS::VAS(bool)>:
c0013b18:	53                   	push   ebx
c0013b19:	83 ec 28             	sub    esp,0x28
c0013b1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b33:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013b3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b3e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013b42:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013b45:	e8 c0 c1 ff ff       	call   c000fd0a <Phys::allocatePage()>
c0013b4a:	89 c2                	mov    edx,eax
c0013b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013b53:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c0013b59:	83 ec 0c             	sub    esp,0xc
c0013b5c:	6a 01                	push   0x1
c0013b5e:	e8 98 f5 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c0013b63:	83 c4 10             	add    esp,0x10
c0013b66:	89 c2                	mov    edx,eax
c0013b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b6f:	83 ec 0c             	sub    esp,0xc
c0013b72:	6a 03                	push   0x3
c0013b74:	6a 01                	push   0x1
c0013b76:	52                   	push   edx
c0013b77:	50                   	push   eax
c0013b78:	53                   	push   ebx
c0013b79:	e8 50 fe ff ff       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013b7e:	83 c4 20             	add    esp,0x20
c0013b81:	89 c2                	mov    edx,eax
c0013b83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013b8a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b92:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013b9a:	7f 1d                	jg     c0013bb9 <VAS::VAS(bool)+0xa1>
c0013b9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ba0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ba3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ba7:	c1 e2 02             	shl    edx,0x2
c0013baa:	01 d0                	add    eax,edx
c0013bac:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013bb2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013bb7:	eb d9                	jmp    c0013b92 <VAS::VAS(bool)+0x7a>
c0013bb9:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013bc1:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013bc9:	7f 59                	jg     c0013c24 <VAS::VAS(bool)+0x10c>
c0013bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bcf:	2d 00 02 00 00       	sub    eax,0x200
c0013bd4:	c1 e0 0c             	shl    eax,0xc
c0013bd7:	89 c2                	mov    edx,eax
c0013bd9:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013bde:	89 d1                	mov    ecx,edx
c0013be0:	09 c1                	or     ecx,eax
c0013be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013be6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013be9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bed:	c1 e2 02             	shl    edx,0x2
c0013bf0:	01 d0                	add    eax,edx
c0013bf2:	83 c9 05             	or     ecx,0x5
c0013bf5:	89 ca                	mov    edx,ecx
c0013bf7:	89 10                	mov    DWORD PTR [eax],edx
c0013bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bfd:	2d 40 03 00 00       	sub    eax,0x340
c0013c02:	83 f8 7f             	cmp    eax,0x7f
c0013c05:	77 16                	ja     c0013c1d <VAS::VAS(bool)+0x105>
c0013c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c12:	c1 e2 02             	shl    edx,0x2
c0013c15:	01 d0                	add    eax,edx
c0013c17:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013c1d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013c22:	eb 9d                	jmp    c0013bc1 <VAS::VAS(bool)+0xa9>
c0013c24:	8b 15 68 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb68
c0013c2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c31:	05 20 0c 00 00       	add    eax,0xc20
c0013c36:	81 ca 03 40 00 00    	or     edx,0x4003
c0013c3c:	89 10                	mov    DWORD PTR [eax],edx
c0013c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c42:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013c45:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013c4a:	09 c2                	or     edx,eax
c0013c4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c53:	05 fc 0f 00 00       	add    eax,0xffc
c0013c58:	83 ca 03             	or     edx,0x3
c0013c5b:	89 10                	mov    DWORD PTR [eax],edx
c0013c5d:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013c62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	50                   	push   eax
c0013c6c:	e8 e3 5f ff ff       	call   c0009c54 <Device::getName()>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	83 ec 08             	sub    esp,0x8
c0013c77:	68 9b 48 02 c0       	push   0xc002489b
c0013c7c:	50                   	push   eax
c0013c7d:	e8 fe ca fe ff       	call   c0000780 <strcmp>
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	85 c0                	test   eax,eax
c0013c87:	0f 94 c0             	sete   al
c0013c8a:	0f b6 c0             	movzx  eax,al
c0013c8d:	85 c0                	test   eax,eax
c0013c8f:	74 68                	je     c0013cf9 <VAS::VAS(bool)+0x1e1>
c0013c91:	fa                   	cli    
c0013c92:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013c97:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013c9d:	05 68 09 00 00       	add    eax,0x968
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	50                   	push   eax
c0013ca6:	e8 e7 ad ff ff       	call   c000ea92 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013cb3:	89 c3                	mov    ebx,eax
c0013cb5:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013cba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013cc0:	05 68 09 00 00       	add    eax,0x968
c0013cc5:	83 ec 0c             	sub    esp,0xc
c0013cc8:	50                   	push   eax
c0013cc9:	e8 c4 ad ff ff       	call   c000ea92 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	83 ec 08             	sub    esp,0x8
c0013cd4:	50                   	push   eax
c0013cd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cd9:	e8 fc f6 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0013cde:	83 c4 10             	add    esp,0x10
c0013ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ce3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ce8:	6a 11                	push   0x11
c0013cea:	53                   	push   ebx
c0013ceb:	50                   	push   eax
c0013cec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cf0:	e8 df fa ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013cf5:	83 c4 10             	add    esp,0x10
c0013cf8:	fb                   	sti    
c0013cf9:	90                   	nop
c0013cfa:	83 c4 28             	add    esp,0x28
c0013cfd:	5b                   	pop    ebx
c0013cfe:	c3                   	ret    
c0013cff:	90                   	nop

c0013d00 <VAS::evict(unsigned long)>:
c0013d00:	55                   	push   ebp
c0013d01:	57                   	push   edi
c0013d02:	56                   	push   esi
c0013d03:	53                   	push   ebx
c0013d04:	83 ec 24             	sub    esp,0x24
c0013d07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013d0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d13:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013d18:	50                   	push   eax
c0013d19:	68 a9 48 02 c0       	push   0xc00248a9
c0013d1e:	e8 43 32 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013d23:	e8 28 f5 ff ff       	call   c0013250 <Virt::allocateSwapfilePage()>
c0013d28:	83 c4 10             	add    esp,0x10
c0013d2b:	89 c7                	mov    edi,eax
c0013d2d:	a1 6c 68 02 c0       	mov    eax,ds:0xc002686c
c0013d32:	85 c0                	test   eax,eax
c0013d34:	7e 40                	jle    c0013d76 <VAS::evict(unsigned long)+0x76>
c0013d36:	89 ee                	mov    esi,ebp
c0013d38:	31 db                	xor    ebx,ebx
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	57                   	push   edi
c0013d3e:	e8 f7 f4 ff ff       	call   c001323a <Virt::swapIDToSector(unsigned long)>
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d48:	81 c6 00 02 00 00    	add    esi,0x200
c0013d4e:	6a 01                	push   0x1
c0013d50:	52                   	push   edx
c0013d51:	01 d8                	add    eax,ebx
c0013d53:	83 c3 01             	add    ebx,0x1
c0013d56:	50                   	push   eax
c0013d57:	0f be 05 78 68 02 c0 	movsx  eax,BYTE PTR ds:0xc0026878
c0013d5e:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013d65:	50                   	push   eax
c0013d66:	e8 4d 6d ff ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c0013d6b:	83 c4 20             	add    esp,0x20
c0013d6e:	39 1d 6c 68 02 c0    	cmp    DWORD PTR ds:0xc002686c,ebx
c0013d74:	7f c4                	jg     c0013d3a <VAS::evict(unsigned long)+0x3a>
c0013d76:	c1 e7 0c             	shl    edi,0xc
c0013d79:	83 ec 08             	sub    esp,0x8
c0013d7c:	55                   	push   ebp
c0013d7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d81:	50                   	push   eax
c0013d82:	e8 53 f6 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0013d87:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d89:	89 d3                	mov    ebx,edx
c0013d8b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013d91:	09 d7                	or     edi,edx
c0013d93:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013d99:	89 38                	mov    DWORD PTR [eax],edi
c0013d9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d9e:	8b 15 88 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c288
c0013da4:	83 c2 01             	add    edx,0x1
c0013da7:	89 15 88 c2 02 c0    	mov    DWORD PTR ds:0xc002c288,edx
c0013dad:	e8 ef be ff ff       	call   c000fca1 <Phys::freePage(unsigned long)>
c0013db2:	0f 20 d8             	mov    eax,cr3
c0013db5:	0f 22 d8             	mov    cr3,eax
c0013db8:	8b 0d 88 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c288
c0013dbe:	51                   	push   ecx
c0013dbf:	55                   	push   ebp
c0013dc0:	53                   	push   ebx
c0013dc1:	68 4c 46 02 c0       	push   0xc002464c
c0013dc6:	e8 9b 31 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013dcb:	a1 84 c2 02 c0       	mov    eax,ds:0xc002c284
c0013dd0:	83 c4 18             	add    esp,0x18
c0013dd3:	50                   	push   eax
c0013dd4:	68 be 48 02 c0       	push   0xc00248be
c0013dd9:	8d 50 01             	lea    edx,[eax+0x1]
c0013ddc:	89 15 84 c2 02 c0    	mov    DWORD PTR ds:0xc002c284,edx
c0013de2:	e8 7f 31 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013de7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013dec:	c7 44 24 40 d0 48 02 c0 	mov    DWORD PTR [esp+0x40],0xc00248d0
c0013df4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013df8:	83 c4 2c             	add    esp,0x2c
c0013dfb:	5b                   	pop    ebx
c0013dfc:	5e                   	pop    esi
c0013dfd:	5f                   	pop    edi
c0013dfe:	5d                   	pop    ebp
c0013dff:	e9 62 31 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013e04 <VAS::canLockPage(unsigned long)>:
c0013e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e08:	50                   	push   eax
c0013e09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e0d:	52                   	push   edx
c0013e0e:	e8 c7 f5 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0013e13:	59                   	pop    ecx
c0013e14:	5a                   	pop    edx
c0013e15:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e17:	c1 e8 0b             	shr    eax,0xb
c0013e1a:	83 e0 01             	and    eax,0x1
c0013e1d:	c3                   	ret    

c0013e1e <VAS::unlockPage(unsigned long)>:
c0013e1e:	83 ec 0c             	sub    esp,0xc
c0013e21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e25:	50                   	push   eax
c0013e26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e2a:	52                   	push   edx
c0013e2b:	e8 aa f5 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0013e30:	59                   	pop    ecx
c0013e31:	5a                   	pop    edx
c0013e32:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e34:	f6 c6 08             	test   dh,0x8
c0013e37:	75 09                	jne    c0013e42 <VAS::unlockPage(unsigned long)+0x24>
c0013e39:	80 ce 08             	or     dh,0x8
c0013e3c:	89 10                	mov    DWORD PTR [eax],edx
c0013e3e:	83 c4 0c             	add    esp,0xc
c0013e41:	c3                   	ret    
c0013e42:	c7 44 24 10 80 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024680
c0013e4a:	83 c4 0c             	add    esp,0xc
c0013e4d:	e9 be bc ff ff       	jmp    c000fb10 <KePanic(char const*)>

c0013e52 <VAS::canLockPages(unsigned long, int)>:
c0013e52:	55                   	push   ebp
c0013e53:	57                   	push   edi
c0013e54:	56                   	push   esi
c0013e55:	53                   	push   ebx
c0013e56:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e5a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013e5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e62:	85 ff                	test   edi,edi
c0013e64:	7e 23                	jle    c0013e89 <VAS::canLockPages(unsigned long, int)+0x37>
c0013e66:	31 f6                	xor    esi,esi
c0013e68:	eb 0d                	jmp    c0013e77 <VAS::canLockPages(unsigned long, int)+0x25>
c0013e6a:	83 c6 01             	add    esi,0x1
c0013e6d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013e73:	39 f7                	cmp    edi,esi
c0013e75:	74 0d                	je     c0013e84 <VAS::canLockPages(unsigned long, int)+0x32>
c0013e77:	53                   	push   ebx
c0013e78:	55                   	push   ebp
c0013e79:	e8 86 ff ff ff       	call   c0013e04 <VAS::canLockPage(unsigned long)>
c0013e7e:	5a                   	pop    edx
c0013e7f:	59                   	pop    ecx
c0013e80:	84 c0                	test   al,al
c0013e82:	75 e6                	jne    c0013e6a <VAS::canLockPages(unsigned long, int)+0x18>
c0013e84:	5b                   	pop    ebx
c0013e85:	5e                   	pop    esi
c0013e86:	5f                   	pop    edi
c0013e87:	5d                   	pop    ebp
c0013e88:	c3                   	ret    
c0013e89:	b0 01                	mov    al,0x1
c0013e8b:	eb f7                	jmp    c0013e84 <VAS::canLockPages(unsigned long, int)+0x32>
c0013e8d:	90                   	nop

c0013e8e <VAS::unlockPages(unsigned long, int)>:
c0013e8e:	55                   	push   ebp
c0013e8f:	57                   	push   edi
c0013e90:	56                   	push   esi
c0013e91:	53                   	push   ebx
c0013e92:	83 ec 0c             	sub    esp,0xc
c0013e95:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013e99:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e9d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013ea1:	85 ff                	test   edi,edi
c0013ea3:	7e 1c                	jle    c0013ec1 <VAS::unlockPages(unsigned long, int)+0x33>
c0013ea5:	31 f6                	xor    esi,esi
c0013ea7:	83 ec 08             	sub    esp,0x8
c0013eaa:	83 c6 01             	add    esi,0x1
c0013ead:	53                   	push   ebx
c0013eae:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013eb4:	55                   	push   ebp
c0013eb5:	e8 64 ff ff ff       	call   c0013e1e <VAS::unlockPage(unsigned long)>
c0013eba:	83 c4 10             	add    esp,0x10
c0013ebd:	39 f7                	cmp    edi,esi
c0013ebf:	75 e6                	jne    c0013ea7 <VAS::unlockPages(unsigned long, int)+0x19>
c0013ec1:	83 c4 0c             	add    esp,0xc
c0013ec4:	5b                   	pop    ebx
c0013ec5:	5e                   	pop    esi
c0013ec6:	5f                   	pop    edi
c0013ec7:	5d                   	pop    ebp
c0013ec8:	c3                   	ret    
c0013ec9:	90                   	nop

c0013eca <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013eca:	55                   	push   ebp
c0013ecb:	57                   	push   edi
c0013ecc:	56                   	push   esi
c0013ecd:	53                   	push   ebx
c0013ece:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0013ed4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0013edb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0013ee1:	77 6f                	ja     c0013f52 <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c0013ee3:	83 ec 08             	sub    esp,0x8
c0013ee6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013eec:	53                   	push   ebx
c0013eed:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0013ef4:	51                   	push   ecx
c0013ef5:	e8 e0 f4 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0013efa:	83 c4 10             	add    esp,0x10
c0013efd:	85 c0                	test   eax,eax
c0013eff:	89 c5                	mov    ebp,eax
c0013f01:	0f 95 c0             	setne  al
c0013f04:	85 db                	test   ebx,ebx
c0013f06:	0f 95 c2             	setne  dl
c0013f09:	21 d0                	and    eax,edx
c0013f0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0013f0f:	a8 01                	test   al,0x1
c0013f11:	75 0f                	jne    c0013f22 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0013f13:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013f17:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013f1d:	5b                   	pop    ebx
c0013f1e:	5e                   	pop    esi
c0013f1f:	5f                   	pop    edi
c0013f20:	5d                   	pop    ebp
c0013f21:	c3                   	ret    
c0013f22:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f25:	f6 c4 02             	test   ah,0x2
c0013f28:	75 3d                	jne    c0013f67 <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c0013f2a:	89 c2                	mov    edx,eax
c0013f2c:	81 e2 01 04 00 00    	and    edx,0x401
c0013f32:	81 fa 00 04 00 00    	cmp    edx,0x400
c0013f38:	0f 84 89 00 00 00    	je     c0013fc7 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0013f3e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0013f43:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013f47:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013f4d:	5b                   	pop    ebx
c0013f4e:	5e                   	pop    esi
c0013f4f:	5f                   	pop    edi
c0013f50:	5d                   	pop    ebp
c0013f51:	c3                   	ret    
c0013f52:	83 ec 0c             	sub    esp,0xc
c0013f55:	68 e5 48 02 c0       	push   0xc00248e5
c0013f5a:	e8 b1 bb ff ff       	call   c000fb10 <KePanic(char const*)>
c0013f5f:	83 c4 10             	add    esp,0x10
c0013f62:	e9 7c ff ff ff       	jmp    c0013ee3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0013f67:	83 ec 0c             	sub    esp,0xc
c0013f6a:	68 b0 46 02 c0       	push   0xc00246b0
c0013f6f:	e8 f2 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013f74:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0013f77:	e8 8e bd ff ff       	call   c000fd0a <Phys::allocatePage()>
c0013f7c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013f7f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0013f85:	83 ca 01             	or     edx,0x1
c0013f88:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013f8b:	0f 20 da             	mov    edx,cr3
c0013f8e:	0f 22 da             	mov    cr3,edx
c0013f91:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0013f95:	ba 00 10 00 00       	mov    edx,0x1000
c0013f9a:	89 d1                	mov    ecx,edx
c0013f9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f9e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013fa1:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0013fa7:	09 c8                	or     eax,ecx
c0013fa9:	83 c8 02             	or     eax,0x2
c0013fac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013faf:	0f 20 d8             	mov    eax,cr3
c0013fb2:	0f 22 d8             	mov    cr3,eax
c0013fb5:	8d 74 24 20          	lea    esi,[esp+0x20]
c0013fb9:	89 df                	mov    edi,ebx
c0013fbb:	89 d1                	mov    ecx,edx
c0013fbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fbf:	83 c4 10             	add    esp,0x10
c0013fc2:	e9 4c ff ff ff       	jmp    c0013f13 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0013fc7:	c1 e8 0c             	shr    eax,0xc
c0013fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fce:	e8 37 bd ff ff       	call   c000fd0a <Phys::allocatePage()>
c0013fd3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013fd6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0013fdc:	09 c2                	or     edx,eax
c0013fde:	81 ca 01 08 00 00    	or     edx,0x801
c0013fe4:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013fe7:	a1 6c 68 02 c0       	mov    eax,ds:0xc002686c
c0013fec:	85 c0                	test   eax,eax
c0013fee:	7e 44                	jle    c0014034 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>
c0013ff0:	89 df                	mov    edi,ebx
c0013ff2:	31 f6                	xor    esi,esi
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ffb:	51                   	push   ecx
c0013ffc:	e8 39 f2 ff ff       	call   c001323a <Virt::swapIDToSector(unsigned long)>
c0014001:	31 d2                	xor    edx,edx
c0014003:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014006:	81 c7 00 02 00 00    	add    edi,0x200
c001400c:	6a 01                	push   0x1
c001400e:	52                   	push   edx
c001400f:	01 f0                	add    eax,esi
c0014011:	83 c6 01             	add    esi,0x1
c0014014:	50                   	push   eax
c0014015:	0f be 05 78 68 02 c0 	movsx  eax,BYTE PTR ds:0xc0026878
c001401c:	8b 2c 85 dc b9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4624]
c0014023:	55                   	push   ebp
c0014024:	e8 23 6a ff ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c0014029:	83 c4 20             	add    esp,0x20
c001402c:	39 35 6c 68 02 c0    	cmp    DWORD PTR ds:0xc002686c,esi
c0014032:	7f c0                	jg     c0013ff4 <VAS::tryLoadBackOffDisk(unsigned long)+0x12a>
c0014034:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c0014039:	83 ec 04             	sub    esp,0x4
c001403c:	83 e8 01             	sub    eax,0x1
c001403f:	50                   	push   eax
c0014040:	53                   	push   ebx
c0014041:	68 f7 48 02 c0       	push   0xc00248f7
c0014046:	a3 88 c2 02 c0       	mov    ds:0xc002c288,eax
c001404b:	e8 16 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014050:	58                   	pop    eax
c0014051:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014055:	52                   	push   edx
c0014056:	e8 bc f1 ff ff       	call   c0013217 <Virt::freeSwapfilePage(unsigned long)>
c001405b:	0f 20 d8             	mov    eax,cr3
c001405e:	0f 22 d8             	mov    cr3,eax
c0014061:	83 c4 10             	add    esp,0x10
c0014064:	e9 aa fe ff ff       	jmp    c0013f13 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0014069:	90                   	nop

c001406a <VAS::lockPage(unsigned long)>:
c001406a:	56                   	push   esi
c001406b:	53                   	push   ebx
c001406c:	83 ec 04             	sub    esp,0x4
c001406f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014073:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014077:	50                   	push   eax
c0014078:	56                   	push   esi
c0014079:	e8 5c f3 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c001407e:	5a                   	pop    edx
c001407f:	59                   	pop    ecx
c0014080:	89 c3                	mov    ebx,eax
c0014082:	8b 00                	mov    eax,DWORD PTR [eax]
c0014084:	a8 01                	test   al,0x1
c0014086:	74 10                	je     c0014098 <VAS::lockPage(unsigned long)+0x2e>
c0014088:	f6 c4 08             	test   ah,0x8
c001408b:	74 28                	je     c00140b5 <VAS::lockPage(unsigned long)+0x4b>
c001408d:	80 e4 f7             	and    ah,0xf7
c0014090:	89 03                	mov    DWORD PTR [ebx],eax
c0014092:	83 c4 04             	add    esp,0x4
c0014095:	5b                   	pop    ebx
c0014096:	5e                   	pop    esi
c0014097:	c3                   	ret    
c0014098:	83 ec 08             	sub    esp,0x8
c001409b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140a0:	50                   	push   eax
c00140a1:	56                   	push   esi
c00140a2:	e8 23 fe ff ff       	call   c0013eca <VAS::tryLoadBackOffDisk(unsigned long)>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	84 c0                	test   al,al
c00140ac:	74 19                	je     c00140c7 <VAS::lockPage(unsigned long)+0x5d>
c00140ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b0:	f6 c4 08             	test   ah,0x8
c00140b3:	75 d8                	jne    c001408d <VAS::lockPage(unsigned long)+0x23>
c00140b5:	c7 44 24 10 80 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024680
c00140bd:	83 c4 04             	add    esp,0x4
c00140c0:	5b                   	pop    ebx
c00140c1:	5e                   	pop    esi
c00140c2:	e9 49 ba ff ff       	jmp    c000fb10 <KePanic(char const*)>
c00140c7:	83 ec 0c             	sub    esp,0xc
c00140ca:	68 d0 46 02 c0       	push   0xc00246d0
c00140cf:	e8 3c ba ff ff       	call   c000fb10 <KePanic(char const*)>
c00140d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	eb ad                	jmp    c0014088 <VAS::lockPage(unsigned long)+0x1e>
c00140db:	90                   	nop

c00140dc <VAS::lockPages(unsigned long, int)>:
c00140dc:	55                   	push   ebp
c00140dd:	57                   	push   edi
c00140de:	56                   	push   esi
c00140df:	53                   	push   ebx
c00140e0:	83 ec 0c             	sub    esp,0xc
c00140e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00140e7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00140eb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00140ef:	85 ff                	test   edi,edi
c00140f1:	7e 1c                	jle    c001410f <VAS::lockPages(unsigned long, int)+0x33>
c00140f3:	31 f6                	xor    esi,esi
c00140f5:	83 ec 08             	sub    esp,0x8
c00140f8:	83 c6 01             	add    esi,0x1
c00140fb:	53                   	push   ebx
c00140fc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014102:	55                   	push   ebp
c0014103:	e8 62 ff ff ff       	call   c001406a <VAS::lockPage(unsigned long)>
c0014108:	83 c4 10             	add    esp,0x10
c001410b:	39 f7                	cmp    edi,esi
c001410d:	75 e6                	jne    c00140f5 <VAS::lockPages(unsigned long, int)+0x19>
c001410f:	83 c4 0c             	add    esp,0xc
c0014112:	5b                   	pop    ebx
c0014113:	5e                   	pop    esi
c0014114:	5f                   	pop    edi
c0014115:	5d                   	pop    ebp
c0014116:	c3                   	ret    
c0014117:	90                   	nop

c0014118 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014118:	55                   	push   ebp
c0014119:	57                   	push   edi
c001411a:	56                   	push   esi
c001411b:	53                   	push   ebx
c001411c:	83 ec 28             	sub    esp,0x28
c001411f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014123:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014127:	50                   	push   eax
c0014128:	e8 ce ef ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c001412d:	83 c4 0c             	add    esp,0xc
c0014130:	6a 07                	push   0x7
c0014132:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014136:	52                   	push   edx
c0014137:	89 c5                	mov    ebp,eax
c0014139:	53                   	push   ebx
c001413a:	e8 9d f7 ff ff       	call   c00138dc <VAS::allocatePages(int, int)>
c001413f:	83 c4 10             	add    esp,0x10
c0014142:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014146:	89 c7                	mov    edi,eax
c0014148:	85 c9                	test   ecx,ecx
c001414a:	74 2f                	je     c001417b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001414c:	31 f6                	xor    esi,esi
c001414e:	e8 b7 bb ff ff       	call   c000fd0a <Phys::allocatePage()>
c0014153:	83 c6 01             	add    esi,0x1
c0014156:	6a 03                	push   0x3
c0014158:	55                   	push   ebp
c0014159:	50                   	push   eax
c001415a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001415e:	53                   	push   ebx
c001415f:	e8 70 f6 ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014164:	6a 07                	push   0x7
c0014166:	57                   	push   edi
c0014167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001416b:	50                   	push   eax
c001416c:	53                   	push   ebx
c001416d:	e8 62 f6 ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014172:	83 c4 20             	add    esp,0x20
c0014175:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014179:	75 d3                	jne    c001414e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001417b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001417f:	89 28                	mov    DWORD PTR [eax],ebp
c0014181:	83 c4 1c             	add    esp,0x1c
c0014184:	89 f8                	mov    eax,edi
c0014186:	5b                   	pop    ebx
c0014187:	5e                   	pop    esi
c0014188:	5f                   	pop    edi
c0014189:	5d                   	pop    ebp
c001418a:	c3                   	ret    
c001418b:	90                   	nop

c001418c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001418c:	53                   	push   ebx
c001418d:	83 ec 14             	sub    esp,0x14
c0014190:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014194:	68 00 47 02 c0       	push   0xc0024700
c0014199:	e8 c8 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001419e:	c7 04 24 60 47 02 c0 	mov    DWORD PTR [esp],0xc0024760
c00141a5:	e8 bc 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141aa:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00141ae:	83 c4 18             	add    esp,0x18
c00141b1:	5b                   	pop    ebx
c00141b2:	e9 42 f2 ff ff       	jmp    c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c00141b7:	90                   	nop

c00141b8 <VAS::scanForEviction()>:
c00141b8:	57                   	push   edi
c00141b9:	56                   	push   esi
c00141ba:	31 f6                	xor    esi,esi
c00141bc:	53                   	push   ebx
c00141bd:	83 ec 18             	sub    esp,0x18
c00141c0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00141c5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00141c9:	50                   	push   eax
c00141ca:	68 dc 47 02 c0       	push   0xc00247dc
c00141cf:	e8 92 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141d4:	c7 04 24 0c 49 02 c0 	mov    DWORD PTR [esp],0xc002490c
c00141db:	e8 86 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141e0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00141ec:	75 0e                	jne    c00141fc <VAS::scanForEviction()+0x44>
c00141ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00141f1:	89 da                	mov    edx,ebx
c00141f3:	c1 ea 16             	shr    edx,0x16
c00141f6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00141fa:	74 5b                	je     c0014257 <VAS::scanForEviction()+0x9f>
c00141fc:	83 ec 08             	sub    esp,0x8
c00141ff:	53                   	push   ebx
c0014200:	57                   	push   edi
c0014201:	e8 d4 f1 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	8b 10                	mov    edx,DWORD PTR [eax]
c001420b:	89 d1                	mov    ecx,edx
c001420d:	c1 e9 0c             	shr    ecx,0xc
c0014210:	74 10                	je     c0014222 <VAS::scanForEviction()+0x6a>
c0014212:	89 d1                	mov    ecx,edx
c0014214:	81 e1 01 08 00 00    	and    ecx,0x801
c001421a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014220:	74 40                	je     c0014262 <VAS::scanForEviction()+0xaa>
c0014222:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014228:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001422e:	76 2d                	jbe    c001425d <VAS::scanForEviction()+0xa5>
c0014230:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014237:	83 c6 01             	add    esi,0x1
c001423a:	83 fe 03             	cmp    esi,0x3
c001423d:	74 32                	je     c0014271 <VAS::scanForEviction()+0xb9>
c001423f:	31 db                	xor    ebx,ebx
c0014241:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014247:	75 b3                	jne    c00141fc <VAS::scanForEviction()+0x44>
c0014249:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001424c:	89 da                	mov    edx,ebx
c001424e:	c1 ea 16             	shr    edx,0x16
c0014251:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014255:	75 a5                	jne    c00141fc <VAS::scanForEviction()+0x44>
c0014257:	81 c3 00 00 40 00    	add    ebx,0x400000
c001425d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014260:	eb 84                	jmp    c00141e6 <VAS::scanForEviction()+0x2e>
c0014262:	f6 c2 20             	test   dl,0x20
c0014265:	74 13                	je     c001427a <VAS::scanForEviction()+0xc2>
c0014267:	83 e2 df             	and    edx,0xffffffdf
c001426a:	89 10                	mov    DWORD PTR [eax],edx
c001426c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001426f:	eb b1                	jmp    c0014222 <VAS::scanForEviction()+0x6a>
c0014271:	83 c4 10             	add    esp,0x10
c0014274:	31 c0                	xor    eax,eax
c0014276:	5b                   	pop    ebx
c0014277:	5e                   	pop    esi
c0014278:	5f                   	pop    edi
c0014279:	c3                   	ret    
c001427a:	89 d0                	mov    eax,edx
c001427c:	83 ec 08             	sub    esp,0x8
c001427f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014284:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014288:	53                   	push   ebx
c0014289:	68 28 49 02 c0       	push   0xc0024928
c001428e:	e8 d3 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014293:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014296:	58                   	pop    eax
c0014297:	5a                   	pop    edx
c0014298:	51                   	push   ecx
c0014299:	57                   	push   edi
c001429a:	e8 61 fa ff ff       	call   c0013d00 <VAS::evict(unsigned long)>
c001429f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00142a2:	5b                   	pop    ebx
c00142a3:	5e                   	pop    esi
c00142a4:	50                   	push   eax
c00142a5:	68 3c 49 02 c0       	push   0xc002493c
c00142aa:	e8 b7 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142af:	58                   	pop    eax
c00142b0:	5a                   	pop    edx
c00142b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b5:	50                   	push   eax
c00142b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142ba:	68 4f 49 02 c0       	push   0xc002494f
c00142bf:	e8 a2 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142c4:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00142c7:	81 c1 00 10 00 00    	add    ecx,0x1000
c00142cd:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00142d0:	8b 3d 70 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca70
c00142d6:	5b                   	pop    ebx
c00142d7:	5e                   	pop    esi
c00142d8:	57                   	push   edi
c00142d9:	68 fc 47 02 c0       	push   0xc00247fc
c00142de:	e8 83 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142ea:	83 c4 10             	add    esp,0x10
c00142ed:	5b                   	pop    ebx
c00142ee:	5e                   	pop    esi
c00142ef:	5f                   	pop    edi
c00142f0:	c3                   	ret    

c00142f1 <mapVASFirstTime>:
c00142f1:	55                   	push   ebp
c00142f2:	57                   	push   edi
c00142f3:	56                   	push   esi
c00142f4:	53                   	push   ebx
c00142f5:	83 ec 0c             	sub    esp,0xc
c00142f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142fd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014300:	83 fa 01             	cmp    edx,0x1
c0014303:	0f 84 cb 00 00 00    	je     c00143d4 <mapVASFirstTime+0xe3>
c0014309:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001430c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014311:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014316:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014319:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001431f:	c1 e5 15             	shl    ebp,0x15
c0014322:	29 eb                	sub    ebx,ebp
c0014324:	29 ef                	sub    edi,ebp
c0014326:	e8 df b9 ff ff       	call   c000fd0a <Phys::allocatePage()>
c001432b:	83 ec 0c             	sub    esp,0xc
c001432e:	68 03 04 00 00       	push   0x403
c0014333:	6a 01                	push   0x1
c0014335:	53                   	push   ebx
c0014336:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001433c:	50                   	push   eax
c001433d:	56                   	push   esi
c001433e:	e8 8b f6 ff ff       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014343:	83 c4 20             	add    esp,0x20
c0014346:	39 fb                	cmp    ebx,edi
c0014348:	75 dc                	jne    c0014326 <mapVASFirstTime+0x35>
c001434a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001434f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014354:	29 eb                	sub    ebx,ebp
c0014356:	29 ef                	sub    edi,ebp
c0014358:	e8 ad b9 ff ff       	call   c000fd0a <Phys::allocatePage()>
c001435d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014361:	83 fa 01             	cmp    edx,0x1
c0014364:	19 d2                	sbb    edx,edx
c0014366:	83 ec 0c             	sub    esp,0xc
c0014369:	83 e2 04             	and    edx,0x4
c001436c:	81 c2 03 04 00 00    	add    edx,0x403
c0014372:	52                   	push   edx
c0014373:	6a 01                	push   0x1
c0014375:	53                   	push   ebx
c0014376:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001437c:	50                   	push   eax
c001437d:	56                   	push   esi
c001437e:	e8 4b f6 ff ff       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014383:	83 c4 20             	add    esp,0x20
c0014386:	39 df                	cmp    edi,ebx
c0014388:	75 ce                	jne    c0014358 <mapVASFirstTime+0x67>
c001438a:	83 ec 0c             	sub    esp,0xc
c001438d:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c0014392:	6a 04                	push   0x4
c0014394:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c001439a:	6a ff                	push   0xffffffff
c001439c:	c1 eb 0c             	shr    ebx,0xc
c001439f:	53                   	push   ebx
c00143a0:	68 00 70 02 c0       	push   0xc0027000
c00143a5:	56                   	push   esi
c00143a6:	e8 c9 f1 ff ff       	call   c0013574 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00143ab:	83 c4 14             	add    esp,0x14
c00143ae:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c00143b3:	6a 04                	push   0x4
c00143b5:	6a ff                	push   0xffffffff
c00143b7:	53                   	push   ebx
c00143b8:	68 00 70 02 c0       	push   0xc0027000
c00143bd:	50                   	push   eax
c00143be:	e8 b1 f1 ff ff       	call   c0013574 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00143c3:	0f 20 d8             	mov    eax,cr3
c00143c6:	0f 22 d8             	mov    cr3,eax
c00143c9:	83 c4 20             	add    esp,0x20
c00143cc:	83 c4 0c             	add    esp,0xc
c00143cf:	5b                   	pop    ebx
c00143d0:	5e                   	pop    esi
c00143d1:	5f                   	pop    edi
c00143d2:	5d                   	pop    ebp
c00143d3:	c3                   	ret    
c00143d4:	83 ec 0c             	sub    esp,0xc
c00143d7:	68 5c 49 02 c0       	push   0xc002495c
c00143dc:	e8 85 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143e1:	83 c4 10             	add    esp,0x10
c00143e4:	83 c4 0c             	add    esp,0xc
c00143e7:	5b                   	pop    ebx
c00143e8:	5e                   	pop    esi
c00143e9:	5f                   	pop    edi
c00143ea:	5d                   	pop    ebp
c00143eb:	c3                   	ret    

c00143ec <SysAlarm(regs*)>:
c00143ec:	53                   	push   ebx
c00143ed:	83 ec 10             	sub    esp,0x10
c00143f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143f7:	68 75 49 02 c0       	push   0xc0024975
c00143fc:	e8 65 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014401:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014404:	83 c4 0c             	add    esp,0xc
c0014407:	31 d2                	xor    edx,edx
c0014409:	52                   	push   edx
c001440a:	50                   	push   eax
c001440b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014411:	e8 d2 09 00 00       	call   c0014de8 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014416:	83 c4 18             	add    esp,0x18
c0014419:	5b                   	pop    ebx
c001441a:	c3                   	ret    

c001441b <SysEject(regs*)>:
c001441b:	83 ec 0c             	sub    esp,0xc
c001441e:	83 ca ff             	or     edx,0xffffffff
c0014421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014425:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014428:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001442d:	83 e9 41             	sub    ecx,0x41
c0014430:	83 f9 19             	cmp    ecx,0x19
c0014433:	77 18                	ja     c001444d <SysEject(regs*)+0x32>
c0014435:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001443c:	85 c9                	test   ecx,ecx
c001443e:	74 0d                	je     c001444d <SysEject(regs*)+0x32>
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	51                   	push   ecx
c0014444:	e8 99 65 ff ff       	call   c000a9e2 <LogicalDisk::eject()>
c0014449:	83 c4 10             	add    esp,0x10
c001444c:	99                   	cdq    
c001444d:	83 c4 0c             	add    esp,0xc
c0014450:	c3                   	ret    

c0014451 <SysExit(regs*)>:
c0014451:	83 ec 18             	sub    esp,0x18
c0014454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014458:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001445b:	e8 d8 2f 00 00       	call   c0017438 <KeTerminateCurrentThread(int)>
c0014460:	83 c8 ff             	or     eax,0xffffffff
c0014463:	83 c4 1c             	add    esp,0x1c
c0014466:	89 c2                	mov    edx,eax
c0014468:	c3                   	ret    

c0014469 <SysGetCwd(regs*)>:
c0014469:	83 ec 10             	sub    esp,0x10
c001446c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014470:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014473:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014476:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001447b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001447e:	e8 85 39 ff ff       	call   c0007e08 <Fs::getcwd(Process*, char*, int)>
c0014483:	83 c4 1c             	add    esp,0x1c
c0014486:	99                   	cdq    
c0014487:	c3                   	ret    

c0014488 <SysGetPID(regs*)>:
c0014488:	83 ec 14             	sub    esp,0x14
c001448b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014490:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014493:	ff 30                	push   DWORD PTR [eax]
c0014495:	68 8a 49 02 c0       	push   0xc002498a
c001449a:	e8 c7 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001449f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00144a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00144a9:	83 c4 1c             	add    esp,0x1c
c00144ac:	99                   	cdq    
c00144ad:	c3                   	ret    

c00144ae <SysGetRAMData(regs*)>:
c00144ae:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c00144b3:	03 05 78 c1 02 c0    	add    eax,DWORD PTR ds:0xc002c178
c00144b9:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c00144bf:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00144c5:	99                   	cdq    
c00144c6:	f7 f9                	idiv   ecx
c00144c8:	c1 e0 18             	shl    eax,0x18
c00144cb:	09 c8                	or     eax,ecx
c00144cd:	99                   	cdq    
c00144ce:	c3                   	ret    

c00144cf <SysGetVGAPtr(regs*)>:
c00144cf:	55                   	push   ebp
c00144d0:	57                   	push   edi
c00144d1:	56                   	push   esi
c00144d2:	53                   	push   ebx
c00144d3:	83 ec 1c             	sub    esp,0x1c
c00144d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00144da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00144dd:	83 f8 ff             	cmp    eax,0xffffffff
c00144e0:	74 23                	je     c0014505 <SysGetVGAPtr(regs*)+0x36>
c00144e2:	83 ec 0c             	sub    esp,0xc
c00144e5:	50                   	push   eax
c00144e6:	e8 05 2a 00 00       	call   c0016ef0 <KeProcessFromPID(int)>
c00144eb:	31 d2                	xor    edx,edx
c00144ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144f1:	83 c4 10             	add    esp,0x10
c00144f4:	b8 01 00 00 00       	mov    eax,0x1
c00144f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00144fe:	75 11                	jne    c0014511 <SysGetVGAPtr(regs*)+0x42>
c0014500:	e9 80 00 00 00       	jmp    c0014585 <SysGetVGAPtr(regs*)+0xb6>
c0014505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001450a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001450d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014515:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014519:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c001451f:	74 0c                	je     c001452d <SysGetVGAPtr(regs*)+0x5e>
c0014521:	83 ec 0c             	sub    esp,0xc
c0014524:	55                   	push   ebp
c0014525:	e8 89 dc ff ff       	call   c00121b3 <setActiveTerminal(VgaText*)>
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014530:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014535:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014538:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001453a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001453d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014540:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014546:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014549:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001454c:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014552:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014556:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014559:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014560:	c1 e8 07             	shr    eax,0x7
c0014563:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014569:	50                   	push   eax
c001456a:	50                   	push   eax
c001456b:	68 99 49 02 c0       	push   0xc0024999
c0014570:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014573:	05 ac 0f 00 00       	add    eax,0xfac
c0014578:	50                   	push   eax
c0014579:	e8 d2 c0 fe ff       	call   c0000650 <strcpy>
c001457e:	83 c4 10             	add    esp,0x10
c0014581:	31 c0                	xor    eax,eax
c0014583:	31 d2                	xor    edx,edx
c0014585:	83 c4 1c             	add    esp,0x1c
c0014588:	5b                   	pop    ebx
c0014589:	5e                   	pop    esi
c001458a:	5f                   	pop    edi
c001458b:	5d                   	pop    ebp
c001458c:	c3                   	ret    
c001458d:	66 90                	xchg   ax,ax
c001458f:	90                   	nop

c0014590 <SysKill(regs*)>:
c0014590:	53                   	push   ebx
c0014591:	83 ec 08             	sub    esp,0x8
c0014594:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014598:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001459c:	75 16                	jne    c00145b4 <SysKill(regs*)+0x24>
c001459e:	83 ec 0c             	sub    esp,0xc
c00145a1:	68 a3 49 02 c0       	push   0xc00249a3
c00145a6:	e8 65 b5 ff ff       	call   c000fb10 <KePanic(char const*)>
c00145ab:	83 c4 10             	add    esp,0x10
c00145ae:	e9 89 00 00 00       	jmp    c001463c <SysKill(regs*)+0xac>
c00145b3:	90                   	nop
c00145b4:	83 ec 0c             	sub    esp,0xc
c00145b7:	68 8c ca 02 c0       	push   0xc002ca8c
c00145bc:	e8 87 d6 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00145c1:	8d 76 00             	lea    esi,[esi+0x0]
c00145c4:	83 c4 10             	add    esp,0x10
c00145c7:	85 c0                	test   eax,eax
c00145c9:	74 19                	je     c00145e4 <SysKill(regs*)+0x54>
c00145cb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00145ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00145d1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00145d3:	74 33                	je     c0014608 <SysKill(regs*)+0x78>
c00145d5:	52                   	push   edx
c00145d6:	52                   	push   edx
c00145d7:	50                   	push   eax
c00145d8:	68 8c ca 02 c0       	push   0xc002ca8c
c00145dd:	e8 72 db 00 00       	call   c0022154 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00145e2:	eb e0                	jmp    c00145c4 <SysKill(regs*)+0x34>
c00145e4:	83 ec 0c             	sub    esp,0xc
c00145e7:	68 80 ca 02 c0       	push   0xc002ca80
c00145ec:	e8 57 d6 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00145f1:	8d 76 00             	lea    esi,[esi+0x0]
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	85 c0                	test   eax,eax
c00145f9:	74 41                	je     c001463c <SysKill(regs*)+0xac>
c00145fb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00145fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014601:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014603:	75 27                	jne    c001462c <SysKill(regs*)+0x9c>
c0014605:	8d 76 00             	lea    esi,[esi+0x0]
c0014608:	51                   	push   ecx
c0014609:	51                   	push   ecx
c001460a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001460d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014612:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014615:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001461b:	e8 a3 c7 ff ff       	call   c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014620:	83 c4 10             	add    esp,0x10
c0014623:	31 c0                	xor    eax,eax
c0014625:	31 d2                	xor    edx,edx
c0014627:	eb 1b                	jmp    c0014644 <SysKill(regs*)+0xb4>
c0014629:	8d 76 00             	lea    esi,[esi+0x0]
c001462c:	52                   	push   edx
c001462d:	52                   	push   edx
c001462e:	50                   	push   eax
c001462f:	68 80 ca 02 c0       	push   0xc002ca80
c0014634:	e8 1b db 00 00       	call   c0022154 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014639:	eb b9                	jmp    c00145f4 <SysKill(regs*)+0x64>
c001463b:	90                   	nop
c001463c:	83 c8 ff             	or     eax,0xffffffff
c001463f:	89 c2                	mov    edx,eax
c0014641:	8d 76 00             	lea    esi,[esi+0x0]
c0014644:	83 c4 08             	add    esp,0x8
c0014647:	5b                   	pop    ebx
c0014648:	c3                   	ret    

c0014649 <SysLoadDLL(regs*)>:
c0014649:	56                   	push   esi
c001464a:	31 d2                	xor    edx,edx
c001464c:	53                   	push   ebx
c001464d:	b8 01 00 00 00       	mov    eax,0x1
c0014652:	51                   	push   ecx
c0014653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014657:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001465b:	0f 84 8c 00 00 00    	je     c00146ed <SysLoadDLL(regs*)+0xa4>
c0014661:	83 ec 0c             	sub    esp,0xc
c0014664:	68 14 01 00 00       	push   0x114
c0014669:	e8 46 b0 ff ff       	call   c000f6b4 <malloc>
c001466e:	83 c4 0c             	add    esp,0xc
c0014671:	89 c3                	mov    ebx,eax
c0014673:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014678:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001467b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001467e:	53                   	push   ebx
c001467f:	e8 04 3b ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014684:	83 c4 10             	add    esp,0x10
c0014687:	31 d2                	xor    edx,edx
c0014689:	85 db                	test   ebx,ebx
c001468b:	b8 02 00 00 00       	mov    eax,0x2
c0014690:	74 5b                	je     c00146ed <SysLoadDLL(regs*)+0xa4>
c0014692:	83 ec 0c             	sub    esp,0xc
c0014695:	53                   	push   ebx
c0014696:	e8 cf 3d ff ff       	call   c000846a <File::exists()>
c001469b:	83 c4 10             	add    esp,0x10
c001469e:	84 c0                	test   al,al
c00146a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146a2:	75 11                	jne    c00146b5 <SysLoadDLL(regs*)+0x6c>
c00146a4:	83 ec 0c             	sub    esp,0xc
c00146a7:	53                   	push   ebx
c00146a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	b8 03 00 00 00       	mov    eax,0x3
c00146b3:	eb 36                	jmp    c00146eb <SysLoadDLL(regs*)+0xa2>
c00146b5:	83 ec 0c             	sub    esp,0xc
c00146b8:	53                   	push   ebx
c00146b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146bc:	58                   	pop    eax
c00146bd:	5a                   	pop    edx
c00146be:	6a 00                	push   0x0
c00146c0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00146c3:	e8 df 19 00 00       	call   c00160a7 <Thr::loadDLL(char const*, bool)>
c00146c8:	83 c4 10             	add    esp,0x10
c00146cb:	31 d2                	xor    edx,edx
c00146cd:	89 c1                	mov    ecx,eax
c00146cf:	b8 04 00 00 00       	mov    eax,0x4
c00146d4:	85 c9                	test   ecx,ecx
c00146d6:	74 15                	je     c00146ed <SysLoadDLL(regs*)+0xa4>
c00146d8:	53                   	push   ebx
c00146d9:	53                   	push   ebx
c00146da:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c00146e0:	51                   	push   ecx
c00146e1:	e8 22 1c 00 00       	call   c0016308 <Thr::executeDLL(unsigned long, void*)>
c00146e6:	83 c4 10             	add    esp,0x10
c00146e9:	31 c0                	xor    eax,eax
c00146eb:	31 d2                	xor    edx,edx
c00146ed:	59                   	pop    ecx
c00146ee:	5b                   	pop    ebx
c00146ef:	5e                   	pop    esi
c00146f0:	c3                   	ret    

c00146f1 <SysPause(regs*)>:
c00146f1:	83 ec 18             	sub    esp,0x18
c00146f4:	6a 08                	push   0x8
c00146f6:	e8 09 26 00 00       	call   c0016d04 <blockTask(TaskState)>
c00146fb:	31 c0                	xor    eax,eax
c00146fd:	31 d2                	xor    edx,edx
c00146ff:	83 c4 1c             	add    esp,0x1c
c0014702:	c3                   	ret    

c0014703 <SysPthreadCreate(regs*)>:
c0014703:	83 ec 18             	sub    esp,0x18
c0014706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001470b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001470e:	e8 c9 23 00 00       	call   c0016adc <Process::createUserThread()>
c0014713:	31 c0                	xor    eax,eax
c0014715:	31 d2                	xor    edx,edx
c0014717:	83 c4 1c             	add    esp,0x1c
c001471a:	c3                   	ret    

c001471b <SysPthreadGetTID(regs*)>:
c001471b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014720:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014723:	99                   	cdq    
c0014724:	c3                   	ret    

c0014725 <SysInternalPthreadGetContext(regs*)>:
c0014725:	31 c0                	xor    eax,eax
c0014727:	31 d2                	xor    edx,edx
c0014729:	c3                   	ret    

c001472a <SysInternalPthreadGetStartLocation(regs*)>:
c001472a:	31 c0                	xor    eax,eax
c001472c:	31 d2                	xor    edx,edx
c001472e:	c3                   	ret    

c001472f <SysPthreadJoin(regs*)>:
c001472f:	31 c0                	xor    eax,eax
c0014731:	31 d2                	xor    edx,edx
c0014733:	c3                   	ret    

c0014734 <SysPthreadExit(regs*)>:
c0014734:	83 ec 18             	sub    esp,0x18
c0014737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001473b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001473e:	e8 f5 2c 00 00       	call   c0017438 <KeTerminateCurrentThread(int)>
c0014743:	83 c8 ff             	or     eax,0xffffffff
c0014746:	83 c4 1c             	add    esp,0x1c
c0014749:	89 c2                	mov    edx,eax
c001474b:	c3                   	ret    

c001474c <SysRead(regs*)>:
c001474c:	57                   	push   edi
c001474d:	56                   	push   esi
c001474e:	53                   	push   ebx
c001474f:	83 ec 10             	sub    esp,0x10
c0014752:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014756:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014759:	83 f8 02             	cmp    eax,0x2
c001475c:	77 10                	ja     c001476e <SysRead(regs*)+0x22>
c001475e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014763:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014766:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001476c:	eb 0e                	jmp    c001477c <SysRead(regs*)+0x30>
c001476e:	83 ec 0c             	sub    esp,0xc
c0014771:	50                   	push   eax
c0014772:	e8 26 e8 ff ff       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c0014777:	83 c4 10             	add    esp,0x10
c001477a:	89 c1                	mov    ecx,eax
c001477c:	83 c8 ff             	or     eax,0xffffffff
c001477f:	85 c9                	test   ecx,ecx
c0014781:	89 c2                	mov    edx,eax
c0014783:	74 28                	je     c00147ad <SysRead(regs*)+0x61>
c0014785:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001478d:	83 ec 0c             	sub    esp,0xc
c0014790:	31 ff                	xor    edi,edi
c0014792:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014796:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014798:	52                   	push   edx
c0014799:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001479c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001479f:	57                   	push   edi
c00147a0:	56                   	push   esi
c00147a1:	51                   	push   ecx
c00147a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00147a9:	83 c4 20             	add    esp,0x20
c00147ac:	99                   	cdq    
c00147ad:	83 c4 10             	add    esp,0x10
c00147b0:	5b                   	pop    ebx
c00147b1:	5e                   	pop    esi
c00147b2:	5f                   	pop    edi
c00147b3:	c3                   	ret    

c00147b4 <SysRegisterSignal(regs*)>:
c00147b4:	83 ec 18             	sub    esp,0x18
c00147b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147bb:	6a 00                	push   0x0
c00147bd:	6a 00                	push   0x0
c00147bf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00147c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147cd:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00147d3:	e8 b5 c5 ff ff       	call   c0010d8d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00147d8:	83 c4 2c             	add    esp,0x2c
c00147db:	99                   	cdq    
c00147dc:	c3                   	ret    

c00147dd <SysRegistryGetTypeFromPath(regs*)>:
c00147dd:	53                   	push   ebx
c00147de:	81 ec 40 01 00 00    	sub    esp,0x140
c00147e4:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00147eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147ee:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147f1:	e8 15 97 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	85 c0                	test   eax,eax
c00147fb:	89 c1                	mov    ecx,eax
c00147fd:	74 15                	je     c0014814 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00147ff:	50                   	push   eax
c0014800:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014804:	50                   	push   eax
c0014805:	51                   	push   ecx
c0014806:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014809:	e8 e2 92 ff ff       	call   c000daf0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001480e:	83 c4 10             	add    esp,0x10
c0014811:	99                   	cdq    
c0014812:	eb 05                	jmp    c0014819 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014814:	83 c8 ff             	or     eax,0xffffffff
c0014817:	89 c2                	mov    edx,eax
c0014819:	81 c4 38 01 00 00    	add    esp,0x138
c001481f:	5b                   	pop    ebx
c0014820:	c3                   	ret    

c0014821 <SysRegistryReadExtent(regs*)>:
c0014821:	83 ec 1c             	sub    esp,0x1c
c0014824:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014828:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001482b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001482e:	85 c0                	test   eax,eax
c0014830:	79 1f                	jns    c0014851 <SysRegistryReadExtent(regs*)+0x30>
c0014832:	52                   	push   edx
c0014833:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014838:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001483c:	52                   	push   edx
c001483d:	50                   	push   eax
c001483e:	51                   	push   ecx
c001483f:	e8 9e 91 ff ff       	call   c000d9e2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014848:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001484c:	83 c4 10             	add    esp,0x10
c001484f:	eb 14                	jmp    c0014865 <SysRegistryReadExtent(regs*)+0x44>
c0014851:	83 ec 04             	sub    esp,0x4
c0014854:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014857:	50                   	push   eax
c0014858:	51                   	push   ecx
c0014859:	e8 22 8c ff ff       	call   c000d480 <CmGetString(Reghive_Tag*, int, char*)>
c001485e:	83 c4 10             	add    esp,0x10
c0014861:	31 c0                	xor    eax,eax
c0014863:	31 d2                	xor    edx,edx
c0014865:	83 c4 1c             	add    esp,0x1c
c0014868:	c3                   	ret    

c0014869 <SysRegistryPathToExtentLookup(regs*)>:
c0014869:	83 ec 14             	sub    esp,0x14
c001486c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014870:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014873:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014876:	e8 90 96 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001487b:	83 c4 1c             	add    esp,0x1c
c001487e:	99                   	cdq    
c001487f:	c3                   	ret    

c0014880 <SysRegistryEnterDirectory(regs*)>:
c0014880:	83 ec 14             	sub    esp,0x14
c0014883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014887:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001488a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001488d:	e8 65 8c ff ff       	call   c000d4f7 <CmEnterDirectory(Reghive_Tag*, int)>
c0014892:	83 c4 1c             	add    esp,0x1c
c0014895:	99                   	cdq    
c0014896:	c3                   	ret    

c0014897 <SysRegistryGetNext(regs*)>:
c0014897:	83 ec 14             	sub    esp,0x14
c001489a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001489e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00148a1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00148a4:	e8 8d 8c ff ff       	call   c000d536 <CmGetNext(Reghive_Tag*, int)>
c00148a9:	83 c4 1c             	add    esp,0x1c
c00148ac:	99                   	cdq    
c00148ad:	c3                   	ret    

c00148ae <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00148ae:	57                   	push   edi
c00148af:	56                   	push   esi
c00148b0:	53                   	push   ebx
c00148b1:	81 ec 34 01 00 00    	sub    esp,0x134
c00148b7:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00148be:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00148c2:	57                   	push   edi
c00148c3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00148c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00148c9:	e8 22 92 ff ff       	call   c000daf0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00148ce:	89 c3                	mov    ebx,eax
c00148d0:	58                   	pop    eax
c00148d1:	5a                   	pop    edx
c00148d2:	57                   	push   edi
c00148d3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00148d6:	e8 75 bd fe ff       	call   c0000650 <strcpy>
c00148db:	81 c4 40 01 00 00    	add    esp,0x140
c00148e1:	89 d8                	mov    eax,ebx
c00148e3:	5b                   	pop    ebx
c00148e4:	99                   	cdq    
c00148e5:	5e                   	pop    esi
c00148e6:	5f                   	pop    edi
c00148e7:	c3                   	ret    

c00148e8 <SysRegistryOpen(regs*)>:
c00148e8:	83 ec 18             	sub    esp,0x18
c00148eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148ef:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00148f2:	e8 19 8a ff ff       	call   c000d310 <CmOpen(char const*)>
c00148f7:	83 c4 1c             	add    esp,0x1c
c00148fa:	99                   	cdq    
c00148fb:	c3                   	ret    

c00148fc <SysRegistryClose(regs*)>:
c00148fc:	83 ec 18             	sub    esp,0x18
c00148ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014903:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014906:	e8 23 8b ff ff       	call   c000d42e <CmClose(Reghive_Tag*)>
c001490b:	31 c0                	xor    eax,eax
c001490d:	31 d2                	xor    edx,edx
c001490f:	83 c4 1c             	add    esp,0x1c
c0014912:	c3                   	ret    

c0014913 <SysRegistryEasyReadString(regs*)>:
c0014913:	57                   	push   edi
c0014914:	56                   	push   esi
c0014915:	53                   	push   ebx
c0014916:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001491a:	83 ec 0c             	sub    esp,0xc
c001491d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014920:	e8 eb 89 ff ff       	call   c000d310 <CmOpen(char const*)>
c0014925:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014928:	5a                   	pop    edx
c0014929:	59                   	pop    ecx
c001492a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001492d:	89 c3                	mov    ebx,eax
c001492f:	50                   	push   eax
c0014930:	e8 d6 95 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014935:	83 c4 10             	add    esp,0x10
c0014938:	89 c1                	mov    ecx,eax
c001493a:	b8 01 00 00 00       	mov    eax,0x1
c001493f:	85 c9                	test   ecx,ecx
c0014941:	7e 16                	jle    c0014959 <SysRegistryEasyReadString(regs*)+0x46>
c0014943:	50                   	push   eax
c0014944:	57                   	push   edi
c0014945:	51                   	push   ecx
c0014946:	53                   	push   ebx
c0014947:	e8 34 8b ff ff       	call   c000d480 <CmGetString(Reghive_Tag*, int, char*)>
c001494c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001494f:	e8 da 8a ff ff       	call   c000d42e <CmClose(Reghive_Tag*)>
c0014954:	83 c4 10             	add    esp,0x10
c0014957:	31 c0                	xor    eax,eax
c0014959:	5b                   	pop    ebx
c001495a:	31 d2                	xor    edx,edx
c001495c:	5e                   	pop    esi
c001495d:	5f                   	pop    edi
c001495e:	c3                   	ret    

c001495f <SysRegistryEasyReadInteger(regs*)>:
c001495f:	56                   	push   esi
c0014960:	53                   	push   ebx
c0014961:	83 ec 10             	sub    esp,0x10
c0014964:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014968:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001496b:	e8 a0 89 ff ff       	call   c000d310 <CmOpen(char const*)>
c0014970:	5a                   	pop    edx
c0014971:	59                   	pop    ecx
c0014972:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014975:	89 c3                	mov    ebx,eax
c0014977:	50                   	push   eax
c0014978:	e8 8e 95 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001497d:	83 c4 10             	add    esp,0x10
c0014980:	89 c1                	mov    ecx,eax
c0014982:	b8 01 00 00 00       	mov    eax,0x1
c0014987:	85 c9                	test   ecx,ecx
c0014989:	7e 18                	jle    c00149a3 <SysRegistryEasyReadInteger(regs*)+0x44>
c001498b:	50                   	push   eax
c001498c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001498f:	51                   	push   ecx
c0014990:	53                   	push   ebx
c0014991:	e8 4c 90 ff ff       	call   c000d9e2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014999:	e8 90 8a ff ff       	call   c000d42e <CmClose(Reghive_Tag*)>
c001499e:	83 c4 10             	add    esp,0x10
c00149a1:	31 c0                	xor    eax,eax
c00149a3:	59                   	pop    ecx
c00149a4:	31 d2                	xor    edx,edx
c00149a6:	5b                   	pop    ebx
c00149a7:	5e                   	pop    esi
c00149a8:	c3                   	ret    

c00149a9 <SysSbrk(regs*)>:
c00149a9:	56                   	push   esi
c00149aa:	53                   	push   ebx
c00149ab:	50                   	push   eax
c00149ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00149b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149b8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00149bb:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00149c1:	85 db                	test   ebx,ebx
c00149c3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00149c6:	74 02                	je     c00149ca <SysSbrk(regs*)+0x21>
c00149c8:	79 06                	jns    c00149d0 <SysSbrk(regs*)+0x27>
c00149ca:	89 f0                	mov    eax,esi
c00149cc:	31 d2                	xor    edx,edx
c00149ce:	eb 2a                	jmp    c00149fa <SysSbrk(regs*)+0x51>
c00149d0:	83 c8 ff             	or     eax,0xffffffff
c00149d3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00149d9:	89 c2                	mov    edx,eax
c00149db:	77 1d                	ja     c00149fa <SysSbrk(regs*)+0x51>
c00149dd:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00149e3:	50                   	push   eax
c00149e4:	68 07 0c 00 00       	push   0xc07
c00149e9:	c1 ea 0c             	shr    edx,0xc
c00149ec:	52                   	push   edx
c00149ed:	51                   	push   ecx
c00149ee:	e8 e9 ee ff ff       	call   c00138dc <VAS::allocatePages(int, int)>
c00149f3:	89 f0                	mov    eax,esi
c00149f5:	31 d2                	xor    edx,edx
c00149f7:	83 c4 10             	add    esp,0x10
c00149fa:	59                   	pop    ecx
c00149fb:	5b                   	pop    ebx
c00149fc:	5e                   	pop    esi
c00149fd:	c3                   	ret    

c00149fe <SysSetCwd(regs*)>:
c00149fe:	83 ec 14             	sub    esp,0x14
c0014a01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a05:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a0d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a10:	e8 f4 3a ff ff       	call   c0008509 <Fs::setcwd(Process*, char*)>
c0014a15:	83 c4 1c             	add    esp,0x1c
c0014a18:	99                   	cdq    
c0014a19:	c3                   	ret    

c0014a1a <SysSetTime(regs*)>:
c0014a1a:	55                   	push   ebp
c0014a1b:	31 d2                	xor    edx,edx
c0014a1d:	57                   	push   edi
c0014a1e:	56                   	push   esi
c0014a1f:	53                   	push   ebx
c0014a20:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014a25:	83 ec 30             	sub    esp,0x30
c0014a28:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014a2c:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014a2f:	89 f0                	mov    eax,esi
c0014a31:	f7 f3                	div    ebx
c0014a33:	89 d7                	mov    edi,edx
c0014a35:	31 d2                	xor    edx,edx
c0014a37:	f7 f3                	div    ebx
c0014a39:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014a3e:	89 f0                	mov    eax,esi
c0014a40:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014a44:	31 d2                	xor    edx,edx
c0014a46:	f7 f3                	div    ebx
c0014a48:	bb 18 00 00 00       	mov    ebx,0x18
c0014a4d:	31 d2                	xor    edx,edx
c0014a4f:	f7 f3                	div    ebx
c0014a51:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014a54:	bb 0c 00 00 00       	mov    ebx,0xc
c0014a59:	89 c6                	mov    esi,eax
c0014a5b:	c1 e8 05             	shr    eax,0x5
c0014a5e:	83 e6 1f             	and    esi,0x1f
c0014a61:	46                   	inc    esi
c0014a62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014a66:	31 d2                	xor    edx,edx
c0014a68:	f7 f3                	div    ebx
c0014a6a:	31 db                	xor    ebx,ebx
c0014a6c:	57                   	push   edi
c0014a6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a75:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014a79:	55                   	push   ebp
c0014a7a:	52                   	push   edx
c0014a7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014a7f:	56                   	push   esi
c0014a80:	68 c4 49 02 c0       	push   0xc00249c4
c0014a85:	e8 dc 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014a8a:	83 c4 1c             	add    esp,0x1c
c0014a8d:	57                   	push   edi
c0014a8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a96:	55                   	push   ebp
c0014a97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a9b:	52                   	push   edx
c0014a9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014aa0:	56                   	push   esi
c0014aa1:	68 e6 49 02 c0       	push   0xc00249e6
c0014aa6:	e8 bb 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014aab:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0014ab0:	31 c9                	xor    ecx,ecx
c0014ab2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014ab6:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014aba:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014abe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014ac4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014ac8:	89 f0                	mov    eax,esi
c0014aca:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014ace:	88 c1                	mov    cl,al
c0014ad0:	89 e8                	mov    eax,ebp
c0014ad2:	88 d5                	mov    ch,dl
c0014ad4:	83 c4 1c             	add    esp,0x1c
c0014ad7:	c1 e0 10             	shl    eax,0x10
c0014ada:	0f b7 d1             	movzx  edx,cx
c0014add:	09 c2                	or     edx,eax
c0014adf:	89 f8                	mov    eax,edi
c0014ae1:	c1 e0 10             	shl    eax,0x10
c0014ae4:	89 d1                	mov    ecx,edx
c0014ae6:	89 da                	mov    edx,ebx
c0014ae8:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014aee:	09 c2                	or     edx,eax
c0014af0:	52                   	push   edx
c0014af1:	51                   	push   ecx
c0014af2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014af6:	e8 57 4a ff ff       	call   c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014afb:	83 c4 3c             	add    esp,0x3c
c0014afe:	31 d2                	xor    edx,edx
c0014b00:	5b                   	pop    ebx
c0014b01:	5e                   	pop    esi
c0014b02:	83 f0 01             	xor    eax,0x1
c0014b05:	5f                   	pop    edi
c0014b06:	0f b6 c0             	movzx  eax,al
c0014b09:	5d                   	pop    ebp
c0014b0a:	c3                   	ret    

c0014b0b <SysSymlink(regs*)>:
c0014b0b:	56                   	push   esi
c0014b0c:	83 c8 ff             	or     eax,0xffffffff
c0014b0f:	53                   	push   ebx
c0014b10:	89 c2                	mov    edx,eax
c0014b12:	81 ec 34 02 00 00    	sub    esp,0x234
c0014b18:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014b1f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014b23:	74 50                	je     c0014b75 <SysSymlink(regs*)+0x6a>
c0014b25:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014b28:	85 c9                	test   ecx,ecx
c0014b2a:	74 49                	je     c0014b75 <SysSymlink(regs*)+0x6a>
c0014b2c:	6a 01                	push   0x1
c0014b2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b36:	05 0c 01 00 00       	add    eax,0x10c
c0014b3b:	50                   	push   eax
c0014b3c:	51                   	push   ecx
c0014b3d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014b41:	56                   	push   esi
c0014b42:	e8 15 33 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014b47:	6a 01                	push   0x1
c0014b49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b51:	05 0c 01 00 00       	add    eax,0x10c
c0014b56:	50                   	push   eax
c0014b57:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014b5a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014b61:	53                   	push   ebx
c0014b62:	e8 f5 32 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014b67:	83 c4 18             	add    esp,0x18
c0014b6a:	56                   	push   esi
c0014b6b:	53                   	push   ebx
c0014b6c:	e8 19 2f ff ff       	call   c0007a8a <KeCreateSymlink(char const*, char const*)>
c0014b71:	83 c4 10             	add    esp,0x10
c0014b74:	99                   	cdq    
c0014b75:	81 c4 34 02 00 00    	add    esp,0x234
c0014b7b:	5b                   	pop    ebx
c0014b7c:	5e                   	pop    esi
c0014b7d:	c3                   	ret    

c0014b7e <SysTimezone(regs*)>:
c0014b7e:	83 ec 0c             	sub    esp,0xc
c0014b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b85:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014b89:	75 17                	jne    c0014ba2 <SysTimezone(regs*)+0x24>
c0014b8b:	83 ec 0c             	sub    esp,0xc
c0014b8e:	68 08 4a 02 c0       	push   0xc0024a08
c0014b93:	e8 ce 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b98:	83 c8 ff             	or     eax,0xffffffff
c0014b9b:	83 c4 10             	add    esp,0x10
c0014b9e:	89 c2                	mov    edx,eax
c0014ba0:	eb 16                	jmp    c0014bb8 <SysTimezone(regs*)+0x3a>
c0014ba2:	83 ec 0c             	sub    esp,0xc
c0014ba5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ba8:	e8 5c 44 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014bad:	31 d2                	xor    edx,edx
c0014baf:	83 c4 10             	add    esp,0x10
c0014bb2:	83 f0 01             	xor    eax,0x1
c0014bb5:	0f b6 c0             	movzx  eax,al
c0014bb8:	83 c4 0c             	add    esp,0xc
c0014bbb:	c3                   	ret    

c0014bbc <SysTruncate(regs*)>:
c0014bbc:	55                   	push   ebp
c0014bbd:	57                   	push   edi
c0014bbe:	31 ff                	xor    edi,edi
c0014bc0:	56                   	push   esi
c0014bc1:	53                   	push   ebx
c0014bc2:	83 ec 0c             	sub    esp,0xc
c0014bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014bcc:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014bd0:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014bd3:	89 ce                	mov    esi,ecx
c0014bd5:	0f 84 9a 00 00 00    	je     c0014c75 <SysTruncate(regs*)+0xb9>
c0014bdb:	83 ec 0c             	sub    esp,0xc
c0014bde:	68 14 01 00 00       	push   0x114
c0014be3:	e8 cc aa ff ff       	call   c000f6b4 <malloc>
c0014be8:	83 c4 0c             	add    esp,0xc
c0014beb:	89 c3                	mov    ebx,eax
c0014bed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bf2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014bf5:	55                   	push   ebp
c0014bf6:	53                   	push   ebx
c0014bf7:	e8 8c 35 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	31 d2                	xor    edx,edx
c0014c01:	85 db                	test   ebx,ebx
c0014c03:	b8 03 00 00 00       	mov    eax,0x3
c0014c08:	0f 84 a2 00 00 00    	je     c0014cb0 <SysTruncate(regs*)+0xf4>
c0014c0e:	51                   	push   ecx
c0014c0f:	51                   	push   ecx
c0014c10:	6a 02                	push   0x2
c0014c12:	53                   	push   ebx
c0014c13:	e8 8e 35 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0014c18:	83 c4 10             	add    esp,0x10
c0014c1b:	85 c0                	test   eax,eax
c0014c1d:	74 13                	je     c0014c32 <SysTruncate(regs*)+0x76>
c0014c1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c21:	83 ec 0c             	sub    esp,0xc
c0014c24:	53                   	push   ebx
c0014c25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	b8 04 00 00 00       	mov    eax,0x4
c0014c30:	eb 7c                	jmp    c0014cae <SysTruncate(regs*)+0xf2>
c0014c32:	52                   	push   edx
c0014c33:	57                   	push   edi
c0014c34:	56                   	push   esi
c0014c35:	53                   	push   ebx
c0014c36:	e8 7f 36 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014c3b:	83 c4 10             	add    esp,0x10
c0014c3e:	85 c0                	test   eax,eax
c0014c40:	74 1b                	je     c0014c5d <SysTruncate(regs*)+0xa1>
c0014c42:	83 ec 0c             	sub    esp,0xc
c0014c45:	53                   	push   ebx
c0014c46:	e8 b9 35 ff ff       	call   c0008204 <File::close()>
c0014c4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c53:	83 c4 10             	add    esp,0x10
c0014c56:	b8 05 00 00 00       	mov    eax,0x5
c0014c5b:	eb 51                	jmp    c0014cae <SysTruncate(regs*)+0xf2>
c0014c5d:	83 ec 0c             	sub    esp,0xc
c0014c60:	53                   	push   ebx
c0014c61:	e8 9e 35 ff ff       	call   c0008204 <File::close()>
c0014c66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	31 c0                	xor    eax,eax
c0014c73:	eb 39                	jmp    c0014cae <SysTruncate(regs*)+0xf2>
c0014c75:	31 d2                	xor    edx,edx
c0014c77:	83 fd 02             	cmp    ebp,0x2
c0014c7a:	b8 01 00 00 00       	mov    eax,0x1
c0014c7f:	7e 2f                	jle    c0014cb0 <SysTruncate(regs*)+0xf4>
c0014c81:	83 ec 0c             	sub    esp,0xc
c0014c84:	51                   	push   ecx
c0014c85:	e8 13 e3 ff ff       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c0014c8a:	83 c4 10             	add    esp,0x10
c0014c8d:	31 d2                	xor    edx,edx
c0014c8f:	89 c1                	mov    ecx,eax
c0014c91:	b8 02 00 00 00       	mov    eax,0x2
c0014c96:	85 c9                	test   ecx,ecx
c0014c98:	74 16                	je     c0014cb0 <SysTruncate(regs*)+0xf4>
c0014c9a:	50                   	push   eax
c0014c9b:	57                   	push   edi
c0014c9c:	56                   	push   esi
c0014c9d:	51                   	push   ecx
c0014c9e:	e8 17 36 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014ca3:	83 c4 10             	add    esp,0x10
c0014ca6:	85 c0                	test   eax,eax
c0014ca8:	0f 95 c0             	setne  al
c0014cab:	0f b6 c0             	movzx  eax,al
c0014cae:	31 d2                	xor    edx,edx
c0014cb0:	83 c4 0c             	add    esp,0xc
c0014cb3:	5b                   	pop    ebx
c0014cb4:	5e                   	pop    esi
c0014cb5:	5f                   	pop    edi
c0014cb6:	5d                   	pop    ebp
c0014cb7:	c3                   	ret    

c0014cb8 <SysWrite(regs*)>:
c0014cb8:	57                   	push   edi
c0014cb9:	56                   	push   esi
c0014cba:	53                   	push   ebx
c0014cbb:	83 ec 10             	sub    esp,0x10
c0014cbe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014cc2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014cc5:	83 f8 02             	cmp    eax,0x2
c0014cc8:	77 10                	ja     c0014cda <SysWrite(regs*)+0x22>
c0014cca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ccf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014cd2:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014cd8:	eb 0e                	jmp    c0014ce8 <SysWrite(regs*)+0x30>
c0014cda:	83 ec 0c             	sub    esp,0xc
c0014cdd:	50                   	push   eax
c0014cde:	e8 ba e2 ff ff       	call   c0012f9d <KeGetFileFromDescriptor(int)>
c0014ce3:	83 c4 10             	add    esp,0x10
c0014ce6:	89 c1                	mov    ecx,eax
c0014ce8:	83 c8 ff             	or     eax,0xffffffff
c0014ceb:	85 c9                	test   ecx,ecx
c0014ced:	89 c2                	mov    edx,eax
c0014cef:	74 28                	je     c0014d19 <SysWrite(regs*)+0x61>
c0014cf1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cf9:	83 ec 0c             	sub    esp,0xc
c0014cfc:	31 ff                	xor    edi,edi
c0014cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014d02:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014d04:	52                   	push   edx
c0014d05:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d08:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014d0b:	57                   	push   edi
c0014d0c:	56                   	push   esi
c0014d0d:	51                   	push   ecx
c0014d0e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014d11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014d15:	83 c4 20             	add    esp,0x20
c0014d18:	99                   	cdq    
c0014d19:	83 c4 10             	add    esp,0x10
c0014d1c:	5b                   	pop    ebx
c0014d1d:	5e                   	pop    esi
c0014d1e:	5f                   	pop    edi
c0014d1f:	c3                   	ret    

c0014d20 <SysWsbe(regs*)>:
c0014d20:	55                   	push   ebp
c0014d21:	57                   	push   edi
c0014d22:	56                   	push   esi
c0014d23:	53                   	push   ebx
c0014d24:	83 ec 3c             	sub    esp,0x3c
c0014d27:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014d2b:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014d32:	75 2d                	jne    c0014d61 <SysWsbe(regs*)+0x41>
c0014d34:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014d3b:	75 24                	jne    c0014d61 <SysWsbe(regs*)+0x41>
c0014d3d:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014d44:	75 1b                	jne    c0014d61 <SysWsbe(regs*)+0x41>
c0014d46:	6a 01                	push   0x1
c0014d48:	6a 00                	push   0x0
c0014d4a:	68 1d 9f 00 c0       	push   0xc0009f1d
c0014d4f:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0014d55:	e8 42 1c 00 00       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	31 c0                	xor    eax,eax
c0014d5f:	eb 52                	jmp    c0014db3 <SysWsbe(regs*)+0x93>
c0014d61:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014d65:	be 1d 4a 02 c0       	mov    esi,0xc0024a1d
c0014d6a:	b9 0b 00 00 00       	mov    ecx,0xb
c0014d6f:	fc                   	cld    
c0014d70:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014d72:	83 ec 0c             	sub    esp,0xc
c0014d75:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014d79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d81:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014d87:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d89:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014d8c:	57                   	push   edi
c0014d8d:	e8 ee b7 fe ff       	call   c0000580 <strlen>
c0014d92:	5a                   	pop    edx
c0014d93:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014d97:	52                   	push   edx
c0014d98:	31 d2                	xor    edx,edx
c0014d9a:	57                   	push   edi
c0014d9b:	52                   	push   edx
c0014d9c:	50                   	push   eax
c0014d9d:	56                   	push   esi
c0014d9e:	ff d5                	call   ebp
c0014da0:	83 c4 14             	add    esp,0x14
c0014da3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014da6:	e8 8d 26 00 00       	call   c0017438 <KeTerminateCurrentThread(int)>
c0014dab:	83 c4 10             	add    esp,0x10
c0014dae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014db3:	83 c4 3c             	add    esp,0x3c
c0014db6:	31 d2                	xor    edx,edx
c0014db8:	5b                   	pop    ebx
c0014db9:	5e                   	pop    esi
c0014dba:	5f                   	pop    edi
c0014dbb:	5d                   	pop    ebp
c0014dbc:	c3                   	ret    

c0014dbd <SysYield(regs*)>:
c0014dbd:	83 ec 0c             	sub    esp,0xc
c0014dc0:	fa                   	cli    
c0014dc1:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0014dc7:	e8 78 1e 00 00       	call   c0016c44 <schedule()>
c0014dcc:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0014dd3:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0014dda:	75 01                	jne    c0014ddd <SysYield(regs*)+0x20>
c0014ddc:	fb                   	sti    
c0014ddd:	31 c0                	xor    eax,eax
c0014ddf:	31 d2                	xor    edx,edx
c0014de1:	83 c4 0c             	add    esp,0xc
c0014de4:	c3                   	ret    
c0014de5:	66 90                	xchg   ax,ax
c0014de7:	90                   	nop

c0014de8 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014de8:	55                   	push   ebp
c0014de9:	57                   	push   edi
c0014dea:	56                   	push   esi
c0014deb:	53                   	push   ebx
c0014dec:	83 ec 2c             	sub    esp,0x2c
c0014def:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014df3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014df7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014dfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014dff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014e03:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0014e06:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014e0a:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014e0e:	c1 e0 08             	shl    eax,0x8
c0014e11:	09 c6                	or     esi,eax
c0014e13:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014e17:	c1 e0 10             	shl    eax,0x10
c0014e1a:	09 c6                	or     esi,eax
c0014e1c:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014e20:	83 e0 7f             	and    eax,0x7f
c0014e23:	c1 e0 18             	shl    eax,0x18
c0014e26:	09 f0                	or     eax,esi
c0014e28:	89 c5                	mov    ebp,eax
c0014e2a:	89 f8                	mov    eax,edi
c0014e2c:	80 f4 00             	xor    ah,0x0
c0014e2f:	89 c1                	mov    ecx,eax
c0014e31:	89 e8                	mov    eax,ebp
c0014e33:	80 f4 00             	xor    ah,0x0
c0014e36:	89 c3                	mov    ebx,eax
c0014e38:	89 d8                	mov    eax,ebx
c0014e3a:	09 c8                	or     eax,ecx
c0014e3c:	74 42                	je     c0014e80 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0014e3e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014e42:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0014e45:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014e49:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014e4d:	c1 e0 08             	shl    eax,0x8
c0014e50:	09 c6                	or     esi,eax
c0014e52:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014e56:	c1 e0 10             	shl    eax,0x10
c0014e59:	09 c6                	or     esi,eax
c0014e5b:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014e5f:	83 e0 7f             	and    eax,0x7f
c0014e62:	c1 e0 18             	shl    eax,0x18
c0014e65:	09 f0                	or     eax,esi
c0014e67:	89 c3                	mov    ebx,eax
c0014e69:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0014e6e:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0014e74:	29 c1                	sub    ecx,eax
c0014e76:	19 d3                	sbb    ebx,edx
c0014e78:	89 c8                	mov    eax,ecx
c0014e7a:	89 da                	mov    edx,ebx
c0014e7c:	eb 0e                	jmp    c0014e8c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0014e7e:	66 90                	xchg   ax,ax
c0014e80:	b8 00 00 00 00       	mov    eax,0x0
c0014e85:	ba 00 00 00 00       	mov    edx,0x0
c0014e8a:	66 90                	xchg   ax,ax
c0014e8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014e90:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e98:	80 f4 00             	xor    ah,0x0
c0014e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ea3:	80 f4 00             	xor    ah,0x0
c0014ea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014eaa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014eae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0014eb2:	89 e8                	mov    eax,ebp
c0014eb4:	09 f8                	or     eax,edi
c0014eb6:	74 30                	je     c0014ee8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0014eb8:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c0014ebe:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c0014ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ec8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ecc:	01 c8                	add    eax,ecx
c0014ece:	11 da                	adc    edx,ebx
c0014ed0:	89 c7                	mov    edi,eax
c0014ed2:	83 e7 ff             	and    edi,0xffffffff
c0014ed5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ed8:	89 d0                	mov    eax,edx
c0014eda:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014edf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ee3:	eb 13                	jmp    c0014ef8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0014ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ee8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014eef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014ef7:	90                   	nop
c0014ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014efc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014eff:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0014f03:	89 cf                	mov    edi,ecx
c0014f05:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0014f08:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014f0b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014f0f:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0014f14:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0014f17:	83 e2 00             	and    edx,0x0
c0014f1a:	88 d1                	mov    cl,dl
c0014f1c:	88 da                	mov    dl,bl
c0014f1e:	09 ca                	or     edx,ecx
c0014f20:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0014f23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014f27:	c1 ea 08             	shr    edx,0x8
c0014f2a:	0f b6 da             	movzx  ebx,dl
c0014f2d:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0014f30:	83 e2 00             	and    edx,0x0
c0014f33:	88 d1                	mov    cl,dl
c0014f35:	88 da                	mov    dl,bl
c0014f37:	09 ca                	or     edx,ecx
c0014f39:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0014f3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014f40:	c1 ea 10             	shr    edx,0x10
c0014f43:	0f b6 da             	movzx  ebx,dl
c0014f46:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0014f49:	83 e2 00             	and    edx,0x0
c0014f4c:	88 d1                	mov    cl,dl
c0014f4e:	88 da                	mov    dl,bl
c0014f50:	09 ca                	or     edx,ecx
c0014f52:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0014f55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014f59:	c1 ea 18             	shr    edx,0x18
c0014f5c:	83 e2 7f             	and    edx,0x7f
c0014f5f:	89 d3                	mov    ebx,edx
c0014f61:	83 e3 7f             	and    ebx,0x7f
c0014f64:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0014f67:	83 e2 80             	and    edx,0xffffff80
c0014f6a:	88 d1                	mov    cl,dl
c0014f6c:	88 da                	mov    dl,bl
c0014f6e:	09 ca                	or     edx,ecx
c0014f70:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0014f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f77:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f7b:	83 c4 2c             	add    esp,0x2c
c0014f7e:	5b                   	pop    ebx
c0014f7f:	5e                   	pop    esi
c0014f80:	5f                   	pop    edi
c0014f81:	5d                   	pop    ebp
c0014f82:	c3                   	ret    
c0014f83:	90                   	nop

c0014f84 <KeCheckAlarm(ThreadControlBlock*)>:
c0014f84:	55                   	push   ebp
c0014f85:	57                   	push   edi
c0014f86:	56                   	push   esi
c0014f87:	53                   	push   ebx
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f8f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0014f92:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0014f96:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0014f9a:	c1 e5 08             	shl    ebp,0x8
c0014f9d:	09 fd                	or     ebp,edi
c0014f9f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0014fa3:	c1 e7 10             	shl    edi,0x10
c0014fa6:	09 ef                	or     edi,ebp
c0014fa8:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0014fac:	83 e0 7f             	and    eax,0x7f
c0014faf:	c1 e0 18             	shl    eax,0x18
c0014fb2:	09 f8                	or     eax,edi
c0014fb4:	89 c1                	mov    ecx,eax
c0014fb6:	89 d0                	mov    eax,edx
c0014fb8:	80 f4 00             	xor    ah,0x0
c0014fbb:	89 c3                	mov    ebx,eax
c0014fbd:	89 c8                	mov    eax,ecx
c0014fbf:	80 f4 00             	xor    ah,0x0
c0014fc2:	89 c6                	mov    esi,eax
c0014fc4:	89 f0                	mov    eax,esi
c0014fc6:	09 d8                	or     eax,ebx
c0014fc8:	0f 84 9e 00 00 00    	je     c001506c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0014fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fd2:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0014fd5:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c0014fd9:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c0014fdd:	c1 e6 08             	shl    esi,0x8
c0014fe0:	09 de                	or     esi,ebx
c0014fe2:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c0014fe6:	c1 e3 10             	shl    ebx,0x10
c0014fe9:	09 f3                	or     ebx,esi
c0014feb:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0014fef:	83 e0 7f             	and    eax,0x7f
c0014ff2:	c1 e0 18             	shl    eax,0x18
c0014ff5:	09 d8                	or     eax,ebx
c0014ff7:	89 c1                	mov    ecx,eax
c0014ff9:	89 cb                	mov    ebx,ecx
c0014ffb:	89 d1                	mov    ecx,edx
c0014ffd:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0015002:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015008:	39 c8                	cmp    eax,ecx
c001500a:	89 d0                	mov    eax,edx
c001500c:	19 d8                	sbb    eax,ebx
c001500e:	72 5c                	jb     c001506c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015014:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c001501b:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001501e:	83 e2 00             	and    edx,0x0
c0015021:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015024:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015027:	83 e2 00             	and    edx,0x0
c001502a:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001502d:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015030:	83 e2 00             	and    edx,0x0
c0015033:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015036:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015039:	83 e2 80             	and    edx,0xffffff80
c001503c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001503f:	83 ec 0c             	sub    esp,0xc
c0015042:	68 49 4a 02 c0       	push   0xc0024a49
c0015047:	e8 1a 1f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001504c:	83 c4 10             	add    esp,0x10
c001504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015053:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015056:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c001505c:	83 ec 08             	sub    esp,0x8
c001505f:	6a 0e                	push   0xe
c0015061:	50                   	push   eax
c0015062:	e8 5c bd ff ff       	call   c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	66 90                	xchg   ax,ax
c001506c:	90                   	nop
c001506d:	83 c4 0c             	add    esp,0xc
c0015070:	5b                   	pop    ebx
c0015071:	5e                   	pop    esi
c0015072:	5f                   	pop    edi
c0015073:	5d                   	pop    ebp
c0015074:	c3                   	ret    

c0015075 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015075:	55                   	push   ebp
c0015076:	57                   	push   edi
c0015077:	56                   	push   esi
c0015078:	53                   	push   ebx
c0015079:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001507f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001508a:	74 3b                	je     c00150c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001508c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015094:	74 31                	je     c00150c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015096:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001509e:	75 27                	jne    c00150c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00150a0:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00150a7:	05 00 10 00 00       	add    eax,0x1000
c00150ac:	89 c2                	mov    edx,eax
c00150ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00150b3:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00150ba:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00150c0:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00150c7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00150ce:	83 ec 0c             	sub    esp,0xc
c00150d1:	6a 01                	push   0x1
c00150d3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00150d9:	e8 1d e0 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c00150de:	83 c4 10             	add    esp,0x10
c00150e1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00150e7:	89 c3                	mov    ebx,eax
c00150e9:	0f 86 27 01 00 00    	jbe    c0015216 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00150ef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00150f7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00150fe:	c1 ee 0c             	shr    esi,0xc
c0015101:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015105:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001510c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015113:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015117:	29 ef                	sub    edi,ebp
c0015119:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001511d:	0f 83 fa 00 00 00    	jae    c001521d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015123:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015129:	b8 00 10 00 00       	mov    eax,0x1000
c001512e:	0f 47 f8             	cmova  edi,eax
c0015131:	83 ec 0c             	sub    esp,0xc
c0015134:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001513b:	31 d2                	xor    edx,edx
c001513d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001513f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015143:	50                   	push   eax
c0015144:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015148:	56                   	push   esi
c0015149:	52                   	push   edx
c001514a:	57                   	push   edi
c001514b:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015152:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015155:	83 c4 20             	add    esp,0x20
c0015158:	85 c0                	test   eax,eax
c001515a:	75 06                	jne    c0015162 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001515c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015160:	74 13                	je     c0015175 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0015162:	83 ec 0c             	sub    esp,0xc
c0015165:	53                   	push   ebx
c0015166:	e8 8e e2 ff ff       	call   c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c001516b:	83 c4 10             	add    esp,0x10
c001516e:	31 c0                	xor    eax,eax
c0015170:	e9 80 01 00 00       	jmp    c00152f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015175:	fa                   	cli    
c0015176:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001517c:	e8 89 ab ff ff       	call   c000fd0a <Phys::allocatePage()>
c0015181:	6a 07                	push   0x7
c0015183:	53                   	push   ebx
c0015184:	50                   	push   eax
c0015185:	89 c7                	mov    edi,eax
c0015187:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001518c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001518f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015195:	e8 3a e6 ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001519a:	83 c4 0c             	add    esp,0xc
c001519d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00151a4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151aa:	6a 00                	push   0x0
c00151ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151b4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151ba:	e8 81 e4 ff ff       	call   c0013640 <VAS::mapOtherVASIn(bool, VAS*)>
c00151bf:	58                   	pop    eax
c00151c0:	5a                   	pop    edx
c00151c1:	68 07 0c 00 00       	push   0xc07
c00151c6:	55                   	push   ebp
c00151c7:	57                   	push   edi
c00151c8:	89 df                	mov    edi,ebx
c00151ca:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00151d1:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151d7:	6a 00                	push   0x0
c00151d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151e1:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151e7:	e8 3c e8 ff ff       	call   c0013a28 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00151ec:	b9 00 10 00 00       	mov    ecx,0x1000
c00151f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00151f3:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00151fa:	83 c4 20             	add    esp,0x20
c00151fd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0015204:	75 01                	jne    c0015207 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0015206:	fb                   	sti    
c0015207:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001520b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015211:	e9 ef fe ff ff       	jmp    c0015105 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0015216:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001521d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015224:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001522a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015230:	0f 86 b1 00 00 00    	jbe    c00152e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015236:	fa                   	cli    
c0015237:	51                   	push   ecx
c0015238:	31 ff                	xor    edi,edi
c001523a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015241:	c1 ee 0c             	shr    esi,0xc
c0015244:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001524a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015250:	6a 00                	push   0x0
c0015252:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015257:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001525a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015260:	e8 db e3 ff ff       	call   c0013640 <VAS::mapOtherVASIn(bool, VAS*)>
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	e8 9d aa ff ff       	call   c000fd0a <Phys::allocatePage()>
c001526d:	47                   	inc    edi
c001526e:	6a 07                	push   0x7
c0015270:	53                   	push   ebx
c0015271:	50                   	push   eax
c0015272:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015276:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001527c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001527f:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015285:	e8 4a e5 ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001528a:	58                   	pop    eax
c001528b:	5a                   	pop    edx
c001528c:	68 07 0c 00 00       	push   0xc07
c0015291:	55                   	push   ebp
c0015292:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001529c:	50                   	push   eax
c001529d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00152a4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152aa:	6a 00                	push   0x0
c00152ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152b4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152ba:	e8 69 e7 ff ff       	call   c0013a28 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00152bf:	83 c4 1c             	add    esp,0x1c
c00152c2:	68 00 10 00 00       	push   0x1000
c00152c7:	6a 00                	push   0x0
c00152c9:	53                   	push   ebx
c00152ca:	e8 21 b2 fe ff       	call   c00004f0 <memset>
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	39 fe                	cmp    esi,edi
c00152d4:	77 92                	ja     c0015268 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c00152d6:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00152dd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00152e4:	75 01                	jne    c00152e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00152e6:	fb                   	sti    
c00152e7:	83 ec 0c             	sub    esp,0xc
c00152ea:	53                   	push   ebx
c00152eb:	e8 09 e1 ff ff       	call   c00133f9 <Virt::freeKernelVirtualPages(unsigned long)>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	b0 01                	mov    al,0x1
c00152f5:	81 c4 2c 10 00 00    	add    esp,0x102c
c00152fb:	5b                   	pop    ebx
c00152fc:	5e                   	pop    esi
c00152fd:	5f                   	pop    edi
c00152fe:	5d                   	pop    ebp
c00152ff:	c3                   	ret    

c0015300 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015300:	55                   	push   ebp
c0015301:	57                   	push   edi
c0015302:	56                   	push   esi
c0015303:	53                   	push   ebx
c0015304:	83 ec 68             	sub    esp,0x68
c0015307:	68 14 01 00 00       	push   0x114
c001530c:	e8 a3 a3 ff ff       	call   c000f6b4 <malloc>
c0015311:	83 c4 0c             	add    esp,0xc
c0015314:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015318:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001531c:	89 c3                	mov    ebx,eax
c001531e:	50                   	push   eax
c001531f:	e8 64 2e ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015324:	5e                   	pop    esi
c0015325:	5f                   	pop    edi
c0015326:	6a 01                	push   0x1
c0015328:	53                   	push   ebx
c0015329:	e8 78 2e ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	85 c0                	test   eax,eax
c0015333:	0f 85 cb 01 00 00    	jne    c0015504 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015339:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015341:	83 ec 0c             	sub    esp,0xc
c0015344:	6a 34                	push   0x34
c0015346:	e8 69 a3 ff ff       	call   c000f6b4 <malloc>
c001534b:	59                   	pop    ecx
c001534c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015350:	89 c7                	mov    edi,eax
c0015352:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015354:	56                   	push   esi
c0015355:	57                   	push   edi
c0015356:	6a 00                	push   0x0
c0015358:	6a 34                	push   0x34
c001535a:	53                   	push   ebx
c001535b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001535e:	83 c4 20             	add    esp,0x20
c0015361:	85 c0                	test   eax,eax
c0015363:	0f 85 9b 01 00 00    	jne    c0015504 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015369:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001536f:	0f 85 8f 01 00 00    	jne    c0015504 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015375:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015378:	85 c0                	test   eax,eax
c001537a:	0f 84 84 01 00 00    	je     c0015504 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015380:	52                   	push   edx
c0015381:	31 d2                	xor    edx,edx
c0015383:	52                   	push   edx
c0015384:	50                   	push   eax
c0015385:	53                   	push   ebx
c0015386:	e8 d9 2e ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001538b:	83 c4 10             	add    esp,0x10
c001538e:	85 c0                	test   eax,eax
c0015390:	0f 85 6e 01 00 00    	jne    c0015504 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015396:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015399:	83 ec 0c             	sub    esp,0xc
c001539c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00153a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00153a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00153a8:	0f af c2             	imul   eax,edx
c00153ab:	50                   	push   eax
c00153ac:	e8 03 a3 ff ff       	call   c000f6b4 <malloc>
c00153b1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00153b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00153b6:	31 f6                	xor    esi,esi
c00153b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00153bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153c0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00153c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00153c8:	0f af c2             	imul   eax,edx
c00153cb:	99                   	cdq    
c00153cc:	52                   	push   edx
c00153cd:	50                   	push   eax
c00153ce:	53                   	push   ebx
c00153cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153d2:	83 c4 20             	add    esp,0x20
c00153d5:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c00153d9:	0f b7 c6             	movzx  eax,si
c00153dc:	73 71                	jae    c001544f <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00153de:	55                   	push   ebp
c00153df:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00153e3:	6b c0 28             	imul   eax,eax,0x28
c00153e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00153ea:	6b d2 28             	imul   edx,edx,0x28
c00153ed:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00153f0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00153f4:	31 d2                	xor    edx,edx
c00153f6:	52                   	push   edx
c00153f7:	50                   	push   eax
c00153f8:	53                   	push   ebx
c00153f9:	e8 66 2e ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00153fe:	83 c4 0c             	add    esp,0xc
c0015401:	6a 20                	push   0x20
c0015403:	6a 00                	push   0x0
c0015405:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015409:	55                   	push   ebp
c001540a:	e8 e1 b0 fe ff       	call   c00004f0 <memset>
c001540f:	58                   	pop    eax
c0015410:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015412:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015416:	52                   	push   edx
c0015417:	55                   	push   ebp
c0015418:	6a 00                	push   0x0
c001541a:	6a 1f                	push   0x1f
c001541c:	53                   	push   ebx
c001541d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015420:	83 c4 18             	add    esp,0x18
c0015423:	55                   	push   ebp
c0015424:	68 5a 4a 02 c0       	push   0xc0024a5a
c0015429:	e8 52 b3 fe ff       	call   c0000780 <strcmp>
c001542e:	83 c4 10             	add    esp,0x10
c0015431:	85 c0                	test   eax,eax
c0015433:	75 17                	jne    c001544c <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015435:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015439:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001543d:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015443:	83 c8 80             	or     eax,0xffffff80
c0015446:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c001544c:	46                   	inc    esi
c001544d:	eb 86                	jmp    c00153d5 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c001544f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015452:	85 c0                	test   eax,eax
c0015454:	0f 84 aa 00 00 00    	je     c0015504 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001545a:	31 d2                	xor    edx,edx
c001545c:	56                   	push   esi
c001545d:	52                   	push   edx
c001545e:	50                   	push   eax
c001545f:	53                   	push   ebx
c0015460:	e8 ff 2d ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	85 c0                	test   eax,eax
c001546a:	0f 85 94 00 00 00    	jne    c0015504 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015470:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001547b:	0f af c2             	imul   eax,edx
c001547e:	50                   	push   eax
c001547f:	e8 30 a2 ff ff       	call   c000f6b4 <malloc>
c0015484:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015488:	59                   	pop    ecx
c0015489:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001548b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001548f:	50                   	push   eax
c0015490:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015494:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015498:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001549c:	0f af c2             	imul   eax,edx
c001549f:	99                   	cdq    
c00154a0:	52                   	push   edx
c00154a1:	50                   	push   eax
c00154a2:	53                   	push   ebx
c00154a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00154a6:	83 c4 20             	add    esp,0x20
c00154a9:	31 c9                	xor    ecx,ecx
c00154ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00154b3:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c00154b7:	0f b7 e9             	movzx  ebp,cx
c00154ba:	0f 83 89 00 00 00    	jae    c0015549 <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c00154c0:	c1 e5 05             	shl    ebp,0x5
c00154c3:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00154c7:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00154cb:	75 76                	jne    c0015543 <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c00154cd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00154d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00154db:	52                   	push   edx
c00154dc:	31 d2                	xor    edx,edx
c00154de:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00154e1:	52                   	push   edx
c00154e2:	50                   	push   eax
c00154e3:	53                   	push   ebx
c00154e4:	e8 7b 2d ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00154f0:	85 c0                	test   eax,eax
c00154f2:	74 17                	je     c001550b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c00154f4:	83 ec 0c             	sub    esp,0xc
c00154f7:	68 69 4a 02 c0       	push   0xc0024a69
c00154fc:	e8 65 1a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	31 c0                	xor    eax,eax
c0015506:	e9 8e 00 00 00       	jmp    c0015599 <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c001550b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001550f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015512:	83 ec 0c             	sub    esp,0xc
c0015515:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015518:	50                   	push   eax
c0015519:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001551d:	56                   	push   esi
c001551e:	53                   	push   ebx
c001551f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015526:	e8 4a fb ff ff       	call   c0015075 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001552b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001552f:	83 c4 20             	add    esp,0x20
c0015532:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0015536:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001553a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001553f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0015543:	41                   	inc    ecx
c0015544:	e9 6a ff ff ff       	jmp    c00154b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015549:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015554:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015558:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c001555e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015563:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c0015569:	05 00 10 00 00       	add    eax,0x1000
c001556e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015571:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015575:	e8 4a a1 ff ff       	call   c000f6c4 <free>
c001557a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001557d:	e8 42 a1 ff ff       	call   c000f6c4 <free>
c0015582:	58                   	pop    eax
c0015583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015587:	e8 38 a1 ff ff       	call   c000f6c4 <free>
c001558c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001558f:	e8 70 2c ff ff       	call   c0008204 <File::close()>
c0015594:	83 c4 10             	add    esp,0x10
c0015597:	b0 01                	mov    al,0x1
c0015599:	83 c4 5c             	add    esp,0x5c
c001559c:	5b                   	pop    ebx
c001559d:	5e                   	pop    esi
c001559e:	5f                   	pop    edi
c001559f:	5d                   	pop    ebp
c00155a0:	c3                   	ret    

c00155a1 <Thr::runtimeReferenceHelper()>:
c00155a1:	83 ec 18             	sub    esp,0x18
c00155a4:	68 71 4a 02 c0       	push   0xc0024a71
c00155a9:	e8 b8 19 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00155ae:	fa                   	cli    
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	eb fe                	jmp    c00155b2 <Thr::runtimeReferenceHelper()+0x11>

c00155b4 <Thr::getAddressOfKernelSymbol(char const*)>:
c00155b4:	57                   	push   edi
c00155b5:	56                   	push   esi
c00155b6:	53                   	push   ebx
c00155b7:	31 db                	xor    ebx,ebx
c00155b9:	39 1d 40 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca40,ebx
c00155bf:	7e 3c                	jle    c00155fd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00155c1:	8b 34 9d c0 c9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3640]
c00155c8:	31 ff                	xor    edi,edi
c00155ca:	39 3c 9d c0 c8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3740],edi
c00155d1:	7e 27                	jle    c00155fa <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00155d3:	50                   	push   eax
c00155d4:	50                   	push   eax
c00155d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00155db:	03 04 9d 40 c9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd36c0]
c00155e2:	50                   	push   eax
c00155e3:	e8 98 b1 fe ff       	call   c0000780 <strcmp>
c00155e8:	83 c4 10             	add    esp,0x10
c00155eb:	85 c0                	test   eax,eax
c00155ed:	75 05                	jne    c00155f4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00155ef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00155f2:	eb 0b                	jmp    c00155ff <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00155f4:	83 c6 10             	add    esi,0x10
c00155f7:	47                   	inc    edi
c00155f8:	eb d0                	jmp    c00155ca <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00155fa:	43                   	inc    ebx
c00155fb:	eb bc                	jmp    c00155b9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00155fd:	31 c0                	xor    eax,eax
c00155ff:	5b                   	pop    ebx
c0015600:	5e                   	pop    esi
c0015601:	5f                   	pop    edi
c0015602:	c3                   	ret    

c0015603 <Thr::loadKernelSymbolTable(char const*)>:
c0015603:	55                   	push   ebp
c0015604:	57                   	push   edi
c0015605:	56                   	push   esi
c0015606:	53                   	push   ebx
c0015607:	83 ec 68             	sub    esp,0x68
c001560a:	68 14 01 00 00       	push   0x114
c001560f:	8b 35 98 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca98
c0015615:	e8 9a a0 ff ff       	call   c000f6b4 <malloc>
c001561a:	83 c4 0c             	add    esp,0xc
c001561d:	56                   	push   esi
c001561e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015622:	89 c3                	mov    ebx,eax
c0015624:	50                   	push   eax
c0015625:	e8 5e 2b ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001562a:	5e                   	pop    esi
c001562b:	5f                   	pop    edi
c001562c:	6a 01                	push   0x1
c001562e:	53                   	push   ebx
c001562f:	e8 72 2b ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	85 c0                	test   eax,eax
c0015639:	74 0a                	je     c0015645 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001563b:	83 ec 0c             	sub    esp,0xc
c001563e:	68 93 4a 02 c0       	push   0xc0024a93
c0015643:	eb 34                	jmp    c0015679 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015645:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001564d:	83 ec 0c             	sub    esp,0xc
c0015650:	6a 34                	push   0x34
c0015652:	e8 5d a0 ff ff       	call   c000f6b4 <malloc>
c0015657:	59                   	pop    ecx
c0015658:	8d 74 24 34          	lea    esi,[esp+0x34]
c001565c:	89 c7                	mov    edi,eax
c001565e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015660:	56                   	push   esi
c0015661:	57                   	push   edi
c0015662:	6a 00                	push   0x0
c0015664:	6a 34                	push   0x34
c0015666:	53                   	push   ebx
c0015667:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001566a:	83 c4 20             	add    esp,0x20
c001566d:	85 c0                	test   eax,eax
c001566f:	74 17                	je     c0015688 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015671:	83 ec 0c             	sub    esp,0xc
c0015674:	68 aa 4a 02 c0       	push   0xc0024aaa
c0015679:	e8 92 a4 ff ff       	call   c000fb10 <KePanic(char const*)>
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	31 c0                	xor    eax,eax
c0015683:	e9 31 02 00 00       	jmp    c00158b9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015688:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001568e:	75 e1                	jne    c0015671 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015690:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015693:	85 c0                	test   eax,eax
c0015695:	74 da                	je     c0015671 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015697:	52                   	push   edx
c0015698:	31 d2                	xor    edx,edx
c001569a:	52                   	push   edx
c001569b:	50                   	push   eax
c001569c:	53                   	push   ebx
c001569d:	e8 c2 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	85 c0                	test   eax,eax
c00156a7:	75 c8                	jne    c0015671 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00156a9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00156ad:	83 ec 0c             	sub    esp,0xc
c00156b0:	31 ed                	xor    ebp,ebp
c00156b2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00156b6:	0f af c2             	imul   eax,edx
c00156b9:	50                   	push   eax
c00156ba:	e8 f5 9f ff ff       	call   c000f6b4 <malloc>
c00156bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00156c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00156c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00156c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156cc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00156d0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00156d4:	0f af c2             	imul   eax,edx
c00156d7:	99                   	cdq    
c00156d8:	52                   	push   edx
c00156d9:	50                   	push   eax
c00156da:	53                   	push   ebx
c00156db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00156de:	83 c4 20             	add    esp,0x20
c00156e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00156e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00156f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00156f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015701:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015705:	0f b7 f5             	movzx  esi,bp
c0015708:	0f 83 a7 00 00 00    	jae    c00157b5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001570e:	6b f6 28             	imul   esi,esi,0x28
c0015711:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015715:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015718:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001571c:	50                   	push   eax
c001571d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015725:	8b 16                	mov    edx,DWORD PTR [esi]
c0015727:	6b c0 28             	imul   eax,eax,0x28
c001572a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001572e:	89 d0                	mov    eax,edx
c0015730:	31 d2                	xor    edx,edx
c0015732:	52                   	push   edx
c0015733:	50                   	push   eax
c0015734:	53                   	push   ebx
c0015735:	e8 2a 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001573a:	83 c4 0c             	add    esp,0xc
c001573d:	6a 20                	push   0x20
c001573f:	6a 00                	push   0x0
c0015741:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015745:	52                   	push   edx
c0015746:	e8 a5 ad fe ff       	call   c00004f0 <memset>
c001574b:	58                   	pop    eax
c001574c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001574e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015752:	51                   	push   ecx
c0015753:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015757:	52                   	push   edx
c0015758:	6a 00                	push   0x0
c001575a:	6a 1f                	push   0x1f
c001575c:	53                   	push   ebx
c001575d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015760:	83 c4 18             	add    esp,0x18
c0015763:	68 c1 4a 02 c0       	push   0xc0024ac1
c0015768:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001576c:	52                   	push   edx
c001576d:	e8 0e b0 fe ff       	call   c0000780 <strcmp>
c0015772:	83 c4 10             	add    esp,0x10
c0015775:	85 c0                	test   eax,eax
c0015777:	75 0f                	jne    c0015788 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015779:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001577c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015780:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015788:	50                   	push   eax
c0015789:	50                   	push   eax
c001578a:	68 c9 4a 02 c0       	push   0xc0024ac9
c001578f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015793:	50                   	push   eax
c0015794:	e8 e7 af fe ff       	call   c0000780 <strcmp>
c0015799:	83 c4 10             	add    esp,0x10
c001579c:	85 c0                	test   eax,eax
c001579e:	75 0f                	jne    c00157af <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00157a0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00157a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00157a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00157af:	45                   	inc    ebp
c00157b0:	e9 4c ff ff ff       	jmp    c0015701 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00157b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00157ba:	75 10                	jne    c00157cc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00157bc:	83 ec 0c             	sub    esp,0xc
c00157bf:	68 d1 4a 02 c0       	push   0xc0024ad1
c00157c4:	e8 47 a3 ff ff       	call   c000fb10 <KePanic(char const*)>
c00157c9:	83 c4 10             	add    esp,0x10
c00157cc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00157d1:	75 10                	jne    c00157e3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00157d3:	83 ec 0c             	sub    esp,0xc
c00157d6:	68 d1 4a 02 c0       	push   0xc0024ad1
c00157db:	e8 30 a3 ff ff       	call   c000fb10 <KePanic(char const*)>
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	50                   	push   eax
c00157e4:	31 d2                	xor    edx,edx
c00157e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ea:	52                   	push   edx
c00157eb:	50                   	push   eax
c00157ec:	53                   	push   ebx
c00157ed:	e8 72 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00157f2:	5a                   	pop    edx
c00157f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00157f7:	e8 b8 9e ff ff       	call   c000f6b4 <malloc>
c00157fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015800:	31 c9                	xor    ecx,ecx
c0015802:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015806:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015808:	5e                   	pop    esi
c0015809:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001580d:	55                   	push   ebp
c001580e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015812:	51                   	push   ecx
c0015813:	52                   	push   edx
c0015814:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015818:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001581c:	53                   	push   ebx
c001581d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015820:	83 c4 14             	add    esp,0x14
c0015823:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015827:	e8 88 9e ff ff       	call   c000f6b4 <malloc>
c001582c:	89 c6                	mov    esi,eax
c001582e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015830:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015833:	56                   	push   esi
c0015834:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015838:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001583c:	51                   	push   ecx
c001583d:	52                   	push   edx
c001583e:	53                   	push   ebx
c001583f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015842:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015846:	83 c4 1c             	add    esp,0x1c
c0015849:	8b 15 40 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca40
c001584f:	c1 e8 04             	shr    eax,0x4
c0015852:	89 04 95 c0 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3740],eax
c0015859:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001585d:	31 d2                	xor    edx,edx
c001585f:	52                   	push   edx
c0015860:	50                   	push   eax
c0015861:	53                   	push   ebx
c0015862:	e8 fd 29 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015867:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015869:	31 d2                	xor    edx,edx
c001586b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001586e:	56                   	push   esi
c001586f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015873:	52                   	push   edx
c0015874:	50                   	push   eax
c0015875:	53                   	push   ebx
c0015876:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015879:	83 c4 14             	add    esp,0x14
c001587c:	53                   	push   ebx
c001587d:	e8 82 29 ff ff       	call   c0008204 <File::close()>
c0015882:	5d                   	pop    ebp
c0015883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015887:	e8 38 9e ff ff       	call   c000f6c4 <free>
c001588c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001588f:	e8 30 9e ff ff       	call   c000f6c4 <free>
c0015894:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c0015899:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001589d:	83 c4 10             	add    esp,0x10
c00158a0:	89 34 85 40 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36c0],esi
c00158a7:	8d 50 01             	lea    edx,[eax+0x1]
c00158aa:	89 0c 85 c0 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3640],ecx
c00158b1:	b0 01                	mov    al,0x1
c00158b3:	89 15 40 ca 02 c0    	mov    DWORD PTR ds:0xc002ca40,edx
c00158b9:	83 c4 5c             	add    esp,0x5c
c00158bc:	5b                   	pop    ebx
c00158bd:	5e                   	pop    esi
c00158be:	5f                   	pop    edi
c00158bf:	5d                   	pop    ebp
c00158c0:	c3                   	ret    

c00158c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00158c1:	55                   	push   ebp
c00158c2:	57                   	push   edi
c00158c3:	56                   	push   esi
c00158c4:	53                   	push   ebx
c00158c5:	81 ec 68 03 00 00    	sub    esp,0x368
c00158cb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00158d2:	8b 35 98 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca98
c00158d8:	88 44 24 4a          	mov    BYTE PTR [esp+0x4a],al
c00158dc:	68 14 01 00 00       	push   0x114
c00158e1:	e8 ce 9d ff ff       	call   c000f6b4 <malloc>
c00158e6:	83 c4 0c             	add    esp,0xc
c00158e9:	56                   	push   esi
c00158ea:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00158f1:	50                   	push   eax
c00158f2:	89 c3                	mov    ebx,eax
c00158f4:	e8 8f 28 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00158f9:	5f                   	pop    edi
c00158fa:	5d                   	pop    ebp
c00158fb:	6a 01                	push   0x1
c00158fd:	53                   	push   ebx
c00158fe:	e8 a3 28 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	85 c0                	test   eax,eax
c0015908:	0f 85 d5 06 00 00    	jne    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c001590e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015916:	83 ec 0c             	sub    esp,0xc
c0015919:	6a 34                	push   0x34
c001591b:	e8 94 9d ff ff       	call   c000f6b4 <malloc>
c0015920:	5e                   	pop    esi
c0015921:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015925:	89 c5                	mov    ebp,eax
c0015927:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015929:	56                   	push   esi
c001592a:	55                   	push   ebp
c001592b:	6a 00                	push   0x0
c001592d:	6a 34                	push   0x34
c001592f:	53                   	push   ebx
c0015930:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015933:	83 c4 20             	add    esp,0x20
c0015936:	85 c0                	test   eax,eax
c0015938:	0f 85 a5 06 00 00    	jne    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c001593e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0015945:	0f 85 98 06 00 00    	jne    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c001594b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001594e:	85 c0                	test   eax,eax
c0015950:	0f 84 8d 06 00 00    	je     c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015956:	31 d2                	xor    edx,edx
c0015958:	51                   	push   ecx
c0015959:	52                   	push   edx
c001595a:	50                   	push   eax
c001595b:	53                   	push   ebx
c001595c:	e8 03 29 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015961:	83 c4 10             	add    esp,0x10
c0015964:	85 c0                	test   eax,eax
c0015966:	0f 85 77 06 00 00    	jne    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c001596c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001596f:	83 ec 0c             	sub    esp,0xc
c0015972:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015976:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001597a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001597e:	0f af c2             	imul   eax,edx
c0015981:	50                   	push   eax
c0015982:	e8 2d 9d ff ff       	call   c000f6b4 <malloc>
c0015987:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015989:	89 34 24             	mov    DWORD PTR [esp],esi
c001598c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015990:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015994:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015998:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001599c:	0f af c2             	imul   eax,edx
c001599f:	99                   	cdq    
c00159a0:	52                   	push   edx
c00159a1:	50                   	push   eax
c00159a2:	53                   	push   ebx
c00159a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159a6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00159a9:	83 c4 20             	add    esp,0x20
c00159ac:	85 c0                	test   eax,eax
c00159ae:	0f 84 2f 06 00 00    	je     c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c00159b4:	52                   	push   edx
c00159b5:	31 d2                	xor    edx,edx
c00159b7:	52                   	push   edx
c00159b8:	50                   	push   eax
c00159b9:	53                   	push   ebx
c00159ba:	e8 a5 28 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00159bf:	83 c4 10             	add    esp,0x10
c00159c2:	85 c0                	test   eax,eax
c00159c4:	0f 85 19 06 00 00    	jne    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c00159ca:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00159ce:	83 ec 0c             	sub    esp,0xc
c00159d1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00159d5:	0f af c2             	imul   eax,edx
c00159d8:	50                   	push   eax
c00159d9:	e8 d6 9c ff ff       	call   c000f6b4 <malloc>
c00159de:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00159e0:	89 34 24             	mov    DWORD PTR [esp],esi
c00159e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00159e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159eb:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00159ef:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00159f3:	0f af c2             	imul   eax,edx
c00159f6:	99                   	cdq    
c00159f7:	52                   	push   edx
c00159f8:	50                   	push   eax
c00159f9:	53                   	push   ebx
c00159fa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159fd:	83 c4 20             	add    esp,0x20
c0015a00:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015a06:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015a09:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015a0d:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015a11:	73 78                	jae    c0015a8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015a13:	c1 e7 05             	shl    edi,0x5
c0015a16:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015a1a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015a1d:	75 63                	jne    c0015a82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015a1f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015a22:	31 d2                	xor    edx,edx
c0015a24:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015a27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a2b:	50                   	push   eax
c0015a2c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015a2f:	52                   	push   edx
c0015a30:	50                   	push   eax
c0015a31:	53                   	push   ebx
c0015a32:	e8 2d 28 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	85 c0                	test   eax,eax
c0015a3c:	0f 85 a1 05 00 00    	jne    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015a42:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015a49:	83 ec 0c             	sub    esp,0xc
c0015a4c:	31 d2                	xor    edx,edx
c0015a4e:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015a52:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a54:	01 c6                	add    esi,eax
c0015a56:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015a5d:	50                   	push   eax
c0015a5e:	56                   	push   esi
c0015a5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a63:	52                   	push   edx
c0015a64:	50                   	push   eax
c0015a65:	53                   	push   ebx
c0015a66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a69:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015a6c:	83 c4 1c             	add    esp,0x1c
c0015a6f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015a72:	50                   	push   eax
c0015a73:	6a 00                	push   0x0
c0015a75:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0015a79:	56                   	push   esi
c0015a7a:	e8 71 aa fe ff       	call   c00004f0 <memset>
c0015a7f:	83 c4 10             	add    esp,0x10
c0015a82:	66 ff 04 24          	inc    WORD PTR [esp]
c0015a86:	e9 7b ff ff ff       	jmp    c0015a06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015a8b:	56                   	push   esi
c0015a8c:	68 00 01 00 00       	push   0x100
c0015a91:	6a 00                	push   0x0
c0015a93:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015a97:	50                   	push   eax
c0015a98:	e8 53 aa fe ff       	call   c00004f0 <memset>
c0015a9d:	83 c4 0c             	add    esp,0xc
c0015aa0:	68 00 01 00 00       	push   0x100
c0015aa5:	6a 00                	push   0x0
c0015aa7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015aae:	50                   	push   eax
c0015aaf:	e8 3c aa fe ff       	call   c00004f0 <memset>
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015abe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ac5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015acd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015ad5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015add:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015ae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ae9:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015aed:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015af2:	0f 83 16 01 00 00    	jae    c0015c0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015af8:	6b ff 28             	imul   edi,edi,0x28
c0015afb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015aff:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015b02:	52                   	push   edx
c0015b03:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015b07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b0b:	8b 07                	mov    eax,DWORD PTR [edi]
c0015b0d:	6b d2 28             	imul   edx,edx,0x28
c0015b10:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015b14:	31 d2                	xor    edx,edx
c0015b16:	52                   	push   edx
c0015b17:	50                   	push   eax
c0015b18:	53                   	push   ebx
c0015b19:	e8 46 27 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015b1e:	83 c4 0c             	add    esp,0xc
c0015b21:	6a 20                	push   0x20
c0015b23:	6a 00                	push   0x0
c0015b25:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015b2c:	51                   	push   ecx
c0015b2d:	e8 be a9 fe ff       	call   c00004f0 <memset>
c0015b32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b34:	59                   	pop    ecx
c0015b35:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015b39:	52                   	push   edx
c0015b3a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015b41:	51                   	push   ecx
c0015b42:	6a 00                	push   0x0
c0015b44:	6a 1f                	push   0x1f
c0015b46:	53                   	push   ebx
c0015b47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b4a:	83 c4 1c             	add    esp,0x1c
c0015b4d:	6a 09                	push   0x9
c0015b4f:	68 eb 4a 02 c0       	push   0xc0024aeb
c0015b54:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015b5b:	51                   	push   ecx
c0015b5c:	e8 1f a8 fe ff       	call   c0000380 <memcmp>
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	85 c0                	test   eax,eax
c0015b66:	75 1a                	jne    c0015b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015b68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b6b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015b6e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015b72:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015b75:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015b7c:	89 c8                	mov    eax,ecx
c0015b7e:	40                   	inc    eax
c0015b7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b82:	50                   	push   eax
c0015b83:	6a 09                	push   0x9
c0015b85:	68 f5 4a 02 c0       	push   0xc0024af5
c0015b8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015b91:	50                   	push   eax
c0015b92:	e8 e9 a7 fe ff       	call   c0000380 <memcmp>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	85 c0                	test   eax,eax
c0015b9c:	75 1a                	jne    c0015bb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015b9e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ba1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015ba4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015ba8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015bab:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015bb2:	89 c8                	mov    eax,ecx
c0015bb4:	40                   	inc    eax
c0015bb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bb8:	50                   	push   eax
c0015bb9:	50                   	push   eax
c0015bba:	68 c1 4a 02 c0       	push   0xc0024ac1
c0015bbf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015bc6:	50                   	push   eax
c0015bc7:	e8 b4 ab fe ff       	call   c0000780 <strcmp>
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	85 c0                	test   eax,eax
c0015bd1:	75 0b                	jne    c0015bde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015bd3:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015bd7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015bda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bde:	50                   	push   eax
c0015bdf:	50                   	push   eax
c0015be0:	68 c9 4a 02 c0       	push   0xc0024ac9
c0015be5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015bec:	50                   	push   eax
c0015bed:	e8 8e ab fe ff       	call   c0000780 <strcmp>
c0015bf2:	83 c4 10             	add    esp,0x10
c0015bf5:	85 c0                	test   eax,eax
c0015bf7:	75 0b                	jne    c0015c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015bf9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015bfd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015c00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c04:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015c09:	e9 d7 fe ff ff       	jmp    c0015ae5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015c0e:	50                   	push   eax
c0015c0f:	31 d2                	xor    edx,edx
c0015c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c15:	52                   	push   edx
c0015c16:	50                   	push   eax
c0015c17:	53                   	push   ebx
c0015c18:	e8 47 26 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015c1d:	58                   	pop    eax
c0015c1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c22:	e8 8d 9a ff ff       	call   c000f6b4 <malloc>
c0015c27:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c29:	31 d2                	xor    edx,edx
c0015c2b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015c2f:	58                   	pop    eax
c0015c30:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015c34:	56                   	push   esi
c0015c35:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015c39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c3d:	52                   	push   edx
c0015c3e:	50                   	push   eax
c0015c3f:	53                   	push   ebx
c0015c40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c43:	83 c4 14             	add    esp,0x14
c0015c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c4a:	e8 65 9a ff ff       	call   c000f6b4 <malloc>
c0015c4f:	31 d2                	xor    edx,edx
c0015c51:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015c55:	83 c4 0c             	add    esp,0xc
c0015c58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015c5c:	52                   	push   edx
c0015c5d:	50                   	push   eax
c0015c5e:	53                   	push   ebx
c0015c5f:	e8 00 26 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015c64:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c66:	31 d2                	xor    edx,edx
c0015c68:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015c73:	52                   	push   edx
c0015c74:	50                   	push   eax
c0015c75:	53                   	push   ebx
c0015c76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c79:	83 c4 20             	add    esp,0x20
c0015c7c:	0f b6 44 24 3e       	movzx  eax,BYTE PTR [esp+0x3e]
c0015c81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c89:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015c8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c91:	39 34 24             	cmp    DWORD PTR [esp],esi
c0015c94:	0f 84 4d 03 00 00    	je     c0015fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x726>
c0015c9a:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0015ca1:	31 d2                	xor    edx,edx
c0015ca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ca7:	c1 e8 03             	shr    eax,0x3
c0015caa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015cae:	51                   	push   ecx
c0015caf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015cb3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015cb7:	52                   	push   edx
c0015cb8:	50                   	push   eax
c0015cb9:	53                   	push   ebx
c0015cba:	e8 a5 25 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015cbf:	5e                   	pop    esi
c0015cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015ccb:	e8 e4 99 ff ff       	call   c000f6b4 <malloc>
c0015cd0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015cd2:	31 d2                	xor    edx,edx
c0015cd4:	5f                   	pop    edi
c0015cd5:	89 c6                	mov    esi,eax
c0015cd7:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015cdb:	50                   	push   eax
c0015cdc:	56                   	push   esi
c0015cdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ce1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015ce8:	52                   	push   edx
c0015ce9:	50                   	push   eax
c0015cea:	53                   	push   ebx
c0015ceb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cee:	83 c4 20             	add    esp,0x20
c0015cf1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015cf9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015cfd:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0015d01:	0f 8d c7 02 00 00    	jge    c0015fce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c0015d07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d0b:	31 d2                	xor    edx,edx
c0015d0d:	8b 04 c6             	mov    eax,DWORD PTR [esi+eax*8]
c0015d10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d18:	8b 7c c6 04          	mov    edi,DWORD PTR [esi+eax*8+0x4]
c0015d1c:	89 f8                	mov    eax,edi
c0015d1e:	c1 e8 08             	shr    eax,0x8
c0015d21:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015d25:	c1 e0 04             	shl    eax,0x4
c0015d28:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0015d2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015d33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d37:	85 c0                	test   eax,eax
c0015d39:	0f 85 ca 00 00 00    	jne    c0015e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0015d3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d43:	83 ec 0c             	sub    esp,0xc
c0015d46:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015d4a:	03 08                	add    ecx,DWORD PTR [eax]
c0015d4c:	51                   	push   ecx
c0015d4d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0015d51:	e8 5e f8 ff ff       	call   c00155b4 <Thr::getAddressOfKernelSymbol(char const*)>
c0015d56:	b2 01                	mov    dl,0x1
c0015d58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015d64:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015d68:	0f 85 9b 00 00 00    	jne    c0015e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0015d6e:	88 54 24 3f          	mov    BYTE PTR [esp+0x3f],dl
c0015d72:	83 ec 0c             	sub    esp,0xc
c0015d75:	51                   	push   ecx
c0015d76:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0015d7a:	e8 a9 a8 ff ff       	call   c0010628 <KeResolveCompatibilitySymbol(char*)>
c0015d7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015d8b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015d8f:	8a 54 24 3f          	mov    dl,BYTE PTR [esp+0x3f]
c0015d93:	75 74                	jne    c0015e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0015d95:	50                   	push   eax
c0015d96:	50                   	push   eax
c0015d97:	51                   	push   ecx
c0015d98:	68 ff 4a 02 c0       	push   0xc0024aff
c0015d9d:	e8 c4 11 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015da2:	58                   	pop    eax
c0015da3:	5a                   	pop    edx
c0015da4:	68 19 4b 02 c0       	push   0xc0024b19
c0015da9:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015db0:	52                   	push   edx
c0015db1:	e8 9a a8 fe ff       	call   c0000650 <strcpy>
c0015db6:	59                   	pop    ecx
c0015db7:	58                   	pop    eax
c0015db8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015dbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015dc0:	03 01                	add    eax,DWORD PTR [ecx]
c0015dc2:	50                   	push   eax
c0015dc3:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015dca:	52                   	push   edx
c0015dcb:	e8 a0 aa fe ff       	call   c0000870 <strcat>
c0015dd0:	58                   	pop    eax
c0015dd1:	5a                   	pop    edx
c0015dd2:	68 b3 4b 02 c0       	push   0xc0024bb3
c0015dd7:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015dde:	52                   	push   edx
c0015ddf:	e8 8c aa fe ff       	call   c0000870 <strcat>
c0015de4:	83 c4 10             	add    esp,0x10
c0015de7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015dec:	0f 84 99 01 00 00    	je     c0015f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0015df2:	83 ec 0c             	sub    esp,0xc
c0015df5:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015dfc:	52                   	push   edx
c0015dfd:	e8 0e 9d ff ff       	call   c000fb10 <KePanic(char const*)>
c0015e02:	83 c4 10             	add    esp,0x10
c0015e05:	8a 54 24 3e          	mov    dl,BYTE PTR [esp+0x3e]
c0015e09:	89 f8                	mov    eax,edi
c0015e0b:	0f b6 c0             	movzx  eax,al
c0015e0e:	83 f8 01             	cmp    eax,0x1
c0015e11:	0f 85 b2 00 00 00    	jne    c0015ec9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x608>
c0015e17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e1b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015e22:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0015e26:	01 c8                	add    eax,ecx
c0015e28:	81 ff 01 01 00 00    	cmp    edi,0x101
c0015e2e:	0f 94 44 24 28       	sete   BYTE PTR [esp+0x28]
c0015e33:	81 ff 01 04 00 00    	cmp    edi,0x401
c0015e39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015e3d:	0f 94 c0             	sete   al
c0015e40:	89 c7                	mov    edi,eax
c0015e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e46:	0b 7c 24 28          	or     edi,DWORD PTR [esp+0x28]
c0015e4a:	84 d2                	test   dl,dl
c0015e4c:	89 fa                	mov    edx,edi
c0015e4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e50:	0f b6 fa             	movzx  edi,dl
c0015e53:	74 42                	je     c0015e97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d6>
c0015e55:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015e59:	85 ff                	test   edi,edi
c0015e5b:	75 15                	jne    c0015e72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b1>
c0015e5d:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c0015e61:	66 83 fa 0c          	cmp    dx,0xc
c0015e65:	76 05                	jbe    c0015e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0015e67:	ba 0c 00 00 00       	mov    edx,0xc
c0015e6c:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0015e70:	76 4c                	jbe    c0015ebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5fd>
c0015e72:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e7b:	0f 84 0a 01 00 00    	je     c0015f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0015e81:	83 ec 0c             	sub    esp,0xc
c0015e84:	68 30 4b 02 c0       	push   0xc0024b30
c0015e89:	e8 82 9c ff ff       	call   c000fb10 <KePanic(char const*)>
c0015e8e:	83 c4 10             	add    esp,0x10
c0015e91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e95:	eb 27                	jmp    c0015ebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5fd>
c0015e97:	01 c8                	add    eax,ecx
c0015e99:	85 ff                	test   edi,edi
c0015e9b:	89 c2                	mov    edx,eax
c0015e9d:	75 10                	jne    c0015eaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c0015e9f:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015ea3:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0015ea7:	77 06                	ja     c0015eaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c0015ea9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ead:	01 c2                	add    edx,eax
c0015eaf:	8d 8a 00 00 00 28    	lea    ecx,[edx+0x28000000]
c0015eb5:	81 f9 00 00 00 01    	cmp    ecx,0x1000000
c0015ebb:	0f 43 c2             	cmovae eax,edx
c0015ebe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015ec2:	89 07                	mov    DWORD PTR [edi],eax
c0015ec4:	e9 fc 00 00 00       	jmp    c0015fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015ec9:	83 f8 02             	cmp    eax,0x2
c0015ecc:	0f 85 90 00 00 00    	jne    c0015f62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a1>
c0015ed2:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015ed9:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0015edd:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0015ee1:	81 ff 01 01 00 00    	cmp    edi,0x101
c0015ee7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015eeb:	74 1f                	je     c0015f0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c0015eed:	81 ff 01 04 00 00    	cmp    edi,0x401
c0015ef3:	74 17                	je     c0015f0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c0015ef5:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015ef9:	b8 0a 00 00 00       	mov    eax,0xa
c0015efe:	83 f9 0e             	cmp    ecx,0xe
c0015f01:	77 03                	ja     c0015f06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x645>
c0015f03:	8d 41 fc             	lea    eax,[ecx-0x4]
c0015f06:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015f0a:	76 1f                	jbe    c0015f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015f0c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f11:	88 54 24 20          	mov    BYTE PTR [esp+0x20],dl
c0015f15:	74 74                	je     c0015f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0015f17:	83 ec 0c             	sub    esp,0xc
c0015f1a:	68 4c 4b 02 c0       	push   0xc0024b4c
c0015f1f:	e8 ec 9b ff ff       	call   c000fb10 <KePanic(char const*)>
c0015f24:	83 c4 10             	add    esp,0x10
c0015f27:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
c0015f2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f2f:	84 d2                	test   dl,dl
c0015f31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f33:	74 13                	je     c0015f48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x687>
c0015f35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f39:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015f40:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c0015f44:	01 c2                	add    edx,eax
c0015f46:	eb 06                	jmp    c0015f4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68d>
c0015f48:	89 c2                	mov    edx,eax
c0015f4a:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c0015f4e:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0015f52:	3d fe ff 0f 00       	cmp    eax,0xffffe
c0015f57:	0f 46 d0             	cmovbe edx,eax
c0015f5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f5e:	89 10                	mov    DWORD PTR [eax],edx
c0015f60:	eb 63                	jmp    c0015fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015f62:	57                   	push   edi
c0015f63:	57                   	push   edi
c0015f64:	50                   	push   eax
c0015f65:	68 68 4b 02 c0       	push   0xc0024b68
c0015f6a:	e8 f7 0f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015f6f:	83 c4 10             	add    esp,0x10
c0015f72:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f77:	74 12                	je     c0015f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0015f79:	83 ec 0c             	sub    esp,0xc
c0015f7c:	68 73 4b 02 c0       	push   0xc0024b73
c0015f81:	e8 8a 9b ff ff       	call   c000fb10 <KePanic(char const*)>
c0015f86:	83 c4 10             	add    esp,0x10
c0015f89:	eb 3a                	jmp    c0015fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015f8b:	83 ec 0c             	sub    esp,0xc
c0015f8e:	53                   	push   ebx
c0015f8f:	e8 70 22 ff ff       	call   c0008204 <File::close()>
c0015f94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f9c:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f9f:	e8 20 97 ff ff       	call   c000f6c4 <free>
c0015fa4:	59                   	pop    ecx
c0015fa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015fa9:	e8 16 97 ff ff       	call   c000f6c4 <free>
c0015fae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015fb1:	e8 0e 97 ff ff       	call   c000f6c4 <free>
c0015fb6:	5b                   	pop    ebx
c0015fb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fbb:	e8 04 97 ff ff       	call   c000f6c4 <free>
c0015fc0:	83 c4 10             	add    esp,0x10
c0015fc3:	eb 1e                	jmp    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015fc5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0015fc9:	e9 2b fd ff ff       	jmp    c0015cf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015fce:	83 ec 0c             	sub    esp,0xc
c0015fd1:	56                   	push   esi
c0015fd2:	e8 ed 96 ff ff       	call   c000f6c4 <free>
c0015fd7:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	e9 aa fc ff ff       	jmp    c0015c8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015fe3:	31 c0                	xor    eax,eax
c0015fe5:	eb 32                	jmp    c0016019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x758>
c0015fe7:	83 ec 0c             	sub    esp,0xc
c0015fea:	53                   	push   ebx
c0015feb:	e8 14 22 ff ff       	call   c0008204 <File::close()>
c0015ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ff2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ff5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ff8:	58                   	pop    eax
c0015ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ffd:	e8 c2 96 ff ff       	call   c000f6c4 <free>
c0016002:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016005:	e8 ba 96 ff ff       	call   c000f6c4 <free>
c001600a:	5a                   	pop    edx
c001600b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001600f:	e8 b0 96 ff ff       	call   c000f6c4 <free>
c0016014:	83 c4 10             	add    esp,0x10
c0016017:	b0 01                	mov    al,0x1
c0016019:	81 c4 5c 03 00 00    	add    esp,0x35c
c001601f:	5b                   	pop    ebx
c0016020:	5e                   	pop    esi
c0016021:	5f                   	pop    edi
c0016022:	5d                   	pop    ebp
c0016023:	c3                   	ret    

c0016024 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016024:	56                   	push   esi
c0016025:	31 d2                	xor    edx,edx
c0016027:	53                   	push   ebx
c0016028:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c001602e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016032:	39 d3                	cmp    ebx,edx
c0016034:	7e 1b                	jle    c0016051 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016036:	8b 04 95 c0 c4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3b40]
c001603d:	39 c8                	cmp    eax,ecx
c001603f:	77 0d                	ja     c001604e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016041:	8b 34 95 c0 c2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3d40]
c0016048:	01 c6                	add    esi,eax
c001604a:	39 ce                	cmp    esi,ecx
c001604c:	77 05                	ja     c0016053 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001604e:	42                   	inc    edx
c001604f:	eb e1                	jmp    c0016032 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016051:	31 c0                	xor    eax,eax
c0016053:	5b                   	pop    ebx
c0016054:	5e                   	pop    esi
c0016055:	c3                   	ret    

c0016056 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016056:	53                   	push   ebx
c0016057:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c001605d:	31 c0                	xor    eax,eax
c001605f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016063:	39 c3                	cmp    ebx,eax
c0016065:	7e 22                	jle    c0016089 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0016067:	8b 14 85 c0 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3b40]
c001606e:	39 ca                	cmp    edx,ecx
c0016070:	77 14                	ja     c0016086 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016072:	03 14 85 c0 c2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3d40]
c0016079:	39 ca                	cmp    edx,ecx
c001607b:	76 09                	jbe    c0016086 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001607d:	8b 04 85 c0 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3940]
c0016084:	eb 05                	jmp    c001608b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016086:	40                   	inc    eax
c0016087:	eb da                	jmp    c0016063 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016089:	31 c0                	xor    eax,eax
c001608b:	5b                   	pop    ebx
c001608c:	c3                   	ret    

c001608d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001608d:	53                   	push   ebx
c001608e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016092:	53                   	push   ebx
c0016093:	e8 8c ff ff ff       	call   c0016024 <Thr::getDriverBaseFromAddress(unsigned long)>
c0016098:	5a                   	pop    edx
c0016099:	31 d2                	xor    edx,edx
c001609b:	85 c0                	test   eax,eax
c001609d:	74 04                	je     c00160a3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001609f:	89 da                	mov    edx,ebx
c00160a1:	29 c2                	sub    edx,eax
c00160a3:	5b                   	pop    ebx
c00160a4:	89 d0                	mov    eax,edx
c00160a6:	c3                   	ret    

c00160a7 <Thr::loadDLL(char const*, bool)>:
c00160a7:	55                   	push   ebp
c00160a8:	57                   	push   edi
c00160a9:	56                   	push   esi
c00160aa:	53                   	push   ebx
c00160ab:	81 ec 34 01 00 00    	sub    esp,0x134
c00160b1:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00160b8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00160bf:	56                   	push   esi
c00160c0:	68 8b 4b 02 c0       	push   0xc0024b8b
c00160c5:	e8 9c 0e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00160ca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00160d1:	e8 de 95 ff ff       	call   c000f6b4 <malloc>
c00160d6:	83 c4 0c             	add    esp,0xc
c00160d9:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c00160df:	56                   	push   esi
c00160e0:	50                   	push   eax
c00160e1:	89 c3                	mov    ebx,eax
c00160e3:	e8 a0 20 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00160e8:	83 c4 10             	add    esp,0x10
c00160eb:	85 db                	test   ebx,ebx
c00160ed:	75 3c                	jne    c001612b <Thr::loadDLL(char const*, bool)+0x84>
c00160ef:	89 e8                	mov    eax,ebp
c00160f1:	84 c0                	test   al,al
c00160f3:	0f 84 02 02 00 00    	je     c00162fb <Thr::loadDLL(char const*, bool)+0x254>
c00160f9:	50                   	push   eax
c00160fa:	50                   	push   eax
c00160fb:	68 9c 4b 02 c0       	push   0xc0024b9c
c0016100:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0016104:	57                   	push   edi
c0016105:	e8 46 a5 fe ff       	call   c0000650 <strcpy>
c001610a:	58                   	pop    eax
c001610b:	5a                   	pop    edx
c001610c:	56                   	push   esi
c001610d:	57                   	push   edi
c001610e:	e8 5d a7 fe ff       	call   c0000870 <strcat>
c0016113:	59                   	pop    ecx
c0016114:	58                   	pop    eax
c0016115:	68 b3 4b 02 c0       	push   0xc0024bb3
c001611a:	57                   	push   edi
c001611b:	e8 50 a7 fe ff       	call   c0000870 <strcat>
c0016120:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016123:	e8 e8 99 ff ff       	call   c000fb10 <KePanic(char const*)>
c0016128:	83 c4 10             	add    esp,0x10
c001612b:	50                   	push   eax
c001612c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016130:	50                   	push   eax
c0016131:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016135:	50                   	push   eax
c0016136:	53                   	push   ebx
c0016137:	e8 6c 23 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001613c:	83 c4 10             	add    esp,0x10
c001613f:	85 db                	test   ebx,ebx
c0016141:	89 c7                	mov    edi,eax
c0016143:	74 0c                	je     c0016151 <Thr::loadDLL(char const*, bool)+0xaa>
c0016145:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016147:	83 ec 0c             	sub    esp,0xc
c001614a:	53                   	push   ebx
c001614b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	83 ec 0c             	sub    esp,0xc
c0016154:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0016159:	50                   	push   eax
c001615a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001615e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016162:	57                   	push   edi
c0016163:	68 b5 4b 02 c0       	push   0xc0024bb5
c0016168:	e8 f9 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001616d:	83 c4 20             	add    esp,0x20
c0016170:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016175:	75 0a                	jne    c0016181 <Thr::loadDLL(char const*, bool)+0xda>
c0016177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001617b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001617f:	75 3e                	jne    c00161bf <Thr::loadDLL(char const*, bool)+0x118>
c0016181:	89 e8                	mov    eax,ebp
c0016183:	31 db                	xor    ebx,ebx
c0016185:	84 c0                	test   al,al
c0016187:	0f 84 6e 01 00 00    	je     c00162fb <Thr::loadDLL(char const*, bool)+0x254>
c001618d:	50                   	push   eax
c001618e:	50                   	push   eax
c001618f:	68 d6 4b 02 c0       	push   0xc0024bd6
c0016194:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016198:	53                   	push   ebx
c0016199:	e8 b2 a4 fe ff       	call   c0000650 <strcpy>
c001619e:	58                   	pop    eax
c001619f:	5a                   	pop    edx
c00161a0:	56                   	push   esi
c00161a1:	53                   	push   ebx
c00161a2:	e8 c9 a6 fe ff       	call   c0000870 <strcat>
c00161a7:	59                   	pop    ecx
c00161a8:	5f                   	pop    edi
c00161a9:	68 b3 4b 02 c0       	push   0xc0024bb3
c00161ae:	53                   	push   ebx
c00161af:	e8 bc a6 fe ff       	call   c0000870 <strcat>
c00161b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161b7:	e8 54 99 ff ff       	call   c000fb10 <KePanic(char const*)>
c00161bc:	83 c4 10             	add    esp,0x10
c00161bf:	53                   	push   ebx
c00161c0:	6a 03                	push   0x3
c00161c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00161ca:	05 ff 0f 00 00       	add    eax,0xfff
c00161cf:	83 d2 00             	adc    edx,0x0
c00161d2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00161d6:	50                   	push   eax
c00161d7:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c00161dd:	e8 fa d6 ff ff       	call   c00138dc <VAS::allocatePages(int, int)>
c00161e2:	89 c3                	mov    ebx,eax
c00161e4:	58                   	pop    eax
c00161e5:	5a                   	pop    edx
c00161e6:	53                   	push   ebx
c00161e7:	68 ab 3f 02 c0       	push   0xc0023fab
c00161ec:	e8 75 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00161f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00161f4:	e8 87 a3 fe ff       	call   c0000580 <strlen>
c00161f9:	8b 3d a0 c2 02 c0    	mov    edi,DWORD PTR ds:0xc002c2a0
c00161ff:	40                   	inc    eax
c0016200:	89 04 24             	mov    DWORD PTR [esp],eax
c0016203:	e8 ac 94 ff ff       	call   c000f6b4 <malloc>
c0016208:	59                   	pop    ecx
c0016209:	89 04 bd c0 c6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3940],eax
c0016210:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c0016215:	5f                   	pop    edi
c0016216:	56                   	push   esi
c0016217:	ff 34 85 c0 c6 02 c0 	push   DWORD PTR [eax*4-0x3ffd3940]
c001621e:	e8 2d a4 fe ff       	call   c0000650 <strcpy>
c0016223:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c0016228:	89 1c 85 c0 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b40],ebx
c001622f:	8d 50 01             	lea    edx,[eax+0x1]
c0016232:	89 15 a0 c2 02 c0    	mov    DWORD PTR ds:0xc002c2a0,edx
c0016238:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001623c:	83 c4 0c             	add    esp,0xc
c001623f:	6a 01                	push   0x1
c0016241:	53                   	push   ebx
c0016242:	56                   	push   esi
c0016243:	89 14 85 c0 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3d40],edx
c001624a:	e8 72 f6 ff ff       	call   c00158c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001624f:	83 c4 10             	add    esp,0x10
c0016252:	89 c7                	mov    edi,eax
c0016254:	89 f8                	mov    eax,edi
c0016256:	83 f0 01             	xor    eax,0x1
c0016259:	84 c0                	test   al,al
c001625b:	74 18                	je     c0016275 <Thr::loadDLL(char const*, bool)+0x1ce>
c001625d:	89 e8                	mov    eax,ebp
c001625f:	84 c0                	test   al,al
c0016261:	74 12                	je     c0016275 <Thr::loadDLL(char const*, bool)+0x1ce>
c0016263:	83 ec 0c             	sub    esp,0xc
c0016266:	68 ef 4b 02 c0       	push   0xc0024bef
c001626b:	e8 a0 98 ff ff       	call   c000fb10 <KePanic(char const*)>
c0016270:	83 c4 10             	add    esp,0x10
c0016273:	eb 06                	jmp    c001627b <Thr::loadDLL(char const*, bool)+0x1d4>
c0016275:	89 f8                	mov    eax,edi
c0016277:	84 c0                	test   al,al
c0016279:	75 10                	jne    c001628b <Thr::loadDLL(char const*, bool)+0x1e4>
c001627b:	83 ec 0c             	sub    esp,0xc
c001627e:	68 0e 4c 02 c0       	push   0xc0024c0e
c0016283:	e8 88 98 ff ff       	call   c000fb10 <KePanic(char const*)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	31 f6                	xor    esi,esi
c001628d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016291:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016295:	05 ff 0f 00 00       	add    eax,0xfff
c001629a:	83 d2 00             	adc    edx,0x0
c001629d:	0f ac d0 0c          	shrd   eax,edx,0xc
c00162a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00162a5:	c1 ea 0c             	shr    edx,0xc
c00162a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162ac:	ba 00 00 00 00       	mov    edx,0x0
c00162b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00162b5:	89 d0                	mov    eax,edx
c00162b7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00162bb:	73 32                	jae    c00162ef <Thr::loadDLL(char const*, bool)+0x248>
c00162bd:	50                   	push   eax
c00162be:	50                   	push   eax
c00162bf:	89 f0                	mov    eax,esi
c00162c1:	c1 e0 0c             	shl    eax,0xc
c00162c4:	01 d8                	add    eax,ebx
c00162c6:	50                   	push   eax
c00162c7:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c00162cd:	e8 08 d1 ff ff       	call   c00133da <VAS::getPageTableEntry(unsigned long)>
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00162d7:	a8 60                	test   al,0x60
c00162d9:	75 11                	jne    c00162ec <Thr::loadDLL(char const*, bool)+0x245>
c00162db:	83 ec 0c             	sub    esp,0xc
c00162de:	25 00 f0 ff ff       	and    eax,0xfffff000
c00162e3:	50                   	push   eax
c00162e4:	e8 b8 99 ff ff       	call   c000fca1 <Phys::freePage(unsigned long)>
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	46                   	inc    esi
c00162ed:	eb 9e                	jmp    c001628d <Thr::loadDLL(char const*, bool)+0x1e6>
c00162ef:	89 f8                	mov    eax,edi
c00162f1:	84 c0                	test   al,al
c00162f3:	b8 00 00 00 00       	mov    eax,0x0
c00162f8:	0f 44 d8             	cmove  ebx,eax
c00162fb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016301:	89 d8                	mov    eax,ebx
c0016303:	5b                   	pop    ebx
c0016304:	5e                   	pop    esi
c0016305:	5f                   	pop    edi
c0016306:	5d                   	pop    ebp
c0016307:	c3                   	ret    

c0016308 <Thr::executeDLL(unsigned long, void*)>:
c0016308:	56                   	push   esi
c0016309:	53                   	push   ebx
c001630a:	52                   	push   edx
c001630b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001630f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016313:	85 db                	test   ebx,ebx
c0016315:	75 10                	jne    c0016327 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016317:	83 ec 0c             	sub    esp,0xc
c001631a:	68 2a 4c 02 c0       	push   0xc0024c2a
c001631f:	e8 ec 97 ff ff       	call   c000fb10 <KePanic(char const*)>
c0016324:	83 c4 10             	add    esp,0x10
c0016327:	50                   	push   eax
c0016328:	50                   	push   eax
c0016329:	53                   	push   ebx
c001632a:	68 54 4c 02 c0       	push   0xc0024c54
c001632f:	e8 32 0c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016334:	89 d8                	mov    eax,ebx
c0016336:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001633a:	83 c4 14             	add    esp,0x14
c001633d:	5b                   	pop    ebx
c001633e:	5e                   	pop    esi
c001633f:	ff e0                	jmp    eax

c0016341 <KeProcessExec(Process*, char const*)>:
c0016341:	56                   	push   esi
c0016342:	53                   	push   ebx
c0016343:	83 ec 04             	sub    esp,0x4
c0016346:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001634a:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016350:	85 f6                	test   esi,esi
c0016352:	74 16                	je     c001636a <KeProcessExec(Process*, char const*)+0x29>
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	56                   	push   esi
c0016358:	e8 0f d3 ff ff       	call   c001366c <VAS::~VAS()>
c001635d:	58                   	pop    eax
c001635e:	5a                   	pop    edx
c001635f:	6a 14                	push   0x14
c0016361:	56                   	push   esi
c0016362:	e8 55 6f ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	83 ec 0c             	sub    esp,0xc
c001636d:	6a 14                	push   0x14
c001636f:	e8 40 93 ff ff       	call   c000f6b4 <malloc>
c0016374:	89 c6                	mov    esi,eax
c0016376:	58                   	pop    eax
c0016377:	5a                   	pop    edx
c0016378:	6a 00                	push   0x0
c001637a:	56                   	push   esi
c001637b:	e8 98 d7 ff ff       	call   c0013b18 <VAS::VAS(bool)>
c0016380:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016386:	59                   	pop    ecx
c0016387:	5e                   	pop    esi
c0016388:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001638c:	50                   	push   eax
c001638d:	53                   	push   ebx
c001638e:	e8 6d ef ff ff       	call   c0015300 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016393:	83 c4 14             	add    esp,0x14
c0016396:	31 c0                	xor    eax,eax
c0016398:	5b                   	pop    ebx
c0016399:	5e                   	pop    esi
c001639a:	c3                   	ret    
c001639b:	90                   	nop

c001639c <userModeEntryPoint(void*)>:
c001639c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00163a4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00163a9:	85 c0                	test   eax,eax
c00163ab:	75 03                	jne    c00163b0 <userModeEntryPoint(void*)+0x14>
c00163ad:	fb                   	sti    
c00163ae:	66 90                	xchg   ax,ax
c00163b0:	fb                   	sti    
c00163b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163b9:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00163bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163c3:	e9 77 9e fe ff       	jmp    c000023f <goToUsermode>

c00163c8 <changeTSS>:
c00163c8:	83 ec 14             	sub    esp,0x14
c00163cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00163d3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00163d8:	c1 e2 15             	shl    edx,0x15
c00163db:	29 d0                	sub    eax,edx
c00163dd:	50                   	push   eax
c00163de:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c00163e3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00163e9:	05 68 11 00 00       	add    eax,0x1168
c00163ee:	50                   	push   eax
c00163ef:	e8 c8 c5 ff ff       	call   c00129bc <TSS::setESP(unsigned long)>
c00163f4:	83 c4 1c             	add    esp,0x1c
c00163f7:	c3                   	ret    

c00163f8 <switchToThread(ThreadControlBlock*)>:
c00163f8:	57                   	push   edi
c00163f9:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c00163ff:	56                   	push   esi
c0016400:	53                   	push   ebx
c0016401:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016405:	85 c9                	test   ecx,ecx
c0016407:	0f 85 9b 00 00 00    	jne    c00164a8 <switchToThread(ThreadControlBlock*)+0xb0>
c001640d:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016411:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016417:	0f 84 87 00 00 00    	je     c00164a4 <switchToThread(ThreadControlBlock*)+0xac>
c001641d:	b8 00 04 00 00       	mov    eax,0x400
c0016422:	29 d0                	sub    eax,edx
c0016424:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016427:	d1 f8                	sar    eax,1
c0016429:	01 d0                	add    eax,edx
c001642b:	90                   	nop
c001642c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001642f:	e8 b3 3e 00 00       	call   c001a2e7 <HalQueryPerformanceCounter()>
c0016434:	a3 b0 ca 02 c0       	mov    ds:0xc002cab0,eax
c0016439:	89 c6                	mov    esi,eax
c001643b:	89 d7                	mov    edi,edx
c001643d:	2b 35 a0 ca 02 c0    	sub    esi,DWORD PTR ds:0xc002caa0
c0016443:	a3 a0 ca 02 c0       	mov    ds:0xc002caa0,eax
c0016448:	1b 3d a4 ca 02 c0    	sbb    edi,DWORD PTR ds:0xc002caa4
c001644e:	89 35 a8 ca 02 c0    	mov    DWORD PTR ds:0xc002caa8,esi
c0016454:	89 15 b4 ca 02 c0    	mov    DWORD PTR ds:0xc002cab4,edx
c001645a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016460:	89 15 a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,edx
c0016466:	89 3d ac ca 02 c0    	mov    DWORD PTR ds:0xc002caac,edi
c001646c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001646f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016472:	01 c6                	add    esi,eax
c0016474:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016477:	11 d7                	adc    edi,edx
c0016479:	83 ec 0c             	sub    esp,0xc
c001647c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001647f:	53                   	push   ebx
c0016480:	e8 f2 9d fe ff       	call   c0000277 <switchToThreadASM>
c0016485:	0f 20 c0             	mov    eax,cr0
c0016488:	83 c8 08             	or     eax,0x8
c001648b:	0f 22 c0             	mov    cr0,eax
c001648e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016493:	83 c4 10             	add    esp,0x10
c0016496:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001649a:	5b                   	pop    ebx
c001649b:	5e                   	pop    esi
c001649c:	5f                   	pop    edi
c001649d:	e9 e2 ea ff ff       	jmp    c0014f84 <KeCheckAlarm(ThreadControlBlock*)>
c00164a2:	66 90                	xchg   ax,ax
c00164a4:	31 c0                	xor    eax,eax
c00164a6:	eb 84                	jmp    c001642c <switchToThread(ThreadControlBlock*)+0x34>
c00164a8:	5b                   	pop    ebx
c00164a9:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c00164b3:	5e                   	pop    esi
c00164b4:	5f                   	pop    edi
c00164b5:	c3                   	ret    
c00164b6:	66 90                	xchg   ax,ax

c00164b8 <Process::addArgs(char**)>:
c00164b8:	57                   	push   edi
c00164b9:	56                   	push   esi
c00164ba:	53                   	push   ebx
c00164bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00164bf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00164c3:	85 f6                	test   esi,esi
c00164c5:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c00164cf:	74 4f                	je     c0016520 <Process::addArgs(char**)+0x68>
c00164d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00164d3:	85 c0                	test   eax,eax
c00164d5:	74 49                	je     c0016520 <Process::addArgs(char**)+0x68>
c00164d7:	31 db                	xor    ebx,ebx
c00164d9:	8d 76 00             	lea    esi,[esi+0x0]
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	50                   	push   eax
c00164e0:	e8 9b a0 fe ff       	call   c0000580 <strlen>
c00164e5:	83 c0 01             	add    eax,0x1
c00164e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00164eb:	e8 c4 91 ff ff       	call   c000f6b4 <malloc>
c00164f0:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c00164f7:	5a                   	pop    edx
c00164f8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00164fb:	83 c3 01             	add    ebx,0x1
c00164fe:	59                   	pop    ecx
c00164ff:	52                   	push   edx
c0016500:	50                   	push   eax
c0016501:	e8 4a a1 fe ff       	call   c0000650 <strcpy>
c0016506:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c001650c:	83 c4 10             	add    esp,0x10
c001650f:	83 c1 01             	add    ecx,0x1
c0016512:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c0016518:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001651b:	85 c0                	test   eax,eax
c001651d:	75 bd                	jne    c00164dc <Process::addArgs(char**)+0x24>
c001651f:	90                   	nop
c0016520:	5b                   	pop    ebx
c0016521:	5e                   	pop    esi
c0016522:	5f                   	pop    edi
c0016523:	c3                   	ret    

c0016524 <Process::Process(char const*, Process*, char**)>:
c0016524:	56                   	push   esi
c0016525:	53                   	push   ebx
c0016526:	83 ec 14             	sub    esp,0x14
c0016529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001652d:	05 0c 02 00 00       	add    eax,0x20c
c0016532:	bb 07 00 00 00       	mov    ebx,0x7
c0016537:	89 c6                	mov    esi,eax
c0016539:	8d 76 00             	lea    esi,[esi+0x0]
c001653c:	85 db                	test   ebx,ebx
c001653e:	78 14                	js     c0016554 <Process::Process(char const*, Process*, char**)+0x30>
c0016540:	83 ec 0c             	sub    esp,0xc
c0016543:	56                   	push   esi
c0016544:	e8 17 bc 00 00       	call   c0022160 <ThreadControlBlock::ThreadControlBlock()>
c0016549:	83 c4 10             	add    esp,0x10
c001654c:	83 c6 73             	add    esi,0x73
c001654f:	83 eb 01             	sub    ebx,0x1
c0016552:	eb e8                	jmp    c001653c <Process::Process(char const*, Process*, char**)+0x18>
c0016554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016558:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001655f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016563:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001656a:	83 ec 0c             	sub    esp,0xc
c001656d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016571:	e8 6c 7f ff ff       	call   c000e4e2 <KeNewProcessEnv(Process*)>
c0016576:	83 c4 10             	add    esp,0x10
c0016579:	89 c2                	mov    edx,eax
c001657b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016589:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016592:	a1 7c 68 02 c0       	mov    eax,ds:0xc002687c
c0016597:	8d 50 01             	lea    edx,[eax+0x1]
c001659a:	89 15 7c 68 02 c0    	mov    DWORD PTR ds:0xc002687c,edx
c00165a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00165a4:	89 02                	mov    DWORD PTR [edx],eax
c00165a6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00165ae:	83 ec 0c             	sub    esp,0xc
c00165b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00165b5:	e8 fa 90 ff ff       	call   c000f6b4 <malloc>
c00165ba:	83 c4 10             	add    esp,0x10
c00165bd:	89 c3                	mov    ebx,eax
c00165bf:	83 ec 08             	sub    esp,0x8
c00165c2:	6a 00                	push   0x0
c00165c4:	53                   	push   ebx
c00165c5:	e8 4e d5 ff ff       	call   c0013b18 <VAS::VAS(bool)>
c00165ca:	83 c4 10             	add    esp,0x10
c00165cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d1:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00165d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165db:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00165e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165ed:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00165f3:	e8 23 a7 ff ff       	call   c0010d1b <KeInitSignals()>
c00165f8:	89 c2                	mov    edx,eax
c00165fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fe:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016608:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001660e:	85 c0                	test   eax,eax
c0016610:	74 42                	je     c0016654 <Process::Process(char const*, Process*, char**)+0x130>
c0016612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016616:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001661c:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016626:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c001662c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016630:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016636:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001663c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016640:	05 0c 01 00 00       	add    eax,0x10c
c0016645:	83 ec 08             	sub    esp,0x8
c0016648:	52                   	push   edx
c0016649:	50                   	push   eax
c001664a:	e8 01 a0 fe ff       	call   c0000650 <strcpy>
c001664f:	83 c4 10             	add    esp,0x10
c0016652:	eb 7c                	jmp    c00166d0 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016654:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016663:	e8 4c 90 ff ff       	call   c000f6b4 <malloc>
c0016668:	83 c4 10             	add    esp,0x10
c001666b:	89 c3                	mov    ebx,eax
c001666d:	83 ec 08             	sub    esp,0x8
c0016670:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016674:	53                   	push   ebx
c0016675:	e8 62 c0 ff ff       	call   c00126dc <VgaText::VgaText(char const*)>
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016681:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016691:	83 ec 0c             	sub    esp,0xc
c0016694:	50                   	push   eax
c0016695:	e8 a8 b8 ff ff       	call   c0011f42 <addToTerminalCycle(VgaText*)>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00166a7:	83 ec 0c             	sub    esp,0xc
c00166aa:	50                   	push   eax
c00166ab:	e8 03 bb ff ff       	call   c00121b3 <setActiveTerminal(VgaText*)>
c00166b0:	83 c4 10             	add    esp,0x10
c00166b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b7:	05 0c 01 00 00       	add    eax,0x10c
c00166bc:	83 ec 08             	sub    esp,0x8
c00166bf:	68 73 4c 02 c0       	push   0xc0024c73
c00166c4:	50                   	push   eax
c00166c5:	e8 86 9f fe ff       	call   c0000650 <strcpy>
c00166ca:	83 c4 10             	add    esp,0x10
c00166cd:	8d 76 00             	lea    esi,[esi+0x0]
c00166d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d4:	83 c0 0c             	add    eax,0xc
c00166d7:	83 ec 08             	sub    esp,0x8
c00166da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166de:	50                   	push   eax
c00166df:	e8 6c 9f fe ff       	call   c0000650 <strcpy>
c00166e4:	83 c4 10             	add    esp,0x10
c00166e7:	83 ec 08             	sub    esp,0x8
c00166ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166f2:	e8 c1 fd ff ff       	call   c00164b8 <Process::addArgs(char**)>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166fe:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016704:	83 e2 7f             	and    edx,0x7f
c0016707:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c001670d:	83 ec 08             	sub    esp,0x8
c0016710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016718:	e8 e3 eb ff ff       	call   c0015300 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016724:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016728:	83 f0 01             	xor    eax,0x1
c001672b:	88 c2                	mov    dl,al
c001672d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016731:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673b:	8b 10                	mov    edx,DWORD PTR [eax]
c001673d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016742:	52                   	push   edx
c0016743:	50                   	push   eax
c0016744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016748:	68 cc 4c 02 c0       	push   0xc0024ccc
c001674d:	e8 14 08 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016752:	83 c4 10             	add    esp,0x10
c0016755:	90                   	nop
c0016756:	83 c4 14             	add    esp,0x14
c0016759:	5b                   	pop    ebx
c001675a:	5e                   	pop    esi
c001675b:	c3                   	ret    

c001675c <Process::Process(bool, char const*, Process*, char**)>:
c001675c:	56                   	push   esi
c001675d:	53                   	push   ebx
c001675e:	83 ec 24             	sub    esp,0x24
c0016761:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016765:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001676d:	05 0c 02 00 00       	add    eax,0x20c
c0016772:	bb 07 00 00 00       	mov    ebx,0x7
c0016777:	89 c6                	mov    esi,eax
c0016779:	8d 76 00             	lea    esi,[esi+0x0]
c001677c:	85 db                	test   ebx,ebx
c001677e:	78 14                	js     c0016794 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016780:	83 ec 0c             	sub    esp,0xc
c0016783:	56                   	push   esi
c0016784:	e8 d7 b9 00 00       	call   c0022160 <ThreadControlBlock::ThreadControlBlock()>
c0016789:	83 c4 10             	add    esp,0x10
c001678c:	83 c6 73             	add    esi,0x73
c001678f:	83 eb 01             	sub    ebx,0x1
c0016792:	eb e8                	jmp    c001677c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016798:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001679f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167a3:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c00167aa:	83 ec 0c             	sub    esp,0xc
c00167ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00167b1:	e8 2c 7d ff ff       	call   c000e4e2 <KeNewProcessEnv(Process*)>
c00167b6:	83 c4 10             	add    esp,0x10
c00167b9:	89 c2                	mov    edx,eax
c00167bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167bf:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00167c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167c9:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00167d2:	a1 7c 68 02 c0       	mov    eax,ds:0xc002687c
c00167d7:	8d 50 01             	lea    edx,[eax+0x1]
c00167da:	89 15 7c 68 02 c0    	mov    DWORD PTR ds:0xc002687c,edx
c00167e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00167e4:	89 02                	mov    DWORD PTR [edx],eax
c00167e6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00167f5:	e8 ba 8e ff ff       	call   c000f6b4 <malloc>
c00167fa:	83 c4 10             	add    esp,0x10
c00167fd:	89 c3                	mov    ebx,eax
c00167ff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016804:	83 ec 08             	sub    esp,0x8
c0016807:	50                   	push   eax
c0016808:	53                   	push   ebx
c0016809:	e8 0a d3 ff ff       	call   c0013b18 <VAS::VAS(bool)>
c001680e:	83 c4 10             	add    esp,0x10
c0016811:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016815:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c001681b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001681f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001682d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016831:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016837:	e8 df a4 ff ff       	call   c0010d1b <KeInitSignals()>
c001683c:	89 c2                	mov    edx,eax
c001683e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016842:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016848:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001684c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016852:	85 c0                	test   eax,eax
c0016854:	74 42                	je     c0016898 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016856:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001685a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016860:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001686a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016870:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016874:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001687a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016884:	05 0c 01 00 00       	add    eax,0x10c
c0016889:	83 ec 08             	sub    esp,0x8
c001688c:	52                   	push   edx
c001688d:	50                   	push   eax
c001688e:	e8 bd 9d fe ff       	call   c0000650 <strcpy>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	eb 7c                	jmp    c0016914 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016898:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00168a0:	83 ec 0c             	sub    esp,0xc
c00168a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00168a7:	e8 08 8e ff ff       	call   c000f6b4 <malloc>
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	89 c3                	mov    ebx,eax
c00168b1:	83 ec 08             	sub    esp,0x8
c00168b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168b8:	53                   	push   ebx
c00168b9:	e8 1e be ff ff       	call   c00126dc <VgaText::VgaText(char const*)>
c00168be:	83 c4 10             	add    esp,0x10
c00168c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168c5:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00168cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168cf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00168d5:	83 ec 0c             	sub    esp,0xc
c00168d8:	50                   	push   eax
c00168d9:	e8 64 b6 ff ff       	call   c0011f42 <addToTerminalCycle(VgaText*)>
c00168de:	83 c4 10             	add    esp,0x10
c00168e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168e5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00168eb:	83 ec 0c             	sub    esp,0xc
c00168ee:	50                   	push   eax
c00168ef:	e8 bf b8 ff ff       	call   c00121b3 <setActiveTerminal(VgaText*)>
c00168f4:	83 c4 10             	add    esp,0x10
c00168f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168fb:	05 0c 01 00 00       	add    eax,0x10c
c0016900:	83 ec 08             	sub    esp,0x8
c0016903:	68 73 4c 02 c0       	push   0xc0024c73
c0016908:	50                   	push   eax
c0016909:	e8 42 9d fe ff       	call   c0000650 <strcpy>
c001690e:	83 c4 10             	add    esp,0x10
c0016911:	8d 76 00             	lea    esi,[esi+0x0]
c0016914:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016918:	83 c0 0c             	add    eax,0xc
c001691b:	83 ec 08             	sub    esp,0x8
c001691e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016922:	50                   	push   eax
c0016923:	e8 28 9d fe ff       	call   c0000650 <strcpy>
c0016928:	83 c4 10             	add    esp,0x10
c001692b:	83 ec 08             	sub    esp,0x8
c001692e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016932:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016936:	e8 7d fb ff ff       	call   c00164b8 <Process::addArgs(char**)>
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	90                   	nop
c001693f:	83 c4 24             	add    esp,0x24
c0016942:	5b                   	pop    ebx
c0016943:	5e                   	pop    esi
c0016944:	c3                   	ret    
c0016945:	8d 76 00             	lea    esi,[esi+0x0]

c0016948 <taskStartupFunction>:
c0016948:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001694d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016950:	c3                   	ret    
c0016951:	8d 76 00             	lea    esi,[esi+0x0]

c0016954 <KeDisablePreemption()>:
c0016954:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016959:	85 c0                	test   eax,eax
c001695b:	75 13                	jne    c0016970 <KeDisablePreemption()+0x1c>
c001695d:	8a 15 0c c1 02 c0    	mov    dl,BYTE PTR ds:0xc002c10c
c0016963:	c6 05 0c c1 02 c0 00 	mov    BYTE PTR ds:0xc002c10c,0x0
c001696a:	88 15 48 ca 02 c0    	mov    BYTE PTR ds:0xc002ca48,dl
c0016970:	83 c0 01             	add    eax,0x1
c0016973:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016978:	c3                   	ret    
c0016979:	8d 76 00             	lea    esi,[esi+0x0]

c001697c <KeRestorePreemption()>:
c001697c:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016981:	83 e8 01             	sub    eax,0x1
c0016984:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016989:	75 0d                	jne    c0016998 <KeRestorePreemption()+0x1c>
c001698b:	a0 48 ca 02 c0       	mov    al,ds:0xc002ca48
c0016990:	a2 0c c1 02 c0       	mov    ds:0xc002c10c,al
c0016995:	8d 76 00             	lea    esi,[esi+0x0]
c0016998:	c3                   	ret    
c0016999:	90                   	nop
c001699a:	66 90                	xchg   ax,ax

c001699c <Process::createThread(void (*)(void*), void*, int)>:
c001699c:	55                   	push   ebp
c001699d:	31 c9                	xor    ecx,ecx
c001699f:	57                   	push   edi
c00169a0:	56                   	push   esi
c00169a1:	53                   	push   ebx
c00169a2:	83 ec 0c             	sub    esp,0xc
c00169a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00169a9:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c00169b0:	89 f2                	mov    edx,esi
c00169b2:	66 90                	xchg   ax,ax
c00169b4:	0f b7 c2             	movzx  eax,dx
c00169b7:	80 e2 01             	and    dl,0x1
c00169ba:	74 18                	je     c00169d4 <Process::createThread(void (*)(void*), void*, int)+0x38>
c00169bc:	d1 f8                	sar    eax,1
c00169be:	83 c1 01             	add    ecx,0x1
c00169c1:	83 f9 10             	cmp    ecx,0x10
c00169c4:	89 c2                	mov    edx,eax
c00169c6:	75 ec                	jne    c00169b4 <Process::createThread(void (*)(void*), void*, int)+0x18>
c00169c8:	83 c4 0c             	add    esp,0xc
c00169cb:	31 db                	xor    ebx,ebx
c00169cd:	89 d8                	mov    eax,ebx
c00169cf:	5b                   	pop    ebx
c00169d0:	5e                   	pop    esi
c00169d1:	5f                   	pop    edi
c00169d2:	5d                   	pop    ebp
c00169d3:	c3                   	ret    
c00169d4:	b8 01 00 00 00       	mov    eax,0x1
c00169d9:	d3 e0                	shl    eax,cl
c00169db:	09 c6                	or     esi,eax
c00169dd:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00169e4:	6b c1 73             	imul   eax,ecx,0x73
c00169e7:	01 d8                	add    eax,ebx
c00169e9:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00169f0:	75 0a                	jne    c00169fc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00169f2:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00169fc:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016a02:	6b f9 73             	imul   edi,ecx,0x73
c0016a05:	83 ec 0c             	sub    esp,0xc
c0016a08:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016a0b:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016a0e:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016a14:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016a1a:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016a20:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016a27:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016a31:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016a37:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016a3b:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016a45:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016a4c:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016a53:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016a59:	89 ca                	mov    edx,ecx
c0016a5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016a5f:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016a66:	f7 da                	neg    edx
c0016a68:	c1 e2 15             	shl    edx,0x15
c0016a6b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016a71:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016a77:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016a7b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016a85:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016a8b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016a95:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016a9b:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016aa1:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016aab:	83 e2 80             	and    edx,0xffffff80
c0016aae:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016ab4:	68 00 01 00 00       	push   0x100
c0016ab9:	e8 f6 8b ff ff       	call   c000f6b4 <malloc>
c0016abe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016ac1:	58                   	pop    eax
c0016ac2:	5a                   	pop    edx
c0016ac3:	53                   	push   ebx
c0016ac4:	68 8c ca 02 c0       	push   0xc002ca8c
c0016ac9:	e8 3e b2 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ace:	83 c4 10             	add    esp,0x10
c0016ad1:	89 d8                	mov    eax,ebx
c0016ad3:	83 c4 0c             	add    esp,0xc
c0016ad6:	5b                   	pop    ebx
c0016ad7:	5e                   	pop    esi
c0016ad8:	5f                   	pop    edi
c0016ad9:	5d                   	pop    ebp
c0016ada:	c3                   	ret    
c0016adb:	90                   	nop

c0016adc <Process::createUserThread()>:
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	68 80 00 00 00       	push   0x80
c0016ae4:	6a 00                	push   0x0
c0016ae6:	68 9c 63 01 c0       	push   0xc001639c
c0016aeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016aef:	50                   	push   eax
c0016af0:	e8 a7 fe ff ff       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c0016af5:	83 c4 1c             	add    esp,0x1c
c0016af8:	c3                   	ret    
c0016af9:	8d 76 00             	lea    esi,[esi+0x0]

c0016afc <setupMultitasking(void (*)())>:
c0016afc:	56                   	push   esi
c0016afd:	53                   	push   ebx
c0016afe:	83 ec 04             	sub    esp,0x4
c0016b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b05:	eb 11                	jmp    c0016b18 <setupMultitasking(void (*)())+0x1c>
c0016b07:	90                   	nop
c0016b08:	83 ec 0c             	sub    esp,0xc
c0016b0b:	68 8c ca 02 c0       	push   0xc002ca8c
c0016b10:	e8 3b b1 00 00       	call   c0021c50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016b15:	83 c4 10             	add    esp,0x10
c0016b18:	83 ec 0c             	sub    esp,0xc
c0016b1b:	68 8c ca 02 c0       	push   0xc002ca8c
c0016b20:	e8 07 b1 00 00       	call   c0021c2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016b25:	83 c4 10             	add    esp,0x10
c0016b28:	84 c0                	test   al,al
c0016b2a:	74 dc                	je     c0016b08 <setupMultitasking(void (*)())+0xc>
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	68 c4 07 00 00       	push   0x7c4
c0016b34:	e8 7b 8b ff ff       	call   c000f6b4 <malloc>
c0016b39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016b40:	6a 00                	push   0x0
c0016b42:	68 77 4c 02 c0       	push   0xc0024c77
c0016b47:	6a 01                	push   0x1
c0016b49:	50                   	push   eax
c0016b4a:	89 c3                	mov    ebx,eax
c0016b4c:	e8 0b fc ff ff       	call   c001675c <Process::Process(bool, char const*, Process*, char**)>
c0016b51:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016b57:	83 c4 14             	add    esp,0x14
c0016b5a:	89 1d 98 ca 02 c0    	mov    DWORD PTR ds:0xc002ca98,ebx
c0016b60:	50                   	push   eax
c0016b61:	e8 4d b6 ff ff       	call   c00121b3 <setActiveTerminal(VgaText*)>
c0016b66:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016b6d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016b77:	83 c8 01             	or     eax,0x1
c0016b7a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016b81:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016b87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016b8a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016b94:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016b9a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016ba4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016baa:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016bb4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016bbe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016bc4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016bca:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016bd4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016bde:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016be5:	e8 ca 8a ff ff       	call   c000f6b4 <malloc>
c0016bea:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016bf4:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016bfb:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016c02:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016c09:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016c10:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016c16:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016c1c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016c22:	5a                   	pop    edx
c0016c23:	59                   	pop    ecx
c0016c24:	68 73 4c 02 c0       	push   0xc0024c73
c0016c29:	50                   	push   eax
c0016c2a:	e8 21 9a fe ff       	call   c0000650 <strcpy>
c0016c2f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016c36:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016c3a:	83 c4 14             	add    esp,0x14
c0016c3d:	5b                   	pop    ebx
c0016c3e:	5e                   	pop    esi
c0016c3f:	e9 25 96 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016c44 <schedule()>:
c0016c44:	8b 15 6c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca6c
c0016c4a:	85 d2                	test   edx,edx
c0016c4c:	74 0e                	je     c0016c5c <schedule()+0x18>
c0016c4e:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c0016c58:	c3                   	ret    
c0016c59:	8d 76 00             	lea    esi,[esi+0x0]
c0016c5c:	53                   	push   ebx
c0016c5d:	83 ec 14             	sub    esp,0x14
c0016c60:	68 8c ca 02 c0       	push   0xc002ca8c
c0016c65:	e8 c2 af 00 00       	call   c0021c2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c6a:	83 c4 10             	add    esp,0x10
c0016c6d:	84 c0                	test   al,al
c0016c6f:	75 3f                	jne    c0016cb0 <schedule()+0x6c>
c0016c71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c76:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016c79:	83 fa 01             	cmp    edx,0x1
c0016c7c:	74 3a                	je     c0016cb8 <schedule()+0x74>
c0016c7e:	66 90                	xchg   ax,ax
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	68 8c ca 02 c0       	push   0xc002ca8c
c0016c88:	e8 bb af 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c8d:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0016c94:	89 c3                	mov    ebx,eax
c0016c96:	e8 b5 af 00 00       	call   c0021c50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c9b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016ca2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ca5:	e8 4e f7 ff ff       	call   c00163f8 <switchToThread(ThreadControlBlock*)>
c0016caa:	83 c4 10             	add    esp,0x10
c0016cad:	8d 76 00             	lea    esi,[esi+0x0]
c0016cb0:	83 c4 08             	add    esp,0x8
c0016cb3:	5b                   	pop    ebx
c0016cb4:	c3                   	ret    
c0016cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cb8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016cbf:	83 ec 08             	sub    esp,0x8
c0016cc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc7:	50                   	push   eax
c0016cc8:	68 8c ca 02 c0       	push   0xc002ca8c
c0016ccd:	e8 3a b0 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	eb a9                	jmp    c0016c80 <schedule()+0x3c>
c0016cd7:	90                   	nop

c0016cd8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016cd8:	83 ec 0c             	sub    esp,0xc
c0016cdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ce4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016ce7:	e8 58 ff ff ff       	call   c0016c44 <schedule()>
c0016cec:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016cf4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016cf9:	85 c0                	test   eax,eax
c0016cfb:	75 03                	jne    c0016d00 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016cfd:	fb                   	sti    
c0016cfe:	66 90                	xchg   ax,ax
c0016d00:	83 c4 0c             	add    esp,0xc
c0016d03:	c3                   	ret    

c0016d04 <blockTask(TaskState)>:
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	fa                   	cli    
c0016d08:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d11:	83 c0 01             	add    eax,0x1
c0016d14:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0016d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016d21:	e8 1e ff ff ff       	call   c0016c44 <schedule()>
c0016d26:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016d2e:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016d34:	85 d2                	test   edx,edx
c0016d36:	75 04                	jne    c0016d3c <blockTask(TaskState)+0x38>
c0016d38:	fb                   	sti    
c0016d39:	8d 76 00             	lea    esi,[esi+0x0]
c0016d3c:	83 c4 0c             	add    esp,0xc
c0016d3f:	c3                   	ret    

c0016d40 <waitTask(int, int*, int)>:
c0016d40:	83 ec 18             	sub    esp,0x18
c0016d43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016d4c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016d4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d58:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016d5b:	6a 07                	push   0x7
c0016d5d:	e8 a2 ff ff ff       	call   c0016d04 <blockTask(TaskState)>
c0016d62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016d6d:	85 d2                	test   edx,edx
c0016d6f:	74 0b                	je     c0016d7c <waitTask(int, int*, int)+0x3c>
c0016d71:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016d74:	89 02                	mov    DWORD PTR [edx],eax
c0016d76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d7b:	90                   	nop
c0016d7c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016d7f:	83 c4 0c             	add    esp,0xc
c0016d82:	c3                   	ret    
c0016d83:	90                   	nop

c0016d84 <milliTenthSleepUntil(unsigned long long)>:
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d8f:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0016d95:	89 d1                	mov    ecx,edx
c0016d97:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0016d9d:	73 05                	jae    c0016da4 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016d9f:	90                   	nop
c0016da0:	83 c4 0c             	add    esp,0xc
c0016da3:	c3                   	ret    
c0016da4:	fa                   	cli    
c0016da5:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0016dab:	83 ec 08             	sub    esp,0x8
c0016dae:	83 c1 01             	add    ecx,0x1
c0016db1:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0016db7:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c0016dbd:	83 c1 01             	add    ecx,0x1
c0016dc0:	89 0d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ecx
c0016dc6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016dcc:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016dcf:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016dd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dd7:	50                   	push   eax
c0016dd8:	68 80 ca 02 c0       	push   0xc002ca80
c0016ddd:	e8 2a af 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016de2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016de9:	e8 16 ff ff ff       	call   c0016d04 <blockTask(TaskState)>
c0016dee:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	83 e8 01             	sub    eax,0x1
c0016df9:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0016dfe:	85 c0                	test   eax,eax
c0016e00:	75 0a                	jne    c0016e0c <milliTenthSleepUntil(unsigned long long)+0x88>
c0016e02:	8b 15 68 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca68
c0016e08:	85 d2                	test   edx,edx
c0016e0a:	75 18                	jne    c0016e24 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016e0c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016e14:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016e19:	85 c0                	test   eax,eax
c0016e1b:	75 83                	jne    c0016da0 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016e1d:	fb                   	sti    
c0016e1e:	83 c4 0c             	add    esp,0xc
c0016e21:	c3                   	ret    
c0016e22:	66 90                	xchg   ax,ax
c0016e24:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0016e2e:	e8 11 fe ff ff       	call   c0016c44 <schedule()>
c0016e33:	eb d7                	jmp    c0016e0c <milliTenthSleepUntil(unsigned long long)+0x88>
c0016e35:	8d 76 00             	lea    esi,[esi+0x0]

c0016e38 <milliTenthSleep(unsigned long long)>:
c0016e38:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0016e3d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016e41:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0016e47:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016e4b:	e9 34 ff ff ff       	jmp    c0016d84 <milliTenthSleepUntil(unsigned long long)>

c0016e50 <sleep(unsigned long long)>:
c0016e50:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016e58:	b8 10 27 00 00       	mov    eax,0x2710
c0016e5d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016e61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e65:	01 ca                	add    edx,ecx
c0016e67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016e6b:	eb cb                	jmp    c0016e38 <milliTenthSleep(unsigned long long)>
c0016e6d:	8d 76 00             	lea    esi,[esi+0x0]

c0016e70 <sleep(unsigned int)>:
c0016e70:	83 ec 14             	sub    esp,0x14
c0016e73:	b8 10 27 00 00       	mov    eax,0x2710
c0016e78:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016e7c:	52                   	push   edx
c0016e7d:	50                   	push   eax
c0016e7e:	e8 b5 ff ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0016e83:	83 c4 1c             	add    esp,0x1c
c0016e86:	c3                   	ret    
c0016e87:	90                   	nop

c0016e88 <milliTenthSleep(unsigned int)>:
c0016e88:	83 ec 14             	sub    esp,0x14
c0016e8b:	31 d2                	xor    edx,edx
c0016e8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e91:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0016e97:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0016e9d:	52                   	push   edx
c0016e9e:	50                   	push   eax
c0016e9f:	e8 e0 fe ff ff       	call   c0016d84 <milliTenthSleepUntil(unsigned long long)>
c0016ea4:	83 c4 1c             	add    esp,0x1c
c0016ea7:	c3                   	ret    

c0016ea8 <taskReturned>:
c0016ea8:	83 ec 18             	sub    esp,0x18
c0016eab:	68 00 4d 02 c0       	push   0xc0024d00
c0016eb0:	e8 5b 8c ff ff       	call   c000fb10 <KePanic(char const*)>
c0016eb5:	83 c4 10             	add    esp,0x10
c0016eb8:	83 ec 0c             	sub    esp,0xc
c0016ebb:	6a 02                	push   0x2
c0016ebd:	e8 42 fe ff ff       	call   c0016d04 <blockTask(TaskState)>
c0016ec2:	fa                   	cli    
c0016ec3:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ec8:	83 c0 01             	add    eax,0x1
c0016ecb:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0016ed0:	e8 6f fd ff ff       	call   c0016c44 <schedule()>
c0016ed5:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016edd:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016ee3:	83 c4 10             	add    esp,0x10
c0016ee6:	85 d2                	test   edx,edx
c0016ee8:	75 ce                	jne    c0016eb8 <taskReturned+0x10>
c0016eea:	fb                   	sti    
c0016eeb:	eb cb                	jmp    c0016eb8 <taskReturned+0x10>
c0016eed:	8d 76 00             	lea    esi,[esi+0x0]

c0016ef0 <KeProcessFromPID(int)>:
c0016ef0:	57                   	push   edi
c0016ef1:	56                   	push   esi
c0016ef2:	53                   	push   ebx
c0016ef3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ef7:	fa                   	cli    
c0016ef8:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0016efe:	83 ec 0c             	sub    esp,0xc
c0016f01:	68 8c ca 02 c0       	push   0xc002ca8c
c0016f06:	83 c1 01             	add    ecx,0x1
c0016f09:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0016f0f:	e8 34 ad 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f14:	83 c4 10             	add    esp,0x10
c0016f17:	89 c7                	mov    edi,eax
c0016f19:	eb 15                	jmp    c0016f30 <KeProcessFromPID(int)+0x40>
c0016f1b:	90                   	nop
c0016f1c:	83 ec 0c             	sub    esp,0xc
c0016f1f:	68 8c ca 02 c0       	push   0xc002ca8c
c0016f24:	e8 1f ad 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f29:	83 c4 10             	add    esp,0x10
c0016f2c:	39 f8                	cmp    eax,edi
c0016f2e:	74 50                	je     c0016f80 <KeProcessFromPID(int)+0x90>
c0016f30:	83 ec 0c             	sub    esp,0xc
c0016f33:	68 8c ca 02 c0       	push   0xc002ca8c
c0016f38:	e8 0b ad 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f3d:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0016f44:	89 c3                	mov    ebx,eax
c0016f46:	e8 05 ad 00 00       	call   c0021c50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f4b:	58                   	pop    eax
c0016f4c:	5a                   	pop    edx
c0016f4d:	53                   	push   ebx
c0016f4e:	68 8c ca 02 c0       	push   0xc002ca8c
c0016f53:	e8 b4 ad 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f58:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f5b:	83 c4 10             	add    esp,0x10
c0016f5e:	39 30                	cmp    DWORD PTR [eax],esi
c0016f60:	75 ba                	jne    c0016f1c <KeProcessFromPID(int)+0x2c>
c0016f62:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016f6a:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0016f70:	85 c9                	test   ecx,ecx
c0016f72:	74 08                	je     c0016f7c <KeProcessFromPID(int)+0x8c>
c0016f74:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f77:	90                   	nop
c0016f78:	5b                   	pop    ebx
c0016f79:	5e                   	pop    esi
c0016f7a:	5f                   	pop    edi
c0016f7b:	c3                   	ret    
c0016f7c:	fb                   	sti    
c0016f7d:	eb f5                	jmp    c0016f74 <KeProcessFromPID(int)+0x84>
c0016f7f:	90                   	nop
c0016f80:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016f88:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016f8e:	31 c0                	xor    eax,eax
c0016f90:	85 d2                	test   edx,edx
c0016f92:	75 e4                	jne    c0016f78 <KeProcessFromPID(int)+0x88>
c0016f94:	fb                   	sti    
c0016f95:	5b                   	pop    ebx
c0016f96:	5e                   	pop    esi
c0016f97:	5f                   	pop    edi
c0016f98:	c3                   	ret    
c0016f99:	8d 76 00             	lea    esi,[esi+0x0]

c0016f9c <unblockTask(ThreadControlBlock*)>:
c0016f9c:	53                   	push   ebx
c0016f9d:	83 ec 08             	sub    esp,0x8
c0016fa0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016fa4:	fa                   	cli    
c0016fa5:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016fab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016fae:	83 c2 01             	add    edx,0x1
c0016fb1:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0016fb7:	85 c0                	test   eax,eax
c0016fb9:	74 6d                	je     c0017028 <unblockTask(ThreadControlBlock*)+0x8c>
c0016fbb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016fbe:	83 f8 01             	cmp    eax,0x1
c0016fc1:	74 39                	je     c0016ffc <unblockTask(ThreadControlBlock*)+0x60>
c0016fc3:	83 ec 0c             	sub    esp,0xc
c0016fc6:	68 8c ca 02 c0       	push   0xc002ca8c
c0016fcb:	e8 78 ac 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	85 c0                	test   eax,eax
c0016fd5:	75 1d                	jne    c0016ff4 <unblockTask(ThreadControlBlock*)+0x58>
c0016fd7:	eb 63                	jmp    c001703c <unblockTask(ThreadControlBlock*)+0xa0>
c0016fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fdc:	83 ec 08             	sub    esp,0x8
c0016fdf:	50                   	push   eax
c0016fe0:	68 8c ca 02 c0       	push   0xc002ca8c
c0016fe5:	e8 6a b1 00 00       	call   c0022154 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016fea:	83 c4 10             	add    esp,0x10
c0016fed:	85 c0                	test   eax,eax
c0016fef:	74 4b                	je     c001703c <unblockTask(ThreadControlBlock*)+0xa0>
c0016ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff4:	39 c3                	cmp    ebx,eax
c0016ff6:	75 e4                	jne    c0016fdc <unblockTask(ThreadControlBlock*)+0x40>
c0016ff8:	eb 12                	jmp    c001700c <unblockTask(ThreadControlBlock*)+0x70>
c0016ffa:	66 90                	xchg   ax,ax
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	68 95 4c 02 c0       	push   0xc0024c95
c0017004:	e8 5d ff fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017014:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017019:	85 c0                	test   eax,eax
c001701b:	75 03                	jne    c0017020 <unblockTask(ThreadControlBlock*)+0x84>
c001701d:	fb                   	sti    
c001701e:	66 90                	xchg   ax,ax
c0017020:	83 c4 08             	add    esp,0x8
c0017023:	5b                   	pop    ebx
c0017024:	c3                   	ret    
c0017025:	8d 76 00             	lea    esi,[esi+0x0]
c0017028:	83 ec 0c             	sub    esp,0xc
c001702b:	68 7e 4c 02 c0       	push   0xc0024c7e
c0017030:	e8 31 ff fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017035:	83 c4 10             	add    esp,0x10
c0017038:	eb d2                	jmp    c001700c <unblockTask(ThreadControlBlock*)+0x70>
c001703a:	66 90                	xchg   ax,ax
c001703c:	83 ec 08             	sub    esp,0x8
c001703f:	53                   	push   ebx
c0017040:	68 8c ca 02 c0       	push   0xc002ca8c
c0017045:	e8 c2 ac 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001704a:	83 c4 10             	add    esp,0x10
c001704d:	eb bd                	jmp    c001700c <unblockTask(ThreadControlBlock*)+0x70>
c001704f:	90                   	nop

c0017050 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017050:	55                   	push   ebp
c0017051:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017056:	57                   	push   edi
c0017057:	56                   	push   esi
c0017058:	53                   	push   ebx
c0017059:	83 ec 1c             	sub    esp,0x1c
c001705c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017060:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017063:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017066:	d3 c0                	rol    eax,cl
c0017068:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001706f:	21 c8                	and    eax,ecx
c0017071:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017078:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001707b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017083:	0f 85 af 01 00 00    	jne    c0017238 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017089:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001708f:	85 ed                	test   ebp,ebp
c0017091:	7e 29                	jle    c00170bc <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017093:	31 f6                	xor    esi,esi
c0017095:	8d 76 00             	lea    esi,[esi+0x0]
c0017098:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001709f:	83 ec 0c             	sub    esp,0xc
c00170a2:	83 c6 01             	add    esi,0x1
c00170a5:	57                   	push   edi
c00170a6:	e8 19 86 ff ff       	call   c000f6c4 <free>
c00170ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c00170b7:	7f df                	jg     c0017098 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c00170b9:	8d 76 00             	lea    esi,[esi+0x0]
c00170bc:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00170c6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00170c9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00170cf:	89 f7                	mov    edi,esi
c00170d1:	85 ed                	test   ebp,ebp
c00170d3:	74 1b                	je     c00170f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	55                   	push   ebp
c00170d9:	e8 20 73 ff ff       	call   c000e3fe <EnvVarContainer::~EnvVarContainer()>
c00170de:	59                   	pop    ecx
c00170df:	5e                   	pop    esi
c00170e0:	6a 0c                	push   0xc
c00170e2:	55                   	push   ebp
c00170e3:	e8 d4 61 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00170e8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	89 f7                	mov    edi,esi
c00170f0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00170f6:	85 c0                	test   eax,eax
c00170f8:	0f 84 ae 00 00 00    	je     c00171ac <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00170fe:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017101:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017105:	31 c9                	xor    ecx,ecx
c0017107:	eb 17                	jmp    c0017120 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017109:	8d 76 00             	lea    esi,[esi+0x0]
c001710c:	83 c1 01             	add    ecx,0x1
c001710f:	83 f9 10             	cmp    ecx,0x10
c0017112:	0f 84 94 00 00 00    	je     c00171ac <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0017118:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001711e:	66 90                	xchg   ax,ax
c0017120:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017127:	d3 fa                	sar    edx,cl
c0017129:	80 e2 01             	and    dl,0x1
c001712c:	74 de                	je     c001710c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001712e:	6b d1 73             	imul   edx,ecx,0x73
c0017131:	01 d0                	add    eax,edx
c0017133:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017139:	83 fd 07             	cmp    ebp,0x7
c001713c:	75 ce                	jne    c001710c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001713e:	05 40 02 00 00       	add    eax,0x240
c0017143:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017146:	83 fd ff             	cmp    ebp,0xffffffff
c0017149:	0f 8c f1 00 00 00    	jl     c0017240 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001714f:	0f 84 af 01 00 00    	je     c0017304 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0017155:	85 ed                	test   ebp,ebp
c0017157:	0f 84 93 01 00 00    	je     c00172f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c001715d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001715f:	75 ab                	jne    c001710c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017161:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017165:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001716b:	01 d0                	add    eax,edx
c001716d:	8d 76 00             	lea    esi,[esi+0x0]
c0017170:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017174:	83 ec 0c             	sub    esp,0xc
c0017177:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001717d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017180:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017186:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001718d:	50                   	push   eax
c001718e:	e8 09 fe ff ff       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017199:	89 f7                	mov    edi,esi
c001719b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001719f:	83 c1 01             	add    ecx,0x1
c00171a2:	83 f9 10             	cmp    ecx,0x10
c00171a5:	0f 85 6d ff ff ff    	jne    c0017118 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00171ab:	90                   	nop
c00171ac:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c00171b2:	85 c0                	test   eax,eax
c00171b4:	74 62                	je     c0017218 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00171b6:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c00171bc:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00171c2:	74 54                	je     c0017218 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00171c4:	83 ec 0c             	sub    esp,0xc
c00171c7:	68 8c ca 02 c0       	push   0xc002ca8c
c00171cc:	e8 77 aa 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171d1:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00171d8:	89 c7                	mov    edi,eax
c00171da:	e8 4d aa 00 00       	call   c0021c2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	84 c0                	test   al,al
c00171e4:	0f 84 ce 00 00 00    	je     c00172b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c00171ea:	66 90                	xchg   ax,ax
c00171ec:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171ef:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00171f5:	85 d2                	test   edx,edx
c00171f7:	74 0f                	je     c0017208 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00171f9:	8b 02                	mov    eax,DWORD PTR [edx]
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	52                   	push   edx
c00171ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017202:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017205:	83 c4 10             	add    esp,0x10
c0017208:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0017212:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017215:	8d 76 00             	lea    esi,[esi+0x0]
c0017218:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c001721e:	85 db                	test   ebx,ebx
c0017220:	74 16                	je     c0017238 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017222:	83 ec 0c             	sub    esp,0xc
c0017225:	53                   	push   ebx
c0017226:	e8 41 c4 ff ff       	call   c001366c <VAS::~VAS()>
c001722b:	58                   	pop    eax
c001722c:	5a                   	pop    edx
c001722d:	6a 14                	push   0x14
c001722f:	53                   	push   ebx
c0017230:	e8 87 60 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0017235:	83 c4 10             	add    esp,0x10
c0017238:	83 c4 1c             	add    esp,0x1c
c001723b:	5b                   	pop    ebx
c001723c:	5e                   	pop    esi
c001723d:	5f                   	pop    edi
c001723e:	5d                   	pop    ebp
c001723f:	c3                   	ret    
c0017240:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017244:	83 ec 0c             	sub    esp,0xc
c0017247:	68 34 4d 02 c0       	push   0xc0024d34
c001724c:	e8 bf 88 ff ff       	call   c000fb10 <KePanic(char const*)>
c0017251:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	89 f7                	mov    edi,esi
c0017259:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001725d:	e9 aa fe ff ff       	jmp    c001710c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017262:	66 90                	xchg   ax,ax
c0017264:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001726a:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017270:	75 1e                	jne    c0017290 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017272:	83 ec 0c             	sub    esp,0xc
c0017275:	68 9c 4d 02 c0       	push   0xc0024d9c
c001727a:	e8 e7 fc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001727f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017286:	e8 79 fa ff ff       	call   c0016d04 <blockTask(TaskState)>
c001728b:	83 c4 10             	add    esp,0x10
c001728e:	66 90                	xchg   ax,ax
c0017290:	83 ec 08             	sub    esp,0x8
c0017293:	56                   	push   esi
c0017294:	68 8c ca 02 c0       	push   0xc002ca8c
c0017299:	e8 6e aa 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001729e:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00172a5:	e8 9e a9 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172aa:	83 c4 10             	add    esp,0x10
c00172ad:	39 f8                	cmp    eax,edi
c00172af:	0f 84 37 ff ff ff    	je     c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c00172b5:	8d 76 00             	lea    esi,[esi+0x0]
c00172b8:	83 ec 0c             	sub    esp,0xc
c00172bb:	68 8c ca 02 c0       	push   0xc002ca8c
c00172c0:	e8 83 a9 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172c5:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00172cc:	89 c6                	mov    esi,eax
c00172ce:	e8 7d a9 00 00       	call   c0021c50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	39 f3                	cmp    ebx,esi
c00172d8:	74 b6                	je     c0017290 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00172da:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00172dd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172e0:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00172e6:	75 a8                	jne    c0017290 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00172e8:	e9 77 ff ff ff       	jmp    c0017264 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c00172ed:	8d 76 00             	lea    esi,[esi+0x0]
c00172f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00172f4:	83 ec 0c             	sub    esp,0xc
c00172f7:	68 68 4d 02 c0       	push   0xc0024d68
c00172fc:	e9 4b ff ff ff       	jmp    c001724c <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0017301:	8d 76 00             	lea    esi,[esi+0x0]
c0017304:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017308:	8b 36                	mov    esi,DWORD PTR [esi]
c001730a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001730d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017310:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017316:	01 d7                	add    edi,edx
c0017318:	89 f8                	mov    eax,edi
c001731a:	e9 51 fe ff ff       	jmp    c0017170 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c001731f:	90                   	nop

c0017320 <cleanerTaskFunction(void*)>:
c0017320:	53                   	push   ebx
c0017321:	83 ec 08             	sub    esp,0x8
c0017324:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001732c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017331:	85 c0                	test   eax,eax
c0017333:	75 03                	jne    c0017338 <cleanerTaskFunction(void*)+0x18>
c0017335:	fb                   	sti    
c0017336:	66 90                	xchg   ax,ax
c0017338:	fa                   	cli    
c0017339:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001733e:	83 c0 01             	add    eax,0x1
c0017341:	80 3d 54 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca54,0x0
c0017348:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001734d:	0f 85 c9 00 00 00    	jne    c001741c <cleanerTaskFunction(void*)+0xfc>
c0017353:	83 ec 0c             	sub    esp,0xc
c0017356:	6a 02                	push   0x2
c0017358:	e8 7b f9 ff ff       	call   c0016cd8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	c6 05 54 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca54,0x0
c0017367:	fa                   	cli    
c0017368:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c001736e:	8b 1d 6c ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca6c
c0017374:	83 c1 01             	add    ecx,0x1
c0017377:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c001737d:	83 c3 01             	add    ebx,0x1
c0017380:	89 1d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ebx
c0017386:	fa                   	cli    
c0017387:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001738c:	83 c0 01             	add    eax,0x1
c001738f:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017394:	eb 2a                	jmp    c00173c0 <cleanerTaskFunction(void*)+0xa0>
c0017396:	66 90                	xchg   ax,ax
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	68 74 ca 02 c0       	push   0xc002ca74
c00173a0:	e8 a3 a8 00 00       	call   c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173a5:	c7 04 24 74 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca74
c00173ac:	89 c3                	mov    ebx,eax
c00173ae:	e8 9d a8 00 00       	call   c0021c50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00173b6:	e8 95 fc ff ff       	call   c0017050 <cleanupTerminatedTask(ThreadControlBlock*)>
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	66 90                	xchg   ax,ax
c00173c0:	83 ec 0c             	sub    esp,0xc
c00173c3:	68 74 ca 02 c0       	push   0xc002ca74
c00173c8:	e8 5f a8 00 00       	call   c0021c2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00173cd:	83 c4 10             	add    esp,0x10
c00173d0:	84 c0                	test   al,al
c00173d2:	74 c4                	je     c0017398 <cleanerTaskFunction(void*)+0x78>
c00173d4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00173dc:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00173e2:	85 d2                	test   edx,edx
c00173e4:	75 02                	jne    c00173e8 <cleanerTaskFunction(void*)+0xc8>
c00173e6:	fb                   	sti    
c00173e7:	90                   	nop
c00173e8:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00173ed:	83 e8 01             	sub    eax,0x1
c00173f0:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00173f5:	0f 85 29 ff ff ff    	jne    c0017324 <cleanerTaskFunction(void*)+0x4>
c00173fb:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0017400:	85 c0                	test   eax,eax
c0017402:	0f 84 1c ff ff ff    	je     c0017324 <cleanerTaskFunction(void*)+0x4>
c0017408:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0017412:	e8 2d f8 ff ff       	call   c0016c44 <schedule()>
c0017417:	e9 08 ff ff ff       	jmp    c0017324 <cleanerTaskFunction(void*)+0x4>
c001741c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017424:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017429:	85 c0                	test   eax,eax
c001742b:	0f 85 2f ff ff ff    	jne    c0017360 <cleanerTaskFunction(void*)+0x40>
c0017431:	fb                   	sti    
c0017432:	e9 29 ff ff ff       	jmp    c0017360 <cleanerTaskFunction(void*)+0x40>
c0017437:	90                   	nop

c0017438 <KeTerminateCurrentThread(int)>:
c0017438:	83 ec 14             	sub    esp,0x14
c001743b:	fa                   	cli    
c001743c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017441:	83 c0 01             	add    eax,0x1
c0017444:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017449:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c001744e:	83 c0 01             	add    eax,0x1
c0017451:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0017456:	fa                   	cli    
c0017457:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001745c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017460:	83 c0 01             	add    eax,0x1
c0017463:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017468:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001746d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017470:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017475:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017478:	50                   	push   eax
c0017479:	68 74 ca 02 c0       	push   0xc002ca74
c001747e:	e8 89 a8 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017483:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017488:	83 c4 10             	add    esp,0x10
c001748b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017492:	a1 50 ca 02 c0       	mov    eax,ds:0xc002ca50
c0017497:	85 c0                	test   eax,eax
c0017499:	0f 84 81 00 00 00    	je     c0017520 <KeTerminateCurrentThread(int)+0xe8>
c001749f:	c6 05 54 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca54,0x1
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	50                   	push   eax
c00174aa:	e8 ed fa ff ff       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	66 90                	xchg   ax,ax
c00174b4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00174bc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00174c1:	85 c0                	test   eax,eax
c00174c3:	75 03                	jne    c00174c8 <KeTerminateCurrentThread(int)+0x90>
c00174c5:	fb                   	sti    
c00174c6:	66 90                	xchg   ax,ax
c00174c8:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00174cd:	83 e8 01             	sub    eax,0x1
c00174d0:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00174d5:	75 09                	jne    c00174e0 <KeTerminateCurrentThread(int)+0xa8>
c00174d7:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c00174de:	75 54                	jne    c0017534 <KeTerminateCurrentThread(int)+0xfc>
c00174e0:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00174e8:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c00174ee:	85 c9                	test   ecx,ecx
c00174f0:	75 06                	jne    c00174f8 <KeTerminateCurrentThread(int)+0xc0>
c00174f2:	66 90                	xchg   ax,ax
c00174f4:	fb                   	sti    
c00174f5:	8d 76 00             	lea    esi,[esi+0x0]
c00174f8:	fa                   	cli    
c00174f9:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00174fe:	83 c0 01             	add    eax,0x1
c0017501:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017506:	e8 39 f7 ff ff       	call   c0016c44 <schedule()>
c001750b:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017513:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017519:	85 d2                	test   edx,edx
c001751b:	75 db                	jne    c00174f8 <KeTerminateCurrentThread(int)+0xc0>
c001751d:	eb d5                	jmp    c00174f4 <KeTerminateCurrentThread(int)+0xbc>
c001751f:	90                   	nop
c0017520:	83 ec 0c             	sub    esp,0xc
c0017523:	68 ac 4c 02 c0       	push   0xc0024cac
c0017528:	e8 39 fa fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	eb 82                	jmp    c00174b4 <KeTerminateCurrentThread(int)+0x7c>
c0017532:	66 90                	xchg   ax,ax
c0017534:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c001753e:	e8 01 f7 ff ff       	call   c0016c44 <schedule()>
c0017543:	eb 9b                	jmp    c00174e0 <KeTerminateCurrentThread(int)+0xa8>
c0017545:	8d 76 00             	lea    esi,[esi+0x0]

c0017548 <__static_initialization_and_destruction_0(int, int)>:
c0017548:	83 ec 0c             	sub    esp,0xc
c001754b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017550:	0f 85 8e 00 00 00    	jne    c00175e4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017556:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001755e:	0f 85 80 00 00 00    	jne    c00175e4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017564:	83 ec 0c             	sub    esp,0xc
c0017567:	68 8c ca 02 c0       	push   0xc002ca8c
c001756c:	e8 3b ac 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017571:	83 c4 10             	add    esp,0x10
c0017574:	83 ec 04             	sub    esp,0x4
c0017577:	68 b4 60 02 c0       	push   0xc00260b4
c001757c:	68 8c ca 02 c0       	push   0xc002ca8c
c0017581:	68 5c 21 02 c0       	push   0xc002215c
c0017586:	e8 e1 5c ff ff       	call   c000d26c <__cxa_atexit>
c001758b:	83 c4 10             	add    esp,0x10
c001758e:	83 ec 0c             	sub    esp,0xc
c0017591:	68 80 ca 02 c0       	push   0xc002ca80
c0017596:	e8 11 ac 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001759b:	83 c4 10             	add    esp,0x10
c001759e:	83 ec 04             	sub    esp,0x4
c00175a1:	68 b4 60 02 c0       	push   0xc00260b4
c00175a6:	68 80 ca 02 c0       	push   0xc002ca80
c00175ab:	68 5c 21 02 c0       	push   0xc002215c
c00175b0:	e8 b7 5c ff ff       	call   c000d26c <__cxa_atexit>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	83 ec 0c             	sub    esp,0xc
c00175bb:	68 74 ca 02 c0       	push   0xc002ca74
c00175c0:	e8 e7 ab 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	83 ec 04             	sub    esp,0x4
c00175cb:	68 b4 60 02 c0       	push   0xc00260b4
c00175d0:	68 74 ca 02 c0       	push   0xc002ca74
c00175d5:	68 5c 21 02 c0       	push   0xc002215c
c00175da:	e8 8d 5c ff ff       	call   c000d26c <__cxa_atexit>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	66 90                	xchg   ax,ax
c00175e4:	90                   	nop
c00175e5:	83 c4 0c             	add    esp,0xc
c00175e8:	c3                   	ret    
c00175e9:	8d 76 00             	lea    esi,[esi+0x0]

c00175ec <_GLOBAL__sub_I_keNextPID>:
c00175ec:	83 ec 0c             	sub    esp,0xc
c00175ef:	83 ec 08             	sub    esp,0x8
c00175f2:	68 ff ff 00 00       	push   0xffff
c00175f7:	6a 01                	push   0x1
c00175f9:	e8 4a ff ff ff       	call   c0017548 <__static_initialization_and_destruction_0(int, int)>
c00175fe:	83 c4 10             	add    esp,0x10
c0017601:	83 c4 0c             	add    esp,0xc
c0017604:	c3                   	ret    

c0017605 <Vm::inbv(unsigned short)>:
c0017605:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017609:	66 81 fa fe fe       	cmp    dx,0xfefe
c001760e:	74 02                	je     c0017612 <Vm::inbv(unsigned short)+0xd>
c0017610:	ec                   	in     al,dx
c0017611:	c3                   	ret    
c0017612:	a0 d0 ca 02 c0       	mov    al,ds:0xc002cad0
c0017617:	c3                   	ret    

c0017618 <Vm::outbv(unsigned short, unsigned char)>:
c0017618:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001761c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017620:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017625:	74 02                	je     c0017629 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017627:	ee                   	out    dx,al
c0017628:	c3                   	ret    
c0017629:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c001762f:	88 81 e0 ca 02 c0    	mov    BYTE PTR [ecx-0x3ffd3520],al
c0017635:	8d 51 01             	lea    edx,[ecx+0x1]
c0017638:	b8 1f 00 00 00       	mov    eax,0x1f
c001763d:	83 fa 20             	cmp    edx,0x20
c0017640:	0f 44 d0             	cmove  edx,eax
c0017643:	89 15 d0 ca 02 c0    	mov    DWORD PTR ds:0xc002cad0,edx
c0017649:	c3                   	ret    

c001764a <Vm::realToLinear(unsigned short, unsigned short)>:
c001764a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001764f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017654:	c1 e0 04             	shl    eax,0x4
c0017657:	01 d0                	add    eax,edx
c0017659:	c3                   	ret    

c001765a <Vm::getSegment(unsigned int)>:
c001765a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001765e:	c1 e8 10             	shr    eax,0x10
c0017661:	c3                   	ret    

c0017662 <Vm::getOffset(unsigned int)>:
c0017662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017666:	c3                   	ret    

c0017667 <Vm::mainloop2()>:
c0017667:	83 ec 18             	sub    esp,0x18
c001766a:	fa                   	cli    
c001766b:	6a 02                	push   0x2
c001766d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017672:	c6 05 c9 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac9,0x1
c0017679:	83 c0 01             	add    eax,0x1
c001767c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017681:	e8 52 f6 ff ff       	call   c0016cd8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017686:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001768b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001768f:	52                   	push   edx
c0017690:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017694:	52                   	push   edx
c0017695:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017699:	52                   	push   edx
c001769a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001769e:	50                   	push   eax
c001769f:	e8 6b 8b fe ff       	call   c000020f <goToVM86>
c00176a4:	83 c4 2c             	add    esp,0x2c
c00176a7:	c3                   	ret    

c00176a8 <Vm::mainVm8086Loop(void*)>:
c00176a8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00176b0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00176b5:	85 c0                	test   eax,eax
c00176b7:	75 01                	jne    c00176ba <Vm::mainVm8086Loop(void*)+0x12>
c00176b9:	fb                   	sti    
c00176ba:	eb ab                	jmp    c0017667 <Vm::mainloop2()>

c00176bc <Vm::mainloop3(unsigned long)>:
c00176bc:	83 ec 18             	sub    esp,0x18
c00176bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00176c3:	fa                   	cli    
c00176c4:	6a 02                	push   0x2
c00176c6:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00176cc:	c6 05 c8 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac8,0x1
c00176d3:	a3 c4 ca 02 c0       	mov    ds:0xc002cac4,eax
c00176d8:	83 c2 01             	add    edx,0x1
c00176db:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c00176e1:	e8 f2 f5 ff ff       	call   c0016cd8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00176e6:	83 c4 1c             	add    esp,0x1c
c00176e9:	e9 79 ff ff ff       	jmp    c0017667 <Vm::mainloop2()>

c00176ee <Vm::initialise8086()>:
c00176ee:	83 ec 0c             	sub    esp,0xc
c00176f1:	68 80 00 00 00       	push   0x80
c00176f6:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00176fb:	6a 00                	push   0x0
c00176fd:	68 a8 76 01 c0       	push   0xc00176a8
c0017702:	50                   	push   eax
c0017703:	e8 94 f2 ff ff       	call   c001699c <Process::createThread(void (*)(void*), void*, int)>
c0017708:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001770f:	68 10 01 00 00       	push   0x110
c0017714:	6a 00                	push   0x0
c0017716:	6a 00                	push   0x0
c0017718:	a3 cc ca 02 c0       	mov    ds:0xc002cacc,eax
c001771d:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017722:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017728:	52                   	push   edx
c0017729:	e8 a0 c2 ff ff       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001772e:	83 c4 2c             	add    esp,0x2c
c0017731:	c3                   	ret    

c0017732 <Vm::resetConventionalMemory8086()>:
c0017732:	c3                   	ret    

c0017733 <Vm::finish8086()>:
c0017733:	53                   	push   ebx
c0017734:	83 ec 08             	sub    esp,0x8
c0017737:	eb 17                	jmp    c0017750 <Vm::finish8086()+0x1d>
c0017739:	e8 06 f5 ff ff       	call   c0016c44 <schedule()>
c001773e:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017746:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c001774c:	85 c9                	test   ecx,ecx
c001774e:	74 51                	je     c00177a1 <Vm::finish8086()+0x6e>
c0017750:	fa                   	cli    
c0017751:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c0017757:	83 c3 01             	add    ebx,0x1
c001775a:	80 3d c8 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac8,0x0
c0017761:	89 1d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ebx
c0017767:	74 d0                	je     c0017739 <Vm::finish8086()+0x6>
c0017769:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001776e:	83 ec 0c             	sub    esp,0xc
c0017771:	c6 05 c8 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac8,0x0
c0017778:	8b 1d c4 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac4
c001777e:	50                   	push   eax
c001777f:	e8 18 f8 ff ff       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c0017784:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001778c:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	85 d2                	test   edx,edx
c0017797:	75 01                	jne    c001779a <Vm::finish8086()+0x67>
c0017799:	fb                   	sti    
c001779a:	83 c4 08             	add    esp,0x8
c001779d:	89 d8                	mov    eax,ebx
c001779f:	5b                   	pop    ebx
c00177a0:	c3                   	ret    
c00177a1:	fb                   	sti    
c00177a2:	eb ac                	jmp    c0017750 <Vm::finish8086()+0x1d>

c00177a4 <Vm::getOutput8086(unsigned char*)>:
c00177a4:	57                   	push   edi
c00177a5:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c00177ab:	56                   	push   esi
c00177ac:	be e0 ca 02 c0       	mov    esi,0xc002cae0
c00177b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00177b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177b7:	5e                   	pop    esi
c00177b8:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c00177bd:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c00177c7:	5f                   	pop    edi
c00177c8:	c3                   	ret    

c00177c9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00177c9:	55                   	push   ebp
c00177ca:	57                   	push   edi
c00177cb:	56                   	push   esi
c00177cc:	53                   	push   ebx
c00177cd:	83 ec 2c             	sub    esp,0x2c
c00177d0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00177d4:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c00177db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00177df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00177e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177e7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00177eb:	75 20                	jne    c001780d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c00177ed:	e9 c0 00 00 00       	jmp    c00178b2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe9>
c00177f2:	e8 4d f4 ff ff       	call   c0016c44 <schedule()>
c00177f7:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00177ff:	8b 3d 70 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca70
c0017805:	85 ff                	test   edi,edi
c0017807:	0f 84 9f 00 00 00    	je     c00178ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe3>
c001780d:	fa                   	cli    
c001780e:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017813:	83 c0 01             	add    eax,0x1
c0017816:	80 3d c9 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac9,0x0
c001781d:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017822:	74 ce                	je     c00177f2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x29>
c0017824:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017828:	83 ec 04             	sub    esp,0x4
c001782b:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017835:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001783a:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001783e:	0f b7 f6             	movzx  esi,si
c0017841:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017845:	0f b7 db             	movzx  ebx,bx
c0017848:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001784c:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017850:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017854:	6a 20                	push   0x20
c0017856:	6a 00                	push   0x0
c0017858:	68 e0 ca 02 c0       	push   0xc002cae0
c001785d:	e8 8e 8c fe ff       	call   c00004f0 <memset>
c0017862:	5a                   	pop    edx
c0017863:	59                   	pop    ecx
c0017864:	56                   	push   esi
c0017865:	53                   	push   ebx
c0017866:	e8 df fd ff ff       	call   c001764a <Vm::realToLinear(unsigned short, unsigned short)>
c001786b:	83 c4 10             	add    esp,0x10
c001786e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017872:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017876:	89 c7                	mov    edi,eax
c0017878:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001787a:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017881:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017889:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c001788f:	85 db                	test   ebx,ebx
c0017891:	75 01                	jne    c0017894 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xcb>
c0017893:	fb                   	sti    
c0017894:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017899:	83 ec 0c             	sub    esp,0xc
c001789c:	50                   	push   eax
c001789d:	e8 fa f6 ff ff       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c00178a2:	83 c4 3c             	add    esp,0x3c
c00178a5:	b0 01                	mov    al,0x1
c00178a7:	5b                   	pop    ebx
c00178a8:	5e                   	pop    esi
c00178a9:	5f                   	pop    edi
c00178aa:	5d                   	pop    ebp
c00178ab:	c3                   	ret    
c00178ac:	fb                   	sti    
c00178ad:	e9 5b ff ff ff       	jmp    c001780d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c00178b2:	83 ec 0c             	sub    esp,0xc
c00178b5:	68 14 01 00 00       	push   0x114
c00178ba:	e8 f5 7d ff ff       	call   c000f6b4 <malloc>
c00178bf:	83 c4 0c             	add    esp,0xc
c00178c2:	89 c7                	mov    edi,eax
c00178c4:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00178c9:	50                   	push   eax
c00178ca:	68 c4 4d 02 c0       	push   0xc0024dc4
c00178cf:	57                   	push   edi
c00178d0:	e8 b3 08 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00178d5:	58                   	pop    eax
c00178d6:	5a                   	pop    edx
c00178d7:	6a 12                	push   0x12
c00178d9:	57                   	push   edi
c00178da:	e8 c7 08 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c00178df:	8b 07                	mov    eax,DWORD PTR [edi]
c00178e1:	59                   	pop    ecx
c00178e2:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00178e6:	51                   	push   ecx
c00178e7:	6a 00                	push   0x0
c00178e9:	6a 00                	push   0x0
c00178eb:	68 00 00 11 00       	push   0x110000
c00178f0:	57                   	push   edi
c00178f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00178f4:	83 c4 14             	add    esp,0x14
c00178f7:	57                   	push   edi
c00178f8:	e8 07 09 ff ff       	call   c0008204 <File::close()>
c00178fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00178ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017902:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017905:	83 c4 10             	add    esp,0x10
c0017908:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c001790f:	e9 f9 fe ff ff       	jmp    c001780d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>

c0017914 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017914:	55                   	push   ebp
c0017915:	57                   	push   edi
c0017916:	56                   	push   esi
c0017917:	53                   	push   ebx
c0017918:	83 ec 2c             	sub    esp,0x2c
c001791b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001791f:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c0017926:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001792a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001792e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017932:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017936:	0f 84 5a 01 00 00    	je     c0017a96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x182>
c001793c:	83 ec 08             	sub    esp,0x8
c001793f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017943:	51                   	push   ecx
c0017944:	68 28 4e 02 c0       	push   0xc0024e28
c0017949:	e8 18 f6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001794e:	83 c4 10             	add    esp,0x10
c0017951:	eb 1a                	jmp    c001796d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017953:	e8 ec f2 ff ff       	call   c0016c44 <schedule()>
c0017958:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017960:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017965:	85 c0                	test   eax,eax
c0017967:	0f 84 23 01 00 00    	je     c0017a90 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c001796d:	fa                   	cli    
c001796e:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017974:	8a 1d c9 ca 02 c0    	mov    bl,BYTE PTR ds:0xc002cac9
c001797a:	83 c2 01             	add    edx,0x1
c001797d:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0017983:	84 db                	test   bl,bl
c0017985:	74 cc                	je     c0017953 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017987:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001798b:	83 ec 04             	sub    esp,0x4
c001798e:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017998:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001799d:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00179a1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c00179a5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c00179a9:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c00179ad:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00179b1:	6a 20                	push   0x20
c00179b3:	6a 00                	push   0x0
c00179b5:	68 e0 ca 02 c0       	push   0xc002cae0
c00179ba:	e8 31 8b fe ff       	call   c00004f0 <memset>
c00179bf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00179c6:	e8 e9 7c ff ff       	call   c000f6b4 <malloc>
c00179cb:	83 c4 0c             	add    esp,0xc
c00179ce:	89 c7                	mov    edi,eax
c00179d0:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00179d5:	50                   	push   eax
c00179d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00179da:	50                   	push   eax
c00179db:	57                   	push   edi
c00179dc:	e8 a7 07 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	85 ff                	test   edi,edi
c00179e6:	0f 84 63 01 00 00    	je     c0017b4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23b>
c00179ec:	83 ec 04             	sub    esp,0x4
c00179ef:	8d 44 24 17          	lea    eax,[esp+0x17]
c00179f3:	50                   	push   eax
c00179f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00179f8:	50                   	push   eax
c00179f9:	57                   	push   edi
c00179fa:	e8 a9 0a ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00179ff:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	89 e8                	mov    eax,ebp
c0017a09:	84 c0                	test   al,al
c0017a0b:	0f 85 e7 00 00 00    	jne    c0017af8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e4>
c0017a11:	83 ec 08             	sub    esp,0x8
c0017a14:	6a 01                	push   0x1
c0017a16:	57                   	push   edi
c0017a17:	e8 8a 07 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	85 c0                	test   eax,eax
c0017a21:	0f 85 ff 00 00 00    	jne    c0017b26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x212>
c0017a27:	83 ec 08             	sub    esp,0x8
c0017a2a:	0f b7 f6             	movzx  esi,si
c0017a2d:	56                   	push   esi
c0017a2e:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0017a33:	50                   	push   eax
c0017a34:	e8 11 fc ff ff       	call   c001764a <Vm::realToLinear(unsigned short, unsigned short)>
c0017a39:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017a3b:	5a                   	pop    edx
c0017a3c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017a40:	52                   	push   edx
c0017a41:	50                   	push   eax
c0017a42:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017a46:	56                   	push   esi
c0017a47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017a4b:	55                   	push   ebp
c0017a4c:	57                   	push   edi
c0017a4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a50:	83 c4 14             	add    esp,0x14
c0017a53:	57                   	push   edi
c0017a54:	e8 ab 07 ff ff       	call   c0008204 <File::close()>
c0017a59:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017a60:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017a68:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017a6d:	83 c4 10             	add    esp,0x10
c0017a70:	85 c0                	test   eax,eax
c0017a72:	75 01                	jne    c0017a75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x161>
c0017a74:	fb                   	sti    
c0017a75:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017a7a:	83 ec 0c             	sub    esp,0xc
c0017a7d:	50                   	push   eax
c0017a7e:	e8 19 f5 ff ff       	call   c0016f9c <unblockTask(ThreadControlBlock*)>
c0017a83:	83 c4 10             	add    esp,0x10
c0017a86:	83 c4 2c             	add    esp,0x2c
c0017a89:	88 d8                	mov    al,bl
c0017a8b:	5b                   	pop    ebx
c0017a8c:	5e                   	pop    esi
c0017a8d:	5f                   	pop    edi
c0017a8e:	5d                   	pop    ebp
c0017a8f:	c3                   	ret    
c0017a90:	fb                   	sti    
c0017a91:	e9 d7 fe ff ff       	jmp    c001796d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017a96:	83 ec 0c             	sub    esp,0xc
c0017a99:	68 14 01 00 00       	push   0x114
c0017a9e:	e8 11 7c ff ff       	call   c000f6b4 <malloc>
c0017aa3:	83 c4 0c             	add    esp,0xc
c0017aa6:	89 c3                	mov    ebx,eax
c0017aa8:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017aad:	50                   	push   eax
c0017aae:	68 c4 4d 02 c0       	push   0xc0024dc4
c0017ab3:	53                   	push   ebx
c0017ab4:	e8 cf 06 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017ab9:	58                   	pop    eax
c0017aba:	5a                   	pop    edx
c0017abb:	6a 12                	push   0x12
c0017abd:	53                   	push   ebx
c0017abe:	e8 e3 06 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017ac3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ac5:	59                   	pop    ecx
c0017ac6:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017aca:	51                   	push   ecx
c0017acb:	6a 00                	push   0x0
c0017acd:	6a 00                	push   0x0
c0017acf:	68 00 00 11 00       	push   0x110000
c0017ad4:	53                   	push   ebx
c0017ad5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017ad8:	83 c4 14             	add    esp,0x14
c0017adb:	53                   	push   ebx
c0017adc:	e8 23 07 ff ff       	call   c0008204 <File::close()>
c0017ae1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ae3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ae6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017ae9:	83 c4 10             	add    esp,0x10
c0017aec:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c0017af3:	e9 44 fe ff ff       	jmp    c001793c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017af8:	83 ec 0c             	sub    esp,0xc
c0017afb:	68 f3 4d 02 c0       	push   0xc0024df3
c0017b00:	e8 0b 80 ff ff       	call   c000fb10 <KePanic(char const*)>
c0017b05:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017b0d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	85 c0                	test   eax,eax
c0017b17:	75 01                	jne    c0017b1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017b19:	fb                   	sti    
c0017b1a:	83 c4 2c             	add    esp,0x2c
c0017b1d:	31 db                	xor    ebx,ebx
c0017b1f:	88 d8                	mov    al,bl
c0017b21:	5b                   	pop    ebx
c0017b22:	5e                   	pop    esi
c0017b23:	5f                   	pop    edi
c0017b24:	5d                   	pop    ebp
c0017b25:	c3                   	ret    
c0017b26:	83 ec 0c             	sub    esp,0xc
c0017b29:	68 0c 4e 02 c0       	push   0xc0024e0c
c0017b2e:	e8 dd 7f ff ff       	call   c000fb10 <KePanic(char const*)>
c0017b33:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017b3b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	85 c0                	test   eax,eax
c0017b45:	75 d3                	jne    c0017b1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017b47:	fb                   	sti    
c0017b48:	89 eb                	mov    ebx,ebp
c0017b4a:	e9 37 ff ff ff       	jmp    c0017a86 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0017b4f:	83 ec 0c             	sub    esp,0xc
c0017b52:	68 df 4d 02 c0       	push   0xc0024ddf
c0017b57:	eb a7                	jmp    c0017b00 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ec>

c0017b59 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017b59:	57                   	push   edi
c0017b5a:	56                   	push   esi
c0017b5b:	53                   	push   ebx
c0017b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017b64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b68:	83 e8 06             	sub    eax,0x6
c0017b6b:	0f b7 c0             	movzx  eax,ax
c0017b6e:	50                   	push   eax
c0017b6f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017b74:	50                   	push   eax
c0017b75:	e8 d0 fa ff ff       	call   c001764a <Vm::realToLinear(unsigned short, unsigned short)>
c0017b7a:	5a                   	pop    edx
c0017b7b:	5e                   	pop    esi
c0017b7c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0017b7f:	8d 56 fa             	lea    edx,[esi-0x6]
c0017b82:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0017b85:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017b8b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0017b8e:	8d 56 02             	lea    edx,[esi+0x2]
c0017b91:	66 89 10             	mov    WORD PTR [eax],dx
c0017b94:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c0017b98:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017b9c:	66 8b 79 40          	mov    di,WORD PTR [ecx+0x40]
c0017ba0:	8b 71 40             	mov    esi,DWORD PTR [ecx+0x40]
c0017ba3:	66 89 78 04          	mov    WORD PTR [eax+0x4],di
c0017ba7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0017bad:	89 f2                	mov    edx,esi
c0017baf:	0f b6 d6             	movzx  edx,dh
c0017bb2:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0017bb6:	89 d7                	mov    edi,edx
c0017bb8:	74 36                	je     c0017bf0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x97>
c0017bba:	c1 e7 08             	shl    edi,0x8
c0017bbd:	89 f2                	mov    edx,esi
c0017bbf:	0f b6 f2             	movzx  esi,dl
c0017bc2:	09 f7                	or     edi,esi
c0017bc4:	89 fa                	mov    edx,edi
c0017bc6:	80 ce 02             	or     dh,0x2
c0017bc9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017bcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bd2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017bd6:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0017bde:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017be1:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0017be9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0017bec:	5b                   	pop    ebx
c0017bed:	5e                   	pop    esi
c0017bee:	5f                   	pop    edi
c0017bef:	c3                   	ret    
c0017bf0:	c1 e7 08             	shl    edi,0x8
c0017bf3:	89 f2                	mov    edx,esi
c0017bf5:	0f b6 f2             	movzx  esi,dl
c0017bf8:	09 f7                	or     edi,esi
c0017bfa:	89 fa                	mov    edx,edi
c0017bfc:	80 e6 fd             	and    dh,0xfd
c0017bff:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017c03:	eb c8                	jmp    c0017bcd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x74>

c0017c05 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017c05:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c0a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c0f:	c1 e0 04             	shl    eax,0x4
c0017c12:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017c15:	c3                   	ret    

c0017c16 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017c16:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c1b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c20:	c1 e0 04             	shl    eax,0x4
c0017c23:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017c27:	c3                   	ret    

c0017c28 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017c28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c2d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c32:	c1 e0 04             	shl    eax,0x4
c0017c35:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017c38:	c3                   	ret    

c0017c39 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017c39:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c3e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c43:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017c47:	c1 e0 04             	shl    eax,0x4
c0017c4a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017c4d:	c3                   	ret    

c0017c4e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017c4e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c53:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c5c:	c1 e0 04             	shl    eax,0x4
c0017c5f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017c63:	c3                   	ret    

c0017c64 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017c64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c69:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c72:	c1 e0 04             	shl    eax,0x4
c0017c75:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017c78:	c3                   	ret    

c0017c79 <Vm::faultHandler(regs*)>:
c0017c79:	55                   	push   ebp
c0017c7a:	57                   	push   edi
c0017c7b:	56                   	push   esi
c0017c7c:	53                   	push   ebx
c0017c7d:	83 ec 1c             	sub    esp,0x1c
c0017c80:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017c84:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017c88:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017c8b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017c90:	0f b7 c0             	movzx  eax,ax
c0017c93:	52                   	push   edx
c0017c94:	50                   	push   eax
c0017c95:	e8 b0 f9 ff ff       	call   c001764a <Vm::realToLinear(unsigned short, unsigned short)>
c0017c9a:	59                   	pop    ecx
c0017c9b:	5e                   	pop    esi
c0017c9c:	89 c1                	mov    ecx,eax
c0017c9e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ca5:	0f b7 e8             	movzx  ebp,ax
c0017ca8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017caf:	0f b7 f8             	movzx  edi,ax
c0017cb2:	55                   	push   ebp
c0017cb3:	57                   	push   edi
c0017cb4:	e8 91 f9 ff ff       	call   c001764a <Vm::realToLinear(unsigned short, unsigned short)>
c0017cb9:	5a                   	pop    edx
c0017cba:	5e                   	pop    esi
c0017cbb:	c6 44 24 04 06       	mov    BYTE PTR [esp+0x4],0x6
c0017cc0:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c0017cc5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0017cca:	0f b6 31             	movzx  esi,BYTE PTR [ecx]
c0017ccd:	8d 56 da             	lea    edx,[esi-0x26]
c0017cd0:	0f b6 d2             	movzx  edx,dl
c0017cd3:	81 fa d5 00 00 00    	cmp    edx,0xd5
c0017cd9:	0f 87 00 04 00 00    	ja     c00180df <Vm::faultHandler(regs*)+0x466>
c0017cdf:	ff 24 95 ac 4e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb154]
c0017ce6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ceb:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017cef:	b0 01                	mov    al,0x1
c0017cf1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017cf4:	83 c5 01             	add    ebp,0x1
c0017cf7:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0017cfa:	83 c4 1c             	add    esp,0x1c
c0017cfd:	5b                   	pop    ebx
c0017cfe:	5e                   	pop    esi
c0017cff:	5f                   	pop    edi
c0017d00:	5d                   	pop    ebp
c0017d01:	c3                   	ret    
c0017d02:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c0017d07:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017d0a:	83 c2 01             	add    edx,0x1
c0017d0d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017d10:	83 c1 01             	add    ecx,0x1
c0017d13:	eb b5                	jmp    c0017cca <Vm::faultHandler(regs*)+0x51>
c0017d15:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0017d1a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017d1d:	83 c6 01             	add    esi,0x1
c0017d20:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017d23:	eb eb                	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0017d25:	c6 44 24 04 05       	mov    BYTE PTR [esp+0x4],0x5
c0017d2a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017d2d:	83 c6 01             	add    esi,0x1
c0017d30:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017d33:	eb db                	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0017d35:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c0017d3a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017d3d:	83 c2 01             	add    edx,0x1
c0017d40:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017d43:	eb cb                	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0017d45:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c0017d4a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017d4d:	83 c6 01             	add    esi,0x1
c0017d50:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017d53:	eb bb                	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0017d55:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0017d5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017d5d:	83 c2 01             	add    edx,0x1
c0017d60:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017d63:	eb ab                	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0017d65:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0017d6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017d6d:	83 c2 01             	add    edx,0x1
c0017d70:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017d73:	eb 9b                	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0017d75:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0017d7a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017d7d:	83 c6 01             	add    esi,0x1
c0017d80:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017d83:	eb 8b                	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0017d85:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0017d8a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017d8d:	74 0d                	je     c0017d9c <Vm::faultHandler(regs*)+0x123>
c0017d8f:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017d96:	0f 87 be 06 00 00    	ja     c001845a <Vm::faultHandler(regs*)+0x7e1>
c0017d9c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017da0:	83 ec 0c             	sub    esp,0xc
c0017da3:	0f b7 f6             	movzx  esi,si
c0017da6:	50                   	push   eax
c0017da7:	e8 59 f8 ff ff       	call   c0017605 <Vm::inbv(unsigned short)>
c0017dac:	83 c4 0c             	add    esp,0xc
c0017daf:	0f b6 c0             	movzx  eax,al
c0017db2:	50                   	push   eax
c0017db3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017db7:	50                   	push   eax
c0017db8:	56                   	push   esi
c0017db9:	e8 7b fe ff ff       	call   c0017c39 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017dbe:	83 c4 10             	add    esp,0x10
c0017dc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017dc4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017dc8:	0f 84 0a 06 00 00    	je     c00183d8 <Vm::faultHandler(regs*)+0x75f>
c0017dce:	83 e8 01             	sub    eax,0x1
c0017dd1:	0f b7 c0             	movzx  eax,ax
c0017dd4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017dd7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0017dda:	83 c0 01             	add    eax,0x1
c0017ddd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017de0:	83 c4 1c             	add    esp,0x1c
c0017de3:	b0 01                	mov    al,0x1
c0017de5:	5b                   	pop    ebx
c0017de6:	5e                   	pop    esi
c0017de7:	5f                   	pop    edi
c0017de8:	5d                   	pop    ebp
c0017de9:	c3                   	ret    
c0017dea:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0017def:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017df2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017df5:	0f 85 a0 04 00 00    	jne    c001829b <Vm::faultHandler(regs*)+0x622>
c0017dfb:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0017e00:	0f b7 c8             	movzx  ecx,ax
c0017e03:	0f b7 f6             	movzx  esi,si
c0017e06:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017e09:	0f 84 69 05 00 00    	je     c0018378 <Vm::faultHandler(regs*)+0x6ff>
c0017e0f:	ed                   	in     eax,dx
c0017e10:	83 ec 04             	sub    esp,0x4
c0017e13:	50                   	push   eax
c0017e14:	51                   	push   ecx
c0017e15:	56                   	push   esi
c0017e16:	e8 49 fe ff ff       	call   c0017c64 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017e21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017e25:	0f 84 d1 05 00 00    	je     c00183fc <Vm::faultHandler(regs*)+0x783>
c0017e2b:	83 e8 04             	sub    eax,0x4
c0017e2e:	25 ff ff 00 00       	and    eax,0xffff
c0017e33:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017e36:	eb 9f                	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c0017e38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017e3d:	83 f8 06             	cmp    eax,0x6
c0017e40:	0f 87 66 03 00 00    	ja     c00181ac <Vm::faultHandler(regs*)+0x533>
c0017e46:	ff 24 85 04 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdadfc]
c0017e4d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017e52:	83 f8 06             	cmp    eax,0x6
c0017e55:	0f 87 f5 02 00 00    	ja     c0018150 <Vm::faultHandler(regs*)+0x4d7>
c0017e5b:	ff 24 85 20 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdade0]
c0017e62:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017e66:	83 ec 08             	sub    esp,0x8
c0017e69:	50                   	push   eax
c0017e6a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017e6e:	50                   	push   eax
c0017e6f:	e8 a4 f7 ff ff       	call   c0017618 <Vm::outbv(unsigned short, unsigned char)>
c0017e74:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0017e77:	83 c4 10             	add    esp,0x10
c0017e7a:	83 c0 02             	add    eax,0x2
c0017e7d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017e80:	b0 01                	mov    al,0x1
c0017e82:	e9 73 fe ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c0017e87:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017e8b:	3d ee 00 00 00       	cmp    eax,0xee
c0017e90:	0f 84 62 04 00 00    	je     c00182f8 <Vm::faultHandler(regs*)+0x67f>
c0017e96:	83 ec 0c             	sub    esp,0xc
c0017e99:	55                   	push   ebp
c0017e9a:	57                   	push   edi
c0017e9b:	51                   	push   ecx
c0017e9c:	50                   	push   eax
c0017e9d:	53                   	push   ebx
c0017e9e:	e8 b6 fc ff ff       	call   c0017b59 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017ea3:	83 c4 20             	add    esp,0x20
c0017ea6:	b0 01                	mov    al,0x1
c0017ea8:	e9 4d fe ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c0017ead:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017eb1:	89 d1                	mov    ecx,edx
c0017eb3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017eb6:	c1 e1 08             	shl    ecx,0x8
c0017eb9:	09 ca                	or     edx,ecx
c0017ebb:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017ebe:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017ec2:	89 d1                	mov    ecx,edx
c0017ec4:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017ec8:	c1 e1 08             	shl    ecx,0x8
c0017ecb:	09 ca                	or     edx,ecx
c0017ecd:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017ed0:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017ed4:	89 d1                	mov    ecx,edx
c0017ed6:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017eda:	c1 e1 08             	shl    ecx,0x8
c0017edd:	09 ca                	or     edx,ecx
c0017edf:	81 ca 00 02 02 00    	or     edx,0x20200
c0017ee5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017ee8:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017eec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017ef2:	d1 e8                	shr    eax,1
c0017ef4:	83 e0 01             	and    eax,0x1
c0017ef7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0017efa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017efd:	83 c0 06             	add    eax,0x6
c0017f00:	25 ff ff 00 00       	and    eax,0xffff
c0017f05:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017f08:	b0 01                	mov    al,0x1
c0017f0a:	e9 eb fd ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c0017f0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017f12:	83 ec 0c             	sub    esp,0xc
c0017f15:	b0 00                	mov    al,0x0
c0017f17:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017f1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017f1e:	50                   	push   eax
c0017f1f:	e8 e1 f6 ff ff       	call   c0017605 <Vm::inbv(unsigned short)>
c0017f24:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017f2d:	83 c1 02             	add    ecx,0x2
c0017f30:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0017f33:	0f b6 c0             	movzx  eax,al
c0017f36:	09 c2                	or     edx,eax
c0017f38:	b0 01                	mov    al,0x1
c0017f3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0017f3d:	e9 b8 fd ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c0017f42:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0017f47:	0f 85 8a 03 00 00    	jne    c00182d7 <Vm::faultHandler(regs*)+0x65e>
c0017f4d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017f50:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0017f56:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017f59:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017f5d:	66 ed                	in     ax,dx
c0017f5f:	0f b7 c0             	movzx  eax,ax
c0017f62:	09 f0                	or     eax,esi
c0017f64:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017f67:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0017f6a:	83 c0 02             	add    eax,0x2
c0017f6d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017f70:	83 c4 1c             	add    esp,0x1c
c0017f73:	b0 01                	mov    al,0x1
c0017f75:	5b                   	pop    ebx
c0017f76:	5e                   	pop    esi
c0017f77:	5f                   	pop    edi
c0017f78:	5d                   	pop    ebp
c0017f79:	c3                   	ret    
c0017f7a:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0017f7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017f82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f86:	0f 84 e3 02 00 00    	je     c001826f <Vm::faultHandler(regs*)+0x5f6>
c0017f8c:	83 ea 04             	sub    edx,0x4
c0017f8f:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0017f95:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017f9b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017f9e:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c0017fa1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017fa7:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0017fab:	0f 84 26 fe ff ff    	je     c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c0017fb1:	80 cd 02             	or     ch,0x2
c0017fb4:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c0017fb7:	e9 1b fe ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c0017fbc:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0017fc1:	0f 84 77 02 00 00    	je     c001823e <Vm::faultHandler(regs*)+0x5c5>
c0017fc7:	8b 10                	mov    edx,DWORD PTR [eax]
c0017fc9:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017fcf:	81 ca 00 02 02 00    	or     edx,0x20200
c0017fd5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fda:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017fe0:	c1 e8 09             	shr    eax,0x9
c0017fe3:	83 e0 01             	and    eax,0x1
c0017fe6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0017fe9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017fec:	83 c0 04             	add    eax,0x4
c0017fef:	25 ff ff 00 00       	and    eax,0xffff
c0017ff4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017ff7:	e9 db fd ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c0017ffc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018000:	83 ec 08             	sub    esp,0x8
c0018003:	50                   	push   eax
c0018004:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018008:	50                   	push   eax
c0018009:	e8 0a f6 ff ff       	call   c0017618 <Vm::outbv(unsigned short, unsigned char)>
c001800e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018011:	83 c4 10             	add    esp,0x10
c0018014:	b0 01                	mov    al,0x1
c0018016:	83 c2 01             	add    edx,0x1
c0018019:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001801c:	e9 d9 fc ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c0018021:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018026:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018029:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001802c:	0f 84 b8 02 00 00    	je     c00182ea <Vm::faultHandler(regs*)+0x671>
c0018032:	ef                   	out    dx,eax
c0018033:	e9 9f fd ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c0018038:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001803b:	83 c2 01             	add    edx,0x1
c001803e:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018041:	e9 ca fc ff ff       	jmp    c0017d10 <Vm::faultHandler(regs*)+0x97>
c0018046:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001804b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001804f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018052:	83 c0 01             	add    eax,0x1
c0018055:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018058:	b0 01                	mov    al,0x1
c001805a:	e9 9b fc ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c001805f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018062:	83 ec 0c             	sub    esp,0xc
c0018065:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018069:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c001806f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018072:	50                   	push   eax
c0018073:	e8 8d f5 ff ff       	call   c0017605 <Vm::inbv(unsigned short)>
c0018078:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018081:	83 c5 01             	add    ebp,0x1
c0018084:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018087:	0f b6 c0             	movzx  eax,al
c001808a:	09 c7                	or     edi,eax
c001808c:	b0 01                	mov    al,0x1
c001808e:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018091:	e9 64 fc ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c0018096:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001809b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001809e:	0f 85 40 02 00 00    	jne    c00182e4 <Vm::faultHandler(regs*)+0x66b>
c00180a4:	66 ed                	in     ax,dx
c00180a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00180a9:	0f b7 c0             	movzx  eax,ax
c00180ac:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c00180b2:	09 d0                	or     eax,edx
c00180b4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00180b7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00180ba:	b0 01                	mov    al,0x1
c00180bc:	83 c1 01             	add    ecx,0x1
c00180bf:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00180c2:	e9 33 fc ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c00180c7:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00180cc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00180cf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00180d3:	0f 84 18 02 00 00    	je     c00182f1 <Vm::faultHandler(regs*)+0x678>
c00180d9:	ef                   	out    dx,eax
c00180da:	e9 88 fe ff ff       	jmp    c0017f67 <Vm::faultHandler(regs*)+0x2ee>
c00180df:	89 f0                	mov    eax,esi
c00180e1:	0f b6 f0             	movzx  esi,al
c00180e4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00180e8:	50                   	push   eax
c00180e9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00180ed:	50                   	push   eax
c00180ee:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00180f2:	50                   	push   eax
c00180f3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00180f7:	50                   	push   eax
c00180f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00180fc:	50                   	push   eax
c00180fd:	56                   	push   esi
c00180fe:	56                   	push   esi
c00180ff:	68 7c 4e 02 c0       	push   0xc0024e7c
c0018104:	e8 5d ee fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018109:	83 c4 20             	add    esp,0x20
c001810c:	83 ec 0c             	sub    esp,0xc
c001810f:	6a 60                	push   0x60
c0018111:	e8 ef f4 ff ff       	call   c0017605 <Vm::inbv(unsigned short)>
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	0f b6 c0             	movzx  eax,al
c001811c:	83 f8 1c             	cmp    eax,0x1c
c001811f:	74 17                	je     c0018138 <Vm::faultHandler(regs*)+0x4bf>
c0018121:	83 f8 5a             	cmp    eax,0x5a
c0018124:	75 e6                	jne    c001810c <Vm::faultHandler(regs*)+0x493>
c0018126:	eb 10                	jmp    c0018138 <Vm::faultHandler(regs*)+0x4bf>
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	6a 60                	push   0x60
c001812d:	e8 d3 f4 ff ff       	call   c0017605 <Vm::inbv(unsigned short)>
c0018132:	83 c4 10             	add    esp,0x10
c0018135:	0f b6 c0             	movzx  eax,al
c0018138:	83 f8 1c             	cmp    eax,0x1c
c001813b:	74 eb                	je     c0018128 <Vm::faultHandler(regs*)+0x4af>
c001813d:	83 f8 5a             	cmp    eax,0x5a
c0018140:	74 e6                	je     c0018128 <Vm::faultHandler(regs*)+0x4af>
c0018142:	31 c0                	xor    eax,eax
c0018144:	e9 b1 fb ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c0018149:	8b 03                	mov    eax,DWORD PTR [ebx]
c001814b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018150:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018155:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018158:	0f 85 a3 00 00 00    	jne    c0018201 <Vm::faultHandler(regs*)+0x588>
c001815e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018161:	0f b7 c6             	movzx  eax,si
c0018164:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0018169:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001816c:	81 e1 00 04 00 00    	and    ecx,0x400
c0018172:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018177:	0f 84 2b 02 00 00    	je     c00183a8 <Vm::faultHandler(regs*)+0x72f>
c001817d:	83 ec 08             	sub    esp,0x8
c0018180:	50                   	push   eax
c0018181:	52                   	push   edx
c0018182:	e8 a1 fa ff ff       	call   c0017c28 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	89 fa                	mov    edx,edi
c001818c:	ef                   	out    dx,eax
c001818d:	85 c9                	test   ecx,ecx
c001818f:	0f 84 77 02 00 00    	je     c001840c <Vm::faultHandler(regs*)+0x793>
c0018195:	8d 46 fc             	lea    eax,[esi-0x4]
c0018198:	25 ff ff 00 00       	and    eax,0xffff
c001819d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00181a0:	e9 32 fc ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c00181a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181a7:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00181ac:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00181b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00181b4:	74 0b                	je     c00181c1 <Vm::faultHandler(regs*)+0x548>
c00181b6:	3d ff ff 00 00       	cmp    eax,0xffff
c00181bb:	0f 87 68 02 00 00    	ja     c0018429 <Vm::faultHandler(regs*)+0x7b0>
c00181c1:	83 ec 08             	sub    esp,0x8
c00181c4:	0f b7 c0             	movzx  eax,ax
c00181c7:	50                   	push   eax
c00181c8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00181cd:	50                   	push   eax
c00181ce:	e8 32 fa ff ff       	call   c0017c05 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00181d3:	5e                   	pop    esi
c00181d4:	5f                   	pop    edi
c00181d5:	0f b6 c0             	movzx  eax,al
c00181d8:	50                   	push   eax
c00181d9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00181dd:	50                   	push   eax
c00181de:	e8 35 f4 ff ff       	call   c0017618 <Vm::outbv(unsigned short, unsigned char)>
c00181e3:	83 c4 10             	add    esp,0x10
c00181e6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00181e9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00181ed:	0f 84 da 01 00 00    	je     c00183cd <Vm::faultHandler(regs*)+0x754>
c00181f3:	83 e8 01             	sub    eax,0x1
c00181f6:	0f b7 c0             	movzx  eax,ax
c00181f9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00181fc:	e9 d6 fb ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c0018201:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0018207:	0f 86 51 ff ff ff    	jbe    c001815e <Vm::faultHandler(regs*)+0x4e5>
c001820d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018211:	50                   	push   eax
c0018212:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018216:	50                   	push   eax
c0018217:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001821b:	50                   	push   eax
c001821c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018220:	50                   	push   eax
c0018221:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018225:	50                   	push   eax
c0018226:	6a 6f                	push   0x6f
c0018228:	6a 6f                	push   0x6f
c001822a:	68 4c 4e 02 c0       	push   0xc0024e4c
c001822f:	e8 32 ed fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018234:	83 c4 20             	add    esp,0x20
c0018237:	31 c0                	xor    eax,eax
c0018239:	e9 bc fa ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c001823e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018241:	81 ca 00 02 02 00    	or     edx,0x20200
c0018247:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001824a:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001824d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018253:	c1 e8 09             	shr    eax,0x9
c0018256:	83 e0 01             	and    eax,0x1
c0018259:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001825c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001825f:	83 c0 02             	add    eax,0x2
c0018262:	25 ff ff 00 00       	and    eax,0xffff
c0018267:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001826a:	e9 68 fb ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c001826f:	83 ea 02             	sub    edx,0x2
c0018272:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018278:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001827b:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c001827f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018285:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0018289:	0f 84 54 01 00 00    	je     c00183e3 <Vm::faultHandler(regs*)+0x76a>
c001828f:	80 cd 02             	or     ch,0x2
c0018292:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c0018296:	e9 3c fb ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c001829b:	3d ff ff 00 00       	cmp    eax,0xffff
c00182a0:	0f 86 55 fb ff ff    	jbe    c0017dfb <Vm::faultHandler(regs*)+0x182>
c00182a6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182aa:	50                   	push   eax
c00182ab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00182af:	50                   	push   eax
c00182b0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00182b4:	50                   	push   eax
c00182b5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00182b9:	50                   	push   eax
c00182ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00182be:	50                   	push   eax
c00182bf:	6a 6d                	push   0x6d
c00182c1:	6a 6d                	push   0x6d
c00182c3:	68 4c 4e 02 c0       	push   0xc0024e4c
c00182c8:	e8 99 ec fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00182cd:	83 c4 20             	add    esp,0x20
c00182d0:	31 c0                	xor    eax,eax
c00182d2:	e9 23 fa ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c00182d7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00182db:	ed                   	in     eax,dx
c00182dc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00182df:	e9 83 fc ff ff       	jmp    c0017f67 <Vm::faultHandler(regs*)+0x2ee>
c00182e4:	ed                   	in     eax,dx
c00182e5:	e9 ca fd ff ff       	jmp    c00180b4 <Vm::faultHandler(regs*)+0x43b>
c00182ea:	66 ef                	out    dx,ax
c00182ec:	e9 e6 fa ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c00182f1:	66 ef                	out    dx,ax
c00182f3:	e9 6f fc ff ff       	jmp    c0017f67 <Vm::faultHandler(regs*)+0x2ee>
c00182f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00182fb:	83 ec 0c             	sub    esp,0xc
c00182fe:	50                   	push   eax
c00182ff:	e8 b8 f3 ff ff       	call   c00176bc <Vm::mainloop3(unsigned long)>
c0018304:	83 c4 10             	add    esp,0x10
c0018307:	b0 01                	mov    al,0x1
c0018309:	e9 ec f9 ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c001830e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0018311:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018316:	e9 35 fe ff ff       	jmp    c0018150 <Vm::faultHandler(regs*)+0x4d7>
c001831b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001831e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018323:	e9 28 fe ff ff       	jmp    c0018150 <Vm::faultHandler(regs*)+0x4d7>
c0018328:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001832b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018330:	e9 1b fe ff ff       	jmp    c0018150 <Vm::faultHandler(regs*)+0x4d7>
c0018335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018339:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001833e:	e9 0d fe ff ff       	jmp    c0018150 <Vm::faultHandler(regs*)+0x4d7>
c0018343:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0018346:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001834b:	e9 5c fe ff ff       	jmp    c00181ac <Vm::faultHandler(regs*)+0x533>
c0018350:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0018353:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018358:	e9 4f fe ff ff       	jmp    c00181ac <Vm::faultHandler(regs*)+0x533>
c001835d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018360:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018365:	e9 42 fe ff ff       	jmp    c00181ac <Vm::faultHandler(regs*)+0x533>
c001836a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001836e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018373:	e9 34 fe ff ff       	jmp    c00181ac <Vm::faultHandler(regs*)+0x533>
c0018378:	66 ed                	in     ax,dx
c001837a:	83 ec 04             	sub    esp,0x4
c001837d:	0f b7 c0             	movzx  eax,ax
c0018380:	50                   	push   eax
c0018381:	51                   	push   ecx
c0018382:	56                   	push   esi
c0018383:	e8 c6 f8 ff ff       	call   c0017c4e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018388:	83 c4 10             	add    esp,0x10
c001838b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001838e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018392:	0f 84 84 00 00 00    	je     c001841c <Vm::faultHandler(regs*)+0x7a3>
c0018398:	83 e8 02             	sub    eax,0x2
c001839b:	25 ff ff 00 00       	and    eax,0xffff
c00183a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00183a3:	e9 2f fa ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c00183a8:	83 ec 08             	sub    esp,0x8
c00183ab:	50                   	push   eax
c00183ac:	52                   	push   edx
c00183ad:	e8 64 f8 ff ff       	call   c0017c16 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00183b2:	83 c4 10             	add    esp,0x10
c00183b5:	89 fa                	mov    edx,edi
c00183b7:	66 ef                	out    dx,ax
c00183b9:	85 c9                	test   ecx,ecx
c00183bb:	74 32                	je     c00183ef <Vm::faultHandler(regs*)+0x776>
c00183bd:	8d 46 fe             	lea    eax,[esi-0x2]
c00183c0:	25 ff ff 00 00       	and    eax,0xffff
c00183c5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00183c8:	e9 0a fa ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c00183cd:	83 c0 01             	add    eax,0x1
c00183d0:	0f b7 c0             	movzx  eax,ax
c00183d3:	e9 21 fe ff ff       	jmp    c00181f9 <Vm::faultHandler(regs*)+0x580>
c00183d8:	83 c0 01             	add    eax,0x1
c00183db:	0f b7 c0             	movzx  eax,ax
c00183de:	e9 f1 f9 ff ff       	jmp    c0017dd4 <Vm::faultHandler(regs*)+0x15b>
c00183e3:	80 e5 fd             	and    ch,0xfd
c00183e6:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c00183ea:	e9 e8 f9 ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c00183ef:	8d 46 02             	lea    eax,[esi+0x2]
c00183f2:	25 ff ff 00 00       	and    eax,0xffff
c00183f7:	e9 fd fd ff ff       	jmp    c00181f9 <Vm::faultHandler(regs*)+0x580>
c00183fc:	83 c0 04             	add    eax,0x4
c00183ff:	25 ff ff 00 00       	and    eax,0xffff
c0018404:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018407:	e9 cb f9 ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c001840c:	8d 46 04             	lea    eax,[esi+0x4]
c001840f:	25 ff ff 00 00       	and    eax,0xffff
c0018414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018417:	e9 bb f9 ff ff       	jmp    c0017dd7 <Vm::faultHandler(regs*)+0x15e>
c001841c:	83 c0 02             	add    eax,0x2
c001841f:	25 ff ff 00 00       	and    eax,0xffff
c0018424:	e9 ab f9 ff ff       	jmp    c0017dd4 <Vm::faultHandler(regs*)+0x15b>
c0018429:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001842d:	50                   	push   eax
c001842e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018432:	50                   	push   eax
c0018433:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018437:	50                   	push   eax
c0018438:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001843c:	50                   	push   eax
c001843d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018441:	50                   	push   eax
c0018442:	6a 6e                	push   0x6e
c0018444:	6a 6e                	push   0x6e
c0018446:	68 4c 4e 02 c0       	push   0xc0024e4c
c001844b:	e8 16 eb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018450:	83 c4 20             	add    esp,0x20
c0018453:	31 c0                	xor    eax,eax
c0018455:	e9 a0 f8 ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c001845a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001845e:	50                   	push   eax
c001845f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018463:	50                   	push   eax
c0018464:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018468:	50                   	push   eax
c0018469:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001846d:	50                   	push   eax
c001846e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018472:	50                   	push   eax
c0018473:	6a 6c                	push   0x6c
c0018475:	6a 6c                	push   0x6c
c0018477:	68 4c 4e 02 c0       	push   0xc0024e4c
c001847c:	e8 e5 ea fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018481:	83 c4 20             	add    esp,0x20
c0018484:	31 c0                	xor    eax,eax
c0018486:	e9 6f f8 ff ff       	jmp    c0017cfa <Vm::faultHandler(regs*)+0x81>
c001848b:	90                   	nop

c001848c <IOAPIC::close(int, int, void*)>:
c001848c:	b8 00 00 00 00       	mov    eax,0x0
c0018491:	c3                   	ret    

c0018492 <apicGetBase()>:
c0018492:	55                   	push   ebp
c0018493:	89 e5                	mov    ebp,esp
c0018495:	83 ec 18             	sub    esp,0x18
c0018498:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001849d:	83 e0 08             	and    eax,0x8
c00184a0:	0f b6 c0             	movzx  eax,al
c00184a3:	85 c0                	test   eax,eax
c00184a5:	75 07                	jne    c00184ae <apicGetBase()+0x1c>
c00184a7:	b8 00 00 00 00       	mov    eax,0x0
c00184ac:	eb 1b                	jmp    c00184c9 <apicGetBase()+0x37>
c00184ae:	83 ec 0c             	sub    esp,0xc
c00184b1:	6a 1b                	push   0x1b
c00184b3:	e8 63 15 00 00       	call   c0019a1b <x86rdmsr(unsigned int)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00184be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00184c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00184c4:	25 00 00 ff ff       	and    eax,0xffff0000
c00184c9:	c9                   	leave  
c00184ca:	c3                   	ret    
c00184cb:	90                   	nop

c00184cc <IOAPIC::IOAPIC()>:
c00184cc:	83 ec 0c             	sub    esp,0xc
c00184cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d3:	83 ec 08             	sub    esp,0x8
c00184d6:	68 3c 52 02 c0       	push   0xc002523c
c00184db:	50                   	push   eax
c00184dc:	e8 77 16 ff ff       	call   c0009b58 <Device::Device(char const*)>
c00184e1:	83 c4 10             	add    esp,0x10
c00184e4:	ba 5c 52 02 c0       	mov    edx,0xc002525c
c00184e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ed:	89 10                	mov    DWORD PTR [eax],edx
c00184ef:	90                   	nop
c00184f0:	83 c4 0c             	add    esp,0xc
c00184f3:	c3                   	ret    

c00184f4 <apicOpen()>:
c00184f4:	55                   	push   ebp
c00184f5:	89 e5                	mov    ebp,esp
c00184f7:	53                   	push   ebx
c00184f8:	83 ec 34             	sub    esp,0x34
c00184fb:	83 ec 0c             	sub    esp,0xc
c00184fe:	68 44 52 02 c0       	push   0xc0025244
c0018503:	e8 5e ea fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018508:	83 c4 10             	add    esp,0x10
c001850b:	a0 40 cb 02 c0       	mov    al,ds:0xc002cb40
c0018510:	83 f0 01             	xor    eax,0x1
c0018513:	0f b6 c0             	movzx  eax,al
c0018516:	85 c0                	test   eax,eax
c0018518:	0f 84 a3 00 00 00    	je     c00185c1 <apicOpen()+0xcd>
c001851e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018522:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0018527:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001852b:	0f b6 c0             	movzx  eax,al
c001852e:	39 c2                	cmp    edx,eax
c0018530:	0f 83 84 00 00 00    	jae    c00185ba <apicOpen()+0xc6>
c0018536:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001853d:	83 ec 0c             	sub    esp,0xc
c0018540:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018543:	e8 6c 71 ff ff       	call   c000f6b4 <malloc>
c0018548:	83 c4 10             	add    esp,0x10
c001854b:	89 c3                	mov    ebx,eax
c001854d:	83 ec 0c             	sub    esp,0xc
c0018550:	53                   	push   ebx
c0018551:	e8 76 ff ff ff       	call   c00184cc <IOAPIC::IOAPIC()>
c0018556:	83 c4 10             	add    esp,0x10
c0018559:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001855c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018560:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018563:	89 14 85 20 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd34e0],edx
c001856a:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001856f:	83 c0 01             	add    eax,0x1
c0018572:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c0018577:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001857c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018582:	83 ec 08             	sub    esp,0x8
c0018585:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018588:	50                   	push   eax
c0018589:	e8 68 14 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c001858e:	83 c4 10             	add    esp,0x10
c0018591:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018594:	8b 00                	mov    eax,DWORD PTR [eax]
c0018596:	83 c0 08             	add    eax,0x8
c0018599:	8b 00                	mov    eax,DWORD PTR [eax]
c001859b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001859f:	6a 00                	push   0x0
c00185a1:	6a 00                	push   0x0
c00185a3:	52                   	push   edx
c00185a4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00185a7:	ff d0                	call   eax
c00185a9:	83 c4 10             	add    esp,0x10
c00185ac:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c00185af:	83 c0 01             	add    eax,0x1
c00185b2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c00185b5:	e9 68 ff ff ff       	jmp    c0018522 <apicOpen()+0x2e>
c00185ba:	c6 05 40 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb40,0x1
c00185c1:	e8 cc fe ff ff       	call   c0018492 <apicGetBase()>
c00185c6:	05 f0 00 00 00       	add    eax,0xf0
c00185cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00185ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00185d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00185d3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00185d6:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00185dd:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00185e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00185e7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00185ea:	89 10                	mov    DWORD PTR [eax],edx
c00185ec:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00185f3:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00185f8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00185fb:	7d 7c                	jge    c0018679 <apicOpen()+0x185>
c00185fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018600:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0018607:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001860a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001860d:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0018614:	c1 e8 08             	shr    eax,0x8
c0018617:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001861b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001861e:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0018625:	c1 e8 18             	shr    eax,0x18
c0018628:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001862b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001862f:	3d ff 00 00 00       	cmp    eax,0xff
c0018634:	75 3a                	jne    c0018670 <apicOpen()+0x17c>
c0018636:	e8 57 fe ff ff       	call   c0018492 <apicGetBase()>
c001863b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001863f:	83 fa 01             	cmp    edx,0x1
c0018642:	75 07                	jne    c001864b <apicOpen()+0x157>
c0018644:	ba 60 03 00 00       	mov    edx,0x360
c0018649:	eb 05                	jmp    c0018650 <apicOpen()+0x15c>
c001864b:	ba 50 03 00 00       	mov    edx,0x350
c0018650:	01 d0                	add    eax,edx
c0018652:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018655:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018658:	8b 00                	mov    eax,DWORD PTR [eax]
c001865a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001865d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018664:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018668:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001866b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001866e:	89 10                	mov    DWORD PTR [eax],edx
c0018670:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018674:	e9 7a ff ff ff       	jmp    c00185f3 <apicOpen()+0xff>
c0018679:	90                   	nop
c001867a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001867d:	c9                   	leave  
c001867e:	c3                   	ret    
c001867f:	90                   	nop

c0018680 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018680:	55                   	push   ebp
c0018681:	89 e5                	mov    ebp,esp
c0018683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018686:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001868c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001868f:	72 1d                	jb     c00186ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018694:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001869a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001869d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00186a3:	01 d0                	add    eax,edx
c00186a5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00186a8:	73 04                	jae    c00186ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00186aa:	b0 01                	mov    al,0x1
c00186ac:	eb 02                	jmp    c00186b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00186ae:	b0 00                	mov    al,0x0
c00186b0:	5d                   	pop    ebp
c00186b1:	c3                   	ret    

c00186b2 <IOAPIC::read(int)>:
c00186b2:	55                   	push   ebp
c00186b3:	89 e5                	mov    ebp,esp
c00186b5:	83 ec 10             	sub    esp,0x10
c00186b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00186c1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00186c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00186c7:	0f b6 d0             	movzx  edx,al
c00186ca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00186cd:	89 10                	mov    DWORD PTR [eax],edx
c00186cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00186d2:	83 c0 10             	add    eax,0x10
c00186d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00186d7:	c9                   	leave  
c00186d8:	c3                   	ret    
c00186d9:	90                   	nop

c00186da <IOAPIC::open(int, int, void*)>:
c00186da:	55                   	push   ebp
c00186db:	89 e5                	mov    ebp,esp
c00186dd:	57                   	push   edi
c00186de:	56                   	push   esi
c00186df:	53                   	push   ebx
c00186e0:	83 ec 04             	sub    esp,0x4
c00186e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00186e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00186ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00186f8:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c00186ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018702:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001870b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018711:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0018718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001871b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018724:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001872a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001872d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018733:	0f b6 f0             	movzx  esi,al
c0018736:	89 d0                	mov    eax,edx
c0018738:	ba 00 00 00 00       	mov    edx,0x0
c001873d:	89 c7                	mov    edi,eax
c001873f:	83 e7 ff             	and    edi,0xffffffff
c0018742:	89 f9                	mov    ecx,edi
c0018744:	0f b6 da             	movzx  ebx,dl
c0018747:	89 c8                	mov    eax,ecx
c0018749:	89 da                	mov    edx,ebx
c001874b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001874e:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018751:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018755:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018759:	83 e0 00             	and    eax,0x0
c001875c:	09 d0                	or     eax,edx
c001875e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018765:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001876b:	8d 50 01             	lea    edx,[eax+0x1]
c001876e:	88 d1                	mov    cl,dl
c0018770:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018773:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018779:	0f b6 d0             	movzx  edx,al
c001877c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001877f:	83 c2 08             	add    edx,0x8
c0018782:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018786:	0f b6 c9             	movzx  ecx,cl
c0018789:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001878f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018793:	6a 01                	push   0x1
c0018795:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018798:	e8 15 ff ff ff       	call   c00186b2 <IOAPIC::read(int)>
c001879d:	83 c4 08             	add    esp,0x8
c00187a0:	c1 f8 10             	sar    eax,0x10
c00187a3:	0f b6 c0             	movzx  eax,al
c00187a6:	8d 50 01             	lea    edx,[eax+0x1]
c00187a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ac:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00187b2:	b8 00 00 00 00       	mov    eax,0x0
c00187b7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00187ba:	5b                   	pop    ebx
c00187bb:	5e                   	pop    esi
c00187bc:	5f                   	pop    edi
c00187bd:	5d                   	pop    ebp
c00187be:	c3                   	ret    
c00187bf:	90                   	nop

c00187c0 <IOAPIC::write(int, int)>:
c00187c0:	55                   	push   ebp
c00187c1:	89 e5                	mov    ebp,esp
c00187c3:	83 ec 10             	sub    esp,0x10
c00187c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00187cf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00187d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00187d5:	0f b6 d0             	movzx  edx,al
c00187d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00187db:	89 10                	mov    DWORD PTR [eax],edx
c00187dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00187e0:	8d 50 10             	lea    edx,[eax+0x10]
c00187e3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00187e6:	89 02                	mov    DWORD PTR [edx],eax
c00187e8:	90                   	nop
c00187e9:	c9                   	leave  
c00187ea:	c3                   	ret    
c00187eb:	90                   	nop

c00187ec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00187ec:	55                   	push   ebp
c00187ed:	89 e5                	mov    ebp,esp
c00187ef:	53                   	push   ebx
c00187f0:	83 ec 2c             	sub    esp,0x2c
c00187f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00187f6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00187f9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00187fc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00187ff:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018802:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018805:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018808:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001880b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001880e:	88 d8                	mov    al,bl
c0018810:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018813:	88 c8                	mov    al,cl
c0018815:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018818:	88 d0                	mov    al,dl
c001881a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001881d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018821:	83 c0 08             	add    eax,0x8
c0018824:	d1 e0                	shl    eax,1
c0018826:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018829:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001882d:	83 c0 08             	add    eax,0x8
c0018830:	d1 e0                	shl    eax,1
c0018832:	83 c0 01             	add    eax,0x1
c0018835:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018838:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001883b:	50                   	push   eax
c001883c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001883f:	e8 6e fe ff ff       	call   c00186b2 <IOAPIC::read(int)>
c0018844:	83 c4 08             	add    esp,0x8
c0018847:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001884a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018851:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018854:	c1 e0 18             	shl    eax,0x18
c0018857:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001885a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001885d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018860:	52                   	push   edx
c0018861:	50                   	push   eax
c0018862:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018865:	e8 56 ff ff ff       	call   c00187c0 <IOAPIC::write(int, int)>
c001886a:	83 c4 0c             	add    esp,0xc
c001886d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018870:	50                   	push   eax
c0018871:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018874:	e8 39 fe ff ff       	call   c00186b2 <IOAPIC::read(int)>
c0018879:	83 c4 08             	add    esp,0x8
c001887c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001887f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018886:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001888d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018894:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018898:	85 c0                	test   eax,eax
c001889a:	74 09                	je     c00188a5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001889c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00188a3:	eb 07                	jmp    c00188ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c00188a5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00188ac:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c00188b0:	85 c0                	test   eax,eax
c00188b2:	74 09                	je     c00188bd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c00188b4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00188bb:	eb 07                	jmp    c00188c4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c00188bd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00188c4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00188cb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00188cf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00188d2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00188d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00188d8:	52                   	push   edx
c00188d9:	50                   	push   eax
c00188da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00188dd:	e8 de fe ff ff       	call   c00187c0 <IOAPIC::write(int, int)>
c00188e2:	83 c4 0c             	add    esp,0xc
c00188e5:	90                   	nop
c00188e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00188e9:	c9                   	leave  
c00188ea:	c3                   	ret    
c00188eb:	90                   	nop

c00188ec <noCopro(unsigned long)>:
c00188ec:	c3                   	ret    

c00188ed <HalRestart()>:
c00188ed:	e4 64                	in     al,0x64
c00188ef:	a8 02                	test   al,0x2
c00188f1:	75 fa                	jne    c00188ed <HalRestart()>
c00188f3:	b0 fe                	mov    al,0xfe
c00188f5:	e6 64                	out    0x64,al
c00188f7:	c3                   	ret    

c00188f8 <HalShutdown()>:
c00188f8:	c3                   	ret    

c00188f9 <HalSleep()>:
c00188f9:	c3                   	ret    

c00188fa <CPU::close(int, int, void*)>:
c00188fa:	31 c0                	xor    eax,eax
c00188fc:	c3                   	ret    

c00188fd <x86ReadCMOS(unsigned char)>:
c00188fd:	83 ec 14             	sub    esp,0x14
c0018900:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018904:	88 04 24             	mov    BYTE PTR [esp],al
c0018907:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c001890c:	0f b6 c0             	movzx  eax,al
c001890f:	85 c0                	test   eax,eax
c0018911:	74 04                	je     c0018917 <x86ReadCMOS(unsigned char)+0x1a>
c0018913:	b2 00                	mov    dl,0x0
c0018915:	eb 02                	jmp    c0018919 <x86ReadCMOS(unsigned char)+0x1c>
c0018917:	b2 80                	mov    dl,0x80
c0018919:	8a 04 24             	mov    al,BYTE PTR [esp]
c001891c:	09 d0                	or     eax,edx
c001891e:	0f b6 c0             	movzx  eax,al
c0018921:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018928:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001892c:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018930:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018935:	ee                   	out    dx,al
c0018936:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c001893d:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018942:	89 c2                	mov    edx,eax
c0018944:	ec                   	in     al,dx
c0018945:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018949:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001894d:	83 c4 14             	add    esp,0x14
c0018950:	c3                   	ret    

c0018951 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018951:	83 ec 18             	sub    esp,0x18
c0018954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018958:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001895c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018960:	88 d0                	mov    al,dl
c0018962:	88 04 24             	mov    BYTE PTR [esp],al
c0018965:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c001896a:	0f b6 c0             	movzx  eax,al
c001896d:	85 c0                	test   eax,eax
c001896f:	74 04                	je     c0018975 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018971:	b2 00                	mov    dl,0x0
c0018973:	eb 02                	jmp    c0018977 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0018975:	b2 80                	mov    dl,0x80
c0018977:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001897b:	09 d0                	or     eax,edx
c001897d:	0f b6 c0             	movzx  eax,al
c0018980:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018987:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001898b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001898f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018994:	ee                   	out    dx,al
c0018995:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018999:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c00189a0:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00189a4:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00189a8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00189ad:	ee                   	out    dx,al
c00189ae:	90                   	nop
c00189af:	83 c4 18             	add    esp,0x18
c00189b2:	c3                   	ret    

c00189b3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00189b3:	60                   	pusha  
c00189b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189c0:	9c                   	pushf  
c00189c1:	fa                   	cli    
c00189c2:	0f 09                	wbinvd 
c00189c4:	0f 30                	wrmsr  
c00189c6:	9d                   	popf   
c00189c7:	89 c2                	mov    edx,eax
c00189c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189cd:	89 10                	mov    DWORD PTR [eax],edx
c00189cf:	61                   	popa   
c00189d0:	90                   	nop
c00189d1:	c3                   	ret    

c00189d2 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00189d2:	60                   	pusha  
c00189d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189d7:	89 c1                	mov    ecx,eax
c00189d9:	9c                   	pushf  
c00189da:	fa                   	cli    
c00189db:	0f 09                	wbinvd 
c00189dd:	31 c0                	xor    eax,eax
c00189df:	31 d2                	xor    edx,edx
c00189e1:	0f 32                	rdmsr  
c00189e3:	9d                   	popf   
c00189e4:	89 c2                	mov    edx,eax
c00189e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189ea:	89 10                	mov    DWORD PTR [eax],edx
c00189ec:	61                   	popa   
c00189ed:	90                   	nop
c00189ee:	c3                   	ret    

c00189ef <AMD_K6_writeback(int, int, int)>:
c00189ef:	83 ec 20             	sub    esp,0x20
c00189f2:	a1 70 c1 02 c0       	mov    eax,ds:0xc002c170
c00189f7:	c1 e8 14             	shr    eax,0x14
c00189fa:	c1 e8 02             	shr    eax,0x2
c00189fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a01:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018a06:	0f 85 9e 00 00 00    	jne    c0018aaa <AMD_K6_writeback(int, int, int)+0xbb>
c0018a0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a14:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018a19:	75 19                	jne    c0018a34 <AMD_K6_writeback(int, int, int)+0x45>
c0018a1b:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018a20:	7f 0a                	jg     c0018a2c <AMD_K6_writeback(int, int, int)+0x3d>
c0018a22:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018a2a:	eb 08                	jmp    c0018a34 <AMD_K6_writeback(int, int, int)+0x45>
c0018a2c:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018a34:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018a39:	7c 6e                	jl     c0018aa9 <AMD_K6_writeback(int, int, int)+0xba>
c0018a3b:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018a40:	7e 09                	jle    c0018a4b <AMD_K6_writeback(int, int, int)+0x5c>
c0018a42:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018a47:	74 36                	je     c0018a7f <AMD_K6_writeback(int, int, int)+0x90>
c0018a49:	eb 5e                	jmp    c0018aa9 <AMD_K6_writeback(int, int, int)+0xba>
c0018a4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a4f:	50                   	push   eax
c0018a50:	68 82 00 00 c0       	push   0xc0000082
c0018a55:	e8 78 ff ff ff       	call   c00189d2 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018a5a:	83 c4 08             	add    esp,0x8
c0018a5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a61:	d1 e0                	shl    eax,1
c0018a63:	83 e0 7f             	and    eax,0x7f
c0018a66:	89 c2                	mov    edx,eax
c0018a68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a6c:	50                   	push   eax
c0018a6d:	6a 00                	push   0x0
c0018a6f:	52                   	push   edx
c0018a70:	68 82 00 00 c0       	push   0xc0000082
c0018a75:	e8 39 ff ff ff       	call   c00189b3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018a7a:	83 c4 10             	add    esp,0x10
c0018a7d:	eb 2b                	jmp    c0018aaa <AMD_K6_writeback(int, int, int)+0xbb>
c0018a7f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a83:	50                   	push   eax
c0018a84:	68 82 00 00 c0       	push   0xc0000082
c0018a89:	e8 44 ff ff ff       	call   c00189d2 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018a8e:	83 c4 08             	add    esp,0x8
c0018a91:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a95:	50                   	push   eax
c0018a96:	6a 00                	push   0x0
c0018a98:	6a 00                	push   0x0
c0018a9a:	68 82 00 00 c0       	push   0xc0000082
c0018a9f:	e8 0f ff ff ff       	call   c00189b3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018aa4:	83 c4 10             	add    esp,0x10
c0018aa7:	eb 01                	jmp    c0018aaa <AMD_K6_writeback(int, int, int)+0xbb>
c0018aa9:	90                   	nop
c0018aaa:	90                   	nop
c0018aab:	83 c4 20             	add    esp,0x20
c0018aae:	c3                   	ret    

c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018aaf:	56                   	push   esi
c0018ab0:	53                   	push   ebx
c0018ab1:	a1 20 6b 02 c0       	mov    eax,ds:0xc0026b20
c0018ab6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018aba:	75 32                	jne    c0018aee <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018abc:	8b 15 60 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb60
c0018ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ac6:	89 10                	mov    DWORD PTR [eax],edx
c0018ac8:	8b 15 5c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb5c
c0018ace:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ad2:	89 10                	mov    DWORD PTR [eax],edx
c0018ad4:	8b 15 58 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb58
c0018ada:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ade:	89 10                	mov    DWORD PTR [eax],edx
c0018ae0:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0018ae6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018aea:	89 10                	mov    DWORD PTR [eax],edx
c0018aec:	eb 5c                	jmp    c0018b4a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018af2:	ba 00 00 00 00       	mov    edx,0x0
c0018af7:	89 d1                	mov    ecx,edx
c0018af9:	0f a2                	cpuid  
c0018afb:	89 c6                	mov    esi,eax
c0018afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b01:	89 30                	mov    DWORD PTR [eax],esi
c0018b03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b07:	89 18                	mov    DWORD PTR [eax],ebx
c0018b09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b0d:	89 08                	mov    DWORD PTR [eax],ecx
c0018b0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b13:	89 10                	mov    DWORD PTR [eax],edx
c0018b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b19:	a3 20 6b 02 c0       	mov    ds:0xc0026b20,eax
c0018b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b24:	a3 60 cb 02 c0       	mov    ds:0xc002cb60,eax
c0018b29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b2f:	a3 5c cb 02 c0       	mov    ds:0xc002cb5c,eax
c0018b34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b3a:	a3 58 cb 02 c0       	mov    ds:0xc002cb58,eax
c0018b3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b45:	a3 54 cb 02 c0       	mov    ds:0xc002cb54,eax
c0018b4a:	5b                   	pop    ebx
c0018b4b:	5e                   	pop    esi
c0018b4c:	c3                   	ret    

c0018b4d <cpuidCheckEDX(unsigned int)>:
c0018b4d:	83 ec 10             	sub    esp,0x10
c0018b50:	89 e0                	mov    eax,esp
c0018b52:	50                   	push   eax
c0018b53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b57:	50                   	push   eax
c0018b58:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b5c:	50                   	push   eax
c0018b5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b61:	50                   	push   eax
c0018b62:	6a 01                	push   0x1
c0018b64:	e8 46 ff ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b69:	83 c4 14             	add    esp,0x14
c0018b6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018b6f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018b73:	0f 95 c0             	setne  al
c0018b76:	83 c4 10             	add    esp,0x10
c0018b79:	c3                   	ret    

c0018b7a <cpuidCheckECX(unsigned int)>:
c0018b7a:	83 ec 10             	sub    esp,0x10
c0018b7d:	89 e0                	mov    eax,esp
c0018b7f:	50                   	push   eax
c0018b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b84:	50                   	push   eax
c0018b85:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b89:	50                   	push   eax
c0018b8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b8e:	50                   	push   eax
c0018b8f:	6a 01                	push   0x1
c0018b91:	e8 19 ff ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b96:	83 c4 14             	add    esp,0x14
c0018b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b9d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018ba1:	0f 95 c0             	setne  al
c0018ba4:	83 c4 10             	add    esp,0x10
c0018ba7:	c3                   	ret    

c0018ba8 <cpuidCheckExtendedEBX(unsigned int)>:
c0018ba8:	83 ec 10             	sub    esp,0x10
c0018bab:	89 e0                	mov    eax,esp
c0018bad:	50                   	push   eax
c0018bae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018bb2:	50                   	push   eax
c0018bb3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bb7:	50                   	push   eax
c0018bb8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018bbc:	50                   	push   eax
c0018bbd:	6a 07                	push   0x7
c0018bbf:	e8 eb fe ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bc4:	83 c4 14             	add    esp,0x14
c0018bc7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bcb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018bcf:	0f 95 c0             	setne  al
c0018bd2:	83 c4 10             	add    esp,0x10
c0018bd5:	c3                   	ret    

c0018bd6 <cpuidCheckExtendedECX(unsigned int)>:
c0018bd6:	83 ec 10             	sub    esp,0x10
c0018bd9:	89 e0                	mov    eax,esp
c0018bdb:	50                   	push   eax
c0018bdc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018be0:	50                   	push   eax
c0018be1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018be5:	50                   	push   eax
c0018be6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018bea:	50                   	push   eax
c0018beb:	6a 07                	push   0x7
c0018bed:	e8 bd fe ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bf2:	83 c4 14             	add    esp,0x14
c0018bf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018bf9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018bfd:	0f 95 c0             	setne  al
c0018c00:	83 c4 10             	add    esp,0x10
c0018c03:	c3                   	ret    

c0018c04 <HalDetectFeatures()>:
c0018c04:	57                   	push   edi
c0018c05:	56                   	push   esi
c0018c06:	53                   	push   ebx
c0018c07:	81 ec 90 00 00 00    	sub    esp,0x90
c0018c0d:	83 ec 04             	sub    esp,0x4
c0018c10:	6a 08                	push   0x8
c0018c12:	6a 00                	push   0x0
c0018c14:	68 8c cb 02 c0       	push   0xc002cb8c
c0018c19:	e8 d2 78 fe ff       	call   c00004f0 <memset>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018c26:	83 c8 04             	or     eax,0x4
c0018c29:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018c2e:	83 ec 0c             	sub    esp,0xc
c0018c31:	68 80 52 02 c0       	push   0xc0025280
c0018c36:	e8 2b e3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	e8 b6 75 fe ff       	call   c00001f9 <detectCPUID>
c0018c43:	85 c0                	test   eax,eax
c0018c45:	0f 95 c0             	setne  al
c0018c48:	83 e0 01             	and    eax,0x1
c0018c4b:	83 e0 01             	and    eax,0x1
c0018c4e:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018c51:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018c56:	83 e0 fd             	and    eax,0xfffffffd
c0018c59:	88 c2                	mov    dl,al
c0018c5b:	88 c8                	mov    al,cl
c0018c5d:	09 d0                	or     eax,edx
c0018c5f:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018c64:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018c69:	83 e0 02             	and    eax,0x2
c0018c6c:	0f b6 c0             	movzx  eax,al
c0018c6f:	85 c0                	test   eax,eax
c0018c71:	0f 84 84 02 00 00    	je     c0018efb <HalDetectFeatures()+0x2f7>
c0018c77:	83 ec 0c             	sub    esp,0xc
c0018c7a:	6a 20                	push   0x20
c0018c7c:	e8 cc fe ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	83 e0 01             	and    eax,0x1
c0018c87:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018c8e:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018c93:	83 e0 f7             	and    eax,0xfffffff7
c0018c96:	88 c2                	mov    dl,al
c0018c98:	88 c8                	mov    al,cl
c0018c9a:	09 d0                	or     eax,edx
c0018c9c:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018ca1:	83 ec 0c             	sub    esp,0xc
c0018ca4:	68 00 00 00 04       	push   0x4000000
c0018ca9:	e8 9f fe ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018cae:	83 c4 10             	add    esp,0x10
c0018cb1:	89 c1                	mov    ecx,eax
c0018cb3:	83 e1 01             	and    ecx,0x1
c0018cb6:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018cbb:	83 e0 fe             	and    eax,0xfffffffe
c0018cbe:	88 c2                	mov    dl,al
c0018cc0:	88 c8                	mov    al,cl
c0018cc2:	09 d0                	or     eax,edx
c0018cc4:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018cc9:	83 ec 0c             	sub    esp,0xc
c0018ccc:	68 80 00 00 00       	push   0x80
c0018cd1:	e8 77 fe ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018cd6:	83 c4 10             	add    esp,0x10
c0018cd9:	89 c1                	mov    ecx,eax
c0018cdb:	c1 e1 07             	shl    ecx,0x7
c0018cde:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018ce3:	83 e0 7f             	and    eax,0x7f
c0018ce6:	88 c2                	mov    dl,al
c0018ce8:	88 c8                	mov    al,cl
c0018cea:	09 d0                	or     eax,edx
c0018cec:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018cf1:	83 ec 0c             	sub    esp,0xc
c0018cf4:	68 00 00 80 00       	push   0x800000
c0018cf9:	e8 4f fe ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	83 e0 01             	and    eax,0x1
c0018d04:	89 c1                	mov    ecx,eax
c0018d06:	c1 e1 05             	shl    ecx,0x5
c0018d09:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d0e:	83 e0 df             	and    eax,0xffffffdf
c0018d11:	88 c2                	mov    dl,al
c0018d13:	88 c8                	mov    al,cl
c0018d15:	09 d0                	or     eax,edx
c0018d17:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018d1c:	83 ec 0c             	sub    esp,0xc
c0018d1f:	6a 01                	push   0x1
c0018d21:	e8 9e 44 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018d26:	83 c4 10             	add    esp,0x10
c0018d29:	0f b6 c0             	movzx  eax,al
c0018d2c:	85 c0                	test   eax,eax
c0018d2e:	75 17                	jne    c0018d47 <HalDetectFeatures()+0x143>
c0018d30:	83 ec 0c             	sub    esp,0xc
c0018d33:	68 00 04 00 00       	push   0x400
c0018d38:	e8 87 44 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	0f b6 c0             	movzx  eax,al
c0018d43:	85 c0                	test   eax,eax
c0018d45:	74 04                	je     c0018d4b <HalDetectFeatures()+0x147>
c0018d47:	b0 01                	mov    al,0x1
c0018d49:	eb 02                	jmp    c0018d4d <HalDetectFeatures()+0x149>
c0018d4b:	b0 00                	mov    al,0x0
c0018d4d:	0f b6 c0             	movzx  eax,al
c0018d50:	85 c0                	test   eax,eax
c0018d52:	74 0f                	je     c0018d63 <HalDetectFeatures()+0x15f>
c0018d54:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d59:	83 e0 fe             	and    eax,0xfffffffe
c0018d5c:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018d61:	eb 28                	jmp    c0018d8b <HalDetectFeatures()+0x187>
c0018d63:	83 ec 0c             	sub    esp,0xc
c0018d66:	68 00 02 00 00       	push   0x200
c0018d6b:	e8 dd fd ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018d70:	83 c4 10             	add    esp,0x10
c0018d73:	89 c1                	mov    ecx,eax
c0018d75:	83 e1 01             	and    ecx,0x1
c0018d78:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d7d:	83 e0 fe             	and    eax,0xfffffffe
c0018d80:	88 c2                	mov    dl,al
c0018d82:	88 c8                	mov    al,cl
c0018d84:	09 d0                	or     eax,edx
c0018d86:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018d8b:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d90:	83 e0 01             	and    eax,0x1
c0018d93:	0f b6 c0             	movzx  eax,al
c0018d96:	85 c0                	test   eax,eax
c0018d98:	74 1c                	je     c0018db6 <HalDetectFeatures()+0x1b2>
c0018d9a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d9f:	83 e0 08             	and    eax,0x8
c0018da2:	0f b6 c0             	movzx  eax,al
c0018da5:	85 c0                	test   eax,eax
c0018da7:	75 0d                	jne    c0018db6 <HalDetectFeatures()+0x1b2>
c0018da9:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018dae:	83 e0 fe             	and    eax,0xfffffffe
c0018db1:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018db6:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018dbe:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018dc6:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018dce:	85 c0                	test   eax,eax
c0018dd0:	0f 84 ab 00 00 00    	je     c0018e81 <HalDetectFeatures()+0x27d>
c0018dd6:	83 ec 0c             	sub    esp,0xc
c0018dd9:	6a 01                	push   0x1
c0018ddb:	e8 9a fd ff ff       	call   c0018b7a <cpuidCheckECX(unsigned int)>
c0018de0:	83 c4 10             	add    esp,0x10
c0018de3:	83 e0 01             	and    eax,0x1
c0018de6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018de9:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018dee:	83 e0 fd             	and    eax,0xfffffffd
c0018df1:	88 c2                	mov    dl,al
c0018df3:	88 c8                	mov    al,cl
c0018df5:	09 d0                	or     eax,edx
c0018df7:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018dfc:	83 ec 0c             	sub    esp,0xc
c0018dff:	68 00 02 00 00       	push   0x200
c0018e04:	e8 71 fd ff ff       	call   c0018b7a <cpuidCheckECX(unsigned int)>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	83 e0 01             	and    eax,0x1
c0018e0f:	89 c1                	mov    ecx,eax
c0018e11:	c1 e1 04             	shl    ecx,0x4
c0018e14:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018e19:	83 e0 ef             	and    eax,0xffffffef
c0018e1c:	88 c2                	mov    dl,al
c0018e1e:	88 c8                	mov    al,cl
c0018e20:	09 d0                	or     eax,edx
c0018e22:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018e27:	83 ec 0c             	sub    esp,0xc
c0018e2a:	68 00 00 08 00       	push   0x80000
c0018e2f:	e8 46 fd ff ff       	call   c0018b7a <cpuidCheckECX(unsigned int)>
c0018e34:	83 c4 10             	add    esp,0x10
c0018e37:	83 e0 01             	and    eax,0x1
c0018e3a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018e41:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018e46:	83 e0 fb             	and    eax,0xfffffffb
c0018e49:	88 c2                	mov    dl,al
c0018e4b:	88 c8                	mov    al,cl
c0018e4d:	09 d0                	or     eax,edx
c0018e4f:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018e54:	83 ec 0c             	sub    esp,0xc
c0018e57:	68 00 00 10 00       	push   0x100000
c0018e5c:	e8 19 fd ff ff       	call   c0018b7a <cpuidCheckECX(unsigned int)>
c0018e61:	83 c4 10             	add    esp,0x10
c0018e64:	83 e0 01             	and    eax,0x1
c0018e67:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018e6e:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018e73:	83 e0 f7             	and    eax,0xfffffff7
c0018e76:	88 c2                	mov    dl,al
c0018e78:	88 c8                	mov    al,cl
c0018e7a:	09 d0                	or     eax,edx
c0018e7c:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018e81:	83 ec 0c             	sub    esp,0xc
c0018e84:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e88:	50                   	push   eax
c0018e89:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018e8d:	50                   	push   eax
c0018e8e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018e92:	50                   	push   eax
c0018e93:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018e97:	50                   	push   eax
c0018e98:	68 00 00 00 80       	push   0x80000000
c0018e9d:	e8 0d fc ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ea2:	83 c4 20             	add    esp,0x20
c0018ea5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ea9:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018eae:	76 4b                	jbe    c0018efb <HalDetectFeatures()+0x2f7>
c0018eb0:	83 ec 0c             	sub    esp,0xc
c0018eb3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018eb7:	50                   	push   eax
c0018eb8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018ebc:	50                   	push   eax
c0018ebd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018ec1:	50                   	push   eax
c0018ec2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018ec6:	50                   	push   eax
c0018ec7:	68 01 00 00 80       	push   0x80000001
c0018ecc:	e8 de fb ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ed1:	83 c4 20             	add    esp,0x20
c0018ed4:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018ed9:	83 e0 bf             	and    eax,0xffffffbf
c0018edc:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018ee1:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018ee6:	83 e0 fd             	and    eax,0xfffffffd
c0018ee9:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018eee:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018ef3:	83 e0 fe             	and    eax,0xfffffffe
c0018ef6:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018efb:	83 ec 0c             	sub    esp,0xc
c0018efe:	68 00 04 00 00       	push   0x400
c0018f03:	e8 bc 42 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	0f b6 c0             	movzx  eax,al
c0018f0e:	85 c0                	test   eax,eax
c0018f10:	74 0d                	je     c0018f1f <HalDetectFeatures()+0x31b>
c0018f12:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f17:	83 e0 fb             	and    eax,0xfffffffb
c0018f1a:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018f1f:	c6 05 88 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb88,0x1
c0018f26:	83 ec 04             	sub    esp,0x4
c0018f29:	6a 0d                	push   0xd
c0018f2b:	6a 00                	push   0x0
c0018f2d:	68 70 cb 02 c0       	push   0xc002cb70
c0018f32:	e8 b9 75 fe ff       	call   c00004f0 <memset>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f3f:	83 e0 02             	and    eax,0x2
c0018f42:	0f b6 c0             	movzx  eax,al
c0018f45:	85 c0                	test   eax,eax
c0018f47:	0f 84 16 08 00 00    	je     c0019763 <HalDetectFeatures()+0xb5f>
c0018f4d:	83 ec 0c             	sub    esp,0xc
c0018f50:	6a 10                	push   0x10
c0018f52:	e8 f6 fb ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018f57:	83 c4 10             	add    esp,0x10
c0018f5a:	83 e0 01             	and    eax,0x1
c0018f5d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018f64:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018f69:	83 e0 f7             	and    eax,0xfffffff7
c0018f6c:	88 c2                	mov    dl,al
c0018f6e:	88 c8                	mov    al,cl
c0018f70:	09 d0                	or     eax,edx
c0018f72:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018f77:	83 ec 0c             	sub    esp,0xc
c0018f7a:	6a 40                	push   0x40
c0018f7c:	e8 cc fb ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	83 e0 01             	and    eax,0x1
c0018f87:	89 c1                	mov    ecx,eax
c0018f89:	c1 e1 04             	shl    ecx,0x4
c0018f8c:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018f91:	83 e0 ef             	and    eax,0xffffffef
c0018f94:	88 c2                	mov    dl,al
c0018f96:	88 c8                	mov    al,cl
c0018f98:	09 d0                	or     eax,edx
c0018f9a:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018f9f:	83 ec 0c             	sub    esp,0xc
c0018fa2:	6a 08                	push   0x8
c0018fa4:	e8 a4 fb ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018fa9:	83 c4 10             	add    esp,0x10
c0018fac:	83 e0 01             	and    eax,0x1
c0018faf:	89 c1                	mov    ecx,eax
c0018fb1:	c1 e1 05             	shl    ecx,0x5
c0018fb4:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018fb9:	83 e0 df             	and    eax,0xffffffdf
c0018fbc:	88 c2                	mov    dl,al
c0018fbe:	88 c8                	mov    al,cl
c0018fc0:	09 d0                	or     eax,edx
c0018fc2:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018fc7:	83 ec 0c             	sub    esp,0xc
c0018fca:	68 00 20 00 00       	push   0x2000
c0018fcf:	e8 79 fb ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018fd4:	83 c4 10             	add    esp,0x10
c0018fd7:	83 e0 01             	and    eax,0x1
c0018fda:	89 c1                	mov    ecx,eax
c0018fdc:	c1 e1 06             	shl    ecx,0x6
c0018fdf:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018fe4:	83 e0 bf             	and    eax,0xffffffbf
c0018fe7:	88 c2                	mov    dl,al
c0018fe9:	88 c8                	mov    al,cl
c0018feb:	09 d0                	or     eax,edx
c0018fed:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018ff2:	83 ec 0c             	sub    esp,0xc
c0018ff5:	68 00 00 01 00       	push   0x10000
c0018ffa:	e8 4e fb ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	89 c1                	mov    ecx,eax
c0019004:	c1 e1 07             	shl    ecx,0x7
c0019007:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001900c:	83 e0 7f             	and    eax,0x7f
c001900f:	88 c2                	mov    dl,al
c0019011:	88 c8                	mov    al,cl
c0019013:	09 d0                	or     eax,edx
c0019015:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c001901a:	83 ec 0c             	sub    esp,0xc
c001901d:	6a 01                	push   0x1
c001901f:	e8 29 fb ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0019024:	83 c4 10             	add    esp,0x10
c0019027:	83 e0 01             	and    eax,0x1
c001902a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019031:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019036:	83 e0 f7             	and    eax,0xfffffff7
c0019039:	88 c2                	mov    dl,al
c001903b:	88 c8                	mov    al,cl
c001903d:	09 d0                	or     eax,edx
c001903f:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	68 00 08 00 00       	push   0x800
c001904c:	e8 fc fa ff ff       	call   c0018b4d <cpuidCheckEDX(unsigned int)>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	89 c1                	mov    ecx,eax
c0019056:	83 e1 01             	and    ecx,0x1
c0019059:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001905e:	83 e0 fe             	and    eax,0xfffffffe
c0019061:	88 c2                	mov    dl,al
c0019063:	88 c8                	mov    al,cl
c0019065:	09 d0                	or     eax,edx
c0019067:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001906c:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019071:	83 e0 40             	and    eax,0x40
c0019074:	0f b6 c0             	movzx  eax,al
c0019077:	85 c0                	test   eax,eax
c0019079:	74 0a                	je     c0019085 <HalDetectFeatures()+0x481>
c001907b:	c7 05 68 cb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002cb68,0x100
c0019085:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001908a:	83 e0 80             	and    eax,0xffffff80
c001908d:	0f b6 c0             	movzx  eax,al
c0019090:	85 c0                	test   eax,eax
c0019092:	74 0a                	je     c001909e <HalDetectFeatures()+0x49a>
c0019094:	c7 05 64 cb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002cb64,0x80
c001909e:	83 ec 0c             	sub    esp,0xc
c00190a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190a5:	50                   	push   eax
c00190a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190aa:	50                   	push   eax
c00190ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00190af:	50                   	push   eax
c00190b0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00190b4:	50                   	push   eax
c00190b5:	6a 00                	push   0x0
c00190b7:	e8 f3 f9 ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190bc:	83 c4 20             	add    esp,0x20
c00190bf:	c7 44 24 48 70 cb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002cb70
c00190c7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00190cb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00190cf:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00190d7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00190db:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00190df:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00190e3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00190e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00190eb:	89 c6                	mov    esi,eax
c00190ed:	89 d7                	mov    edi,edx
c00190ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190f1:	89 c8                	mov    eax,ecx
c00190f3:	89 fa                	mov    edx,edi
c00190f5:	89 f3                	mov    ebx,esi
c00190f7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00190fb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00190ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019103:	b8 74 cb 02 c0       	mov    eax,0xc002cb74
c0019108:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001910c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019110:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019114:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001911c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019120:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019124:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019128:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001912c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019130:	89 c6                	mov    esi,eax
c0019132:	89 d7                	mov    edi,edx
c0019134:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019136:	89 c8                	mov    eax,ecx
c0019138:	89 fa                	mov    edx,edi
c001913a:	89 f3                	mov    ebx,esi
c001913c:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019140:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019144:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019148:	b8 78 cb 02 c0       	mov    eax,0xc002cb78
c001914d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019154:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019158:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001915c:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019164:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001916b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001916f:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019173:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001917a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001917e:	89 c6                	mov    esi,eax
c0019180:	89 d7                	mov    edi,edx
c0019182:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019184:	89 c8                	mov    eax,ecx
c0019186:	89 fa                	mov    edx,edi
c0019188:	89 f3                	mov    ebx,esi
c001918a:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001918e:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019192:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019196:	83 ec 08             	sub    esp,0x8
c0019199:	68 95 52 02 c0       	push   0xc0025295
c001919e:	68 70 cb 02 c0       	push   0xc002cb70
c00191a3:	e8 d8 75 fe ff       	call   c0000780 <strcmp>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	85 c0                	test   eax,eax
c00191ad:	74 19                	je     c00191c8 <HalDetectFeatures()+0x5c4>
c00191af:	83 ec 08             	sub    esp,0x8
c00191b2:	68 a2 52 02 c0       	push   0xc00252a2
c00191b7:	68 70 cb 02 c0       	push   0xc002cb70
c00191bc:	e8 bf 75 fe ff       	call   c0000780 <strcmp>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	85 c0                	test   eax,eax
c00191c6:	75 04                	jne    c00191cc <HalDetectFeatures()+0x5c8>
c00191c8:	b0 01                	mov    al,0x1
c00191ca:	eb 02                	jmp    c00191ce <HalDetectFeatures()+0x5ca>
c00191cc:	b0 00                	mov    al,0x0
c00191ce:	0f b6 c0             	movzx  eax,al
c00191d1:	85 c0                	test   eax,eax
c00191d3:	74 0f                	je     c00191e4 <HalDetectFeatures()+0x5e0>
c00191d5:	c7 05 84 cb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x2
c00191df:	e9 0d 03 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c00191e4:	83 ec 08             	sub    esp,0x8
c00191e7:	68 af 52 02 c0       	push   0xc00252af
c00191ec:	68 70 cb 02 c0       	push   0xc002cb70
c00191f1:	e8 8a 75 fe ff       	call   c0000780 <strcmp>
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	85 c0                	test   eax,eax
c00191fb:	74 19                	je     c0019216 <HalDetectFeatures()+0x612>
c00191fd:	83 ec 08             	sub    esp,0x8
c0019200:	68 bc 52 02 c0       	push   0xc00252bc
c0019205:	68 70 cb 02 c0       	push   0xc002cb70
c001920a:	e8 71 75 fe ff       	call   c0000780 <strcmp>
c001920f:	83 c4 10             	add    esp,0x10
c0019212:	85 c0                	test   eax,eax
c0019214:	75 04                	jne    c001921a <HalDetectFeatures()+0x616>
c0019216:	b0 01                	mov    al,0x1
c0019218:	eb 02                	jmp    c001921c <HalDetectFeatures()+0x618>
c001921a:	b0 00                	mov    al,0x0
c001921c:	0f b6 c0             	movzx  eax,al
c001921f:	85 c0                	test   eax,eax
c0019221:	74 0f                	je     c0019232 <HalDetectFeatures()+0x62e>
c0019223:	c7 05 84 cb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x4
c001922d:	e9 bf 02 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019232:	83 ec 08             	sub    esp,0x8
c0019235:	68 c9 52 02 c0       	push   0xc00252c9
c001923a:	68 70 cb 02 c0       	push   0xc002cb70
c001923f:	e8 3c 75 fe ff       	call   c0000780 <strcmp>
c0019244:	83 c4 10             	add    esp,0x10
c0019247:	85 c0                	test   eax,eax
c0019249:	74 19                	je     c0019264 <HalDetectFeatures()+0x660>
c001924b:	83 ec 08             	sub    esp,0x8
c001924e:	68 d6 52 02 c0       	push   0xc00252d6
c0019253:	68 70 cb 02 c0       	push   0xc002cb70
c0019258:	e8 23 75 fe ff       	call   c0000780 <strcmp>
c001925d:	83 c4 10             	add    esp,0x10
c0019260:	85 c0                	test   eax,eax
c0019262:	75 04                	jne    c0019268 <HalDetectFeatures()+0x664>
c0019264:	b0 01                	mov    al,0x1
c0019266:	eb 02                	jmp    c001926a <HalDetectFeatures()+0x666>
c0019268:	b0 00                	mov    al,0x0
c001926a:	0f b6 c0             	movzx  eax,al
c001926d:	85 c0                	test   eax,eax
c001926f:	74 0f                	je     c0019280 <HalDetectFeatures()+0x67c>
c0019271:	c7 05 84 cb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x5
c001927b:	e9 71 02 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019280:	83 ec 08             	sub    esp,0x8
c0019283:	68 e3 52 02 c0       	push   0xc00252e3
c0019288:	68 70 cb 02 c0       	push   0xc002cb70
c001928d:	e8 ee 74 fe ff       	call   c0000780 <strcmp>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	85 c0                	test   eax,eax
c0019297:	0f 94 c0             	sete   al
c001929a:	0f b6 c0             	movzx  eax,al
c001929d:	85 c0                	test   eax,eax
c001929f:	74 0f                	je     c00192b0 <HalDetectFeatures()+0x6ac>
c00192a1:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c00192ab:	e9 41 02 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c00192b0:	83 ec 08             	sub    esp,0x8
c00192b3:	68 f0 52 02 c0       	push   0xc00252f0
c00192b8:	68 70 cb 02 c0       	push   0xc002cb70
c00192bd:	e8 be 74 fe ff       	call   c0000780 <strcmp>
c00192c2:	83 c4 10             	add    esp,0x10
c00192c5:	85 c0                	test   eax,eax
c00192c7:	0f 94 c0             	sete   al
c00192ca:	0f b6 c0             	movzx  eax,al
c00192cd:	85 c0                	test   eax,eax
c00192cf:	74 0f                	je     c00192e0 <HalDetectFeatures()+0x6dc>
c00192d1:	c7 05 84 cb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x3
c00192db:	e9 11 02 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c00192e0:	83 ec 08             	sub    esp,0x8
c00192e3:	68 af 52 02 c0       	push   0xc00252af
c00192e8:	68 70 cb 02 c0       	push   0xc002cb70
c00192ed:	e8 8e 74 fe ff       	call   c0000780 <strcmp>
c00192f2:	83 c4 10             	add    esp,0x10
c00192f5:	85 c0                	test   eax,eax
c00192f7:	0f 94 c0             	sete   al
c00192fa:	0f b6 c0             	movzx  eax,al
c00192fd:	85 c0                	test   eax,eax
c00192ff:	74 0f                	je     c0019310 <HalDetectFeatures()+0x70c>
c0019301:	c7 05 84 cb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x6
c001930b:	e9 e1 01 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019310:	83 ec 08             	sub    esp,0x8
c0019313:	68 fd 52 02 c0       	push   0xc00252fd
c0019318:	68 70 cb 02 c0       	push   0xc002cb70
c001931d:	e8 5e 74 fe ff       	call   c0000780 <strcmp>
c0019322:	83 c4 10             	add    esp,0x10
c0019325:	85 c0                	test   eax,eax
c0019327:	0f 94 c0             	sete   al
c001932a:	0f b6 c0             	movzx  eax,al
c001932d:	85 c0                	test   eax,eax
c001932f:	74 0f                	je     c0019340 <HalDetectFeatures()+0x73c>
c0019331:	c7 05 84 cb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x7
c001933b:	e9 b1 01 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019340:	83 ec 08             	sub    esp,0x8
c0019343:	68 0a 53 02 c0       	push   0xc002530a
c0019348:	68 70 cb 02 c0       	push   0xc002cb70
c001934d:	e8 2e 74 fe ff       	call   c0000780 <strcmp>
c0019352:	83 c4 10             	add    esp,0x10
c0019355:	85 c0                	test   eax,eax
c0019357:	0f 94 c0             	sete   al
c001935a:	0f b6 c0             	movzx  eax,al
c001935d:	85 c0                	test   eax,eax
c001935f:	74 0f                	je     c0019370 <HalDetectFeatures()+0x76c>
c0019361:	c7 05 84 cb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x8
c001936b:	e9 81 01 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019370:	83 ec 08             	sub    esp,0x8
c0019373:	68 17 53 02 c0       	push   0xc0025317
c0019378:	68 70 cb 02 c0       	push   0xc002cb70
c001937d:	e8 fe 73 fe ff       	call   c0000780 <strcmp>
c0019382:	83 c4 10             	add    esp,0x10
c0019385:	85 c0                	test   eax,eax
c0019387:	0f 94 c0             	sete   al
c001938a:	0f b6 c0             	movzx  eax,al
c001938d:	85 c0                	test   eax,eax
c001938f:	74 0f                	je     c00193a0 <HalDetectFeatures()+0x79c>
c0019391:	c7 05 84 cb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x9
c001939b:	e9 51 01 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c00193a0:	83 ec 08             	sub    esp,0x8
c00193a3:	68 24 53 02 c0       	push   0xc0025324
c00193a8:	68 70 cb 02 c0       	push   0xc002cb70
c00193ad:	e8 ce 73 fe ff       	call   c0000780 <strcmp>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	85 c0                	test   eax,eax
c00193b7:	0f 94 c0             	sete   al
c00193ba:	0f b6 c0             	movzx  eax,al
c00193bd:	85 c0                	test   eax,eax
c00193bf:	74 0f                	je     c00193d0 <HalDetectFeatures()+0x7cc>
c00193c1:	c7 05 84 cb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xa
c00193cb:	e9 21 01 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c00193d0:	83 ec 08             	sub    esp,0x8
c00193d3:	68 31 53 02 c0       	push   0xc0025331
c00193d8:	68 70 cb 02 c0       	push   0xc002cb70
c00193dd:	e8 9e 73 fe ff       	call   c0000780 <strcmp>
c00193e2:	83 c4 10             	add    esp,0x10
c00193e5:	85 c0                	test   eax,eax
c00193e7:	0f 94 c0             	sete   al
c00193ea:	0f b6 c0             	movzx  eax,al
c00193ed:	85 c0                	test   eax,eax
c00193ef:	74 0f                	je     c0019400 <HalDetectFeatures()+0x7fc>
c00193f1:	c7 05 84 cb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xb
c00193fb:	e9 f1 00 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019400:	83 ec 08             	sub    esp,0x8
c0019403:	68 3e 53 02 c0       	push   0xc002533e
c0019408:	68 70 cb 02 c0       	push   0xc002cb70
c001940d:	e8 6e 73 fe ff       	call   c0000780 <strcmp>
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	85 c0                	test   eax,eax
c0019417:	0f 94 c0             	sete   al
c001941a:	0f b6 c0             	movzx  eax,al
c001941d:	85 c0                	test   eax,eax
c001941f:	74 0f                	je     c0019430 <HalDetectFeatures()+0x82c>
c0019421:	c7 05 84 cb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xc
c001942b:	e9 c1 00 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019430:	83 ec 08             	sub    esp,0x8
c0019433:	68 4b 53 02 c0       	push   0xc002534b
c0019438:	68 70 cb 02 c0       	push   0xc002cb70
c001943d:	e8 3e 73 fe ff       	call   c0000780 <strcmp>
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	85 c0                	test   eax,eax
c0019447:	0f 94 c0             	sete   al
c001944a:	0f b6 c0             	movzx  eax,al
c001944d:	85 c0                	test   eax,eax
c001944f:	74 0f                	je     c0019460 <HalDetectFeatures()+0x85c>
c0019451:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c001945b:	e9 91 00 00 00       	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c0019460:	83 ec 08             	sub    esp,0x8
c0019463:	68 58 53 02 c0       	push   0xc0025358
c0019468:	68 70 cb 02 c0       	push   0xc002cb70
c001946d:	e8 0e 73 fe ff       	call   c0000780 <strcmp>
c0019472:	83 c4 10             	add    esp,0x10
c0019475:	85 c0                	test   eax,eax
c0019477:	0f 94 c0             	sete   al
c001947a:	0f b6 c0             	movzx  eax,al
c001947d:	85 c0                	test   eax,eax
c001947f:	74 0c                	je     c001948d <HalDetectFeatures()+0x889>
c0019481:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c001948b:	eb 64                	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c001948d:	83 ec 08             	sub    esp,0x8
c0019490:	68 65 53 02 c0       	push   0xc0025365
c0019495:	68 70 cb 02 c0       	push   0xc002cb70
c001949a:	e8 e1 72 fe ff       	call   c0000780 <strcmp>
c001949f:	83 c4 10             	add    esp,0x10
c00194a2:	85 c0                	test   eax,eax
c00194a4:	0f 94 c0             	sete   al
c00194a7:	0f b6 c0             	movzx  eax,al
c00194aa:	85 c0                	test   eax,eax
c00194ac:	74 0c                	je     c00194ba <HalDetectFeatures()+0x8b6>
c00194ae:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c00194b8:	eb 37                	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c00194ba:	83 ec 08             	sub    esp,0x8
c00194bd:	68 72 53 02 c0       	push   0xc0025372
c00194c2:	68 70 cb 02 c0       	push   0xc002cb70
c00194c7:	e8 b4 72 fe ff       	call   c0000780 <strcmp>
c00194cc:	83 c4 10             	add    esp,0x10
c00194cf:	85 c0                	test   eax,eax
c00194d1:	0f 94 c0             	sete   al
c00194d4:	0f b6 c0             	movzx  eax,al
c00194d7:	85 c0                	test   eax,eax
c00194d9:	74 0c                	je     c00194e7 <HalDetectFeatures()+0x8e3>
c00194db:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c00194e5:	eb 0a                	jmp    c00194f1 <HalDetectFeatures()+0x8ed>
c00194e7:	c7 05 84 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x0
c00194f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194f5:	83 f8 06             	cmp    eax,0x6
c00194f8:	0f 86 cc 00 00 00    	jbe    c00195ca <HalDetectFeatures()+0x9c6>
c00194fe:	83 ec 0c             	sub    esp,0xc
c0019501:	68 80 00 00 00       	push   0x80
c0019506:	e8 9d f6 ff ff       	call   c0018ba8 <cpuidCheckExtendedEBX(unsigned int)>
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	89 c1                	mov    ecx,eax
c0019510:	83 e1 01             	and    ecx,0x1
c0019513:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019518:	83 e0 fe             	and    eax,0xfffffffe
c001951b:	88 c2                	mov    dl,al
c001951d:	88 c8                	mov    al,cl
c001951f:	09 d0                	or     eax,edx
c0019521:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019526:	83 ec 0c             	sub    esp,0xc
c0019529:	68 00 00 10 00       	push   0x100000
c001952e:	e8 75 f6 ff ff       	call   c0018ba8 <cpuidCheckExtendedEBX(unsigned int)>
c0019533:	83 c4 10             	add    esp,0x10
c0019536:	83 e0 01             	and    eax,0x1
c0019539:	89 c1                	mov    ecx,eax
c001953b:	c1 e1 06             	shl    ecx,0x6
c001953e:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019543:	83 e0 bf             	and    eax,0xffffffbf
c0019546:	88 c2                	mov    dl,al
c0019548:	88 c8                	mov    al,cl
c001954a:	09 d0                	or     eax,edx
c001954c:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019551:	83 ec 0c             	sub    esp,0xc
c0019554:	68 00 00 04 00       	push   0x40000
c0019559:	e8 4a f6 ff ff       	call   c0018ba8 <cpuidCheckExtendedEBX(unsigned int)>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	83 e0 01             	and    eax,0x1
c0019564:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019567:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001956c:	83 e0 fd             	and    eax,0xfffffffd
c001956f:	88 c2                	mov    dl,al
c0019571:	88 c8                	mov    al,cl
c0019573:	09 d0                	or     eax,edx
c0019575:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001957a:	83 ec 0c             	sub    esp,0xc
c001957d:	6a 04                	push   0x4
c001957f:	e8 52 f6 ff ff       	call   c0018bd6 <cpuidCheckExtendedECX(unsigned int)>
c0019584:	83 c4 10             	add    esp,0x10
c0019587:	83 e0 01             	and    eax,0x1
c001958a:	89 c1                	mov    ecx,eax
c001958c:	c1 e1 05             	shl    ecx,0x5
c001958f:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019594:	83 e0 df             	and    eax,0xffffffdf
c0019597:	88 c2                	mov    dl,al
c0019599:	88 c8                	mov    al,cl
c001959b:	09 d0                	or     eax,edx
c001959d:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00195a2:	83 ec 0c             	sub    esp,0xc
c00195a5:	6a 20                	push   0x20
c00195a7:	e8 2a f6 ff ff       	call   c0018bd6 <cpuidCheckExtendedECX(unsigned int)>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	83 e0 01             	and    eax,0x1
c00195b2:	89 c1                	mov    ecx,eax
c00195b4:	c1 e1 04             	shl    ecx,0x4
c00195b7:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00195bc:	83 e0 ef             	and    eax,0xffffffef
c00195bf:	88 c2                	mov    dl,al
c00195c1:	88 c8                	mov    al,cl
c00195c3:	09 d0                	or     eax,edx
c00195c5:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00195ca:	83 ec 0c             	sub    esp,0xc
c00195cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195d1:	50                   	push   eax
c00195d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00195d6:	50                   	push   eax
c00195d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00195db:	50                   	push   eax
c00195dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00195e0:	50                   	push   eax
c00195e1:	6a 01                	push   0x1
c00195e3:	e8 c7 f4 ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195e8:	83 c4 20             	add    esp,0x20
c00195eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195ef:	83 e0 0f             	and    eax,0xf
c00195f2:	a2 80 cb 02 c0       	mov    ds:0xc002cb80,al
c00195f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195fb:	c1 e8 04             	shr    eax,0x4
c00195fe:	83 e0 0f             	and    eax,0xf
c0019601:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c0019606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001960a:	c1 e8 08             	shr    eax,0x8
c001960d:	83 e0 0f             	and    eax,0xf
c0019610:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c0019615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019619:	c1 e8 0c             	shr    eax,0xc
c001961c:	83 e0 03             	and    eax,0x3
c001961f:	a2 7f cb 02 c0       	mov    ds:0xc002cb7f,al
c0019624:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019629:	0f b6 c0             	movzx  eax,al
c001962c:	83 f8 06             	cmp    eax,0x6
c001962f:	74 0d                	je     c001963e <HalDetectFeatures()+0xa3a>
c0019631:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019636:	0f b6 c0             	movzx  eax,al
c0019639:	83 f8 0f             	cmp    eax,0xf
c001963c:	75 18                	jne    c0019656 <HalDetectFeatures()+0xa52>
c001963e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019642:	c1 e8 10             	shr    eax,0x10
c0019645:	c1 e0 04             	shl    eax,0x4
c0019648:	88 c2                	mov    dl,al
c001964a:	a0 7e cb 02 c0       	mov    al,ds:0xc002cb7e
c001964f:	09 d0                	or     eax,edx
c0019651:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c0019656:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c001965b:	0f b6 c0             	movzx  eax,al
c001965e:	83 f8 0f             	cmp    eax,0xf
c0019661:	75 15                	jne    c0019678 <HalDetectFeatures()+0xa74>
c0019663:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019667:	c1 e8 14             	shr    eax,0x14
c001966a:	88 c2                	mov    dl,al
c001966c:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019671:	01 d0                	add    eax,edx
c0019673:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c0019678:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019680:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019688:	85 c0                	test   eax,eax
c001968a:	74 2d                	je     c00196b9 <HalDetectFeatures()+0xab5>
c001968c:	83 ec 0c             	sub    esp,0xc
c001968f:	68 00 00 00 40       	push   0x40000000
c0019694:	e8 e1 f4 ff ff       	call   c0018b7a <cpuidCheckECX(unsigned int)>
c0019699:	83 c4 10             	add    esp,0x10
c001969c:	83 e0 01             	and    eax,0x1
c001969f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00196a6:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00196ab:	83 e0 fb             	and    eax,0xfffffffb
c00196ae:	88 c2                	mov    dl,al
c00196b0:	88 c8                	mov    al,cl
c00196b2:	09 d0                	or     eax,edx
c00196b4:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00196b9:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00196be:	83 c8 04             	or     eax,0x4
c00196c1:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00196c6:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00196cb:	83 c8 08             	or     eax,0x8
c00196ce:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00196d3:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00196d8:	83 c8 10             	or     eax,0x10
c00196db:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00196e0:	83 ec 0c             	sub    esp,0xc
c00196e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196e7:	50                   	push   eax
c00196e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196ec:	50                   	push   eax
c00196ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00196f1:	50                   	push   eax
c00196f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00196f6:	50                   	push   eax
c00196f7:	68 00 00 00 80       	push   0x80000000
c00196fc:	e8 ae f3 ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019701:	83 c4 20             	add    esp,0x20
c0019704:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019708:	3d 00 00 00 80       	cmp    eax,0x80000000
c001970d:	0f 86 96 01 00 00    	jbe    c00198a9 <HalDetectFeatures()+0xca5>
c0019713:	83 ec 0c             	sub    esp,0xc
c0019716:	8d 44 24 14          	lea    eax,[esp+0x14]
c001971a:	50                   	push   eax
c001971b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001971f:	50                   	push   eax
c0019720:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019724:	50                   	push   eax
c0019725:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019729:	50                   	push   eax
c001972a:	68 01 00 00 80       	push   0x80000001
c001972f:	e8 7b f3 ff ff       	call   c0018aaf <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019734:	83 c4 20             	add    esp,0x20
c0019737:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001973c:	83 e0 7f             	and    eax,0x7f
c001973f:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019744:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019749:	83 e0 fb             	and    eax,0xfffffffb
c001974c:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019751:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019756:	83 e0 fd             	and    eax,0xfffffffd
c0019759:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001975e:	e9 46 01 00 00       	jmp    c00198a9 <HalDetectFeatures()+0xca5>
c0019763:	83 ec 08             	sub    esp,0x8
c0019766:	68 e3 52 02 c0       	push   0xc00252e3
c001976b:	68 70 cb 02 c0       	push   0xc002cb70
c0019770:	e8 db 6e fe ff       	call   c0000650 <strcpy>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c0019782:	e8 3c 6a fe ff       	call   c00001c3 <is486>
c0019787:	85 c0                	test   eax,eax
c0019789:	0f 95 c0             	setne  al
c001978c:	0f b6 c0             	movzx  eax,al
c001978f:	85 c0                	test   eax,eax
c0019791:	0f 84 8d 00 00 00    	je     c0019824 <HalDetectFeatures()+0xc20>
c0019797:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001979c:	83 c8 04             	or     eax,0x4
c001979f:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00197a4:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00197a9:	83 c8 08             	or     eax,0x8
c00197ac:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00197b1:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00197b6:	83 c8 10             	or     eax,0x10
c00197b9:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00197be:	0f 20 c0             	mov    eax,cr0
c00197c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00197c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00197c9:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00197d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00197d7:	83 e0 04             	and    eax,0x4
c00197da:	74 1e                	je     c00197fa <HalDetectFeatures()+0xbf6>
c00197dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00197e3:	83 e0 10             	and    eax,0x10
c00197e6:	75 12                	jne    c00197fa <HalDetectFeatures()+0xbf6>
c00197e8:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00197ed:	83 e0 f7             	and    eax,0xfffffff7
c00197f0:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00197f5:	e9 af 00 00 00       	jmp    c00198a9 <HalDetectFeatures()+0xca5>
c00197fa:	e8 9f 69 fe ff       	call   c000019e <hasLegacyFPU>
c00197ff:	83 e0 01             	and    eax,0x1
c0019802:	83 e0 01             	and    eax,0x1
c0019805:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001980c:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019811:	83 e0 f7             	and    eax,0xfffffff7
c0019814:	88 c2                	mov    dl,al
c0019816:	88 c8                	mov    al,cl
c0019818:	09 d0                	or     eax,edx
c001981a:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001981f:	e9 85 00 00 00       	jmp    c00198a9 <HalDetectFeatures()+0xca5>
c0019824:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019829:	83 e0 fb             	and    eax,0xfffffffb
c001982c:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019831:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019836:	83 e0 f7             	and    eax,0xfffffff7
c0019839:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001983e:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019843:	83 e0 ef             	and    eax,0xffffffef
c0019846:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001984b:	0f 20 c0             	mov    eax,cr0
c001984e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019852:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019856:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001985d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019864:	83 e0 04             	and    eax,0x4
c0019867:	74 1b                	je     c0019884 <HalDetectFeatures()+0xc80>
c0019869:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019870:	83 e0 10             	and    eax,0x10
c0019873:	75 0f                	jne    c0019884 <HalDetectFeatures()+0xc80>
c0019875:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001987a:	83 e0 f7             	and    eax,0xfffffff7
c001987d:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019882:	eb 25                	jmp    c00198a9 <HalDetectFeatures()+0xca5>
c0019884:	e8 15 69 fe ff       	call   c000019e <hasLegacyFPU>
c0019889:	83 e0 01             	and    eax,0x1
c001988c:	83 e0 01             	and    eax,0x1
c001988f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019896:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001989b:	83 e0 f7             	and    eax,0xfffffff7
c001989e:	88 c2                	mov    dl,al
c00198a0:	88 c8                	mov    al,cl
c00198a2:	09 d0                	or     eax,edx
c00198a4:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00198a9:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00198ae:	83 e0 08             	and    eax,0x8
c00198b1:	0f b6 c0             	movzx  eax,al
c00198b4:	85 c0                	test   eax,eax
c00198b6:	75 25                	jne    c00198dd <HalDetectFeatures()+0xcd9>
c00198b8:	e8 e1 68 fe ff       	call   c000019e <hasLegacyFPU>
c00198bd:	83 e0 01             	and    eax,0x1
c00198c0:	83 e0 01             	and    eax,0x1
c00198c3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00198ca:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00198cf:	83 e0 f7             	and    eax,0xfffffff7
c00198d2:	88 c2                	mov    dl,al
c00198d4:	88 c8                	mov    al,cl
c00198d6:	09 d0                	or     eax,edx
c00198d8:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00198dd:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00198e2:	83 e0 08             	and    eax,0x8
c00198e5:	0f b6 c0             	movzx  eax,al
c00198e8:	85 c0                	test   eax,eax
c00198ea:	74 0d                	je     c00198f9 <HalDetectFeatures()+0xcf5>
c00198ec:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00198f1:	83 c8 10             	or     eax,0x10
c00198f4:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c00198f9:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00198fe:	83 e0 10             	and    eax,0x10
c0019901:	0f b6 c0             	movzx  eax,al
c0019904:	85 c0                	test   eax,eax
c0019906:	75 23                	jne    c001992b <HalDetectFeatures()+0xd27>
c0019908:	e8 49 7c 00 00       	call   c0021556 <x87Detect>
c001990d:	83 e0 01             	and    eax,0x1
c0019910:	83 e0 01             	and    eax,0x1
c0019913:	89 c1                	mov    ecx,eax
c0019915:	c1 e1 04             	shl    ecx,0x4
c0019918:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001991d:	83 e0 ef             	and    eax,0xffffffef
c0019920:	88 c2                	mov    dl,al
c0019922:	88 c8                	mov    al,cl
c0019924:	09 d0                	or     eax,edx
c0019926:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c001992b:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019930:	83 e0 01             	and    eax,0x1
c0019933:	0f b6 c0             	movzx  eax,al
c0019936:	85 c0                	test   eax,eax
c0019938:	75 2d                	jne    c0019967 <HalDetectFeatures()+0xd63>
c001993a:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c001993f:	83 e0 02             	and    eax,0x2
c0019942:	0f b6 c0             	movzx  eax,al
c0019945:	85 c0                	test   eax,eax
c0019947:	75 1e                	jne    c0019967 <HalDetectFeatures()+0xd63>
c0019949:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c001994e:	83 e0 04             	and    eax,0x4
c0019951:	0f b6 c0             	movzx  eax,al
c0019954:	85 c0                	test   eax,eax
c0019956:	75 0f                	jne    c0019967 <HalDetectFeatures()+0xd63>
c0019958:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c001995d:	83 e0 08             	and    eax,0x8
c0019960:	0f b6 c0             	movzx  eax,al
c0019963:	85 c0                	test   eax,eax
c0019965:	74 0d                	je     c0019974 <HalDetectFeatures()+0xd70>
c0019967:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001996c:	83 c8 80             	or     eax,0xffffff80
c001996f:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019974:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019979:	83 e0 10             	and    eax,0x10
c001997c:	0f b6 c0             	movzx  eax,al
c001997f:	85 c0                	test   eax,eax
c0019981:	74 2f                	je     c00199b2 <HalDetectFeatures()+0xdae>
c0019983:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019988:	83 e0 80             	and    eax,0xffffff80
c001998b:	0f b6 c0             	movzx  eax,al
c001998e:	85 c0                	test   eax,eax
c0019990:	75 20                	jne    c00199b2 <HalDetectFeatures()+0xdae>
c0019992:	e8 79 7b 00 00       	call   c0021510 <sseDetect>
c0019997:	83 e0 01             	and    eax,0x1
c001999a:	89 c1                	mov    ecx,eax
c001999c:	c1 e1 07             	shl    ecx,0x7
c001999f:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00199a4:	83 e0 7f             	and    eax,0x7f
c00199a7:	88 c2                	mov    dl,al
c00199a9:	88 c8                	mov    al,cl
c00199ab:	09 d0                	or     eax,edx
c00199ad:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c00199b2:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00199b7:	83 e0 80             	and    eax,0xffffff80
c00199ba:	0f b6 c0             	movzx  eax,al
c00199bd:	85 c0                	test   eax,eax
c00199bf:	74 1c                	je     c00199dd <HalDetectFeatures()+0xdd9>
c00199c1:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c00199c6:	83 e0 20             	and    eax,0x20
c00199c9:	0f b6 c0             	movzx  eax,al
c00199cc:	85 c0                	test   eax,eax
c00199ce:	75 0d                	jne    c00199dd <HalDetectFeatures()+0xdd9>
c00199d0:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c00199d5:	83 e0 df             	and    eax,0xffffffdf
c00199d8:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c00199dd:	c6 05 88 cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb88,0x0
c00199e4:	90                   	nop
c00199e5:	81 c4 90 00 00 00    	add    esp,0x90
c00199eb:	5b                   	pop    ebx
c00199ec:	5e                   	pop    esi
c00199ed:	5f                   	pop    edi
c00199ee:	c3                   	ret    

c00199ef <HalEnableNMI()>:
c00199ef:	c6 05 6c cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb6c,0x1
c00199f6:	6a 10                	push   0x10
c00199f8:	e8 00 ef ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c00199fd:	83 c4 04             	add    esp,0x4
c0019a00:	90                   	nop
c0019a01:	c3                   	ret    

c0019a02 <HalDisableNMI()>:
c0019a02:	c6 05 6c cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb6c,0x0
c0019a09:	6a 10                	push   0x10
c0019a0b:	e8 ed ee ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c0019a10:	83 c4 04             	add    esp,0x4
c0019a13:	90                   	nop
c0019a14:	c3                   	ret    

c0019a15 <HalGetNMIState()>:
c0019a15:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0019a1a:	c3                   	ret    

c0019a1b <x86rdmsr(unsigned int)>:
c0019a1b:	83 ec 1c             	sub    esp,0x1c
c0019a1e:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a23:	83 e0 08             	and    eax,0x8
c0019a26:	0f b6 c0             	movzx  eax,al
c0019a29:	85 c0                	test   eax,eax
c0019a2b:	75 10                	jne    c0019a3d <x86rdmsr(unsigned int)+0x22>
c0019a2d:	83 ec 0c             	sub    esp,0xc
c0019a30:	68 7e 53 02 c0       	push   0xc002537e
c0019a35:	e8 d6 60 ff ff       	call   c000fb10 <KePanic(char const*)>
c0019a3a:	83 c4 10             	add    esp,0x10
c0019a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a41:	89 c1                	mov    ecx,eax
c0019a43:	0f 32                	rdmsr  
c0019a45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019a4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a55:	83 c4 1c             	add    esp,0x1c
c0019a58:	c3                   	ret    

c0019a59 <x86wrmsr(unsigned int, unsigned long long)>:
c0019a59:	83 ec 1c             	sub    esp,0x1c
c0019a5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019a60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a6c:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a71:	83 e0 08             	and    eax,0x8
c0019a74:	0f b6 c0             	movzx  eax,al
c0019a77:	85 c0                	test   eax,eax
c0019a79:	75 10                	jne    c0019a8b <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019a7b:	83 ec 0c             	sub    esp,0xc
c0019a7e:	68 84 53 02 c0       	push   0xc0025384
c0019a83:	e8 88 60 ff ff       	call   c000fb10 <KePanic(char const*)>
c0019a88:	83 c4 10             	add    esp,0x10
c0019a8b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019a8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a97:	0f 30                	wrmsr  
c0019a99:	90                   	nop
c0019a9a:	83 c4 1c             	add    esp,0x1c
c0019a9d:	c3                   	ret    

c0019a9e <HalHandleGeneralProtectionFault(void*, void*)>:
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	83 ec 0c             	sub    esp,0xc
c0019aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019aa8:	e8 cc e1 ff ff       	call   c0017c79 <Vm::faultHandler(regs*)>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	83 c4 0c             	add    esp,0xc
c0019ab3:	c3                   	ret    

c0019ab4 <HalFindRSDP()>:
c0019ab4:	83 ec 1c             	sub    esp,0x1c
c0019ab7:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c0019abc:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019ac1:	7e 17                	jle    c0019ada <HalFindRSDP()+0x26>
c0019ac3:	83 ec 0c             	sub    esp,0xc
c0019ac6:	68 00 04 00 00       	push   0x400
c0019acb:	e8 f4 36 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019ad0:	83 c4 10             	add    esp,0x10
c0019ad3:	0f b6 c0             	movzx  eax,al
c0019ad6:	85 c0                	test   eax,eax
c0019ad8:	74 04                	je     c0019ade <HalFindRSDP()+0x2a>
c0019ada:	b0 01                	mov    al,0x1
c0019adc:	eb 02                	jmp    c0019ae0 <HalFindRSDP()+0x2c>
c0019ade:	b0 00                	mov    al,0x0
c0019ae0:	0f b6 c0             	movzx  eax,al
c0019ae3:	85 c0                	test   eax,eax
c0019ae5:	74 1d                	je     c0019b04 <HalFindRSDP()+0x50>
c0019ae7:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019aec:	83 e0 fb             	and    eax,0xfffffffb
c0019aef:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019af4:	83 ec 0c             	sub    esp,0xc
c0019af7:	68 8a 53 02 c0       	push   0xc002538a
c0019afc:	e8 65 d4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019b01:	83 c4 10             	add    esp,0x10
c0019b04:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b09:	83 e0 04             	and    eax,0x4
c0019b0c:	0f b6 c0             	movzx  eax,al
c0019b0f:	85 c0                	test   eax,eax
c0019b11:	75 17                	jne    c0019b2a <HalFindRSDP()+0x76>
c0019b13:	83 ec 0c             	sub    esp,0xc
c0019b16:	68 99 53 02 c0       	push   0xc0025399
c0019b1b:	e8 46 d4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019b20:	83 c4 10             	add    esp,0x10
c0019b23:	b8 00 00 00 00       	mov    eax,0x0
c0019b28:	eb 63                	jmp    c0019b8d <HalFindRSDP()+0xd9>
c0019b2a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019b32:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019b3a:	77 2f                	ja     c0019b6b <HalFindRSDP()+0xb7>
c0019b3c:	83 ec 04             	sub    esp,0x4
c0019b3f:	6a 08                	push   0x8
c0019b41:	68 a3 53 02 c0       	push   0xc00253a3
c0019b46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b4a:	e8 31 68 fe ff       	call   c0000380 <memcmp>
c0019b4f:	83 c4 10             	add    esp,0x10
c0019b52:	85 c0                	test   eax,eax
c0019b54:	0f 94 c0             	sete   al
c0019b57:	0f b6 c0             	movzx  eax,al
c0019b5a:	85 c0                	test   eax,eax
c0019b5c:	74 06                	je     c0019b64 <HalFindRSDP()+0xb0>
c0019b5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b62:	eb 29                	jmp    c0019b8d <HalFindRSDP()+0xd9>
c0019b64:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019b69:	eb c7                	jmp    c0019b32 <HalFindRSDP()+0x7e>
c0019b6b:	83 ec 0c             	sub    esp,0xc
c0019b6e:	68 ac 53 02 c0       	push   0xc00253ac
c0019b73:	e8 ee d3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019b78:	83 c4 10             	add    esp,0x10
c0019b7b:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b80:	83 e0 fb             	and    eax,0xfffffffb
c0019b83:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019b88:	b8 00 00 00 00       	mov    eax,0x0
c0019b8d:	83 c4 1c             	add    esp,0x1c
c0019b90:	c3                   	ret    

c0019b91 <HalHandlePageFault(void*, void*)>:
c0019b91:	83 ec 1c             	sub    esp,0x1c
c0019b94:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b9b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b9e:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019ba4:	0f 20 d2             	mov    edx,cr2
c0019ba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019bab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019baf:	83 ec 08             	sub    esp,0x8
c0019bb2:	52                   	push   edx
c0019bb3:	50                   	push   eax
c0019bb4:	e8 11 a3 ff ff       	call   c0013eca <VAS::tryLoadBackOffDisk(unsigned long)>
c0019bb9:	83 c4 10             	add    esp,0x10
c0019bbc:	83 c4 1c             	add    esp,0x1c
c0019bbf:	c3                   	ret    

c0019bc0 <HalHandleOpcodeFault(void*, void*)>:
c0019bc0:	83 ec 1c             	sub    esp,0x1c
c0019bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019bcb:	a0 88 cb 02 c0       	mov    al,ds:0xc002cb88
c0019bd0:	0f b6 c0             	movzx  eax,al
c0019bd3:	85 c0                	test   eax,eax
c0019bd5:	74 25                	je     c0019bfc <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019bd7:	83 ec 0c             	sub    esp,0xc
c0019bda:	68 a4 55 02 c0       	push   0xc00255a4
c0019bdf:	e8 82 d3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019beb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019bee:	8d 50 19             	lea    edx,[eax+0x19]
c0019bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bf5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019bf8:	b0 01                	mov    al,0x1
c0019bfa:	eb 02                	jmp    c0019bfe <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019bfc:	b0 00                	mov    al,0x0
c0019bfe:	83 c4 1c             	add    esp,0x1c
c0019c01:	c3                   	ret    

c0019c02 <HalDisplayDebugInfo(void*)>:
c0019c02:	83 ec 2c             	sub    esp,0x2c
c0019c05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019c09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c0d:	0f 20 c0             	mov    eax,cr0
c0019c10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c14:	0f 20 d0             	mov    eax,cr2
c0019c17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c1b:	0f 20 d8             	mov    eax,cr3
c0019c1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c22:	0f 20 e0             	mov    eax,cr4
c0019c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c2d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019c30:	83 ec 08             	sub    esp,0x8
c0019c33:	50                   	push   eax
c0019c34:	68 c6 53 02 c0       	push   0xc00253c6
c0019c39:	e8 28 d3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019c3e:	83 c4 10             	add    esp,0x10
c0019c41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c45:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019c48:	83 ec 08             	sub    esp,0x8
c0019c4b:	50                   	push   eax
c0019c4c:	68 b7 53 02 c0       	push   0xc00253b7
c0019c51:	e8 10 d3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019c56:	83 c4 10             	add    esp,0x10
c0019c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c5d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019c60:	83 ec 08             	sub    esp,0x8
c0019c63:	50                   	push   eax
c0019c64:	68 c2 53 02 c0       	push   0xc00253c2
c0019c69:	e8 f8 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019c6e:	83 c4 10             	add    esp,0x10
c0019c71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c78:	83 ec 08             	sub    esp,0x8
c0019c7b:	50                   	push   eax
c0019c7c:	68 d1 53 02 c0       	push   0xc00253d1
c0019c81:	e8 e0 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019c86:	83 c4 10             	add    esp,0x10
c0019c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c8d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019c90:	83 ec 08             	sub    esp,0x8
c0019c93:	50                   	push   eax
c0019c94:	68 dc 53 02 c0       	push   0xc00253dc
c0019c99:	e8 c8 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019c9e:	83 c4 10             	add    esp,0x10
c0019ca1:	83 ec 08             	sub    esp,0x8
c0019ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ca8:	68 e7 53 02 c0       	push   0xc00253e7
c0019cad:	e8 b4 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019cb2:	83 c4 10             	add    esp,0x10
c0019cb5:	83 ec 08             	sub    esp,0x8
c0019cb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cbc:	68 f2 53 02 c0       	push   0xc00253f2
c0019cc1:	e8 a0 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019cc6:	83 c4 10             	add    esp,0x10
c0019cc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ccd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019cd0:	c1 e0 05             	shl    eax,0x5
c0019cd3:	8d 90 80 68 02 c0    	lea    edx,[eax-0x3ffd9780]
c0019cd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cdd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019ce0:	83 ec 04             	sub    esp,0x4
c0019ce3:	52                   	push   edx
c0019ce4:	50                   	push   eax
c0019ce5:	68 fd 53 02 c0       	push   0xc00253fd
c0019cea:	e8 77 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019cef:	83 c4 10             	add    esp,0x10
c0019cf2:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019cf7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019cfd:	83 ec 0c             	sub    esp,0xc
c0019d00:	50                   	push   eax
c0019d01:	e8 ad 84 ff ff       	call   c00121b3 <setActiveTerminal(VgaText*)>
c0019d06:	83 c4 10             	add    esp,0x10
c0019d09:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019d0e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d14:	83 ec 08             	sub    esp,0x8
c0019d17:	68 0c 54 02 c0       	push   0xc002540c
c0019d1c:	50                   	push   eax
c0019d1d:	e8 ce 87 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019d22:	83 c4 10             	add    esp,0x10
c0019d25:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019d2a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d34:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019d37:	83 ec 08             	sub    esp,0x8
c0019d3a:	52                   	push   edx
c0019d3b:	50                   	push   eax
c0019d3c:	e8 69 87 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019d41:	83 c4 10             	add    esp,0x10
c0019d44:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019d49:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d4f:	83 ec 08             	sub    esp,0x8
c0019d52:	68 1a 54 02 c0       	push   0xc002541a
c0019d57:	50                   	push   eax
c0019d58:	e8 93 87 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019d65:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d6b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019d70:	8b 12                	mov    edx,DWORD PTR [edx]
c0019d72:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019d75:	83 c2 0c             	add    edx,0xc
c0019d78:	83 ec 08             	sub    esp,0x8
c0019d7b:	52                   	push   edx
c0019d7c:	50                   	push   eax
c0019d7d:	e8 6e 87 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019d82:	83 c4 10             	add    esp,0x10
c0019d85:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019d8a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d90:	83 ec 08             	sub    esp,0x8
c0019d93:	68 23 54 02 c0       	push   0xc0025423
c0019d98:	50                   	push   eax
c0019d99:	e8 52 87 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019d9e:	83 c4 10             	add    esp,0x10
c0019da1:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019da6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019dac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019db0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019db3:	83 ec 08             	sub    esp,0x8
c0019db6:	52                   	push   edx
c0019db7:	50                   	push   eax
c0019db8:	e8 ed 86 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019dbd:	83 c4 10             	add    esp,0x10
c0019dc0:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019dc5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019dcb:	83 ec 08             	sub    esp,0x8
c0019dce:	68 2b 54 02 c0       	push   0xc002542b
c0019dd3:	50                   	push   eax
c0019dd4:	e8 17 87 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019dd9:	83 c4 10             	add    esp,0x10
c0019ddc:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019de1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019de7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019deb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019dee:	83 ec 08             	sub    esp,0x8
c0019df1:	52                   	push   edx
c0019df2:	50                   	push   eax
c0019df3:	e8 b2 86 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019df8:	83 c4 10             	add    esp,0x10
c0019dfb:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e00:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e06:	83 ec 08             	sub    esp,0x8
c0019e09:	68 33 54 02 c0       	push   0xc0025433
c0019e0e:	50                   	push   eax
c0019e0f:	e8 dc 86 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019e14:	83 c4 10             	add    esp,0x10
c0019e17:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e1c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e26:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019e29:	83 ec 08             	sub    esp,0x8
c0019e2c:	52                   	push   edx
c0019e2d:	50                   	push   eax
c0019e2e:	e8 77 86 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e3b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e41:	83 ec 08             	sub    esp,0x8
c0019e44:	68 3b 54 02 c0       	push   0xc002543b
c0019e49:	50                   	push   eax
c0019e4a:	e8 a1 86 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019e4f:	83 c4 10             	add    esp,0x10
c0019e52:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e57:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e61:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019e64:	83 ec 08             	sub    esp,0x8
c0019e67:	52                   	push   edx
c0019e68:	50                   	push   eax
c0019e69:	e8 3c 86 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019e6e:	83 c4 10             	add    esp,0x10
c0019e71:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e76:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e7c:	83 ec 08             	sub    esp,0x8
c0019e7f:	68 43 54 02 c0       	push   0xc0025443
c0019e84:	50                   	push   eax
c0019e85:	e8 66 86 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019e8a:	83 c4 10             	add    esp,0x10
c0019e8d:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e92:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e9c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019e9f:	83 ec 08             	sub    esp,0x8
c0019ea2:	52                   	push   edx
c0019ea3:	50                   	push   eax
c0019ea4:	e8 01 86 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019eb1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019eb7:	83 ec 08             	sub    esp,0x8
c0019eba:	68 4b 54 02 c0       	push   0xc002544b
c0019ebf:	50                   	push   eax
c0019ec0:	e8 2b 86 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ecd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ed3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ed7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019eda:	83 ec 08             	sub    esp,0x8
c0019edd:	52                   	push   edx
c0019ede:	50                   	push   eax
c0019edf:	e8 c6 85 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019ee4:	83 c4 10             	add    esp,0x10
c0019ee7:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019eec:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ef2:	83 ec 08             	sub    esp,0x8
c0019ef5:	68 53 54 02 c0       	push   0xc0025453
c0019efa:	50                   	push   eax
c0019efb:	e8 f0 85 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019f00:	83 c4 10             	add    esp,0x10
c0019f03:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f08:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f0e:	83 ec 08             	sub    esp,0x8
c0019f11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f15:	50                   	push   eax
c0019f16:	e8 8f 85 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f23:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f29:	83 ec 08             	sub    esp,0x8
c0019f2c:	68 5c 54 02 c0       	push   0xc002545c
c0019f31:	50                   	push   eax
c0019f32:	e8 b9 85 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019f37:	83 c4 10             	add    esp,0x10
c0019f3a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f3f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f45:	83 ec 08             	sub    esp,0x8
c0019f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f4c:	50                   	push   eax
c0019f4d:	e8 58 85 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019f52:	83 c4 10             	add    esp,0x10
c0019f55:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f5a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f60:	83 ec 08             	sub    esp,0x8
c0019f63:	68 64 54 02 c0       	push   0xc0025464
c0019f68:	50                   	push   eax
c0019f69:	e8 82 85 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f76:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f7c:	83 ec 08             	sub    esp,0x8
c0019f7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f83:	50                   	push   eax
c0019f84:	e8 21 85 ff ff       	call   c00124aa <VgaText::putx(unsigned int)>
c0019f89:	83 c4 10             	add    esp,0x10
c0019f8c:	fa                   	cli    
c0019f8d:	f4                   	hlt    
c0019f8e:	eb fe                	jmp    c0019f8e <HalDisplayDebugInfo(void*)+0x38c>

c0019f90 <HalReceivedNMI()>:
c0019f90:	83 ec 1c             	sub    esp,0x1c
c0019f93:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019f9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f9e:	89 c2                	mov    edx,eax
c0019fa0:	ec                   	in     al,dx
c0019fa1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019fa5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019fa9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fad:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fb8:	89 c2                	mov    edx,eax
c0019fba:	ec                   	in     al,dx
c0019fbb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019fbf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019fc3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019fc7:	83 ec 0c             	sub    esp,0xc
c0019fca:	68 6c 54 02 c0       	push   0xc002546c
c0019fcf:	e8 92 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019fd4:	83 c4 10             	add    esp,0x10
c0019fd7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019fdc:	83 e0 10             	and    eax,0x10
c0019fdf:	74 10                	je     c0019ff1 <HalReceivedNMI()+0x61>
c0019fe1:	83 ec 0c             	sub    esp,0xc
c0019fe4:	68 7d 54 02 c0       	push   0xc002547d
c0019fe9:	e8 22 5b ff ff       	call   c000fb10 <KePanic(char const*)>
c0019fee:	83 c4 10             	add    esp,0x10
c0019ff1:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019ff6:	83 e0 40             	and    eax,0x40
c0019ff9:	74 10                	je     c001a00b <HalReceivedNMI()+0x7b>
c0019ffb:	83 ec 0c             	sub    esp,0xc
c0019ffe:	68 8a 54 02 c0       	push   0xc002548a
c001a003:	e8 08 5b ff ff       	call   c000fb10 <KePanic(char const*)>
c001a008:	83 c4 10             	add    esp,0x10
c001a00b:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a00f:	0f be c0             	movsx  eax,al
c001a012:	85 c0                	test   eax,eax
c001a014:	79 10                	jns    c001a026 <HalReceivedNMI()+0x96>
c001a016:	83 ec 0c             	sub    esp,0xc
c001a019:	68 94 54 02 c0       	push   0xc0025494
c001a01e:	e8 ed 5a ff ff       	call   c000fb10 <KePanic(char const*)>
c001a023:	83 c4 10             	add    esp,0x10
c001a026:	90                   	nop
c001a027:	83 c4 1c             	add    esp,0x1c
c001a02a:	c3                   	ret    

c001a02b <HalSystemIdle()>:
c001a02b:	56                   	push   esi
c001a02c:	53                   	push   ebx
c001a02d:	83 ec 14             	sub    esp,0x14
c001a030:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001a035:	83 e0 10             	and    eax,0x10
c001a038:	0f b6 c0             	movzx  eax,al
c001a03b:	85 c0                	test   eax,eax
c001a03d:	74 43                	je     c001a082 <HalSystemIdle()+0x57>
c001a03f:	83 ec 0c             	sub    esp,0xc
c001a042:	68 e1 00 00 00       	push   0xe1
c001a047:	e8 cf f9 ff ff       	call   c0019a1b <x86rdmsr(unsigned int)>
c001a04c:	83 c4 10             	add    esp,0x10
c001a04f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a053:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a05b:	83 e0 02             	and    eax,0x2
c001a05e:	89 c3                	mov    ebx,eax
c001a060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a064:	83 e0 00             	and    eax,0x0
c001a067:	89 c6                	mov    esi,eax
c001a069:	83 ec 04             	sub    esp,0x4
c001a06c:	56                   	push   esi
c001a06d:	53                   	push   ebx
c001a06e:	68 e1 00 00 00       	push   0xe1
c001a073:	e8 e1 f9 ff ff       	call   c0019a59 <x86wrmsr(unsigned int, unsigned long long)>
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	e8 14 61 fe ff       	call   c0000194 <doTPAUSE>
c001a080:	eb 01                	jmp    c001a083 <HalSystemIdle()+0x58>
c001a082:	f4                   	hlt    
c001a083:	90                   	nop
c001a084:	83 c4 14             	add    esp,0x14
c001a087:	5b                   	pop    ebx
c001a088:	5e                   	pop    esi
c001a089:	c3                   	ret    

c001a08a <i386SaveCoprocessor(void*)>:
c001a08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a08e:	83 c0 3f             	add    eax,0x3f
c001a091:	83 e0 c0             	and    eax,0xffffffc0
c001a094:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a098:	ff 25 50 cb 02 c0    	jmp    DWORD PTR ds:0xc002cb50

c001a09e <i386LoadCoprocessor(void*)>:
c001a09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0a2:	83 c0 3f             	add    eax,0x3f
c001a0a5:	83 e0 c0             	and    eax,0xffffffc0
c001a0a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0ac:	ff 25 4c cb 02 c0    	jmp    DWORD PTR ds:0xc002cb4c

c001a0b2 <x87EmulHandler(regs*, void*)>:
c001a0b2:	53                   	push   ebx
c001a0b3:	83 ec 08             	sub    esp,0x8
c001a0b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0bb:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a0bf:	74 10                	je     c001a0d1 <x87EmulHandler(regs*, void*)+0x1f>
c001a0c1:	83 ec 0c             	sub    esp,0xc
c001a0c4:	68 a1 54 02 c0       	push   0xc00254a1
c001a0c9:	e8 42 5a ff ff       	call   c000fb10 <KePanic(char const*)>
c001a0ce:	83 c4 10             	add    esp,0x10
c001a0d1:	0f 20 c0             	mov    eax,cr0
c001a0d4:	a8 08                	test   al,0x8
c001a0d6:	74 59                	je     c001a131 <x87EmulHandler(regs*, void*)+0x7f>
c001a0d8:	0f 06                	clts   
c001a0da:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a0df:	85 c0                	test   eax,eax
c001a0e1:	74 0e                	je     c001a0f1 <x87EmulHandler(regs*, void*)+0x3f>
c001a0e3:	83 ec 0c             	sub    esp,0xc
c001a0e6:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a0e9:	e8 9c ff ff ff       	call   c001a08a <i386SaveCoprocessor(void*)>
c001a0ee:	83 c4 10             	add    esp,0x10
c001a0f1:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a0f7:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a0fb:	75 12                	jne    c001a10f <x87EmulHandler(regs*, void*)+0x5d>
c001a0fd:	83 ec 0c             	sub    esp,0xc
c001a100:	68 40 02 00 00       	push   0x240
c001a105:	e8 aa 55 ff ff       	call   c000f6b4 <malloc>
c001a10a:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a10d:	eb 10                	jmp    c001a11f <x87EmulHandler(regs*, void*)+0x6d>
c001a10f:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a114:	83 ec 0c             	sub    esp,0xc
c001a117:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a11a:	e8 7f ff ff ff       	call   c001a09e <i386LoadCoprocessor(void*)>
c001a11f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a124:	83 c4 10             	add    esp,0x10
c001a127:	a3 48 cb 02 c0       	mov    ds:0xc002cb48,eax
c001a12c:	83 c4 08             	add    esp,0x8
c001a12f:	5b                   	pop    ebx
c001a130:	c3                   	ret    
c001a131:	83 ec 0c             	sub    esp,0xc
c001a134:	68 b5 54 02 c0       	push   0xc00254b5
c001a139:	e8 28 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a13e:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a146:	83 c4 18             	add    esp,0x18
c001a149:	5b                   	pop    ebx
c001a14a:	e9 e9 d2 ff ff       	jmp    c0017438 <KeTerminateCurrentThread(int)>

c001a14f <HalInitialiseCoprocessor()>:
c001a14f:	83 ec 10             	sub    esp,0x10
c001a152:	6a 00                	push   0x0
c001a154:	68 b2 a0 01 c0       	push   0xc001a0b2
c001a159:	6a 07                	push   0x7
c001a15b:	c7 05 48 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb48,0x0
c001a165:	e8 df 07 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a16a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a16f:	83 c4 10             	add    esp,0x10
c001a172:	a8 80                	test   al,0x80
c001a174:	74 1c                	je     c001a192 <HalInitialiseCoprocessor()+0x43>
c001a176:	c7 05 50 cb 02 c0 28 15 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0021528
c001a180:	c7 05 4c cb 02 c0 30 15 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc0021530
c001a18a:	83 c4 0c             	add    esp,0xc
c001a18d:	e9 a6 73 00 00       	jmp    c0021538 <sseInit>
c001a192:	a8 10                	test   al,0x10
c001a194:	74 1c                	je     c001a1b2 <HalInitialiseCoprocessor()+0x63>
c001a196:	c7 05 50 cb 02 c0 77 15 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0021577
c001a1a0:	c7 05 4c cb 02 c0 7e 15 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc002157e
c001a1aa:	83 c4 0c             	add    esp,0xc
c001a1ad:	e9 d3 73 00 00       	jmp    c0021585 <x87Init>
c001a1b2:	c7 05 50 cb 02 c0 ec 88 01 c0 	mov    DWORD PTR ds:0xc002cb50,0xc00188ec
c001a1bc:	c7 05 4c cb 02 c0 ec 88 01 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc00188ec
c001a1c6:	0f 20 c0             	mov    eax,cr0
c001a1c9:	83 c8 04             	or     eax,0x4
c001a1cc:	0f 22 c0             	mov    cr0,eax
c001a1cf:	83 c4 0c             	add    esp,0xc
c001a1d2:	c3                   	ret    

c001a1d3 <HalPanic(char const*)>:
c001a1d3:	53                   	push   ebx
c001a1d4:	83 ec 10             	sub    esp,0x10
c001a1d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1db:	fa                   	cli    
c001a1dc:	53                   	push   ebx
c001a1dd:	68 cb 54 02 c0       	push   0xc00254cb
c001a1e2:	e8 7f cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a1e7:	a1 44 cb 02 c0       	mov    eax,ds:0xc002cb44
c001a1ec:	83 c4 10             	add    esp,0x10
c001a1ef:	85 c0                	test   eax,eax
c001a1f1:	74 09                	je     c001a1fc <HalPanic(char const*)+0x29>
c001a1f3:	83 ec 0c             	sub    esp,0xc
c001a1f6:	53                   	push   ebx
c001a1f7:	ff d0                	call   eax
c001a1f9:	83 c4 10             	add    esp,0x10
c001a1fc:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c001a201:	85 c0                	test   eax,eax
c001a203:	0f 84 dc 00 00 00    	je     c001a2e5 <HalPanic(char const*)+0x112>
c001a209:	52                   	push   edx
c001a20a:	6a 01                	push   0x1
c001a20c:	6a 0f                	push   0xf
c001a20e:	50                   	push   eax
c001a20f:	e8 de 7d ff ff       	call   c0011ff2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a214:	59                   	pop    ecx
c001a215:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a21b:	e8 de 7f ff ff       	call   c00121fe <VgaText::clearScreen()>
c001a220:	58                   	pop    eax
c001a221:	5a                   	pop    edx
c001a222:	68 51 44 02 c0       	push   0xc0024451
c001a227:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a22d:	e8 f8 7d ff ff       	call   c001202a <VgaText::setTitle(char*)>
c001a232:	83 c4 0c             	add    esp,0xc
c001a235:	6a 01                	push   0x1
c001a237:	6a 0f                	push   0xf
c001a239:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a23f:	e8 ae 7d ff ff       	call   c0011ff2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a244:	59                   	pop    ecx
c001a245:	58                   	pop    eax
c001a246:	68 e4 54 02 c0       	push   0xc00254e4
c001a24b:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a251:	e8 9a 82 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001a256:	83 c4 0c             	add    esp,0xc
c001a259:	6a 0f                	push   0xf
c001a25b:	6a 01                	push   0x1
c001a25d:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a263:	e8 8a 7d ff ff       	call   c0011ff2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a268:	58                   	pop    eax
c001a269:	5a                   	pop    edx
c001a26a:	68 ed 54 02 c0       	push   0xc00254ed
c001a26f:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a275:	e8 76 82 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001a27a:	83 c4 0c             	add    esp,0xc
c001a27d:	6a 01                	push   0x1
c001a27f:	6a 0f                	push   0xf
c001a281:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a287:	e8 66 7d ff ff       	call   c0011ff2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a28c:	59                   	pop    ecx
c001a28d:	58                   	pop    eax
c001a28e:	68 31 55 02 c0       	push   0xc0025531
c001a293:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a299:	e8 52 82 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001a29e:	58                   	pop    eax
c001a29f:	5a                   	pop    edx
c001a2a0:	68 fa 54 02 c0       	push   0xc00254fa
c001a2a5:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a2ab:	e8 40 82 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001a2b0:	59                   	pop    ecx
c001a2b1:	58                   	pop    eax
c001a2b2:	68 34 55 02 c0       	push   0xc0025534
c001a2b7:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a2bd:	e8 2e 82 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001a2c2:	58                   	pop    eax
c001a2c3:	5a                   	pop    edx
c001a2c4:	53                   	push   ebx
c001a2c5:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a2cb:	e8 20 82 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001a2d0:	59                   	pop    ecx
c001a2d1:	5b                   	pop    ebx
c001a2d2:	68 31 55 02 c0       	push   0xc0025531
c001a2d7:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a2dd:	e8 0e 82 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001a2e2:	83 c4 10             	add    esp,0x10
c001a2e5:	eb fe                	jmp    c001a2e5 <HalPanic(char const*)+0x112>

c001a2e7 <HalQueryPerformanceCounter()>:
c001a2e7:	31 c0                	xor    eax,eax
c001a2e9:	31 d2                	xor    edx,edx
c001a2eb:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a2f2:	75 02                	jne    c001a2f6 <HalQueryPerformanceCounter()+0xf>
c001a2f4:	0f 31                	rdtsc  
c001a2f6:	c3                   	ret    

c001a2f7 <HalInitialise()>:
c001a2f7:	53                   	push   ebx
c001a2f8:	83 ec 08             	sub    esp,0x8
c001a2fb:	e8 04 e9 ff ff       	call   c0018c04 <HalDetectFeatures()>
c001a300:	83 ec 0c             	sub    esp,0xc
c001a303:	68 ed 88 01 c0       	push   0xc00188ed
c001a308:	e8 df 61 ff ff       	call   c00104ec <KeRegisterRestartHandler(void (*)())>
c001a30d:	c7 04 24 f8 88 01 c0 	mov    DWORD PTR [esp],0xc00188f8
c001a314:	e8 c9 61 ff ff       	call   c00104e2 <KeRegisterShutdownHandler(void (*)())>
c001a319:	c7 04 24 f9 88 01 c0 	mov    DWORD PTR [esp],0xc00188f9
c001a320:	e8 d1 61 ff ff       	call   c00104f6 <KeRegisterSleepHandler(void (*)())>
c001a325:	e8 5a 20 ff ff       	call   c000c384 <scanMADT()>
c001a32a:	83 c4 10             	add    esp,0x10
c001a32d:	80 3d 40 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be40,0x0
c001a334:	75 0d                	jne    c001a343 <HalInitialise()+0x4c>
c001a336:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a33b:	83 e0 fe             	and    eax,0xfffffffe
c001a33e:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c001a343:	e8 e8 08 00 00       	call   c001ac30 <picOpen()>
c001a348:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a34f:	74 0a                	je     c001a35b <HalInitialise()+0x64>
c001a351:	e8 2a 08 00 00       	call   c001ab80 <picDisable()>
c001a356:	e8 99 e1 ff ff       	call   c00184f4 <apicOpen()>
c001a35b:	50                   	push   eax
c001a35c:	bb 0f 00 00 00       	mov    ebx,0xf
c001a361:	6a 00                	push   0x0
c001a363:	68 dc e7 00 c0       	push   0xc000e7dc
c001a368:	6a 02                	push   0x2
c001a36a:	e8 da 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a36f:	83 c4 0c             	add    esp,0xc
c001a372:	6a 00                	push   0x0
c001a374:	68 54 e7 00 c0       	push   0xc000e754
c001a379:	6a 06                	push   0x6
c001a37b:	e8 c9 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a380:	83 c4 0c             	add    esp,0xc
c001a383:	6a 00                	push   0x0
c001a385:	68 ec e7 00 c0       	push   0xc000e7ec
c001a38a:	6a 08                	push   0x8
c001a38c:	e8 b8 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a391:	83 c4 0c             	add    esp,0xc
c001a394:	6a 00                	push   0x0
c001a396:	68 ac e6 00 c0       	push   0xc000e6ac
c001a39b:	6a 0d                	push   0xd
c001a39d:	e8 a7 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a3a2:	83 c4 0c             	add    esp,0xc
c001a3a5:	6a 00                	push   0x0
c001a3a7:	68 00 e7 00 c0       	push   0xc000e700
c001a3ac:	6a 0e                	push   0xe
c001a3ae:	e8 96 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a3b3:	83 c4 0c             	add    esp,0xc
c001a3b6:	6a 00                	push   0x0
c001a3b8:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a3bd:	6a 00                	push   0x0
c001a3bf:	e8 85 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a3c4:	83 c4 0c             	add    esp,0xc
c001a3c7:	6a 00                	push   0x0
c001a3c9:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a3ce:	6a 01                	push   0x1
c001a3d0:	e8 74 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a3d5:	83 c4 0c             	add    esp,0xc
c001a3d8:	6a 00                	push   0x0
c001a3da:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a3df:	6a 03                	push   0x3
c001a3e1:	e8 63 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a3e6:	83 c4 0c             	add    esp,0xc
c001a3e9:	6a 00                	push   0x0
c001a3eb:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a3f0:	6a 04                	push   0x4
c001a3f2:	e8 52 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a3f7:	83 c4 0c             	add    esp,0xc
c001a3fa:	6a 00                	push   0x0
c001a3fc:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a401:	6a 05                	push   0x5
c001a403:	e8 41 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a408:	83 c4 0c             	add    esp,0xc
c001a40b:	6a 00                	push   0x0
c001a40d:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a412:	6a 00                	push   0x0
c001a414:	e8 30 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a419:	83 c4 0c             	add    esp,0xc
c001a41c:	6a 00                	push   0x0
c001a41e:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a423:	6a 01                	push   0x1
c001a425:	e8 1f 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a42a:	83 c4 0c             	add    esp,0xc
c001a42d:	6a 00                	push   0x0
c001a42f:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a434:	6a 09                	push   0x9
c001a436:	e8 0e 05 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a43b:	83 c4 0c             	add    esp,0xc
c001a43e:	6a 00                	push   0x0
c001a440:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a445:	6a 0a                	push   0xa
c001a447:	e8 fd 04 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a44c:	83 c4 0c             	add    esp,0xc
c001a44f:	6a 00                	push   0x0
c001a451:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a456:	6a 0b                	push   0xb
c001a458:	e8 ec 04 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a45d:	83 c4 10             	add    esp,0x10
c001a460:	50                   	push   eax
c001a461:	6a 00                	push   0x0
c001a463:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a468:	53                   	push   ebx
c001a469:	43                   	inc    ebx
c001a46a:	e8 da 04 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a46f:	83 c4 10             	add    esp,0x10
c001a472:	83 fb 1e             	cmp    ebx,0x1e
c001a475:	75 e9                	jne    c001a460 <HalInitialise()+0x169>
c001a477:	50                   	push   eax
c001a478:	6a 00                	push   0x0
c001a47a:	68 8c 1e 01 c0       	push   0xc0011e8c
c001a47f:	6a 60                	push   0x60
c001a481:	e8 c3 04 00 00       	call   c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a486:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a48b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a495:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a49c:	e8 13 52 ff ff       	call   c000f6b4 <malloc>
c001a4a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4a4:	89 c3                	mov    ebx,eax
c001a4a6:	e8 ed 0e 00 00       	call   c001b398 <RTC::RTC()>
c001a4ab:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a4b5:	5a                   	pop    edx
c001a4b6:	59                   	pop    ecx
c001a4b7:	53                   	push   ebx
c001a4b8:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c001a4be:	e8 33 f5 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001a4c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4c5:	6a 00                	push   0x0
c001a4c7:	6a 00                	push   0x0
c001a4c9:	6a 00                	push   0x0
c001a4cb:	53                   	push   ebx
c001a4cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a4cf:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a4d4:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001a4da:	83 c4 28             	add    esp,0x28
c001a4dd:	5b                   	pop    ebx
c001a4de:	c3                   	ret    

c001a4df <HalMakeBeep(int)>:
c001a4df:	53                   	push   ebx
c001a4e0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a4e4:	85 db                	test   ebx,ebx
c001a4e6:	75 07                	jne    c001a4ef <HalMakeBeep(int)+0x10>
c001a4e8:	e4 61                	in     al,0x61
c001a4ea:	83 e0 fc             	and    eax,0xfffffffc
c001a4ed:	eb 26                	jmp    c001a515 <HalMakeBeep(int)+0x36>
c001a4ef:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a4f4:	99                   	cdq    
c001a4f5:	f7 fb                	idiv   ebx
c001a4f7:	89 c1                	mov    ecx,eax
c001a4f9:	b0 b6                	mov    al,0xb6
c001a4fb:	e6 43                	out    0x43,al
c001a4fd:	88 c8                	mov    al,cl
c001a4ff:	e6 42                	out    0x42,al
c001a501:	89 c8                	mov    eax,ecx
c001a503:	c1 e8 08             	shr    eax,0x8
c001a506:	e6 42                	out    0x42,al
c001a508:	e4 61                	in     al,0x61
c001a50a:	89 c2                	mov    edx,eax
c001a50c:	83 ca 03             	or     edx,0x3
c001a50f:	38 d0                	cmp    al,dl
c001a511:	74 04                	je     c001a517 <HalMakeBeep(int)+0x38>
c001a513:	88 d0                	mov    al,dl
c001a515:	e6 61                	out    0x61,al
c001a517:	5b                   	pop    ebx
c001a518:	c3                   	ret    

c001a519 <HalGetRand()>:
c001a519:	31 c0                	xor    eax,eax
c001a51b:	c3                   	ret    

c001a51c <HalEndOfInterrupt(int)>:
c001a51c:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a523:	74 1d                	je     c001a542 <HalEndOfInterrupt(int)+0x26>
c001a525:	83 ec 18             	sub    esp,0x18
c001a528:	6a 1b                	push   0x1b
c001a52a:	e8 ec f4 ff ff       	call   c0019a1b <x86rdmsr(unsigned int)>
c001a52f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a534:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a53e:	83 c4 1c             	add    esp,0x1c
c001a541:	c3                   	ret    
c001a542:	e9 6d 08 00 00       	jmp    c001adb4 <picEOI(int)>
c001a547:	90                   	nop

c001a548 <CPU::CPU()>:
c001a548:	83 ec 0c             	sub    esp,0xc
c001a54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a54f:	83 ec 08             	sub    esp,0x8
c001a552:	68 d2 52 02 c0       	push   0xc00252d2
c001a557:	50                   	push   eax
c001a558:	e8 fb f5 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001a55d:	83 c4 10             	add    esp,0x10
c001a560:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c001a565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a569:	89 10                	mov    DWORD PTR [eax],edx
c001a56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56f:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a57d:	05 64 01 00 00       	add    eax,0x164
c001a582:	83 ec 0c             	sub    esp,0xc
c001a585:	50                   	push   eax
c001a586:	e8 b3 42 ff ff       	call   c000e83e <GDT::GDT()>
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a592:	05 68 09 00 00       	add    eax,0x968
c001a597:	83 ec 0c             	sub    esp,0xc
c001a59a:	50                   	push   eax
c001a59b:	e8 f0 44 ff ff       	call   c000ea90 <IDT::IDT()>
c001a5a0:	83 c4 10             	add    esp,0x10
c001a5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a7:	05 68 11 00 00       	add    eax,0x1168
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	50                   	push   eax
c001a5b0:	e8 f7 83 ff ff       	call   c00129ac <TSS::TSS()>
c001a5b5:	83 c4 10             	add    esp,0x10
c001a5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5bc:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a5c6:	90                   	nop
c001a5c7:	83 c4 0c             	add    esp,0xc
c001a5ca:	c3                   	ret    
c001a5cb:	90                   	nop

c001a5cc <CPU::setupSMEP()>:
c001a5cc:	0f 20 e0             	mov    eax,cr4
c001a5cf:	0d 00 00 10 00       	or     eax,0x100000
c001a5d4:	0f 22 e0             	mov    cr4,eax
c001a5d7:	c3                   	ret    

c001a5d8 <CPU::setupUMIP()>:
c001a5d8:	0f 20 e0             	mov    eax,cr4
c001a5db:	80 cc 08             	or     ah,0x8
c001a5de:	0f 22 e0             	mov    cr4,eax
c001a5e1:	c3                   	ret    

c001a5e2 <CPU::setupTSC()>:
c001a5e2:	0f 20 e0             	mov    eax,cr4
c001a5e5:	83 c8 04             	or     eax,0x4
c001a5e8:	0f 22 e0             	mov    cr4,eax
c001a5eb:	c3                   	ret    

c001a5ec <CPU::setupLargePages()>:
c001a5ec:	0f 20 e0             	mov    eax,cr4
c001a5ef:	83 c8 10             	or     eax,0x10
c001a5f2:	0f 22 e0             	mov    cr4,eax
c001a5f5:	c3                   	ret    

c001a5f6 <CPU::setupPAT()>:
c001a5f6:	f6 05 8c cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8c,0x8
c001a5fd:	74 28                	je     c001a627 <CPU::setupPAT()+0x31>
c001a5ff:	53                   	push   ebx
c001a600:	83 ec 14             	sub    esp,0x14
c001a603:	68 77 02 00 00       	push   0x277
c001a608:	e8 0e f4 ff ff       	call   c0019a1b <x86rdmsr(unsigned int)>
c001a60d:	83 c4 0c             	add    esp,0xc
c001a610:	83 e2 f8             	and    edx,0xfffffff8
c001a613:	83 ca 01             	or     edx,0x1
c001a616:	52                   	push   edx
c001a617:	50                   	push   eax
c001a618:	68 77 02 00 00       	push   0x277
c001a61d:	e8 37 f4 ff ff       	call   c0019a59 <x86wrmsr(unsigned int, unsigned long long)>
c001a622:	83 c4 18             	add    esp,0x18
c001a625:	5b                   	pop    ebx
c001a626:	c3                   	ret    
c001a627:	c3                   	ret    

c001a628 <CPU::setupMTRR()>:
c001a628:	c3                   	ret    
c001a629:	90                   	nop

c001a62a <CPU::setupGlobalPages()>:
c001a62a:	0f 20 e0             	mov    eax,cr4
c001a62d:	0c 80                	or     al,0x80
c001a62f:	0f 22 e0             	mov    cr4,eax
c001a632:	c3                   	ret    
c001a633:	90                   	nop

c001a634 <CPU::allowUsermodeDataAccess()>:
c001a634:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a63b:	74 03                	je     c001a640 <CPU::allowUsermodeDataAccess()+0xc>
c001a63d:	0f 01 cb             	stac   
c001a640:	c3                   	ret    
c001a641:	90                   	nop

c001a642 <CPU::prohibitUsermodeDataAccess()>:
c001a642:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a649:	74 03                	je     c001a64e <CPU::prohibitUsermodeDataAccess()+0xc>
c001a64b:	0f 01 ca             	clac   
c001a64e:	c3                   	ret    
c001a64f:	90                   	nop

c001a650 <CPU::setupSMAP()>:
c001a650:	0f 20 e0             	mov    eax,cr4
c001a653:	0d 00 00 20 00       	or     eax,0x200000
c001a658:	0f 22 e0             	mov    cr4,eax
c001a65b:	eb e5                	jmp    c001a642 <CPU::prohibitUsermodeDataAccess()>
c001a65d:	90                   	nop

c001a65e <CPU::setupFeatures()>:
c001a65e:	53                   	push   ebx
c001a65f:	83 ec 08             	sub    esp,0x8
c001a662:	f6 05 8f cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8f,0x20
c001a669:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a66d:	74 18                	je     c001a687 <CPU::setupFeatures()+0x29>
c001a66f:	83 ec 0c             	sub    esp,0xc
c001a672:	68 3f 55 02 c0       	push   0xc002553f
c001a677:	e8 ea c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a67c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a67f:	e8 54 ff ff ff       	call   c001a5d8 <CPU::setupUMIP()>
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a68e:	74 18                	je     c001a6a8 <CPU::setupFeatures()+0x4a>
c001a690:	83 ec 0c             	sub    esp,0xc
c001a693:	68 49 55 02 c0       	push   0xc0025549
c001a698:	e8 c9 c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a69d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6a0:	e8 3d ff ff ff       	call   c001a5e2 <CPU::setupTSC()>
c001a6a5:	83 c4 10             	add    esp,0x10
c001a6a8:	f6 05 8e cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8e,0x20
c001a6af:	74 18                	je     c001a6c9 <CPU::setupFeatures()+0x6b>
c001a6b1:	83 ec 0c             	sub    esp,0xc
c001a6b4:	68 52 55 02 c0       	push   0xc0025552
c001a6b9:	e8 a8 c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a6be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6c1:	e8 26 ff ff ff       	call   c001a5ec <CPU::setupLargePages()>
c001a6c6:	83 c4 10             	add    esp,0x10
c001a6c9:	f6 05 8e cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8e,0x40
c001a6d0:	74 18                	je     c001a6ea <CPU::setupFeatures()+0x8c>
c001a6d2:	83 ec 0c             	sub    esp,0xc
c001a6d5:	68 5b 55 02 c0       	push   0xc002555b
c001a6da:	e8 87 c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a6df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6e2:	e8 43 ff ff ff       	call   c001a62a <CPU::setupGlobalPages()>
c001a6e7:	83 c4 10             	add    esp,0x10
c001a6ea:	f6 05 8e cb 02 c0 80 	test   BYTE PTR ds:0xc002cb8e,0x80
c001a6f1:	74 18                	je     c001a70b <CPU::setupFeatures()+0xad>
c001a6f3:	83 ec 0c             	sub    esp,0xc
c001a6f6:	68 6d 55 02 c0       	push   0xc002556d
c001a6fb:	e8 66 c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a700:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a703:	e8 ee fe ff ff       	call   c001a5f6 <CPU::setupPAT()>
c001a708:	83 c4 10             	add    esp,0x10
c001a70b:	f6 05 90 cb 02 c0 04 	test   BYTE PTR ds:0xc002cb90,0x4
c001a712:	74 11                	je     c001a725 <CPU::setupFeatures()+0xc7>
c001a714:	c7 44 24 10 76 55 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025576
c001a71c:	83 c4 08             	add    esp,0x8
c001a71f:	5b                   	pop    ebx
c001a720:	e9 41 c8 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001a725:	83 c4 08             	add    esp,0x8
c001a728:	5b                   	pop    ebx
c001a729:	c3                   	ret    

c001a72a <CPU::open(int, int, void*)>:
c001a72a:	55                   	push   ebp
c001a72b:	57                   	push   edi
c001a72c:	56                   	push   esi
c001a72d:	53                   	push   ebx
c001a72e:	83 ec 18             	sub    esp,0x18
c001a731:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a735:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a739:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a73d:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a743:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a749:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a74f:	50                   	push   eax
c001a750:	e8 4b 41 ff ff       	call   c000e8a0 <GDT::setup()>
c001a755:	83 c4 0c             	add    esp,0xc
c001a758:	6a 00                	push   0x0
c001a75a:	68 ef be ad de       	push   0xdeadbeef
c001a75f:	55                   	push   ebp
c001a760:	e8 8b 82 ff ff       	call   c00129f0 <TSS::setup(unsigned long, unsigned long)>
c001a765:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a768:	e8 63 82 ff ff       	call   c00129d0 <TSS::flush()>
c001a76d:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a773:	89 04 24             	mov    DWORD PTR [esp],eax
c001a776:	e8 8b 43 ff ff       	call   c000eb06 <IDT::setup()>
c001a77b:	b8 00 04 00 00       	mov    eax,0x400
c001a780:	0f 23 f8             	mov    dr7,eax
c001a783:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a78d:	e8 78 55 ff ff       	call   c000fd0a <Phys::allocatePage()>
c001a792:	83 c4 10             	add    esp,0x10
c001a795:	85 f6                	test   esi,esi
c001a797:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a79d:	89 38                	mov    DWORD PTR [eax],edi
c001a79f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a7a5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a7a8:	74 10                	je     c001a7ba <CPU::open(int, int, void*)+0x90>
c001a7aa:	50                   	push   eax
c001a7ab:	50                   	push   eax
c001a7ac:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a7b2:	56                   	push   esi
c001a7b3:	e8 da 8b ff ff       	call   c0013392 <VAS::setCPUSpecific(unsigned long)>
c001a7b8:	eb 0d                	jmp    c001a7c7 <CPU::open(int, int, void*)+0x9d>
c001a7ba:	83 ec 0c             	sub    esp,0xc
c001a7bd:	68 80 55 02 c0       	push   0xc0025580
c001a7c2:	e8 49 53 ff ff       	call   c000fb10 <KePanic(char const*)>
c001a7c7:	83 c4 10             	add    esp,0x10
c001a7ca:	83 ec 0c             	sub    esp,0xc
c001a7cd:	68 8e 55 02 c0       	push   0xc002558e
c001a7d2:	e8 3a 2a ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001a7d7:	e8 1b fb ff ff       	call   c001a2f7 <HalInitialise()>
c001a7dc:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001a7e3:	e8 dc 29 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a7e8:	0f b6 c0             	movzx  eax,al
c001a7eb:	83 f8 01             	cmp    eax,0x1
c001a7ee:	19 c0                	sbb    eax,eax
c001a7f0:	83 e0 46             	and    eax,0x46
c001a7f3:	83 c0 1e             	add    eax,0x1e
c001a7f6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7f9:	e8 93 08 ff ff       	call   c000b091 <setupTimer(int)>
c001a7fe:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a804:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001a80b:	e8 b4 29 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a810:	83 c4 10             	add    esp,0x10
c001a813:	84 c0                	test   al,al
c001a815:	74 0c                	je     c001a823 <CPU::open(int, int, void*)+0xf9>
c001a817:	83 ec 0c             	sub    esp,0xc
c001a81a:	53                   	push   ebx
c001a81b:	e8 3e fe ff ff       	call   c001a65e <CPU::setupFeatures()>
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	83 c4 0c             	add    esp,0xc
c001a826:	31 c0                	xor    eax,eax
c001a828:	5b                   	pop    ebx
c001a829:	5e                   	pop    esi
c001a82a:	5f                   	pop    edi
c001a82b:	5d                   	pop    ebp
c001a82c:	c3                   	ret    

c001a82d <convertLegacyIRQNumber(int)>:
c001a82d:	83 ec 0c             	sub    esp,0xc
c001a830:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a83b:	74 0c                	je     c001a849 <convertLegacyIRQNumber(int)+0x1c>
c001a83d:	83 f8 0f             	cmp    eax,0xf
c001a840:	7f 0b                	jg     c001a84d <convertLegacyIRQNumber(int)+0x20>
c001a842:	0f b6 80 e8 60 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9f18]
c001a849:	83 c4 0c             	add    esp,0xc
c001a84c:	c3                   	ret    
c001a84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a851:	83 ec 0c             	sub    esp,0xc
c001a854:	68 f4 55 02 c0       	push   0xc00255f4
c001a859:	e8 b2 52 ff ff       	call   c000fb10 <KePanic(char const*)>
c001a85e:	83 c4 10             	add    esp,0x10
c001a861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a865:	83 c4 0c             	add    esp,0xc
c001a868:	c3                   	ret    

c001a869 <KeSetupInterrupts()>:
c001a869:	31 c0                	xor    eax,eax
c001a86b:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001a875:	83 c0 10             	add    eax,0x10
c001a878:	c7 80 90 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3470],0x0
c001a882:	c7 80 94 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd246c],0x0
c001a88c:	c7 80 94 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd346c],0x0
c001a896:	c7 80 98 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2468],0x0
c001a8a0:	c7 80 98 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3468],0x0
c001a8aa:	c7 80 9c db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2464],0x0
c001a8b4:	c7 80 9c cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3464],0x0
c001a8be:	3d 00 10 00 00       	cmp    eax,0x1000
c001a8c3:	75 a6                	jne    c001a86b <KeSetupInterrupts()+0x2>
c001a8c5:	c3                   	ret    

c001a8c6 <int_handler>:
c001a8c6:	55                   	push   ebp
c001a8c7:	57                   	push   edi
c001a8c8:	56                   	push   esi
c001a8c9:	53                   	push   ebx
c001a8ca:	83 ec 0c             	sub    esp,0xc
c001a8cd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a8d1:	eb 02                	jmp    c001a8d5 <int_handler+0xf>
c001a8d3:	fa                   	cli    
c001a8d4:	f4                   	hlt    
c001a8d5:	e8 30 52 ff ff       	call   c000fb0a <KeIsKernelInPanic()>
c001a8da:	84 c0                	test   al,al
c001a8dc:	75 f5                	jne    c001a8d3 <int_handler+0xd>
c001a8de:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001a8e1:	8d 46 e0             	lea    eax,[esi-0x20]
c001a8e4:	83 f8 17             	cmp    eax,0x17
c001a8e7:	76 40                	jbe    c001a929 <int_handler+0x63>
c001a8e9:	c1 e6 04             	shl    esi,0x4
c001a8ec:	31 db                	xor    ebx,ebx
c001a8ee:	8d ae a0 db 02 c0    	lea    ebp,[esi-0x3ffd2460]
c001a8f4:	81 c6 a0 cb 02 c0    	add    esi,0xc002cba0
c001a8fa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001a8fe:	85 c0                	test   eax,eax
c001a900:	74 13                	je     c001a915 <int_handler+0x4f>
c001a902:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001a906:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001a909:	74 2c                	je     c001a937 <int_handler+0x71>
c001a90b:	83 ec 08             	sub    esp,0x8
c001a90e:	52                   	push   edx
c001a90f:	57                   	push   edi
c001a910:	ff d0                	call   eax
c001a912:	83 c4 10             	add    esp,0x10
c001a915:	83 c3 01             	add    ebx,0x1
c001a918:	83 fb 04             	cmp    ebx,0x4
c001a91b:	75 dd                	jne    c001a8fa <int_handler+0x34>
c001a91d:	83 c4 0c             	add    esp,0xc
c001a920:	31 c0                	xor    eax,eax
c001a922:	5b                   	pop    ebx
c001a923:	31 d2                	xor    edx,edx
c001a925:	5e                   	pop    esi
c001a926:	5f                   	pop    edi
c001a927:	5d                   	pop    ebp
c001a928:	c3                   	ret    
c001a929:	83 ec 0c             	sub    esp,0xc
c001a92c:	50                   	push   eax
c001a92d:	e8 ea fb ff ff       	call   c001a51c <HalEndOfInterrupt(int)>
c001a932:	83 c4 10             	add    esp,0x10
c001a935:	eb b2                	jmp    c001a8e9 <int_handler+0x23>
c001a937:	83 ec 08             	sub    esp,0x8
c001a93a:	52                   	push   edx
c001a93b:	57                   	push   edi
c001a93c:	ff d0                	call   eax
c001a93e:	83 c4 10             	add    esp,0x10
c001a941:	83 c4 0c             	add    esp,0xc
c001a944:	5b                   	pop    ebx
c001a945:	5e                   	pop    esi
c001a946:	5f                   	pop    edi
c001a947:	5d                   	pop    ebp
c001a948:	c3                   	ret    

c001a949 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a949:	56                   	push   esi
c001a94a:	31 c0                	xor    eax,eax
c001a94c:	53                   	push   ebx
c001a94d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a955:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a959:	89 ca                	mov    edx,ecx
c001a95b:	c1 e2 04             	shl    edx,0x4
c001a95e:	83 bc 82 a0 db 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2460],0x0
c001a966:	74 17                	je     c001a97f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a968:	83 c0 01             	add    eax,0x1
c001a96b:	83 f8 04             	cmp    eax,0x4
c001a96e:	75 ee                	jne    c001a95e <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a970:	c7 44 24 0c 55 56 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025655
c001a978:	5b                   	pop    ebx
c001a979:	5e                   	pop    esi
c001a97a:	e9 91 51 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c001a97f:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a982:	89 1c 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],ebx
c001a989:	5b                   	pop    ebx
c001a98a:	89 34 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],esi
c001a991:	5e                   	pop    esi
c001a992:	c3                   	ret    

c001a993 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a993:	55                   	push   ebp
c001a994:	57                   	push   edi
c001a995:	56                   	push   esi
c001a996:	53                   	push   ebx
c001a997:	83 ec 0c             	sub    esp,0xc
c001a99a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a99e:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a9a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a9a9:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a9ac:	74 57                	je     c001aa05 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a9ae:	84 c0                	test   al,al
c001a9b0:	89 c7                	mov    edi,eax
c001a9b2:	74 1d                	je     c001a9d1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a9b4:	83 fe 0f             	cmp    esi,0xf
c001a9b7:	0f 8f d9 00 00 00    	jg     c001aa96 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001a9bd:	0f b6 b6 e8 60 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9f18]
c001a9c4:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a9cc:	d1 ef                	shr    edi,1
c001a9ce:	83 e7 01             	and    edi,0x1
c001a9d1:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001a9d6:	83 ec 08             	sub    esp,0x8
c001a9d9:	31 db                	xor    ebx,ebx
c001a9db:	50                   	push   eax
c001a9dc:	68 62 56 02 c0       	push   0xc0025662
c001a9e1:	e8 80 c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a9e6:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001a9eb:	83 c4 10             	add    esp,0x10
c001a9ee:	85 c0                	test   eax,eax
c001a9f0:	7f 59                	jg     c001aa4b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001a9f2:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a9f5:	83 ec 0c             	sub    esp,0xc
c001a9f8:	68 79 56 02 c0       	push   0xc0025679
c001a9fd:	e8 0e 51 ff ff       	call   c000fb10 <KePanic(char const*)>
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	89 e8                	mov    eax,ebp
c001aa07:	31 d2                	xor    edx,edx
c001aa09:	c1 e0 04             	shl    eax,0x4
c001aa0c:	8b 8c 90 a0 db 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2460]
c001aa13:	85 c9                	test   ecx,ecx
c001aa15:	0f 84 92 00 00 00    	je     c001aaad <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001aa1b:	83 c2 01             	add    edx,0x1
c001aa1e:	83 fa 04             	cmp    edx,0x4
c001aa21:	75 e9                	jne    c001aa0c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001aa23:	83 ec 0c             	sub    esp,0xc
c001aa26:	68 30 56 02 c0       	push   0xc0025630
c001aa2b:	e8 e0 50 ff ff       	call   c000fb10 <KePanic(char const*)>
c001aa30:	83 c4 10             	add    esp,0x10
c001aa33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa38:	83 c4 0c             	add    esp,0xc
c001aa3b:	5b                   	pop    ebx
c001aa3c:	5e                   	pop    esi
c001aa3d:	5f                   	pop    edi
c001aa3e:	5d                   	pop    ebp
c001aa3f:	c3                   	ret    
c001aa40:	83 c3 01             	add    ebx,0x1
c001aa43:	39 1d 00 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb00,ebx
c001aa49:	7e a7                	jle    c001a9f2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001aa4b:	8b 2c 9d 20 cb 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd34e0]
c001aa52:	83 ec 08             	sub    esp,0x8
c001aa55:	56                   	push   esi
c001aa56:	55                   	push   ebp
c001aa57:	e8 24 dc ff ff       	call   c0018680 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001aa5c:	83 c4 10             	add    esp,0x10
c001aa5f:	84 c0                	test   al,al
c001aa61:	74 dd                	je     c001aa40 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001aa63:	89 f8                	mov    eax,edi
c001aa65:	83 ec 04             	sub    esp,0x4
c001aa68:	8b 1c 9d 20 cb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd34e0]
c001aa6f:	8d 6e 20             	lea    ebp,[esi+0x20]
c001aa72:	0f b6 f8             	movzx  edi,al
c001aa75:	57                   	push   edi
c001aa76:	89 e8                	mov    eax,ebp
c001aa78:	6a 00                	push   0x0
c001aa7a:	0f b6 c0             	movzx  eax,al
c001aa7d:	50                   	push   eax
c001aa7e:	89 f0                	mov    eax,esi
c001aa80:	6a 00                	push   0x0
c001aa82:	0f b6 c0             	movzx  eax,al
c001aa85:	6a 00                	push   0x0
c001aa87:	50                   	push   eax
c001aa88:	53                   	push   ebx
c001aa89:	e8 5e dd ff ff       	call   c00187ec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001aa8e:	83 c4 20             	add    esp,0x20
c001aa91:	e9 6f ff ff ff       	jmp    c001aa05 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001aa96:	83 ec 0c             	sub    esp,0xc
c001aa99:	31 ff                	xor    edi,edi
c001aa9b:	68 f4 55 02 c0       	push   0xc00255f4
c001aaa0:	e8 6b 50 ff ff       	call   c000fb10 <KePanic(char const*)>
c001aaa5:	83 c4 10             	add    esp,0x10
c001aaa8:	e9 24 ff ff ff       	jmp    c001a9d1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001aaad:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001aab0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aab4:	89 14 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],edx
c001aabb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aabf:	89 14 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],edx
c001aac6:	83 c4 0c             	add    esp,0xc
c001aac9:	89 f0                	mov    eax,esi
c001aacb:	5b                   	pop    ebx
c001aacc:	5e                   	pop    esi
c001aacd:	5f                   	pop    edi
c001aace:	5d                   	pop    ebp
c001aacf:	c3                   	ret    

c001aad0 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001aad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001aad8:	c1 e0 04             	shl    eax,0x4
c001aadb:	8d 50 10             	lea    edx,[eax+0x10]
c001aade:	39 88 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],ecx
c001aae4:	74 08                	je     c001aaee <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001aae6:	83 c0 04             	add    eax,0x4
c001aae9:	39 d0                	cmp    eax,edx
c001aaeb:	75 f1                	jne    c001aade <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001aaed:	c3                   	ret    
c001aaee:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001aaf8:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001ab02:	eb e2                	jmp    c001aae6 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001ab04 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001ab04:	56                   	push   esi
c001ab05:	53                   	push   ebx
c001ab06:	83 ec 04             	sub    esp,0x4
c001ab09:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ab0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab12:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab16:	74 09                	je     c001ab21 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ab18:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001ab1f:	75 34                	jne    c001ab55 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001ab21:	8d 43 20             	lea    eax,[ebx+0x20]
c001ab24:	c1 e0 04             	shl    eax,0x4
c001ab27:	8d 50 10             	lea    edx,[eax+0x10]
c001ab2a:	39 b0 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],esi
c001ab30:	74 0d                	je     c001ab3f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001ab32:	83 c0 04             	add    eax,0x4
c001ab35:	39 d0                	cmp    eax,edx
c001ab37:	75 f1                	jne    c001ab2a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001ab39:	83 c4 04             	add    esp,0x4
c001ab3c:	5b                   	pop    ebx
c001ab3d:	5e                   	pop    esi
c001ab3e:	c3                   	ret    
c001ab3f:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001ab49:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001ab53:	eb dd                	jmp    c001ab32 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001ab55:	83 fb 0f             	cmp    ebx,0xf
c001ab58:	7f 09                	jg     c001ab63 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001ab5a:	0f b6 9b e8 60 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd9f18]
c001ab61:	eb be                	jmp    c001ab21 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ab63:	83 ec 0c             	sub    esp,0xc
c001ab66:	68 86 56 02 c0       	push   0xc0025686
c001ab6b:	e8 a0 4f ff ff       	call   c000fb10 <KePanic(char const*)>
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	eb ac                	jmp    c001ab21 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ab75:	66 90                	xchg   ax,ax
c001ab77:	90                   	nop

c001ab78 <picIoWait()>:
c001ab78:	eb 00                	jmp    c001ab7a <picIoWait()+0x2>
c001ab7a:	eb 00                	jmp    c001ab7c <picIoWait()+0x4>
c001ab7c:	90                   	nop
c001ab7d:	c3                   	ret    
c001ab7e:	66 90                	xchg   ax,ax

c001ab80 <picDisable()>:
c001ab80:	83 ec 10             	sub    esp,0x10
c001ab83:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ab8a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ab8f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ab93:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ab98:	ee                   	out    dx,al
c001ab99:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001aba0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001aba5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001aba9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001abae:	ee                   	out    dx,al
c001abaf:	90                   	nop
c001abb0:	83 c4 10             	add    esp,0x10
c001abb3:	c3                   	ret    

c001abb4 <picGetIRQReg(int)>:
c001abb4:	83 ec 10             	sub    esp,0x10
c001abb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abbb:	0f b6 c0             	movzx  eax,al
c001abbe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001abc5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001abc9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001abcd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001abd2:	ee                   	out    dx,al
c001abd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abd7:	0f b6 c0             	movzx  eax,al
c001abda:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001abe1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001abe5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001abe9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001abee:	ee                   	out    dx,al
c001abef:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001abf6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001abfb:	89 c2                	mov    edx,eax
c001abfd:	ec                   	in     al,dx
c001abfe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ac02:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ac06:	0f b6 c0             	movzx  eax,al
c001ac09:	c1 e0 08             	shl    eax,0x8
c001ac0c:	89 c1                	mov    ecx,eax
c001ac0e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001ac15:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001ac1a:	89 c2                	mov    edx,eax
c001ac1c:	ec                   	in     al,dx
c001ac1d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ac21:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ac25:	0f b6 c0             	movzx  eax,al
c001ac28:	09 c8                	or     eax,ecx
c001ac2a:	83 c4 10             	add    esp,0x10
c001ac2d:	c3                   	ret    
c001ac2e:	66 90                	xchg   ax,ax

c001ac30 <picOpen()>:
c001ac30:	83 ec 50             	sub    esp,0x50
c001ac33:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001ac3a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ac3f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac47:	ee                   	out    dx,al
c001ac48:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001ac4f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ac54:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ac58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac5c:	ee                   	out    dx,al
c001ac5d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001ac65:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001ac6d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001ac74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac78:	89 c2                	mov    edx,eax
c001ac7a:	ec                   	in     al,dx
c001ac7b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ac7f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ac83:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001ac87:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001ac8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac92:	89 c2                	mov    edx,eax
c001ac94:	ec                   	in     al,dx
c001ac95:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ac99:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ac9d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001aca1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001aca8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001acad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001acb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001acb5:	ee                   	out    dx,al
c001acb6:	e8 bd fe ff ff       	call   c001ab78 <picIoWait()>
c001acbb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001acc2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001acc7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001accb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001accf:	ee                   	out    dx,al
c001acd0:	e8 a3 fe ff ff       	call   c001ab78 <picIoWait()>
c001acd5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001acd9:	0f b6 c0             	movzx  eax,al
c001acdc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001ace3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ace7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001aceb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001acef:	ee                   	out    dx,al
c001acf0:	e8 83 fe ff ff       	call   c001ab78 <picIoWait()>
c001acf5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001acf9:	0f b6 c0             	movzx  eax,al
c001acfc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001ad03:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ad07:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ad0b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ad0f:	ee                   	out    dx,al
c001ad10:	e8 63 fe ff ff       	call   c001ab78 <picIoWait()>
c001ad15:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001ad1c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001ad21:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001ad25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad29:	ee                   	out    dx,al
c001ad2a:	e8 49 fe ff ff       	call   c001ab78 <picIoWait()>
c001ad2f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001ad36:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001ad3b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ad3f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad43:	ee                   	out    dx,al
c001ad44:	e8 2f fe ff ff       	call   c001ab78 <picIoWait()>
c001ad49:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001ad50:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001ad55:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001ad59:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad5d:	ee                   	out    dx,al
c001ad5e:	e8 15 fe ff ff       	call   c001ab78 <picIoWait()>
c001ad63:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001ad6a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001ad6f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001ad73:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ad77:	ee                   	out    dx,al
c001ad78:	e8 fb fd ff ff       	call   c001ab78 <picIoWait()>
c001ad7d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001ad82:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001ad89:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001ad8d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001ad91:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ad95:	ee                   	out    dx,al
c001ad96:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001ad9b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001ada2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ada6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001adaa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001adae:	ee                   	out    dx,al
c001adaf:	90                   	nop
c001adb0:	83 c4 50             	add    esp,0x50
c001adb3:	c3                   	ret    

c001adb4 <picEOI(int)>:
c001adb4:	83 ec 10             	sub    esp,0x10
c001adb7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001adbc:	75 1e                	jne    c001addc <picEOI(int)+0x28>
c001adbe:	6a 0b                	push   0xb
c001adc0:	e8 ef fd ff ff       	call   c001abb4 <picGetIRQReg(int)>
c001adc5:	83 c4 04             	add    esp,0x4
c001adc8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001adcd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001add2:	25 80 00 00 00       	and    eax,0x80
c001add7:	74 73                	je     c001ae4c <picEOI(int)+0x98>
c001add9:	8d 76 00             	lea    esi,[esi+0x0]
c001addc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001ade1:	75 31                	jne    c001ae14 <picEOI(int)+0x60>
c001ade3:	6a 0b                	push   0xb
c001ade5:	e8 ca fd ff ff       	call   c001abb4 <picGetIRQReg(int)>
c001adea:	83 c4 04             	add    esp,0x4
c001aded:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001adf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adf6:	98                   	cwde   
c001adf7:	85 c0                	test   eax,eax
c001adf9:	78 19                	js     c001ae14 <picEOI(int)+0x60>
c001adfb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001ae02:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001ae07:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae0b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ae10:	ee                   	out    dx,al
c001ae11:	eb 3d                	jmp    c001ae50 <picEOI(int)+0x9c>
c001ae13:	90                   	nop
c001ae14:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001ae19:	7e 19                	jle    c001ae34 <picEOI(int)+0x80>
c001ae1b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001ae22:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001ae27:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ae2b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ae30:	ee                   	out    dx,al
c001ae31:	8d 76 00             	lea    esi,[esi+0x0]
c001ae34:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ae3b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001ae40:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ae44:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ae49:	ee                   	out    dx,al
c001ae4a:	eb 04                	jmp    c001ae50 <picEOI(int)+0x9c>
c001ae4c:	90                   	nop
c001ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae50:	83 c4 10             	add    esp,0x10
c001ae53:	c3                   	ret    

c001ae54 <RTC::open(int, int, void*)>:
c001ae54:	31 c0                	xor    eax,eax
c001ae56:	c3                   	ret    
c001ae57:	90                   	nop

c001ae58 <RTC::close(int, int, void*)>:
c001ae58:	31 c0                	xor    eax,eax
c001ae5a:	c3                   	ret    
c001ae5b:	90                   	nop

c001ae5c <RTC::timeInSecondsUTC()>:
c001ae5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae60:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ae66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae6c:	c3                   	ret    
c001ae6d:	90                   	nop

c001ae6e <RTC::timeInDatetimeUTC()>:
c001ae6e:	53                   	push   ebx
c001ae6f:	83 ec 14             	sub    esp,0x14
c001ae72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ae7a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae7c:	50                   	push   eax
c001ae7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ae80:	83 c4 0c             	add    esp,0xc
c001ae83:	52                   	push   edx
c001ae84:	50                   	push   eax
c001ae85:	53                   	push   ebx
c001ae86:	e8 89 e7 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001ae8b:	89 d8                	mov    eax,ebx
c001ae8d:	83 c4 14             	add    esp,0x14
c001ae90:	5b                   	pop    ebx
c001ae91:	c2 04 00             	ret    0x4

c001ae94 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001ae94:	56                   	push   esi
c001ae95:	53                   	push   ebx
c001ae96:	83 ec 14             	sub    esp,0x14
c001ae99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae9f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001aea2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aea6:	52                   	push   edx
c001aea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeaf:	50                   	push   eax
c001aeb0:	e8 5f e7 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001aeb5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001aeb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aebd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aec1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aec5:	89 f0                	mov    eax,esi
c001aec7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aecb:	83 c4 20             	add    esp,0x20
c001aece:	5b                   	pop    ebx
c001aecf:	5e                   	pop    esi
c001aed0:	ff e0                	jmp    eax

c001aed2 <RTC::~RTC()>:
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	ba b0 56 02 c0       	mov    edx,0xc00256b0
c001aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aede:	89 10                	mov    DWORD PTR [eax],edx
c001aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee4:	83 ec 0c             	sub    esp,0xc
c001aee7:	50                   	push   eax
c001aee8:	e8 ff e1 fe ff       	call   c00090ec <Clock::~Clock()>
c001aeed:	83 c4 10             	add    esp,0x10
c001aef0:	90                   	nop
c001aef1:	83 c4 0c             	add    esp,0xc
c001aef4:	c3                   	ret    
c001aef5:	90                   	nop

c001aef6 <RTC::~RTC()>:
c001aef6:	83 ec 0c             	sub    esp,0xc
c001aef9:	83 ec 0c             	sub    esp,0xc
c001aefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af00:	e8 cd ff ff ff       	call   c001aed2 <RTC::~RTC()>
c001af05:	83 c4 10             	add    esp,0x10
c001af08:	83 ec 08             	sub    esp,0x8
c001af0b:	68 60 01 00 00       	push   0x160
c001af10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af14:	e8 a3 23 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001af19:	83 c4 10             	add    esp,0x10
c001af1c:	83 c4 0c             	add    esp,0xc
c001af1f:	c3                   	ret    

c001af20 <RTC::get_update_in_progress_flag()>:
c001af20:	83 ec 18             	sub    esp,0x18
c001af23:	6a 0a                	push   0xa
c001af25:	e8 d3 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001af2a:	83 c4 1c             	add    esp,0x1c
c001af2d:	0f b6 c0             	movzx  eax,al
c001af30:	c1 e8 07             	shr    eax,0x7
c001af33:	c3                   	ret    

c001af34 <RTC::completeRTCRefresh()>:
c001af34:	55                   	push   ebp
c001af35:	57                   	push   edi
c001af36:	56                   	push   esi
c001af37:	53                   	push   ebx
c001af38:	83 ec 3c             	sub    esp,0x3c
c001af3b:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001af41:	83 ec 0c             	sub    esp,0xc
c001af44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001af48:	e8 d3 ff ff ff       	call   c001af20 <RTC::get_update_in_progress_flag()>
c001af4d:	83 c4 10             	add    esp,0x10
c001af50:	84 c0                	test   al,al
c001af52:	74 0e                	je     c001af62 <RTC::completeRTCRefresh()+0x2e>
c001af54:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001af5a:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001af60:	73 df                	jae    c001af41 <RTC::completeRTCRefresh()+0xd>
c001af62:	83 ec 0c             	sub    esp,0xc
c001af65:	6a 00                	push   0x0
c001af67:	e8 91 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001af6c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001af73:	89 c7                	mov    edi,eax
c001af75:	e8 83 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001af7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001af81:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001af85:	e8 73 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001af8a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001af91:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001af95:	e8 63 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001af9a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001afa1:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001afa5:	e8 53 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001afaa:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001afb1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001afb5:	e8 43 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001afba:	0f b6 c0             	movzx  eax,al
c001afbd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afc1:	83 c4 10             	add    esp,0x10
c001afc4:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001afca:	83 ec 0c             	sub    esp,0xc
c001afcd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001afd1:	e8 4a ff ff ff       	call   c001af20 <RTC::get_update_in_progress_flag()>
c001afd6:	83 c4 10             	add    esp,0x10
c001afd9:	84 c0                	test   al,al
c001afdb:	74 0e                	je     c001afeb <RTC::completeRTCRefresh()+0xb7>
c001afdd:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001afe3:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001afe9:	73 df                	jae    c001afca <RTC::completeRTCRefresh()+0x96>
c001afeb:	83 ec 0c             	sub    esp,0xc
c001afee:	6a 00                	push   0x0
c001aff0:	e8 08 d9 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001aff5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001affc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b000:	e8 f8 d8 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b005:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b00c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b010:	e8 e8 d8 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b015:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b01c:	88 c3                	mov    bl,al
c001b01e:	e8 da d8 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b023:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b02a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b02e:	e8 ca d8 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b033:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b03a:	89 c6                	mov    esi,eax
c001b03c:	e8 bc d8 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b041:	89 f9                	mov    ecx,edi
c001b043:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b047:	83 c4 10             	add    esp,0x10
c001b04a:	0f b6 e8             	movzx  ebp,al
c001b04d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b052:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b05a:	74 27                	je     c001b083 <RTC::completeRTCRefresh()+0x14f>
c001b05c:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001b060:	89 f0                	mov    eax,esi
c001b062:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001b066:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b06a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b06e:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b072:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b076:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b07a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b07e:	e9 41 ff ff ff       	jmp    c001afc4 <RTC::completeRTCRefresh()+0x90>
c001b083:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b088:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b08c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b090:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001b094:	75 c6                	jne    c001b05c <RTC::completeRTCRefresh()+0x128>
c001b096:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b09b:	89 f1                	mov    ecx,esi
c001b09d:	0f b6 fb             	movzx  edi,bl
c001b0a0:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b0a4:	0f b6 c9             	movzx  ecx,cl
c001b0a7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b0ab:	89 f1                	mov    ecx,esi
c001b0ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0b1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b0b5:	0f 94 c2             	sete   dl
c001b0b8:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b0bc:	0f 94 c0             	sete   al
c001b0bf:	21 d0                	and    eax,edx
c001b0c1:	31 d2                	xor    edx,edx
c001b0c3:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b0c7:	0f 94 c2             	sete   dl
c001b0ca:	85 c2                	test   edx,eax
c001b0cc:	74 8e                	je     c001b05c <RTC::completeRTCRefresh()+0x128>
c001b0ce:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001b0d2:	75 88                	jne    c001b05c <RTC::completeRTCRefresh()+0x128>
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	6a 0b                	push   0xb
c001b0d9:	e8 1f d8 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b0de:	83 c4 10             	add    esp,0x10
c001b0e1:	a8 04                	test   al,0x4
c001b0e3:	75 7a                	jne    c001b15f <RTC::completeRTCRefresh()+0x22b>
c001b0e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0e9:	c1 ef 04             	shr    edi,0x4
c001b0ec:	83 e6 0f             	and    esi,0xf
c001b0ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0f3:	c1 ed 04             	shr    ebp,0x4
c001b0f6:	6b ed 0a             	imul   ebp,ebp,0xa
c001b0f9:	c1 ea 04             	shr    edx,0x4
c001b0fc:	6b d2 0a             	imul   edx,edx,0xa
c001b0ff:	83 e1 0f             	and    ecx,0xf
c001b102:	01 d1                	add    ecx,edx
c001b104:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b108:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b10c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b110:	c1 ea 04             	shr    edx,0x4
c001b113:	6b d2 0a             	imul   edx,edx,0xa
c001b116:	83 e1 0f             	and    ecx,0xf
c001b119:	01 d1                	add    ecx,edx
c001b11b:	89 fa                	mov    edx,edi
c001b11d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b121:	83 e2 07             	and    edx,0x7
c001b124:	89 d9                	mov    ecx,ebx
c001b126:	6b d2 0a             	imul   edx,edx,0xa
c001b129:	83 e1 0f             	and    ecx,0xf
c001b12c:	83 e3 80             	and    ebx,0xffffff80
c001b12f:	01 d1                	add    ecx,edx
c001b131:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b135:	09 cb                	or     ebx,ecx
c001b137:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b13b:	c1 ea 04             	shr    edx,0x4
c001b13e:	6b d2 0a             	imul   edx,edx,0xa
c001b141:	83 e1 0f             	and    ecx,0xf
c001b144:	01 d1                	add    ecx,edx
c001b146:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b14a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b14e:	c1 ea 04             	shr    edx,0x4
c001b151:	6b d2 0a             	imul   edx,edx,0xa
c001b154:	01 d6                	add    esi,edx
c001b156:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b15a:	83 e2 0f             	and    edx,0xf
c001b15d:	01 d5                	add    ebp,edx
c001b15f:	a8 02                	test   al,0x2
c001b161:	75 15                	jne    c001b178 <RTC::completeRTCRefresh()+0x244>
c001b163:	f6 c3 80             	test   bl,0x80
c001b166:	74 10                	je     c001b178 <RTC::completeRTCRefresh()+0x244>
c001b168:	83 e3 7f             	and    ebx,0x7f
c001b16b:	b9 18 00 00 00       	mov    ecx,0x18
c001b170:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b173:	99                   	cdq    
c001b174:	f7 f9                	idiv   ecx
c001b176:	88 d3                	mov    bl,dl
c001b178:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001b17e:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001b184:	77 06                	ja     c001b18c <RTC::completeRTCRefresh()+0x258>
c001b186:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001b18c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b191:	31 c9                	xor    ecx,ecx
c001b193:	31 d2                	xor    edx,edx
c001b195:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b199:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b19d:	89 cd                	mov    ebp,ecx
c001b19f:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001b1a3:	c1 e7 10             	shl    edi,0x10
c001b1a6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b1ac:	c1 e0 10             	shl    eax,0x10
c001b1af:	09 c5                	or     ebp,eax
c001b1b1:	89 e9                	mov    ecx,ebp
c001b1b3:	0f b7 c2             	movzx  eax,dx
c001b1b6:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b1ba:	09 f8                	or     eax,edi
c001b1bc:	89 c2                	mov    edx,eax
c001b1be:	50                   	push   eax
c001b1bf:	50                   	push   eax
c001b1c0:	88 d9                	mov    cl,bl
c001b1c2:	51                   	push   ecx
c001b1c3:	52                   	push   edx
c001b1c4:	e8 5b e0 fe ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c001b1c9:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b1cd:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b1d3:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b1d9:	83 c4 4c             	add    esp,0x4c
c001b1dc:	5b                   	pop    ebx
c001b1dd:	5e                   	pop    esi
c001b1de:	5f                   	pop    edi
c001b1df:	5d                   	pop    ebp
c001b1e0:	c3                   	ret    
c001b1e1:	90                   	nop

c001b1e2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b1e2:	55                   	push   ebp
c001b1e3:	57                   	push   edi
c001b1e4:	56                   	push   esi
c001b1e5:	53                   	push   ebx
c001b1e6:	83 ec 34             	sub    esp,0x34
c001b1e9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b1ed:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b1f1:	6a 00                	push   0x0
c001b1f3:	6a 00                	push   0x0
c001b1f5:	e8 57 d7 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b1fa:	5d                   	pop    ebp
c001b1fb:	89 fb                	mov    ebx,edi
c001b1fd:	58                   	pop    eax
c001b1fe:	6a 00                	push   0x0
c001b200:	6a 02                	push   0x2
c001b202:	e8 4a d7 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b207:	89 f8                	mov    eax,edi
c001b209:	89 f9                	mov    ecx,edi
c001b20b:	0f b6 c4             	movzx  eax,ah
c001b20e:	31 d2                	xor    edx,edx
c001b210:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b214:	c1 e9 10             	shr    ecx,0x10
c001b217:	89 f0                	mov    eax,esi
c001b219:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b21d:	89 f0                	mov    eax,esi
c001b21f:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b223:	0f b6 c4             	movzx  eax,ah
c001b226:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b22a:	89 f0                	mov    eax,esi
c001b22c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b230:	c1 e8 10             	shr    eax,0x10
c001b233:	b9 64 00 00 00       	mov    ecx,0x64
c001b238:	f7 f1                	div    ecx
c001b23a:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b241:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b245:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b249:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b24d:	e8 ab d6 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	a8 04                	test   al,0x4
c001b257:	89 c5                	mov    ebp,eax
c001b259:	75 6e                	jne    c001b2c9 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b25b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b25f:	31 d2                	xor    edx,edx
c001b261:	0f b6 c1             	movzx  eax,cl
c001b264:	b9 0a 00 00 00       	mov    ecx,0xa
c001b269:	f7 f1                	div    ecx
c001b26b:	c1 e0 04             	shl    eax,0x4
c001b26e:	09 d0                	or     eax,edx
c001b270:	31 d2                	xor    edx,edx
c001b272:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b276:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b27b:	f7 f1                	div    ecx
c001b27d:	c1 e0 04             	shl    eax,0x4
c001b280:	09 d0                	or     eax,edx
c001b282:	31 d2                	xor    edx,edx
c001b284:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b288:	0f b6 c3             	movzx  eax,bl
c001b28b:	f7 f1                	div    ecx
c001b28d:	c1 e0 04             	shl    eax,0x4
c001b290:	09 d0                	or     eax,edx
c001b292:	31 d2                	xor    edx,edx
c001b294:	89 c3                	mov    ebx,eax
c001b296:	89 f0                	mov    eax,esi
c001b298:	0f b6 c0             	movzx  eax,al
c001b29b:	f7 f1                	div    ecx
c001b29d:	c1 e0 04             	shl    eax,0x4
c001b2a0:	09 d0                	or     eax,edx
c001b2a2:	31 d2                	xor    edx,edx
c001b2a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b2a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b2ad:	f7 f1                	div    ecx
c001b2af:	c1 e0 04             	shl    eax,0x4
c001b2b2:	09 d0                	or     eax,edx
c001b2b4:	31 d2                	xor    edx,edx
c001b2b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2be:	f7 f1                	div    ecx
c001b2c0:	c1 e0 04             	shl    eax,0x4
c001b2c3:	09 d0                	or     eax,edx
c001b2c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2c9:	83 e5 02             	and    ebp,0x2
c001b2cc:	75 1e                	jne    c001b2ec <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b2ce:	0f b6 c3             	movzx  eax,bl
c001b2d1:	83 f8 0b             	cmp    eax,0xb
c001b2d4:	76 10                	jbe    c001b2e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b2d6:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b2d9:	84 d2                	test   dl,dl
c001b2db:	88 d3                	mov    bl,dl
c001b2dd:	75 02                	jne    c001b2e1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b2df:	b3 0c                	mov    bl,0xc
c001b2e1:	83 cb 80             	or     ebx,0xffffff80
c001b2e4:	eb 06                	jmp    c001b2ec <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b2e6:	85 c0                	test   eax,eax
c001b2e8:	75 02                	jne    c001b2ec <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b2ea:	b3 0c                	mov    bl,0xc
c001b2ec:	50                   	push   eax
c001b2ed:	0f b6 db             	movzx  ebx,bl
c001b2f0:	50                   	push   eax
c001b2f1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b2f6:	52                   	push   edx
c001b2f7:	6a 00                	push   0x0
c001b2f9:	e8 53 d6 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b2fe:	5a                   	pop    edx
c001b2ff:	59                   	pop    ecx
c001b300:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b305:	50                   	push   eax
c001b306:	6a 02                	push   0x2
c001b308:	e8 44 d6 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b30d:	5e                   	pop    esi
c001b30e:	5f                   	pop    edi
c001b30f:	53                   	push   ebx
c001b310:	6a 04                	push   0x4
c001b312:	e8 3a d6 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b317:	5d                   	pop    ebp
c001b318:	58                   	pop    eax
c001b319:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b31e:	52                   	push   edx
c001b31f:	6a 07                	push   0x7
c001b321:	e8 2b d6 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b326:	58                   	pop    eax
c001b327:	5a                   	pop    edx
c001b328:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b32d:	50                   	push   eax
c001b32e:	6a 08                	push   0x8
c001b330:	e8 1c d6 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b335:	59                   	pop    ecx
c001b336:	5b                   	pop    ebx
c001b337:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b33c:	55                   	push   ebp
c001b33d:	6a 09                	push   0x9
c001b33f:	e8 0d d6 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b344:	5e                   	pop    esi
c001b345:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b349:	e8 e6 fb ff ff       	call   c001af34 <RTC::completeRTCRefresh()>
c001b34e:	83 c4 3c             	add    esp,0x3c
c001b351:	b0 01                	mov    al,0x1
c001b353:	5b                   	pop    ebx
c001b354:	5e                   	pop    esi
c001b355:	5f                   	pop    edi
c001b356:	5d                   	pop    ebp
c001b357:	c3                   	ret    

c001b358 <rtcIRQHandler(regs*, void*)>:
c001b358:	53                   	push   ebx
c001b359:	83 ec 14             	sub    esp,0x14
c001b35c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b360:	6a 0c                	push   0xc
c001b362:	e8 96 d5 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b367:	83 c4 10             	add    esp,0x10
c001b36a:	a8 80                	test   al,0x80
c001b36c:	74 24                	je     c001b392 <rtcIRQHandler(regs*, void*)+0x3a>
c001b36e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b375:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b37c:	66 ff 05 a0 eb 02 c0 	inc    WORD PTR ds:0xc002eba0
c001b383:	75 0d                	jne    c001b392 <rtcIRQHandler(regs*, void*)+0x3a>
c001b385:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b389:	83 c4 08             	add    esp,0x8
c001b38c:	5b                   	pop    ebx
c001b38d:	e9 a2 fb ff ff       	jmp    c001af34 <RTC::completeRTCRefresh()>
c001b392:	83 c4 08             	add    esp,0x8
c001b395:	5b                   	pop    ebx
c001b396:	c3                   	ret    
c001b397:	90                   	nop

c001b398 <RTC::RTC()>:
c001b398:	83 ec 1c             	sub    esp,0x1c
c001b39b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b39f:	83 ec 08             	sub    esp,0x8
c001b3a2:	68 93 56 02 c0       	push   0xc0025693
c001b3a7:	50                   	push   eax
c001b3a8:	e8 09 dd fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b3ad:	83 c4 10             	add    esp,0x10
c001b3b0:	ba b0 56 02 c0       	mov    edx,0xc00256b0
c001b3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3b9:	89 10                	mov    DWORD PTR [eax],edx
c001b3bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3bf:	83 ec 0c             	sub    esp,0xc
c001b3c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3c6:	6a 01                	push   0x1
c001b3c8:	68 58 b3 01 c0       	push   0xc001b358
c001b3cd:	6a 08                	push   0x8
c001b3cf:	50                   	push   eax
c001b3d0:	e8 cd e5 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b3d5:	83 c4 20             	add    esp,0x20
c001b3d8:	89 c2                	mov    edx,eax
c001b3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3de:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b3e4:	fa                   	cli    
c001b3e5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b3ea:	83 c0 01             	add    eax,0x1
c001b3ed:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001b3f2:	83 ec 0c             	sub    esp,0xc
c001b3f5:	6a 0b                	push   0xb
c001b3f7:	e8 01 d5 ff ff       	call   c00188fd <x86ReadCMOS(unsigned char)>
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b403:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b407:	83 c8 10             	or     eax,0x10
c001b40a:	0f b6 c0             	movzx  eax,al
c001b40d:	83 ec 08             	sub    esp,0x8
c001b410:	50                   	push   eax
c001b411:	6a 0b                	push   0xb
c001b413:	e8 39 d5 ff ff       	call   c0018951 <x86WriteCMOS(unsigned char, unsigned char)>
c001b418:	83 c4 10             	add    esp,0x10
c001b41b:	83 ec 0c             	sub    esp,0xc
c001b41e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b422:	e8 0d fb ff ff       	call   c001af34 <RTC::completeRTCRefresh()>
c001b427:	83 c4 10             	add    esp,0x10
c001b42a:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001b432:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b437:	85 c0                	test   eax,eax
c001b439:	75 01                	jne    c001b43c <RTC::RTC()+0xa4>
c001b43b:	fb                   	sti    
c001b43c:	90                   	nop
c001b43d:	83 c4 1c             	add    esp,0x1c
c001b440:	c3                   	ret    
c001b441:	66 90                	xchg   ax,ax
c001b443:	90                   	nop

c001b444 <HalConsoleScroll(int, int)>:
c001b444:	83 ec 10             	sub    esp,0x10
c001b447:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b44f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b457:	90                   	nop
c001b458:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b45d:	0f 8f e1 00 00 00    	jg     c001b544 <HalConsoleScroll(int, int)+0x100>
c001b463:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b46b:	90                   	nop
c001b46c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b474:	0f 8f be 00 00 00    	jg     c001b538 <HalConsoleScroll(int, int)+0xf4>
c001b47a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b47e:	89 d0                	mov    eax,edx
c001b480:	c1 e0 02             	shl    eax,0x2
c001b483:	01 d0                	add    eax,edx
c001b485:	c1 e0 05             	shl    eax,0x5
c001b488:	89 c2                	mov    edx,eax
c001b48a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b48e:	01 d0                	add    eax,edx
c001b490:	89 c2                	mov    edx,eax
c001b492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b496:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b499:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b49d:	89 d0                	mov    eax,edx
c001b49f:	c1 e0 02             	shl    eax,0x2
c001b4a2:	01 d0                	add    eax,edx
c001b4a4:	c1 e0 05             	shl    eax,0x5
c001b4a7:	89 c2                	mov    edx,eax
c001b4a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4ad:	01 d0                	add    eax,edx
c001b4af:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b4b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4b9:	01 d0                	add    eax,edx
c001b4bb:	8a 11                	mov    dl,BYTE PTR [ecx]
c001b4bd:	88 10                	mov    BYTE PTR [eax],dl
c001b4bf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b4c4:	75 66                	jne    c001b52c <HalConsoleScroll(int, int)+0xe8>
c001b4c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4ca:	83 e0 01             	and    eax,0x1
c001b4cd:	74 39                	je     c001b508 <HalConsoleScroll(int, int)+0xc4>
c001b4cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4d3:	83 e0 0f             	and    eax,0xf
c001b4d6:	88 c2                	mov    dl,al
c001b4d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4dc:	c1 e0 04             	shl    eax,0x4
c001b4df:	09 d0                	or     eax,edx
c001b4e1:	88 c1                	mov    cl,al
c001b4e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b4e7:	89 d0                	mov    eax,edx
c001b4e9:	c1 e0 02             	shl    eax,0x2
c001b4ec:	01 d0                	add    eax,edx
c001b4ee:	c1 e0 05             	shl    eax,0x5
c001b4f1:	89 c2                	mov    edx,eax
c001b4f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4f7:	01 d0                	add    eax,edx
c001b4f9:	89 c2                	mov    edx,eax
c001b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4ff:	01 d0                	add    eax,edx
c001b501:	88 ca                	mov    dl,cl
c001b503:	88 10                	mov    BYTE PTR [eax],dl
c001b505:	eb 25                	jmp    c001b52c <HalConsoleScroll(int, int)+0xe8>
c001b507:	90                   	nop
c001b508:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b50c:	89 d0                	mov    eax,edx
c001b50e:	c1 e0 02             	shl    eax,0x2
c001b511:	01 d0                	add    eax,edx
c001b513:	c1 e0 05             	shl    eax,0x5
c001b516:	89 c2                	mov    edx,eax
c001b518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b51c:	01 d0                	add    eax,edx
c001b51e:	89 c2                	mov    edx,eax
c001b520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b524:	01 d0                	add    eax,edx
c001b526:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b529:	8d 76 00             	lea    esi,[esi+0x0]
c001b52c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b531:	e9 36 ff ff ff       	jmp    c001b46c <HalConsoleScroll(int, int)+0x28>
c001b536:	66 90                	xchg   ax,ax
c001b538:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b53d:	e9 16 ff ff ff       	jmp    c001b458 <HalConsoleScroll(int, int)+0x14>
c001b542:	66 90                	xchg   ax,ax
c001b544:	90                   	nop
c001b545:	83 c4 10             	add    esp,0x10
c001b548:	c3                   	ret    
c001b549:	8d 76 00             	lea    esi,[esi+0x0]

c001b54c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b54c:	83 ec 14             	sub    esp,0x14
c001b54f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b553:	88 04 24             	mov    BYTE PTR [esp],al
c001b556:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b559:	0f b6 c0             	movzx  eax,al
c001b55c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b560:	89 d1                	mov    ecx,edx
c001b562:	83 e1 0f             	and    ecx,0xf
c001b565:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b569:	c1 e2 04             	shl    edx,0x4
c001b56c:	0f b6 d2             	movzx  edx,dl
c001b56f:	09 ca                	or     edx,ecx
c001b571:	c1 e2 08             	shl    edx,0x8
c001b574:	09 d0                	or     eax,edx
c001b576:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b57b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b583:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b587:	89 d0                	mov    eax,edx
c001b589:	c1 e0 02             	shl    eax,0x2
c001b58c:	01 d0                	add    eax,edx
c001b58e:	c1 e0 04             	shl    eax,0x4
c001b591:	89 c2                	mov    edx,eax
c001b593:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b597:	01 d0                	add    eax,edx
c001b599:	d1 e0                	shl    eax,1
c001b59b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b59f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5a3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001b5a8:	66 89 10             	mov    WORD PTR [eax],dx
c001b5ab:	90                   	nop
c001b5ac:	83 c4 14             	add    esp,0x14
c001b5af:	c3                   	ret    

c001b5b0 <HalConsoleCursorUpdate(int, int)>:
c001b5b0:	83 ec 20             	sub    esp,0x20
c001b5b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b5b7:	89 c2                	mov    edx,eax
c001b5b9:	c1 e2 02             	shl    edx,0x2
c001b5bc:	01 d0                	add    eax,edx
c001b5be:	c1 e0 04             	shl    eax,0x4
c001b5c1:	89 c2                	mov    edx,eax
c001b5c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5c7:	01 d0                	add    eax,edx
c001b5c9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b5ce:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b5d5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b5da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b5de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5e2:	ee                   	out    dx,al
c001b5e3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b5e8:	0f b6 c0             	movzx  eax,al
c001b5eb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b5f2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b5f6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b5fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5fe:	ee                   	out    dx,al
c001b5ff:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b606:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b60b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b60f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b613:	ee                   	out    dx,al
c001b614:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b619:	c1 e8 08             	shr    eax,0x8
c001b61c:	0f b6 c0             	movzx  eax,al
c001b61f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b626:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b62a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b62e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b632:	ee                   	out    dx,al
c001b633:	90                   	nop
c001b634:	83 c4 20             	add    esp,0x20
c001b637:	c3                   	ret    

c001b638 <FAT::getName()>:
c001b638:	b8 e4 56 02 c0       	mov    eax,0xc00256e4
c001b63d:	c3                   	ret    
c001b63e:	66 90                	xchg   ax,ax

c001b640 <FAT::tell(void*, unsigned long long*)>:
c001b640:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b645:	75 09                	jne    c001b650 <FAT::tell(void*, unsigned long long*)+0x10>
c001b647:	b8 04 00 00 00       	mov    eax,0x4
c001b64c:	c3                   	ret    
c001b64d:	8d 76 00             	lea    esi,[esi+0x0]
c001b650:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b655:	75 09                	jne    c001b660 <FAT::tell(void*, unsigned long long*)+0x20>
c001b657:	b8 04 00 00 00       	mov    eax,0x4
c001b65c:	c3                   	ret    
c001b65d:	8d 76 00             	lea    esi,[esi+0x0]
c001b660:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b664:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b667:	ba 00 00 00 00       	mov    edx,0x0
c001b66c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b670:	89 01                	mov    DWORD PTR [ecx],eax
c001b672:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b675:	b8 00 00 00 00       	mov    eax,0x0
c001b67a:	c3                   	ret    
c001b67b:	90                   	nop

c001b67c <FAT::stat(void*, unsigned long long*)>:
c001b67c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b681:	75 09                	jne    c001b68c <FAT::stat(void*, unsigned long long*)+0x10>
c001b683:	b8 04 00 00 00       	mov    eax,0x4
c001b688:	c3                   	ret    
c001b689:	8d 76 00             	lea    esi,[esi+0x0]
c001b68c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b691:	75 09                	jne    c001b69c <FAT::stat(void*, unsigned long long*)+0x20>
c001b693:	b8 04 00 00 00       	mov    eax,0x4
c001b698:	c3                   	ret    
c001b699:	8d 76 00             	lea    esi,[esi+0x0]
c001b69c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b6a3:	ba 00 00 00 00       	mov    edx,0x0
c001b6a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b6ac:	89 01                	mov    DWORD PTR [ecx],eax
c001b6ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b6b1:	b8 00 00 00 00       	mov    eax,0x0
c001b6b6:	c3                   	ret    
c001b6b7:	90                   	nop

c001b6b8 <FAT::~FAT()>:
c001b6b8:	83 ec 0c             	sub    esp,0xc
c001b6bb:	ba 30 57 02 c0       	mov    edx,0xc0025730
c001b6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c4:	89 10                	mov    DWORD PTR [eax],edx
c001b6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ca:	83 ec 0c             	sub    esp,0xc
c001b6cd:	50                   	push   eax
c001b6ce:	e8 03 c7 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	90                   	nop
c001b6d7:	83 c4 0c             	add    esp,0xc
c001b6da:	c3                   	ret    
c001b6db:	90                   	nop

c001b6dc <FAT::~FAT()>:
c001b6dc:	83 ec 0c             	sub    esp,0xc
c001b6df:	83 ec 0c             	sub    esp,0xc
c001b6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6e6:	e8 cd ff ff ff       	call   c001b6b8 <FAT::~FAT()>
c001b6eb:	83 c4 10             	add    esp,0x10
c001b6ee:	83 ec 08             	sub    esp,0x8
c001b6f1:	6a 08                	push   0x8
c001b6f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6f7:	e8 c0 1b ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001b6fc:	83 c4 10             	add    esp,0x10
c001b6ff:	83 c4 0c             	add    esp,0xc
c001b702:	c3                   	ret    
c001b703:	90                   	nop

c001b704 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b704:	83 ec 1c             	sub    esp,0x1c
c001b707:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b70e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b713:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b717:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b71e:	83 f8 ff             	cmp    eax,0xffffffff
c001b721:	75 35                	jne    c001b758 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b723:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b727:	88 c2                	mov    dl,al
c001b729:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b72e:	01 d0                	add    eax,edx
c001b730:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b734:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b73a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b73e:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b745:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b74a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b74e:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b755:	eb 19                	jmp    c001b770 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b757:	90                   	nop
c001b758:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b75c:	88 c2                	mov    dl,al
c001b75e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b762:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b769:	01 d0                	add    eax,edx
c001b76b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b76f:	90                   	nop
c001b770:	83 ec 04             	sub    esp,0x4
c001b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b77b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b77f:	50                   	push   eax
c001b780:	e8 4f 9a fe ff       	call   c00051d4 <f_getlabel>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b78c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b791:	75 09                	jne    c001b79c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b793:	b8 00 00 00 00       	mov    eax,0x0
c001b798:	eb 0a                	jmp    c001b7a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b79a:	66 90                	xchg   ax,ax
c001b79c:	b8 01 00 00 00       	mov    eax,0x1
c001b7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a4:	83 c4 1c             	add    esp,0x1c
c001b7a7:	c3                   	ret    

c001b7a8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b7a8:	53                   	push   ebx
c001b7a9:	83 ec 58             	sub    esp,0x58
c001b7ac:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b7b4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b7b8:	b9 00 00 00 00       	mov    ecx,0x0
c001b7bd:	b8 3c 00 00 00       	mov    eax,0x3c
c001b7c2:	83 e0 f8             	and    eax,0xfffffff8
c001b7c5:	89 c3                	mov    ebx,eax
c001b7c7:	b8 00 00 00 00       	mov    eax,0x0
c001b7cc:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001b7d0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001b7d4:	83 c0 08             	add    eax,0x8
c001b7d7:	39 d8                	cmp    eax,ebx
c001b7d9:	72 f1                	jb     c001b7cc <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001b7db:	01 c2                	add    edx,eax
c001b7dd:	89 0a                	mov    DWORD PTR [edx],ecx
c001b7df:	83 c2 04             	add    edx,0x4
c001b7e2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7e6:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b7ed:	83 f8 ff             	cmp    eax,0xffffffff
c001b7f0:	75 36                	jne    c001b828 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001b7f2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7f6:	88 c2                	mov    dl,al
c001b7f8:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b7fd:	01 d0                	add    eax,edx
c001b7ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b803:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b809:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b80d:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b814:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b819:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b81d:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b824:	eb 1a                	jmp    c001b840 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001b826:	66 90                	xchg   ax,ax
c001b828:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b82c:	88 c2                	mov    dl,al
c001b82e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b832:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b839:	01 d0                	add    eax,edx
c001b83b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b83f:	90                   	nop
c001b840:	83 ec 08             	sub    esp,0x8
c001b843:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b847:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b84b:	50                   	push   eax
c001b84c:	e8 1f 50 fe ff       	call   c0000870 <strcat>
c001b851:	83 c4 10             	add    esp,0x10
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b85b:	50                   	push   eax
c001b85c:	e8 c7 9a fe ff       	call   c0005328 <f_setlabel>
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b868:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b86d:	75 09                	jne    c001b878 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001b86f:	b8 00 00 00 00       	mov    eax,0x0
c001b874:	eb 0a                	jmp    c001b880 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001b876:	66 90                	xchg   ax,ax
c001b878:	b8 01 00 00 00       	mov    eax,0x1
c001b87d:	8d 76 00             	lea    esi,[esi+0x0]
c001b880:	83 c4 58             	add    esp,0x58
c001b883:	5b                   	pop    ebx
c001b884:	c3                   	ret    
c001b885:	90                   	nop
c001b886:	66 90                	xchg   ax,ax

c001b888 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b888:	83 ec 2c             	sub    esp,0x2c
c001b88b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b893:	83 ec 08             	sub    esp,0x8
c001b896:	68 08 57 02 c0       	push   0xc0025708
c001b89b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b89f:	e8 dc 4e fe ff       	call   c0000780 <strcmp>
c001b8a4:	83 c4 10             	add    esp,0x10
c001b8a7:	85 c0                	test   eax,eax
c001b8a9:	0f 94 c0             	sete   al
c001b8ac:	0f b6 c0             	movzx  eax,al
c001b8af:	85 c0                	test   eax,eax
c001b8b1:	74 0d                	je     c001b8c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b8b3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8bb:	e9 c0 00 00 00       	jmp    c001b980 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b8c0:	83 ec 08             	sub    esp,0x8
c001b8c3:	68 fa 56 02 c0       	push   0xc00256fa
c001b8c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8cc:	e8 af 4e fe ff       	call   c0000780 <strcmp>
c001b8d1:	83 c4 10             	add    esp,0x10
c001b8d4:	85 c0                	test   eax,eax
c001b8d6:	0f 94 c0             	sete   al
c001b8d9:	0f b6 c0             	movzx  eax,al
c001b8dc:	85 c0                	test   eax,eax
c001b8de:	74 10                	je     c001b8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b8e0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8e8:	e9 93 00 00 00       	jmp    c001b980 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b8ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b8f0:	83 ec 08             	sub    esp,0x8
c001b8f3:	68 00 57 02 c0       	push   0xc0025700
c001b8f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8fc:	e8 7f 4e fe ff       	call   c0000780 <strcmp>
c001b901:	83 c4 10             	add    esp,0x10
c001b904:	85 c0                	test   eax,eax
c001b906:	0f 94 c0             	sete   al
c001b909:	0f b6 c0             	movzx  eax,al
c001b90c:	85 c0                	test   eax,eax
c001b90e:	74 0c                	je     c001b91c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b910:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b918:	eb 66                	jmp    c001b980 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b91a:	66 90                	xchg   ax,ax
c001b91c:	83 ec 08             	sub    esp,0x8
c001b91f:	68 9c 26 02 c0       	push   0xc002269c
c001b924:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b928:	e8 53 4e fe ff       	call   c0000780 <strcmp>
c001b92d:	83 c4 10             	add    esp,0x10
c001b930:	85 c0                	test   eax,eax
c001b932:	0f 94 c0             	sete   al
c001b935:	0f b6 c0             	movzx  eax,al
c001b938:	85 c0                	test   eax,eax
c001b93a:	74 0c                	je     c001b948 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b93c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b944:	eb 3a                	jmp    c001b980 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b946:	66 90                	xchg   ax,ax
c001b948:	83 ec 08             	sub    esp,0x8
c001b94b:	68 06 57 02 c0       	push   0xc0025706
c001b950:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b954:	e8 27 4e fe ff       	call   c0000780 <strcmp>
c001b959:	83 c4 10             	add    esp,0x10
c001b95c:	85 c0                	test   eax,eax
c001b95e:	0f 94 c0             	sete   al
c001b961:	0f b6 c0             	movzx  eax,al
c001b964:	85 c0                	test   eax,eax
c001b966:	74 0c                	je     c001b974 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b968:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b970:	eb 0e                	jmp    c001b980 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b972:	66 90                	xchg   ax,ax
c001b974:	b8 08 00 00 00       	mov    eax,0x8
c001b979:	e9 ea 00 00 00       	jmp    c001ba68 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b97e:	66 90                	xchg   ax,ax
c001b980:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b987:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b98c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b990:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b997:	83 f8 ff             	cmp    eax,0xffffffff
c001b99a:	75 34                	jne    c001b9d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b99c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b9a0:	88 c2                	mov    dl,al
c001b9a2:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b9a7:	01 d0                	add    eax,edx
c001b9a9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b9ad:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b9b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9b7:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b9be:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b9c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b9c7:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b9ce:	eb 18                	jmp    c001b9e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b9d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b9d4:	88 c2                	mov    dl,al
c001b9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9da:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b9e1:	01 d0                	add    eax,edx
c001b9e3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b9e7:	90                   	nop
c001b9e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9ec:	88 04 24             	mov    BYTE PTR [esp],al
c001b9ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b9f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b9ff:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ba04:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	68 00 20 00 00       	push   0x2000
c001ba14:	e8 9b 3c ff ff       	call   c000f6b4 <malloc>
c001ba19:	83 c4 10             	add    esp,0x10
c001ba1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba20:	68 00 20 00 00       	push   0x2000
c001ba25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba29:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba2d:	50                   	push   eax
c001ba2e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ba32:	50                   	push   eax
c001ba33:	e8 ed 9b fe ff       	call   c0005625 <f_mkfs>
c001ba38:	83 c4 10             	add    esp,0x10
c001ba3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ba44:	75 0a                	jne    c001ba50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ba46:	b8 00 00 00 00       	mov    eax,0x0
c001ba4b:	eb 1b                	jmp    c001ba68 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ba4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba50:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ba55:	75 09                	jne    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001ba57:	b8 09 00 00 00       	mov    eax,0x9
c001ba5c:	eb 0a                	jmp    c001ba68 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ba5e:	66 90                	xchg   ax,ax
c001ba60:	b8 01 00 00 00       	mov    eax,0x1
c001ba65:	8d 76 00             	lea    esi,[esi+0x0]
c001ba68:	83 c4 2c             	add    esp,0x2c
c001ba6b:	c3                   	ret    

c001ba6c <FAT::tryMount(LogicalDisk*, int)>:
c001ba6c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001ba72:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001ba77:	83 f8 14             	cmp    eax,0x14
c001ba7a:	75 18                	jne    c001ba94 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ba7c:	83 ec 0c             	sub    esp,0xc
c001ba7f:	68 0c 57 02 c0       	push   0xc002570c
c001ba84:	e8 87 40 ff ff       	call   c000fb10 <KePanic(char const*)>
c001ba89:	83 c4 10             	add    esp,0x10
c001ba8c:	b0 00                	mov    al,0x0
c001ba8e:	e9 ed 01 00 00       	jmp    c001bc80 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ba93:	90                   	nop
c001ba94:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ba9b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001baa1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001baa7:	3d 00 02 00 00       	cmp    eax,0x200
c001baac:	74 0a                	je     c001bab8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001baae:	b0 00                	mov    al,0x0
c001bab0:	e9 cb 01 00 00       	jmp    c001bc80 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bab5:	8d 76 00             	lea    esi,[esi+0x0]
c001bab8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bac0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bac7:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bace:	83 f8 ff             	cmp    eax,0xffffffff
c001bad1:	74 09                	je     c001badc <FAT::tryMount(LogicalDisk*, int)+0x70>
c001bad3:	b0 01                	mov    al,0x1
c001bad5:	e9 a6 01 00 00       	jmp    c001bc80 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bada:	66 90                	xchg   ax,ax
c001badc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bae6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001baee:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001baf5:	88 c2                	mov    dl,al
c001baf7:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bafc:	01 d0                	add    eax,edx
c001bafe:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bb05:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001bb0b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bb12:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001bb19:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bb1e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bb25:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001bb2c:	83 ec 0c             	sub    esp,0xc
c001bb2f:	68 34 02 00 00       	push   0x234
c001bb34:	e8 7b 3b ff ff       	call   c000f6b4 <malloc>
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001bb43:	83 ec 04             	sub    esp,0x4
c001bb46:	6a 00                	push   0x0
c001bb48:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bb4f:	50                   	push   eax
c001bb50:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bb57:	e8 c3 82 fe ff       	call   c0003e1f <f_mount>
c001bb5c:	83 c4 10             	add    esp,0x10
c001bb5f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bb66:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bb6e:	74 1c                	je     c001bb8c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bb70:	83 ec 0c             	sub    esp,0xc
c001bb73:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bb7a:	e8 55 3b ff ff       	call   c000f6d4 <rfree>
c001bb7f:	83 c4 10             	add    esp,0x10
c001bb82:	b0 00                	mov    al,0x0
c001bb84:	e9 f7 00 00 00       	jmp    c001bc80 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bb89:	8d 76 00             	lea    esi,[esi+0x0]
c001bb8c:	83 ec 04             	sub    esp,0x4
c001bb8f:	68 00 01 00 00       	push   0x100
c001bb94:	6a 00                	push   0x0
c001bb96:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bb9d:	50                   	push   eax
c001bb9e:	e8 4d 49 fe ff       	call   c00004f0 <memset>
c001bba3:	83 c4 10             	add    esp,0x10
c001bba6:	83 ec 08             	sub    esp,0x8
c001bba9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bbb0:	50                   	push   eax
c001bbb1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bbb8:	50                   	push   eax
c001bbb9:	e8 b2 4c fe ff       	call   c0000870 <strcat>
c001bbbe:	83 c4 10             	add    esp,0x10
c001bbc1:	83 ec 08             	sub    esp,0x8
c001bbc4:	68 1a 57 02 c0       	push   0xc002571a
c001bbc9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bbd0:	50                   	push   eax
c001bbd1:	e8 9a 4c fe ff       	call   c0000870 <strcat>
c001bbd6:	83 c4 10             	add    esp,0x10
c001bbd9:	83 ec 04             	sub    esp,0x4
c001bbdc:	6a 01                	push   0x1
c001bbde:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001bbe5:	50                   	push   eax
c001bbe6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bbea:	50                   	push   eax
c001bbeb:	e8 91 82 fe ff       	call   c0003e81 <f_open>
c001bbf0:	83 c4 10             	add    esp,0x10
c001bbf3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bbfa:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001bc01:	85 c0                	test   eax,eax
c001bc03:	74 0b                	je     c001bc10 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bc05:	78 31                	js     c001bc38 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bc07:	83 e8 04             	sub    eax,0x4
c001bc0a:	83 f8 01             	cmp    eax,0x1
c001bc0d:	77 29                	ja     c001bc38 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bc0f:	90                   	nop
c001bc10:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001bc18:	83 ec 0c             	sub    esp,0xc
c001bc1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc1f:	50                   	push   eax
c001bc20:	e8 0c 8a fe ff       	call   c0004631 <f_close>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	90                   	nop
c001bc29:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001bc31:	85 c0                	test   eax,eax
c001bc33:	74 43                	je     c001bc78 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001bc35:	eb 31                	jmp    c001bc68 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bc37:	90                   	nop
c001bc38:	83 ec 0c             	sub    esp,0xc
c001bc3b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bc42:	e8 8d 3a ff ff       	call   c000f6d4 <rfree>
c001bc47:	83 c4 10             	add    esp,0x10
c001bc4a:	83 ec 04             	sub    esp,0x4
c001bc4d:	6a 00                	push   0x0
c001bc4f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bc56:	50                   	push   eax
c001bc57:	6a 00                	push   0x0
c001bc59:	e8 c1 81 fe ff       	call   c0003e1f <f_mount>
c001bc5e:	83 c4 10             	add    esp,0x10
c001bc61:	b0 00                	mov    al,0x0
c001bc63:	eb 1b                	jmp    c001bc80 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc65:	8d 76 00             	lea    esi,[esi+0x0]
c001bc68:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bc6d:	83 c0 01             	add    eax,0x1
c001bc70:	a3 c0 eb 02 c0       	mov    ds:0xc002ebc0,eax
c001bc75:	8d 76 00             	lea    esi,[esi+0x0]
c001bc78:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001bc7f:	90                   	nop
c001bc80:	81 c4 4c 03 00 00    	add    esp,0x34c
c001bc86:	c3                   	ret    
c001bc87:	90                   	nop

c001bc88 <FAT::allocateSwapfile(char const*, int)>:
c001bc88:	55                   	push   ebp
c001bc89:	57                   	push   edi
c001bc8a:	56                   	push   esi
c001bc8b:	53                   	push   ebx
c001bc8c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bc92:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bc9d:	83 ec 0c             	sub    esp,0xc
c001bca0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bca7:	e8 08 3a ff ff       	call   c000f6b4 <malloc>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	89 c7                	mov    edi,eax
c001bcb1:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001bcb6:	83 ec 04             	sub    esp,0x4
c001bcb9:	50                   	push   eax
c001bcba:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bcc1:	57                   	push   edi
c001bcc2:	e8 c1 c4 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bcd1:	83 ec 04             	sub    esp,0x4
c001bcd4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bcd8:	50                   	push   eax
c001bcd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcdd:	50                   	push   eax
c001bcde:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bce5:	e8 be c7 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bcf4:	c1 e0 14             	shl    eax,0x14
c001bcf7:	89 c7                	mov    edi,eax
c001bcf9:	89 c5                	mov    ebp,eax
c001bcfb:	c1 fd 1f             	sar    ebp,0x1f
c001bcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd06:	89 f9                	mov    ecx,edi
c001bd08:	31 c1                	xor    ecx,eax
c001bd0a:	89 cb                	mov    ebx,ecx
c001bd0c:	89 e9                	mov    ecx,ebp
c001bd0e:	31 d1                	xor    ecx,edx
c001bd10:	89 ce                	mov    esi,ecx
c001bd12:	89 f0                	mov    eax,esi
c001bd14:	09 d8                	or     eax,ebx
c001bd16:	0f 84 9c 00 00 00    	je     c001bdb8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001bd1c:	83 ec 0c             	sub    esp,0xc
c001bd1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd26:	e8 49 c6 fe ff       	call   c0008374 <File::unlink()>
c001bd2b:	83 c4 10             	add    esp,0x10
c001bd2e:	83 ec 08             	sub    esp,0x8
c001bd31:	6a 12                	push   0x12
c001bd33:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd3a:	e8 67 c4 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001bd3f:	83 c4 10             	add    esp,0x10
c001bd42:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd49:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bd4f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd56:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bd5d:	c1 e0 14             	shl    eax,0x14
c001bd60:	83 ec 04             	sub    esp,0x4
c001bd63:	6a 01                	push   0x1
c001bd65:	50                   	push   eax
c001bd66:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bd6d:	e8 46 97 fe ff       	call   c00054b8 <f_expand>
c001bd72:	83 c4 10             	add    esp,0x10
c001bd75:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd7e:	83 c0 10             	add    eax,0x10
c001bd81:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd83:	83 ec 0c             	sub    esp,0xc
c001bd86:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd8a:	52                   	push   edx
c001bd8b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bd8f:	52                   	push   edx
c001bd90:	6a 00                	push   0x0
c001bd92:	68 00 04 00 00       	push   0x400
c001bd97:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd9e:	ff d0                	call   eax
c001bda0:	83 c4 20             	add    esp,0x20
c001bda3:	83 ec 0c             	sub    esp,0xc
c001bda6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bdad:	e8 52 c4 fe ff       	call   c0008204 <File::close()>
c001bdb2:	83 c4 10             	add    esp,0x10
c001bdb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb8:	83 ec 08             	sub    esp,0x8
c001bdbb:	6a 01                	push   0x1
c001bdbd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bdc4:	e8 dd c3 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001bdc9:	83 c4 10             	add    esp,0x10
c001bdcc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bdd3:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdd5:	83 c0 0c             	add    eax,0xc
c001bdd8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdda:	83 ec 0c             	sub    esp,0xc
c001bddd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bde1:	52                   	push   edx
c001bde2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bde6:	52                   	push   edx
c001bde7:	6a 00                	push   0x0
c001bde9:	6a 04                	push   0x4
c001bdeb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bdf2:	ff d0                	call   eax
c001bdf4:	83 c4 20             	add    esp,0x20
c001bdf7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bdfe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001be04:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001be0b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001be12:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001be15:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001be1c:	83 ec 0c             	sub    esp,0xc
c001be1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001be26:	e8 d9 c3 fe ff       	call   c0008204 <File::close()>
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001be35:	ba 00 00 00 00       	mov    edx,0x0
c001be3a:	81 c4 3c 04 00 00    	add    esp,0x43c
c001be40:	5b                   	pop    ebx
c001be41:	5e                   	pop    esi
c001be42:	5f                   	pop    edi
c001be43:	5d                   	pop    ebp
c001be44:	c3                   	ret    
c001be45:	90                   	nop
c001be46:	66 90                	xchg   ax,ax

c001be48 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001be48:	57                   	push   edi
c001be49:	56                   	push   esi
c001be4a:	53                   	push   ebx
c001be4b:	81 ec 50 02 00 00    	sub    esp,0x250
c001be51:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001be59:	74 0d                	je     c001be68 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001be5b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001be63:	75 0f                	jne    c001be74 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001be65:	8d 76 00             	lea    esi,[esi+0x0]
c001be68:	b8 04 00 00 00       	mov    eax,0x4
c001be6d:	e9 3a 01 00 00       	jmp    c001bfac <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001be72:	66 90                	xchg   ax,ax
c001be74:	83 ec 08             	sub    esp,0x8
c001be77:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001be7e:	50                   	push   eax
c001be7f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001be86:	e8 72 8a fe ff       	call   c00048fd <f_readdir>
c001be8b:	83 c4 10             	add    esp,0x10
c001be8e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001be95:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001be9c:	83 ec 0c             	sub    esp,0xc
c001be9f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bea6:	83 c0 16             	add    eax,0x16
c001bea9:	50                   	push   eax
c001beaa:	e8 d1 46 fe ff       	call   c0000580 <strlen>
c001beaf:	83 c4 10             	add    esp,0x10
c001beb2:	ba 00 00 00 00       	mov    edx,0x0
c001beb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bebb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001bebf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bec6:	0f b6 c0             	movzx  eax,al
c001bec9:	83 e0 10             	and    eax,0x10
c001becc:	74 0a                	je     c001bed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bece:	b8 02 00 00 00       	mov    eax,0x2
c001bed3:	eb 0b                	jmp    c001bee0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bed5:	8d 76 00             	lea    esi,[esi+0x0]
c001bed8:	b8 01 00 00 00       	mov    eax,0x1
c001bedd:	8d 76 00             	lea    esi,[esi+0x0]
c001bee0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bee4:	83 ec 08             	sub    esp,0x8
c001bee7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001beee:	83 c0 16             	add    eax,0x16
c001bef1:	50                   	push   eax
c001bef2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bef6:	83 c0 10             	add    eax,0x10
c001bef9:	50                   	push   eax
c001befa:	e8 51 47 fe ff       	call   c0000650 <strcpy>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bf09:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bf10:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf14:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bf1b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bf22:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bf29:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bf30:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bf37:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bf3e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bf45:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bf4c:	89 c6                	mov    esi,eax
c001bf4e:	89 d7                	mov    edi,edx
c001bf50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf52:	89 c8                	mov    eax,ecx
c001bf54:	89 fa                	mov    edx,edi
c001bf56:	89 f3                	mov    ebx,esi
c001bf58:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bf5f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bf66:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bf6d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bf74:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf7a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bf81:	0f be c0             	movsx  eax,al
c001bf84:	85 c0                	test   eax,eax
c001bf86:	75 08                	jne    c001bf90 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001bf88:	b8 07 00 00 00       	mov    eax,0x7
c001bf8d:	eb 1d                	jmp    c001bfac <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bf8f:	90                   	nop
c001bf90:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bf97:	85 c0                	test   eax,eax
c001bf99:	75 09                	jne    c001bfa4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001bf9b:	b8 00 00 00 00       	mov    eax,0x0
c001bfa0:	eb 0a                	jmp    c001bfac <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bfa2:	66 90                	xchg   ax,ax
c001bfa4:	b8 01 00 00 00       	mov    eax,0x1
c001bfa9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfac:	81 c4 50 02 00 00    	add    esp,0x250
c001bfb2:	5b                   	pop    ebx
c001bfb3:	5e                   	pop    esi
c001bfb4:	5f                   	pop    edi
c001bfb5:	c3                   	ret    
c001bfb6:	66 90                	xchg   ax,ax

c001bfb8 <FAT::read(void*, unsigned long, void*, int*)>:
c001bfb8:	83 ec 1c             	sub    esp,0x1c
c001bfbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bfc0:	74 0a                	je     c001bfcc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bfc2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bfc7:	75 0b                	jne    c001bfd4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bfc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfcc:	b8 04 00 00 00       	mov    eax,0x4
c001bfd1:	eb 41                	jmp    c001c014 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bfd3:	90                   	nop
c001bfd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfd8:	50                   	push   eax
c001bfd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bfe1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfe5:	e8 5a 81 fe ff       	call   c0004144 <f_read>
c001bfea:	83 c4 10             	add    esp,0x10
c001bfed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bff1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bff5:	89 c2                	mov    edx,eax
c001bff7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bffb:	89 10                	mov    DWORD PTR [eax],edx
c001bffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c001:	85 c0                	test   eax,eax
c001c003:	75 07                	jne    c001c00c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c005:	b8 00 00 00 00       	mov    eax,0x0
c001c00a:	eb 08                	jmp    c001c014 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c00c:	b8 01 00 00 00       	mov    eax,0x1
c001c011:	8d 76 00             	lea    esi,[esi+0x0]
c001c014:	83 c4 1c             	add    esp,0x1c
c001c017:	c3                   	ret    

c001c018 <FAT::write(void*, unsigned long, void*, int*)>:
c001c018:	83 ec 1c             	sub    esp,0x1c
c001c01b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c020:	74 0a                	je     c001c02c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c022:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c027:	75 0b                	jne    c001c034 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c029:	8d 76 00             	lea    esi,[esi+0x0]
c001c02c:	b8 04 00 00 00       	mov    eax,0x4
c001c031:	eb 41                	jmp    c001c074 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c033:	90                   	nop
c001c034:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c038:	50                   	push   eax
c001c039:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c03d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c041:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c045:	e8 db 82 fe ff       	call   c0004325 <f_write>
c001c04a:	83 c4 10             	add    esp,0x10
c001c04d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c051:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c055:	89 c2                	mov    edx,eax
c001c057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c05b:	89 10                	mov    DWORD PTR [eax],edx
c001c05d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c061:	85 c0                	test   eax,eax
c001c063:	75 07                	jne    c001c06c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c065:	b8 00 00 00 00       	mov    eax,0x0
c001c06a:	eb 08                	jmp    c001c074 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c06c:	b8 01 00 00 00       	mov    eax,0x1
c001c071:	8d 76 00             	lea    esi,[esi+0x0]
c001c074:	83 c4 1c             	add    esp,0x1c
c001c077:	c3                   	ret    

c001c078 <FAT::close(void*)>:
c001c078:	83 ec 1c             	sub    esp,0x1c
c001c07b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c080:	75 0a                	jne    c001c08c <FAT::close(void*)+0x14>
c001c082:	b8 04 00 00 00       	mov    eax,0x4
c001c087:	eb 3f                	jmp    c001c0c8 <FAT::close(void*)+0x50>
c001c089:	8d 76 00             	lea    esi,[esi+0x0]
c001c08c:	83 ec 0c             	sub    esp,0xc
c001c08f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c093:	e8 99 85 fe ff       	call   c0004631 <f_close>
c001c098:	83 c4 10             	add    esp,0x10
c001c09b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c09f:	83 ec 0c             	sub    esp,0xc
c001c0a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0a6:	e8 19 36 ff ff       	call   c000f6c4 <free>
c001c0ab:	83 c4 10             	add    esp,0x10
c001c0ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0b2:	85 c0                	test   eax,eax
c001c0b4:	75 0a                	jne    c001c0c0 <FAT::close(void*)+0x48>
c001c0b6:	b8 00 00 00 00       	mov    eax,0x0
c001c0bb:	eb 0b                	jmp    c001c0c8 <FAT::close(void*)+0x50>
c001c0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c0c0:	b8 01 00 00 00       	mov    eax,0x1
c001c0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0c8:	83 c4 1c             	add    esp,0x1c
c001c0cb:	c3                   	ret    

c001c0cc <FAT::closeDir(void*)>:
c001c0cc:	83 ec 1c             	sub    esp,0x1c
c001c0cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c0d4:	75 0a                	jne    c001c0e0 <FAT::closeDir(void*)+0x14>
c001c0d6:	b8 04 00 00 00       	mov    eax,0x4
c001c0db:	eb 3f                	jmp    c001c11c <FAT::closeDir(void*)+0x50>
c001c0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c0e0:	83 ec 0c             	sub    esp,0xc
c001c0e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0e7:	e8 ef 87 fe ff       	call   c00048db <f_closedir>
c001c0ec:	83 c4 10             	add    esp,0x10
c001c0ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0fa:	e8 c5 35 ff ff       	call   c000f6c4 <free>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c106:	85 c0                	test   eax,eax
c001c108:	75 0a                	jne    c001c114 <FAT::closeDir(void*)+0x48>
c001c10a:	b8 00 00 00 00       	mov    eax,0x0
c001c10f:	eb 0b                	jmp    c001c11c <FAT::closeDir(void*)+0x50>
c001c111:	8d 76 00             	lea    esi,[esi+0x0]
c001c114:	b8 01 00 00 00       	mov    eax,0x1
c001c119:	8d 76 00             	lea    esi,[esi+0x0]
c001c11c:	83 c4 1c             	add    esp,0x1c
c001c11f:	c3                   	ret    

c001c120 <FAT::truncate(void*, unsigned long long)>:
c001c120:	83 ec 2c             	sub    esp,0x2c
c001c123:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c127:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c12b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c12f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c133:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c138:	75 0a                	jne    c001c144 <FAT::truncate(void*, unsigned long long)+0x24>
c001c13a:	b8 04 00 00 00       	mov    eax,0x4
c001c13f:	eb 47                	jmp    c001c188 <FAT::truncate(void*, unsigned long long)+0x68>
c001c141:	8d 76 00             	lea    esi,[esi+0x0]
c001c144:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c148:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c14b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c14f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c157:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c15b:	83 ec 08             	sub    esp,0x8
c001c15e:	50                   	push   eax
c001c15f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c163:	e8 f8 84 fe ff       	call   c0004660 <f_lseek>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c16f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c173:	85 c0                	test   eax,eax
c001c175:	75 09                	jne    c001c180 <FAT::truncate(void*, unsigned long long)+0x60>
c001c177:	b8 00 00 00 00       	mov    eax,0x0
c001c17c:	eb 0a                	jmp    c001c188 <FAT::truncate(void*, unsigned long long)+0x68>
c001c17e:	66 90                	xchg   ax,ax
c001c180:	b8 01 00 00 00       	mov    eax,0x1
c001c185:	8d 76 00             	lea    esi,[esi+0x0]
c001c188:	83 c4 2c             	add    esp,0x2c
c001c18b:	c3                   	ret    

c001c18c <FAT::seek(void*, unsigned long long)>:
c001c18c:	83 ec 2c             	sub    esp,0x2c
c001c18f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c197:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c19b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c19f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c1a4:	75 0a                	jne    c001c1b0 <FAT::seek(void*, unsigned long long)+0x24>
c001c1a6:	b8 04 00 00 00       	mov    eax,0x4
c001c1ab:	eb 33                	jmp    c001c1e0 <FAT::seek(void*, unsigned long long)+0x54>
c001c1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c1b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1b4:	83 ec 08             	sub    esp,0x8
c001c1b7:	50                   	push   eax
c001c1b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c1bc:	e8 9f 84 fe ff       	call   c0004660 <f_lseek>
c001c1c1:	83 c4 10             	add    esp,0x10
c001c1c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c1c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c1cc:	85 c0                	test   eax,eax
c001c1ce:	75 08                	jne    c001c1d8 <FAT::seek(void*, unsigned long long)+0x4c>
c001c1d0:	b8 00 00 00 00       	mov    eax,0x0
c001c1d5:	eb 09                	jmp    c001c1e0 <FAT::seek(void*, unsigned long long)+0x54>
c001c1d7:	90                   	nop
c001c1d8:	b8 01 00 00 00       	mov    eax,0x1
c001c1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e0:	83 c4 2c             	add    esp,0x2c
c001c1e3:	c3                   	ret    

c001c1e4 <fatWrapperReadDisk>:
c001c1e4:	53                   	push   ebx
c001c1e5:	83 ec 18             	sub    esp,0x18
c001c1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c1f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1f5:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c1fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c200:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c204:	ba 00 00 00 00       	mov    edx,0x0
c001c209:	83 ec 0c             	sub    esp,0xc
c001c20c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c210:	53                   	push   ebx
c001c211:	52                   	push   edx
c001c212:	50                   	push   eax
c001c213:	51                   	push   ecx
c001c214:	e8 33 e8 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001c219:	83 c4 20             	add    esp,0x20
c001c21c:	83 c4 18             	add    esp,0x18
c001c21f:	5b                   	pop    ebx
c001c220:	c3                   	ret    
c001c221:	8d 76 00             	lea    esi,[esi+0x0]

c001c224 <fatWrapperWriteDisk>:
c001c224:	53                   	push   ebx
c001c225:	83 ec 18             	sub    esp,0x18
c001c228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c22c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c230:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c235:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c23c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c240:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c244:	ba 00 00 00 00       	mov    edx,0x0
c001c249:	83 ec 0c             	sub    esp,0xc
c001c24c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c250:	53                   	push   ebx
c001c251:	52                   	push   edx
c001c252:	50                   	push   eax
c001c253:	51                   	push   ecx
c001c254:	e8 5f e8 fe ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c001c259:	83 c4 20             	add    esp,0x20
c001c25c:	83 c4 18             	add    esp,0x18
c001c25f:	5b                   	pop    ebx
c001c260:	c3                   	ret    
c001c261:	8d 76 00             	lea    esi,[esi+0x0]

c001c264 <fatWrapperIoctl>:
c001c264:	53                   	push   ebx
c001c265:	83 ec 28             	sub    esp,0x28
c001c268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c26c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c270:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c274:	88 d0                	mov    al,dl
c001c276:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c27a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c27f:	83 f8 02             	cmp    eax,0x2
c001c282:	75 34                	jne    c001c2b8 <fatWrapperIoctl+0x54>
c001c284:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c288:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c28c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c291:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c298:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c29e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2a4:	89 c2                	mov    edx,eax
c001c2a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2aa:	66 89 10             	mov    WORD PTR [eax],dx
c001c2ad:	b8 00 00 00 00       	mov    eax,0x0
c001c2b2:	e9 c5 00 00 00       	jmp    c001c37c <fatWrapperIoctl+0x118>
c001c2b7:	90                   	nop
c001c2b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c2bd:	83 f8 01             	cmp    eax,0x1
c001c2c0:	75 6a                	jne    c001c32c <fatWrapperIoctl+0xc8>
c001c2c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c2c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2ca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2cf:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c2d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c2dc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c2e2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c2e8:	89 c8                	mov    eax,ecx
c001c2ea:	89 da                	mov    edx,ebx
c001c2ec:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c2f0:	c1 e0 0a             	shl    eax,0xa
c001c2f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c2f8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001c2ff:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c305:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c30b:	89 cb                	mov    ebx,ecx
c001c30d:	c1 fb 1f             	sar    ebx,0x1f
c001c310:	53                   	push   ebx
c001c311:	51                   	push   ecx
c001c312:	52                   	push   edx
c001c313:	50                   	push   eax
c001c314:	e8 7b 55 00 00       	call   c0021894 <__udivdi3>
c001c319:	83 c4 10             	add    esp,0x10
c001c31c:	89 c2                	mov    edx,eax
c001c31e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c322:	89 10                	mov    DWORD PTR [eax],edx
c001c324:	b8 00 00 00 00       	mov    eax,0x0
c001c329:	eb 51                	jmp    c001c37c <fatWrapperIoctl+0x118>
c001c32b:	90                   	nop
c001c32c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c331:	85 c0                	test   eax,eax
c001c333:	75 07                	jne    c001c33c <fatWrapperIoctl+0xd8>
c001c335:	b8 00 00 00 00       	mov    eax,0x0
c001c33a:	eb 40                	jmp    c001c37c <fatWrapperIoctl+0x118>
c001c33c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c341:	83 f8 03             	cmp    eax,0x3
c001c344:	75 1a                	jne    c001c360 <fatWrapperIoctl+0xfc>
c001c346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c34a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c34e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c352:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c358:	b8 00 00 00 00       	mov    eax,0x0
c001c35d:	eb 1d                	jmp    c001c37c <fatWrapperIoctl+0x118>
c001c35f:	90                   	nop
c001c360:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c365:	83 f8 04             	cmp    eax,0x4
c001c368:	75 0a                	jne    c001c374 <fatWrapperIoctl+0x110>
c001c36a:	b8 00 00 00 00       	mov    eax,0x0
c001c36f:	eb 0b                	jmp    c001c37c <fatWrapperIoctl+0x118>
c001c371:	8d 76 00             	lea    esi,[esi+0x0]
c001c374:	b8 04 00 00 00       	mov    eax,0x4
c001c379:	8d 76 00             	lea    esi,[esi+0x0]
c001c37c:	83 c4 28             	add    esp,0x28
c001c37f:	5b                   	pop    ebx
c001c380:	c3                   	ret    
c001c381:	90                   	nop
c001c382:	66 90                	xchg   ax,ax

c001c384 <FAT::FAT()>:
c001c384:	83 ec 1c             	sub    esp,0x1c
c001c387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c38b:	83 ec 0c             	sub    esp,0xc
c001c38e:	50                   	push   eax
c001c38f:	e8 1e ba fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001c394:	83 c4 10             	add    esp,0x10
c001c397:	ba 30 57 02 c0       	mov    edx,0xc0025730
c001c39c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3a0:	89 10                	mov    DWORD PTR [eax],edx
c001c3a2:	c7 05 c0 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc0,0x0
c001c3ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c3b4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c3b9:	7f 19                	jg     c001c3d4 <FAT::FAT()+0x50>
c001c3bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3bf:	c7 04 85 e0 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1420],0xffffffff
c001c3ca:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c3cf:	eb e3                	jmp    c001c3b4 <FAT::FAT()+0x30>
c001c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d4:	90                   	nop
c001c3d5:	83 c4 1c             	add    esp,0x1c
c001c3d8:	c3                   	ret    
c001c3d9:	90                   	nop
c001c3da:	66 90                	xchg   ax,ax

c001c3dc <FAT::fixFilepath(char*)>:
c001c3dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3e0:	8a 00                	mov    al,BYTE PTR [eax]
c001c3e2:	0f be c0             	movsx  eax,al
c001c3e5:	83 f8 40             	cmp    eax,0x40
c001c3e8:	7e 2e                	jle    c001c418 <FAT::fixFilepath(char*)+0x3c>
c001c3ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3ee:	8a 00                	mov    al,BYTE PTR [eax]
c001c3f0:	83 e8 41             	sub    eax,0x41
c001c3f3:	88 c2                	mov    dl,al
c001c3f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3f9:	88 10                	mov    BYTE PTR [eax],dl
c001c3fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3ff:	8a 00                	mov    al,BYTE PTR [eax]
c001c401:	0f be c0             	movsx  eax,al
c001c404:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001c40b:	83 c0 30             	add    eax,0x30
c001c40e:	88 c2                	mov    dl,al
c001c410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c414:	88 10                	mov    BYTE PTR [eax],dl
c001c416:	66 90                	xchg   ax,ax
c001c418:	90                   	nop
c001c419:	c3                   	ret    
c001c41a:	66 90                	xchg   ax,ax

c001c41c <FAT::open(char const*, void**, FileOpenMode)>:
c001c41c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c422:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c42a:	74 0c                	je     c001c438 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c42c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c434:	75 0e                	jne    c001c444 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c436:	66 90                	xchg   ax,ax
c001c438:	b8 04 00 00 00       	mov    eax,0x4
c001c43d:	e9 46 01 00 00       	jmp    c001c588 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c442:	66 90                	xchg   ax,ax
c001c444:	83 ec 08             	sub    esp,0x8
c001c447:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c44e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c452:	50                   	push   eax
c001c453:	e8 f8 41 fe ff       	call   c0000650 <strcpy>
c001c458:	83 c4 10             	add    esp,0x10
c001c45b:	83 ec 08             	sub    esp,0x8
c001c45e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c462:	50                   	push   eax
c001c463:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c46a:	e8 6d ff ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c47a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c481:	83 e0 01             	and    eax,0x1
c001c484:	74 12                	je     c001c498 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c486:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c48d:	83 c8 01             	or     eax,0x1
c001c490:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c497:	90                   	nop
c001c498:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c49f:	83 e0 04             	and    eax,0x4
c001c4a2:	74 24                	je     c001c4c8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c4a4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c4ab:	83 c8 30             	or     eax,0x30
c001c4ae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c4b5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c4bc:	83 c8 02             	or     eax,0x2
c001c4bf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c4c6:	66 90                	xchg   ax,ax
c001c4c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c4cf:	83 e0 02             	and    eax,0x2
c001c4d2:	74 14                	je     c001c4e8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c4d4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c4db:	83 c8 02             	or     eax,0x2
c001c4de:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c4ef:	83 e0 08             	and    eax,0x8
c001c4f2:	74 14                	je     c001c508 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c4f4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c4fb:	83 c8 04             	or     eax,0x4
c001c4fe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c505:	8d 76 00             	lea    esi,[esi+0x0]
c001c508:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c50f:	83 e0 10             	and    eax,0x10
c001c512:	74 14                	je     c001c528 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c514:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c51b:	83 c8 08             	or     eax,0x8
c001c51e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c525:	8d 76 00             	lea    esi,[esi+0x0]
c001c528:	83 ec 0c             	sub    esp,0xc
c001c52b:	68 28 02 00 00       	push   0x228
c001c530:	e8 7f 31 ff ff       	call   c000f6b4 <malloc>
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	89 c2                	mov    edx,eax
c001c53a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c541:	89 10                	mov    DWORD PTR [eax],edx
c001c543:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c54b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c552:	8b 00                	mov    eax,DWORD PTR [eax]
c001c554:	83 ec 04             	sub    esp,0x4
c001c557:	52                   	push   edx
c001c558:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c55c:	52                   	push   edx
c001c55d:	50                   	push   eax
c001c55e:	e8 1e 79 fe ff       	call   c0003e81 <f_open>
c001c563:	83 c4 10             	add    esp,0x10
c001c566:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c56d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c575:	74 09                	je     c001c580 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c577:	b8 01 00 00 00       	mov    eax,0x1
c001c57c:	eb 0a                	jmp    c001c588 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c57e:	66 90                	xchg   ax,ax
c001c580:	b8 00 00 00 00       	mov    eax,0x0
c001c585:	8d 76 00             	lea    esi,[esi+0x0]
c001c588:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c58e:	c3                   	ret    
c001c58f:	90                   	nop

c001c590 <FAT::openDir(char const*, void**)>:
c001c590:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c596:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c59e:	74 0c                	je     c001c5ac <FAT::openDir(char const*, void**)+0x1c>
c001c5a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c5a8:	75 0e                	jne    c001c5b8 <FAT::openDir(char const*, void**)+0x28>
c001c5aa:	66 90                	xchg   ax,ax
c001c5ac:	b8 04 00 00 00       	mov    eax,0x4
c001c5b1:	e9 82 00 00 00       	jmp    c001c638 <FAT::openDir(char const*, void**)+0xa8>
c001c5b6:	66 90                	xchg   ax,ax
c001c5b8:	83 ec 08             	sub    esp,0x8
c001c5bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5c6:	50                   	push   eax
c001c5c7:	e8 84 40 fe ff       	call   c0000650 <strcpy>
c001c5cc:	83 c4 10             	add    esp,0x10
c001c5cf:	83 ec 08             	sub    esp,0x8
c001c5d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5d6:	50                   	push   eax
c001c5d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5de:	e8 f9 fd ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	83 ec 0c             	sub    esp,0xc
c001c5e9:	6a 30                	push   0x30
c001c5eb:	e8 c4 30 ff ff       	call   c000f6b4 <malloc>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	89 c2                	mov    edx,eax
c001c5f5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c5fc:	89 10                	mov    DWORD PTR [eax],edx
c001c5fe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c605:	8b 00                	mov    eax,DWORD PTR [eax]
c001c607:	83 ec 08             	sub    esp,0x8
c001c60a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c60e:	52                   	push   edx
c001c60f:	50                   	push   eax
c001c610:	e8 fb 81 fe ff       	call   c0004810 <f_opendir>
c001c615:	83 c4 10             	add    esp,0x10
c001c618:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c61f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c627:	74 07                	je     c001c630 <FAT::openDir(char const*, void**)+0xa0>
c001c629:	b8 01 00 00 00       	mov    eax,0x1
c001c62e:	eb 08                	jmp    c001c638 <FAT::openDir(char const*, void**)+0xa8>
c001c630:	b8 00 00 00 00       	mov    eax,0x0
c001c635:	8d 76 00             	lea    esi,[esi+0x0]
c001c638:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c63e:	c3                   	ret    
c001c63f:	90                   	nop

c001c640 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c640:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c646:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c64e:	75 0c                	jne    c001c65c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c650:	b8 04 00 00 00       	mov    eax,0x4
c001c655:	e9 d6 00 00 00       	jmp    c001c730 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c65a:	66 90                	xchg   ax,ax
c001c65c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c664:	75 0a                	jne    c001c670 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c666:	b8 04 00 00 00       	mov    eax,0x4
c001c66b:	e9 c0 00 00 00       	jmp    c001c730 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c670:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c678:	75 0a                	jne    c001c684 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c67a:	b8 04 00 00 00       	mov    eax,0x4
c001c67f:	e9 ac 00 00 00       	jmp    c001c730 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c684:	83 ec 08             	sub    esp,0x8
c001c687:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c68e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c695:	50                   	push   eax
c001c696:	e8 b5 3f fe ff       	call   c0000650 <strcpy>
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	83 ec 08             	sub    esp,0x8
c001c6a1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c6a8:	50                   	push   eax
c001c6a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c6b0:	e8 27 fd ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001c6b5:	83 c4 10             	add    esp,0x10
c001c6b8:	83 ec 08             	sub    esp,0x8
c001c6bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c6bf:	50                   	push   eax
c001c6c0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c6c7:	50                   	push   eax
c001c6c8:	e8 c2 82 fe ff       	call   c000498f <f_stat>
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c6d7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c6de:	85 c0                	test   eax,eax
c001c6e0:	74 0a                	je     c001c6ec <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c6e2:	83 f8 04             	cmp    eax,0x4
c001c6e5:	74 39                	je     c001c720 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c6e7:	eb 3f                	jmp    c001c728 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c6e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c6ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c6f0:	0f b6 c0             	movzx  eax,al
c001c6f3:	83 e0 10             	and    eax,0x10
c001c6f6:	0f 95 c2             	setne  dl
c001c6f9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c700:	88 10                	mov    BYTE PTR [eax],dl
c001c702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c706:	ba 00 00 00 00       	mov    edx,0x0
c001c70b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c712:	89 01                	mov    DWORD PTR [ecx],eax
c001c714:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c717:	b8 00 00 00 00       	mov    eax,0x0
c001c71c:	eb 12                	jmp    c001c730 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c71e:	66 90                	xchg   ax,ax
c001c720:	b8 02 00 00 00       	mov    eax,0x2
c001c725:	eb 09                	jmp    c001c730 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c727:	90                   	nop
c001c728:	b8 01 00 00 00       	mov    eax,0x1
c001c72d:	8d 76 00             	lea    esi,[esi+0x0]
c001c730:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c736:	c3                   	ret    
c001c737:	90                   	nop

c001c738 <FAT::unlink(char const*)>:
c001c738:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c73e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c746:	75 08                	jne    c001c750 <FAT::unlink(char const*)+0x18>
c001c748:	b8 04 00 00 00       	mov    eax,0x4
c001c74d:	eb 61                	jmp    c001c7b0 <FAT::unlink(char const*)+0x78>
c001c74f:	90                   	nop
c001c750:	83 ec 08             	sub    esp,0x8
c001c753:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c75a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c75e:	50                   	push   eax
c001c75f:	e8 ec 3e fe ff       	call   c0000650 <strcpy>
c001c764:	83 c4 10             	add    esp,0x10
c001c767:	83 ec 08             	sub    esp,0x8
c001c76a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c76e:	50                   	push   eax
c001c76f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c776:	e8 61 fc ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001c77b:	83 c4 10             	add    esp,0x10
c001c77e:	83 ec 0c             	sub    esp,0xc
c001c781:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c785:	50                   	push   eax
c001c786:	e8 76 84 fe ff       	call   c0004c01 <f_unlink>
c001c78b:	83 c4 10             	add    esp,0x10
c001c78e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c795:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c79c:	85 c0                	test   eax,eax
c001c79e:	75 08                	jne    c001c7a8 <FAT::unlink(char const*)+0x70>
c001c7a0:	b8 00 00 00 00       	mov    eax,0x0
c001c7a5:	eb 09                	jmp    c001c7b0 <FAT::unlink(char const*)+0x78>
c001c7a7:	90                   	nop
c001c7a8:	b8 01 00 00 00       	mov    eax,0x1
c001c7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c7b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c7b6:	c3                   	ret    
c001c7b7:	90                   	nop

c001c7b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c7b8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c7be:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001c7c5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001c7cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c7d0:	88 d0                	mov    al,dl
c001c7d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c7d6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c7de:	75 0c                	jne    c001c7ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001c7e0:	b8 04 00 00 00       	mov    eax,0x4
c001c7e5:	e9 7e 01 00 00       	jmp    c001c968 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c7ea:	66 90                	xchg   ax,ax
c001c7ec:	83 ec 08             	sub    esp,0x8
c001c7ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c7f6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c7fa:	50                   	push   eax
c001c7fb:	e8 50 3e fe ff       	call   c0000650 <strcpy>
c001c800:	83 c4 10             	add    esp,0x10
c001c803:	83 ec 08             	sub    esp,0x8
c001c806:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c80a:	50                   	push   eax
c001c80b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c812:	e8 c5 fb ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001c817:	83 c4 10             	add    esp,0x10
c001c81a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c822:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c82a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c82f:	83 e0 01             	and    eax,0x1
c001c832:	74 14                	je     c001c848 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001c834:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c83b:	83 c8 01             	or     eax,0x1
c001c83e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c845:	8d 76 00             	lea    esi,[esi+0x0]
c001c848:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c84d:	83 e0 02             	and    eax,0x2
c001c850:	74 12                	je     c001c864 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001c852:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c859:	83 c8 20             	or     eax,0x20
c001c85c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c863:	90                   	nop
c001c864:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c869:	83 e0 04             	and    eax,0x4
c001c86c:	74 12                	je     c001c880 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001c86e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c875:	83 c8 04             	or     eax,0x4
c001c878:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c87f:	90                   	nop
c001c880:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c885:	83 e0 08             	and    eax,0x8
c001c888:	74 12                	je     c001c89c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c88a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c891:	83 c8 02             	or     eax,0x2
c001c894:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c89b:	90                   	nop
c001c89c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8a1:	83 e0 01             	and    eax,0x1
c001c8a4:	74 12                	je     c001c8b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001c8a6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c8ad:	83 c8 01             	or     eax,0x1
c001c8b0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c8b7:	90                   	nop
c001c8b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8bd:	83 e0 02             	and    eax,0x2
c001c8c0:	74 12                	je     c001c8d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001c8c2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c8c9:	83 c8 20             	or     eax,0x20
c001c8cc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c8d3:	90                   	nop
c001c8d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8d9:	83 e0 04             	and    eax,0x4
c001c8dc:	74 12                	je     c001c8f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001c8de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c8e5:	83 c8 04             	or     eax,0x4
c001c8e8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c8ef:	90                   	nop
c001c8f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8f5:	83 e0 08             	and    eax,0x8
c001c8f8:	74 12                	je     c001c90c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001c8fa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c901:	83 c8 02             	or     eax,0x2
c001c904:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c90b:	90                   	nop
c001c90c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c913:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c91a:	09 d0                	or     eax,edx
c001c91c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c923:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c92b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c933:	83 ec 04             	sub    esp,0x4
c001c936:	52                   	push   edx
c001c937:	50                   	push   eax
c001c938:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c93c:	50                   	push   eax
c001c93d:	e8 32 87 fe ff       	call   c0005074 <f_chmod>
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c94c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c953:	85 c0                	test   eax,eax
c001c955:	75 09                	jne    c001c960 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001c957:	b8 00 00 00 00       	mov    eax,0x0
c001c95c:	eb 0a                	jmp    c001c968 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c95e:	66 90                	xchg   ax,ax
c001c960:	b8 01 00 00 00       	mov    eax,0x1
c001c965:	8d 76 00             	lea    esi,[esi+0x0]
c001c968:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c96e:	c3                   	ret    
c001c96f:	90                   	nop

c001c970 <FAT::rename(char const*, char const*)>:
c001c970:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c976:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c97e:	74 0c                	je     c001c98c <FAT::rename(char const*, char const*)+0x1c>
c001c980:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c988:	75 0e                	jne    c001c998 <FAT::rename(char const*, char const*)+0x28>
c001c98a:	66 90                	xchg   ax,ax
c001c98c:	b8 04 00 00 00       	mov    eax,0x4
c001c991:	e9 9e 00 00 00       	jmp    c001ca34 <FAT::rename(char const*, char const*)+0xc4>
c001c996:	66 90                	xchg   ax,ax
c001c998:	83 ec 08             	sub    esp,0x8
c001c99b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c9a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c9a9:	50                   	push   eax
c001c9aa:	e8 a1 3c fe ff       	call   c0000650 <strcpy>
c001c9af:	83 c4 10             	add    esp,0x10
c001c9b2:	83 ec 08             	sub    esp,0x8
c001c9b5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c9bc:	50                   	push   eax
c001c9bd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c9c4:	e8 13 fa ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	83 ec 08             	sub    esp,0x8
c001c9cf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c9d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c9da:	50                   	push   eax
c001c9db:	e8 70 3c fe ff       	call   c0000650 <strcpy>
c001c9e0:	83 c4 10             	add    esp,0x10
c001c9e3:	83 ec 08             	sub    esp,0x8
c001c9e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9ea:	50                   	push   eax
c001c9eb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c9f2:	e8 e5 f9 ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	83 ec 08             	sub    esp,0x8
c001c9fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca01:	50                   	push   eax
c001ca02:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ca09:	50                   	push   eax
c001ca0a:	e8 ad 84 fe ff       	call   c0004ebc <f_rename>
c001ca0f:	83 c4 10             	add    esp,0x10
c001ca12:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ca19:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ca20:	85 c0                	test   eax,eax
c001ca22:	75 08                	jne    c001ca2c <FAT::rename(char const*, char const*)+0xbc>
c001ca24:	b8 00 00 00 00       	mov    eax,0x0
c001ca29:	eb 09                	jmp    c001ca34 <FAT::rename(char const*, char const*)+0xc4>
c001ca2b:	90                   	nop
c001ca2c:	b8 01 00 00 00       	mov    eax,0x1
c001ca31:	8d 76 00             	lea    esi,[esi+0x0]
c001ca34:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ca3a:	c3                   	ret    
c001ca3b:	90                   	nop

c001ca3c <FAT::mkdir(char const*)>:
c001ca3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ca42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ca4a:	75 08                	jne    c001ca54 <FAT::mkdir(char const*)+0x18>
c001ca4c:	b8 04 00 00 00       	mov    eax,0x4
c001ca51:	eb 61                	jmp    c001cab4 <FAT::mkdir(char const*)+0x78>
c001ca53:	90                   	nop
c001ca54:	83 ec 08             	sub    esp,0x8
c001ca57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca62:	50                   	push   eax
c001ca63:	e8 e8 3b fe ff       	call   c0000650 <strcpy>
c001ca68:	83 c4 10             	add    esp,0x10
c001ca6b:	83 ec 08             	sub    esp,0x8
c001ca6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca72:	50                   	push   eax
c001ca73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca7a:	e8 5d f9 ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	83 ec 0c             	sub    esp,0xc
c001ca85:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca89:	50                   	push   eax
c001ca8a:	e8 92 82 fe ff       	call   c0004d21 <f_mkdir>
c001ca8f:	83 c4 10             	add    esp,0x10
c001ca92:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ca99:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001caa0:	85 c0                	test   eax,eax
c001caa2:	75 08                	jne    c001caac <FAT::mkdir(char const*)+0x70>
c001caa4:	b8 00 00 00 00       	mov    eax,0x0
c001caa9:	eb 09                	jmp    c001cab4 <FAT::mkdir(char const*)+0x78>
c001caab:	90                   	nop
c001caac:	b8 01 00 00 00       	mov    eax,0x1
c001cab1:	8d 76 00             	lea    esi,[esi+0x0]
c001cab4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001caba:	c3                   	ret    
c001cabb:	90                   	nop

c001cabc <FAT::exists(char const*)>:
c001cabc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cac2:	83 ec 08             	sub    esp,0x8
c001cac5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cacc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cad0:	50                   	push   eax
c001cad1:	e8 7a 3b fe ff       	call   c0000650 <strcpy>
c001cad6:	83 c4 10             	add    esp,0x10
c001cad9:	83 ec 08             	sub    esp,0x8
c001cadc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cae0:	50                   	push   eax
c001cae1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cae8:	e8 ef f8 ff ff       	call   c001c3dc <FAT::fixFilepath(char*)>
c001caed:	83 c4 10             	add    esp,0x10
c001caf0:	83 ec 08             	sub    esp,0x8
c001caf3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001cafa:	50                   	push   eax
c001cafb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001caff:	50                   	push   eax
c001cb00:	e8 8a 7e fe ff       	call   c000498f <f_stat>
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cb0f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cb16:	85 c0                	test   eax,eax
c001cb18:	75 06                	jne    c001cb20 <FAT::exists(char const*)+0x64>
c001cb1a:	b0 01                	mov    al,0x1
c001cb1c:	eb 06                	jmp    c001cb24 <FAT::exists(char const*)+0x68>
c001cb1e:	66 90                	xchg   ax,ax
c001cb20:	b0 00                	mov    al,0x0
c001cb22:	66 90                	xchg   ax,ax
c001cb24:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cb2a:	c3                   	ret    
c001cb2b:	90                   	nop

c001cb2c <isoReadDiscSectorHelper>:
c001cb2c:	83 ec 2c             	sub    esp,0x2c
c001cb2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cb33:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb37:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cb3c:	83 e8 41             	sub    eax,0x41
c001cb3f:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001cb46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb4a:	ba 00 00 00 00       	mov    edx,0x0
c001cb4f:	83 ec 0c             	sub    esp,0xc
c001cb52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb56:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cb5a:	52                   	push   edx
c001cb5b:	50                   	push   eax
c001cb5c:	51                   	push   ecx
c001cb5d:	e8 ea de fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001cb62:	83 c4 20             	add    esp,0x20
c001cb65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb69:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cb6e:	74 0c                	je     c001cb7c <isoReadDiscSectorHelper+0x50>
c001cb70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cb74:	c1 e0 0b             	shl    eax,0xb
c001cb77:	eb 0b                	jmp    c001cb84 <isoReadDiscSectorHelper+0x58>
c001cb79:	8d 76 00             	lea    esi,[esi+0x0]
c001cb7c:	b8 00 00 00 00       	mov    eax,0x0
c001cb81:	8d 76 00             	lea    esi,[esi+0x0]
c001cb84:	83 c4 2c             	add    esp,0x2c
c001cb87:	c3                   	ret    

c001cb88 <iso_kprintf>:
c001cb88:	83 ec 0c             	sub    esp,0xc
c001cb8b:	83 ec 08             	sub    esp,0x8
c001cb8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb92:	68 08 54 02 c0       	push   0xc0025408
c001cb97:	e8 ca a3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cb9c:	83 c4 10             	add    esp,0x10
c001cb9f:	90                   	nop
c001cba0:	83 c4 0c             	add    esp,0xc
c001cba3:	c3                   	ret    

c001cba4 <iso_kprintfd>:
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	83 ec 08             	sub    esp,0x8
c001cbaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbae:	68 49 49 02 c0       	push   0xc0024949
c001cbb3:	e8 ae a3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cbb8:	83 c4 10             	add    esp,0x10
c001cbbb:	90                   	nop
c001cbbc:	83 c4 0c             	add    esp,0xc
c001cbbf:	c3                   	ret    

c001cbc0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cbc0:	b8 08 00 00 00       	mov    eax,0x8
c001cbc5:	c3                   	ret    

c001cbc6 <ISO9660::truncate(void*, unsigned long long)>:
c001cbc6:	b8 01 00 00 00       	mov    eax,0x1
c001cbcb:	c3                   	ret    

c001cbcc <ISO9660::getName()>:
c001cbcc:	b8 94 57 02 c0       	mov    eax,0xc0025794
c001cbd1:	c3                   	ret    

c001cbd2 <ISO9660::closeDir(void*)>:
c001cbd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbd6:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbd8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001cbdb:	90                   	nop

c001cbdc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001cbdc:	b8 01 00 00 00       	mov    eax,0x1
c001cbe1:	c3                   	ret    

c001cbe2 <ISO9660::unlink(char const*)>:
c001cbe2:	b8 01 00 00 00       	mov    eax,0x1
c001cbe7:	c3                   	ret    

c001cbe8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001cbe8:	b8 03 00 00 00       	mov    eax,0x3
c001cbed:	c3                   	ret    

c001cbee <ISO9660::rename(char const*, char const*)>:
c001cbee:	b8 01 00 00 00       	mov    eax,0x1
c001cbf3:	c3                   	ret    

c001cbf4 <ISO9660::mkdir(char const*)>:
c001cbf4:	b8 01 00 00 00       	mov    eax,0x1
c001cbf9:	c3                   	ret    

c001cbfa <ISO9660::~ISO9660()>:
c001cbfa:	83 ec 0c             	sub    esp,0xc
c001cbfd:	ba d4 58 02 c0       	mov    edx,0xc00258d4
c001cc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc06:	89 10                	mov    DWORD PTR [eax],edx
c001cc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0c:	83 ec 0c             	sub    esp,0xc
c001cc0f:	50                   	push   eax
c001cc10:	e8 c1 b1 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001cc15:	83 c4 10             	add    esp,0x10
c001cc18:	90                   	nop
c001cc19:	83 c4 0c             	add    esp,0xc
c001cc1c:	c3                   	ret    
c001cc1d:	90                   	nop

c001cc1e <ISO9660::~ISO9660()>:
c001cc1e:	83 ec 0c             	sub    esp,0xc
c001cc21:	83 ec 0c             	sub    esp,0xc
c001cc24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc28:	e8 cd ff ff ff       	call   c001cbfa <ISO9660::~ISO9660()>
c001cc2d:	83 c4 10             	add    esp,0x10
c001cc30:	83 ec 08             	sub    esp,0x8
c001cc33:	6a 08                	push   0x8
c001cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc39:	e8 7e 06 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001cc3e:	83 c4 10             	add    esp,0x10
c001cc41:	83 c4 0c             	add    esp,0xc
c001cc44:	c3                   	ret    
c001cc45:	90                   	nop

c001cc46 <ISO9660::exists(char const*)>:
c001cc46:	83 ec 18             	sub    esp,0x18
c001cc49:	68 af 57 02 c0       	push   0xc00257af
c001cc4e:	e8 bd 2e ff ff       	call   c000fb10 <KePanic(char const*)>
c001cc53:	31 c0                	xor    eax,eax
c001cc55:	83 c4 1c             	add    esp,0x1c
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop

c001cc5a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cc5a:	56                   	push   esi
c001cc5b:	53                   	push   ebx
c001cc5c:	53                   	push   ebx
c001cc5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc61:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cc65:	85 db                	test   ebx,ebx
c001cc67:	0f 84 ca 00 00 00    	je     c001cd37 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cc6d:	85 f6                	test   esi,esi
c001cc6f:	0f 84 c2 00 00 00    	je     c001cd37 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cc75:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001cc7a:	b8 03 00 00 00       	mov    eax,0x3
c001cc7f:	0f 85 b7 00 00 00    	jne    c001cd3c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cc85:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cc87:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001cc8d:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cc94:	74 1b                	je     c001ccb1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001cc96:	85 c0                	test   eax,eax
c001cc98:	74 10                	je     c001ccaa <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001cc9a:	83 ec 0c             	sub    esp,0xc
c001cc9d:	68 cd 57 02 c0       	push   0xc00257cd
c001cca2:	e8 69 2e ff ff       	call   c000fb10 <KePanic(char const*)>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	8a 03                	mov    al,BYTE PTR [ebx]
c001ccac:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001ccb1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ccb4:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ccbb:	85 c0                	test   eax,eax
c001ccbd:	74 09                	je     c001ccc8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ccbf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ccc6:	74 48                	je     c001cd10 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ccc8:	83 ec 0c             	sub    esp,0xc
c001cccb:	68 dd 57 02 c0       	push   0xc00257dd
c001ccd0:	e8 91 a2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ccd5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ccd8:	83 c4 10             	add    esp,0x10
c001ccdb:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cce2:	85 c0                	test   eax,eax
c001cce4:	74 17                	je     c001ccfd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001cce6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cced:	83 ec 0c             	sub    esp,0xc
c001ccf0:	68 fd 57 02 c0       	push   0xc00257fd
c001ccf5:	e8 6c a2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ccfa:	83 c4 10             	add    esp,0x10
c001ccfd:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cd04:	83 ec 0c             	sub    esp,0xc
c001cd07:	50                   	push   eax
c001cd08:	e8 3a 9f fe ff       	call   c0006c47 <init_percd>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	51                   	push   ecx
c001cd11:	83 c3 03             	add    ebx,0x3
c001cd14:	51                   	push   ecx
c001cd15:	6a 00                	push   0x0
c001cd17:	53                   	push   ebx
c001cd18:	e8 ed 99 fe ff       	call   c000670a <iso_open>
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	89 c2                	mov    edx,eax
c001cd22:	b8 01 00 00 00       	mov    eax,0x1
c001cd27:	83 fa ff             	cmp    edx,0xffffffff
c001cd2a:	74 10                	je     c001cd3c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cd2c:	83 c2 32             	add    edx,0x32
c001cd2f:	31 c0                	xor    eax,eax
c001cd31:	01 d2                	add    edx,edx
c001cd33:	89 16                	mov    DWORD PTR [esi],edx
c001cd35:	eb 05                	jmp    c001cd3c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cd37:	b8 04 00 00 00       	mov    eax,0x4
c001cd3c:	5a                   	pop    edx
c001cd3d:	5b                   	pop    ebx
c001cd3e:	5e                   	pop    esi
c001cd3f:	c3                   	ret    

c001cd40 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cd40:	53                   	push   ebx
c001cd41:	83 ec 08             	sub    esp,0x8
c001cd44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd4c:	85 c0                	test   eax,eax
c001cd4e:	74 2d                	je     c001cd7d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cd50:	85 db                	test   ebx,ebx
c001cd52:	74 29                	je     c001cd7d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cd54:	52                   	push   edx
c001cd55:	b9 02 00 00 00       	mov    ecx,0x2
c001cd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5e:	99                   	cdq    
c001cd5f:	f7 f9                	idiv   ecx
c001cd61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cd65:	83 e8 32             	sub    eax,0x32
c001cd68:	50                   	push   eax
c001cd69:	e8 44 9a fe ff       	call   c00067b2 <iso_read>
c001cd6e:	83 c4 10             	add    esp,0x10
c001cd71:	89 03                	mov    DWORD PTR [ebx],eax
c001cd73:	09 d0                	or     eax,edx
c001cd75:	0f 94 c0             	sete   al
c001cd78:	0f b6 c0             	movzx  eax,al
c001cd7b:	eb 05                	jmp    c001cd82 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001cd7d:	b8 04 00 00 00       	mov    eax,0x4
c001cd82:	83 c4 08             	add    esp,0x8
c001cd85:	5b                   	pop    ebx
c001cd86:	c3                   	ret    
c001cd87:	90                   	nop

c001cd88 <ISO9660::seek(void*, unsigned long long)>:
c001cd88:	57                   	push   edi
c001cd89:	b8 04 00 00 00       	mov    eax,0x4
c001cd8e:	56                   	push   esi
c001cd8f:	51                   	push   ecx
c001cd90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cd98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cd9c:	85 d2                	test   edx,edx
c001cd9e:	74 26                	je     c001cdc6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001cda0:	89 d0                	mov    eax,edx
c001cda2:	b9 02 00 00 00       	mov    ecx,0x2
c001cda7:	6a 00                	push   0x0
c001cda9:	99                   	cdq    
c001cdaa:	f7 f9                	idiv   ecx
c001cdac:	57                   	push   edi
c001cdad:	56                   	push   esi
c001cdae:	83 e8 32             	sub    eax,0x32
c001cdb1:	50                   	push   eax
c001cdb2:	e8 11 9b fe ff       	call   c00068c8 <iso_seek>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	31 f0                	xor    eax,esi
c001cdbc:	31 fa                	xor    edx,edi
c001cdbe:	09 d0                	or     eax,edx
c001cdc0:	0f 95 c0             	setne  al
c001cdc3:	0f b6 c0             	movzx  eax,al
c001cdc6:	5a                   	pop    edx
c001cdc7:	5e                   	pop    esi
c001cdc8:	5f                   	pop    edi
c001cdc9:	c3                   	ret    

c001cdca <ISO9660::tell(void*, unsigned long long*)>:
c001cdca:	53                   	push   ebx
c001cdcb:	83 ec 08             	sub    esp,0x8
c001cdce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdd2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cdd6:	85 c0                	test   eax,eax
c001cdd8:	74 24                	je     c001cdfe <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cdda:	85 db                	test   ebx,ebx
c001cddc:	74 20                	je     c001cdfe <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cdde:	b9 02 00 00 00       	mov    ecx,0x2
c001cde3:	99                   	cdq    
c001cde4:	f7 f9                	idiv   ecx
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	83 e8 32             	sub    eax,0x32
c001cdec:	50                   	push   eax
c001cded:	e8 5a 9b fe ff       	call   c000694c <iso_tell>
c001cdf2:	83 c4 10             	add    esp,0x10
c001cdf5:	89 03                	mov    DWORD PTR [ebx],eax
c001cdf7:	31 c0                	xor    eax,eax
c001cdf9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001cdfc:	eb 05                	jmp    c001ce03 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001cdfe:	b8 04 00 00 00       	mov    eax,0x4
c001ce03:	83 c4 08             	add    esp,0x8
c001ce06:	5b                   	pop    ebx
c001ce07:	c3                   	ret    

c001ce08 <ISO9660::stat(void*, unsigned long long*)>:
c001ce08:	56                   	push   esi
c001ce09:	53                   	push   ebx
c001ce0a:	83 ec 10             	sub    esp,0x10
c001ce0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce11:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ce15:	68 21 58 02 c0       	push   0xc0025821
c001ce1a:	e8 47 a1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ce1f:	83 c4 10             	add    esp,0x10
c001ce22:	85 db                	test   ebx,ebx
c001ce24:	74 2a                	je     c001ce50 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ce26:	85 f6                	test   esi,esi
c001ce28:	74 26                	je     c001ce50 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ce2a:	89 d8                	mov    eax,ebx
c001ce2c:	b9 02 00 00 00       	mov    ecx,0x2
c001ce31:	99                   	cdq    
c001ce32:	83 ec 0c             	sub    esp,0xc
c001ce35:	f7 f9                	idiv   ecx
c001ce37:	83 e8 32             	sub    eax,0x32
c001ce3a:	50                   	push   eax
c001ce3b:	e8 3d 9b fe ff       	call   c000697d <iso_total>
c001ce40:	83 c4 10             	add    esp,0x10
c001ce43:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001ce4a:	89 06                	mov    DWORD PTR [esi],eax
c001ce4c:	31 c0                	xor    eax,eax
c001ce4e:	eb 05                	jmp    c001ce55 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ce50:	b8 04 00 00 00       	mov    eax,0x4
c001ce55:	5a                   	pop    edx
c001ce56:	5b                   	pop    ebx
c001ce57:	5e                   	pop    esi
c001ce58:	c3                   	ret    
c001ce59:	90                   	nop

c001ce5a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ce5a:	55                   	push   ebp
c001ce5b:	57                   	push   edi
c001ce5c:	56                   	push   esi
c001ce5d:	53                   	push   ebx
c001ce5e:	83 ec 18             	sub    esp,0x18
c001ce61:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ce65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ce69:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ce6d:	68 29 58 02 c0       	push   0xc0025829
c001ce72:	e8 ef a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ce77:	83 c4 10             	add    esp,0x10
c001ce7a:	85 ff                	test   edi,edi
c001ce7c:	0f 94 c0             	sete   al
c001ce7f:	85 f6                	test   esi,esi
c001ce81:	0f 94 c2             	sete   dl
c001ce84:	09 d0                	or     eax,edx
c001ce86:	a8 01                	test   al,0x1
c001ce88:	0f 85 dd 00 00 00    	jne    c001cf6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ce8e:	85 db                	test   ebx,ebx
c001ce90:	0f 84 d5 00 00 00    	je     c001cf6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ce96:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ce99:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ce9f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cea6:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cead:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ceaf:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001ceb5:	74 1b                	je     c001ced2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001ceb7:	85 c0                	test   eax,eax
c001ceb9:	74 10                	je     c001cecb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001cebb:	83 ec 0c             	sub    esp,0xc
c001cebe:	68 cd 57 02 c0       	push   0xc00257cd
c001cec3:	e8 48 2c ff ff       	call   c000fb10 <KePanic(char const*)>
c001cec8:	83 c4 10             	add    esp,0x10
c001cecb:	8a 03                	mov    al,BYTE PTR [ebx]
c001cecd:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001ced2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ced5:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cedc:	85 c0                	test   eax,eax
c001cede:	74 09                	je     c001cee9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001cee0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cee7:	74 51                	je     c001cf3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cee9:	83 ec 0c             	sub    esp,0xc
c001ceec:	68 31 58 02 c0       	push   0xc0025831
c001cef1:	e8 70 a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cef6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cef9:	83 c4 10             	add    esp,0x10
c001cefc:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001cf04:	74 21                	je     c001cf27 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001cf06:	83 ec 0c             	sub    esp,0xc
c001cf09:	68 51 58 02 c0       	push   0xc0025851
c001cf0e:	e8 53 a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cf13:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cf16:	83 c4 10             	add    esp,0x10
c001cf19:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cf20:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cf27:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cf2e:	83 ec 0c             	sub    esp,0xc
c001cf31:	50                   	push   eax
c001cf32:	e8 10 9d fe ff       	call   c0006c47 <init_percd>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	52                   	push   edx
c001cf3b:	83 c3 03             	add    ebx,0x3
c001cf3e:	52                   	push   edx
c001cf3f:	6a 00                	push   0x0
c001cf41:	53                   	push   ebx
c001cf42:	e8 c3 97 fe ff       	call   c000670a <iso_open>
c001cf47:	83 c4 10             	add    esp,0x10
c001cf4a:	83 f8 ff             	cmp    eax,0xffffffff
c001cf4d:	89 c5                	mov    ebp,eax
c001cf4f:	75 21                	jne    c001cf72 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001cf51:	50                   	push   eax
c001cf52:	50                   	push   eax
c001cf53:	6a 01                	push   0x1
c001cf55:	53                   	push   ebx
c001cf56:	e8 af 97 fe ff       	call   c000670a <iso_open>
c001cf5b:	83 c4 10             	add    esp,0x10
c001cf5e:	ba 02 00 00 00       	mov    edx,0x2
c001cf63:	40                   	inc    eax
c001cf64:	74 2b                	je     c001cf91 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cf66:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001cf69:	eb 24                	jmp    c001cf8f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001cf6b:	ba 04 00 00 00       	mov    edx,0x4
c001cf70:	eb 1f                	jmp    c001cf91 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cf72:	83 ec 0c             	sub    esp,0xc
c001cf75:	50                   	push   eax
c001cf76:	e8 02 9a fe ff       	call   c000697d <iso_total>
c001cf7b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cf82:	89 07                	mov    DWORD PTR [edi],eax
c001cf84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf87:	e8 08 98 fe ff       	call   c0006794 <iso_close>
c001cf8c:	83 c4 10             	add    esp,0x10
c001cf8f:	31 d2                	xor    edx,edx
c001cf91:	83 c4 0c             	add    esp,0xc
c001cf94:	89 d0                	mov    eax,edx
c001cf96:	5b                   	pop    ebx
c001cf97:	5e                   	pop    esi
c001cf98:	5f                   	pop    edi
c001cf99:	5d                   	pop    ebp
c001cf9a:	c3                   	ret    
c001cf9b:	90                   	nop

c001cf9c <ISO9660::close(void*)>:
c001cf9c:	83 ec 0c             	sub    esp,0xc
c001cf9f:	b8 04 00 00 00       	mov    eax,0x4
c001cfa4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfa8:	85 d2                	test   edx,edx
c001cfaa:	74 1b                	je     c001cfc7 <ISO9660::close(void*)+0x2b>
c001cfac:	89 d0                	mov    eax,edx
c001cfae:	b9 02 00 00 00       	mov    ecx,0x2
c001cfb3:	99                   	cdq    
c001cfb4:	83 ec 0c             	sub    esp,0xc
c001cfb7:	f7 f9                	idiv   ecx
c001cfb9:	83 e8 32             	sub    eax,0x32
c001cfbc:	50                   	push   eax
c001cfbd:	e8 d2 97 fe ff       	call   c0006794 <iso_close>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	31 c0                	xor    eax,eax
c001cfc7:	83 c4 0c             	add    esp,0xc
c001cfca:	c3                   	ret    
c001cfcb:	90                   	nop

c001cfcc <ISO9660::openDir(char const*, void**)>:
c001cfcc:	56                   	push   esi
c001cfcd:	53                   	push   ebx
c001cfce:	50                   	push   eax
c001cfcf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cfd3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cfd7:	85 db                	test   ebx,ebx
c001cfd9:	0f 84 bd 00 00 00    	je     c001d09c <ISO9660::openDir(char const*, void**)+0xd0>
c001cfdf:	85 f6                	test   esi,esi
c001cfe1:	0f 84 b5 00 00 00    	je     c001d09c <ISO9660::openDir(char const*, void**)+0xd0>
c001cfe7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001cfe9:	38 15 c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,dl
c001cfef:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cff6:	74 1b                	je     c001d013 <ISO9660::openDir(char const*, void**)+0x47>
c001cff8:	85 c0                	test   eax,eax
c001cffa:	74 10                	je     c001d00c <ISO9660::openDir(char const*, void**)+0x40>
c001cffc:	83 ec 0c             	sub    esp,0xc
c001cfff:	68 cd 57 02 c0       	push   0xc00257cd
c001d004:	e8 07 2b ff ff       	call   c000fb10 <KePanic(char const*)>
c001d009:	83 c4 10             	add    esp,0x10
c001d00c:	8a 03                	mov    al,BYTE PTR [ebx]
c001d00e:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001d013:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d016:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d01d:	85 c0                	test   eax,eax
c001d01f:	74 10                	je     c001d031 <ISO9660::openDir(char const*, void**)+0x65>
c001d021:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d028:	74 1a                	je     c001d044 <ISO9660::openDir(char const*, void**)+0x78>
c001d02a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d031:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d038:	83 ec 0c             	sub    esp,0xc
c001d03b:	50                   	push   eax
c001d03c:	e8 06 9c fe ff       	call   c0006c47 <init_percd>
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	50                   	push   eax
c001d045:	83 c3 03             	add    ebx,0x3
c001d048:	50                   	push   eax
c001d049:	6a 01                	push   0x1
c001d04b:	53                   	push   ebx
c001d04c:	e8 b9 96 fe ff       	call   c000670a <iso_open>
c001d051:	83 c4 10             	add    esp,0x10
c001d054:	83 f8 ff             	cmp    eax,0xffffffff
c001d057:	89 c3                	mov    ebx,eax
c001d059:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d05e:	75 1c                	jne    c001d07c <ISO9660::openDir(char const*, void**)+0xb0>
c001d060:	53                   	push   ebx
c001d061:	53                   	push   ebx
c001d062:	68 75 58 02 c0       	push   0xc0025875
c001d067:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d06d:	e8 7e 54 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	b8 01 00 00 00       	mov    eax,0x1
c001d07a:	eb 25                	jmp    c001d0a1 <ISO9660::openDir(char const*, void**)+0xd5>
c001d07c:	51                   	push   ecx
c001d07d:	01 db                	add    ebx,ebx
c001d07f:	51                   	push   ecx
c001d080:	83 c3 65             	add    ebx,0x65
c001d083:	68 88 58 02 c0       	push   0xc0025888
c001d088:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d08e:	e8 5d 54 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001d093:	83 c4 10             	add    esp,0x10
c001d096:	31 c0                	xor    eax,eax
c001d098:	89 1e                	mov    DWORD PTR [esi],ebx
c001d09a:	eb 05                	jmp    c001d0a1 <ISO9660::openDir(char const*, void**)+0xd5>
c001d09c:	b8 04 00 00 00       	mov    eax,0x4
c001d0a1:	5a                   	pop    edx
c001d0a2:	5b                   	pop    ebx
c001d0a3:	5e                   	pop    esi
c001d0a4:	c3                   	ret    
c001d0a5:	90                   	nop

c001d0a6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d0a6:	55                   	push   ebp
c001d0a7:	57                   	push   edi
c001d0a8:	56                   	push   esi
c001d0a9:	53                   	push   ebx
c001d0aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d0b0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001d0b7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d0be:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001d0c5:	85 db                	test   ebx,ebx
c001d0c7:	0f 84 e4 00 00 00    	je     c001d1b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d0cd:	85 ed                	test   ebp,ebp
c001d0cf:	0f 84 dc 00 00 00    	je     c001d1b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d0d5:	83 ec 0c             	sub    esp,0xc
c001d0d8:	68 9b 58 02 c0       	push   0xc002589b
c001d0dd:	e8 84 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d0e2:	89 d8                	mov    eax,ebx
c001d0e4:	b9 02 00 00 00       	mov    ecx,0x2
c001d0e9:	99                   	cdq    
c001d0ea:	f7 f9                	idiv   ecx
c001d0ec:	83 e8 32             	sub    eax,0x32
c001d0ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0f2:	e8 d8 98 fe ff       	call   c00069cf <iso_readdir>
c001d0f7:	83 c4 10             	add    esp,0x10
c001d0fa:	85 c0                	test   eax,eax
c001d0fc:	89 c3                	mov    ebx,eax
c001d0fe:	75 38                	jne    c001d138 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001d100:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d105:	53                   	push   ebx
c001d106:	53                   	push   ebx
c001d107:	68 a6 58 02 c0       	push   0xc00258a6
c001d10c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d112:	e8 d9 53 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001d117:	83 c4 0c             	add    esp,0xc
c001d11a:	68 10 01 00 00       	push   0x110
c001d11f:	6a 00                	push   0x0
c001d121:	57                   	push   edi
c001d122:	e8 c9 33 fe ff       	call   c00004f0 <memset>
c001d127:	83 c4 10             	add    esp,0x10
c001d12a:	b8 01 00 00 00       	mov    eax,0x1
c001d12f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001d136:	eb 7e                	jmp    c001d1b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d138:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d13e:	8d 70 08             	lea    esi,[eax+0x8]
c001d141:	83 ec 0c             	sub    esp,0xc
c001d144:	56                   	push   esi
c001d145:	e8 36 34 fe ff       	call   c0000580 <strlen>
c001d14a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d152:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001d15d:	75 0a                	jne    c001d169 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001d15f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001d162:	b8 02 00 00 00       	mov    eax,0x2
c001d167:	74 05                	je     c001d16e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001d169:	b8 01 00 00 00       	mov    eax,0x1
c001d16e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d172:	50                   	push   eax
c001d173:	50                   	push   eax
c001d174:	56                   	push   esi
c001d175:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d179:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d17d:	50                   	push   eax
c001d17e:	e8 cd 34 fe ff       	call   c0000650 <strcpy>
c001d183:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d18a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d18c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001d193:	5a                   	pop    edx
c001d194:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d199:	59                   	pop    ecx
c001d19a:	68 b9 58 02 c0       	push   0xc00258b9
c001d19f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d1a5:	e8 46 53 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c001d1aa:	83 c4 10             	add    esp,0x10
c001d1ad:	31 c0                	xor    eax,eax
c001d1af:	eb 05                	jmp    c001d1b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d1b1:	b8 04 00 00 00       	mov    eax,0x4
c001d1b6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d1bc:	5b                   	pop    ebx
c001d1bd:	5e                   	pop    esi
c001d1be:	5f                   	pop    edi
c001d1bf:	5d                   	pop    ebp
c001d1c0:	c3                   	ret    

c001d1c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d1c1:	57                   	push   edi
c001d1c2:	56                   	push   esi
c001d1c3:	53                   	push   ebx
c001d1c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d1cc:	39 35 c4 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecc4,esi
c001d1d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d1d6:	0f be cb             	movsx  ecx,bl
c001d1d9:	75 0b                	jne    c001d1e6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d1db:	0f be 05 24 6b 02 c0 	movsx  eax,BYTE PTR ds:0xc0026b24
c001d1e2:	39 c8                	cmp    eax,ecx
c001d1e4:	74 47                	je     c001d22d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d1e6:	83 ec 0c             	sub    esp,0xc
c001d1e9:	31 d2                	xor    edx,edx
c001d1eb:	68 e0 ec 02 c0       	push   0xc002ece0
c001d1f0:	6a 01                	push   0x1
c001d1f2:	52                   	push   edx
c001d1f3:	56                   	push   esi
c001d1f4:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001d1fb:	e8 4c d8 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001d200:	83 c4 20             	add    esp,0x20
c001d203:	85 c0                	test   eax,eax
c001d205:	75 0e                	jne    c001d215 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d207:	89 35 c4 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc4,esi
c001d20d:	88 1d 24 6b 02 c0    	mov    BYTE PTR ds:0xc0026b24,bl
c001d213:	eb 18                	jmp    c001d22d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d215:	50                   	push   eax
c001d216:	68 00 08 00 00       	push   0x800
c001d21b:	6a 00                	push   0x0
c001d21d:	57                   	push   edi
c001d21e:	e8 cd 32 fe ff       	call   c00004f0 <memset>
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	b8 01 00 00 00       	mov    eax,0x1
c001d22b:	eb 0e                	jmp    c001d23b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d22d:	be e0 ec 02 c0       	mov    esi,0xc002ece0
c001d232:	b9 00 08 00 00       	mov    ecx,0x800
c001d237:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d239:	31 c0                	xor    eax,eax
c001d23b:	5b                   	pop    ebx
c001d23c:	5e                   	pop    esi
c001d23d:	5f                   	pop    edi
c001d23e:	c3                   	ret    
c001d23f:	90                   	nop

c001d240 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d240:	53                   	push   ebx
c001d241:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d247:	c7 05 c4 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ecc4,0xdeadbeef
c001d251:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d258:	8d 58 41             	lea    ebx,[eax+0x41]
c001d25b:	0f be db             	movsx  ebx,bl
c001d25e:	53                   	push   ebx
c001d25f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d263:	50                   	push   eax
c001d264:	6a 10                	push   0x10
c001d266:	e8 56 ff ff ff       	call   c001d1c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d26b:	83 c4 10             	add    esp,0x10
c001d26e:	31 d2                	xor    edx,edx
c001d270:	85 c0                	test   eax,eax
c001d272:	75 33                	jne    c001d2a7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d274:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d279:	75 2c                	jne    c001d2a7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d27b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d280:	75 25                	jne    c001d2a7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d282:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d287:	75 1e                	jne    c001d2a7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d289:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d28e:	75 17                	jne    c001d2a7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d290:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d295:	75 10                	jne    c001d2a7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d297:	83 ec 0c             	sub    esp,0xc
c001d29a:	53                   	push   ebx
c001d29b:	e8 a7 99 fe ff       	call   c0006c47 <init_percd>
c001d2a0:	83 c4 10             	add    esp,0x10
c001d2a3:	40                   	inc    eax
c001d2a4:	0f 95 c2             	setne  dl
c001d2a7:	81 c4 08 08 00 00    	add    esp,0x808
c001d2ad:	88 d0                	mov    al,dl
c001d2af:	5b                   	pop    ebx
c001d2b0:	c3                   	ret    
c001d2b1:	90                   	nop

c001d2b2 <ISO9660::ISO9660()>:
c001d2b2:	83 ec 0c             	sub    esp,0xc
c001d2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b9:	83 ec 0c             	sub    esp,0xc
c001d2bc:	50                   	push   eax
c001d2bd:	e8 f0 aa fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001d2c2:	83 c4 10             	add    esp,0x10
c001d2c5:	ba d4 58 02 c0       	mov    edx,0xc00258d4
c001d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ce:	89 10                	mov    DWORD PTR [eax],edx
c001d2d0:	e8 84 9a fe ff       	call   c0006d59 <fs_iso9660_init>
c001d2d5:	90                   	nop
c001d2d6:	83 c4 0c             	add    esp,0xc
c001d2d9:	c3                   	ret    

c001d2da <SoundCard::beginPlayback()>:
c001d2da:	c7 44 24 04 38 59 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025938
c001d2e2:	e9 29 28 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c001d2e7:	90                   	nop

c001d2e8 <SoundCard::stopPlayback()>:
c001d2e8:	c7 44 24 04 38 59 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025938
c001d2f0:	e9 1b 28 ff ff       	jmp    c000fb10 <KePanic(char const*)>
c001d2f5:	90                   	nop

c001d2f6 <SoundCard::SoundCard(char const*)>:
c001d2f6:	83 ec 1c             	sub    esp,0x1c
c001d2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2fd:	83 ec 08             	sub    esp,0x8
c001d300:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d304:	50                   	push   eax
c001d305:	e8 4e c8 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001d30a:	83 c4 10             	add    esp,0x10
c001d30d:	ba 84 59 02 c0       	mov    edx,0xc0025984
c001d312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d316:	89 10                	mov    DWORD PTR [eax],edx
c001d318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d31c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d327:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d335:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d33f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d343:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d34d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d351:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d35b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d363:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d368:	7f 1a                	jg     c001d384 <SoundCard::SoundCard(char const*)+0x8e>
c001d36a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d372:	83 c2 54             	add    edx,0x54
c001d375:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d37d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d382:	eb df                	jmp    c001d363 <SoundCard::SoundCard(char const*)+0x6d>
c001d384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d388:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d38f:	90                   	nop
c001d390:	83 c4 1c             	add    esp,0x1c
c001d393:	c3                   	ret    

c001d394 <SoundCard::~SoundCard()>:
c001d394:	83 ec 0c             	sub    esp,0xc
c001d397:	ba 84 59 02 c0       	mov    edx,0xc0025984
c001d39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a0:	89 10                	mov    DWORD PTR [eax],edx
c001d3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a6:	83 ec 0c             	sub    esp,0xc
c001d3a9:	50                   	push   eax
c001d3aa:	e8 49 c5 fe ff       	call   c00098f8 <Device::~Device()>
c001d3af:	83 c4 10             	add    esp,0x10
c001d3b2:	90                   	nop
c001d3b3:	83 c4 0c             	add    esp,0xc
c001d3b6:	c3                   	ret    
c001d3b7:	90                   	nop

c001d3b8 <SoundCard::~SoundCard()>:
c001d3b8:	83 ec 0c             	sub    esp,0xc
c001d3bb:	83 ec 0c             	sub    esp,0xc
c001d3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3c2:	e8 cd ff ff ff       	call   c001d394 <SoundCard::~SoundCard()>
c001d3c7:	83 c4 10             	add    esp,0x10
c001d3ca:	83 ec 08             	sub    esp,0x8
c001d3cd:	68 e8 01 00 00       	push   0x1e8
c001d3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d6:	e8 e1 fe fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001d3db:	83 c4 10             	add    esp,0x10
c001d3de:	83 c4 0c             	add    esp,0xc
c001d3e1:	c3                   	ret    

c001d3e2 <SoundCard::configureRates(int, int, int)>:
c001d3e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d3e6:	31 c0                	xor    eax,eax
c001d3e8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d3ef:	75 20                	jne    c001d411 <SoundCard::configureRates(int, int, int)+0x2f>
c001d3f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3f5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d3fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3ff:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d409:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d40f:	b0 01                	mov    al,0x1
c001d411:	c3                   	ret    

c001d412 <SoundCard::getSamples16(int, short*)>:
c001d412:	55                   	push   ebp
c001d413:	57                   	push   edi
c001d414:	31 ff                	xor    edi,edi
c001d416:	56                   	push   esi
c001d417:	53                   	push   ebx
c001d418:	31 db                	xor    ebx,ebx
c001d41a:	83 ec 10             	sub    esp,0x10
c001d41d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d421:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d425:	8d 04 36             	lea    eax,[esi+esi*1]
c001d428:	50                   	push   eax
c001d429:	6a 00                	push   0x0
c001d42b:	55                   	push   ebp
c001d42c:	e8 bf 30 fe ff       	call   c00004f0 <memset>
c001d431:	83 c4 10             	add    esp,0x10
c001d434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d438:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001d43f:	85 c0                	test   eax,eax
c001d441:	74 1a                	je     c001d45d <SoundCard::getSamples16(int, short*)+0x4b>
c001d443:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d447:	75 14                	jne    c001d45d <SoundCard::getSamples16(int, short*)+0x4b>
c001d449:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d44d:	55                   	push   ebp
c001d44e:	56                   	push   esi
c001d44f:	50                   	push   eax
c001d450:	e8 8f 03 00 00       	call   c001d7e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d455:	83 c4 10             	add    esp,0x10
c001d458:	39 c3                	cmp    ebx,eax
c001d45a:	0f 4c d8             	cmovl  ebx,eax
c001d45d:	47                   	inc    edi
c001d45e:	83 ff 20             	cmp    edi,0x20
c001d461:	75 d1                	jne    c001d434 <SoundCard::getSamples16(int, short*)+0x22>
c001d463:	83 c4 0c             	add    esp,0xc
c001d466:	89 d8                	mov    eax,ebx
c001d468:	5b                   	pop    ebx
c001d469:	5e                   	pop    esi
c001d46a:	5f                   	pop    edi
c001d46b:	5d                   	pop    ebp
c001d46c:	c3                   	ret    
c001d46d:	90                   	nop

c001d46e <SoundCard::getSamples32(int, int*)>:
c001d46e:	55                   	push   ebp
c001d46f:	57                   	push   edi
c001d470:	31 ff                	xor    edi,edi
c001d472:	56                   	push   esi
c001d473:	31 f6                	xor    esi,esi
c001d475:	53                   	push   ebx
c001d476:	83 ec 10             	sub    esp,0x10
c001d479:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d47d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d481:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d485:	c1 e0 02             	shl    eax,0x2
c001d488:	50                   	push   eax
c001d489:	6a 00                	push   0x0
c001d48b:	55                   	push   ebp
c001d48c:	e8 5f 30 fe ff       	call   c00004f0 <memset>
c001d491:	83 c4 10             	add    esp,0x10
c001d494:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d49b:	85 c0                	test   eax,eax
c001d49d:	74 1a                	je     c001d4b9 <SoundCard::getSamples32(int, int*)+0x4b>
c001d49f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d4a3:	75 14                	jne    c001d4b9 <SoundCard::getSamples32(int, int*)+0x4b>
c001d4a5:	53                   	push   ebx
c001d4a6:	55                   	push   ebp
c001d4a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4ab:	50                   	push   eax
c001d4ac:	e8 03 04 00 00       	call   c001d8b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d4b1:	83 c4 10             	add    esp,0x10
c001d4b4:	39 c6                	cmp    esi,eax
c001d4b6:	0f 4c f0             	cmovl  esi,eax
c001d4b9:	47                   	inc    edi
c001d4ba:	83 ff 20             	cmp    edi,0x20
c001d4bd:	75 d5                	jne    c001d494 <SoundCard::getSamples32(int, int*)+0x26>
c001d4bf:	85 f6                	test   esi,esi
c001d4c1:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d4c8:	75 0f                	jne    c001d4d9 <SoundCard::getSamples32(int, int*)+0x6b>
c001d4ca:	85 c0                	test   eax,eax
c001d4cc:	74 1b                	je     c001d4e9 <SoundCard::getSamples32(int, int*)+0x7b>
c001d4ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4d0:	83 ec 0c             	sub    esp,0xc
c001d4d3:	53                   	push   ebx
c001d4d4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d4d7:	eb 0d                	jmp    c001d4e6 <SoundCard::getSamples32(int, int*)+0x78>
c001d4d9:	85 c0                	test   eax,eax
c001d4db:	75 0c                	jne    c001d4e9 <SoundCard::getSamples32(int, int*)+0x7b>
c001d4dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4df:	83 ec 0c             	sub    esp,0xc
c001d4e2:	53                   	push   ebx
c001d4e3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d4e6:	83 c4 10             	add    esp,0x10
c001d4e9:	83 c4 0c             	add    esp,0xc
c001d4ec:	89 f0                	mov    eax,esi
c001d4ee:	5b                   	pop    ebx
c001d4ef:	5e                   	pop    esi
c001d4f0:	5f                   	pop    edi
c001d4f1:	5d                   	pop    ebp
c001d4f2:	c3                   	ret    
c001d4f3:	90                   	nop

c001d4f4 <SoundCard::addChannel(SoundPort*)>:
c001d4f4:	83 ec 0c             	sub    esp,0xc
c001d4f7:	31 c0                	xor    eax,eax
c001d4f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d4fd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d505:	74 1b                	je     c001d522 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d507:	40                   	inc    eax
c001d508:	83 f8 20             	cmp    eax,0x20
c001d50b:	75 f0                	jne    c001d4fd <SoundCard::addChannel(SoundPort*)+0x9>
c001d50d:	83 ec 0c             	sub    esp,0xc
c001d510:	68 5d 59 02 c0       	push   0xc002595d
c001d515:	e8 f6 25 ff ff       	call   c000fb10 <KePanic(char const*)>
c001d51a:	83 c4 10             	add    esp,0x10
c001d51d:	83 c8 ff             	or     eax,0xffffffff
c001d520:	eb 0b                	jmp    c001d52d <SoundCard::addChannel(SoundPort*)+0x39>
c001d522:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d526:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d52d:	83 c4 0c             	add    esp,0xc
c001d530:	c3                   	ret    
c001d531:	90                   	nop

c001d532 <SoundCard::removeChannel(int)>:
c001d532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d53a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d545:	c3                   	ret    
c001d546:	66 90                	xchg   ax,ax

c001d548 <SoundPort::SoundPort(int, int, int, int)>:
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d562:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d566:	89 10                	mov    DWORD PTR [eax],edx
c001d568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d570:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d577:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d57b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d57e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d583:	75 13                	jne    c001d598 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d589:	8b 00                	mov    eax,DWORD PTR [eax]
c001d58b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d590:	d1 e0                	shl    eax,1
c001d592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d596:	66 90                	xchg   ax,ax
c001d598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d5a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d5b5:	c1 e0 02             	shl    eax,0x2
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	50                   	push   eax
c001d5bc:	e8 f3 20 ff ff       	call   c000f6b4 <malloc>
c001d5c1:	83 c4 10             	add    esp,0x10
c001d5c4:	89 c2                	mov    edx,eax
c001d5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d5cd:	90                   	nop
c001d5ce:	83 c4 0c             	add    esp,0xc
c001d5d1:	c3                   	ret    
c001d5d2:	66 90                	xchg   ax,ax

c001d5d4 <SoundPort::~SoundPort()>:
c001d5d4:	83 ec 0c             	sub    esp,0xc
c001d5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d5de:	85 c0                	test   eax,eax
c001d5e0:	74 1e                	je     c001d600 <SoundPort::~SoundPort()+0x2c>
c001d5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d5e9:	83 ec 0c             	sub    esp,0xc
c001d5ec:	50                   	push   eax
c001d5ed:	e8 d2 20 ff ff       	call   c000f6c4 <free>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d600:	90                   	nop
c001d601:	83 c4 0c             	add    esp,0xc
c001d604:	c3                   	ret    
c001d605:	90                   	nop
c001d606:	66 90                	xchg   ax,ax

c001d608 <SoundPort::unpause()>:
c001d608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d60c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d610:	c3                   	ret    
c001d611:	90                   	nop
c001d612:	66 90                	xchg   ax,ax

c001d614 <SoundPort::pause()>:
c001d614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d618:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d61c:	c3                   	ret    
c001d61d:	90                   	nop
c001d61e:	66 90                	xchg   ax,ax

c001d620 <SoundPort::getBufferUsed()>:
c001d620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d624:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d627:	c3                   	ret    

c001d628 <SoundPort::getBufferSize()>:
c001d628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d62c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d62f:	c3                   	ret    

c001d630 <SoundPort::buffer8(signed char*, int)>:
c001d630:	55                   	push   ebp
c001d631:	57                   	push   edi
c001d632:	56                   	push   esi
c001d633:	53                   	push   ebx
c001d634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d638:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d63c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d63f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d642:	74 70                	je     c001d6b4 <SoundPort::buffer8(signed char*, int)+0x84>
c001d644:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d648:	85 c9                	test   ecx,ecx
c001d64a:	7e 68                	jle    c001d6b4 <SoundPort::buffer8(signed char*, int)+0x84>
c001d64c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d650:	8d 48 01             	lea    ecx,[eax+0x1]
c001d653:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d656:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d659:	89 f1                	mov    ecx,esi
c001d65b:	c1 e1 18             	shl    ecx,0x18
c001d65e:	29 f1                	sub    ecx,esi
c001d660:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d663:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d666:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d669:	74 51                	je     c001d6bc <SoundPort::buffer8(signed char*, int)+0x8c>
c001d66b:	31 ff                	xor    edi,edi
c001d66d:	eb 25                	jmp    c001d694 <SoundPort::buffer8(signed char*, int)+0x64>
c001d66f:	90                   	nop
c001d670:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d675:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d678:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d67b:	89 f3                	mov    ebx,esi
c001d67d:	c1 e3 18             	shl    ebx,0x18
c001d680:	29 f3                	sub    ebx,esi
c001d682:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d685:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d688:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d68b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d68e:	74 1c                	je     c001d6ac <SoundPort::buffer8(signed char*, int)+0x7c>
c001d690:	89 c7                	mov    edi,eax
c001d692:	66 90                	xchg   ax,ax
c001d694:	8d 47 01             	lea    eax,[edi+0x1]
c001d697:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d69b:	75 d3                	jne    c001d670 <SoundPort::buffer8(signed char*, int)+0x40>
c001d69d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d6a4:	5b                   	pop    ebx
c001d6a5:	5e                   	pop    esi
c001d6a6:	5f                   	pop    edi
c001d6a7:	5d                   	pop    ebp
c001d6a8:	c3                   	ret    
c001d6a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d6ac:	5b                   	pop    ebx
c001d6ad:	8d 47 02             	lea    eax,[edi+0x2]
c001d6b0:	5e                   	pop    esi
c001d6b1:	5f                   	pop    edi
c001d6b2:	5d                   	pop    ebp
c001d6b3:	c3                   	ret    
c001d6b4:	5b                   	pop    ebx
c001d6b5:	31 c0                	xor    eax,eax
c001d6b7:	5e                   	pop    esi
c001d6b8:	5f                   	pop    edi
c001d6b9:	5d                   	pop    ebp
c001d6ba:	c3                   	ret    
c001d6bb:	90                   	nop
c001d6bc:	b8 01 00 00 00       	mov    eax,0x1
c001d6c1:	eb e1                	jmp    c001d6a4 <SoundPort::buffer8(signed char*, int)+0x74>
c001d6c3:	90                   	nop

c001d6c4 <SoundPort::buffer16(short*, int)>:
c001d6c4:	55                   	push   ebp
c001d6c5:	57                   	push   edi
c001d6c6:	56                   	push   esi
c001d6c7:	53                   	push   ebx
c001d6c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6cc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d6d0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d6d3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d6d6:	74 70                	je     c001d748 <SoundPort::buffer16(short*, int)+0x84>
c001d6d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d6dc:	85 c9                	test   ecx,ecx
c001d6de:	7e 68                	jle    c001d748 <SoundPort::buffer16(short*, int)+0x84>
c001d6e0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d6e4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d6e7:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d6ea:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d6ed:	89 f1                	mov    ecx,esi
c001d6ef:	c1 e1 10             	shl    ecx,0x10
c001d6f2:	29 f1                	sub    ecx,esi
c001d6f4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d6f7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d6fa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d6fd:	74 51                	je     c001d750 <SoundPort::buffer16(short*, int)+0x8c>
c001d6ff:	31 ff                	xor    edi,edi
c001d701:	eb 25                	jmp    c001d728 <SoundPort::buffer16(short*, int)+0x64>
c001d703:	90                   	nop
c001d704:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d709:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d70c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d70f:	89 f3                	mov    ebx,esi
c001d711:	c1 e3 10             	shl    ebx,0x10
c001d714:	29 f3                	sub    ebx,esi
c001d716:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d719:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d71c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d71f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d722:	74 1c                	je     c001d740 <SoundPort::buffer16(short*, int)+0x7c>
c001d724:	89 c7                	mov    edi,eax
c001d726:	66 90                	xchg   ax,ax
c001d728:	8d 47 01             	lea    eax,[edi+0x1]
c001d72b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d72f:	75 d3                	jne    c001d704 <SoundPort::buffer16(short*, int)+0x40>
c001d731:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d735:	8d 76 00             	lea    esi,[esi+0x0]
c001d738:	5b                   	pop    ebx
c001d739:	5e                   	pop    esi
c001d73a:	5f                   	pop    edi
c001d73b:	5d                   	pop    ebp
c001d73c:	c3                   	ret    
c001d73d:	8d 76 00             	lea    esi,[esi+0x0]
c001d740:	5b                   	pop    ebx
c001d741:	8d 47 02             	lea    eax,[edi+0x2]
c001d744:	5e                   	pop    esi
c001d745:	5f                   	pop    edi
c001d746:	5d                   	pop    ebp
c001d747:	c3                   	ret    
c001d748:	5b                   	pop    ebx
c001d749:	31 c0                	xor    eax,eax
c001d74b:	5e                   	pop    esi
c001d74c:	5f                   	pop    edi
c001d74d:	5d                   	pop    ebp
c001d74e:	c3                   	ret    
c001d74f:	90                   	nop
c001d750:	b8 01 00 00 00       	mov    eax,0x1
c001d755:	eb e1                	jmp    c001d738 <SoundPort::buffer16(short*, int)+0x74>
c001d757:	90                   	nop

c001d758 <SoundPort::buffer32(int*, int)>:
c001d758:	55                   	push   ebp
c001d759:	57                   	push   edi
c001d75a:	56                   	push   esi
c001d75b:	53                   	push   ebx
c001d75c:	83 ec 04             	sub    esp,0x4
c001d75f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d767:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d76b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d76e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d771:	89 04 24             	mov    DWORD PTR [esp],eax
c001d774:	74 5a                	je     c001d7d0 <SoundPort::buffer32(int*, int)+0x78>
c001d776:	85 c0                	test   eax,eax
c001d778:	7e 56                	jle    c001d7d0 <SoundPort::buffer32(int*, int)+0x78>
c001d77a:	8d 71 01             	lea    esi,[ecx+0x1]
c001d77d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d780:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d783:	8b 37                	mov    esi,DWORD PTR [edi]
c001d785:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d788:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d78b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d78e:	74 4c                	je     c001d7dc <SoundPort::buffer32(int*, int)+0x84>
c001d790:	31 f6                	xor    esi,esi
c001d792:	eb 1c                	jmp    c001d7b0 <SoundPort::buffer32(int*, int)+0x58>
c001d794:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d797:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d79a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d79d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d7a0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d7a4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7a7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7aa:	74 18                	je     c001d7c4 <SoundPort::buffer32(int*, int)+0x6c>
c001d7ac:	89 de                	mov    esi,ebx
c001d7ae:	66 90                	xchg   ax,ax
c001d7b0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d7b3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d7b6:	75 dc                	jne    c001d794 <SoundPort::buffer32(int*, int)+0x3c>
c001d7b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d7bb:	90                   	nop
c001d7bc:	83 c4 04             	add    esp,0x4
c001d7bf:	5b                   	pop    ebx
c001d7c0:	5e                   	pop    esi
c001d7c1:	5f                   	pop    edi
c001d7c2:	5d                   	pop    ebp
c001d7c3:	c3                   	ret    
c001d7c4:	8d 46 02             	lea    eax,[esi+0x2]
c001d7c7:	83 c4 04             	add    esp,0x4
c001d7ca:	5b                   	pop    ebx
c001d7cb:	5e                   	pop    esi
c001d7cc:	5f                   	pop    edi
c001d7cd:	5d                   	pop    ebp
c001d7ce:	c3                   	ret    
c001d7cf:	90                   	nop
c001d7d0:	83 c4 04             	add    esp,0x4
c001d7d3:	31 c0                	xor    eax,eax
c001d7d5:	5b                   	pop    ebx
c001d7d6:	5e                   	pop    esi
c001d7d7:	5f                   	pop    edi
c001d7d8:	5d                   	pop    ebp
c001d7d9:	c3                   	ret    
c001d7da:	66 90                	xchg   ax,ax
c001d7dc:	b8 01 00 00 00       	mov    eax,0x1
c001d7e1:	eb d9                	jmp    c001d7bc <SoundPort::buffer32(int*, int)+0x64>
c001d7e3:	90                   	nop

c001d7e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d7e4:	55                   	push   ebp
c001d7e5:	57                   	push   edi
c001d7e6:	56                   	push   esi
c001d7e7:	53                   	push   ebx
c001d7e8:	83 ec 0c             	sub    esp,0xc
c001d7eb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d7ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d7f3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d7f7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d7fb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d801:	39 03                	cmp    DWORD PTR [ebx],eax
c001d803:	74 13                	je     c001d818 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001d805:	83 ec 0c             	sub    esp,0xc
c001d808:	68 b0 59 02 c0       	push   0xc00259b0
c001d80d:	e8 fe 22 ff ff       	call   c000fb10 <KePanic(char const*)>
c001d812:	83 c4 10             	add    esp,0x10
c001d815:	8d 76 00             	lea    esi,[esi+0x0]
c001d818:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d81e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d821:	74 11                	je     c001d834 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001d823:	83 ec 0c             	sub    esp,0xc
c001d826:	68 ef 59 02 c0       	push   0xc00259ef
c001d82b:	e8 e0 22 ff ff       	call   c000fb10 <KePanic(char const*)>
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	90                   	nop
c001d834:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d83a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d83d:	74 11                	je     c001d850 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001d83f:	83 ec 0c             	sub    esp,0xc
c001d842:	68 ef 59 02 c0       	push   0xc00259ef
c001d847:	e8 c4 22 ff ff       	call   c000fb10 <KePanic(char const*)>
c001d84c:	83 c4 10             	add    esp,0x10
c001d84f:	90                   	nop
c001d850:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001d853:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001d857:	85 f6                	test   esi,esi
c001d859:	7e 2d                	jle    c001d888 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d85b:	31 c0                	xor    eax,eax
c001d85d:	8d 76 00             	lea    esi,[esi+0x0]
c001d860:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d863:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001d866:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001d86c:	85 c9                	test   ecx,ecx
c001d86e:	0f 49 d1             	cmovns edx,ecx
c001d871:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001d875:	c1 fa 0f             	sar    edx,0xf
c001d878:	01 d1                	add    ecx,edx
c001d87a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001d87e:	83 c0 01             	add    eax,0x1
c001d881:	39 f0                	cmp    eax,esi
c001d883:	75 db                	jne    c001d860 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001d885:	8d 76 00             	lea    esi,[esi+0x0]
c001d888:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d88b:	83 ec 04             	sub    esp,0x4
c001d88e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d891:	29 f0                	sub    eax,esi
c001d893:	c1 e0 02             	shl    eax,0x2
c001d896:	50                   	push   eax
c001d897:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d89a:	50                   	push   eax
c001d89b:	52                   	push   edx
c001d89c:	e8 2f 2b fe ff       	call   c00003d0 <memmove>
c001d8a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d8a4:	29 f0                	sub    eax,esi
c001d8a6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d8a9:	83 c4 1c             	add    esp,0x1c
c001d8ac:	89 f0                	mov    eax,esi
c001d8ae:	5b                   	pop    ebx
c001d8af:	5e                   	pop    esi
c001d8b0:	5f                   	pop    edi
c001d8b1:	5d                   	pop    ebp
c001d8b2:	c3                   	ret    
c001d8b3:	90                   	nop

c001d8b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d8b4:	55                   	push   ebp
c001d8b5:	57                   	push   edi
c001d8b6:	56                   	push   esi
c001d8b7:	53                   	push   ebx
c001d8b8:	83 ec 0c             	sub    esp,0xc
c001d8bb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d8bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001d8c7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d8cb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d8d1:	39 03                	cmp    DWORD PTR [ebx],eax
c001d8d3:	74 13                	je     c001d8e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001d8d5:	83 ec 0c             	sub    esp,0xc
c001d8d8:	68 d0 59 02 c0       	push   0xc00259d0
c001d8dd:	e8 2e 22 ff ff       	call   c000fb10 <KePanic(char const*)>
c001d8e2:	83 c4 10             	add    esp,0x10
c001d8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8e8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d8ee:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d8f1:	74 11                	je     c001d904 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001d8f3:	83 ec 0c             	sub    esp,0xc
c001d8f6:	68 0b 5a 02 c0       	push   0xc0025a0b
c001d8fb:	e8 10 22 ff ff       	call   c000fb10 <KePanic(char const*)>
c001d900:	83 c4 10             	add    esp,0x10
c001d903:	90                   	nop
c001d904:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d90a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d90d:	74 11                	je     c001d920 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001d90f:	83 ec 0c             	sub    esp,0xc
c001d912:	68 0b 5a 02 c0       	push   0xc0025a0b
c001d917:	e8 f4 21 ff ff       	call   c000fb10 <KePanic(char const*)>
c001d91c:	83 c4 10             	add    esp,0x10
c001d91f:	90                   	nop
c001d920:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001d923:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001d927:	85 ff                	test   edi,edi
c001d929:	7e 21                	jle    c001d94c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001d92b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d932:	31 c0                	xor    eax,eax
c001d934:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d937:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001d93a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d93d:	01 d5                	add    ebp,edx
c001d93f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001d942:	83 c0 04             	add    eax,0x4
c001d945:	39 c1                	cmp    ecx,eax
c001d947:	75 eb                	jne    c001d934 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001d949:	8d 76 00             	lea    esi,[esi+0x0]
c001d94c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d94f:	83 ec 04             	sub    esp,0x4
c001d952:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d955:	29 f8                	sub    eax,edi
c001d957:	c1 e0 02             	shl    eax,0x2
c001d95a:	50                   	push   eax
c001d95b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d95e:	50                   	push   eax
c001d95f:	52                   	push   edx
c001d960:	e8 6b 2a fe ff       	call   c00003d0 <memmove>
c001d965:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d968:	29 f8                	sub    eax,edi
c001d96a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d96d:	83 c4 1c             	add    esp,0x1c
c001d970:	89 f8                	mov    eax,edi
c001d972:	5b                   	pop    ebx
c001d973:	5e                   	pop    esi
c001d974:	5f                   	pop    edi
c001d975:	5d                   	pop    ebp
c001d976:	c3                   	ret    
c001d977:	90                   	nop

c001d978 <PCI::open(int, int, void*)>:
c001d978:	83 ec 18             	sub    esp,0x18
c001d97b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d97f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d983:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d989:	8b 10                	mov    edx,DWORD PTR [eax]
c001d98b:	50                   	push   eax
c001d98c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d98f:	31 c0                	xor    eax,eax
c001d991:	83 c4 1c             	add    esp,0x1c
c001d994:	c3                   	ret    
c001d995:	90                   	nop

c001d996 <PCI::close(int, int, void*)>:
c001d996:	31 c0                	xor    eax,eax
c001d998:	c3                   	ret    
c001d999:	90                   	nop

c001d99a <PCI::PCI()>:
c001d99a:	83 ec 0c             	sub    esp,0xc
c001d99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9a1:	83 ec 08             	sub    esp,0x8
c001d9a4:	68 27 5a 02 c0       	push   0xc0025a27
c001d9a9:	50                   	push   eax
c001d9aa:	e8 b5 af fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001d9af:	83 c4 10             	add    esp,0x10
c001d9b2:	ba 34 5b 02 c0       	mov    edx,0xc0025b34
c001d9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9bb:	89 10                	mov    DWORD PTR [eax],edx
c001d9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9c1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9cf:	a3 e0 f4 02 c0       	mov    ds:0xc002f4e0,eax
c001d9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9de:	0f b6 d0             	movzx  edx,al
c001d9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9e5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9f6:	0f b6 d0             	movzx  edx,al
c001d9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9fd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001da02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da0c:	8d 50 01             	lea    edx,[eax+0x1]
c001da0f:	88 d1                	mov    cl,dl
c001da11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da15:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001da1b:	0f b6 d0             	movzx  edx,al
c001da1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da22:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001da26:	83 c9 c0             	or     ecx,0xffffffc0
c001da29:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001da2d:	90                   	nop
c001da2e:	83 c4 0c             	add    esp,0xc
c001da31:	c3                   	ret    

c001da32 <PCI::readBAR8(unsigned int, int)>:
c001da32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da3a:	f6 c2 01             	test   dl,0x1
c001da3d:	74 07                	je     c001da46 <PCI::readBAR8(unsigned int, int)+0x14>
c001da3f:	83 e2 fc             	and    edx,0xfffffffc
c001da42:	01 c2                	add    edx,eax
c001da44:	ec                   	in     al,dx
c001da45:	c3                   	ret    
c001da46:	83 e2 f0             	and    edx,0xfffffff0
c001da49:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001da4c:	c3                   	ret    
c001da4d:	90                   	nop

c001da4e <PCI::readBAR16(unsigned int, int)>:
c001da4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da56:	f6 c2 01             	test   dl,0x1
c001da59:	74 08                	je     c001da63 <PCI::readBAR16(unsigned int, int)+0x15>
c001da5b:	83 e2 fc             	and    edx,0xfffffffc
c001da5e:	01 c2                	add    edx,eax
c001da60:	66 ed                	in     ax,dx
c001da62:	c3                   	ret    
c001da63:	83 e2 f0             	and    edx,0xfffffff0
c001da66:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001da6a:	c3                   	ret    
c001da6b:	90                   	nop

c001da6c <PCI::readBAR32(unsigned int, int)>:
c001da6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da74:	f6 c2 01             	test   dl,0x1
c001da77:	74 07                	je     c001da80 <PCI::readBAR32(unsigned int, int)+0x14>
c001da79:	83 e2 fc             	and    edx,0xfffffffc
c001da7c:	01 c2                	add    edx,eax
c001da7e:	ed                   	in     eax,dx
c001da7f:	c3                   	ret    
c001da80:	83 e2 f0             	and    edx,0xfffffff0
c001da83:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001da86:	c3                   	ret    
c001da87:	90                   	nop

c001da88 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001da88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da94:	f6 c2 01             	test   dl,0x1
c001da97:	74 07                	je     c001daa0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001da99:	83 e2 fc             	and    edx,0xfffffffc
c001da9c:	01 ca                	add    edx,ecx
c001da9e:	ee                   	out    dx,al
c001da9f:	c3                   	ret    
c001daa0:	83 e2 f0             	and    edx,0xfffffff0
c001daa3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001daa6:	c3                   	ret    
c001daa7:	90                   	nop

c001daa8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001daa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dab0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dab4:	f6 c2 01             	test   dl,0x1
c001dab7:	74 08                	je     c001dac1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dab9:	83 e2 fc             	and    edx,0xfffffffc
c001dabc:	01 ca                	add    edx,ecx
c001dabe:	66 ef                	out    dx,ax
c001dac0:	c3                   	ret    
c001dac1:	83 e2 f0             	and    edx,0xfffffff0
c001dac4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dac8:	c3                   	ret    
c001dac9:	90                   	nop

c001daca <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001daca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dad2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dad6:	f6 c2 01             	test   dl,0x1
c001dad9:	74 07                	je     c001dae2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dadb:	83 e2 fc             	and    edx,0xfffffffc
c001dade:	01 ca                	add    edx,ecx
c001dae0:	ef                   	out    dx,eax
c001dae1:	c3                   	ret    
c001dae2:	83 e2 f0             	and    edx,0xfffffff0
c001dae5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dae8:	c3                   	ret    
c001dae9:	90                   	nop

c001daea <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001daea:	55                   	push   ebp
c001daeb:	57                   	push   edi
c001daec:	56                   	push   esi
c001daed:	53                   	push   ebx
c001daee:	83 ec 0c             	sub    esp,0xc
c001daf1:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001daf6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dafa:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dafe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001db02:	83 fe 07             	cmp    esi,0x7
c001db05:	76 10                	jbe    c001db17 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001db07:	83 ec 0c             	sub    esp,0xc
c001db0a:	68 2f 5a 02 c0       	push   0xc0025a2f
c001db0f:	e8 fc 1f ff ff       	call   c000fb10 <KePanic(char const*)>
c001db14:	83 c4 10             	add    esp,0x10
c001db17:	0f b6 db             	movzx  ebx,bl
c001db1a:	83 fb 0f             	cmp    ebx,0xf
c001db1d:	76 10                	jbe    c001db2f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001db1f:	83 ec 0c             	sub    esp,0xc
c001db22:	68 5f 5a 02 c0       	push   0xc0025a5f
c001db27:	e8 e4 1f ff ff       	call   c000fb10 <KePanic(char const*)>
c001db2c:	83 c4 10             	add    esp,0x10
c001db2f:	8d 04 36             	lea    eax,[esi+esi*1]
c001db32:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db37:	83 c8 f0             	or     eax,0xfffffff0
c001db3a:	ee                   	out    dx,al
c001db3b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001db40:	89 e8                	mov    eax,ebp
c001db42:	ee                   	out    dx,al
c001db43:	89 f9                	mov    ecx,edi
c001db45:	89 d8                	mov    eax,ebx
c001db47:	0f b6 d9             	movzx  ebx,cl
c001db4a:	83 c4 0c             	add    esp,0xc
c001db4d:	c1 e0 08             	shl    eax,0x8
c001db50:	83 e3 fc             	and    ebx,0xfffffffc
c001db53:	09 d8                	or     eax,ebx
c001db55:	5b                   	pop    ebx
c001db56:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001db5b:	5e                   	pop    esi
c001db5c:	5f                   	pop    edi
c001db5d:	5d                   	pop    ebp
c001db5e:	c3                   	ret    
c001db5f:	90                   	nop

c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db60:	57                   	push   edi
c001db61:	56                   	push   esi
c001db62:	53                   	push   ebx
c001db63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db73:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001db79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001db7d:	83 ff 01             	cmp    edi,0x1
c001db80:	75 3f                	jne    c001dbc1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001db82:	89 de                	mov    esi,ebx
c001db84:	0f b6 c0             	movzx  eax,al
c001db87:	c1 e0 10             	shl    eax,0x10
c001db8a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001db90:	0f b6 c9             	movzx  ecx,cl
c001db93:	09 f0                	or     eax,esi
c001db95:	c1 e1 08             	shl    ecx,0x8
c001db98:	0f b6 d2             	movzx  edx,dl
c001db9b:	c1 e2 0b             	shl    edx,0xb
c001db9e:	09 c8                	or     eax,ecx
c001dba0:	09 d0                	or     eax,edx
c001dba2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dba7:	0d 00 00 00 80       	or     eax,0x80000000
c001dbac:	ef                   	out    dx,eax
c001dbad:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dbb2:	ed                   	in     eax,dx
c001dbb3:	83 e3 02             	and    ebx,0x2
c001dbb6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dbbd:	d3 e8                	shr    eax,cl
c001dbbf:	eb 44                	jmp    c001dc05 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dbc1:	83 ff 02             	cmp    edi,0x2
c001dbc4:	75 2d                	jne    c001dbf3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001dbc6:	83 ec 0c             	sub    esp,0xc
c001dbc9:	0f b6 fb             	movzx  edi,bl
c001dbcc:	57                   	push   edi
c001dbcd:	0f b6 c9             	movzx  ecx,cl
c001dbd0:	51                   	push   ecx
c001dbd1:	0f b6 d2             	movzx  edx,dl
c001dbd4:	52                   	push   edx
c001dbd5:	0f b6 c0             	movzx  eax,al
c001dbd8:	50                   	push   eax
c001dbd9:	56                   	push   esi
c001dbda:	e8 0b ff ff ff       	call   c001daea <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbdf:	89 c2                	mov    edx,eax
c001dbe1:	ed                   	in     eax,dx
c001dbe2:	83 e3 02             	and    ebx,0x2
c001dbe5:	83 c4 20             	add    esp,0x20
c001dbe8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dbef:	d3 e8                	shr    eax,cl
c001dbf1:	eb 12                	jmp    c001dc05 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dbf3:	83 ec 0c             	sub    esp,0xc
c001dbf6:	68 8f 5a 02 c0       	push   0xc0025a8f
c001dbfb:	e8 10 1f ff ff       	call   c000fb10 <KePanic(char const*)>
c001dc00:	83 c4 10             	add    esp,0x10
c001dc03:	31 c0                	xor    eax,eax
c001dc05:	5b                   	pop    ebx
c001dc06:	5e                   	pop    esi
c001dc07:	5f                   	pop    edi
c001dc08:	c3                   	ret    
c001dc09:	90                   	nop

c001dc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dc0a:	83 ec 18             	sub    esp,0x18
c001dc0d:	6a 00                	push   0x0
c001dc0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc14:	50                   	push   eax
c001dc15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc1a:	50                   	push   eax
c001dc1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc20:	50                   	push   eax
c001dc21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc25:	e8 36 ff ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc2a:	83 c4 2c             	add    esp,0x2c
c001dc2d:	c3                   	ret    

c001dc2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dc2e:	83 ec 18             	sub    esp,0x18
c001dc31:	6a 0e                	push   0xe
c001dc33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc38:	50                   	push   eax
c001dc39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc3e:	50                   	push   eax
c001dc3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc44:	50                   	push   eax
c001dc45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc49:	e8 12 ff ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc4e:	83 c4 2c             	add    esp,0x2c
c001dc51:	0f b6 c0             	movzx  eax,al
c001dc54:	c3                   	ret    
c001dc55:	90                   	nop

c001dc56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dc56:	55                   	push   ebp
c001dc57:	57                   	push   edi
c001dc58:	56                   	push   esi
c001dc59:	53                   	push   ebx
c001dc5a:	83 ec 18             	sub    esp,0x18
c001dc5d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dc62:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dc67:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dc6c:	6a 0a                	push   0xa
c001dc6e:	56                   	push   esi
c001dc6f:	55                   	push   ebp
c001dc70:	57                   	push   edi
c001dc71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc75:	e8 e6 fe ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc7a:	83 c4 14             	add    esp,0x14
c001dc7d:	6a 0a                	push   0xa
c001dc7f:	56                   	push   esi
c001dc80:	55                   	push   ebp
c001dc81:	57                   	push   edi
c001dc82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc86:	89 c3                	mov    ebx,eax
c001dc88:	0f b6 db             	movzx  ebx,bl
c001dc8b:	e8 d0 fe ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc90:	83 c4 2c             	add    esp,0x2c
c001dc93:	25 00 ff 00 00       	and    eax,0xff00
c001dc98:	09 d8                	or     eax,ebx
c001dc9a:	5b                   	pop    ebx
c001dc9b:	5e                   	pop    esi
c001dc9c:	5f                   	pop    edi
c001dc9d:	5d                   	pop    ebp
c001dc9e:	c3                   	ret    
c001dc9f:	90                   	nop

c001dca0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dca0:	83 ec 18             	sub    esp,0x18
c001dca3:	6a 08                	push   0x8
c001dca5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcaa:	50                   	push   eax
c001dcab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcb0:	50                   	push   eax
c001dcb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcb6:	50                   	push   eax
c001dcb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcbb:	e8 a0 fe ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcc0:	83 c4 2c             	add    esp,0x2c
c001dcc3:	0f b6 c4             	movzx  eax,ah
c001dcc6:	c3                   	ret    
c001dcc7:	90                   	nop

c001dcc8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dcc8:	83 ec 18             	sub    esp,0x18
c001dccb:	6a 08                	push   0x8
c001dccd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcd2:	50                   	push   eax
c001dcd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcd8:	50                   	push   eax
c001dcd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcde:	50                   	push   eax
c001dcdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dce3:	e8 78 fe ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dce8:	83 c4 2c             	add    esp,0x2c
c001dceb:	c3                   	ret    

c001dcec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dcec:	83 ec 18             	sub    esp,0x18
c001dcef:	6a 3c                	push   0x3c
c001dcf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcf6:	50                   	push   eax
c001dcf7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcfc:	50                   	push   eax
c001dcfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd02:	50                   	push   eax
c001dd03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd07:	e8 54 fe ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd0c:	83 c4 2c             	add    esp,0x2c
c001dd0f:	c3                   	ret    

c001dd10 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dd10:	83 ec 18             	sub    esp,0x18
c001dd13:	6a 18                	push   0x18
c001dd15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd1a:	50                   	push   eax
c001dd1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd20:	50                   	push   eax
c001dd21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd26:	50                   	push   eax
c001dd27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd2b:	e8 30 fe ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd30:	83 c4 2c             	add    esp,0x2c
c001dd33:	0f b6 c4             	movzx  eax,ah
c001dd36:	c3                   	ret    
c001dd37:	90                   	nop

c001dd38 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd38:	55                   	push   ebp
c001dd39:	57                   	push   edi
c001dd3a:	56                   	push   esi
c001dd3b:	53                   	push   ebx
c001dd3c:	83 ec 28             	sub    esp,0x28
c001dd3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dd43:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dd48:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dd4d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dd52:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dd59:	8d 43 12             	lea    eax,[ebx+0x12]
c001dd5c:	83 c3 10             	add    ebx,0x10
c001dd5f:	0f b6 c0             	movzx  eax,al
c001dd62:	0f b6 db             	movzx  ebx,bl
c001dd65:	50                   	push   eax
c001dd66:	51                   	push   ecx
c001dd67:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dd6b:	57                   	push   edi
c001dd6c:	55                   	push   ebp
c001dd6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd71:	e8 ea fd ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd76:	83 c4 14             	add    esp,0x14
c001dd79:	53                   	push   ebx
c001dd7a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd7e:	51                   	push   ecx
c001dd7f:	89 c6                	mov    esi,eax
c001dd81:	57                   	push   edi
c001dd82:	55                   	push   ebp
c001dd83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd87:	c1 e6 10             	shl    esi,0x10
c001dd8a:	e8 d1 fd ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd8f:	83 c4 3c             	add    esp,0x3c
c001dd92:	5b                   	pop    ebx
c001dd93:	0f b7 c0             	movzx  eax,ax
c001dd96:	09 f0                	or     eax,esi
c001dd98:	5e                   	pop    esi
c001dd99:	5f                   	pop    edi
c001dd9a:	5d                   	pop    ebp
c001dd9b:	c3                   	ret    

c001dd9c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dd9c:	55                   	push   ebp
c001dd9d:	57                   	push   edi
c001dd9e:	56                   	push   esi
c001dd9f:	53                   	push   ebx
c001dda0:	83 ec 0c             	sub    esp,0xc
c001dda3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001dda7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ddab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddaf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001ddb3:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001ddb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ddbd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddc1:	83 f9 01             	cmp    ecx,0x1
c001ddc4:	75 5d                	jne    c001de23 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001ddc6:	0f b6 c8             	movzx  ecx,al
c001ddc9:	89 f0                	mov    eax,esi
c001ddcb:	25 fc 00 00 00       	and    eax,0xfc
c001ddd0:	0f b6 d2             	movzx  edx,dl
c001ddd3:	c1 e1 10             	shl    ecx,0x10
c001ddd6:	c1 e2 0b             	shl    edx,0xb
c001ddd9:	09 c1                	or     ecx,eax
c001dddb:	89 f8                	mov    eax,edi
c001dddd:	0f b6 f8             	movzx  edi,al
c001dde0:	c1 e7 08             	shl    edi,0x8
c001dde3:	09 f9                	or     ecx,edi
c001dde5:	09 d1                	or     ecx,edx
c001dde7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddec:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ddf2:	89 c8                	mov    eax,ecx
c001ddf4:	ef                   	out    dx,eax
c001ddf5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ddfa:	ed                   	in     eax,dx
c001ddfb:	83 e6 02             	and    esi,0x2
c001ddfe:	0f b7 db             	movzx  ebx,bx
c001de01:	74 0a                	je     c001de0d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001de03:	c1 e3 10             	shl    ebx,0x10
c001de06:	0f b7 d0             	movzx  edx,ax
c001de09:	09 d3                	or     ebx,edx
c001de0b:	eb 05                	jmp    c001de12 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001de0d:	66 31 c0             	xor    ax,ax
c001de10:	09 c3                	or     ebx,eax
c001de12:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de17:	89 c8                	mov    eax,ecx
c001de19:	ef                   	out    dx,eax
c001de1a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de1f:	89 d8                	mov    eax,ebx
c001de21:	eb 41                	jmp    c001de64 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001de23:	83 f9 02             	cmp    ecx,0x2
c001de26:	75 45                	jne    c001de6d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001de28:	89 f1                	mov    ecx,esi
c001de2a:	83 ec 0c             	sub    esp,0xc
c001de2d:	0f b6 f1             	movzx  esi,cl
c001de30:	89 f9                	mov    ecx,edi
c001de32:	56                   	push   esi
c001de33:	0f b6 f9             	movzx  edi,cl
c001de36:	57                   	push   edi
c001de37:	0f b6 d2             	movzx  edx,dl
c001de3a:	52                   	push   edx
c001de3b:	0f b6 c0             	movzx  eax,al
c001de3e:	50                   	push   eax
c001de3f:	55                   	push   ebp
c001de40:	e8 a5 fc ff ff       	call   c001daea <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de45:	89 c2                	mov    edx,eax
c001de47:	ed                   	in     eax,dx
c001de48:	83 c4 20             	add    esp,0x20
c001de4b:	f6 c2 02             	test   dl,0x2
c001de4e:	0f b7 db             	movzx  ebx,bx
c001de51:	74 0c                	je     c001de5f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001de53:	0f b7 c8             	movzx  ecx,ax
c001de56:	89 d8                	mov    eax,ebx
c001de58:	c1 e0 10             	shl    eax,0x10
c001de5b:	09 c8                	or     eax,ecx
c001de5d:	eb 05                	jmp    c001de64 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001de5f:	66 31 c0             	xor    ax,ax
c001de62:	09 d8                	or     eax,ebx
c001de64:	ef                   	out    dx,eax
c001de65:	83 c4 0c             	add    esp,0xc
c001de68:	5b                   	pop    ebx
c001de69:	5e                   	pop    esi
c001de6a:	5f                   	pop    edi
c001de6b:	5d                   	pop    ebp
c001de6c:	c3                   	ret    
c001de6d:	c7 44 24 20 8f 5a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025a8f
c001de75:	83 c4 0c             	add    esp,0xc
c001de78:	5b                   	pop    ebx
c001de79:	5e                   	pop    esi
c001de7a:	5f                   	pop    edi
c001de7b:	5d                   	pop    ebp
c001de7c:	e9 8f 1c ff ff       	jmp    c000fb10 <KePanic(char const*)>
c001de81:	90                   	nop

c001de82 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001de82:	55                   	push   ebp
c001de83:	57                   	push   edi
c001de84:	56                   	push   esi
c001de85:	53                   	push   ebx
c001de86:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001de8c:	80 3d ec f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4ec,0x0
c001de93:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001de9a:	0f 85 bd 00 00 00    	jne    c001df5d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	68 14 01 00 00       	push   0x114
c001dea8:	e8 07 18 ff ff       	call   c000f6b4 <malloc>
c001dead:	83 c4 0c             	add    esp,0xc
c001deb0:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c001deb6:	68 95 5a 02 c0       	push   0xc0025a95
c001debb:	50                   	push   eax
c001debc:	89 c3                	mov    ebx,eax
c001debe:	e8 c5 a2 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	85 db                	test   ebx,ebx
c001dec8:	0f 84 6b 02 00 00    	je     c001e139 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dece:	57                   	push   edi
c001decf:	57                   	push   edi
c001ded0:	6a 01                	push   0x1
c001ded2:	53                   	push   ebx
c001ded3:	e8 ce a2 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	85 c0                	test   eax,eax
c001dedd:	0f 85 56 02 00 00    	jne    c001e139 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dee3:	52                   	push   edx
c001dee4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001dee8:	50                   	push   eax
c001dee9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001deed:	50                   	push   eax
c001deee:	53                   	push   ebx
c001deef:	e8 b4 a5 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001def4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001def8:	40                   	inc    eax
c001def9:	89 04 24             	mov    DWORD PTR [esp],eax
c001defc:	e8 b3 17 ff ff       	call   c000f6b4 <malloc>
c001df01:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001df05:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001df09:	59                   	pop    ecx
c001df0a:	a3 e8 f4 02 c0       	mov    ds:0xc002f4e8,eax
c001df0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001df11:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001df15:	51                   	push   ecx
c001df16:	50                   	push   eax
c001df17:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001df1b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001df1f:	53                   	push   ebx
c001df20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001df23:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001df27:	83 c4 20             	add    esp,0x20
c001df2a:	89 c8                	mov    eax,ecx
c001df2c:	99                   	cdq    
c001df2d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001df31:	0f 85 02 02 00 00    	jne    c001e139 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001df37:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001df3b:	0f 85 f8 01 00 00    	jne    c001e139 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001df41:	83 ec 0c             	sub    esp,0xc
c001df44:	53                   	push   ebx
c001df45:	e8 ba a2 fe ff       	call   c0008204 <File::close()>
c001df4a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001df4e:	83 c4 10             	add    esp,0x10
c001df51:	c6 05 ec f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4ec,0x1
c001df58:	a3 e4 f4 02 c0       	mov    ds:0xc002f4e4,eax
c001df5d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001df65:	31 c9                	xor    ecx,ecx
c001df67:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001df6e:	8b 2d e4 f4 02 c0    	mov    ebp,DWORD PTR ds:0xc002f4e4
c001df74:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001df7b:	8b 15 e8 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4e8
c001df81:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001df86:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001df8e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001df93:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001df9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001df9f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001dfa7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dfab:	39 cd                	cmp    ebp,ecx
c001dfad:	0f 8e 86 01 00 00    	jle    c001e139 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dfb3:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001dfb6:	d4 40                	aam    0x40
c001dfb8:	d5 39                	aad    0x39
c001dfba:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001dfbe:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001dfc2:	d4 40                	aam    0x40
c001dfc4:	d5 39                	aad    0x39
c001dfc6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dfca:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001dfce:	d4 40                	aam    0x40
c001dfd0:	d5 39                	aad    0x39
c001dfd2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001dfd6:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001dfda:	d4 40                	aam    0x40
c001dfdc:	d5 39                	aad    0x39
c001dfde:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001dfe2:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001dfe6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001dfea:	3c 56                	cmp    al,0x56
c001dfec:	74 47                	je     c001e035 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001dfee:	d4 40                	aam    0x40
c001dff0:	d5 39                	aad    0x39
c001dff2:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dff5:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001dff9:	0f b6 db             	movzx  ebx,bl
c001dffc:	c1 e3 04             	shl    ebx,0x4
c001dfff:	d4 40                	aam    0x40
c001e001:	d5 39                	aad    0x39
c001e003:	83 e8 30             	sub    eax,0x30
c001e006:	0f b6 c0             	movzx  eax,al
c001e009:	09 c3                	or     ebx,eax
c001e00b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001e00f:	c1 e3 04             	shl    ebx,0x4
c001e012:	d4 40                	aam    0x40
c001e014:	d5 39                	aad    0x39
c001e016:	83 e8 30             	sub    eax,0x30
c001e019:	0f b6 c0             	movzx  eax,al
c001e01c:	09 c3                	or     ebx,eax
c001e01e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001e022:	c1 e3 04             	shl    ebx,0x4
c001e025:	d4 40                	aam    0x40
c001e027:	d5 39                	aad    0x39
c001e029:	83 e8 30             	sub    eax,0x30
c001e02c:	0f b6 c0             	movzx  eax,al
c001e02f:	09 c3                	or     ebx,eax
c001e031:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e035:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001e039:	80 fb 58             	cmp    bl,0x58
c001e03c:	74 49                	je     c001e087 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001e03e:	88 d8                	mov    al,bl
c001e040:	d4 40                	aam    0x40
c001e042:	d5 39                	aad    0x39
c001e044:	83 e8 30             	sub    eax,0x30
c001e047:	0f b6 f8             	movzx  edi,al
c001e04a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001e04e:	c1 e7 04             	shl    edi,0x4
c001e051:	d4 40                	aam    0x40
c001e053:	d5 39                	aad    0x39
c001e055:	83 e8 30             	sub    eax,0x30
c001e058:	0f b6 c0             	movzx  eax,al
c001e05b:	09 c7                	or     edi,eax
c001e05d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001e061:	c1 e7 04             	shl    edi,0x4
c001e064:	d4 40                	aam    0x40
c001e066:	d5 39                	aad    0x39
c001e068:	83 e8 30             	sub    eax,0x30
c001e06b:	0f b6 c0             	movzx  eax,al
c001e06e:	09 c7                	or     edi,eax
c001e070:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001e074:	c1 e7 04             	shl    edi,0x4
c001e077:	d4 40                	aam    0x40
c001e079:	d5 39                	aad    0x39
c001e07b:	83 e8 30             	sub    eax,0x30
c001e07e:	0f b6 c0             	movzx  eax,al
c001e081:	09 c7                	or     edi,eax
c001e083:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001e087:	8d 41 10             	lea    eax,[ecx+0x10]
c001e08a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e08e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001e092:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e096:	83 f9 0a             	cmp    ecx,0xa
c001e099:	74 07                	je     c001e0a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001e09b:	47                   	inc    edi
c001e09c:	39 c5                	cmp    ebp,eax
c001e09e:	75 16                	jne    c001e0b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001e0a0:	89 e8                	mov    eax,ebp
c001e0a2:	83 f9 0a             	cmp    ecx,0xa
c001e0a5:	0f 94 c1             	sete   cl
c001e0a8:	0f b6 c9             	movzx  ecx,cl
c001e0ab:	01 c1                	add    ecx,eax
c001e0ad:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e0b2:	75 0f                	jne    c001e0c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001e0b4:	eb 1c                	jmp    c001e0d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001e0b6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e0b9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001e0bd:	40                   	inc    eax
c001e0be:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001e0c1:	eb cb                	jmp    c001e08e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001e0c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e0c7:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e0cc:	0f 85 d9 fe ff ff    	jne    c001dfab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e0d2:	80 fb 58             	cmp    bl,0x58
c001e0d5:	74 10                	je     c001e0e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001e0d7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e0dc:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001e0e1:	0f 85 c4 fe ff ff    	jne    c001dfab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e0e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0eb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0ef:	83 e8 30             	sub    eax,0x30
c001e0f2:	c1 e0 04             	shl    eax,0x4
c001e0f5:	83 eb 30             	sub    ebx,0x30
c001e0f8:	09 d8                	or     eax,ebx
c001e0fa:	0f b6 c0             	movzx  eax,al
c001e0fd:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e101:	0f 85 a4 fe ff ff    	jne    c001dfab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e10b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e10f:	83 e8 30             	sub    eax,0x30
c001e112:	c1 e0 04             	shl    eax,0x4
c001e115:	83 eb 30             	sub    ebx,0x30
c001e118:	09 d8                	or     eax,ebx
c001e11a:	0f b6 c0             	movzx  eax,al
c001e11d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e121:	0f 85 84 fe ff ff    	jne    c001dfab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e127:	50                   	push   eax
c001e128:	50                   	push   eax
c001e129:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e12d:	50                   	push   eax
c001e12e:	56                   	push   esi
c001e12f:	e8 1c 25 fe ff       	call   c0000650 <strcpy>
c001e134:	83 c4 10             	add    esp,0x10
c001e137:	eb 05                	jmp    c001e13e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001e139:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e13c:	31 f6                	xor    esi,esi
c001e13e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e144:	89 f0                	mov    eax,esi
c001e146:	5b                   	pop    ebx
c001e147:	5e                   	pop    esi
c001e148:	5f                   	pop    edi
c001e149:	5d                   	pop    ebp
c001e14a:	c3                   	ret    
c001e14b:	90                   	nop

c001e14c <PCI::checkBus(unsigned char)>:
c001e14c:	56                   	push   esi
c001e14d:	53                   	push   ebx
c001e14e:	31 db                	xor    ebx,ebx
c001e150:	51                   	push   ecx
c001e151:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e156:	52                   	push   edx
c001e157:	53                   	push   ebx
c001e158:	43                   	inc    ebx
c001e159:	56                   	push   esi
c001e15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e15e:	e8 6f 03 00 00       	call   c001e4d2 <PCI::checkDevice(unsigned char, unsigned char)>
c001e163:	83 c4 10             	add    esp,0x10
c001e166:	83 fb 20             	cmp    ebx,0x20
c001e169:	75 eb                	jne    c001e156 <PCI::checkBus(unsigned char)+0xa>
c001e16b:	58                   	pop    eax
c001e16c:	5b                   	pop    ebx
c001e16d:	5e                   	pop    esi
c001e16e:	c3                   	ret    
c001e16f:	90                   	nop

c001e170 <PCI::foundDevice(PCIDeviceInfo)>:
c001e170:	55                   	push   ebp
c001e171:	57                   	push   edi
c001e172:	56                   	push   esi
c001e173:	53                   	push   ebx
c001e174:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e17a:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e182:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001e189:	3d ff ff 00 00       	cmp    eax,0xffff
c001e18e:	0f 84 b6 01 00 00    	je     c001e34a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e194:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001e19c:	66 81 fd 06 04       	cmp    bp,0x406
c001e1a1:	75 32                	jne    c001e1d5 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e1a3:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e1ab:	50                   	push   eax
c001e1ac:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e1b4:	50                   	push   eax
c001e1b5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e1bd:	50                   	push   eax
c001e1be:	53                   	push   ebx
c001e1bf:	e8 4c fb ff ff       	call   c001dd10 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e1c4:	59                   	pop    ecx
c001e1c5:	5e                   	pop    esi
c001e1c6:	0f b6 c0             	movzx  eax,al
c001e1c9:	50                   	push   eax
c001e1ca:	53                   	push   ebx
c001e1cb:	e8 7c ff ff ff       	call   c001e14c <PCI::checkBus(unsigned char)>
c001e1d0:	e9 15 01 00 00       	jmp    c001e2ea <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001e1d5:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001e1dd:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e1e3:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e1ea:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e1f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1f5:	85 c0                	test   eax,eax
c001e1f7:	74 34                	je     c001e22d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001e1f9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e1fc:	85 d2                	test   edx,edx
c001e1fe:	74 29                	je     c001e229 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e200:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e206:	31 cf                	xor    edi,ecx
c001e208:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e20e:	75 19                	jne    c001e229 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e210:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e216:	75 11                	jne    c001e229 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e218:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e21f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001e223:	0f 84 21 01 00 00    	je     c001e34a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e229:	8b 00                	mov    eax,DWORD PTR [eax]
c001e22b:	eb c8                	jmp    c001e1f5 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e22d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e231:	be c8 5a 02 c0       	mov    esi,0xc0025ac8
c001e236:	b9 07 00 00 00       	mov    ecx,0x7
c001e23b:	fc                   	cld    
c001e23c:	31 d2                	xor    edx,edx
c001e23e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e240:	b9 12 00 00 00       	mov    ecx,0x12
c001e245:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e24c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e255:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e25d:	b9 0a 00 00 00       	mov    ecx,0xa
c001e262:	f7 f1                	div    ecx
c001e264:	83 c0 30             	add    eax,0x30
c001e267:	83 c2 30             	add    edx,0x30
c001e26a:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e26e:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e276:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e27a:	31 d2                	xor    edx,edx
c001e27c:	f7 f1                	div    ecx
c001e27e:	83 c0 30             	add    eax,0x30
c001e281:	83 c2 30             	add    edx,0x30
c001e284:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e288:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e28c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e290:	50                   	push   eax
c001e291:	e8 7b ef fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001e296:	83 c4 10             	add    esp,0x10
c001e299:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001e29f:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e2a6:	75 47                	jne    c001e2ef <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	68 64 01 00 00       	push   0x164
c001e2b0:	e8 ff 13 ff ff       	call   c000f6b4 <malloc>
c001e2b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2b8:	89 c5                	mov    ebp,eax
c001e2ba:	e8 37 11 00 00       	call   c001f3f6 <SATABus::SATABus()>
c001e2bf:	58                   	pop    eax
c001e2c0:	5a                   	pop    edx
c001e2c1:	55                   	push   ebp
c001e2c2:	53                   	push   ebx
c001e2c3:	e8 2e b7 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e2c8:	83 ec 1c             	sub    esp,0x1c
c001e2cb:	b9 09 00 00 00       	mov    ecx,0x9
c001e2d0:	89 e7                	mov    edi,esp
c001e2d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e2d4:	55                   	push   ebp
c001e2d5:	e8 62 b6 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e2da:	83 c4 30             	add    esp,0x30
c001e2dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e2e0:	6a 00                	push   0x0
c001e2e2:	6a 00                	push   0x0
c001e2e4:	6a 00                	push   0x0
c001e2e6:	55                   	push   ebp
c001e2e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e2ea:	83 c4 10             	add    esp,0x10
c001e2ed:	eb 5b                	jmp    c001e34a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e2ef:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001e2f5:	75 19                	jne    c001e310 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001e2f7:	83 ec 0c             	sub    esp,0xc
c001e2fa:	68 70 02 00 00       	push   0x270
c001e2ff:	e8 b0 13 ff ff       	call   c000f6b4 <malloc>
c001e304:	89 04 24             	mov    DWORD PTR [esp],eax
c001e307:	89 c5                	mov    ebp,eax
c001e309:	e8 94 02 00 00       	call   c001e5a2 <IDE::IDE()>
c001e30e:	eb af                	jmp    c001e2bf <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001e310:	83 ec 0c             	sub    esp,0xc
c001e313:	68 58 01 00 00       	push   0x158
c001e318:	e8 97 13 ff ff       	call   c000f6b4 <malloc>
c001e31d:	89 c5                	mov    ebp,eax
c001e31f:	58                   	pop    eax
c001e320:	5a                   	pop    edx
c001e321:	68 ae 5a 02 c0       	push   0xc0025aae
c001e326:	55                   	push   ebp
c001e327:	e8 7e b9 fe ff       	call   c0009caa <DriverlessDevice::DriverlessDevice(char const*)>
c001e32c:	59                   	pop    ecx
c001e32d:	5f                   	pop    edi
c001e32e:	55                   	push   ebp
c001e32f:	53                   	push   ebx
c001e330:	e8 c1 b6 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e335:	83 ec 1c             	sub    esp,0x1c
c001e338:	b9 09 00 00 00       	mov    ecx,0x9
c001e33d:	89 e7                	mov    edi,esp
c001e33f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e341:	55                   	push   ebp
c001e342:	e8 f5 b5 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e347:	83 c4 30             	add    esp,0x30
c001e34a:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e350:	5b                   	pop    ebx
c001e351:	5e                   	pop    esi
c001e352:	5f                   	pop    edi
c001e353:	5d                   	pop    ebp
c001e354:	c3                   	ret    
c001e355:	90                   	nop

c001e356 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e356:	55                   	push   ebp
c001e357:	57                   	push   edi
c001e358:	56                   	push   esi
c001e359:	53                   	push   ebx
c001e35a:	83 ec 68             	sub    esp,0x68
c001e35d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e364:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e368:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e36c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e373:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e378:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e37c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e383:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e388:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e38c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e391:	6a 0c                	push   0xc
c001e393:	57                   	push   edi
c001e394:	53                   	push   ebx
c001e395:	56                   	push   esi
c001e396:	55                   	push   ebp
c001e397:	e8 c4 f7 ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e39c:	83 c4 20             	add    esp,0x20
c001e39f:	57                   	push   edi
c001e3a0:	53                   	push   ebx
c001e3a1:	56                   	push   esi
c001e3a2:	55                   	push   ebp
c001e3a3:	e8 ae f8 ff ff       	call   c001dc56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e3a8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e3ad:	57                   	push   edi
c001e3ae:	53                   	push   ebx
c001e3af:	56                   	push   esi
c001e3b0:	55                   	push   ebp
c001e3b1:	e8 36 f9 ff ff       	call   c001dcec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e3b6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e3ba:	83 c4 14             	add    esp,0x14
c001e3bd:	6a 3c                	push   0x3c
c001e3bf:	57                   	push   edi
c001e3c0:	53                   	push   ebx
c001e3c1:	56                   	push   esi
c001e3c2:	55                   	push   ebp
c001e3c3:	e8 98 f7 ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3c8:	0f b6 c4             	movzx  eax,ah
c001e3cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e3cf:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e3d3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e3d7:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001e3dc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e3e2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e3e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e3ec:	83 c4 20             	add    esp,0x20
c001e3ef:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e3f4:	74 30                	je     c001e426 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e3f6:	31 c0                	xor    eax,eax
c001e3f8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e3fc:	7e 28                	jle    c001e426 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e3fe:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e406:	39 cb                	cmp    ebx,ecx
c001e408:	75 19                	jne    c001e423 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e40a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e412:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e416:	75 0b                	jne    c001e423 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e418:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e41f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e423:	40                   	inc    eax
c001e424:	eb d2                	jmp    c001e3f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e426:	31 d2                	xor    edx,edx
c001e428:	83 ec 0c             	sub    esp,0xc
c001e42b:	57                   	push   edi
c001e42c:	53                   	push   ebx
c001e42d:	56                   	push   esi
c001e42e:	52                   	push   edx
c001e42f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e433:	55                   	push   ebp
c001e434:	e8 ff f8 ff ff       	call   c001dd38 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e439:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e43d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e441:	42                   	inc    edx
c001e442:	83 c4 20             	add    esp,0x20
c001e445:	83 fa 06             	cmp    edx,0x6
c001e448:	75 de                	jne    c001e428 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e44a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e44e:	83 ec 0c             	sub    esp,0xc
c001e451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e455:	c1 e2 08             	shl    edx,0x8
c001e458:	0f b6 c4             	movzx  eax,ah
c001e45b:	09 d0                	or     eax,edx
c001e45d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e462:	6a 02                	push   0x2
c001e464:	57                   	push   edi
c001e465:	53                   	push   ebx
c001e466:	56                   	push   esi
c001e467:	55                   	push   ebp
c001e468:	e8 f3 f6 ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e46d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e472:	83 c4 20             	add    esp,0x20
c001e475:	57                   	push   edi
c001e476:	53                   	push   ebx
c001e477:	56                   	push   esi
c001e478:	55                   	push   ebp
c001e479:	e8 22 f8 ff ff       	call   c001dca0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e47e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e482:	57                   	push   edi
c001e483:	53                   	push   ebx
c001e484:	56                   	push   esi
c001e485:	55                   	push   ebp
c001e486:	e8 7f f7 ff ff       	call   c001dc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e48b:	b9 09 00 00 00       	mov    ecx,0x9
c001e490:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e495:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e499:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e49d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e4a1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e4a5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e4a9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e4ad:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e4b1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e4b5:	83 ec 0c             	sub    esp,0xc
c001e4b8:	fc                   	cld    
c001e4b9:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e4bd:	89 e7                	mov    edi,esp
c001e4bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4c1:	55                   	push   ebp
c001e4c2:	e8 a9 fc ff ff       	call   c001e170 <PCI::foundDevice(PCIDeviceInfo)>
c001e4c7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e4cd:	5b                   	pop    ebx
c001e4ce:	5e                   	pop    esi
c001e4cf:	5f                   	pop    edi
c001e4d0:	5d                   	pop    ebp
c001e4d1:	c3                   	ret    

c001e4d2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e4d2:	55                   	push   ebp
c001e4d3:	57                   	push   edi
c001e4d4:	56                   	push   esi
c001e4d5:	53                   	push   ebx
c001e4d6:	83 ec 0c             	sub    esp,0xc
c001e4d9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e4de:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e4e3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e4e7:	6a 00                	push   0x0
c001e4e9:	56                   	push   esi
c001e4ea:	57                   	push   edi
c001e4eb:	55                   	push   ebp
c001e4ec:	e8 19 f7 ff ff       	call   c001dc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e4f1:	6a 00                	push   0x0
c001e4f3:	56                   	push   esi
c001e4f4:	57                   	push   edi
c001e4f5:	55                   	push   ebp
c001e4f6:	e8 5b fe ff ff       	call   c001e356 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e4fb:	83 c4 20             	add    esp,0x20
c001e4fe:	6a 00                	push   0x0
c001e500:	56                   	push   esi
c001e501:	57                   	push   edi
c001e502:	55                   	push   ebp
c001e503:	e8 26 f7 ff ff       	call   c001dc2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	a8 80                	test   al,0x80
c001e50d:	74 2d                	je     c001e53c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e50f:	bb 01 00 00 00       	mov    ebx,0x1
c001e514:	53                   	push   ebx
c001e515:	56                   	push   esi
c001e516:	57                   	push   edi
c001e517:	55                   	push   ebp
c001e518:	e8 ed f6 ff ff       	call   c001dc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e51d:	83 c4 10             	add    esp,0x10
c001e520:	0f b7 c0             	movzx  eax,ax
c001e523:	3d ff ff 00 00       	cmp    eax,0xffff
c001e528:	74 0c                	je     c001e536 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e52a:	53                   	push   ebx
c001e52b:	56                   	push   esi
c001e52c:	57                   	push   edi
c001e52d:	55                   	push   ebp
c001e52e:	e8 23 fe ff ff       	call   c001e356 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e533:	83 c4 10             	add    esp,0x10
c001e536:	43                   	inc    ebx
c001e537:	83 fb 08             	cmp    ebx,0x8
c001e53a:	75 d8                	jne    c001e514 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e53c:	83 c4 0c             	add    esp,0xc
c001e53f:	5b                   	pop    ebx
c001e540:	5e                   	pop    esi
c001e541:	5f                   	pop    edi
c001e542:	5d                   	pop    ebp
c001e543:	c3                   	ret    

c001e544 <PCI::detect()>:
c001e544:	56                   	push   esi
c001e545:	53                   	push   ebx
c001e546:	53                   	push   ebx
c001e547:	31 db                	xor    ebx,ebx
c001e549:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e54d:	6a 00                	push   0x0
c001e54f:	6a 00                	push   0x0
c001e551:	6a 00                	push   0x0
c001e553:	56                   	push   esi
c001e554:	e8 d5 f6 ff ff       	call   c001dc2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	a8 80                	test   al,0x80
c001e55e:	75 21                	jne    c001e581 <PCI::detect()+0x3d>
c001e560:	51                   	push   ecx
c001e561:	51                   	push   ecx
c001e562:	6a 00                	push   0x0
c001e564:	56                   	push   esi
c001e565:	e8 e2 fb ff ff       	call   c001e14c <PCI::checkBus(unsigned char)>
c001e56a:	83 c4 10             	add    esp,0x10
c001e56d:	eb 2a                	jmp    c001e599 <PCI::detect()+0x55>
c001e56f:	52                   	push   edx
c001e570:	52                   	push   edx
c001e571:	53                   	push   ebx
c001e572:	43                   	inc    ebx
c001e573:	56                   	push   esi
c001e574:	e8 d3 fb ff ff       	call   c001e14c <PCI::checkBus(unsigned char)>
c001e579:	83 c4 10             	add    esp,0x10
c001e57c:	83 fb 08             	cmp    ebx,0x8
c001e57f:	74 18                	je     c001e599 <PCI::detect()+0x55>
c001e581:	53                   	push   ebx
c001e582:	6a 00                	push   0x0
c001e584:	6a 00                	push   0x0
c001e586:	56                   	push   esi
c001e587:	e8 7e f6 ff ff       	call   c001dc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e58c:	83 c4 10             	add    esp,0x10
c001e58f:	0f b7 c0             	movzx  eax,ax
c001e592:	3d ff ff 00 00       	cmp    eax,0xffff
c001e597:	74 d6                	je     c001e56f <PCI::detect()+0x2b>
c001e599:	58                   	pop    eax
c001e59a:	5b                   	pop    ebx
c001e59b:	5e                   	pop    esi
c001e59c:	c3                   	ret    
c001e59d:	90                   	nop

c001e59e <IDE::close(int, int, void*)>:
c001e59e:	83 c8 ff             	or     eax,0xffffffff
c001e5a1:	c3                   	ret    

c001e5a2 <IDE::IDE()>:
c001e5a2:	83 ec 0c             	sub    esp,0xc
c001e5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a9:	83 ec 08             	sub    esp,0x8
c001e5ac:	68 58 5b 02 c0       	push   0xc0025b58
c001e5b1:	50                   	push   eax
c001e5b2:	e8 99 b7 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001e5b7:	83 c4 10             	add    esp,0x10
c001e5ba:	ba 84 5c 02 c0       	mov    edx,0xc0025c84
c001e5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c3:	89 10                	mov    DWORD PTR [eax],edx
c001e5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e5d0:	90                   	nop
c001e5d1:	83 c4 0c             	add    esp,0xc
c001e5d4:	c3                   	ret    
c001e5d5:	90                   	nop

c001e5d6 <IDE::prepareInterrupt(unsigned char)>:
c001e5d6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e5db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5df:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e5e7:	c3                   	ret    

c001e5e8 <selectDrive(unsigned char, unsigned char)>:
c001e5e8:	c3                   	ret    
c001e5e9:	90                   	nop

c001e5ea <IDE::getBase(unsigned char)>:
c001e5ea:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e5ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5f3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e5fb:	c3                   	ret    

c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e5fc:	55                   	push   ebp
c001e5fd:	57                   	push   edi
c001e5fe:	56                   	push   esi
c001e5ff:	53                   	push   ebx
c001e600:	83 ec 1c             	sub    esp,0x1c
c001e603:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e607:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e60b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e60f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e613:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e616:	80 f9 03             	cmp    cl,0x3
c001e619:	77 4f                	ja     c001e66a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e61b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e61f:	0f b6 f2             	movzx  esi,dl
c001e622:	0f b6 db             	movzx  ebx,bl
c001e625:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e628:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e62d:	80 ca 80             	or     dl,0x80
c001e630:	52                   	push   edx
c001e631:	6a 0c                	push   0xc
c001e633:	56                   	push   esi
c001e634:	57                   	push   edi
c001e635:	e8 c2 ff ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e63a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e63f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e643:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e647:	ee                   	out    dx,al
c001e648:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e64d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e651:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e655:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e65d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e661:	83 c4 2c             	add    esp,0x2c
c001e664:	5b                   	pop    ebx
c001e665:	5e                   	pop    esi
c001e666:	5f                   	pop    edi
c001e667:	5d                   	pop    ebp
c001e668:	eb 92                	jmp    c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e66a:	0f b6 cb             	movzx  ecx,bl
c001e66d:	83 f9 07             	cmp    ecx,0x7
c001e670:	77 12                	ja     c001e684 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e672:	0f b6 d2             	movzx  edx,dl
c001e675:	0f b6 db             	movzx  ebx,bl
c001e678:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001e680:	01 da                	add    edx,ebx
c001e682:	eb 2f                	jmp    c001e6b3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e684:	83 f9 0d             	cmp    ecx,0xd
c001e687:	77 13                	ja     c001e69c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e689:	0f b6 d2             	movzx  edx,dl
c001e68c:	0f b6 db             	movzx  ebx,bl
c001e68f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e696:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e69a:	eb 17                	jmp    c001e6b3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e69c:	83 f9 15             	cmp    ecx,0x15
c001e69f:	77 13                	ja     c001e6b4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e6a1:	0f b6 d2             	movzx  edx,dl
c001e6a4:	0f b6 db             	movzx  ebx,bl
c001e6a7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e6af:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e6b3:	ee                   	out    dx,al
c001e6b4:	83 c4 1c             	add    esp,0x1c
c001e6b7:	5b                   	pop    ebx
c001e6b8:	5e                   	pop    esi
c001e6b9:	5f                   	pop    edi
c001e6ba:	5d                   	pop    ebp
c001e6bb:	c3                   	ret    

c001e6bc <IDE::read(unsigned char, unsigned char)>:
c001e6bc:	57                   	push   edi
c001e6bd:	56                   	push   esi
c001e6be:	53                   	push   ebx
c001e6bf:	83 ec 10             	sub    esp,0x10
c001e6c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e6ca:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e6ce:	8d 42 f8             	lea    eax,[edx-0x8]
c001e6d1:	3c 03                	cmp    al,0x3
c001e6d3:	77 48                	ja     c001e71d <IDE::read(unsigned char, unsigned char)+0x61>
c001e6d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e6d9:	0f b6 f1             	movzx  esi,cl
c001e6dc:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001e6df:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001e6e4:	0c 80                	or     al,0x80
c001e6e6:	50                   	push   eax
c001e6e7:	6a 0c                	push   0xc
c001e6e9:	56                   	push   esi
c001e6ea:	53                   	push   ebx
c001e6eb:	e8 0c ff ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6f4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001e6f9:	0f b6 d2             	movzx  edx,dl
c001e6fc:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e700:	ec                   	in     al,dx
c001e701:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e705:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001e70a:	52                   	push   edx
c001e70b:	6a 0c                	push   0xc
c001e70d:	56                   	push   esi
c001e70e:	53                   	push   ebx
c001e70f:	e8 e8 fe ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e714:	83 c4 20             	add    esp,0x20
c001e717:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e71b:	eb 4c                	jmp    c001e769 <IDE::read(unsigned char, unsigned char)+0xad>
c001e71d:	0f b6 f2             	movzx  esi,dl
c001e720:	83 fe 07             	cmp    esi,0x7
c001e723:	77 12                	ja     c001e737 <IDE::read(unsigned char, unsigned char)+0x7b>
c001e725:	0f b6 c9             	movzx  ecx,cl
c001e728:	0f b6 d2             	movzx  edx,dl
c001e72b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001e733:	01 c2                	add    edx,eax
c001e735:	eb 31                	jmp    c001e768 <IDE::read(unsigned char, unsigned char)+0xac>
c001e737:	83 fe 0d             	cmp    esi,0xd
c001e73a:	77 13                	ja     c001e74f <IDE::read(unsigned char, unsigned char)+0x93>
c001e73c:	0f b6 c9             	movzx  ecx,cl
c001e73f:	0f b6 d2             	movzx  edx,dl
c001e742:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001e749:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e74d:	eb 19                	jmp    c001e768 <IDE::read(unsigned char, unsigned char)+0xac>
c001e74f:	31 c0                	xor    eax,eax
c001e751:	83 fe 15             	cmp    esi,0x15
c001e754:	77 13                	ja     c001e769 <IDE::read(unsigned char, unsigned char)+0xad>
c001e756:	0f b6 c9             	movzx  ecx,cl
c001e759:	0f b6 d2             	movzx  edx,dl
c001e75c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001e764:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e768:	ec                   	in     al,dx
c001e769:	83 c4 10             	add    esp,0x10
c001e76c:	5b                   	pop    ebx
c001e76d:	5e                   	pop    esi
c001e76e:	5f                   	pop    edi
c001e76f:	c3                   	ret    

c001e770 <IDE::waitInterrupt(unsigned char)>:
c001e770:	55                   	push   ebp
c001e771:	57                   	push   edi
c001e772:	56                   	push   esi
c001e773:	53                   	push   ebx
c001e774:	31 db                	xor    ebx,ebx
c001e776:	83 ec 0c             	sub    esp,0xc
c001e779:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e77d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e782:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e78a:	89 e8                	mov    eax,ebp
c001e78c:	84 c0                	test   al,al
c001e78e:	75 31                	jne    c001e7c1 <IDE::waitInterrupt(unsigned char)+0x51>
c001e790:	52                   	push   edx
c001e791:	6a 0c                	push   0xc
c001e793:	56                   	push   esi
c001e794:	57                   	push   edi
c001e795:	e8 22 ff ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001e79a:	83 c4 10             	add    esp,0x10
c001e79d:	a8 01                	test   al,0x1
c001e79f:	75 28                	jne    c001e7c9 <IDE::waitInterrupt(unsigned char)+0x59>
c001e7a1:	f6 c3 04             	test   bl,0x4
c001e7a4:	75 13                	jne    c001e7b9 <IDE::waitInterrupt(unsigned char)+0x49>
c001e7a6:	83 fb 32             	cmp    ebx,0x32
c001e7a9:	7e 0e                	jle    c001e7b9 <IDE::waitInterrupt(unsigned char)+0x49>
c001e7ab:	50                   	push   eax
c001e7ac:	50                   	push   eax
c001e7ad:	6a 00                	push   0x0
c001e7af:	6a 64                	push   0x64
c001e7b1:	e8 82 86 ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c001e7b6:	83 c4 10             	add    esp,0x10
c001e7b9:	83 fb 3c             	cmp    ebx,0x3c
c001e7bc:	74 0b                	je     c001e7c9 <IDE::waitInterrupt(unsigned char)+0x59>
c001e7be:	43                   	inc    ebx
c001e7bf:	eb c1                	jmp    c001e782 <IDE::waitInterrupt(unsigned char)+0x12>
c001e7c1:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e7c9:	83 c4 0c             	add    esp,0xc
c001e7cc:	89 e8                	mov    eax,ebp
c001e7ce:	5b                   	pop    ebx
c001e7cf:	5e                   	pop    esi
c001e7d0:	5f                   	pop    edi
c001e7d1:	5d                   	pop    ebp
c001e7d2:	c3                   	ret    

c001e7d3 <ideChannel0IRQHandler(regs*, void*)>:
c001e7d3:	83 ec 10             	sub    esp,0x10
c001e7d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7da:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e7e1:	6a 07                	push   0x7
c001e7e3:	6a 00                	push   0x0
c001e7e5:	50                   	push   eax
c001e7e6:	e8 d1 fe ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001e7eb:	83 c4 1c             	add    esp,0x1c
c001e7ee:	c3                   	ret    

c001e7ef <ideChannel1IRQHandler(regs*, void*)>:
c001e7ef:	83 ec 10             	sub    esp,0x10
c001e7f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7f6:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e7fd:	6a 07                	push   0x7
c001e7ff:	6a 01                	push   0x1
c001e801:	50                   	push   eax
c001e802:	e8 b5 fe ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001e807:	83 c4 1c             	add    esp,0x1c
c001e80a:	c3                   	ret    
c001e80b:	90                   	nop

c001e80c <IDE::enableIRQs(unsigned char, bool)>:
c001e80c:	57                   	push   edi
c001e80d:	b8 02 00 00 00       	mov    eax,0x2
c001e812:	56                   	push   esi
c001e813:	53                   	push   ebx
c001e814:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e819:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e81d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e821:	74 02                	je     c001e825 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e823:	31 c0                	xor    eax,eax
c001e825:	0f b6 db             	movzx  ebx,bl
c001e828:	bf 04 00 00 00       	mov    edi,0x4
c001e82d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e834:	50                   	push   eax
c001e835:	6a 0c                	push   0xc
c001e837:	53                   	push   ebx
c001e838:	56                   	push   esi
c001e839:	e8 be fd ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e83e:	83 c4 10             	add    esp,0x10
c001e841:	50                   	push   eax
c001e842:	6a 0c                	push   0xc
c001e844:	53                   	push   ebx
c001e845:	56                   	push   esi
c001e846:	e8 71 fe ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001e84b:	83 c4 10             	add    esp,0x10
c001e84e:	4f                   	dec    edi
c001e84f:	75 f0                	jne    c001e841 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e851:	5b                   	pop    ebx
c001e852:	5e                   	pop    esi
c001e853:	5f                   	pop    edi
c001e854:	c3                   	ret    
c001e855:	90                   	nop

c001e856 <IDE::open(int, int, void*)>:
c001e856:	55                   	push   ebp
c001e857:	57                   	push   edi
c001e858:	56                   	push   esi
c001e859:	53                   	push   ebx
c001e85a:	83 ec 1c             	sub    esp,0x1c
c001e85d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e861:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e868:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e871:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e87a:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e881:	0f 85 80 02 00 00    	jne    c001eb07 <IDE::open(int, int, void*)+0x2b1>
c001e887:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e88d:	a8 70                	test   al,0x70
c001e88f:	75 44                	jne    c001e8d5 <IDE::open(int, int, void*)+0x7f>
c001e891:	ba 20 84 00 00       	mov    edx,0x8420
c001e896:	0f a3 c2             	bt     edx,eax
c001e899:	73 3a                	jae    c001e8d5 <IDE::open(int, int, void*)+0x7f>
c001e89b:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e8a1:	83 ec 0c             	sub    esp,0xc
c001e8a4:	83 e0 fc             	and    eax,0xfffffffc
c001e8a7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e8ae:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e8b4:	83 e0 fc             	and    eax,0xfffffffc
c001e8b7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e8be:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e8c4:	83 e0 fc             	and    eax,0xfffffffc
c001e8c7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e8ce:	68 7d 31 02 c0       	push   0xc002317d
c001e8d3:	eb 60                	jmp    c001e935 <IDE::open(int, int, void*)+0xdf>
c001e8d5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e8df:	be 64 00 00 00       	mov    esi,0x64
c001e8e4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e8ee:	57                   	push   edi
c001e8ef:	57                   	push   edi
c001e8f0:	68 70 5b 02 c0       	push   0xc0025b70
c001e8f5:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e8f9:	57                   	push   edi
c001e8fa:	e8 51 1d fe ff       	call   c0000650 <strcpy>
c001e8ff:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e906:	31 d2                	xor    edx,edx
c001e908:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e90b:	89 c8                	mov    eax,ecx
c001e90d:	f7 f6                	div    esi
c001e90f:	be 0a 00 00 00       	mov    esi,0xa
c001e914:	31 d2                	xor    edx,edx
c001e916:	83 c0 30             	add    eax,0x30
c001e919:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e91d:	89 c8                	mov    eax,ecx
c001e91f:	f7 f6                	div    esi
c001e921:	89 d1                	mov    ecx,edx
c001e923:	31 d2                	xor    edx,edx
c001e925:	f7 f6                	div    esi
c001e927:	83 c1 30             	add    ecx,0x30
c001e92a:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e92e:	83 c2 30             	add    edx,0x30
c001e931:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e935:	e8 d7 e8 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001e93a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e941:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e946:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e94d:	83 c4 10             	add    esp,0x10
c001e950:	89 fa                	mov    edx,edi
c001e952:	c1 e1 10             	shl    ecx,0x10
c001e955:	c1 e0 0b             	shl    eax,0xb
c001e958:	09 c1                	or     ecx,eax
c001e95a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e961:	c1 e0 08             	shl    eax,0x8
c001e964:	09 c1                	or     ecx,eax
c001e966:	89 c8                	mov    eax,ecx
c001e968:	0d 08 00 00 80       	or     eax,0x80000008
c001e96d:	ef                   	out    dx,eax
c001e96e:	be fc 0c 00 00       	mov    esi,0xcfc
c001e973:	89 f2                	mov    edx,esi
c001e975:	ed                   	in     eax,dx
c001e976:	c1 e8 10             	shr    eax,0x10
c001e979:	3d ff ff 00 00       	cmp    eax,0xffff
c001e97e:	0f 84 e1 00 00 00    	je     c001ea65 <IDE::open(int, int, void*)+0x20f>
c001e984:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e98a:	89 fa                	mov    edx,edi
c001e98c:	89 c8                	mov    eax,ecx
c001e98e:	ef                   	out    dx,eax
c001e98f:	b0 fe                	mov    al,0xfe
c001e991:	89 f2                	mov    edx,esi
c001e993:	ee                   	out    dx,al
c001e994:	89 c8                	mov    eax,ecx
c001e996:	89 fa                	mov    edx,edi
c001e998:	ef                   	out    dx,eax
c001e999:	89 f2                	mov    edx,esi
c001e99b:	ed                   	in     eax,dx
c001e99c:	3c fe                	cmp    al,0xfe
c001e99e:	0f 85 83 00 00 00    	jne    c001ea27 <IDE::open(int, int, void*)+0x1d1>
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	68 b3 31 02 c0       	push   0xc00231b3
c001e9ac:	e8 60 e8 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001e9b1:	c7 04 24 76 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b76
c001e9b8:	e8 a9 85 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e9bd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e9c7:	c7 04 24 a8 34 02 c0 	mov    DWORD PTR [esp],0xc00234a8
c001e9ce:	e8 3e e8 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001e9d3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e9da:	89 fa                	mov    edx,edi
c001e9dc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e9e3:	c1 e1 10             	shl    ecx,0x10
c001e9e6:	c1 e0 08             	shl    eax,0x8
c001e9e9:	09 c1                	or     ecx,eax
c001e9eb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e9f2:	c1 e0 0b             	shl    eax,0xb
c001e9f5:	09 c1                	or     ecx,eax
c001e9f7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e9fd:	89 c8                	mov    eax,ecx
c001e9ff:	ef                   	out    dx,eax
c001ea00:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001ea06:	89 f2                	mov    edx,esi
c001ea08:	89 e8                	mov    eax,ebp
c001ea0a:	ee                   	out    dx,al
c001ea0b:	89 c8                	mov    eax,ecx
c001ea0d:	89 fa                	mov    edx,edi
c001ea0f:	ef                   	out    dx,eax
c001ea10:	89 f2                	mov    edx,esi
c001ea12:	ed                   	in     eax,dx
c001ea13:	0f b6 c0             	movzx  eax,al
c001ea16:	83 c4 10             	add    esp,0x10
c001ea19:	39 e8                	cmp    eax,ebp
c001ea1b:	74 58                	je     c001ea75 <IDE::open(int, int, void*)+0x21f>
c001ea1d:	83 ec 0c             	sub    esp,0xc
c001ea20:	68 8b 5b 02 c0       	push   0xc0025b8b
c001ea25:	eb 46                	jmp    c001ea6d <IDE::open(int, int, void*)+0x217>
c001ea27:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ea30:	75 29                	jne    c001ea5b <IDE::open(int, int, void*)+0x205>
c001ea32:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ea39:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ea3e:	74 05                	je     c001ea45 <IDE::open(int, int, void*)+0x1ef>
c001ea40:	83 c0 80             	add    eax,0xffffff80
c001ea43:	75 16                	jne    c001ea5b <IDE::open(int, int, void*)+0x205>
c001ea45:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ea4c:	83 ec 0c             	sub    esp,0xc
c001ea4f:	68 27 44 02 c0       	push   0xc0024427
c001ea54:	e8 b8 e7 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ea59:	eb 17                	jmp    c001ea72 <IDE::open(int, int, void*)+0x21c>
c001ea5b:	83 ec 0c             	sub    esp,0xc
c001ea5e:	68 93 5b 02 c0       	push   0xc0025b93
c001ea63:	eb 08                	jmp    c001ea6d <IDE::open(int, int, void*)+0x217>
c001ea65:	83 ec 0c             	sub    esp,0xc
c001ea68:	68 c4 5b 02 c0       	push   0xc0025bc4
c001ea6d:	e8 9e 10 ff ff       	call   c000fb10 <KePanic(char const*)>
c001ea72:	83 c4 10             	add    esp,0x10
c001ea75:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ea7c:	0f 84 bf 00 00 00    	je     c001eb41 <IDE::open(int, int, void*)+0x2eb>
c001ea82:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	83 e0 fc             	and    eax,0xfffffffc
c001ea8e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ea95:	83 c0 08             	add    eax,0x8
c001ea98:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ea9f:	68 ee 5b 02 c0       	push   0xc0025bee
c001eaa4:	e8 bd 84 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001eaa9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001eab0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eab7:	50                   	push   eax
c001eab8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eabf:	50                   	push   eax
c001eac0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eac7:	50                   	push   eax
c001eac8:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001eace:	e8 8d f0 ff ff       	call   c001db60 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ead3:	83 c4 18             	add    esp,0x18
c001ead6:	83 c8 07             	or     eax,0x7
c001ead9:	0f b7 c0             	movzx  eax,ax
c001eadc:	50                   	push   eax
c001eadd:	6a 04                	push   0x4
c001eadf:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eae6:	50                   	push   eax
c001eae7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eaee:	50                   	push   eax
c001eaef:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eaf6:	50                   	push   eax
c001eaf7:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001eafd:	e8 9a f2 ff ff       	call   c001dd9c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001eb02:	83 c4 20             	add    esp,0x20
c001eb05:	eb 3a                	jmp    c001eb41 <IDE::open(int, int, void*)+0x2eb>
c001eb07:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eb0e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001eb14:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eb1b:	05 06 02 00 00       	add    eax,0x206
c001eb20:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb27:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001eb2e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eb35:	05 06 02 00 00       	add    eax,0x206
c001eb3a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eb41:	83 ec 0c             	sub    esp,0xc
c001eb44:	68 60 3a 02 c0       	push   0xc0023a60
c001eb49:	e8 c3 e6 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eb4e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eb54:	83 c4 10             	add    esp,0x10
c001eb57:	89 c2                	mov    edx,eax
c001eb59:	83 e2 0f             	and    edx,0xf
c001eb5c:	83 fa 08             	cmp    edx,0x8
c001eb5f:	75 0a                	jne    c001eb6b <IDE::open(int, int, void*)+0x315>
c001eb61:	83 e8 02             	sub    eax,0x2
c001eb64:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb6b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001eb71:	89 c2                	mov    edx,eax
c001eb73:	83 e2 0f             	and    edx,0xf
c001eb76:	83 fa 08             	cmp    edx,0x8
c001eb79:	75 0a                	jne    c001eb85 <IDE::open(int, int, void*)+0x32f>
c001eb7b:	83 e8 02             	sub    eax,0x2
c001eb7e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eb85:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001eb8c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001eb93:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eb96:	89 d0                	mov    eax,edx
c001eb98:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eb9c:	8d 7a 01             	lea    edi,[edx+0x1]
c001eb9f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001eba3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001eba7:	83 e1 3f             	and    ecx,0x3f
c001ebaa:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ebae:	89 f9                	mov    ecx,edi
c001ebb0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ebb7:	8d 78 02             	lea    edi,[eax+0x2]
c001ebba:	0f b6 c9             	movzx  ecx,cl
c001ebbd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ebc0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ebc4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ebc8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ebcc:	83 e2 3f             	and    edx,0x3f
c001ebcf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ebd3:	89 f9                	mov    ecx,edi
c001ebd5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ebdb:	8d 78 03             	lea    edi,[eax+0x3]
c001ebde:	0f b6 d1             	movzx  edx,cl
c001ebe1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ebe4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ebe8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ebec:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ebf0:	83 e1 3f             	and    ecx,0x3f
c001ebf3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ebf7:	89 fa                	mov    edx,edi
c001ebf9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ebff:	8d 78 04             	lea    edi,[eax+0x4]
c001ec02:	0f b6 ca             	movzx  ecx,dl
c001ec05:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ec08:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ec0c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ec10:	89 fa                	mov    edx,edi
c001ec12:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ec18:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ec1c:	83 e2 3f             	and    edx,0x3f
c001ec1f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ec23:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ec2a:	66 85 f6             	test   si,si
c001ec2d:	74 24                	je     c001ec53 <IDE::open(int, int, void*)+0x3fd>
c001ec2f:	89 f9                	mov    ecx,edi
c001ec31:	83 c0 05             	add    eax,0x5
c001ec34:	0f b6 d1             	movzx  edx,cl
c001ec37:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec3a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec3e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ec42:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ec48:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001ec4c:	83 e0 3f             	and    eax,0x3f
c001ec4f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001ec53:	83 ec 0c             	sub    esp,0xc
c001ec56:	68 06 5c 02 c0       	push   0xc0025c06
c001ec5b:	e8 b1 e5 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ec60:	58                   	pop    eax
c001ec61:	5a                   	pop    edx
c001ec62:	6a 00                	push   0x0
c001ec64:	53                   	push   ebx
c001ec65:	e8 6c f9 ff ff       	call   c001e5d6 <IDE::prepareInterrupt(unsigned char)>
c001ec6a:	59                   	pop    ecx
c001ec6b:	5e                   	pop    esi
c001ec6c:	6a 01                	push   0x1
c001ec6e:	53                   	push   ebx
c001ec6f:	e8 62 f9 ff ff       	call   c001e5d6 <IDE::prepareInterrupt(unsigned char)>
c001ec74:	c7 04 24 88 54 02 c0 	mov    DWORD PTR [esp],0xc0025488
c001ec7b:	e8 91 e5 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ec80:	83 c4 0c             	add    esp,0xc
c001ec83:	6a 00                	push   0x0
c001ec85:	6a 00                	push   0x0
c001ec87:	53                   	push   ebx
c001ec88:	e8 7f fb ff ff       	call   c001e80c <IDE::enableIRQs(unsigned char, bool)>
c001ec8d:	83 c4 0c             	add    esp,0xc
c001ec90:	6a 00                	push   0x0
c001ec92:	6a 01                	push   0x1
c001ec94:	53                   	push   ebx
c001ec95:	e8 72 fb ff ff       	call   c001e80c <IDE::enableIRQs(unsigned char, bool)>
c001ec9a:	c7 04 24 08 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c08
c001eca1:	e8 6b e5 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eca6:	83 c4 10             	add    esp,0x10
c001eca9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ecb0:	74 3c                	je     c001ecee <IDE::open(int, int, void*)+0x498>
c001ecb2:	83 ec 0c             	sub    esp,0xc
c001ecb5:	53                   	push   ebx
c001ecb6:	6a 01                	push   0x1
c001ecb8:	68 d3 e7 01 c0       	push   0xc001e7d3
c001ecbd:	6a 0e                	push   0xe
c001ecbf:	53                   	push   ebx
c001ecc0:	e8 dd ac fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecc5:	83 c4 14             	add    esp,0x14
c001ecc8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ecce:	53                   	push   ebx
c001eccf:	6a 01                	push   0x1
c001ecd1:	68 ef e7 01 c0       	push   0xc001e7ef
c001ecd6:	6a 0f                	push   0xf
c001ecd8:	53                   	push   ebx
c001ecd9:	e8 c4 ac fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecde:	83 c4 14             	add    esp,0x14
c001ece1:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ece7:	68 ae 36 02 c0       	push   0xc00236ae
c001ecec:	eb 40                	jmp    c001ed2e <IDE::open(int, int, void*)+0x4d8>
c001ecee:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ecf8:	83 ec 0c             	sub    esp,0xc
c001ecfb:	53                   	push   ebx
c001ecfc:	6a 00                	push   0x0
c001ecfe:	68 d3 e7 01 c0       	push   0xc001e7d3
c001ed03:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ed09:	53                   	push   ebx
c001ed0a:	e8 93 ac fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed0f:	83 c4 14             	add    esp,0x14
c001ed12:	53                   	push   ebx
c001ed13:	6a 00                	push   0x0
c001ed15:	68 ef e7 01 c0       	push   0xc001e7ef
c001ed1a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ed20:	53                   	push   ebx
c001ed21:	e8 7c ac fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed26:	83 c4 14             	add    esp,0x14
c001ed29:	68 16 44 02 c0       	push   0xc0024416
c001ed2e:	e8 de e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ed33:	83 c4 10             	add    esp,0x10
c001ed36:	83 ec 0c             	sub    esp,0xc
c001ed39:	68 0a 5c 02 c0       	push   0xc0025c0a
c001ed3e:	e8 ce e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ed43:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ed45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed48:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ed4b:	c7 04 24 99 48 02 c0 	mov    DWORD PTR [esp],0xc0024899
c001ed52:	e8 ba e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ed57:	83 c4 0c             	add    esp,0xc
c001ed5a:	6a 07                	push   0x7
c001ed5c:	6a 00                	push   0x0
c001ed5e:	53                   	push   ebx
c001ed5f:	e8 58 f9 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ed64:	83 c4 0c             	add    esp,0xc
c001ed67:	6a 07                	push   0x7
c001ed69:	6a 01                	push   0x1
c001ed6b:	53                   	push   ebx
c001ed6c:	e8 4b f9 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ed71:	c7 04 24 20 41 02 c0 	mov    DWORD PTR [esp],0xc0024120
c001ed78:	e8 94 e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ed7d:	83 c4 0c             	add    esp,0xc
c001ed80:	6a 01                	push   0x1
c001ed82:	6a 00                	push   0x0
c001ed84:	53                   	push   ebx
c001ed85:	e8 82 fa ff ff       	call   c001e80c <IDE::enableIRQs(unsigned char, bool)>
c001ed8a:	83 c4 0c             	add    esp,0xc
c001ed8d:	6a 01                	push   0x1
c001ed8f:	6a 01                	push   0x1
c001ed91:	53                   	push   ebx
c001ed92:	e8 75 fa ff ff       	call   c001e80c <IDE::enableIRQs(unsigned char, bool)>
c001ed97:	c7 04 24 0d 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c0d
c001ed9e:	e8 6e e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eda3:	83 c4 2c             	add    esp,0x2c
c001eda6:	31 c0                	xor    eax,eax
c001eda8:	5b                   	pop    ebx
c001eda9:	5e                   	pop    esi
c001edaa:	5f                   	pop    edi
c001edab:	5d                   	pop    ebp
c001edac:	c3                   	ret    
c001edad:	90                   	nop

c001edae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001edae:	55                   	push   ebp
c001edaf:	57                   	push   edi
c001edb0:	56                   	push   esi
c001edb1:	53                   	push   ebx
c001edb2:	83 ec 1c             	sub    esp,0x1c
c001edb5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001edb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001edbd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001edc1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001edc5:	8d 42 f8             	lea    eax,[edx-0x8]
c001edc8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001edcc:	3c 03                	cmp    al,0x3
c001edce:	77 5a                	ja     c001ee2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001edd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edd4:	0f b6 db             	movzx  ebx,bl
c001edd7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001eddb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001edde:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ede3:	0c 80                	or     al,0x80
c001ede5:	50                   	push   eax
c001ede6:	6a 0c                	push   0xc
c001ede8:	53                   	push   ebx
c001ede9:	56                   	push   esi
c001edea:	e8 0d f8 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edf3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001edf8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001edfc:	0f b6 d2             	movzx  edx,dl
c001edff:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ee03:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ee05:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ee0a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ee0e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ee12:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ee1a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ee1e:	83 c4 2c             	add    esp,0x2c
c001ee21:	5b                   	pop    ebx
c001ee22:	5e                   	pop    esi
c001ee23:	5f                   	pop    edi
c001ee24:	5d                   	pop    ebp
c001ee25:	e9 d2 f7 ff ff       	jmp    c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee2a:	0f b6 c2             	movzx  eax,dl
c001ee2d:	83 f8 07             	cmp    eax,0x7
c001ee30:	77 12                	ja     c001ee44 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001ee32:	0f b6 db             	movzx  ebx,bl
c001ee35:	0f b6 c2             	movzx  eax,dl
c001ee38:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ee40:	01 c2                	add    edx,eax
c001ee42:	eb 2f                	jmp    c001ee73 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ee44:	83 f8 0d             	cmp    eax,0xd
c001ee47:	77 13                	ja     c001ee5c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ee49:	0f b6 db             	movzx  ebx,bl
c001ee4c:	0f b6 d2             	movzx  edx,dl
c001ee4f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ee56:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ee5a:	eb 17                	jmp    c001ee73 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ee5c:	83 f8 15             	cmp    eax,0x15
c001ee5f:	77 14                	ja     c001ee75 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ee61:	0f b6 db             	movzx  ebx,bl
c001ee64:	0f b6 d2             	movzx  edx,dl
c001ee67:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ee6f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ee73:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ee75:	83 c4 1c             	add    esp,0x1c
c001ee78:	5b                   	pop    ebx
c001ee79:	5e                   	pop    esi
c001ee7a:	5f                   	pop    edi
c001ee7b:	5d                   	pop    ebp
c001ee7c:	c3                   	ret    
c001ee7d:	90                   	nop

c001ee7e <IDE::detect()>:
c001ee7e:	55                   	push   ebp
c001ee7f:	57                   	push   edi
c001ee80:	56                   	push   esi
c001ee81:	53                   	push   ebx
c001ee82:	81 ec 28 02 00 00    	sub    esp,0x228
c001ee88:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ee8f:	68 0f 5c 02 c0       	push   0xc0025c0f
c001ee94:	e8 78 e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ee99:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001ee9f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001eea3:	83 c4 10             	add    esp,0x10
c001eea6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001eeab:	0f 85 26 04 00 00    	jne    c001f2d7 <IDE::detect()+0x459>
c001eeb1:	83 ec 0c             	sub    esp,0xc
c001eeb4:	31 f6                	xor    esi,esi
c001eeb6:	68 12 5c 02 c0       	push   0xc0025c12
c001eebb:	31 ff                	xor    edi,edi
c001eebd:	e8 4f e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eec2:	83 c4 10             	add    esp,0x10
c001eec5:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001eecc:	83 ec 0c             	sub    esp,0xc
c001eecf:	68 15 5c 02 c0       	push   0xc0025c15
c001eed4:	e8 38 e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eee3:	83 ec 0c             	sub    esp,0xc
c001eee6:	31 ed                	xor    ebp,ebp
c001eee8:	68 18 5c 02 c0       	push   0xc0025c18
c001eeed:	e8 1f e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eef2:	89 f8                	mov    eax,edi
c001eef4:	c1 e0 06             	shl    eax,0x6
c001eef7:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eeff:	c7 04 24 1b 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c1b
c001ef06:	e8 06 e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ef0b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ef0f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ef13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef17:	c1 e0 04             	shl    eax,0x4
c001ef1a:	83 c8 a0             	or     eax,0xffffffa0
c001ef1d:	0f b6 c0             	movzx  eax,al
c001ef20:	50                   	push   eax
c001ef21:	6a 06                	push   0x6
c001ef23:	56                   	push   esi
c001ef24:	53                   	push   ebx
c001ef25:	e8 d2 f6 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef2a:	83 c4 1c             	add    esp,0x1c
c001ef2d:	6a 0c                	push   0xc
c001ef2f:	56                   	push   esi
c001ef30:	53                   	push   ebx
c001ef31:	e8 86 f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ef36:	83 c4 0c             	add    esp,0xc
c001ef39:	6a 0c                	push   0xc
c001ef3b:	56                   	push   esi
c001ef3c:	53                   	push   ebx
c001ef3d:	e8 7a f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ef42:	83 c4 0c             	add    esp,0xc
c001ef45:	6a 0c                	push   0xc
c001ef47:	56                   	push   esi
c001ef48:	53                   	push   ebx
c001ef49:	e8 6e f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ef4e:	83 c4 0c             	add    esp,0xc
c001ef51:	6a 0c                	push   0xc
c001ef53:	56                   	push   esi
c001ef54:	53                   	push   ebx
c001ef55:	e8 62 f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ef5a:	c7 04 24 1e 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c1e
c001ef61:	e8 ab e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ef66:	68 ec 00 00 00       	push   0xec
c001ef6b:	6a 07                	push   0x7
c001ef6d:	56                   	push   esi
c001ef6e:	53                   	push   ebx
c001ef6f:	e8 88 f6 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef74:	83 c4 1c             	add    esp,0x1c
c001ef77:	6a 0c                	push   0xc
c001ef79:	56                   	push   esi
c001ef7a:	53                   	push   ebx
c001ef7b:	e8 3c f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ef80:	83 c4 0c             	add    esp,0xc
c001ef83:	6a 0c                	push   0xc
c001ef85:	56                   	push   esi
c001ef86:	53                   	push   ebx
c001ef87:	e8 30 f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ef8c:	83 c4 0c             	add    esp,0xc
c001ef8f:	6a 0c                	push   0xc
c001ef91:	56                   	push   esi
c001ef92:	53                   	push   ebx
c001ef93:	e8 24 f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ef98:	83 c4 0c             	add    esp,0xc
c001ef9b:	6a 0c                	push   0xc
c001ef9d:	56                   	push   esi
c001ef9e:	53                   	push   ebx
c001ef9f:	e8 18 f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001efa4:	c7 04 24 21 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c21
c001efab:	e8 61 e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001efb0:	83 c4 0c             	add    esp,0xc
c001efb3:	6a 0c                	push   0xc
c001efb5:	56                   	push   esi
c001efb6:	53                   	push   ebx
c001efb7:	e8 00 f7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001efbc:	83 c4 10             	add    esp,0x10
c001efbf:	84 c0                	test   al,al
c001efc1:	75 1f                	jne    c001efe2 <IDE::detect()+0x164>
c001efc3:	83 ec 0c             	sub    esp,0xc
c001efc6:	68 24 5c 02 c0       	push   0xc0025c24
c001efcb:	e8 41 e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001efd0:	e9 e0 02 00 00       	jmp    c001f2b5 <IDE::detect()+0x437>
c001efd5:	a8 80                	test   al,0x80
c001efd7:	74 21                	je     c001effa <IDE::detect()+0x17c>
c001efd9:	45                   	inc    ebp
c001efda:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001efe0:	7f 1e                	jg     c001f000 <IDE::detect()+0x182>
c001efe2:	50                   	push   eax
c001efe3:	6a 0c                	push   0xc
c001efe5:	56                   	push   esi
c001efe6:	53                   	push   ebx
c001efe7:	e8 d0 f6 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001efec:	83 c4 10             	add    esp,0x10
c001efef:	a8 01                	test   al,0x1
c001eff1:	74 e2                	je     c001efd5 <IDE::detect()+0x157>
c001eff3:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001eff8:	eb 23                	jmp    c001f01d <IDE::detect()+0x19f>
c001effa:	a8 08                	test   al,0x8
c001effc:	74 db                	je     c001efd9 <IDE::detect()+0x15b>
c001effe:	eb 18                	jmp    c001f018 <IDE::detect()+0x19a>
c001f000:	50                   	push   eax
c001f001:	50                   	push   eax
c001f002:	6a 00                	push   0x0
c001f004:	6a 32                	push   0x32
c001f006:	e8 2d 7e ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f014:	75 cc                	jne    c001efe2 <IDE::detect()+0x164>
c001f016:	eb db                	jmp    c001eff3 <IDE::detect()+0x175>
c001f018:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f01d:	83 ec 0c             	sub    esp,0xc
c001f020:	68 27 5c 02 c0       	push   0xc0025c27
c001f025:	e8 e7 e1 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f02a:	83 c4 10             	add    esp,0x10
c001f02d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f032:	74 56                	je     c001f08a <IDE::detect()+0x20c>
c001f034:	51                   	push   ecx
c001f035:	6a 04                	push   0x4
c001f037:	56                   	push   esi
c001f038:	53                   	push   ebx
c001f039:	e8 7e f6 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001f03e:	83 c4 0c             	add    esp,0xc
c001f041:	6a 05                	push   0x5
c001f043:	56                   	push   esi
c001f044:	53                   	push   ebx
c001f045:	89 c5                	mov    ebp,eax
c001f047:	e8 70 f6 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001f04c:	89 e9                	mov    ecx,ebp
c001f04e:	83 c4 10             	add    esp,0x10
c001f051:	0f b6 e9             	movzx  ebp,cl
c001f054:	83 fd 14             	cmp    ebp,0x14
c001f057:	75 04                	jne    c001f05d <IDE::detect()+0x1df>
c001f059:	3c eb                	cmp    al,0xeb
c001f05b:	74 11                	je     c001f06e <IDE::detect()+0x1f0>
c001f05d:	83 fd 69             	cmp    ebp,0x69
c001f060:	0f 85 52 02 00 00    	jne    c001f2b8 <IDE::detect()+0x43a>
c001f066:	3c 96                	cmp    al,0x96
c001f068:	0f 85 4a 02 00 00    	jne    c001f2b8 <IDE::detect()+0x43a>
c001f06e:	68 a1 00 00 00       	push   0xa1
c001f073:	6a 07                	push   0x7
c001f075:	56                   	push   esi
c001f076:	53                   	push   ebx
c001f077:	e8 80 f5 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f07c:	58                   	pop    eax
c001f07d:	5a                   	pop    edx
c001f07e:	6a 00                	push   0x0
c001f080:	6a 0a                	push   0xa
c001f082:	e8 b1 7d ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c001f087:	83 c4 10             	add    esp,0x10
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	89 fd                	mov    ebp,edi
c001f08f:	68 2a 5c 02 c0       	push   0xc0025c2a
c001f094:	e8 78 e1 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f099:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f09d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f0a4:	c1 e5 06             	shl    ebp,0x6
c001f0a7:	52                   	push   edx
c001f0a8:	01 dd                	add    ebp,ebx
c001f0aa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f0ae:	6a 00                	push   0x0
c001f0b0:	56                   	push   esi
c001f0b1:	53                   	push   ebx
c001f0b2:	e8 f7 fc ff ff       	call   c001edae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f0b7:	83 c4 14             	add    esp,0x14
c001f0ba:	68 2e 5c 02 c0       	push   0xc0025c2e
c001f0bf:	e8 4d e1 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f0c4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f0c9:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f0d0:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f0d7:	89 f0                	mov    eax,esi
c001f0d9:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f0df:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f0e3:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f0e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0ed:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f0f4:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f0fc:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f103:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f10b:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f111:	c7 04 24 32 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c32
c001f118:	e8 f4 e0 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f11d:	83 c4 10             	add    esp,0x10
c001f120:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f127:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f12b:	74 09                	je     c001f136 <IDE::detect()+0x2b8>
c001f12d:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f134:	eb 07                	jmp    c001f13d <IDE::detect()+0x2bf>
c001f136:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f13d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f141:	89 f8                	mov    eax,edi
c001f143:	83 ec 0c             	sub    esp,0xc
c001f146:	c1 e0 06             	shl    eax,0x6
c001f149:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f14c:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f152:	68 36 5c 02 c0       	push   0xc0025c36
c001f157:	e8 b5 e0 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f15c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f160:	89 e8                	mov    eax,ebp
c001f162:	83 c4 10             	add    esp,0x10
c001f165:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f168:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f16b:	83 c2 02             	add    edx,0x2
c001f16e:	83 c0 02             	add    eax,0x2
c001f171:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f177:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f17a:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f180:	39 d5                	cmp    ebp,edx
c001f182:	75 e4                	jne    c001f168 <IDE::detect()+0x2ea>
c001f184:	89 f8                	mov    eax,edi
c001f186:	c1 e0 06             	shl    eax,0x6
c001f189:	01 d8                	add    eax,ebx
c001f18b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f192:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f199:	c1 ea 09             	shr    edx,0x9
c001f19c:	83 e2 01             	and    edx,0x1
c001f19f:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f1a6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f1ac:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f1b0:	74 0c                	je     c001f1be <IDE::detect()+0x340>
c001f1b2:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f1bb:	0f 95 c2             	setne  dl
c001f1be:	89 fd                	mov    ebp,edi
c001f1c0:	83 ec 0c             	sub    esp,0xc
c001f1c3:	c1 e5 06             	shl    ebp,0x6
c001f1c6:	01 dd                	add    ebp,ebx
c001f1c8:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f1ce:	68 3a 5c 02 c0       	push   0xc0025c3a
c001f1d3:	e8 39 e0 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f1d8:	83 c4 10             	add    esp,0x10
c001f1db:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f1e0:	75 66                	jne    c001f248 <IDE::detect()+0x3ca>
c001f1e2:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f1e9:	0f 84 b8 00 00 00    	je     c001f2a7 <IDE::detect()+0x429>
c001f1ef:	83 ec 0c             	sub    esp,0xc
c001f1f2:	68 3e 5c 02 c0       	push   0xc0025c3e
c001f1f7:	e8 15 e0 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f1fc:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f203:	e8 ac 04 ff ff       	call   c000f6b4 <malloc>
c001f208:	89 04 24             	mov    DWORD PTR [esp],eax
c001f20b:	89 c5                	mov    ebp,eax
c001f20d:	e8 44 05 00 00       	call   c001f756 <ATA::ATA()>
c001f212:	c7 04 24 42 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c42
c001f219:	e8 f3 df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f21e:	59                   	pop    ecx
c001f21f:	58                   	pop    eax
c001f220:	55                   	push   ebp
c001f221:	53                   	push   ebx
c001f222:	e8 cf a7 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f227:	c7 04 24 47 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c47
c001f22e:	e8 de df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f233:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f236:	53                   	push   ebx
c001f237:	57                   	push   edi
c001f238:	6a 00                	push   0x0
c001f23a:	55                   	push   ebp
c001f23b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f23e:	83 c4 14             	add    esp,0x14
c001f241:	68 4c 5c 02 c0       	push   0xc0025c4c
c001f246:	eb 57                	jmp    c001f29f <IDE::detect()+0x421>
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	68 51 5c 02 c0       	push   0xc0025c51
c001f250:	e8 bc df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f255:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f25c:	e8 53 04 ff ff       	call   c000f6b4 <malloc>
c001f261:	89 04 24             	mov    DWORD PTR [esp],eax
c001f264:	89 c5                	mov    ebp,eax
c001f266:	e8 b1 0c 00 00       	call   c001ff1c <ATAPI::ATAPI()>
c001f26b:	c7 04 24 57 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c57
c001f272:	e8 9a df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f277:	58                   	pop    eax
c001f278:	5a                   	pop    edx
c001f279:	55                   	push   ebp
c001f27a:	53                   	push   ebx
c001f27b:	e8 76 a7 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f280:	c7 04 24 5e 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c5e
c001f287:	e8 85 df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f28c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f28f:	53                   	push   ebx
c001f290:	57                   	push   edi
c001f291:	6a 00                	push   0x0
c001f293:	55                   	push   ebp
c001f294:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f297:	83 c4 14             	add    esp,0x14
c001f29a:	68 65 5c 02 c0       	push   0xc0025c65
c001f29f:	e8 6d df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f2a4:	83 c4 10             	add    esp,0x10
c001f2a7:	83 ec 0c             	sub    esp,0xc
c001f2aa:	47                   	inc    edi
c001f2ab:	68 6c 5c 02 c0       	push   0xc0025c6c
c001f2b0:	e8 5c df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f2bc:	74 0c                	je     c001f2ca <IDE::detect()+0x44c>
c001f2be:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f2c5:	e9 19 fc ff ff       	jmp    c001eee3 <IDE::detect()+0x65>
c001f2ca:	4e                   	dec    esi
c001f2cb:	74 0a                	je     c001f2d7 <IDE::detect()+0x459>
c001f2cd:	be 01 00 00 00       	mov    esi,0x1
c001f2d2:	e9 f5 fb ff ff       	jmp    c001eecc <IDE::detect()+0x4e>
c001f2d7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f2dd:	5b                   	pop    ebx
c001f2de:	5e                   	pop    esi
c001f2df:	5f                   	pop    edi
c001f2e0:	5d                   	pop    ebp
c001f2e1:	c3                   	ret    

c001f2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f2e2:	55                   	push   ebp
c001f2e3:	57                   	push   edi
c001f2e4:	56                   	push   esi
c001f2e5:	53                   	push   ebx
c001f2e6:	83 ec 1c             	sub    esp,0x1c
c001f2e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f2ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f2f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f2fd:	88 c3                	mov    bl,al
c001f2ff:	25 ff 00 00 00       	and    eax,0xff
c001f304:	0f 84 88 00 00 00    	je     c001f392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f30a:	83 ec 0c             	sub    esp,0xc
c001f30d:	89 c7                	mov    edi,eax
c001f30f:	68 70 5c 02 c0       	push   0xc0025c70
c001f314:	e8 4d 7c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f319:	83 c4 10             	add    esp,0x10
c001f31c:	83 ff 01             	cmp    edi,0x1
c001f31f:	74 6b                	je     c001f38c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f321:	83 ff 02             	cmp    edi,0x2
c001f324:	75 58                	jne    c001f37e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f326:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f32b:	50                   	push   eax
c001f32c:	6a 01                	push   0x1
c001f32e:	01 ff                	add    edi,edi
c001f330:	09 fe                	or     esi,edi
c001f332:	89 f0                	mov    eax,esi
c001f334:	0f b6 f0             	movzx  esi,al
c001f337:	c1 e6 06             	shl    esi,0x6
c001f33a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f342:	50                   	push   eax
c001f343:	55                   	push   ebp
c001f344:	e8 73 f3 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001f349:	83 c4 10             	add    esp,0x10
c001f34c:	a8 01                	test   al,0x1
c001f34e:	74 02                	je     c001f352 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f350:	b3 07                	mov    bl,0x7
c001f352:	a8 02                	test   al,0x2
c001f354:	74 02                	je     c001f358 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f356:	b3 03                	mov    bl,0x3
c001f358:	a8 04                	test   al,0x4
c001f35a:	74 02                	je     c001f35e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f35c:	b3 14                	mov    bl,0x14
c001f35e:	a8 08                	test   al,0x8
c001f360:	74 02                	je     c001f364 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f362:	b3 03                	mov    bl,0x3
c001f364:	a8 10                	test   al,0x10
c001f366:	74 02                	je     c001f36a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f368:	b3 15                	mov    bl,0x15
c001f36a:	a8 20                	test   al,0x20
c001f36c:	74 02                	je     c001f370 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f36e:	b3 03                	mov    bl,0x3
c001f370:	a8 40                	test   al,0x40
c001f372:	74 02                	je     c001f376 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f374:	b3 16                	mov    bl,0x16
c001f376:	a8 80                	test   al,0x80
c001f378:	74 18                	je     c001f392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f37a:	b3 0d                	mov    bl,0xd
c001f37c:	eb 14                	jmp    c001f392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f37e:	83 ff 03             	cmp    edi,0x3
c001f381:	74 0d                	je     c001f390 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f383:	83 ff 04             	cmp    edi,0x4
c001f386:	75 0a                	jne    c001f392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f388:	b3 08                	mov    bl,0x8
c001f38a:	eb 06                	jmp    c001f392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f38c:	b3 13                	mov    bl,0x13
c001f38e:	eb 02                	jmp    c001f392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f390:	b3 17                	mov    bl,0x17
c001f392:	83 c4 1c             	add    esp,0x1c
c001f395:	88 d8                	mov    al,bl
c001f397:	5b                   	pop    ebx
c001f398:	5e                   	pop    esi
c001f399:	5f                   	pop    edi
c001f39a:	5d                   	pop    ebp
c001f39b:	c3                   	ret    

c001f39c <IDE::polling(unsigned char, unsigned int)>:
c001f39c:	57                   	push   edi
c001f39d:	56                   	push   esi
c001f39e:	53                   	push   ebx
c001f39f:	bb 04 00 00 00       	mov    ebx,0x4
c001f3a4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f3a8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f3ad:	52                   	push   edx
c001f3ae:	6a 0c                	push   0xc
c001f3b0:	56                   	push   esi
c001f3b1:	57                   	push   edi
c001f3b2:	e8 05 f3 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001f3b7:	83 c4 10             	add    esp,0x10
c001f3ba:	4b                   	dec    ebx
c001f3bb:	75 f0                	jne    c001f3ad <IDE::polling(unsigned char, unsigned int)+0x11>
c001f3bd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f3c2:	50                   	push   eax
c001f3c3:	6a 0c                	push   0xc
c001f3c5:	56                   	push   esi
c001f3c6:	57                   	push   edi
c001f3c7:	e8 f0 f2 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001f3cc:	83 c4 10             	add    esp,0x10
c001f3cf:	a8 01                	test   al,0x1
c001f3d1:	75 17                	jne    c001f3ea <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f3d3:	a8 20                	test   al,0x20
c001f3d5:	75 0f                	jne    c001f3e6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f3d7:	4b                   	dec    ebx
c001f3d8:	74 10                	je     c001f3ea <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f3da:	a8 80                	test   al,0x80
c001f3dc:	75 e4                	jne    c001f3c2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f3de:	a8 08                	test   al,0x8
c001f3e0:	74 e0                	je     c001f3c2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f3e2:	31 c0                	xor    eax,eax
c001f3e4:	eb 06                	jmp    c001f3ec <IDE::polling(unsigned char, unsigned int)+0x50>
c001f3e6:	b0 01                	mov    al,0x1
c001f3e8:	eb 02                	jmp    c001f3ec <IDE::polling(unsigned char, unsigned int)+0x50>
c001f3ea:	b0 02                	mov    al,0x2
c001f3ec:	5b                   	pop    ebx
c001f3ed:	5e                   	pop    esi
c001f3ee:	5f                   	pop    edi
c001f3ef:	c3                   	ret    

c001f3f0 <SATABus::close(int, int, void*)>:
c001f3f0:	31 c0                	xor    eax,eax
c001f3f2:	c3                   	ret    
c001f3f3:	90                   	nop

c001f3f4 <SATABus::detect()>:
c001f3f4:	c3                   	ret    
c001f3f5:	90                   	nop

c001f3f6 <SATABus::SATABus()>:
c001f3f6:	83 ec 0c             	sub    esp,0xc
c001f3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3fd:	83 ec 08             	sub    esp,0x8
c001f400:	68 a8 5c 02 c0       	push   0xc0025ca8
c001f405:	50                   	push   eax
c001f406:	e8 45 a9 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001f40b:	83 c4 10             	add    esp,0x10
c001f40e:	ba d4 5c 02 c0       	mov    edx,0xc0025cd4
c001f413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f417:	89 10                	mov    DWORD PTR [eax],edx
c001f419:	83 ec 0c             	sub    esp,0xc
c001f41c:	6a 50                	push   0x50
c001f41e:	e8 b8 09 ff ff       	call   c000fddb <Phys::allocateContiguousPages(int)>
c001f423:	83 c4 10             	add    esp,0x10
c001f426:	89 c2                	mov    edx,eax
c001f428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f42c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f432:	83 ec 0c             	sub    esp,0xc
c001f435:	6a 50                	push   0x50
c001f437:	e8 bf 3c ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c001f43c:	83 c4 10             	add    esp,0x10
c001f43f:	89 c2                	mov    edx,eax
c001f441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f445:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f44b:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c001f450:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f454:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f45a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f45e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f464:	83 ec 0c             	sub    esp,0xc
c001f467:	6a 03                	push   0x3
c001f469:	6a 50                	push   0x50
c001f46b:	51                   	push   ecx
c001f46c:	52                   	push   edx
c001f46d:	50                   	push   eax
c001f46e:	e8 5b 45 ff ff       	call   c00139ce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f473:	83 c4 20             	add    esp,0x20
c001f476:	90                   	nop
c001f477:	83 c4 0c             	add    esp,0xc
c001f47a:	c3                   	ret    
c001f47b:	90                   	nop

c001f47c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f47c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f480:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f483:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f486:	09 c2                	or     edx,eax
c001f488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f48c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f492:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f494:	31 c0                	xor    eax,eax
c001f496:	c1 e9 08             	shr    ecx,0x8
c001f499:	83 e1 0f             	and    ecx,0xf
c001f49c:	39 c8                	cmp    eax,ecx
c001f49e:	74 0a                	je     c001f4aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f4a0:	f6 c2 01             	test   dl,0x1
c001f4a3:	74 08                	je     c001f4ad <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f4a5:	d1 ea                	shr    edx,1
c001f4a7:	40                   	inc    eax
c001f4a8:	eb f2                	jmp    c001f49c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f4aa:	83 c8 ff             	or     eax,0xffffffff
c001f4ad:	c3                   	ret    

c001f4ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f4ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f4b5:	89 c2                	mov    edx,eax
c001f4b7:	c1 ea 08             	shr    edx,0x8
c001f4ba:	83 e2 0f             	and    edx,0xf
c001f4bd:	4a                   	dec    edx
c001f4be:	75 32                	jne    c001f4f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f4c0:	83 e0 0f             	and    eax,0xf
c001f4c3:	83 f8 03             	cmp    eax,0x3
c001f4c6:	75 2a                	jne    c001f4f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f4c8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f4cb:	b8 02 00 00 00       	mov    eax,0x2
c001f4d0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f4d6:	74 1c                	je     c001f4f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f4d8:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f4de:	b8 04 00 00 00       	mov    eax,0x4
c001f4e3:	74 0f                	je     c001f4f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f4e5:	31 c0                	xor    eax,eax
c001f4e7:	83 fa 03             	cmp    edx,0x3
c001f4ea:	0f 94 c0             	sete   al
c001f4ed:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f4f1:	c3                   	ret    
c001f4f2:	31 c0                	xor    eax,eax
c001f4f4:	c3                   	ret    
c001f4f5:	90                   	nop

c001f4f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f4f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f4fd:	0f ba e2 0f          	bt     edx,0xf
c001f501:	72 f7                	jb     c001f4fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f503:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f506:	83 ca 10             	or     edx,0x10
c001f509:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f50c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f50f:	83 ca 01             	or     edx,0x1
c001f512:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f515:	c3                   	ret    

c001f516 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f51a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f51d:	83 e2 fe             	and    edx,0xfffffffe
c001f520:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f523:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f526:	83 e2 ef             	and    edx,0xffffffef
c001f529:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f52c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f52f:	0f ba e2 0e          	bt     edx,0xe
c001f533:	72 f7                	jb     c001f52c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f535:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f538:	0f ba e2 0f          	bt     edx,0xf
c001f53c:	72 ee                	jb     c001f52c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f53e:	c3                   	ret    
c001f53f:	90                   	nop

c001f540 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f540:	55                   	push   ebp
c001f541:	57                   	push   edi
c001f542:	56                   	push   esi
c001f543:	53                   	push   ebx
c001f544:	83 ec 1c             	sub    esp,0x1c
c001f547:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f54b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f54f:	53                   	push   ebx
c001f550:	57                   	push   edi
c001f551:	e8 c0 ff ff ff       	call   c001f516 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f556:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f55a:	83 ec 0c             	sub    esp,0xc
c001f55d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f563:	c1 e5 0a             	shl    ebp,0xa
c001f566:	01 e8                	add    eax,ebp
c001f568:	89 03                	mov    DWORD PTR [ebx],eax
c001f56a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f56c:	68 00 04 00 00       	push   0x400
c001f571:	6a 00                	push   0x0
c001f573:	50                   	push   eax
c001f574:	e8 77 0f fe ff       	call   c00004f0 <memset>
c001f579:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f57f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001f583:	83 c4 1c             	add    esp,0x1c
c001f586:	01 e8                	add    eax,ebp
c001f588:	89 03                	mov    DWORD PTR [ebx],eax
c001f58a:	c1 e6 08             	shl    esi,0x8
c001f58d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f594:	81 c6 00 80 00 00    	add    esi,0x8000
c001f59a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f5a0:	01 f0                	add    eax,esi
c001f5a2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f5a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f5a8:	68 00 01 00 00       	push   0x100
c001f5ad:	6a 00                	push   0x0
c001f5af:	50                   	push   eax
c001f5b0:	e8 3b 0f fe ff       	call   c00004f0 <memset>
c001f5b5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f5bb:	31 d2                	xor    edx,edx
c001f5bd:	01 f0                	add    eax,esi
c001f5bf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f5c2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f5c9:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001f5cf:	01 ee                	add    esi,ebp
c001f5d1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f5d5:	83 c4 10             	add    esp,0x10
c001f5d8:	c1 e5 0d             	shl    ebp,0xd
c001f5db:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001f5e1:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001f5e7:	83 c6 20             	add    esi,0x20
c001f5ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5ee:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f5f4:	01 e8                	add    eax,ebp
c001f5f6:	01 d0                	add    eax,edx
c001f5f8:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f5fb:	52                   	push   edx
c001f5fc:	68 00 01 00 00       	push   0x100
c001f601:	6a 00                	push   0x0
c001f603:	50                   	push   eax
c001f604:	e8 e7 0e fe ff       	call   c00004f0 <memset>
c001f609:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f60f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001f616:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f61a:	83 c4 10             	add    esp,0x10
c001f61d:	01 e8                	add    eax,ebp
c001f61f:	01 d0                	add    eax,edx
c001f621:	81 c2 00 01 00 00    	add    edx,0x100
c001f627:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f62a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001f630:	75 af                	jne    c001f5e1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001f632:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f639:	50                   	push   eax
c001f63a:	50                   	push   eax
c001f63b:	53                   	push   ebx
c001f63c:	57                   	push   edi
c001f63d:	e8 b4 fe ff ff       	call   c001f4f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f642:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f649:	83 c4 2c             	add    esp,0x2c
c001f64c:	5b                   	pop    ebx
c001f64d:	5e                   	pop    esi
c001f64e:	5f                   	pop    edi
c001f64f:	5d                   	pop    ebp
c001f650:	c3                   	ret    
c001f651:	90                   	nop

c001f652 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f652:	55                   	push   ebp
c001f653:	57                   	push   edi
c001f654:	56                   	push   esi
c001f655:	53                   	push   ebx
c001f656:	31 db                	xor    ebx,ebx
c001f658:	83 ec 0c             	sub    esp,0xc
c001f65b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f65f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f663:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f666:	f7 c7 01 00 00 00    	test   edi,0x1
c001f66c:	74 7a                	je     c001f6e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f66e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f672:	89 d8                	mov    eax,ebx
c001f674:	c1 e0 07             	shl    eax,0x7
c001f677:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f67e:	55                   	push   ebp
c001f67f:	56                   	push   esi
c001f680:	e8 29 fe ff ff       	call   c001f4ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f685:	5a                   	pop    edx
c001f686:	59                   	pop    ecx
c001f687:	83 f8 01             	cmp    eax,0x1
c001f68a:	75 21                	jne    c001f6ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f68c:	50                   	push   eax
c001f68d:	53                   	push   ebx
c001f68e:	55                   	push   ebp
c001f68f:	56                   	push   esi
c001f690:	e8 ab fe ff ff       	call   c001f540 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f695:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f69c:	e8 13 00 ff ff       	call   c000f6b4 <malloc>
c001f6a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6a4:	89 c5                	mov    ebp,eax
c001f6a6:	e8 37 0f 00 00       	call   c00205e2 <SATA::SATA()>
c001f6ab:	eb 24                	jmp    c001f6d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f6ad:	83 f8 04             	cmp    eax,0x4
c001f6b0:	75 36                	jne    c001f6e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f6b2:	51                   	push   ecx
c001f6b3:	53                   	push   ebx
c001f6b4:	55                   	push   ebp
c001f6b5:	56                   	push   esi
c001f6b6:	e8 85 fe ff ff       	call   c001f540 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f6bb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f6c2:	e8 ed ff fe ff       	call   c000f6b4 <malloc>
c001f6c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6ca:	89 c5                	mov    ebp,eax
c001f6cc:	e8 a7 12 00 00       	call   c0020978 <SATAPI::SATAPI()>
c001f6d1:	58                   	pop    eax
c001f6d2:	5a                   	pop    edx
c001f6d3:	55                   	push   ebp
c001f6d4:	56                   	push   esi
c001f6d5:	e8 1c a3 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f6da:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f6dd:	56                   	push   esi
c001f6de:	6a 00                	push   0x0
c001f6e0:	53                   	push   ebx
c001f6e1:	55                   	push   ebp
c001f6e2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f6e5:	83 c4 20             	add    esp,0x20
c001f6e8:	d1 ef                	shr    edi,1
c001f6ea:	43                   	inc    ebx
c001f6eb:	83 fb 20             	cmp    ebx,0x20
c001f6ee:	0f 85 72 ff ff ff    	jne    c001f666 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f6f4:	83 c4 0c             	add    esp,0xc
c001f6f7:	5b                   	pop    ebx
c001f6f8:	5e                   	pop    esi
c001f6f9:	5f                   	pop    edi
c001f6fa:	5d                   	pop    ebp
c001f6fb:	c3                   	ret    

c001f6fc <SATABus::open(int, int, void*)>:
c001f6fc:	53                   	push   ebx
c001f6fd:	83 ec 08             	sub    esp,0x8
c001f700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f704:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f70a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f710:	e8 3f 72 ff ff       	call   c0016954 <KeDisablePreemption()>
c001f715:	52                   	push   edx
c001f716:	52                   	push   edx
c001f717:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f71d:	53                   	push   ebx
c001f71e:	e8 2f ff ff ff       	call   c001f652 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f723:	e8 54 72 ff ff       	call   c001697c <KeRestorePreemption()>
c001f728:	83 c4 18             	add    esp,0x18
c001f72b:	31 c0                	xor    eax,eax
c001f72d:	5b                   	pop    ebx
c001f72e:	c3                   	ret    
c001f72f:	90                   	nop

c001f730 <ATA::close(int, int, void*)>:
c001f730:	83 ec 0c             	sub    esp,0xc
c001f733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f737:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f73d:	85 c0                	test   eax,eax
c001f73f:	74 0c                	je     c001f74d <ATA::close(int, int, void*)+0x1d>
c001f741:	8b 10                	mov    edx,DWORD PTR [eax]
c001f743:	83 ec 0c             	sub    esp,0xc
c001f746:	50                   	push   eax
c001f747:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f74a:	83 c4 10             	add    esp,0x10
c001f74d:	31 c0                	xor    eax,eax
c001f74f:	83 c4 0c             	add    esp,0xc
c001f752:	c3                   	ret    
c001f753:	90                   	nop

c001f754 <ATA::powerSaving(PowerSavingLevel)>:
c001f754:	c3                   	ret    
c001f755:	90                   	nop

c001f756 <ATA::ATA()>:
c001f756:	83 ec 0c             	sub    esp,0xc
c001f759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75d:	83 ec 04             	sub    esp,0x4
c001f760:	68 00 02 00 00       	push   0x200
c001f765:	68 55 5e 02 c0       	push   0xc0025e55
c001f76a:	50                   	push   eax
c001f76b:	e8 6a a6 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f770:	83 c4 10             	add    esp,0x10
c001f773:	ba bc 5d 02 c0       	mov    edx,0xc0025dbc
c001f778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77c:	89 10                	mov    DWORD PTR [eax],edx
c001f77e:	90                   	nop
c001f77f:	83 c4 0c             	add    esp,0xc
c001f782:	c3                   	ret    
c001f783:	90                   	nop

c001f784 <ATA::flush(bool)>:
c001f784:	53                   	push   ebx
c001f785:	83 ec 08             	sub    esp,0x8
c001f788:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f78d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f791:	83 f8 01             	cmp    eax,0x1
c001f794:	19 c0                	sbb    eax,eax
c001f796:	83 e0 fd             	and    eax,0xfffffffd
c001f799:	05 ea 00 00 00       	add    eax,0xea
c001f79e:	50                   	push   eax
c001f79f:	6a 07                	push   0x7
c001f7a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7a8:	50                   	push   eax
c001f7a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7af:	e8 48 ee ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7b4:	83 c4 0c             	add    esp,0xc
c001f7b7:	6a 00                	push   0x0
c001f7b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7c0:	50                   	push   eax
c001f7c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7c7:	e8 d0 fb ff ff       	call   c001f39c <IDE::polling(unsigned char, unsigned int)>
c001f7cc:	83 c4 18             	add    esp,0x18
c001f7cf:	5b                   	pop    ebx
c001f7d0:	c3                   	ret    
c001f7d1:	90                   	nop

c001f7d2 <ATA::readyForCommand()>:
c001f7d2:	56                   	push   esi
c001f7d3:	53                   	push   ebx
c001f7d4:	31 db                	xor    ebx,ebx
c001f7d6:	50                   	push   eax
c001f7d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7db:	50                   	push   eax
c001f7dc:	6a 0c                	push   0xc
c001f7de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f7e5:	50                   	push   eax
c001f7e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f7ec:	e8 cb ee ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001f7f1:	83 c4 10             	add    esp,0x10
c001f7f4:	a8 88                	test   al,0x88
c001f7f6:	74 20                	je     c001f818 <ATA::readyForCommand()+0x46>
c001f7f8:	43                   	inc    ebx
c001f7f9:	83 fb 63             	cmp    ebx,0x63
c001f7fc:	7e dd                	jle    c001f7db <ATA::readyForCommand()+0x9>
c001f7fe:	51                   	push   ecx
c001f7ff:	51                   	push   ecx
c001f800:	6a 00                	push   0x0
c001f802:	6a 0a                	push   0xa
c001f804:	e8 2f 76 ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c001f809:	83 c4 10             	add    esp,0x10
c001f80c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f812:	75 c7                	jne    c001f7db <ATA::readyForCommand()+0x9>
c001f814:	31 c0                	xor    eax,eax
c001f816:	eb 02                	jmp    c001f81a <ATA::readyForCommand()+0x48>
c001f818:	b0 01                	mov    al,0x1
c001f81a:	5a                   	pop    edx
c001f81b:	5b                   	pop    ebx
c001f81c:	5e                   	pop    esi
c001f81d:	c3                   	ret    

c001f81e <ATA::access(unsigned long long, int, void*, bool)>:
c001f81e:	55                   	push   ebp
c001f81f:	57                   	push   edi
c001f820:	56                   	push   esi
c001f821:	53                   	push   ebx
c001f822:	83 ec 2c             	sub    esp,0x2c
c001f825:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f829:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f82d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f831:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f835:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f839:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f83d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f841:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f84b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f851:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f855:	c1 e0 06             	shl    eax,0x6
c001f858:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f860:	74 5b                	je     c001f8bd <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001f862:	89 fa                	mov    edx,edi
c001f864:	89 f0                	mov    eax,esi
c001f866:	c1 ea 1c             	shr    edx,0x1c
c001f869:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001f86d:	89 d1                	mov    ecx,edx
c001f86f:	09 c1                	or     ecx,eax
c001f871:	74 25                	je     c001f898 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f873:	31 ed                	xor    ebp,ebp
c001f875:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f87c:	89 fa                	mov    edx,edi
c001f87e:	89 f0                	mov    eax,esi
c001f880:	0f ad d0             	shrd   eax,edx,cl
c001f883:	d3 ea                	shr    edx,cl
c001f885:	f6 c1 20             	test   cl,0x20
c001f888:	74 02                	je     c001f88c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f88a:	89 d0                	mov    eax,edx
c001f88c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f890:	45                   	inc    ebp
c001f891:	83 fd 06             	cmp    ebp,0x6
c001f894:	75 df                	jne    c001f875 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f896:	eb 71                	jmp    c001f909 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001f898:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f89d:	89 f0                	mov    eax,esi
c001f89f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f8a6:	0f ac f8 10          	shrd   eax,edi,0x10
c001f8aa:	bf 01 00 00 00       	mov    edi,0x1
c001f8af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f8b3:	c1 ee 18             	shr    esi,0x18
c001f8b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f8bb:	eb 53                	jmp    c001f910 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f8bd:	6a 00                	push   0x0
c001f8bf:	6a 3f                	push   0x3f
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	e8 cc 20 00 00       	call   c0021994 <__umoddi3>
c001f8c8:	83 c4 10             	add    esp,0x10
c001f8cb:	40                   	inc    eax
c001f8cc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f8d0:	6a 00                	push   0x0
c001f8d2:	68 f0 03 00 00       	push   0x3f0
c001f8d7:	57                   	push   edi
c001f8d8:	56                   	push   esi
c001f8d9:	e8 b6 1f 00 00       	call   c0021894 <__udivdi3>
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f8e6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f8ed:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f8f2:	6a 00                	push   0x0
c001f8f4:	6a 3f                	push   0x3f
c001f8f6:	57                   	push   edi
c001f8f7:	31 ff                	xor    edi,edi
c001f8f9:	56                   	push   esi
c001f8fa:	e8 95 1f 00 00       	call   c0021894 <__udivdi3>
c001f8ff:	83 c4 10             	add    esp,0x10
c001f902:	83 e0 0f             	and    eax,0xf
c001f905:	89 c6                	mov    esi,eax
c001f907:	eb 07                	jmp    c001f910 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f909:	31 f6                	xor    esi,esi
c001f90b:	bf 02 00 00 00       	mov    edi,0x2
c001f910:	55                   	push   ebp
c001f911:	6a 00                	push   0x0
c001f913:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f91a:	50                   	push   eax
c001f91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f91f:	e8 e8 ee ff ff       	call   c001e80c <IDE::enableIRQs(unsigned char, bool)>
c001f924:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f927:	e8 a6 fe ff ff       	call   c001f7d2 <ATA::readyForCommand()>
c001f92c:	83 c4 10             	add    esp,0x10
c001f92f:	84 c0                	test   al,al
c001f931:	75 0a                	jne    c001f93d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001f933:	be 01 00 00 00       	mov    esi,0x1
c001f938:	e9 df 02 00 00       	jmp    c001fc1c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001f93d:	fa                   	cli    
c001f93e:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001f944:	f7 c7 03 00 00 00    	test   edi,0x3
c001f94a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f950:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f956:	75 0a                	jne    c001f962 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001f958:	c1 e0 04             	shl    eax,0x4
c001f95b:	09 c6                	or     esi,eax
c001f95d:	83 ce a0             	or     esi,0xffffffa0
c001f960:	eb 08                	jmp    c001f96a <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001f962:	c1 e0 04             	shl    eax,0x4
c001f965:	09 c6                	or     esi,eax
c001f967:	83 ce e0             	or     esi,0xffffffe0
c001f96a:	89 f0                	mov    eax,esi
c001f96c:	0f b6 d2             	movzx  edx,dl
c001f96f:	0f b6 f0             	movzx  esi,al
c001f972:	56                   	push   esi
c001f973:	6a 06                	push   0x6
c001f975:	52                   	push   edx
c001f976:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f97c:	e8 7b ec ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f981:	83 c4 10             	add    esp,0x10
c001f984:	6a 00                	push   0x0
c001f986:	6a 01                	push   0x1
c001f988:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f98f:	50                   	push   eax
c001f990:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f996:	e8 61 ec ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f99b:	89 f8                	mov    eax,edi
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	0f b6 f0             	movzx  esi,al
c001f9a3:	83 fe 02             	cmp    esi,0x2
c001f9a6:	75 6e                	jne    c001fa16 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f9a8:	6a 00                	push   0x0
c001f9aa:	6a 08                	push   0x8
c001f9ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9b3:	50                   	push   eax
c001f9b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9ba:	e8 3d ec ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9bf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f9c4:	50                   	push   eax
c001f9c5:	6a 09                	push   0x9
c001f9c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9ce:	50                   	push   eax
c001f9cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9d5:	e8 22 ec ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9da:	83 c4 20             	add    esp,0x20
c001f9dd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f9e2:	50                   	push   eax
c001f9e3:	6a 0a                	push   0xa
c001f9e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9ec:	50                   	push   eax
c001f9ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9f3:	e8 04 ec ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9f8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f9fd:	50                   	push   eax
c001f9fe:	6a 0b                	push   0xb
c001fa00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa07:	50                   	push   eax
c001fa08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa0e:	e8 e9 eb ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa13:	83 c4 20             	add    esp,0x20
c001fa16:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fa1b:	50                   	push   eax
c001fa1c:	6a 02                	push   0x2
c001fa1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa25:	50                   	push   eax
c001fa26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa2c:	e8 cb eb ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa31:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fa36:	50                   	push   eax
c001fa37:	6a 03                	push   0x3
c001fa39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa40:	50                   	push   eax
c001fa41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa47:	e8 b0 eb ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa4c:	83 c4 20             	add    esp,0x20
c001fa4f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fa54:	50                   	push   eax
c001fa55:	6a 04                	push   0x4
c001fa57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa5e:	50                   	push   eax
c001fa5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa65:	e8 92 eb ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa6a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fa6f:	50                   	push   eax
c001fa70:	6a 05                	push   0x5
c001fa72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa79:	50                   	push   eax
c001fa7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa80:	e8 77 eb ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa85:	83 c4 20             	add    esp,0x20
c001fa88:	83 fe 02             	cmp    esi,0x2
c001fa8b:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001fa90:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001fa95:	85 c9                	test   ecx,ecx
c001fa97:	74 07                	je     c001faa0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fa99:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fa9e:	75 45                	jne    c001fae5 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001faa0:	89 f8                	mov    eax,edi
c001faa2:	0f b6 f8             	movzx  edi,al
c001faa5:	31 c0                	xor    eax,eax
c001faa7:	4f                   	dec    edi
c001faa8:	0f 94 c0             	sete   al
c001faab:	89 c6                	mov    esi,eax
c001faad:	75 0c                	jne    c001fabb <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001faaf:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fab4:	b8 30 00 00 00       	mov    eax,0x30
c001fab9:	75 2f                	jne    c001faea <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fabb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fabf:	83 f2 01             	xor    edx,0x1
c001fac2:	85 c9                	test   ecx,ecx
c001fac4:	74 09                	je     c001facf <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001fac6:	84 d2                	test   dl,dl
c001fac8:	b8 24 00 00 00       	mov    eax,0x24
c001facd:	75 1b                	jne    c001faea <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001facf:	85 f6                	test   esi,esi
c001fad1:	0f 84 5c fe ff ff    	je     c001f933 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fad7:	84 d2                	test   dl,dl
c001fad9:	b8 20 00 00 00       	mov    eax,0x20
c001fade:	75 0a                	jne    c001faea <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fae0:	e9 4e fe ff ff       	jmp    c001f933 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fae5:	b8 34 00 00 00       	mov    eax,0x34
c001faea:	50                   	push   eax
c001faeb:	6a 07                	push   0x7
c001faed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faf4:	50                   	push   eax
c001faf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fafb:	e8 fc ea ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb00:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fb07:	83 c4 10             	add    esp,0x10
c001fb0a:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fb11:	75 01                	jne    c001fb14 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001fb13:	fb                   	sti    
c001fb14:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fb18:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001fb1d:	85 f6                	test   esi,esi
c001fb1f:	0f 84 dd 00 00 00    	je     c001fc02 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fb25:	57                   	push   edi
c001fb26:	6a 01                	push   0x1
c001fb28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb2f:	50                   	push   eax
c001fb30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb36:	e8 61 f8 ff ff       	call   c001f39c <IDE::polling(unsigned char, unsigned int)>
c001fb3b:	83 c4 10             	add    esp,0x10
c001fb3e:	0f b6 c0             	movzx  eax,al
c001fb41:	85 c0                	test   eax,eax
c001fb43:	74 23                	je     c001fb68 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001fb45:	50                   	push   eax
c001fb46:	89 c6                	mov    esi,eax
c001fb48:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fb4f:	50                   	push   eax
c001fb50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb57:	50                   	push   eax
c001fb58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb5e:	e8 7f f7 ff ff       	call   c001f2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fb63:	e9 b1 00 00 00       	jmp    c001fc19 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001fb68:	85 ed                	test   ebp,ebp
c001fb6a:	74 49                	je     c001fbb5 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001fb6c:	fa                   	cli    
c001fb6d:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fb73:	31 ff                	xor    edi,edi
c001fb75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fb79:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001fb7d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001fb82:	51                   	push   ecx
c001fb83:	51                   	push   ecx
c001fb84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb8b:	50                   	push   eax
c001fb8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb92:	e8 53 ea ff ff       	call   c001e5ea <IDE::getBase(unsigned char)>
c001fb97:	89 c2                	mov    edx,eax
c001fb99:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001fb9e:	66 ef                	out    dx,ax
c001fba0:	47                   	inc    edi
c001fba1:	83 c4 10             	add    esp,0x10
c001fba4:	81 ff 00 01 00 00    	cmp    edi,0x100
c001fbaa:	75 c9                	jne    c001fb75 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001fbac:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fbb3:	eb 35                	jmp    c001fbea <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001fbb5:	fa                   	cli    
c001fbb6:	52                   	push   edx
c001fbb7:	52                   	push   edx
c001fbb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbbf:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fbc5:	50                   	push   eax
c001fbc6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbcc:	e8 19 ea ff ff       	call   c001e5ea <IDE::getBase(unsigned char)>
c001fbd1:	b9 00 01 00 00       	mov    ecx,0x100
c001fbd6:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fbda:	89 c2                	mov    edx,eax
c001fbdc:	fc                   	cld    
c001fbdd:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fbe0:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fbe7:	83 c4 10             	add    esp,0x10
c001fbea:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fbf1:	75 01                	jne    c001fbf4 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001fbf3:	fb                   	sti    
c001fbf4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fbfc:	4e                   	dec    esi
c001fbfd:	e9 1b ff ff ff       	jmp    c001fb1d <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001fc02:	31 f6                	xor    esi,esi
c001fc04:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fc09:	74 11                	je     c001fc1c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fc0b:	50                   	push   eax
c001fc0c:	50                   	push   eax
c001fc0d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001fc12:	50                   	push   eax
c001fc13:	53                   	push   ebx
c001fc14:	e8 6b fb ff ff       	call   c001f784 <ATA::flush(bool)>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	83 c4 2c             	add    esp,0x2c
c001fc1f:	89 f0                	mov    eax,esi
c001fc21:	5b                   	pop    ebx
c001fc22:	5e                   	pop    esi
c001fc23:	5f                   	pop    edi
c001fc24:	5d                   	pop    ebp
c001fc25:	c3                   	ret    

c001fc26 <ATA::read(unsigned long long, int, void*)>:
c001fc26:	57                   	push   edi
c001fc27:	b8 04 00 00 00       	mov    eax,0x4
c001fc2c:	56                   	push   esi
c001fc2d:	53                   	push   ebx
c001fc2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fc36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fc3a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fc3e:	8d 7a ff             	lea    edi,[edx-0x1]
c001fc41:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fc47:	77 25                	ja     c001fc6e <ATA::read(unsigned long long, int, void*)+0x48>
c001fc49:	85 f6                	test   esi,esi
c001fc4b:	b8 06 00 00 00       	mov    eax,0x6
c001fc50:	74 1c                	je     c001fc6e <ATA::read(unsigned long long, int, void*)+0x48>
c001fc52:	50                   	push   eax
c001fc53:	50                   	push   eax
c001fc54:	6a 00                	push   0x0
c001fc56:	56                   	push   esi
c001fc57:	52                   	push   edx
c001fc58:	53                   	push   ebx
c001fc59:	51                   	push   ecx
c001fc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc5e:	e8 bb fb ff ff       	call   c001f81e <ATA::access(unsigned long long, int, void*, bool)>
c001fc63:	83 c4 20             	add    esp,0x20
c001fc66:	85 c0                	test   eax,eax
c001fc68:	0f 95 c0             	setne  al
c001fc6b:	0f b6 c0             	movzx  eax,al
c001fc6e:	5b                   	pop    ebx
c001fc6f:	5e                   	pop    esi
c001fc70:	5f                   	pop    edi
c001fc71:	c3                   	ret    

c001fc72 <ATA::write(unsigned long long, int, void*)>:
c001fc72:	57                   	push   edi
c001fc73:	b8 04 00 00 00       	mov    eax,0x4
c001fc78:	56                   	push   esi
c001fc79:	53                   	push   ebx
c001fc7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fc82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fc86:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fc8a:	8d 7a ff             	lea    edi,[edx-0x1]
c001fc8d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fc93:	77 25                	ja     c001fcba <ATA::write(unsigned long long, int, void*)+0x48>
c001fc95:	85 f6                	test   esi,esi
c001fc97:	b8 06 00 00 00       	mov    eax,0x6
c001fc9c:	74 1c                	je     c001fcba <ATA::write(unsigned long long, int, void*)+0x48>
c001fc9e:	50                   	push   eax
c001fc9f:	50                   	push   eax
c001fca0:	6a 01                	push   0x1
c001fca2:	56                   	push   esi
c001fca3:	52                   	push   edx
c001fca4:	53                   	push   ebx
c001fca5:	51                   	push   ecx
c001fca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fcaa:	e8 6f fb ff ff       	call   c001f81e <ATA::access(unsigned long long, int, void*, bool)>
c001fcaf:	83 c4 20             	add    esp,0x20
c001fcb2:	85 c0                	test   eax,eax
c001fcb4:	0f 95 c0             	setne  al
c001fcb7:	0f b6 c0             	movzx  eax,al
c001fcba:	5b                   	pop    ebx
c001fcbb:	5e                   	pop    esi
c001fcbc:	5f                   	pop    edi
c001fcbd:	c3                   	ret    

c001fcbe <ATA::detectCHS()>:
c001fcbe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fcc2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fcc8:	c1 e0 06             	shl    eax,0x6
c001fccb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fcd1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fcdb:	c7 44 24 04 f8 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025cf8
c001fce3:	e9 28 fe fe ff       	jmp    c000fb10 <KePanic(char const*)>

c001fce8 <ATA::open(int, int, void*)>:
c001fce8:	53                   	push   ebx
c001fce9:	83 ec 08             	sub    esp,0x8
c001fcec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fcf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fcf4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fcf8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fcfe:	c1 e0 06             	shl    eax,0x6
c001fd01:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fd07:	01 d0                	add    eax,edx
c001fd09:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fd10:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fd16:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fd1d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fd27:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fd2e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fd34:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fd3b:	75 0c                	jne    c001fd49 <ATA::open(int, int, void*)+0x61>
c001fd3d:	83 ec 0c             	sub    esp,0xc
c001fd40:	53                   	push   ebx
c001fd41:	e8 78 ff ff ff       	call   c001fcbe <ATA::detectCHS()>
c001fd46:	83 c4 10             	add    esp,0x10
c001fd49:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fd4f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fd55:	c1 e0 06             	shl    eax,0x6
c001fd58:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fd5f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fd69:	d1 e8                	shr    eax,1
c001fd6b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fd71:	6a 04                	push   0x4
c001fd73:	6a 0c                	push   0xc
c001fd75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd7c:	50                   	push   eax
c001fd7d:	52                   	push   edx
c001fd7e:	e8 79 e8 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd83:	90                   	nop
c001fd84:	90                   	nop
c001fd85:	6a 00                	push   0x0
c001fd87:	6a 0c                	push   0xc
c001fd89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd90:	50                   	push   eax
c001fd91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd97:	e8 60 e8 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd9c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fda2:	83 c4 20             	add    esp,0x20
c001fda5:	c1 e0 06             	shl    eax,0x6
c001fda8:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001fdae:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001fdb5:	0f 84 00 01 00 00    	je     c001febb <ATA::open(int, int, void*)+0x1d3>
c001fdbb:	83 ec 0c             	sub    esp,0xc
c001fdbe:	6a 08                	push   0x8
c001fdc0:	e8 16 00 ff ff       	call   c000fddb <Phys::allocateContiguousPages(int)>
c001fdc5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001fdcb:	c7 04 24 0a 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d0a
c001fdd2:	e8 8f 71 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001fdd7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001fdde:	e8 18 33 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c001fde3:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fde9:	6a 03                	push   0x3
c001fdeb:	50                   	push   eax
c001fdec:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fdf2:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001fdf8:	e8 d7 39 ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fdfd:	83 c4 20             	add    esp,0x20
c001fe00:	e8 05 ff fe ff       	call   c000fd0a <Phys::allocatePage()>
c001fe05:	83 ec 0c             	sub    esp,0xc
c001fe08:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001fe0e:	6a 01                	push   0x1
c001fe10:	e8 e6 32 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c001fe15:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001fe1b:	6a 03                	push   0x3
c001fe1d:	50                   	push   eax
c001fe1e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001fe24:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001fe2a:	e8 a5 39 ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fe2f:	83 c4 14             	add    esp,0x14
c001fe32:	68 43 5d 02 c0       	push   0xc0025d43
c001fe37:	e8 2a 71 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001fe3c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001fe43:	50                   	push   eax
c001fe44:	6a 12                	push   0x12
c001fe46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe4d:	50                   	push   eax
c001fe4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe54:	e8 a3 e7 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe59:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001fe5f:	83 c4 20             	add    esp,0x20
c001fe62:	0f b6 c4             	movzx  eax,ah
c001fe65:	50                   	push   eax
c001fe66:	6a 13                	push   0x13
c001fe68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe6f:	50                   	push   eax
c001fe70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe76:	e8 81 e7 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe7b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001fe82:	50                   	push   eax
c001fe83:	6a 14                	push   0x14
c001fe85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe8c:	50                   	push   eax
c001fe8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe93:	e8 64 e7 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe98:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001fe9f:	83 c4 20             	add    esp,0x20
c001fea2:	50                   	push   eax
c001fea3:	6a 15                	push   0x15
c001fea5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001feac:	50                   	push   eax
c001fead:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001feb3:	e8 44 e7 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001feb8:	83 c4 10             	add    esp,0x10
c001febb:	83 ec 0c             	sub    esp,0xc
c001febe:	53                   	push   ebx
c001febf:	e8 7e 9f fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c001fec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fec7:	e8 16 ae fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c001fecc:	83 c4 18             	add    esp,0x18
c001fecf:	31 c0                	xor    eax,eax
c001fed1:	5b                   	pop    ebx
c001fed2:	c3                   	ret    

c001fed3 <combineCharAndColour(char, unsigned char)>:
c001fed3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fed8:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001fede:	c1 e0 08             	shl    eax,0x8
c001fee1:	09 d0                	or     eax,edx
c001fee3:	c3                   	ret    

c001fee4 <combineColours(unsigned char, unsigned char)>:
c001fee4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fee9:	c1 e0 04             	shl    eax,0x4
c001feec:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001fef0:	c3                   	ret    
c001fef1:	90                   	nop

c001fef2 <ATAPI::write(unsigned long long, int, void*)>:
c001fef2:	b8 03 00 00 00       	mov    eax,0x3
c001fef7:	c3                   	ret    

c001fef8 <ATAPI::close(int, int, void*)>:
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ff05:	85 c0                	test   eax,eax
c001ff07:	74 0c                	je     c001ff15 <ATAPI::close(int, int, void*)+0x1d>
c001ff09:	8b 10                	mov    edx,DWORD PTR [eax]
c001ff0b:	83 ec 0c             	sub    esp,0xc
c001ff0e:	50                   	push   eax
c001ff0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ff12:	83 c4 10             	add    esp,0x10
c001ff15:	31 c0                	xor    eax,eax
c001ff17:	83 c4 0c             	add    esp,0xc
c001ff1a:	c3                   	ret    
c001ff1b:	90                   	nop

c001ff1c <ATAPI::ATAPI()>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff23:	83 ec 04             	sub    esp,0x4
c001ff26:	68 00 08 00 00       	push   0x800
c001ff2b:	68 f5 5e 02 c0       	push   0xc0025ef5
c001ff30:	50                   	push   eax
c001ff31:	e8 a4 9e fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ff36:	83 c4 10             	add    esp,0x10
c001ff39:	ba 04 5e 02 c0       	mov    edx,0xc0025e04
c001ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff42:	89 10                	mov    DWORD PTR [eax],edx
c001ff44:	90                   	nop
c001ff45:	83 c4 0c             	add    esp,0xc
c001ff48:	c3                   	ret    
c001ff49:	90                   	nop

c001ff4a <ATAPI::readyForCommand()>:
c001ff4a:	56                   	push   esi
c001ff4b:	53                   	push   ebx
c001ff4c:	31 db                	xor    ebx,ebx
c001ff4e:	50                   	push   eax
c001ff4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff53:	50                   	push   eax
c001ff54:	6a 0c                	push   0xc
c001ff56:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ff5d:	50                   	push   eax
c001ff5e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ff64:	e8 53 e7 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	a8 88                	test   al,0x88
c001ff6e:	74 26                	je     c001ff96 <ATAPI::readyForCommand()+0x4c>
c001ff70:	43                   	inc    ebx
c001ff71:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001ff77:	7e da                	jle    c001ff53 <ATAPI::readyForCommand()+0x9>
c001ff79:	51                   	push   ecx
c001ff7a:	51                   	push   ecx
c001ff7b:	6a 00                	push   0x0
c001ff7d:	68 5e 01 00 00       	push   0x15e
c001ff82:	e8 b1 6e ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c001ff87:	83 c4 10             	add    esp,0x10
c001ff8a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001ff90:	75 c1                	jne    c001ff53 <ATAPI::readyForCommand()+0x9>
c001ff92:	31 c0                	xor    eax,eax
c001ff94:	eb 02                	jmp    c001ff98 <ATAPI::readyForCommand()+0x4e>
c001ff96:	b0 01                	mov    al,0x1
c001ff98:	5a                   	pop    edx
c001ff99:	5b                   	pop    ebx
c001ff9a:	5e                   	pop    esi
c001ff9b:	c3                   	ret    

c001ff9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ff9c:	55                   	push   ebp
c001ff9d:	57                   	push   edi
c001ff9e:	56                   	push   esi
c001ff9f:	53                   	push   ebx
c001ffa0:	83 ec 20             	sub    esp,0x20
c001ffa3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ffa7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ffab:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ffaf:	6a 01                	push   0x1
c001ffb1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ffb8:	50                   	push   eax
c001ffb9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ffbf:	e8 48 e8 ff ff       	call   c001e80c <IDE::enableIRQs(unsigned char, bool)>
c001ffc4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ffcb:	59                   	pop    ecx
c001ffcc:	5e                   	pop    esi
c001ffcd:	50                   	push   eax
c001ffce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ffd4:	e8 fd e5 ff ff       	call   c001e5d6 <IDE::prepareInterrupt(unsigned char)>
c001ffd9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ffdc:	e8 69 ff ff ff       	call   c001ff4a <ATAPI::readyForCommand()>
c001ffe1:	83 c4 10             	add    esp,0x10
c001ffe4:	84 c0                	test   al,al
c001ffe6:	75 0a                	jne    c001fff2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001ffe8:	bb 01 00 00 00       	mov    ebx,0x1
c001ffed:	e9 5f 02 00 00       	jmp    c0020251 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fff2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001fff8:	c1 e0 04             	shl    eax,0x4
c001fffb:	0f b6 c0             	movzx  eax,al
c001fffe:	50                   	push   eax
c001ffff:	6a 06                	push   0x6
c0020001:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020008:	50                   	push   eax
c0020009:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002000f:	e8 e8 e5 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020014:	6a 00                	push   0x0
c0020016:	6a 01                	push   0x1
c0020018:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002001f:	50                   	push   eax
c0020020:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020026:	e8 d1 e5 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002002b:	83 c4 20             	add    esp,0x20
c002002e:	0f b6 c3             	movzx  eax,bl
c0020031:	50                   	push   eax
c0020032:	0f b6 df             	movzx  ebx,bh
c0020035:	6a 04                	push   0x4
c0020037:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002003e:	50                   	push   eax
c002003f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020045:	e8 b2 e5 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002004a:	53                   	push   ebx
c002004b:	6a 05                	push   0x5
c002004d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020054:	50                   	push   eax
c0020055:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002005b:	e8 9c e5 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020060:	83 c4 20             	add    esp,0x20
c0020063:	68 a0 00 00 00       	push   0xa0
c0020068:	6a 07                	push   0x7
c002006a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020071:	50                   	push   eax
c0020072:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020078:	e8 7f e5 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002007d:	83 c4 0c             	add    esp,0xc
c0020080:	6a 01                	push   0x1
c0020082:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020089:	50                   	push   eax
c002008a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020090:	e8 07 f3 ff ff       	call   c001f39c <IDE::polling(unsigned char, unsigned int)>
c0020095:	83 c4 10             	add    esp,0x10
c0020098:	0f b6 d8             	movzx  ebx,al
c002009b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c00200a1:	85 db                	test   ebx,ebx
c00200a3:	74 20                	je     c00200c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c00200a5:	53                   	push   ebx
c00200a6:	0f b6 c0             	movzx  eax,al
c00200a9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c00200b0:	52                   	push   edx
c00200b1:	50                   	push   eax
c00200b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00200b8:	e8 25 f2 ff ff       	call   c001f2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00200bd:	83 c4 10             	add    esp,0x10
c00200c0:	e9 8c 01 00 00       	jmp    c0020251 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00200c5:	52                   	push   edx
c00200c6:	0f b6 c0             	movzx  eax,al
c00200c9:	52                   	push   edx
c00200ca:	50                   	push   eax
c00200cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00200d1:	e8 14 e5 ff ff       	call   c001e5ea <IDE::getBase(unsigned char)>
c00200d6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00200da:	b9 06 00 00 00       	mov    ecx,0x6
c00200df:	89 c2                	mov    edx,eax
c00200e1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00200e4:	89 e8                	mov    eax,ebp
c00200e6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00200ea:	83 c4 10             	add    esp,0x10
c00200ed:	0f b6 c0             	movzx  eax,al
c00200f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200f4:	85 db                	test   ebx,ebx
c00200f6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00200fc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020103:	0f 84 eb 00 00 00    	je     c00201f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020109:	55                   	push   ebp
c002010a:	55                   	push   ebp
c002010b:	52                   	push   edx
c002010c:	50                   	push   eax
c002010d:	e8 5e e6 ff ff       	call   c001e770 <IDE::waitInterrupt(unsigned char)>
c0020112:	83 c4 10             	add    esp,0x10
c0020115:	84 c0                	test   al,al
c0020117:	0f 84 cb fe ff ff    	je     c001ffe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002011d:	56                   	push   esi
c002011e:	56                   	push   esi
c002011f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020126:	50                   	push   eax
c0020127:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002012d:	e8 a4 e4 ff ff       	call   c001e5d6 <IDE::prepareInterrupt(unsigned char)>
c0020132:	83 c4 0c             	add    esp,0xc
c0020135:	6a 04                	push   0x4
c0020137:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002013e:	50                   	push   eax
c002013f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020145:	e8 72 e5 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c002014a:	83 c4 0c             	add    esp,0xc
c002014d:	6a 05                	push   0x5
c002014f:	89 c6                	mov    esi,eax
c0020151:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020158:	50                   	push   eax
c0020159:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002015f:	e8 58 e5 ff ff       	call   c001e6bc <IDE::read(unsigned char, unsigned char)>
c0020164:	83 c4 10             	add    esp,0x10
c0020167:	0f b6 e8             	movzx  ebp,al
c002016a:	89 f0                	mov    eax,esi
c002016c:	c1 e5 08             	shl    ebp,0x8
c002016f:	0f b6 f0             	movzx  esi,al
c0020172:	09 f5                	or     ebp,esi
c0020174:	31 f6                	xor    esi,esi
c0020176:	d1 fd                	sar    ebp,1
c0020178:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002017d:	74 5c                	je     c00201db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002017f:	39 ee                	cmp    esi,ebp
c0020181:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020187:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002018e:	75 0d                	jne    c002019d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c0020190:	8d 0c 36             	lea    ecx,[esi+esi*1]
c0020193:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c0020197:	4b                   	dec    ebx
c0020198:	e9 57 ff ff ff       	jmp    c00200f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002019d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00201a1:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c00201a5:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c00201aa:	51                   	push   ecx
c00201ab:	51                   	push   ecx
c00201ac:	52                   	push   edx
c00201ad:	50                   	push   eax
c00201ae:	e8 37 e4 ff ff       	call   c001e5ea <IDE::getBase(unsigned char)>
c00201b3:	89 c2                	mov    edx,eax
c00201b5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00201ba:	66 ef                	out    dx,ax
c00201bc:	46                   	inc    esi
c00201bd:	83 c4 10             	add    esp,0x10
c00201c0:	eb bd                	jmp    c002017f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c00201c2:	51                   	push   ecx
c00201c3:	51                   	push   ecx
c00201c4:	52                   	push   edx
c00201c5:	50                   	push   eax
c00201c6:	e8 1f e4 ff ff       	call   c001e5ea <IDE::getBase(unsigned char)>
c00201cb:	89 c2                	mov    edx,eax
c00201cd:	66 ed                	in     ax,dx
c00201cf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00201d3:	83 c4 10             	add    esp,0x10
c00201d6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c00201da:	46                   	inc    esi
c00201db:	39 ee                	cmp    esi,ebp
c00201dd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00201e3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00201ea:	75 d6                	jne    c00201c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c00201ec:	01 f6                	add    esi,esi
c00201ee:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c00201f2:	eb a3                	jmp    c0020197 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c00201f4:	51                   	push   ecx
c00201f5:	51                   	push   ecx
c00201f6:	52                   	push   edx
c00201f7:	50                   	push   eax
c00201f8:	e8 73 e5 ff ff       	call   c001e770 <IDE::waitInterrupt(unsigned char)>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	84 c0                	test   al,al
c0020202:	0f 84 e0 fd ff ff    	je     c001ffe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020208:	52                   	push   edx
c0020209:	bb a0 86 01 00       	mov    ebx,0x186a0
c002020e:	52                   	push   edx
c002020f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020216:	50                   	push   eax
c0020217:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002021d:	e8 b4 e3 ff ff       	call   c001e5d6 <IDE::prepareInterrupt(unsigned char)>
c0020222:	83 c4 10             	add    esp,0x10
c0020225:	50                   	push   eax
c0020226:	50                   	push   eax
c0020227:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002022e:	50                   	push   eax
c002022f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020235:	e8 b0 e3 ff ff       	call   c001e5ea <IDE::getBase(unsigned char)>
c002023a:	8d 50 07             	lea    edx,[eax+0x7]
c002023d:	ec                   	in     al,dx
c002023e:	83 c4 10             	add    esp,0x10
c0020241:	a8 88                	test   al,0x88
c0020243:	74 0a                	je     c002024f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020245:	4b                   	dec    ebx
c0020246:	75 dd                	jne    c0020225 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020248:	bb 02 00 00 00       	mov    ebx,0x2
c002024d:	eb 02                	jmp    c0020251 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002024f:	31 db                	xor    ebx,ebx
c0020251:	83 c4 1c             	add    esp,0x1c
c0020254:	89 d8                	mov    eax,ebx
c0020256:	5b                   	pop    ebx
c0020257:	5e                   	pop    esi
c0020258:	5f                   	pop    edi
c0020259:	5d                   	pop    ebp
c002025a:	c3                   	ret    
c002025b:	90                   	nop

c002025c <ATAPI::diskRemoved()>:
c002025c:	53                   	push   ebx
c002025d:	83 ec 14             	sub    esp,0x14
c0020260:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020264:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002026b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020271:	e8 5c a7 fe ff       	call   c000a9d2 <LogicalDisk::unmount()>
c0020276:	58                   	pop    eax
c0020277:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002027d:	e8 2e b1 fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c0020282:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020288:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002028c:	83 c4 18             	add    esp,0x18
c002028f:	5b                   	pop    ebx
c0020290:	e9 0b b1 fe ff       	jmp    c000b3a0 <VCache::invalidateReadBuffer()>
c0020295:	90                   	nop

c0020296 <ATAPI::eject()>:
c0020296:	57                   	push   edi
c0020297:	b9 03 00 00 00       	mov    ecx,0x3
c002029c:	53                   	push   ebx
c002029d:	83 ec 14             	sub    esp,0x14
c00202a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00202a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00202a8:	fc                   	cld    
c00202a9:	31 c0                	xor    eax,eax
c00202ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00202ad:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00202b2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00202b7:	50                   	push   eax
c00202b8:	50                   	push   eax
c00202b9:	6a 00                	push   0x0
c00202bb:	6a 00                	push   0x0
c00202bd:	6a 00                	push   0x0
c00202bf:	6a 02                	push   0x2
c00202c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00202c5:	50                   	push   eax
c00202c6:	53                   	push   ebx
c00202c7:	e8 d0 fc ff ff       	call   c001ff9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00202cc:	83 c4 14             	add    esp,0x14
c00202cf:	53                   	push   ebx
c00202d0:	e8 87 ff ff ff       	call   c002025c <ATAPI::diskRemoved()>
c00202d5:	83 c4 24             	add    esp,0x24
c00202d8:	31 c0                	xor    eax,eax
c00202da:	5b                   	pop    ebx
c00202db:	5f                   	pop    edi
c00202dc:	c3                   	ret    
c00202dd:	90                   	nop

c00202de <ATAPI::diskInserted()>:
c00202de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202e2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00202e9:	c3                   	ret    

c00202ea <ATAPI::detectMedia()>:
c00202ea:	56                   	push   esi
c00202eb:	53                   	push   ebx
c00202ec:	83 ec 28             	sub    esp,0x28
c00202ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00202f3:	6a 0c                	push   0xc
c00202f5:	6a 00                	push   0x0
c00202f7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00202fb:	56                   	push   esi
c00202fc:	e8 ef 01 fe ff       	call   c00004f0 <memset>
c0020301:	58                   	pop    eax
c0020302:	5a                   	pop    edx
c0020303:	6a 00                	push   0x0
c0020305:	6a 00                	push   0x0
c0020307:	6a 00                	push   0x0
c0020309:	6a 00                	push   0x0
c002030b:	56                   	push   esi
c002030c:	53                   	push   ebx
c002030d:	e8 8a fc ff ff       	call   c001ff9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020312:	83 c4 1c             	add    esp,0x1c
c0020315:	6a 0c                	push   0xc
c0020317:	6a 00                	push   0x0
c0020319:	56                   	push   esi
c002031a:	e8 d1 01 fe ff       	call   c00004f0 <memset>
c002031f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020324:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020329:	59                   	pop    ecx
c002032a:	58                   	pop    eax
c002032b:	6a 01                	push   0x1
c002032d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020331:	50                   	push   eax
c0020332:	6a 00                	push   0x0
c0020334:	6a 12                	push   0x12
c0020336:	56                   	push   esi
c0020337:	53                   	push   ebx
c0020338:	e8 5f fc ff ff       	call   c001ff9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002033d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020341:	83 c4 20             	add    esp,0x20
c0020344:	83 e0 7f             	and    eax,0x7f
c0020347:	83 f8 70             	cmp    eax,0x70
c002034a:	74 15                	je     c0020361 <ATAPI::detectMedia()+0x77>
c002034c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020353:	75 0c                	jne    c0020361 <ATAPI::detectMedia()+0x77>
c0020355:	83 ec 0c             	sub    esp,0xc
c0020358:	53                   	push   ebx
c0020359:	e8 80 ff ff ff       	call   c00202de <ATAPI::diskInserted()>
c002035e:	83 c4 10             	add    esp,0x10
c0020361:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020365:	83 e0 0f             	and    eax,0xf
c0020368:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002036d:	0f b6 c0             	movzx  eax,al
c0020370:	75 19                	jne    c002038b <ATAPI::detectMedia()+0xa1>
c0020372:	83 f8 02             	cmp    eax,0x2
c0020375:	75 14                	jne    c002038b <ATAPI::detectMedia()+0xa1>
c0020377:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002037e:	74 24                	je     c00203a4 <ATAPI::detectMedia()+0xba>
c0020380:	83 ec 0c             	sub    esp,0xc
c0020383:	53                   	push   ebx
c0020384:	e8 d3 fe ff ff       	call   c002025c <ATAPI::diskRemoved()>
c0020389:	eb 16                	jmp    c00203a1 <ATAPI::detectMedia()+0xb7>
c002038b:	85 c0                	test   eax,eax
c002038d:	75 15                	jne    c00203a4 <ATAPI::detectMedia()+0xba>
c002038f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020396:	75 0c                	jne    c00203a4 <ATAPI::detectMedia()+0xba>
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	53                   	push   ebx
c002039c:	e8 3d ff ff ff       	call   c00202de <ATAPI::diskInserted()>
c00203a1:	83 c4 10             	add    esp,0x10
c00203a4:	83 c4 24             	add    esp,0x24
c00203a7:	5b                   	pop    ebx
c00203a8:	5e                   	pop    esi
c00203a9:	c3                   	ret    

c00203aa <ATAPI::open(int, int, void*)>:
c00203aa:	56                   	push   esi
c00203ab:	53                   	push   ebx
c00203ac:	50                   	push   eax
c00203ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00203b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00203b9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00203bf:	c1 e0 06             	shl    eax,0x6
c00203c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00203c8:	01 d0                	add    eax,edx
c00203ca:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00203d1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00203d7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00203de:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00203e8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00203ef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00203f5:	6a 04                	push   0x4
c00203f7:	6a 0c                	push   0xc
c00203f9:	51                   	push   ecx
c00203fa:	52                   	push   edx
c00203fb:	e8 fc e1 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020400:	90                   	nop
c0020401:	90                   	nop
c0020402:	6a 00                	push   0x0
c0020404:	6a 0c                	push   0xc
c0020406:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002040d:	50                   	push   eax
c002040e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020414:	e8 e3 e1 ff ff       	call   c001e5fc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020419:	83 c4 14             	add    esp,0x14
c002041c:	68 78 01 00 00       	push   0x178
c0020421:	e8 8e f2 fe ff       	call   c000f6b4 <malloc>
c0020426:	83 c4 0c             	add    esp,0xc
c0020429:	6a 00                	push   0x0
c002042b:	68 ff ff ff 7f       	push   0x7fffffff
c0020430:	6a 00                	push   0x0
c0020432:	6a 00                	push   0x0
c0020434:	53                   	push   ebx
c0020435:	68 a7 5f 02 c0       	push   0xc0025fa7
c002043a:	89 c6                	mov    esi,eax
c002043c:	50                   	push   eax
c002043d:	e8 ce a3 fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020442:	83 c4 14             	add    esp,0x14
c0020445:	56                   	push   esi
c0020446:	e8 85 a4 fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c002044b:	5a                   	pop    edx
c002044c:	59                   	pop    ecx
c002044d:	0f be c0             	movsx  eax,al
c0020450:	50                   	push   eax
c0020451:	68 ec 5d 02 c0       	push   0xc0025dec
c0020456:	e8 0b 6b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002045b:	58                   	pop    eax
c002045c:	5a                   	pop    edx
c002045d:	56                   	push   esi
c002045e:	53                   	push   ebx
c002045f:	e8 92 95 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0020464:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002046a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002046d:	e8 d0 99 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020472:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020479:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002047c:	e8 69 fe ff ff       	call   c00202ea <ATAPI::detectMedia()>
c0020481:	83 c4 14             	add    esp,0x14
c0020484:	31 c0                	xor    eax,eax
c0020486:	5b                   	pop    ebx
c0020487:	5e                   	pop    esi
c0020488:	c3                   	ret    
c0020489:	90                   	nop

c002048a <ATAPI::read(unsigned long long, int, void*)>:
c002048a:	55                   	push   ebp
c002048b:	57                   	push   edi
c002048c:	56                   	push   esi
c002048d:	53                   	push   ebx
c002048e:	83 ec 1c             	sub    esp,0x1c
c0020491:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020495:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020499:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002049d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204a4:	74 3c                	je     c00204e2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c00204a6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00204aa:	b9 03 00 00 00       	mov    ecx,0x3
c00204af:	fc                   	cld    
c00204b0:	31 c0                	xor    eax,eax
c00204b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204b4:	89 e8                	mov    eax,ebp
c00204b6:	0f ce                	bswap  esi
c00204b8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00204bc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00204c1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00204c5:	50                   	push   eax
c00204c6:	50                   	push   eax
c00204c7:	55                   	push   ebp
c00204c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00204cc:	c1 e5 0b             	shl    ebp,0xb
c00204cf:	6a 00                	push   0x0
c00204d1:	55                   	push   ebp
c00204d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204d6:	50                   	push   eax
c00204d7:	53                   	push   ebx
c00204d8:	e8 bf fa ff ff       	call   c001ff9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00204dd:	83 c4 20             	add    esp,0x20
c00204e0:	eb 1a                	jmp    c00204fc <ATAPI::read(unsigned long long, int, void*)+0x72>
c00204e2:	83 ec 0c             	sub    esp,0xc
c00204e5:	53                   	push   ebx
c00204e6:	e8 ff fd ff ff       	call   c00202ea <ATAPI::detectMedia()>
c00204eb:	83 c4 10             	add    esp,0x10
c00204ee:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204f5:	75 af                	jne    c00204a6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00204f7:	b8 02 00 00 00       	mov    eax,0x2
c00204fc:	83 c4 1c             	add    esp,0x1c
c00204ff:	5b                   	pop    ebx
c0020500:	5e                   	pop    esi
c0020501:	5f                   	pop    edi
c0020502:	5d                   	pop    ebp
c0020503:	c3                   	ret    

c0020504 <SATA::close(int, int, void*)>:
c0020504:	83 ec 0c             	sub    esp,0xc
c0020507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002050b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020511:	85 c0                	test   eax,eax
c0020513:	74 0c                	je     c0020521 <SATA::close(int, int, void*)+0x1d>
c0020515:	8b 10                	mov    edx,DWORD PTR [eax]
c0020517:	83 ec 0c             	sub    esp,0xc
c002051a:	50                   	push   eax
c002051b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002051e:	83 c4 10             	add    esp,0x10
c0020521:	31 c0                	xor    eax,eax
c0020523:	83 c4 0c             	add    esp,0xc
c0020526:	c3                   	ret    
c0020527:	90                   	nop

c0020528 <SATA::powerSaving(PowerSavingLevel)>:
c0020528:	c3                   	ret    
c0020529:	90                   	nop

c002052a <SATA::open(int, int, void*)>:
c002052a:	56                   	push   esi
c002052b:	53                   	push   ebx
c002052c:	83 ec 10             	sub    esp,0x10
c002052f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020533:	68 34 5e 02 c0       	push   0xc0025e34
c0020538:	e8 29 6a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002053d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020541:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002054b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020555:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002055b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002055f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020569:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020570:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020576:	e8 8f f7 fe ff       	call   c000fd0a <Phys::allocatePage()>
c002057b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020581:	89 c6                	mov    esi,eax
c0020583:	e8 82 f7 fe ff       	call   c000fd0a <Phys::allocatePage()>
c0020588:	81 c6 00 10 00 00    	add    esi,0x1000
c002058e:	83 c4 10             	add    esp,0x10
c0020591:	39 c6                	cmp    esi,eax
c0020593:	74 10                	je     c00205a5 <SATA::open(int, int, void*)+0x7b>
c0020595:	83 ec 0c             	sub    esp,0xc
c0020598:	68 40 5e 02 c0       	push   0xc0025e40
c002059d:	e8 6e f5 fe ff       	call   c000fb10 <KePanic(char const*)>
c00205a2:	83 c4 10             	add    esp,0x10
c00205a5:	83 ec 0c             	sub    esp,0xc
c00205a8:	6a 02                	push   0x2
c00205aa:	e8 4c 2b ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c00205af:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00205b5:	6a 03                	push   0x3
c00205b7:	50                   	push   eax
c00205b8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00205be:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c00205c4:	e8 0b 32 ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00205c9:	83 c4 14             	add    esp,0x14
c00205cc:	53                   	push   ebx
c00205cd:	e8 70 98 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00205d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205d5:	e8 08 a7 fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c00205da:	83 c4 14             	add    esp,0x14
c00205dd:	31 c0                	xor    eax,eax
c00205df:	5b                   	pop    ebx
c00205e0:	5e                   	pop    esi
c00205e1:	c3                   	ret    

c00205e2 <SATA::SATA()>:
c00205e2:	83 ec 0c             	sub    esp,0xc
c00205e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e9:	83 ec 04             	sub    esp,0x4
c00205ec:	68 00 02 00 00       	push   0x200
c00205f1:	68 54 5e 02 c0       	push   0xc0025e54
c00205f6:	50                   	push   eax
c00205f7:	e8 de 97 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c00205fc:	83 c4 10             	add    esp,0x10
c00205ff:	ba c4 5e 02 c0       	mov    edx,0xc0025ec4
c0020604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020608:	89 10                	mov    DWORD PTR [eax],edx
c002060a:	90                   	nop
c002060b:	83 c4 0c             	add    esp,0xc
c002060e:	c3                   	ret    
c002060f:	90                   	nop

c0020610 <SATA::access(unsigned long long, int, void*, bool)>:
c0020610:	55                   	push   ebp
c0020611:	57                   	push   edi
c0020612:	56                   	push   esi
c0020613:	53                   	push   ebx
c0020614:	83 ec 2c             	sub    esp,0x2c
c0020617:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002061b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002061f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020623:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020627:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002062b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002062f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020633:	fa                   	cli    
c0020634:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c002063a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002063f:	7e 10                	jle    c0020651 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0020641:	83 ec 0c             	sub    esp,0xc
c0020644:	68 64 5e 02 c0       	push   0xc0025e64
c0020649:	e8 c2 f4 fe ff       	call   c000fb10 <KePanic(char const*)>
c002064e:	83 c4 10             	add    esp,0x10
c0020651:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020657:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002065d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020663:	89 e8                	mov    eax,ebp
c0020665:	c1 e0 07             	shl    eax,0x7
c0020668:	01 d0                	add    eax,edx
c002066a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020674:	8d 45 02             	lea    eax,[ebp+0x2]
c0020677:	51                   	push   ecx
c0020678:	c1 e0 07             	shl    eax,0x7
c002067b:	51                   	push   ecx
c002067c:	01 d0                	add    eax,edx
c002067e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020682:	50                   	push   eax
c0020683:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020689:	e8 ee ed ff ff       	call   c001f47c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002068e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020692:	83 c4 10             	add    esp,0x10
c0020695:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002069a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002069e:	0f 84 a6 01 00 00    	je     c002084a <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c00206a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00206a8:	c1 e0 09             	shl    eax,0x9
c00206ab:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00206b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00206b4:	74 0e                	je     c00206c4 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c00206b6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00206bc:	89 c1                	mov    ecx,eax
c00206be:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00206c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00206c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00206c8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00206ce:	8d 45 02             	lea    eax,[ebp+0x2]
c00206d1:	c1 e0 07             	shl    eax,0x7
c00206d4:	01 d0                	add    eax,edx
c00206d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00206d8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00206de:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00206e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00206e8:	c1 e1 05             	shl    ecx,0x5
c00206eb:	01 c8                	add    eax,ecx
c00206ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00206f1:	83 e1 01             	and    ecx,0x1
c00206f4:	89 ce                	mov    esi,ecx
c00206f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00206f8:	c1 e6 06             	shl    esi,0x6
c00206fb:	83 e1 bf             	and    ecx,0xffffffbf
c00206fe:	09 f1                	or     ecx,esi
c0020700:	88 08                	mov    BYTE PTR [eax],cl
c0020702:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020704:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002070a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020710:	89 08                	mov    DWORD PTR [eax],ecx
c0020712:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020718:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002071e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020724:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020727:	50                   	push   eax
c0020728:	68 90 00 00 00       	push   0x90
c002072d:	6a 00                	push   0x0
c002072f:	56                   	push   esi
c0020730:	e8 bb fd fd ff       	call   c00004f0 <memset>
c0020735:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002073b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020745:	83 c4 10             	add    esp,0x10
c0020748:	48                   	dec    eax
c0020749:	25 ff ff 3f 00       	and    eax,0x3fffff
c002074e:	89 c1                	mov    ecx,eax
c0020750:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020756:	25 00 00 c0 ff       	and    eax,0xffc00000
c002075b:	09 c8                	or     eax,ecx
c002075d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020763:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020769:	83 c8 80             	or     eax,0xffffff80
c002076c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020772:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020775:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020779:	25 00 7f 00 00       	and    eax,0x7f00
c002077e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020783:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020788:	66 89 06             	mov    WORD PTR [esi],ax
c002078b:	b0 35                	mov    al,0x35
c002078d:	75 02                	jne    c0020791 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002078f:	b0 25                	mov    al,0x25
c0020791:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020794:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020798:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002079c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00207a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207a4:	c1 e8 10             	shr    eax,0x10
c00207a7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00207aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207ae:	c1 e8 18             	shr    eax,0x18
c00207b1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00207b4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00207b8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00207bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00207bf:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00207c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00207c6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00207ca:	89 ee                	mov    esi,ebp
c00207cc:	31 c0                	xor    eax,eax
c00207ce:	c1 e6 07             	shl    esi,0x7
c00207d1:	01 d6                	add    esi,edx
c00207d3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00207d9:	80 e1 88             	and    cl,0x88
c00207dc:	74 0a                	je     c00207e8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00207de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00207e3:	74 0a                	je     c00207ef <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00207e5:	40                   	inc    eax
c00207e6:	eb eb                	jmp    c00207d3 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c00207e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00207ed:	75 0a                	jne    c00207f9 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c00207ef:	83 ec 0c             	sub    esp,0xc
c00207f2:	68 9d 5e 02 c0       	push   0xc0025e9d
c00207f7:	eb 34                	jmp    c002082d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00207f9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00207fd:	c1 e5 07             	shl    ebp,0x7
c0020800:	b8 01 00 00 00       	mov    eax,0x1
c0020805:	01 ea                	add    edx,ebp
c0020807:	d3 e0                	shl    eax,cl
c0020809:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002080f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020815:	85 c8                	test   eax,ecx
c0020817:	74 25                	je     c002083e <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0020819:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002081f:	0f ba e1 1e          	bt     ecx,0x1e
c0020823:	73 ea                	jae    c002080f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020825:	83 ec 0c             	sub    esp,0xc
c0020828:	68 ab 5e 02 c0       	push   0xc0025eab
c002082d:	e8 34 67 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020832:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0020839:	83 c4 10             	add    esp,0x10
c002083c:	eb 13                	jmp    c0020851 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c002083e:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020844:	0f ba e0 1e          	bt     eax,0x1e
c0020848:	73 18                	jae    c0020862 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c002084a:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0020851:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0020858:	75 01                	jne    c002085b <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002085a:	fb                   	sti    
c002085b:	b8 01 00 00 00       	mov    eax,0x1
c0020860:	eb 2c                	jmp    c002088e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020862:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020867:	75 10                	jne    c0020879 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0020869:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002086f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020873:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020877:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020879:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0020880:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0020885:	85 c0                	test   eax,eax
c0020887:	75 03                	jne    c002088c <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020889:	fb                   	sti    
c002088a:	eb 02                	jmp    c002088e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002088c:	31 c0                	xor    eax,eax
c002088e:	83 c4 2c             	add    esp,0x2c
c0020891:	5b                   	pop    ebx
c0020892:	5e                   	pop    esi
c0020893:	5f                   	pop    edi
c0020894:	5d                   	pop    ebp
c0020895:	c3                   	ret    

c0020896 <SATA::read(unsigned long long, int, void*)>:
c0020896:	57                   	push   edi
c0020897:	b8 04 00 00 00       	mov    eax,0x4
c002089c:	56                   	push   esi
c002089d:	53                   	push   ebx
c002089e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00208a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00208aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00208ae:	8d 7a ff             	lea    edi,[edx-0x1]
c00208b1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00208b7:	77 25                	ja     c00208de <SATA::read(unsigned long long, int, void*)+0x48>
c00208b9:	85 f6                	test   esi,esi
c00208bb:	b8 06 00 00 00       	mov    eax,0x6
c00208c0:	74 1c                	je     c00208de <SATA::read(unsigned long long, int, void*)+0x48>
c00208c2:	50                   	push   eax
c00208c3:	50                   	push   eax
c00208c4:	6a 00                	push   0x0
c00208c6:	56                   	push   esi
c00208c7:	52                   	push   edx
c00208c8:	53                   	push   ebx
c00208c9:	51                   	push   ecx
c00208ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00208ce:	e8 3d fd ff ff       	call   c0020610 <SATA::access(unsigned long long, int, void*, bool)>
c00208d3:	83 c4 20             	add    esp,0x20
c00208d6:	85 c0                	test   eax,eax
c00208d8:	0f 95 c0             	setne  al
c00208db:	0f b6 c0             	movzx  eax,al
c00208de:	5b                   	pop    ebx
c00208df:	5e                   	pop    esi
c00208e0:	5f                   	pop    edi
c00208e1:	c3                   	ret    

c00208e2 <SATA::write(unsigned long long, int, void*)>:
c00208e2:	55                   	push   ebp
c00208e3:	b8 04 00 00 00       	mov    eax,0x4
c00208e8:	57                   	push   edi
c00208e9:	56                   	push   esi
c00208ea:	53                   	push   ebx
c00208eb:	83 ec 0c             	sub    esp,0xc
c00208ee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00208f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00208f6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00208fa:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00208fe:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020901:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020907:	77 3d                	ja     c0020946 <SATA::write(unsigned long long, int, void*)+0x64>
c0020909:	85 ed                	test   ebp,ebp
c002090b:	b8 06 00 00 00       	mov    eax,0x6
c0020910:	74 34                	je     c0020946 <SATA::write(unsigned long long, int, void*)+0x64>
c0020912:	c1 e3 09             	shl    ebx,0x9
c0020915:	01 eb                	add    ebx,ebp
c0020917:	50                   	push   eax
c0020918:	89 d6                	mov    esi,edx
c002091a:	50                   	push   eax
c002091b:	83 c6 01             	add    esi,0x1
c002091e:	6a 01                	push   0x1
c0020920:	89 cf                	mov    edi,ecx
c0020922:	55                   	push   ebp
c0020923:	83 d7 00             	adc    edi,0x0
c0020926:	6a 01                	push   0x1
c0020928:	81 c5 00 02 00 00    	add    ebp,0x200
c002092e:	51                   	push   ecx
c002092f:	52                   	push   edx
c0020930:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020934:	e8 d7 fc ff ff       	call   c0020610 <SATA::access(unsigned long long, int, void*, bool)>
c0020939:	83 c4 20             	add    esp,0x20
c002093c:	39 dd                	cmp    ebp,ebx
c002093e:	89 f2                	mov    edx,esi
c0020940:	89 f9                	mov    ecx,edi
c0020942:	75 d3                	jne    c0020917 <SATA::write(unsigned long long, int, void*)+0x35>
c0020944:	31 c0                	xor    eax,eax
c0020946:	83 c4 0c             	add    esp,0xc
c0020949:	5b                   	pop    ebx
c002094a:	5e                   	pop    esi
c002094b:	5f                   	pop    edi
c002094c:	5d                   	pop    ebp
c002094d:	c3                   	ret    

c002094e <SATAPI::write(unsigned long long, int, void*)>:
c002094e:	b8 03 00 00 00       	mov    eax,0x3
c0020953:	c3                   	ret    

c0020954 <SATAPI::close(int, int, void*)>:
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002095b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020961:	85 c0                	test   eax,eax
c0020963:	74 0c                	je     c0020971 <SATAPI::close(int, int, void*)+0x1d>
c0020965:	8b 10                	mov    edx,DWORD PTR [eax]
c0020967:	83 ec 0c             	sub    esp,0xc
c002096a:	50                   	push   eax
c002096b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002096e:	83 c4 10             	add    esp,0x10
c0020971:	31 c0                	xor    eax,eax
c0020973:	83 c4 0c             	add    esp,0xc
c0020976:	c3                   	ret    
c0020977:	90                   	nop

c0020978 <SATAPI::SATAPI()>:
c0020978:	83 ec 0c             	sub    esp,0xc
c002097b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002097f:	83 ec 04             	sub    esp,0x4
c0020982:	68 00 08 00 00       	push   0x800
c0020987:	68 f4 5e 02 c0       	push   0xc0025ef4
c002098c:	50                   	push   eax
c002098d:	e8 48 94 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020992:	83 c4 10             	add    esp,0x10
c0020995:	ba e8 5f 02 c0       	mov    edx,0xc0025fe8
c002099a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002099e:	89 10                	mov    DWORD PTR [eax],edx
c00209a0:	90                   	nop
c00209a1:	83 c4 0c             	add    esp,0xc
c00209a4:	c3                   	ret    
c00209a5:	90                   	nop

c00209a6 <SATAPI::diskRemoved()>:
c00209a6:	c3                   	ret    
c00209a7:	90                   	nop

c00209a8 <SATAPI::diskInserted()>:
c00209a8:	83 ec 18             	sub    esp,0x18
c00209ab:	68 00 5f 02 c0       	push   0xc0025f00
c00209b0:	e8 b1 65 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00209b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209b9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00209c0:	83 c4 1c             	add    esp,0x1c
c00209c3:	c3                   	ret    

c00209c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00209c4:	55                   	push   ebp
c00209c5:	57                   	push   edi
c00209c6:	56                   	push   esi
c00209c7:	53                   	push   ebx
c00209c8:	83 ec 34             	sub    esp,0x34
c00209cb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00209cf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00209d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00209db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00209df:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00209e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00209eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00209ef:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00209f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209f9:	83 c0 02             	add    eax,0x2
c00209fc:	c1 e0 07             	shl    eax,0x7
c00209ff:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020a03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a0b:	c1 e0 07             	shl    eax,0x7
c0020a0e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020a12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a16:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020a20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020a24:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020a2a:	e8 4d ea ff ff       	call   c001f47c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020a2f:	83 c4 10             	add    esp,0x10
c0020a32:	89 c2                	mov    edx,eax
c0020a34:	b8 01 00 00 00       	mov    eax,0x1
c0020a39:	83 fa ff             	cmp    edx,0xffffffff
c0020a3c:	0f 84 63 02 00 00    	je     c0020ca5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020a42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a4a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a52:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020a58:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020a5e:	89 d1                	mov    ecx,edx
c0020a60:	c1 e1 05             	shl    ecx,0x5
c0020a63:	01 c8                	add    eax,ecx
c0020a65:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020a67:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020a6d:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020a73:	89 08                	mov    DWORD PTR [eax],ecx
c0020a75:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a7b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020a81:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020a87:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020a8a:	50                   	push   eax
c0020a8b:	68 90 00 00 00       	push   0x90
c0020a90:	6a 00                	push   0x0
c0020a92:	53                   	push   ebx
c0020a93:	e8 58 fa fd ff       	call   c00004f0 <memset>
c0020a98:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020a9b:	b9 0c 00 00 00       	mov    ecx,0xc
c0020aa0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020aa4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020aa6:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020aac:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020ab0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020ab4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020aba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020abe:	48                   	dec    eax
c0020abf:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020ac4:	89 c1                	mov    ecx,eax
c0020ac6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020acc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ad1:	09 c8                	or     eax,ecx
c0020ad3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020ad9:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020adf:	83 c8 80             	or     eax,0xffffff80
c0020ae2:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020ae8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020aeb:	25 00 7f 00 00       	and    eax,0x7f00
c0020af0:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020af5:	66 89 03             	mov    WORD PTR [ebx],ax
c0020af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020afc:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0020b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b04:	c1 e8 10             	shr    eax,0x10
c0020b07:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b0e:	c1 e8 18             	shr    eax,0x18
c0020b11:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0020b14:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020b18:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020b1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020b1f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020b22:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b26:	83 c4 10             	add    esp,0x10
c0020b29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b2d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020b31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020b35:	31 c0                	xor    eax,eax
c0020b37:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020b3d:	80 e1 88             	and    cl,0x88
c0020b40:	74 0a                	je     c0020b4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020b42:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b47:	74 0a                	je     c0020b53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0020b49:	40                   	inc    eax
c0020b4a:	eb eb                	jmp    c0020b37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020b4c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b51:	75 43                	jne    c0020b96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0020b53:	83 ec 0c             	sub    esp,0xc
c0020b56:	68 18 5f 02 c0       	push   0xc0025f18
c0020b5b:	e8 06 64 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020b60:	58                   	pop    eax
c0020b61:	5a                   	pop    edx
c0020b62:	68 2d 5f 02 c0       	push   0xc0025f2d
c0020b67:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c0020b6d:	e8 7e 19 ff ff       	call   c00124f0 <VgaText::puts(char const*)>
c0020b72:	59                   	pop    ecx
c0020b73:	5b                   	pop    ebx
c0020b74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020b78:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020b7e:	e8 93 e9 ff ff       	call   c001f516 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020b83:	5e                   	pop    esi
c0020b84:	5f                   	pop    edi
c0020b85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020b89:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020b8f:	e8 62 e9 ff ff       	call   c001f4f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020b94:	eb 48                	jmp    c0020bde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c0020b96:	b8 01 00 00 00       	mov    eax,0x1
c0020b9b:	88 d1                	mov    cl,dl
c0020b9d:	d3 e0                	shl    eax,cl
c0020b9f:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0020ba4:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0020baa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020bae:	89 c7                	mov    edi,eax
c0020bb0:	c1 e3 07             	shl    ebx,0x7
c0020bb3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0020bb7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0020bbd:	85 c7                	test   edi,eax
c0020bbf:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0020bc5:	0f 84 a7 00 00 00    	je     c0020c72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0020bcb:	0f ba e0 1e          	bt     eax,0x1e
c0020bcf:	73 1a                	jae    c0020beb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020bd1:	83 ec 0c             	sub    esp,0xc
c0020bd4:	68 3f 5f 02 c0       	push   0xc0025f3f
c0020bd9:	e8 88 63 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020bde:	83 c4 10             	add    esp,0x10
c0020be1:	b8 01 00 00 00       	mov    eax,0x1
c0020be6:	e9 ba 00 00 00       	jmp    c0020ca5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020beb:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0020bf1:	83 f8 0d             	cmp    eax,0xd
c0020bf4:	77 0b                	ja     c0020c01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0020bf6:	50                   	push   eax
c0020bf7:	50                   	push   eax
c0020bf8:	6a 00                	push   0x0
c0020bfa:	68 c8 00 00 00       	push   0xc8
c0020bff:	eb 2a                	jmp    c0020c2b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020c01:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0020c07:	83 f8 0d             	cmp    eax,0xd
c0020c0a:	77 0b                	ja     c0020c17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020c0c:	51                   	push   ecx
c0020c0d:	51                   	push   ecx
c0020c0e:	6a 00                	push   0x0
c0020c10:	68 58 02 00 00       	push   0x258
c0020c15:	eb 14                	jmp    c0020c2b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020c17:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020c1d:	83 f8 06             	cmp    eax,0x6
c0020c20:	77 11                	ja     c0020c33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0020c22:	52                   	push   edx
c0020c23:	52                   	push   edx
c0020c24:	6a 00                	push   0x0
c0020c26:	68 dc 05 00 00       	push   0x5dc
c0020c2b:	e8 08 62 ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0020c30:	83 c4 10             	add    esp,0x10
c0020c33:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020c37:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020c3a:	75 06                	jne    c0020c42 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0020c3c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020c40:	74 16                	je     c0020c58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020c42:	83 fe 06             	cmp    esi,0x6
c0020c45:	77 11                	ja     c0020c58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020c47:	50                   	push   eax
c0020c48:	50                   	push   eax
c0020c49:	6a 00                	push   0x0
c0020c4b:	68 c4 09 00 00       	push   0x9c4
c0020c50:	e8 e3 61 ff ff       	call   c0016e38 <milliTenthSleep(unsigned long long)>
c0020c55:	83 c4 10             	add    esp,0x10
c0020c58:	46                   	inc    esi
c0020c59:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0020c5f:	0f 85 52 ff ff ff    	jne    c0020bb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0020c65:	83 ec 0c             	sub    esp,0xc
c0020c68:	68 52 5f 02 c0       	push   0xc0025f52
c0020c6d:	e9 67 ff ff ff       	jmp    c0020bd9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020c72:	0f ba e0 1e          	bt     eax,0x1e
c0020c76:	73 0d                	jae    c0020c85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0020c78:	83 ec 0c             	sub    esp,0xc
c0020c7b:	68 66 5f 02 c0       	push   0xc0025f66
c0020c80:	e9 54 ff ff ff       	jmp    c0020bd9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020c85:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020c8a:	74 17                	je     c0020ca3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020c8c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020c91:	74 10                	je     c0020ca3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020c93:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020c99:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020c9d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020ca1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ca3:	31 c0                	xor    eax,eax
c0020ca5:	83 c4 2c             	add    esp,0x2c
c0020ca8:	5b                   	pop    ebx
c0020ca9:	5e                   	pop    esi
c0020caa:	5f                   	pop    edi
c0020cab:	5d                   	pop    ebp
c0020cac:	c3                   	ret    
c0020cad:	90                   	nop

c0020cae <SATAPI::eject()>:
c0020cae:	57                   	push   edi
c0020caf:	b9 03 00 00 00       	mov    ecx,0x3
c0020cb4:	83 ec 18             	sub    esp,0x18
c0020cb7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020cbb:	fc                   	cld    
c0020cbc:	31 c0                	xor    eax,eax
c0020cbe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020cc0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020cc5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020cca:	50                   	push   eax
c0020ccb:	6a 00                	push   0x0
c0020ccd:	6a 00                	push   0x0
c0020ccf:	6a 00                	push   0x0
c0020cd1:	6a 00                	push   0x0
c0020cd3:	6a 02                	push   0x2
c0020cd5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020cd9:	50                   	push   eax
c0020cda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020cde:	e8 e1 fc ff ff       	call   c00209c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ce3:	83 c4 38             	add    esp,0x38
c0020ce6:	31 c0                	xor    eax,eax
c0020ce8:	5f                   	pop    edi
c0020ce9:	c3                   	ret    

c0020cea <SATAPI::detectMedia()>:
c0020cea:	53                   	push   ebx
c0020ceb:	83 ec 14             	sub    esp,0x14
c0020cee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020cf2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020cf8:	e8 b3 a6 fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c0020cfd:	59                   	pop    ecx
c0020cfe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020d04:	e8 97 a6 fe ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c0020d09:	c7 04 24 7b 5f 02 c0 	mov    DWORD PTR [esp],0xc0025f7b
c0020d10:	e8 51 62 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020d15:	83 c4 10             	add    esp,0x10
c0020d18:	31 c0                	xor    eax,eax
c0020d1a:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020d21:	85 d2                	test   edx,edx
c0020d23:	74 0f                	je     c0020d34 <SATAPI::detectMedia()+0x4a>
c0020d25:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020d2b:	75 07                	jne    c0020d34 <SATAPI::detectMedia()+0x4a>
c0020d2d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020d34:	40                   	inc    eax
c0020d35:	83 f8 1a             	cmp    eax,0x1a
c0020d38:	75 e0                	jne    c0020d1a <SATAPI::detectMedia()+0x30>
c0020d3a:	83 c4 08             	add    esp,0x8
c0020d3d:	5b                   	pop    ebx
c0020d3e:	c3                   	ret    
c0020d3f:	90                   	nop

c0020d40 <SATAPI::open(int, int, void*)>:
c0020d40:	56                   	push   esi
c0020d41:	53                   	push   ebx
c0020d42:	51                   	push   ecx
c0020d43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d4b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020d55:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020d5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d5f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020d69:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020d73:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020d7a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020d80:	e8 85 ef fe ff       	call   c000fd0a <Phys::allocatePage()>
c0020d85:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020d8b:	89 c6                	mov    esi,eax
c0020d8d:	e8 78 ef fe ff       	call   c000fd0a <Phys::allocatePage()>
c0020d92:	81 c6 00 10 00 00    	add    esi,0x1000
c0020d98:	39 c6                	cmp    esi,eax
c0020d9a:	74 10                	je     c0020dac <SATAPI::open(int, int, void*)+0x6c>
c0020d9c:	83 ec 0c             	sub    esp,0xc
c0020d9f:	68 90 5f 02 c0       	push   0xc0025f90
c0020da4:	e8 67 ed fe ff       	call   c000fb10 <KePanic(char const*)>
c0020da9:	83 c4 10             	add    esp,0x10
c0020dac:	83 ec 0c             	sub    esp,0xc
c0020daf:	6a 02                	push   0x2
c0020db1:	e8 45 23 ff ff       	call   c00130fb <Virt::allocateKernelVirtualPages(int)>
c0020db6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020dbc:	6a 03                	push   0x3
c0020dbe:	50                   	push   eax
c0020dbf:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020dc5:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c0020dcb:	e8 04 2a ff ff       	call   c00137d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020dd0:	83 c4 14             	add    esp,0x14
c0020dd3:	68 78 01 00 00       	push   0x178
c0020dd8:	e8 d7 e8 fe ff       	call   c000f6b4 <malloc>
c0020ddd:	83 c4 0c             	add    esp,0xc
c0020de0:	6a 00                	push   0x0
c0020de2:	68 ff ff ff 7f       	push   0x7fffffff
c0020de7:	6a 00                	push   0x0
c0020de9:	6a 00                	push   0x0
c0020deb:	53                   	push   ebx
c0020dec:	68 a6 5f 02 c0       	push   0xc0025fa6
c0020df1:	89 c6                	mov    esi,eax
c0020df3:	50                   	push   eax
c0020df4:	e8 17 9a fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020df9:	83 c4 14             	add    esp,0x14
c0020dfc:	56                   	push   esi
c0020dfd:	e8 ce 9a fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c0020e02:	5a                   	pop    edx
c0020e03:	59                   	pop    ecx
c0020e04:	0f be c0             	movsx  eax,al
c0020e07:	50                   	push   eax
c0020e08:	68 ec 5d 02 c0       	push   0xc0025dec
c0020e0d:	e8 54 61 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020e12:	58                   	pop    eax
c0020e13:	5a                   	pop    edx
c0020e14:	56                   	push   esi
c0020e15:	53                   	push   ebx
c0020e16:	e8 db 8b fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0020e1b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020e21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e24:	e8 19 90 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020e29:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020e30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e33:	e8 b2 fe ff ff       	call   c0020cea <SATAPI::detectMedia()>
c0020e38:	83 c4 14             	add    esp,0x14
c0020e3b:	31 c0                	xor    eax,eax
c0020e3d:	5b                   	pop    ebx
c0020e3e:	5e                   	pop    esi
c0020e3f:	c3                   	ret    

c0020e40 <SATAPI::read(unsigned long long, int, void*)>:
c0020e40:	55                   	push   ebp
c0020e41:	57                   	push   edi
c0020e42:	56                   	push   esi
c0020e43:	53                   	push   ebx
c0020e44:	83 ec 3c             	sub    esp,0x3c
c0020e47:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0020e4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020e4f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020e53:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0020e57:	83 fd 04             	cmp    ebp,0x4
c0020e5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020e62:	7e 10                	jle    c0020e74 <SATAPI::read(unsigned long long, int, void*)+0x34>
c0020e64:	83 ec 0c             	sub    esp,0xc
c0020e67:	68 b4 5f 02 c0       	push   0xc0025fb4
c0020e6c:	e8 9f ec fe ff       	call   c000fb10 <KePanic(char const*)>
c0020e71:	83 c4 10             	add    esp,0x10
c0020e74:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020e7a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020e80:	51                   	push   ecx
c0020e81:	50                   	push   eax
c0020e82:	83 c0 02             	add    eax,0x2
c0020e85:	c1 e0 07             	shl    eax,0x7
c0020e88:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020e8e:	50                   	push   eax
c0020e8f:	52                   	push   edx
c0020e90:	e8 ab e6 ff ff       	call   c001f540 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020e95:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020e99:	b9 03 00 00 00       	mov    ecx,0x3
c0020e9e:	fc                   	cld    
c0020e9f:	31 c0                	xor    eax,eax
c0020ea1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ea3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020ea8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020ead:	83 c4 0c             	add    esp,0xc
c0020eb0:	6a 00                	push   0x0
c0020eb2:	6a 00                	push   0x0
c0020eb4:	6a 00                	push   0x0
c0020eb6:	6a 00                	push   0x0
c0020eb8:	6a 02                	push   0x2
c0020eba:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020ebe:	50                   	push   eax
c0020ebf:	53                   	push   ebx
c0020ec0:	e8 ff fa ff ff       	call   c00209c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ec5:	83 c4 20             	add    esp,0x20
c0020ec8:	85 c0                	test   eax,eax
c0020eca:	89 c6                	mov    esi,eax
c0020ecc:	75 46                	jne    c0020f14 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c0020ece:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020ed2:	b9 03 00 00 00       	mov    ecx,0x3
c0020ed7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ed9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020edd:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020ee2:	0f c8                	bswap  eax
c0020ee4:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0020ee8:	89 e8                	mov    eax,ebp
c0020eea:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020eee:	50                   	push   eax
c0020eef:	55                   	push   ebp
c0020ef0:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020ef4:	c1 e5 0b             	shl    ebp,0xb
c0020ef7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020efb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eff:	55                   	push   ebp
c0020f00:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020f04:	50                   	push   eax
c0020f05:	53                   	push   ebx
c0020f06:	e8 b9 fa ff ff       	call   c00209c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f0b:	83 c4 20             	add    esp,0x20
c0020f0e:	85 c0                	test   eax,eax
c0020f10:	89 c6                	mov    esi,eax
c0020f12:	74 0c                	je     c0020f20 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0020f14:	83 ec 0c             	sub    esp,0xc
c0020f17:	53                   	push   ebx
c0020f18:	e8 cd fd ff ff       	call   c0020cea <SATAPI::detectMedia()>
c0020f1d:	83 c4 10             	add    esp,0x10
c0020f20:	83 c4 3c             	add    esp,0x3c
c0020f23:	89 f0                	mov    eax,esi
c0020f25:	5b                   	pop    ebx
c0020f26:	5e                   	pop    esi
c0020f27:	5f                   	pop    edi
c0020f28:	5d                   	pop    ebp
c0020f29:	c3                   	ret    
c0020f2a:	66 90                	xchg   ax,ax

c0020f2c <APICTimer::close(int, int, void*)>:
c0020f2c:	b8 00 00 00 00       	mov    eax,0x0
c0020f31:	c3                   	ret    
c0020f32:	66 90                	xchg   ax,ax

c0020f34 <apicTimerHandler(regs*, void*)>:
c0020f34:	83 ec 0c             	sub    esp,0xc
c0020f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020f3d:	b8 10 27 00 00       	mov    eax,0x2710
c0020f42:	ba 00 00 00 00       	mov    edx,0x0
c0020f47:	f7 f1                	div    ecx
c0020f49:	83 ec 0c             	sub    esp,0xc
c0020f4c:	50                   	push   eax
c0020f4d:	e8 7a a1 fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c0020f52:	83 c4 10             	add    esp,0x10
c0020f55:	90                   	nop
c0020f56:	83 c4 0c             	add    esp,0xc
c0020f59:	c3                   	ret    
c0020f5a:	66 90                	xchg   ax,ax

c0020f5c <APICTimer::open(int, int, void*)>:
c0020f5c:	83 ec 0c             	sub    esp,0xc
c0020f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f63:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f65:	83 c0 24             	add    eax,0x24
c0020f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f6a:	83 ec 08             	sub    esp,0x8
c0020f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f75:	ff d0                	call   eax
c0020f77:	83 c4 10             	add    esp,0x10
c0020f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020f82:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020f90:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020f96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020f9a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	51                   	push   ecx
c0020fa4:	6a 01                	push   0x1
c0020fa6:	68 34 0f 02 c0       	push   0xc0020f34
c0020fab:	52                   	push   edx
c0020fac:	50                   	push   eax
c0020fad:	e8 f0 89 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020fb2:	83 c4 20             	add    esp,0x20
c0020fb5:	89 c2                	mov    edx,eax
c0020fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fbb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020fc1:	b8 00 00 00 00       	mov    eax,0x0
c0020fc6:	83 c4 0c             	add    esp,0xc
c0020fc9:	c3                   	ret    
c0020fca:	66 90                	xchg   ax,ax

c0020fcc <APICTimer::write(int)>:
c0020fcc:	83 ec 0c             	sub    esp,0xc
c0020fcf:	83 ec 0c             	sub    esp,0xc
c0020fd2:	68 18 60 02 c0       	push   0xc0026018
c0020fd7:	e8 34 eb fe ff       	call   c000fb10 <KePanic(char const*)>
c0020fdc:	83 c4 10             	add    esp,0x10
c0020fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fe7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020fed:	90                   	nop
c0020fee:	83 c4 0c             	add    esp,0xc
c0020ff1:	c3                   	ret    
c0020ff2:	66 90                	xchg   ax,ax

c0020ff4 <APICTimer::APICTimer()>:
c0020ff4:	83 ec 0c             	sub    esp,0xc
c0020ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ffb:	83 ec 08             	sub    esp,0x8
c0020ffe:	68 28 60 02 c0       	push   0xc0026028
c0021003:	50                   	push   eax
c0021004:	e8 f7 9f fe ff       	call   c000b000 <Timer::Timer(char const*)>
c0021009:	83 c4 10             	add    esp,0x10
c002100c:	ba 3c 60 02 c0       	mov    edx,0xc002603c
c0021011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021015:	89 10                	mov    DWORD PTR [eax],edx
c0021017:	90                   	nop
c0021018:	83 c4 0c             	add    esp,0xc
c002101b:	c3                   	ret    

c002101c <PIT::write(int)>:
c002101c:	83 ec 10             	sub    esp,0x10
c002101f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021023:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021027:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002102d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021031:	a3 f8 f4 02 c0       	mov    ds:0xc002f4f8,eax
c0021036:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002103b:	89 c2                	mov    edx,eax
c002103d:	c1 fa 1f             	sar    edx,0x1f
c0021040:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021044:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021048:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002104f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021054:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021058:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002105d:	ee                   	out    dx,al
c002105e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021062:	0f b6 c0             	movzx  eax,al
c0021065:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002106c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021070:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021074:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021079:	ee                   	out    dx,al
c002107a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002107e:	c1 f8 08             	sar    eax,0x8
c0021081:	0f b6 c0             	movzx  eax,al
c0021084:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002108b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002108f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021093:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021098:	ee                   	out    dx,al
c0021099:	90                   	nop
c002109a:	83 c4 10             	add    esp,0x10
c002109d:	c3                   	ret    
c002109e:	66 90                	xchg   ax,ax

c00210a0 <pitHandler(regs*, void*)>:
c00210a0:	83 ec 0c             	sub    esp,0xc
c00210a3:	8b 0d f8 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4f8
c00210a9:	b8 10 27 00 00       	mov    eax,0x2710
c00210ae:	89 c2                	mov    edx,eax
c00210b0:	c1 fa 1f             	sar    edx,0x1f
c00210b3:	f7 f9                	idiv   ecx
c00210b5:	83 ec 0c             	sub    esp,0xc
c00210b8:	50                   	push   eax
c00210b9:	e8 0e a0 fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c00210be:	83 c4 10             	add    esp,0x10
c00210c1:	90                   	nop
c00210c2:	83 c4 0c             	add    esp,0xc
c00210c5:	c3                   	ret    
c00210c6:	66 90                	xchg   ax,ax

c00210c8 <PIT::open(int, int, void*)>:
c00210c8:	83 ec 0c             	sub    esp,0xc
c00210cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00210d1:	83 c0 24             	add    eax,0x24
c00210d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00210d6:	83 ec 08             	sub    esp,0x8
c00210d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210e1:	ff d0                	call   eax
c00210e3:	83 c4 10             	add    esp,0x10
c00210e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ea:	83 ec 0c             	sub    esp,0xc
c00210ed:	6a 00                	push   0x0
c00210ef:	6a 01                	push   0x1
c00210f1:	68 a0 10 02 c0       	push   0xc00210a0
c00210f6:	6a 00                	push   0x0
c00210f8:	50                   	push   eax
c00210f9:	e8 a4 88 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00210fe:	83 c4 20             	add    esp,0x20
c0021101:	89 c2                	mov    edx,eax
c0021103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021107:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002110d:	b8 00 00 00 00       	mov    eax,0x0
c0021112:	83 c4 0c             	add    esp,0xc
c0021115:	c3                   	ret    
c0021116:	66 90                	xchg   ax,ax

c0021118 <PIT::close(int, int, void*)>:
c0021118:	83 ec 0c             	sub    esp,0xc
c002111b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112d:	6a 01                	push   0x1
c002112f:	68 a0 10 02 c0       	push   0xc00210a0
c0021134:	6a 00                	push   0x0
c0021136:	50                   	push   eax
c0021137:	e8 9c 88 fe ff       	call   c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002113c:	83 c4 10             	add    esp,0x10
c002113f:	b8 00 00 00 00       	mov    eax,0x0
c0021144:	83 c4 0c             	add    esp,0xc
c0021147:	c3                   	ret    

c0021148 <PIT::PIT()>:
c0021148:	83 ec 0c             	sub    esp,0xc
c002114b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002114f:	83 ec 08             	sub    esp,0x8
c0021152:	68 64 60 02 c0       	push   0xc0026064
c0021157:	50                   	push   eax
c0021158:	e8 a3 9e fe ff       	call   c000b000 <Timer::Timer(char const*)>
c002115d:	83 c4 10             	add    esp,0x10
c0021160:	ba 8c 60 02 c0       	mov    edx,0xc002608c
c0021165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021169:	89 10                	mov    DWORD PTR [eax],edx
c002116b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002116f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021175:	0f b6 d0             	movzx  edx,al
c0021178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021187:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002118d:	0f b6 d0             	movzx  edx,al
c0021190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021194:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002119d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00211a3:	8d 50 01             	lea    edx,[eax+0x1]
c00211a6:	88 d1                	mov    cl,dl
c00211a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211ac:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00211b2:	0f b6 d0             	movzx  edx,al
c00211b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00211bd:	83 e1 3f             	and    ecx,0x3f
c00211c0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00211c4:	90                   	nop
c00211c5:	83 c4 0c             	add    esp,0xc
c00211c8:	c3                   	ret    
c00211c9:	66 90                	xchg   ax,ax
c00211cb:	66 90                	xchg   ax,ax
c00211cd:	66 90                	xchg   ax,ax
c00211cf:	90                   	nop

c00211d0 <avxDetect>:
c00211d0:	b8 01 00 00 00       	mov    eax,0x1
c00211d5:	0f a2                	cpuid  
c00211d7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00211dd:	74 15                	je     c00211f4 <avxDetect.noAVX>
c00211df:	b8 01 00 00 00       	mov    eax,0x1
c00211e4:	0f a2                	cpuid  
c00211e6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00211ec:	74 06                	je     c00211f4 <avxDetect.noAVX>
c00211ee:	b8 01 00 00 00       	mov    eax,0x1
c00211f3:	c3                   	ret    

c00211f4 <avxDetect.noAVX>:
c00211f4:	b8 00 00 00 00       	mov    eax,0x0
c00211f9:	c3                   	ret    

c00211fa <avxSave>:
c00211fa:	53                   	push   ebx
c00211fb:	52                   	push   edx
c00211fc:	31 c0                	xor    eax,eax
c00211fe:	48                   	dec    eax
c00211ff:	89 c2                	mov    edx,eax
c0021201:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021205:	0f ae 23             	xsave  [ebx]
c0021208:	5a                   	pop    edx
c0021209:	5b                   	pop    ebx
c002120a:	c3                   	ret    

c002120b <avxLoad>:
c002120b:	53                   	push   ebx
c002120c:	52                   	push   edx
c002120d:	31 c0                	xor    eax,eax
c002120f:	48                   	dec    eax
c0021210:	89 c2                	mov    edx,eax
c0021212:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021216:	0f ae 2b             	xrstor [ebx]
c0021219:	5a                   	pop    edx
c002121a:	5b                   	pop    ebx
c002121b:	c3                   	ret    

c002121c <avxInit>:
c002121c:	e8 17 03 00 00       	call   c0021538 <sseInit>
c0021221:	50                   	push   eax
c0021222:	51                   	push   ecx
c0021223:	0f 20 e0             	mov    eax,cr4
c0021226:	0d 00 00 04 00       	or     eax,0x40000
c002122b:	0f 22 e0             	mov    cr4,eax
c002122e:	31 c9                	xor    ecx,ecx
c0021230:	0f 01 d0             	xgetbv 
c0021233:	0d 07 00 00 00       	or     eax,0x7
c0021238:	0f 01 d1             	xsetbv 
c002123b:	59                   	pop    ecx
c002123c:	58                   	pop    eax
c002123d:	c3                   	ret    

c002123e <avxClose>:
c002123e:	c3                   	ret    
c002123f:	90                   	nop

c0021240 <isr0>:
c0021240:	fa                   	cli    
c0021241:	68 00 00 00 00       	push   0x0
c0021246:	68 00 00 00 00       	push   0x0
c002124b:	e9 56 01 00 00       	jmp    c00213a6 <int_common_stub>

c0021250 <isr1>:
c0021250:	fa                   	cli    
c0021251:	6a 00                	push   0x0
c0021253:	6a 01                	push   0x1
c0021255:	e9 4c 01 00 00       	jmp    c00213a6 <int_common_stub>

c002125a <isr2>:
c002125a:	fa                   	cli    
c002125b:	6a 00                	push   0x0
c002125d:	6a 02                	push   0x2
c002125f:	e9 42 01 00 00       	jmp    c00213a6 <int_common_stub>

c0021264 <isr3>:
c0021264:	fa                   	cli    
c0021265:	6a 00                	push   0x0
c0021267:	6a 03                	push   0x3
c0021269:	e9 38 01 00 00       	jmp    c00213a6 <int_common_stub>

c002126e <isr4>:
c002126e:	fa                   	cli    
c002126f:	6a 00                	push   0x0
c0021271:	6a 04                	push   0x4
c0021273:	e9 2e 01 00 00       	jmp    c00213a6 <int_common_stub>

c0021278 <isr5>:
c0021278:	fa                   	cli    
c0021279:	6a 00                	push   0x0
c002127b:	6a 05                	push   0x5
c002127d:	e9 24 01 00 00       	jmp    c00213a6 <int_common_stub>

c0021282 <isr6>:
c0021282:	fa                   	cli    
c0021283:	6a 00                	push   0x0
c0021285:	6a 06                	push   0x6
c0021287:	e9 1a 01 00 00       	jmp    c00213a6 <int_common_stub>

c002128c <isr7>:
c002128c:	fa                   	cli    
c002128d:	6a 00                	push   0x0
c002128f:	6a 07                	push   0x7
c0021291:	e9 10 01 00 00       	jmp    c00213a6 <int_common_stub>

c0021296 <isr8>:
c0021296:	fa                   	cli    
c0021297:	6a 08                	push   0x8
c0021299:	e9 08 01 00 00       	jmp    c00213a6 <int_common_stub>

c002129e <isr9>:
c002129e:	fa                   	cli    
c002129f:	6a 00                	push   0x0
c00212a1:	6a 09                	push   0x9
c00212a3:	e9 fe 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212a8 <isr10>:
c00212a8:	fa                   	cli    
c00212a9:	6a 0a                	push   0xa
c00212ab:	e9 f6 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212b0 <isr11>:
c00212b0:	fa                   	cli    
c00212b1:	6a 0b                	push   0xb
c00212b3:	e9 ee 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212b8 <isr12>:
c00212b8:	fa                   	cli    
c00212b9:	6a 0c                	push   0xc
c00212bb:	e9 e6 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212c0 <isr13>:
c00212c0:	fa                   	cli    
c00212c1:	6a 0d                	push   0xd
c00212c3:	53                   	push   ebx
c00212c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00212c8:	81 fb 65 14 02 c0    	cmp    ebx,0xc0021465
c00212ce:	5b                   	pop    ebx
c00212cf:	0f 84 92 01 00 00    	je     c0021467 <finishSignal2>
c00212d5:	e9 cc 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212da <isr14>:
c00212da:	fa                   	cli    
c00212db:	6a 0e                	push   0xe
c00212dd:	e9 c4 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212e2 <isr15>:
c00212e2:	fa                   	cli    
c00212e3:	6a 00                	push   0x0
c00212e5:	6a 0f                	push   0xf
c00212e7:	e9 ba 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212ec <isr16>:
c00212ec:	fa                   	cli    
c00212ed:	6a 00                	push   0x0
c00212ef:	6a 10                	push   0x10
c00212f1:	e9 b0 00 00 00       	jmp    c00213a6 <int_common_stub>

c00212f6 <isr17>:
c00212f6:	fa                   	cli    
c00212f7:	6a 00                	push   0x0
c00212f9:	6a 11                	push   0x11
c00212fb:	e9 a6 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021300 <isr18>:
c0021300:	fa                   	cli    
c0021301:	6a 00                	push   0x0
c0021303:	6a 12                	push   0x12
c0021305:	e9 9c 00 00 00       	jmp    c00213a6 <int_common_stub>

c002130a <irq3>:
c002130a:	fa                   	cli    
c002130b:	6a 00                	push   0x0
c002130d:	6a 23                	push   0x23
c002130f:	e9 92 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021314 <irq4>:
c0021314:	fa                   	cli    
c0021315:	6a 00                	push   0x0
c0021317:	6a 24                	push   0x24
c0021319:	e9 88 00 00 00       	jmp    c00213a6 <int_common_stub>

c002131e <irq5>:
c002131e:	fa                   	cli    
c002131f:	6a 00                	push   0x0
c0021321:	6a 25                	push   0x25
c0021323:	e9 7e 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021328 <irq6>:
c0021328:	fa                   	cli    
c0021329:	6a 00                	push   0x0
c002132b:	6a 26                	push   0x26
c002132d:	e9 74 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021332 <irq7>:
c0021332:	fa                   	cli    
c0021333:	6a 00                	push   0x0
c0021335:	6a 27                	push   0x27
c0021337:	e9 6a 00 00 00       	jmp    c00213a6 <int_common_stub>

c002133c <irq8>:
c002133c:	fa                   	cli    
c002133d:	6a 00                	push   0x0
c002133f:	6a 28                	push   0x28
c0021341:	e9 60 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021346 <irq9>:
c0021346:	fa                   	cli    
c0021347:	6a 00                	push   0x0
c0021349:	6a 29                	push   0x29
c002134b:	e9 56 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021350 <irq10>:
c0021350:	fa                   	cli    
c0021351:	6a 00                	push   0x0
c0021353:	6a 2a                	push   0x2a
c0021355:	e9 4c 00 00 00       	jmp    c00213a6 <int_common_stub>

c002135a <irq11>:
c002135a:	fa                   	cli    
c002135b:	6a 00                	push   0x0
c002135d:	6a 2b                	push   0x2b
c002135f:	e9 42 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021364 <irq12>:
c0021364:	fa                   	cli    
c0021365:	6a 00                	push   0x0
c0021367:	6a 2c                	push   0x2c
c0021369:	e9 38 00 00 00       	jmp    c00213a6 <int_common_stub>

c002136e <irq13>:
c002136e:	fa                   	cli    
c002136f:	6a 00                	push   0x0
c0021371:	6a 2d                	push   0x2d
c0021373:	e9 2e 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021378 <irq14>:
c0021378:	fa                   	cli    
c0021379:	6a 00                	push   0x0
c002137b:	6a 2e                	push   0x2e
c002137d:	e9 24 00 00 00       	jmp    c00213a6 <int_common_stub>

c0021382 <irq15>:
c0021382:	fa                   	cli    
c0021383:	6a 00                	push   0x0
c0021385:	6a 2f                	push   0x2f
c0021387:	e9 1a 00 00 00       	jmp    c00213a6 <int_common_stub>

c002138c <irq1>:
c002138c:	fa                   	cli    
c002138d:	6a 00                	push   0x0
c002138f:	6a 21                	push   0x21
c0021391:	eb 13                	jmp    c00213a6 <int_common_stub>

c0021393 <irq2>:
c0021393:	fa                   	cli    
c0021394:	6a 00                	push   0x0
c0021396:	6a 22                	push   0x22
c0021398:	eb 0c                	jmp    c00213a6 <int_common_stub>

c002139a <isr96>:
c002139a:	6a 00                	push   0x0
c002139c:	6a 60                	push   0x60
c002139e:	fb                   	sti    
c002139f:	eb 05                	jmp    c00213a6 <int_common_stub>

c00213a1 <irq0>:
c00213a1:	fa                   	cli    
c00213a2:	6a 00                	push   0x0
c00213a4:	6a 20                	push   0x20

c00213a6 <int_common_stub>:
c00213a6:	60                   	pusha  
c00213a7:	1e                   	push   ds
c00213a8:	06                   	push   es
c00213a9:	0f a0                	push   fs
c00213ab:	0f a8                	push   gs
c00213ad:	66 b8 10 00          	mov    ax,0x10
c00213b1:	66 8e d8             	mov    ds,ax
c00213b4:	66 8e c0             	mov    es,ax
c00213b7:	66 8e e0             	mov    fs,ax
c00213ba:	66 8e e8             	mov    gs,ax
c00213bd:	54                   	push   esp
c00213be:	fc                   	cld    
c00213bf:	e8 02 95 ff ff       	call   c001a8c6 <int_handler>
c00213c4:	81 c4 04 00 00 00    	add    esp,0x4
c00213ca:	0f a9                	pop    gs
c00213cc:	0f a1                	pop    fs
c00213ce:	07                   	pop    es
c00213cf:	1f                   	pop    ds
c00213d0:	e8 9e fb fe ff       	call   c0010f73 <KiCheckSignalZ>
c00213d5:	85 c0                	test   eax,eax
c00213d7:	75 08                	jne    c00213e1 <doSignals>
c00213d9:	61                   	popa   
c00213da:	81 c4 08 00 00 00    	add    esp,0x8
c00213e0:	cf                   	iret   

c00213e1 <doSignals>:
c00213e1:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00213e6:	61                   	popa   
c00213e7:	53                   	push   ebx
c00213e8:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00213ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00213f1:	5b                   	pop    ebx
c00213f2:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00213f7:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00213fa:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00213fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021400:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021403:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021406:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021409:	81 c4 08 00 00 00    	add    esp,0x8
c002140f:	5e                   	pop    esi
c0021410:	5b                   	pop    ebx
c0021411:	59                   	pop    ecx
c0021412:	5a                   	pop    edx
c0021413:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021416:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021419:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002141c:	52                   	push   edx
c002141d:	51                   	push   ecx
c002141e:	53                   	push   ebx
c002141f:	56                   	push   esi
c0021420:	81 ec 08 00 00 00    	sub    esp,0x8
c0021426:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021429:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002142c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002142f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021432:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021435:	60                   	pusha  
c0021436:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002143c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002143f:	89 e3                	mov    ebx,esp
c0021441:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021444:	52                   	push   edx
c0021445:	68 65 14 02 c0       	push   0xc0021465
c002144a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002144d:	89 dc                	mov    esp,ebx
c002144f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021452:	68 23 00 00 00       	push   0x23
c0021457:	51                   	push   ecx
c0021458:	68 02 02 00 00       	push   0x202
c002145d:	68 1b 00 00 00       	push   0x1b
c0021462:	ff 36                	push   DWORD PTR [esi]
c0021464:	cf                   	iret   

c0021465 <finishSignal>:
c0021465:	cd 0f                	int    0xf

c0021467 <finishSignal2>:
c0021467:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002146d:	e8 8d fb fe ff       	call   c0010fff <KiFinishSignalZ>
c0021472:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021478:	68 23 00 00 00       	push   0x23
c002147d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021480:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021483:	68 1b 00 00 00       	push   0x1b
c0021488:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002148b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002148e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021491:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021494:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021497:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002149a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002149d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00214a0:	cf                   	iret   
c00214a1:	90                   	nop
c00214a2:	90                   	nop
c00214a3:	90                   	nop

c00214a4 <irq16>:
c00214a4:	fa                   	cli    
c00214a5:	6a 00                	push   0x0
c00214a7:	6a 30                	push   0x30
c00214a9:	e9 f8 fe ff ff       	jmp    c00213a6 <int_common_stub>

c00214ae <irq17>:
c00214ae:	fa                   	cli    
c00214af:	6a 00                	push   0x0
c00214b1:	6a 31                	push   0x31
c00214b3:	e9 ee fe ff ff       	jmp    c00213a6 <int_common_stub>

c00214b8 <irq18>:
c00214b8:	fa                   	cli    
c00214b9:	6a 00                	push   0x0
c00214bb:	6a 32                	push   0x32
c00214bd:	e9 e4 fe ff ff       	jmp    c00213a6 <int_common_stub>

c00214c2 <irq19>:
c00214c2:	fa                   	cli    
c00214c3:	6a 00                	push   0x0
c00214c5:	6a 33                	push   0x33
c00214c7:	e9 da fe ff ff       	jmp    c00213a6 <int_common_stub>

c00214cc <irq20>:
c00214cc:	fa                   	cli    
c00214cd:	6a 00                	push   0x0
c00214cf:	6a 34                	push   0x34
c00214d1:	e9 d0 fe ff ff       	jmp    c00213a6 <int_common_stub>

c00214d6 <irq21>:
c00214d6:	fa                   	cli    
c00214d7:	6a 00                	push   0x0
c00214d9:	6a 35                	push   0x35
c00214db:	e9 c6 fe ff ff       	jmp    c00213a6 <int_common_stub>

c00214e0 <irq22>:
c00214e0:	fa                   	cli    
c00214e1:	6a 00                	push   0x0
c00214e3:	6a 36                	push   0x36
c00214e5:	e9 bc fe ff ff       	jmp    c00213a6 <int_common_stub>

c00214ea <irq23>:
c00214ea:	fa                   	cli    
c00214eb:	6a 00                	push   0x0
c00214ed:	6a 37                	push   0x37
c00214ef:	e9 b2 fe ff ff       	jmp    c00213a6 <int_common_stub>
c00214f4:	66 90                	xchg   ax,ax
c00214f6:	66 90                	xchg   ax,ax
c00214f8:	66 90                	xchg   ax,ax
c00214fa:	66 90                	xchg   ax,ax
c00214fc:	66 90                	xchg   ax,ax
c00214fe:	66 90                	xchg   ax,ax

c0021500 <i386GetRDRAND>:
c0021500:	b9 64 00 00 00       	mov    ecx,0x64

c0021505 <retry>:
c0021505:	0f c7 f0             	rdrand eax
c0021508:	72 05                	jb     c002150f <retry.done>
c002150a:	e2 f9                	loop   c0021505 <retry>

c002150c <retry.fail>:
c002150c:	31 c0                	xor    eax,eax
c002150e:	c3                   	ret    

c002150f <retry.done>:
c002150f:	c3                   	ret    

c0021510 <sseDetect>:
c0021510:	b8 01 00 00 00       	mov    eax,0x1
c0021515:	0f a2                	cpuid  
c0021517:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002151d:	74 06                	je     c0021525 <sseDetect.noSSE>
c002151f:	b8 01 00 00 00       	mov    eax,0x1
c0021524:	c3                   	ret    

c0021525 <sseDetect.noSSE>:
c0021525:	31 c0                	xor    eax,eax
c0021527:	c3                   	ret    

c0021528 <sseSave>:
c0021528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002152c:	0f ae 00             	fxsave [eax]
c002152f:	c3                   	ret    

c0021530 <sseLoad>:
c0021530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021534:	0f ae 08             	fxrstor [eax]
c0021537:	c3                   	ret    

c0021538 <sseInit>:
c0021538:	e8 48 00 00 00       	call   c0021585 <x87Init>
c002153d:	0f 20 e0             	mov    eax,cr4
c0021540:	66 0d 00 06          	or     ax,0x600
c0021544:	0f 22 e0             	mov    cr4,eax
c0021547:	c3                   	ret    

c0021548 <sseClose>:
c0021548:	c3                   	ret    
c0021549:	66 90                	xchg   ax,ax
c002154b:	66 90                	xchg   ax,ax
c002154d:	66 90                	xchg   ax,ax
c002154f:	90                   	nop

c0021550 <value_37F>:
c0021550:	7f 03                	jg     c0021555 <value_37A+0x1>

c0021552 <value_37E>:
c0021552:	7e 03                	jle    c0021557 <x87Detect+0x1>

c0021554 <value_37A>:
c0021554:	7a 03                	jp     c0021559 <x87Detect+0x3>

c0021556 <x87Detect>:
c0021556:	53                   	push   ebx
c0021557:	51                   	push   ecx
c0021558:	52                   	push   edx
c0021559:	b8 01 00 00 00       	mov    eax,0x1
c002155e:	0f a2                	cpuid  
c0021560:	f7 c2 01 00 00 00    	test   edx,0x1
c0021566:	74 06                	je     c002156e <x87Detect.nox87>
c0021568:	b8 01 00 00 00       	mov    eax,0x1
c002156d:	c3                   	ret    

c002156e <x87Detect.nox87>:
c002156e:	b8 00 00 00 00       	mov    eax,0x0
c0021573:	5a                   	pop    edx
c0021574:	59                   	pop    ecx
c0021575:	5b                   	pop    ebx
c0021576:	c3                   	ret    

c0021577 <x87Save>:
c0021577:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002157b:	dd 30                	fnsave [eax]
c002157d:	c3                   	ret    

c002157e <x87Load>:
c002157e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021582:	dd 20                	frstor [eax]
c0021584:	c3                   	ret    

c0021585 <x87Init>:
c0021585:	0f 20 c0             	mov    eax,cr0
c0021588:	66 25 fb ff          	and    ax,0xfffb
c002158c:	66 0d 22 00          	or     ax,0x22
c0021590:	0f 22 c0             	mov    cr0,eax
c0021593:	db e3                	fninit 
c0021595:	0f 06                	clts   
c0021597:	d9 2d 54 15 02 c0    	fldcw  WORD PTR ds:0xc0021554
c002159d:	c3                   	ret    

c002159e <x87Close>:
c002159e:	c3                   	ret    
c002159f:	90                   	nop

c00215a0 <__do_global_ctors_aux>:
c00215a0:	a1 54 25 02 c0       	mov    eax,ds:0xc0022554
c00215a5:	83 f8 ff             	cmp    eax,0xffffffff
c00215a8:	74 1a                	je     c00215c4 <__do_global_ctors_aux+0x24>
c00215aa:	55                   	push   ebp
c00215ab:	89 e5                	mov    ebp,esp
c00215ad:	53                   	push   ebx
c00215ae:	52                   	push   edx
c00215af:	bb 54 25 02 c0       	mov    ebx,0xc0022554
c00215b4:	ff d0                	call   eax
c00215b6:	83 eb 04             	sub    ebx,0x4
c00215b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00215bb:	83 f8 ff             	cmp    eax,0xffffffff
c00215be:	75 f4                	jne    c00215b4 <__do_global_ctors_aux+0x14>
c00215c0:	58                   	pop    eax
c00215c1:	5b                   	pop    ebx
c00215c2:	5d                   	pop    ebp
c00215c3:	c3                   	ret    
c00215c4:	c3                   	ret    
c00215c5:	66 90                	xchg   ax,ax
c00215c7:	90                   	nop

c00215c8 <__divdi3>:
c00215c8:	55                   	push   ebp
c00215c9:	57                   	push   edi
c00215ca:	56                   	push   esi
c00215cb:	53                   	push   ebx
c00215cc:	83 ec 1c             	sub    esp,0x1c
c00215cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00215d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00215d7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00215da:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00215de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00215e6:	85 db                	test   ebx,ebx
c00215e8:	0f 88 8e 00 00 00    	js     c002167c <__divdi3+0xb4>
c00215ee:	89 dd                	mov    ebp,ebx
c00215f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00215f8:	89 d3                	mov    ebx,edx
c00215fa:	85 d2                	test   edx,edx
c00215fc:	79 0d                	jns    c002160b <__divdi3+0x43>
c00215fe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021602:	f7 d8                	neg    eax
c0021604:	83 d2 00             	adc    edx,0x0
c0021607:	f7 da                	neg    edx
c0021609:	89 d3                	mov    ebx,edx
c002160b:	89 c7                	mov    edi,eax
c002160d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021610:	85 db                	test   ebx,ebx
c0021612:	75 48                	jne    c002165c <__divdi3+0x94>
c0021614:	39 ef                	cmp    edi,ebp
c0021616:	76 24                	jbe    c002163c <__divdi3+0x74>
c0021618:	89 ea                	mov    edx,ebp
c002161a:	f7 f7                	div    edi
c002161c:	89 c1                	mov    ecx,eax
c002161e:	31 f6                	xor    esi,esi
c0021620:	89 c8                	mov    eax,ecx
c0021622:	89 f2                	mov    edx,esi
c0021624:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021628:	85 c9                	test   ecx,ecx
c002162a:	74 07                	je     c0021633 <__divdi3+0x6b>
c002162c:	f7 d8                	neg    eax
c002162e:	83 d2 00             	adc    edx,0x0
c0021631:	f7 da                	neg    edx
c0021633:	83 c4 1c             	add    esp,0x1c
c0021636:	5b                   	pop    ebx
c0021637:	5e                   	pop    esi
c0021638:	5f                   	pop    edi
c0021639:	5d                   	pop    ebp
c002163a:	c3                   	ret    
c002163b:	90                   	nop
c002163c:	85 ff                	test   edi,edi
c002163e:	75 0b                	jne    c002164b <__divdi3+0x83>
c0021640:	b8 01 00 00 00       	mov    eax,0x1
c0021645:	31 d2                	xor    edx,edx
c0021647:	f7 f3                	div    ebx
c0021649:	89 c7                	mov    edi,eax
c002164b:	31 d2                	xor    edx,edx
c002164d:	89 e8                	mov    eax,ebp
c002164f:	f7 f7                	div    edi
c0021651:	89 c6                	mov    esi,eax
c0021653:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021656:	f7 f7                	div    edi
c0021658:	89 c1                	mov    ecx,eax
c002165a:	eb c4                	jmp    c0021620 <__divdi3+0x58>
c002165c:	39 eb                	cmp    ebx,ebp
c002165e:	77 3c                	ja     c002169c <__divdi3+0xd4>
c0021660:	0f bd f3             	bsr    esi,ebx
c0021663:	83 f6 1f             	xor    esi,0x1f
c0021666:	75 40                	jne    c00216a8 <__divdi3+0xe0>
c0021668:	39 eb                	cmp    ebx,ebp
c002166a:	72 09                	jb     c0021675 <__divdi3+0xad>
c002166c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002166f:	0f 87 97 00 00 00    	ja     c002170c <__divdi3+0x144>
c0021675:	b9 01 00 00 00       	mov    ecx,0x1
c002167a:	eb a4                	jmp    c0021620 <__divdi3+0x58>
c002167c:	f7 d9                	neg    ecx
c002167e:	83 d3 00             	adc    ebx,0x0
c0021681:	f7 db                	neg    ebx
c0021683:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021686:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002168a:	89 dd                	mov    ebp,ebx
c002168c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021694:	e9 5f ff ff ff       	jmp    c00215f8 <__divdi3+0x30>
c0021699:	8d 76 00             	lea    esi,[esi+0x0]
c002169c:	31 f6                	xor    esi,esi
c002169e:	31 c9                	xor    ecx,ecx
c00216a0:	e9 7b ff ff ff       	jmp    c0021620 <__divdi3+0x58>
c00216a5:	8d 76 00             	lea    esi,[esi+0x0]
c00216a8:	b8 20 00 00 00       	mov    eax,0x20
c00216ad:	29 f0                	sub    eax,esi
c00216af:	89 f1                	mov    ecx,esi
c00216b1:	d3 e3                	shl    ebx,cl
c00216b3:	89 fa                	mov    edx,edi
c00216b5:	88 c1                	mov    cl,al
c00216b7:	d3 ea                	shr    edx,cl
c00216b9:	09 da                	or     edx,ebx
c00216bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216bf:	89 f1                	mov    ecx,esi
c00216c1:	d3 e7                	shl    edi,cl
c00216c3:	89 eb                	mov    ebx,ebp
c00216c5:	88 c1                	mov    cl,al
c00216c7:	d3 eb                	shr    ebx,cl
c00216c9:	89 f1                	mov    ecx,esi
c00216cb:	d3 e5                	shl    ebp,cl
c00216cd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00216d0:	88 c1                	mov    cl,al
c00216d2:	d3 ea                	shr    edx,cl
c00216d4:	09 d5                	or     ebp,edx
c00216d6:	89 e8                	mov    eax,ebp
c00216d8:	89 da                	mov    edx,ebx
c00216da:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00216de:	89 d3                	mov    ebx,edx
c00216e0:	89 c5                	mov    ebp,eax
c00216e2:	f7 e7                	mul    edi
c00216e4:	39 d3                	cmp    ebx,edx
c00216e6:	72 18                	jb     c0021700 <__divdi3+0x138>
c00216e8:	74 0a                	je     c00216f4 <__divdi3+0x12c>
c00216ea:	89 e9                	mov    ecx,ebp
c00216ec:	31 f6                	xor    esi,esi
c00216ee:	e9 2d ff ff ff       	jmp    c0021620 <__divdi3+0x58>
c00216f3:	90                   	nop
c00216f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00216f7:	89 f1                	mov    ecx,esi
c00216f9:	d3 e7                	shl    edi,cl
c00216fb:	39 c7                	cmp    edi,eax
c00216fd:	73 eb                	jae    c00216ea <__divdi3+0x122>
c00216ff:	90                   	nop
c0021700:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021703:	31 f6                	xor    esi,esi
c0021705:	e9 16 ff ff ff       	jmp    c0021620 <__divdi3+0x58>
c002170a:	66 90                	xchg   ax,ax
c002170c:	31 c9                	xor    ecx,ecx
c002170e:	e9 0d ff ff ff       	jmp    c0021620 <__divdi3+0x58>
c0021713:	90                   	nop

c0021714 <__moddi3>:
c0021714:	55                   	push   ebp
c0021715:	57                   	push   edi
c0021716:	56                   	push   esi
c0021717:	53                   	push   ebx
c0021718:	83 ec 2c             	sub    esp,0x2c
c002171b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002171f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021723:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021727:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002172b:	85 db                	test   ebx,ebx
c002172d:	0f 88 85 00 00 00    	js     c00217b8 <__moddi3+0xa4>
c0021733:	89 de                	mov    esi,ebx
c0021735:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002173d:	89 d7                	mov    edi,edx
c002173f:	85 d2                	test   edx,edx
c0021741:	79 09                	jns    c002174c <__moddi3+0x38>
c0021743:	f7 d8                	neg    eax
c0021745:	83 d2 00             	adc    edx,0x0
c0021748:	f7 da                	neg    edx
c002174a:	89 d7                	mov    edi,edx
c002174c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021750:	89 cd                	mov    ebp,ecx
c0021752:	85 ff                	test   edi,edi
c0021754:	75 52                	jne    c00217a8 <__moddi3+0x94>
c0021756:	89 c3                	mov    ebx,eax
c0021758:	39 f0                	cmp    eax,esi
c002175a:	76 24                	jbe    c0021780 <__moddi3+0x6c>
c002175c:	89 c8                	mov    eax,ecx
c002175e:	89 f2                	mov    edx,esi
c0021760:	f7 f3                	div    ebx
c0021762:	89 d6                	mov    esi,edx
c0021764:	89 f0                	mov    eax,esi
c0021766:	31 d2                	xor    edx,edx
c0021768:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002176c:	85 c9                	test   ecx,ecx
c002176e:	74 07                	je     c0021777 <__moddi3+0x63>
c0021770:	f7 d8                	neg    eax
c0021772:	83 d2 00             	adc    edx,0x0
c0021775:	f7 da                	neg    edx
c0021777:	83 c4 2c             	add    esp,0x2c
c002177a:	5b                   	pop    ebx
c002177b:	5e                   	pop    esi
c002177c:	5f                   	pop    edi
c002177d:	5d                   	pop    ebp
c002177e:	c3                   	ret    
c002177f:	90                   	nop
c0021780:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021784:	85 db                	test   ebx,ebx
c0021786:	75 0d                	jne    c0021795 <__moddi3+0x81>
c0021788:	b8 01 00 00 00       	mov    eax,0x1
c002178d:	31 d2                	xor    edx,edx
c002178f:	f7 f7                	div    edi
c0021791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021795:	89 f0                	mov    eax,esi
c0021797:	31 d2                	xor    edx,edx
c0021799:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002179d:	f7 f7                	div    edi
c002179f:	89 e8                	mov    eax,ebp
c00217a1:	f7 f7                	div    edi
c00217a3:	89 d6                	mov    esi,edx
c00217a5:	eb bd                	jmp    c0021764 <__moddi3+0x50>
c00217a7:	90                   	nop
c00217a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00217ac:	39 f7                	cmp    edi,esi
c00217ae:	76 20                	jbe    c00217d0 <__moddi3+0xbc>
c00217b0:	89 c8                	mov    eax,ecx
c00217b2:	89 f2                	mov    edx,esi
c00217b4:	eb b2                	jmp    c0021768 <__moddi3+0x54>
c00217b6:	66 90                	xchg   ax,ax
c00217b8:	f7 d9                	neg    ecx
c00217ba:	83 d3 00             	adc    ebx,0x0
c00217bd:	f7 db                	neg    ebx
c00217bf:	89 de                	mov    esi,ebx
c00217c1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00217c9:	e9 6f ff ff ff       	jmp    c002173d <__moddi3+0x29>
c00217ce:	66 90                	xchg   ax,ax
c00217d0:	0f bd c7             	bsr    eax,edi
c00217d3:	83 f0 1f             	xor    eax,0x1f
c00217d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217da:	75 24                	jne    c0021800 <__moddi3+0xec>
c00217dc:	39 f7                	cmp    edi,esi
c00217de:	72 06                	jb     c00217e6 <__moddi3+0xd2>
c00217e0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00217e4:	77 0c                	ja     c00217f2 <__moddi3+0xde>
c00217e6:	89 e9                	mov    ecx,ebp
c00217e8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00217ec:	19 fe                	sbb    esi,edi
c00217ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00217f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217f6:	89 f2                	mov    edx,esi
c00217f8:	e9 6b ff ff ff       	jmp    c0021768 <__moddi3+0x54>
c00217fd:	8d 76 00             	lea    esi,[esi+0x0]
c0021800:	b8 20 00 00 00       	mov    eax,0x20
c0021805:	89 c2                	mov    edx,eax
c0021807:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002180b:	29 da                	sub    edx,ebx
c002180d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021811:	88 d9                	mov    cl,bl
c0021813:	d3 e7                	shl    edi,cl
c0021815:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021819:	88 d1                	mov    cl,dl
c002181b:	d3 e8                	shr    eax,cl
c002181d:	09 c7                	or     edi,eax
c002181f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021823:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021827:	89 d8                	mov    eax,ebx
c0021829:	88 d9                	mov    cl,bl
c002182b:	d3 e7                	shl    edi,cl
c002182d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021831:	89 f3                	mov    ebx,esi
c0021833:	88 d1                	mov    cl,dl
c0021835:	d3 eb                	shr    ebx,cl
c0021837:	89 c7                	mov    edi,eax
c0021839:	88 c1                	mov    cl,al
c002183b:	d3 e6                	shl    esi,cl
c002183d:	89 e8                	mov    eax,ebp
c002183f:	88 d1                	mov    cl,dl
c0021841:	d3 e8                	shr    eax,cl
c0021843:	09 f0                	or     eax,esi
c0021845:	89 f9                	mov    ecx,edi
c0021847:	d3 e5                	shl    ebp,cl
c0021849:	89 da                	mov    edx,ebx
c002184b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002184f:	89 d3                	mov    ebx,edx
c0021851:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021855:	89 c6                	mov    esi,eax
c0021857:	89 d1                	mov    ecx,edx
c0021859:	39 d3                	cmp    ebx,edx
c002185b:	72 27                	jb     c0021884 <__moddi3+0x170>
c002185d:	74 21                	je     c0021880 <__moddi3+0x16c>
c002185f:	29 f5                	sub    ebp,esi
c0021861:	19 cb                	sbb    ebx,ecx
c0021863:	89 de                	mov    esi,ebx
c0021865:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021869:	d3 e6                	shl    esi,cl
c002186b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002186f:	89 f9                	mov    ecx,edi
c0021871:	d3 ed                	shr    ebp,cl
c0021873:	09 ee                	or     esi,ebp
c0021875:	89 f0                	mov    eax,esi
c0021877:	d3 eb                	shr    ebx,cl
c0021879:	89 da                	mov    edx,ebx
c002187b:	e9 e8 fe ff ff       	jmp    c0021768 <__moddi3+0x54>
c0021880:	39 c5                	cmp    ebp,eax
c0021882:	73 db                	jae    c002185f <__moddi3+0x14b>
c0021884:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021888:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002188c:	89 d1                	mov    ecx,edx
c002188e:	89 c6                	mov    esi,eax
c0021890:	eb cd                	jmp    c002185f <__moddi3+0x14b>
c0021892:	66 90                	xchg   ax,ax

c0021894 <__udivdi3>:
c0021894:	55                   	push   ebp
c0021895:	57                   	push   edi
c0021896:	56                   	push   esi
c0021897:	53                   	push   ebx
c0021898:	83 ec 1c             	sub    esp,0x1c
c002189b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002189f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00218a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00218a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00218ab:	85 d2                	test   edx,edx
c00218ad:	75 41                	jne    c00218f0 <__udivdi3+0x5c>
c00218af:	39 f7                	cmp    edi,esi
c00218b1:	76 15                	jbe    c00218c8 <__udivdi3+0x34>
c00218b3:	89 e8                	mov    eax,ebp
c00218b5:	89 f2                	mov    edx,esi
c00218b7:	f7 f7                	div    edi
c00218b9:	31 db                	xor    ebx,ebx
c00218bb:	89 da                	mov    edx,ebx
c00218bd:	83 c4 1c             	add    esp,0x1c
c00218c0:	5b                   	pop    ebx
c00218c1:	5e                   	pop    esi
c00218c2:	5f                   	pop    edi
c00218c3:	5d                   	pop    ebp
c00218c4:	c3                   	ret    
c00218c5:	8d 76 00             	lea    esi,[esi+0x0]
c00218c8:	89 f9                	mov    ecx,edi
c00218ca:	85 ff                	test   edi,edi
c00218cc:	75 0b                	jne    c00218d9 <__udivdi3+0x45>
c00218ce:	b8 01 00 00 00       	mov    eax,0x1
c00218d3:	31 d2                	xor    edx,edx
c00218d5:	f7 f7                	div    edi
c00218d7:	89 c1                	mov    ecx,eax
c00218d9:	31 d2                	xor    edx,edx
c00218db:	89 f0                	mov    eax,esi
c00218dd:	f7 f1                	div    ecx
c00218df:	89 c3                	mov    ebx,eax
c00218e1:	89 e8                	mov    eax,ebp
c00218e3:	f7 f1                	div    ecx
c00218e5:	89 da                	mov    edx,ebx
c00218e7:	83 c4 1c             	add    esp,0x1c
c00218ea:	5b                   	pop    ebx
c00218eb:	5e                   	pop    esi
c00218ec:	5f                   	pop    edi
c00218ed:	5d                   	pop    ebp
c00218ee:	c3                   	ret    
c00218ef:	90                   	nop
c00218f0:	39 f2                	cmp    edx,esi
c00218f2:	77 1c                	ja     c0021910 <__udivdi3+0x7c>
c00218f4:	0f bd da             	bsr    ebx,edx
c00218f7:	83 f3 1f             	xor    ebx,0x1f
c00218fa:	75 24                	jne    c0021920 <__udivdi3+0x8c>
c00218fc:	39 f2                	cmp    edx,esi
c00218fe:	72 08                	jb     c0021908 <__udivdi3+0x74>
c0021900:	39 ef                	cmp    edi,ebp
c0021902:	0f 87 84 00 00 00    	ja     c002198c <__udivdi3+0xf8>
c0021908:	b8 01 00 00 00       	mov    eax,0x1
c002190d:	eb ac                	jmp    c00218bb <__udivdi3+0x27>
c002190f:	90                   	nop
c0021910:	31 db                	xor    ebx,ebx
c0021912:	31 c0                	xor    eax,eax
c0021914:	89 da                	mov    edx,ebx
c0021916:	83 c4 1c             	add    esp,0x1c
c0021919:	5b                   	pop    ebx
c002191a:	5e                   	pop    esi
c002191b:	5f                   	pop    edi
c002191c:	5d                   	pop    ebp
c002191d:	c3                   	ret    
c002191e:	66 90                	xchg   ax,ax
c0021920:	b8 20 00 00 00       	mov    eax,0x20
c0021925:	29 d8                	sub    eax,ebx
c0021927:	88 d9                	mov    cl,bl
c0021929:	d3 e2                	shl    edx,cl
c002192b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002192f:	89 fa                	mov    edx,edi
c0021931:	88 c1                	mov    cl,al
c0021933:	d3 ea                	shr    edx,cl
c0021935:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021939:	09 d1                	or     ecx,edx
c002193b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002193f:	88 d9                	mov    cl,bl
c0021941:	d3 e7                	shl    edi,cl
c0021943:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021947:	89 f7                	mov    edi,esi
c0021949:	88 c1                	mov    cl,al
c002194b:	d3 ef                	shr    edi,cl
c002194d:	88 d9                	mov    cl,bl
c002194f:	d3 e6                	shl    esi,cl
c0021951:	89 ea                	mov    edx,ebp
c0021953:	88 c1                	mov    cl,al
c0021955:	d3 ea                	shr    edx,cl
c0021957:	09 d6                	or     esi,edx
c0021959:	89 f0                	mov    eax,esi
c002195b:	89 fa                	mov    edx,edi
c002195d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021961:	89 d7                	mov    edi,edx
c0021963:	89 c6                	mov    esi,eax
c0021965:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021969:	39 d7                	cmp    edi,edx
c002196b:	72 13                	jb     c0021980 <__udivdi3+0xec>
c002196d:	74 09                	je     c0021978 <__udivdi3+0xe4>
c002196f:	89 f0                	mov    eax,esi
c0021971:	31 db                	xor    ebx,ebx
c0021973:	e9 43 ff ff ff       	jmp    c00218bb <__udivdi3+0x27>
c0021978:	88 d9                	mov    cl,bl
c002197a:	d3 e5                	shl    ebp,cl
c002197c:	39 c5                	cmp    ebp,eax
c002197e:	73 ef                	jae    c002196f <__udivdi3+0xdb>
c0021980:	8d 46 ff             	lea    eax,[esi-0x1]
c0021983:	31 db                	xor    ebx,ebx
c0021985:	e9 31 ff ff ff       	jmp    c00218bb <__udivdi3+0x27>
c002198a:	66 90                	xchg   ax,ax
c002198c:	31 c0                	xor    eax,eax
c002198e:	e9 28 ff ff ff       	jmp    c00218bb <__udivdi3+0x27>
c0021993:	90                   	nop

c0021994 <__umoddi3>:
c0021994:	55                   	push   ebp
c0021995:	57                   	push   edi
c0021996:	56                   	push   esi
c0021997:	53                   	push   ebx
c0021998:	83 ec 1c             	sub    esp,0x1c
c002199b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002199f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00219a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00219a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00219ab:	89 da                	mov    edx,ebx
c00219ad:	85 c0                	test   eax,eax
c00219af:	75 37                	jne    c00219e8 <__umoddi3+0x54>
c00219b1:	39 df                	cmp    edi,ebx
c00219b3:	76 13                	jbe    c00219c8 <__umoddi3+0x34>
c00219b5:	89 f0                	mov    eax,esi
c00219b7:	f7 f7                	div    edi
c00219b9:	89 d0                	mov    eax,edx
c00219bb:	31 d2                	xor    edx,edx
c00219bd:	83 c4 1c             	add    esp,0x1c
c00219c0:	5b                   	pop    ebx
c00219c1:	5e                   	pop    esi
c00219c2:	5f                   	pop    edi
c00219c3:	5d                   	pop    ebp
c00219c4:	c3                   	ret    
c00219c5:	8d 76 00             	lea    esi,[esi+0x0]
c00219c8:	89 fd                	mov    ebp,edi
c00219ca:	85 ff                	test   edi,edi
c00219cc:	75 0b                	jne    c00219d9 <__umoddi3+0x45>
c00219ce:	b8 01 00 00 00       	mov    eax,0x1
c00219d3:	31 d2                	xor    edx,edx
c00219d5:	f7 f7                	div    edi
c00219d7:	89 c5                	mov    ebp,eax
c00219d9:	89 d8                	mov    eax,ebx
c00219db:	31 d2                	xor    edx,edx
c00219dd:	f7 f5                	div    ebp
c00219df:	89 f0                	mov    eax,esi
c00219e1:	f7 f5                	div    ebp
c00219e3:	89 d0                	mov    eax,edx
c00219e5:	eb d4                	jmp    c00219bb <__umoddi3+0x27>
c00219e7:	90                   	nop
c00219e8:	89 f1                	mov    ecx,esi
c00219ea:	39 d8                	cmp    eax,ebx
c00219ec:	76 0a                	jbe    c00219f8 <__umoddi3+0x64>
c00219ee:	89 f0                	mov    eax,esi
c00219f0:	83 c4 1c             	add    esp,0x1c
c00219f3:	5b                   	pop    ebx
c00219f4:	5e                   	pop    esi
c00219f5:	5f                   	pop    edi
c00219f6:	5d                   	pop    ebp
c00219f7:	c3                   	ret    
c00219f8:	0f bd e8             	bsr    ebp,eax
c00219fb:	83 f5 1f             	xor    ebp,0x1f
c00219fe:	75 1c                	jne    c0021a1c <__umoddi3+0x88>
c0021a00:	39 d8                	cmp    eax,ebx
c0021a02:	72 04                	jb     c0021a08 <__umoddi3+0x74>
c0021a04:	39 f7                	cmp    edi,esi
c0021a06:	77 08                	ja     c0021a10 <__umoddi3+0x7c>
c0021a08:	89 da                	mov    edx,ebx
c0021a0a:	29 fe                	sub    esi,edi
c0021a0c:	19 c2                	sbb    edx,eax
c0021a0e:	89 f1                	mov    ecx,esi
c0021a10:	89 c8                	mov    eax,ecx
c0021a12:	83 c4 1c             	add    esp,0x1c
c0021a15:	5b                   	pop    ebx
c0021a16:	5e                   	pop    esi
c0021a17:	5f                   	pop    edi
c0021a18:	5d                   	pop    ebp
c0021a19:	c3                   	ret    
c0021a1a:	66 90                	xchg   ax,ax
c0021a1c:	ba 20 00 00 00       	mov    edx,0x20
c0021a21:	29 ea                	sub    edx,ebp
c0021a23:	89 e9                	mov    ecx,ebp
c0021a25:	d3 e0                	shl    eax,cl
c0021a27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a2b:	89 f8                	mov    eax,edi
c0021a2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a31:	88 d1                	mov    cl,dl
c0021a33:	d3 e8                	shr    eax,cl
c0021a35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a39:	09 c1                	or     ecx,eax
c0021a3b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a3f:	89 e9                	mov    ecx,ebp
c0021a41:	d3 e7                	shl    edi,cl
c0021a43:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021a47:	89 d8                	mov    eax,ebx
c0021a49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a4d:	88 d1                	mov    cl,dl
c0021a4f:	d3 e8                	shr    eax,cl
c0021a51:	89 c7                	mov    edi,eax
c0021a53:	89 e9                	mov    ecx,ebp
c0021a55:	d3 e3                	shl    ebx,cl
c0021a57:	89 f0                	mov    eax,esi
c0021a59:	88 d1                	mov    cl,dl
c0021a5b:	d3 e8                	shr    eax,cl
c0021a5d:	09 d8                	or     eax,ebx
c0021a5f:	89 e9                	mov    ecx,ebp
c0021a61:	d3 e6                	shl    esi,cl
c0021a63:	89 f3                	mov    ebx,esi
c0021a65:	89 fa                	mov    edx,edi
c0021a67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021a6b:	89 d1                	mov    ecx,edx
c0021a6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021a71:	89 c6                	mov    esi,eax
c0021a73:	89 d7                	mov    edi,edx
c0021a75:	39 d1                	cmp    ecx,edx
c0021a77:	72 27                	jb     c0021aa0 <__umoddi3+0x10c>
c0021a79:	74 21                	je     c0021a9c <__umoddi3+0x108>
c0021a7b:	89 ca                	mov    edx,ecx
c0021a7d:	29 f3                	sub    ebx,esi
c0021a7f:	19 fa                	sbb    edx,edi
c0021a81:	89 d0                	mov    eax,edx
c0021a83:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021a87:	d3 e0                	shl    eax,cl
c0021a89:	89 e9                	mov    ecx,ebp
c0021a8b:	d3 eb                	shr    ebx,cl
c0021a8d:	09 d8                	or     eax,ebx
c0021a8f:	d3 ea                	shr    edx,cl
c0021a91:	83 c4 1c             	add    esp,0x1c
c0021a94:	5b                   	pop    ebx
c0021a95:	5e                   	pop    esi
c0021a96:	5f                   	pop    edi
c0021a97:	5d                   	pop    ebp
c0021a98:	c3                   	ret    
c0021a99:	8d 76 00             	lea    esi,[esi+0x0]
c0021a9c:	39 c3                	cmp    ebx,eax
c0021a9e:	73 db                	jae    c0021a7b <__umoddi3+0xe7>
c0021aa0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021aa4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021aa8:	89 d7                	mov    edi,edx
c0021aaa:	89 c6                	mov    esi,eax
c0021aac:	eb cd                	jmp    c0021a7b <__umoddi3+0xe7>

Disassembly of section .init:

c0021aae <_init>:
c0021aae:	55                   	push   ebp
c0021aaf:	89 e5                	mov    ebp,esp
c0021ab1:	e8 3e e6 fd ff       	call   c00000f4 <frame_dummy>
c0021ab6:	e8 e5 fa ff ff       	call   c00215a0 <__do_global_ctors_aux>
c0021abb:	5d                   	pop    ebp
c0021abc:	c3                   	ret    

Disassembly of section .fini:

c0021abd <_fini>:
c0021abd:	55                   	push   ebp
c0021abe:	89 e5                	mov    ebp,esp
c0021ac0:	e8 bf e5 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021ac5:	5d                   	pop    ebp
c0021ac6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021ac8 <DriverlessDevice::~DriverlessDevice()>:
c0021ac8:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c0021acd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad1:	89 10                	mov    DWORD PTR [eax],edx
c0021ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad7:	50                   	push   eax
c0021ad8:	e8 1b 7e fe ff       	call   c00098f8 <Device::~Device()>
c0021add:	83 c4 04             	add    esp,0x4
c0021ae0:	90                   	nop
c0021ae1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021ae2 <DriverlessDevice::~DriverlessDevice()>:
c0021ae2:	83 ec 0c             	sub    esp,0xc
c0021ae5:	83 ec 0c             	sub    esp,0xc
c0021ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aec:	e8 d7 ff ff ff       	call   c0021ac8 <DriverlessDevice::~DriverlessDevice()>
c0021af1:	83 c4 10             	add    esp,0x10
c0021af4:	83 ec 08             	sub    esp,0x8
c0021af7:	68 58 01 00 00       	push   0x158
c0021afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b00:	e8 b7 b7 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0021b05:	83 c4 10             	add    esp,0x10
c0021b08:	83 c4 0c             	add    esp,0xc
c0021b0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021b0c <LinkedList<Device>::addElement(Device*)>:
c0021b0c:	83 ec 0c             	sub    esp,0xc
c0021b0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021b14:	75 10                	jne    c0021b26 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021b16:	83 ec 0c             	sub    esp,0xc
c0021b19:	68 f0 34 02 c0       	push   0xc00234f0
c0021b1e:	e8 ed df fe ff       	call   c000fb10 <KePanic(char const*)>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b2c:	85 c0                	test   eax,eax
c0021b2e:	74 3a                	je     c0021b6a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b37:	85 c0                	test   eax,eax
c0021b39:	74 2f                	je     c0021b6a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b46:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b5e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021b68:	eb 68                	jmp    c0021bd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b70:	85 c0                	test   eax,eax
c0021b72:	75 4e                	jne    c0021bc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b7b:	85 c0                	test   eax,eax
c0021b7d:	75 43                	jne    c0021bc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b87:	89 10                	mov    DWORD PTR [eax],edx
c0021b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b9b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bac:	85 c0                	test   eax,eax
c0021bae:	74 22                	je     c0021bd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021bb0:	83 ec 0c             	sub    esp,0xc
c0021bb3:	68 12 35 02 c0       	push   0xc0023512
c0021bb8:	e8 53 df fe ff       	call   c000fb10 <KePanic(char const*)>
c0021bbd:	83 c4 10             	add    esp,0x10
c0021bc0:	eb 10                	jmp    c0021bd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021bc2:	83 ec 0c             	sub    esp,0xc
c0021bc5:	68 1c 35 02 c0       	push   0xc002351c
c0021bca:	e8 41 df fe ff       	call   c000fb10 <KePanic(char const*)>
c0021bcf:	83 c4 10             	add    esp,0x10
c0021bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bd9:	8d 50 01             	lea    edx,[eax+0x1]
c0021bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021be3:	90                   	nop
c0021be4:	83 c4 0c             	add    esp,0xc
c0021be7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021be8 <LinkedList<Device>::LinkedList()>:
c0021be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c28:	90                   	nop
c0021c29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021c2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c32:	85 c0                	test   eax,eax
c0021c34:	75 0e                	jne    c0021c44 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c3d:	85 c0                	test   eax,eax
c0021c3f:	75 03                	jne    c0021c44 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c41:	b0 01                	mov    al,0x1
c0021c43:	c3                   	ret    
c0021c44:	b0 00                	mov    al,0x0
c0021c46:	90                   	nop
c0021c47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021c48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c4e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021c50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021c50:	83 ec 0c             	sub    esp,0xc
c0021c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c59:	85 c0                	test   eax,eax
c0021c5b:	75 17                	jne    c0021c74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021c5d:	83 ec 0c             	sub    esp,0xc
c0021c60:	68 8c 37 02 c0       	push   0xc002378c
c0021c65:	e8 a6 de fe ff       	call   c000fb10 <KePanic(char const*)>
c0021c6a:	83 c4 10             	add    esp,0x10
c0021c6d:	e9 96 00 00 00       	jmp    c0021d08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021c72:	66 90                	xchg   ax,ax
c0021c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021c7e:	85 c0                	test   eax,eax
c0021c80:	0f 95 c0             	setne  al
c0021c83:	0f b6 c0             	movzx  eax,al
c0021c86:	85 c0                	test   eax,eax
c0021c88:	74 12                	je     c0021c9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021c8a:	83 ec 0c             	sub    esp,0xc
c0021c8d:	68 d7 37 02 c0       	push   0xc00237d7
c0021c92:	e8 79 de fe ff       	call   c000fb10 <KePanic(char const*)>
c0021c97:	83 c4 10             	add    esp,0x10
c0021c9a:	66 90                	xchg   ax,ax
c0021c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ca2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ca5:	85 c0                	test   eax,eax
c0021ca7:	0f 94 c0             	sete   al
c0021caa:	0f b6 c0             	movzx  eax,al
c0021cad:	85 c0                	test   eax,eax
c0021caf:	74 33                	je     c0021ce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ccd:	83 f8 01             	cmp    eax,0x1
c0021cd0:	74 22                	je     c0021cf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021cd2:	83 ec 0c             	sub    esp,0xc
c0021cd5:	68 b0 37 02 c0       	push   0xc00237b0
c0021cda:	e8 31 de fe ff       	call   c000fb10 <KePanic(char const*)>
c0021cdf:	83 c4 10             	add    esp,0x10
c0021ce2:	eb 10                	jmp    c0021cf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf1:	89 10                	mov    DWORD PTR [eax],edx
c0021cf3:	90                   	nop
c0021cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cfb:	8d 50 ff             	lea    edx,[eax-0x1]
c0021cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d05:	8d 76 00             	lea    esi,[esi+0x0]
c0021d08:	83 c4 0c             	add    esp,0xc
c0021d0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021d0c:	83 ec 0c             	sub    esp,0xc
c0021d0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021d14:	75 12                	jne    c0021d28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021d16:	83 ec 0c             	sub    esp,0xc
c0021d19:	68 f0 34 02 c0       	push   0xc00234f0
c0021d1e:	e8 ed dd fe ff       	call   c000fb10 <KePanic(char const*)>
c0021d23:	83 c4 10             	add    esp,0x10
c0021d26:	66 90                	xchg   ax,ax
c0021d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d2e:	85 c0                	test   eax,eax
c0021d30:	74 36                	je     c0021d68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d39:	85 c0                	test   eax,eax
c0021d3b:	74 2b                	je     c0021d68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021d64:	eb 6a                	jmp    c0021dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021d66:	66 90                	xchg   ax,ax
c0021d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d6e:	85 c0                	test   eax,eax
c0021d70:	75 4e                	jne    c0021dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d79:	85 c0                	test   eax,eax
c0021d7b:	75 43                	jne    c0021dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d85:	89 10                	mov    DWORD PTR [eax],edx
c0021d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021da7:	85 c0                	test   eax,eax
c0021da9:	74 25                	je     c0021dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021dab:	83 ec 0c             	sub    esp,0xc
c0021dae:	68 12 35 02 c0       	push   0xc0023512
c0021db3:	e8 58 dd fe ff       	call   c000fb10 <KePanic(char const*)>
c0021db8:	83 c4 10             	add    esp,0x10
c0021dbb:	eb 13                	jmp    c0021dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0021dc0:	83 ec 0c             	sub    esp,0xc
c0021dc3:	68 1c 35 02 c0       	push   0xc002351c
c0021dc8:	e8 43 dd fe ff       	call   c000fb10 <KePanic(char const*)>
c0021dcd:	83 c4 10             	add    esp,0x10
c0021dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0021dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021de1:	90                   	nop
c0021de2:	83 c4 0c             	add    esp,0xc
c0021de5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021de8 <ACPI::~ACPI()>:
c0021de8:	83 ec 0c             	sub    esp,0xc
c0021deb:	ba 0c 3c 02 c0       	mov    edx,0xc0023c0c
c0021df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df4:	89 10                	mov    DWORD PTR [eax],edx
c0021df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dfa:	83 ec 0c             	sub    esp,0xc
c0021dfd:	50                   	push   eax
c0021dfe:	e8 f5 7a fe ff       	call   c00098f8 <Device::~Device()>
c0021e03:	83 c4 10             	add    esp,0x10
c0021e06:	90                   	nop
c0021e07:	83 c4 0c             	add    esp,0xc
c0021e0a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021e0c <ACPI::~ACPI()>:
c0021e0c:	83 ec 0c             	sub    esp,0xc
c0021e0f:	83 ec 0c             	sub    esp,0xc
c0021e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e16:	e8 cd ff ff ff       	call   c0021de8 <ACPI::~ACPI()>
c0021e1b:	83 c4 10             	add    esp,0x10
c0021e1e:	83 ec 08             	sub    esp,0x8
c0021e21:	68 64 12 00 00       	push   0x1264
c0021e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e2a:	e8 8d b4 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0021e2f:	83 c4 10             	add    esp,0x10
c0021e32:	83 c4 0c             	add    esp,0xc
c0021e35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021e38 <LinkedList<Device>::~LinkedList()>:
c0021e38:	90                   	nop
c0021e39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021e3c <LinkedList<Device>::isEmpty()>:
c0021e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e40:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e42:	85 c0                	test   eax,eax
c0021e44:	75 0e                	jne    c0021e54 <LinkedList<Device>::isEmpty()+0x18>
c0021e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e4d:	85 c0                	test   eax,eax
c0021e4f:	75 03                	jne    c0021e54 <LinkedList<Device>::isEmpty()+0x18>
c0021e51:	b0 01                	mov    al,0x1
c0021e53:	c3                   	ret    
c0021e54:	b0 00                	mov    al,0x0
c0021e56:	90                   	nop
c0021e57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021e58 <LinkedList<Device>::getFirstElement()>:
c0021e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021e60 <LinkedList<Device>::removeFirst()>:
c0021e60:	83 ec 0c             	sub    esp,0xc
c0021e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e69:	85 c0                	test   eax,eax
c0021e6b:	75 17                	jne    c0021e84 <LinkedList<Device>::removeFirst()+0x24>
c0021e6d:	83 ec 0c             	sub    esp,0xc
c0021e70:	68 8c 37 02 c0       	push   0xc002378c
c0021e75:	e8 96 dc fe ff       	call   c000fb10 <KePanic(char const*)>
c0021e7a:	83 c4 10             	add    esp,0x10
c0021e7d:	e9 92 00 00 00       	jmp    c0021f14 <LinkedList<Device>::removeFirst()+0xb4>
c0021e82:	66 90                	xchg   ax,ax
c0021e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e8b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021e91:	85 c0                	test   eax,eax
c0021e93:	74 13                	je     c0021ea8 <LinkedList<Device>::removeFirst()+0x48>
c0021e95:	83 ec 0c             	sub    esp,0xc
c0021e98:	68 d7 37 02 c0       	push   0xc00237d7
c0021e9d:	e8 6e dc fe ff       	call   c000fb10 <KePanic(char const*)>
c0021ea2:	83 c4 10             	add    esp,0x10
c0021ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021eb4:	85 c0                	test   eax,eax
c0021eb6:	75 34                	jne    c0021eec <LinkedList<Device>::removeFirst()+0x8c>
c0021eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ebc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ed4:	83 f8 01             	cmp    eax,0x1
c0021ed7:	74 27                	je     c0021f00 <LinkedList<Device>::removeFirst()+0xa0>
c0021ed9:	83 ec 0c             	sub    esp,0xc
c0021edc:	68 b0 37 02 c0       	push   0xc00237b0
c0021ee1:	e8 2a dc fe ff       	call   c000fb10 <KePanic(char const*)>
c0021ee6:	83 c4 10             	add    esp,0x10
c0021ee9:	eb 15                	jmp    c0021f00 <LinkedList<Device>::removeFirst()+0xa0>
c0021eeb:	90                   	nop
c0021eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ef2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efc:	89 10                	mov    DWORD PTR [eax],edx
c0021efe:	66 90                	xchg   ax,ax
c0021f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f07:	8d 50 ff             	lea    edx,[eax-0x1]
c0021f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f11:	8d 76 00             	lea    esi,[esi+0x0]
c0021f14:	83 c4 0c             	add    esp,0xc
c0021f17:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021f18 <Computer::~Computer()>:
c0021f18:	83 ec 0c             	sub    esp,0xc
c0021f1b:	ba 84 3d 02 c0       	mov    edx,0xc0023d84
c0021f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f24:	89 10                	mov    DWORD PTR [eax],edx
c0021f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2a:	83 ec 0c             	sub    esp,0xc
c0021f2d:	50                   	push   eax
c0021f2e:	e8 c5 79 fe ff       	call   c00098f8 <Device::~Device()>
c0021f33:	83 c4 10             	add    esp,0x10
c0021f36:	90                   	nop
c0021f37:	83 c4 0c             	add    esp,0xc
c0021f3a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021f3c <Computer::~Computer()>:
c0021f3c:	83 ec 0c             	sub    esp,0xc
c0021f3f:	83 ec 0c             	sub    esp,0xc
c0021f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f46:	e8 cd ff ff ff       	call   c0021f18 <Computer::~Computer()>
c0021f4b:	83 c4 10             	add    esp,0x10
c0021f4e:	83 ec 08             	sub    esp,0x8
c0021f51:	68 68 01 00 00       	push   0x168
c0021f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f5a:	e8 5d b3 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	83 c4 0c             	add    esp,0xc
c0021f65:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021f66 <idleCommon()>:
c0021f66:	83 ec 0c             	sub    esp,0xc
c0021f69:	fa                   	cli    
c0021f6a:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0021f70:	e8 cf 4c ff ff       	call   c0016c44 <schedule()>
c0021f75:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0021f7c:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0021f83:	75 01                	jne    c0021f86 <idleCommon()+0x20>
c0021f85:	fb                   	sti    
c0021f86:	83 c4 0c             	add    esp,0xc
c0021f89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021f8a <LinkedList<UnixFile>::~LinkedList()>:
c0021f8a:	90                   	nop
c0021f8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021f8c <LinkedList<UnixFile>::LinkedList()>:
c0021f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021fa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fa5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021fc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fc5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021fcc:	90                   	nop
c0021fcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021fce <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021fce:	83 ec 0c             	sub    esp,0xc
c0021fd1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021fd6:	75 10                	jne    c0021fe8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	68 f0 34 02 c0       	push   0xc00234f0
c0021fe0:	e8 2b db fe ff       	call   c000fb10 <KePanic(char const*)>
c0021fe5:	83 c4 10             	add    esp,0x10
c0021fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fec:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fee:	85 c0                	test   eax,eax
c0021ff0:	74 34                	je     c0022026 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ff9:	85 c0                	test   eax,eax
c0021ffb:	74 29                	je     c0022026 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022001:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022004:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022008:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022013:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002201d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022024:	eb 65                	jmp    c002208b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202a:	8b 00                	mov    eax,DWORD PTR [eax]
c002202c:	85 c0                	test   eax,eax
c002202e:	75 4b                	jne    c002207b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022037:	85 c0                	test   eax,eax
c0022039:	75 40                	jne    c002207b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002203b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022043:	89 10                	mov    DWORD PTR [eax],edx
c0022045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022049:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002204d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022057:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002205e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022062:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022065:	85 c0                	test   eax,eax
c0022067:	74 22                	je     c002208b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022069:	83 ec 0c             	sub    esp,0xc
c002206c:	68 12 35 02 c0       	push   0xc0023512
c0022071:	e8 9a da fe ff       	call   c000fb10 <KePanic(char const*)>
c0022076:	83 c4 10             	add    esp,0x10
c0022079:	eb 10                	jmp    c002208b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002207b:	83 ec 0c             	sub    esp,0xc
c002207e:	68 1c 35 02 c0       	push   0xc002351c
c0022083:	e8 88 da fe ff       	call   c000fb10 <KePanic(char const*)>
c0022088:	83 c4 10             	add    esp,0x10
c002208b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022092:	8d 50 01             	lea    edx,[eax+0x1]
c0022095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022099:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002209c:	90                   	nop
c002209d:	83 c4 0c             	add    esp,0xc
c00220a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00220a2 <LinkedList<UnixFile>::getFirstElement()>:
c00220a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00220a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00220aa <LinkedList<UnixFile>::removeFirst()>:
c00220aa:	83 ec 0c             	sub    esp,0xc
c00220ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00220b3:	85 c0                	test   eax,eax
c00220b5:	75 12                	jne    c00220c9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00220b7:	83 ec 0c             	sub    esp,0xc
c00220ba:	68 8c 37 02 c0       	push   0xc002378c
c00220bf:	e8 4c da fe ff       	call   c000fb10 <KePanic(char const*)>
c00220c4:	83 c4 10             	add    esp,0x10
c00220c7:	eb 7e                	jmp    c0022147 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00220c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220d3:	85 c0                	test   eax,eax
c00220d5:	74 10                	je     c00220e7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00220d7:	83 ec 0c             	sub    esp,0xc
c00220da:	68 d7 37 02 c0       	push   0xc00237d7
c00220df:	e8 2c da fe ff       	call   c000fb10 <KePanic(char const*)>
c00220e4:	83 c4 10             	add    esp,0x10
c00220e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220f0:	85 c0                	test   eax,eax
c00220f2:	75 33                	jne    c0022127 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00220f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022102:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002210d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022110:	83 f8 01             	cmp    eax,0x1
c0022113:	74 21                	je     c0022136 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022115:	83 ec 0c             	sub    esp,0xc
c0022118:	68 b0 37 02 c0       	push   0xc00237b0
c002211d:	e8 ee d9 fe ff       	call   c000fb10 <KePanic(char const*)>
c0022122:	83 c4 10             	add    esp,0x10
c0022125:	eb 0f                	jmp    c0022136 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212b:	8b 00                	mov    eax,DWORD PTR [eax]
c002212d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022134:	89 10                	mov    DWORD PTR [eax],edx
c0022136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002213d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022144:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022147:	83 c4 0c             	add    esp,0xc
c002214a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002214c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002214c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022150:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022153:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022154 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022154:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022158:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002215b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002215c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002215c:	90                   	nop
c002215d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022160 <ThreadControlBlock::ThreadControlBlock()>:
c0022160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022164:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002216b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002216f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002217a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022185:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002218c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022190:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002219b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002219f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a3:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00221a7:	90                   	nop
c00221a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00221ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00221ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221ec:	90                   	nop
c00221ed:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00221ee <IOAPIC::~IOAPIC()>:
c00221ee:	83 ec 0c             	sub    esp,0xc
c00221f1:	ba 5c 52 02 c0       	mov    edx,0xc002525c
c00221f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fa:	89 10                	mov    DWORD PTR [eax],edx
c00221fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022200:	83 ec 0c             	sub    esp,0xc
c0022203:	50                   	push   eax
c0022204:	e8 ef 76 fe ff       	call   c00098f8 <Device::~Device()>
c0022209:	83 c4 10             	add    esp,0x10
c002220c:	90                   	nop
c002220d:	83 c4 0c             	add    esp,0xc
c0022210:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022212 <IOAPIC::~IOAPIC()>:
c0022212:	83 ec 0c             	sub    esp,0xc
c0022215:	83 ec 0c             	sub    esp,0xc
c0022218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002221c:	e8 cd ff ff ff       	call   c00221ee <IOAPIC::~IOAPIC()>
c0022221:	83 c4 10             	add    esp,0x10
c0022224:	83 ec 08             	sub    esp,0x8
c0022227:	68 68 01 00 00       	push   0x168
c002222c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022230:	e8 87 b0 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022235:	83 c4 10             	add    esp,0x10
c0022238:	83 c4 0c             	add    esp,0xc
c002223b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002223c <CPU::~CPU()>:
c002223c:	83 ec 0c             	sub    esp,0xc
c002223f:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c0022244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022248:	89 10                	mov    DWORD PTR [eax],edx
c002224a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224e:	83 ec 0c             	sub    esp,0xc
c0022251:	50                   	push   eax
c0022252:	e8 a1 76 fe ff       	call   c00098f8 <Device::~Device()>
c0022257:	83 c4 10             	add    esp,0x10
c002225a:	90                   	nop
c002225b:	83 c4 0c             	add    esp,0xc
c002225e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022260 <CPU::~CPU()>:
c0022260:	83 ec 0c             	sub    esp,0xc
c0022263:	83 ec 0c             	sub    esp,0xc
c0022266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002226a:	e8 cd ff ff ff       	call   c002223c <CPU::~CPU()>
c002226f:	83 c4 10             	add    esp,0x10
c0022272:	83 ec 08             	sub    esp,0x8
c0022275:	68 78 11 00 00       	push   0x1178
c002227a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002227e:	e8 39 b0 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022283:	83 c4 10             	add    esp,0x10
c0022286:	83 c4 0c             	add    esp,0xc
c0022289:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002228a <PCI::~PCI()>:
c002228a:	83 ec 0c             	sub    esp,0xc
c002228d:	ba 34 5b 02 c0       	mov    edx,0xc0025b34
c0022292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022296:	89 10                	mov    DWORD PTR [eax],edx
c0022298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229c:	83 ec 0c             	sub    esp,0xc
c002229f:	50                   	push   eax
c00222a0:	e8 f7 66 fe ff       	call   c000899c <Bus::~Bus()>
c00222a5:	83 c4 10             	add    esp,0x10
c00222a8:	90                   	nop
c00222a9:	83 c4 0c             	add    esp,0xc
c00222ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00222ae <PCI::~PCI()>:
c00222ae:	83 ec 0c             	sub    esp,0xc
c00222b1:	83 ec 0c             	sub    esp,0xc
c00222b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222b8:	e8 cd ff ff ff       	call   c002228a <PCI::~PCI()>
c00222bd:	83 c4 10             	add    esp,0x10
c00222c0:	83 ec 08             	sub    esp,0x8
c00222c3:	68 5c 01 00 00       	push   0x15c
c00222c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222cc:	e8 eb af fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00222d1:	83 c4 10             	add    esp,0x10
c00222d4:	83 c4 0c             	add    esp,0xc
c00222d7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00222d8 <IDE::~IDE()>:
c00222d8:	83 ec 0c             	sub    esp,0xc
c00222db:	ba 84 5c 02 c0       	mov    edx,0xc0025c84
c00222e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e4:	89 10                	mov    DWORD PTR [eax],edx
c00222e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ea:	83 ec 0c             	sub    esp,0xc
c00222ed:	50                   	push   eax
c00222ee:	e8 95 7a fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c00222f3:	83 c4 10             	add    esp,0x10
c00222f6:	90                   	nop
c00222f7:	83 c4 0c             	add    esp,0xc
c00222fa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00222fc <IDE::~IDE()>:
c00222fc:	83 ec 0c             	sub    esp,0xc
c00222ff:	83 ec 0c             	sub    esp,0xc
c0022302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022306:	e8 cd ff ff ff       	call   c00222d8 <IDE::~IDE()>
c002230b:	83 c4 10             	add    esp,0x10
c002230e:	83 ec 08             	sub    esp,0x8
c0022311:	68 70 02 00 00       	push   0x270
c0022316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002231a:	e8 9d af fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c002231f:	83 c4 10             	add    esp,0x10
c0022322:	83 c4 0c             	add    esp,0xc
c0022325:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022326 <SATABus::~SATABus()>:
c0022326:	83 ec 0c             	sub    esp,0xc
c0022329:	ba d4 5c 02 c0       	mov    edx,0xc0025cd4
c002232e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022332:	89 10                	mov    DWORD PTR [eax],edx
c0022334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022338:	83 ec 0c             	sub    esp,0xc
c002233b:	50                   	push   eax
c002233c:	e8 47 7a fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0022341:	83 c4 10             	add    esp,0x10
c0022344:	90                   	nop
c0022345:	83 c4 0c             	add    esp,0xc
c0022348:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002234a <SATABus::~SATABus()>:
c002234a:	83 ec 0c             	sub    esp,0xc
c002234d:	83 ec 0c             	sub    esp,0xc
c0022350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022354:	e8 cd ff ff ff       	call   c0022326 <SATABus::~SATABus()>
c0022359:	83 c4 10             	add    esp,0x10
c002235c:	83 ec 08             	sub    esp,0x8
c002235f:	68 64 01 00 00       	push   0x164
c0022364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022368:	e8 4f af fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c002236d:	83 c4 10             	add    esp,0x10
c0022370:	83 c4 0c             	add    esp,0xc
c0022373:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022374 <ATA::~ATA()>:
c0022374:	83 ec 0c             	sub    esp,0xc
c0022377:	ba bc 5d 02 c0       	mov    edx,0xc0025dbc
c002237c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022380:	89 10                	mov    DWORD PTR [eax],edx
c0022382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022386:	83 ec 0c             	sub    esp,0xc
c0022389:	50                   	push   eax
c002238a:	e8 db 7a fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	90                   	nop
c0022393:	83 c4 0c             	add    esp,0xc
c0022396:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022398 <ATA::~ATA()>:
c0022398:	83 ec 0c             	sub    esp,0xc
c002239b:	83 ec 0c             	sub    esp,0xc
c002239e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223a2:	e8 cd ff ff ff       	call   c0022374 <ATA::~ATA()>
c00223a7:	83 c4 10             	add    esp,0x10
c00223aa:	83 ec 08             	sub    esp,0x8
c00223ad:	68 8c 01 00 00       	push   0x18c
c00223b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223b6:	e8 01 af fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00223bb:	83 c4 10             	add    esp,0x10
c00223be:	83 c4 0c             	add    esp,0xc
c00223c1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00223c2 <ATAPI::~ATAPI()>:
c00223c2:	83 ec 0c             	sub    esp,0xc
c00223c5:	ba 04 5e 02 c0       	mov    edx,0xc0025e04
c00223ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ce:	89 10                	mov    DWORD PTR [eax],edx
c00223d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d4:	83 ec 0c             	sub    esp,0xc
c00223d7:	50                   	push   eax
c00223d8:	e8 8d 7a fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00223dd:	83 c4 10             	add    esp,0x10
c00223e0:	90                   	nop
c00223e1:	83 c4 0c             	add    esp,0xc
c00223e4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00223e6 <ATAPI::~ATAPI()>:
c00223e6:	83 ec 0c             	sub    esp,0xc
c00223e9:	83 ec 0c             	sub    esp,0xc
c00223ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223f0:	e8 cd ff ff ff       	call   c00223c2 <ATAPI::~ATAPI()>
c00223f5:	83 c4 10             	add    esp,0x10
c00223f8:	83 ec 08             	sub    esp,0x8
c00223fb:	68 84 01 00 00       	push   0x184
c0022400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022404:	e8 b3 ae fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022409:	83 c4 10             	add    esp,0x10
c002240c:	83 c4 0c             	add    esp,0xc
c002240f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022410 <SATA::~SATA()>:
c0022410:	83 ec 0c             	sub    esp,0xc
c0022413:	ba c4 5e 02 c0       	mov    edx,0xc0025ec4
c0022418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241c:	89 10                	mov    DWORD PTR [eax],edx
c002241e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022422:	83 ec 0c             	sub    esp,0xc
c0022425:	50                   	push   eax
c0022426:	e8 3f 7a fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002242b:	83 c4 10             	add    esp,0x10
c002242e:	90                   	nop
c002242f:	83 c4 0c             	add    esp,0xc
c0022432:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022434 <SATA::~SATA()>:
c0022434:	83 ec 0c             	sub    esp,0xc
c0022437:	83 ec 0c             	sub    esp,0xc
c002243a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002243e:	e8 cd ff ff ff       	call   c0022410 <SATA::~SATA()>
c0022443:	83 c4 10             	add    esp,0x10
c0022446:	83 ec 08             	sub    esp,0x8
c0022449:	68 7c 01 00 00       	push   0x17c
c002244e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022452:	e8 65 ae fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022457:	83 c4 10             	add    esp,0x10
c002245a:	83 c4 0c             	add    esp,0xc
c002245d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002245e <SATAPI::~SATAPI()>:
c002245e:	83 ec 0c             	sub    esp,0xc
c0022461:	ba e8 5f 02 c0       	mov    edx,0xc0025fe8
c0022466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246a:	89 10                	mov    DWORD PTR [eax],edx
c002246c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022470:	83 ec 0c             	sub    esp,0xc
c0022473:	50                   	push   eax
c0022474:	e8 f1 79 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0022479:	83 c4 10             	add    esp,0x10
c002247c:	90                   	nop
c002247d:	83 c4 0c             	add    esp,0xc
c0022480:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022482 <SATAPI::~SATAPI()>:
c0022482:	83 ec 0c             	sub    esp,0xc
c0022485:	83 ec 0c             	sub    esp,0xc
c0022488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002248c:	e8 cd ff ff ff       	call   c002245e <SATAPI::~SATAPI()>
c0022491:	83 c4 10             	add    esp,0x10
c0022494:	83 ec 08             	sub    esp,0x8
c0022497:	68 84 01 00 00       	push   0x184
c002249c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224a0:	e8 17 ae fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00224a5:	83 c4 10             	add    esp,0x10
c00224a8:	83 c4 0c             	add    esp,0xc
c00224ab:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00224ac <APICTimer::~APICTimer()>:
c00224ac:	83 ec 0c             	sub    esp,0xc
c00224af:	ba 3c 60 02 c0       	mov    edx,0xc002603c
c00224b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b8:	89 10                	mov    DWORD PTR [eax],edx
c00224ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224be:	83 ec 0c             	sub    esp,0xc
c00224c1:	50                   	push   eax
c00224c2:	e8 71 8b fe ff       	call   c000b038 <Timer::~Timer()>
c00224c7:	83 c4 10             	add    esp,0x10
c00224ca:	90                   	nop
c00224cb:	83 c4 0c             	add    esp,0xc
c00224ce:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00224d0 <APICTimer::~APICTimer()>:
c00224d0:	83 ec 0c             	sub    esp,0xc
c00224d3:	83 ec 0c             	sub    esp,0xc
c00224d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224da:	e8 cd ff ff ff       	call   c00224ac <APICTimer::~APICTimer()>
c00224df:	83 c4 10             	add    esp,0x10
c00224e2:	83 ec 08             	sub    esp,0x8
c00224e5:	68 60 01 00 00       	push   0x160
c00224ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224ee:	e8 c9 ad fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00224f3:	83 c4 10             	add    esp,0x10
c00224f6:	83 c4 0c             	add    esp,0xc
c00224f9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00224fc <PIT::~PIT()>:
c00224fc:	83 ec 0c             	sub    esp,0xc
c00224ff:	ba 8c 60 02 c0       	mov    edx,0xc002608c
c0022504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022508:	89 10                	mov    DWORD PTR [eax],edx
c002250a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250e:	83 ec 0c             	sub    esp,0xc
c0022511:	50                   	push   eax
c0022512:	e8 21 8b fe ff       	call   c000b038 <Timer::~Timer()>
c0022517:	83 c4 10             	add    esp,0x10
c002251a:	90                   	nop
c002251b:	83 c4 0c             	add    esp,0xc
c002251e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022520 <PIT::~PIT()>:
c0022520:	83 ec 0c             	sub    esp,0xc
c0022523:	83 ec 0c             	sub    esp,0xc
c0022526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002252a:	e8 cd ff ff ff       	call   c00224fc <PIT::~PIT()>
c002252f:	83 c4 10             	add    esp,0x10
c0022532:	83 ec 08             	sub    esp,0x8
c0022535:	68 5c 01 00 00       	push   0x15c
c002253a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002253e:	e8 79 ad fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022543:	83 c4 10             	add    esp,0x10
c0022546:	83 c4 0c             	add    esp,0xc
c0022549:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be 8f 42 02 c0       	mov    esi,0xc002428f
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be ab 42 02 c0       	mov    esi,0xc00242ab
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
