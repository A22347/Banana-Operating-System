
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8b f3 00 00       	call   c000f3ab <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 5b 02 c0       	mov    eax,0xc0025b08
c0000025:	3d 08 5b 02 c0       	cmp    eax,0xc0025b08
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 5b 02 c0       	push   0xc0025b08
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 5b 02 c0       	mov    eax,0xc0025b08
c0000051:	2d 08 5b 02 c0       	sub    eax,0xc0025b08
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 5b 02 c0       	push   0xc0025b08
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 40 17 02 c0       	mov    ebx,0xc0021740
c0000097:	81 eb 3c 17 02 c0    	sub    ebx,0xc002173c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 3c 17 02 c0       	mov    esi,0xc002173c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 5b 02 c0       	push   0xc0025b08
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 08 5b 02 c0       	push   0xc0025b08
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 4b 56 01 00       	call   c00158f8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 3e 39 01 00       	call   c0013c03 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 29 56 01 00       	call   c00158f8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 6a 5b 01 00       	call   c0015e58 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 19 60 01 00       	call   c0016310 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3a e6 00 00       	jmp    c000e9b9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 17 02 c0 02 	test   BYTE PTR [edx-0x3ffde8a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 17 02 c0 01 	test   BYTE PTR [edx-0x3ffde8a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 17 02 c0 08 	test   BYTE PTR [edx-0x3ffde8a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 17 02 c0 08 	test   BYTE PTR [edx-0x3ffde8a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 17 02 c0 04 	test   BYTE PTR [ecx-0x3ffde8a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 17 02 c0 01 	test   BYTE PTR [edx-0x3ffde8a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000e2a:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e8e:	e8 67 e2 00 00       	call   c000f0fa <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 74 e1 00 00       	call   c000f09c <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 4f e0 00 00       	call   c000f066 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 4a e0 00 00       	call   c000f09c <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 40 df 00 00       	call   c000f066 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 5b de 00 00       	call   c000f066 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 45 de 00 00       	call   c000f066 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c0001313:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000136a:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c00013b3:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013ce:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c0001488:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c000148e:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001495:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000155b:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001561:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c0001568:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 71 02 c0       	mov    edx,0xc0027100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c00016b6:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 64 18 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde79c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 60 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27a0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 9d 8f 01 00       	jmp    c001af58 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 60 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27a0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 c7 8f 01 00       	jmp    c001af98 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 60 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27a0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 e8 8f 01 00       	jmp    c001afd8 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 c0 19 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffde640]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 c0 19 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde640]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba b4 46 02 c0       	mov    edx,0xc00246b4
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 7c 18 02 c0       	mov    edx,0xc002187c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 82 18 02 c0       	mov    eax,0xc0021882
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 40 19 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffde6c0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 8b 18 02 c0       	mov    eax,0xc002188b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 c0 19 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffde640]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 10 19 02 c0       	mov    eax,0xc0021910
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 00 19 02 c0       	mov    ebx,0xc0021900
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 e0 18 02 c0       	mov    eax,0xc00218e0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 f0 18 02 c0       	mov    eax,0xc00218f0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 92 18 02 c0       	mov    edx,0xc0021892
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 9e 18 02 c0       	mov    edx,0xc002189e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba b2 18 02 c0       	mov    edx,0xc00218b2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 39 93 00 00       	call   c000f17c <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 31 93 00 00       	call   c000f18c <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c e0 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ce0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 e0 1c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021ce0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 e0 1a 02 c0       	mov    eax,0xc0021ae0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 20 1a 02 c0       	mov    eax,0xc0021a20
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 e0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde620]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 e0 1d 02 c0       	push   0xc0021de0
c0006327:	e8 d0 55 01 00       	call   c001b8fc <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ee 1d 02 c0       	push   0xc0021dee
c000635f:	e8 98 55 01 00       	call   c001b8fc <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 01 55 01 00       	call   c001b8a0 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 70 02 c0       	mov    eax,0xc0027080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 70 02 c0       	mov    eax,0xc0027020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 fd 1d 02 c0       	push   0xc0021dfd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c000675b:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006765:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c000677d:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067f6:	8b 9d 4c 75 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd8ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c000688d:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068ef:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c000692c:	05 40 75 02 c0       	add    eax,0xc0027540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069ec:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 00 1e 02 c0       	push   0xc0021e00
c0006a0f:	e8 e8 4e 01 00       	call   c001b8fc <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 f6 4e 01 00       	call   c001b918 <iso_kprintfd>
c0006a22:	c7 04 24 05 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e05
c0006a29:	e8 ce 4e 01 00       	call   c001b8fc <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a35:	e8 de 4e 01 00       	call   c001b918 <iso_kprintfd>
c0006a3a:	c7 04 24 0b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e0b
c0006a41:	e8 b6 4e 01 00       	call   c001b8fc <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a4d:	e8 c6 4e 01 00       	call   c001b918 <iso_kprintfd>
c0006a52:	c7 04 24 11 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e11
c0006a59:	e8 9e 4e 01 00       	call   c001b8fc <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a65:	e8 ae 4e 01 00       	call   c001b918 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006acb:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 75 02 c0    	lea    ebp,[edi-0x3ffd8aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 75 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd8aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 fd 1d 02 c0       	push   0xc0021dfd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006c0a:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006c10:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 75 02 c0    	lea    eax,[edi-0x3ffd8ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 1a 1e 02 c0       	push   0xc0021e1a
c0006c32:	e8 c5 4c 01 00       	call   c001b8fc <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c67:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 25 1e 02 c0       	push   0xc0021e25
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 2c 1e 02 c0       	push   0xc0021e2c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006d05:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d28:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 33 1e 02 c0       	push   0xc0021e33
c0006d49:	e8 ae 4b 01 00       	call   c001b8fc <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 3e 1e 02 c0       	push   0xc0021e3e
c0006d64:	e8 93 4b 01 00       	call   c001b8fc <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 75 02 c0       	push   0xc0027540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 e9 83 00 00       	call   c000f17c <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d9f:	e8 d8 83 00 00       	call   c000f17c <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 c3 83 00 00       	call   c000f17c <malloc>
c0006db9:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 aa 83 00 00       	call   c000f17c <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006dff:	e8 88 83 00 00       	call   c000f18c <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 7a 83 00 00       	call   c000f18c <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 60 83 00 00       	call   c000f18c <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 4b 83 00 00       	call   c000f18c <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 c4 cd 02 c0 10 	test   BYTE PTR ds:0xc002cdc4,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 c4 cd 02 c0 10 	test   BYTE PTR ds:0xc002cdc4,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 50 1e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde1b0]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 a0 1f 02 c0       	push   0xc0021fa0
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 b4 1f 02 c0       	push   0xc0021fb4
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 be 1f 02 c0       	push   0xc0021fbe
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 c8 1f 02 c0       	push   0xc0021fc8
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 0c 21 02 c0       	push   0xc002210c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 d2 1f 02 c0       	push   0xc0021fd2
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 2c 21 02 c0       	push   0xc002212c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 e7 1f 02 c0       	push   0xc0021fe7
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 01 20 02 c0       	push   0xc0022001
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 c0 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf40]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 54 21 02 c0       	push   0xc0022154
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 0c 21 02 c0       	push   0xc002210c
c00071bc:	e8 01 83 00 00       	call   c000f4c2 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 9c 21 02 c0       	push   0xc002219c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 9c 21 02 c0       	push   0xc002219c
c00071eb:	e8 d2 82 00 00       	call   c000f4c2 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 0c 20 02 c0       	push   0xc002200c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 0c 20 02 c0       	push   0xc002200c
c0007217:	e8 a6 82 00 00       	call   c000f4c2 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 29 20 02 c0       	push   0xc0022029
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 29 20 02 c0       	push   0xc0022029
c0007243:	e8 7a 82 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 bc 21 02 c0       	push   0xc00221bc
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 bc 21 02 c0       	push   0xc00221bc
c000726f:	e8 4e 82 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 e0 21 02 c0       	push   0xc00221e0
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 e0 21 02 c0       	push   0xc00221e0
c000729b:	e8 22 82 00 00       	call   c000f4c2 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 45 20 02 c0       	push   0xc0022045
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 45 20 02 c0       	push   0xc0022045
c00072c7:	e8 f6 81 00 00       	call   c000f4c2 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 61 20 02 c0       	push   0xc0022061
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 61 20 02 c0       	push   0xc0022061
c00072f3:	e8 ca 81 00 00       	call   c000f4c2 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 00 22 02 c0       	push   0xc0022200
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 00 22 02 c0       	push   0xc0022200
c000731f:	e8 9e 81 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 24 22 02 c0       	push   0xc0022224
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 24 22 02 c0       	push   0xc0022224
c000734b:	e8 72 81 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 ca 7d 00 00       	call   c000f17c <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c00073bb:	68 43 22 02 c0       	push   0xc0022243
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 61 22 02 c0       	push   0xc0022261
c00073d7:	e8 e6 80 00 00       	call   c000f4c2 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 7b 22 02 c0       	push   0xc002227b
c00073f8:	e8 c5 80 00 00       	call   c000f4c2 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 95 22 02 c0       	push   0xc0022295
c000743f:	e8 7e 80 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 af 22 02 c0       	push   0xc00222af
c000746f:	e8 4e 80 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 bc 64 00 00       	call   c000d97d <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 d5 89 00 00       	call   c000feb0 <KeRand()>
c00074db:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 c9 22 02 c0       	push   0xc00222c9
c0007510:	e8 ad 7f 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c000755b:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 83 02 c0       	push   0xc0028300
c00075d0:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075da:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 76 51 00 00       	call   c000c76d <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 79 7b 00 00       	call   c000f17c <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000760c:	68 43 22 02 c0       	push   0xc0022243
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 d2 22 02 c0       	push   0xc00222d2
c0007628:	e8 95 7e 00 00       	call   c000f4c2 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 ef 22 02 c0       	push   0xc00222ef
c0007659:	e8 64 7e 00 00       	call   c000f4c2 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 0c 23 02 c0       	push   0xc002230c
c0007693:	e8 2a 7e 00 00       	call   c000f4c2 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007776:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 ea 79 00 00       	call   c000f17c <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000779b:	68 43 22 02 c0       	push   0xc0022243
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 27 23 02 c0       	push   0xc0022327
c00077b7:	e8 06 7d 00 00       	call   c000f4c2 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 42 23 02 c0       	push   0xc0022342
c00077ea:	e8 d3 7c 00 00       	call   c000f4c2 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 c3 78 00 00       	call   c000f17c <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 39 77 00 00       	call   c000f17c <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 5d 23 02 c0       	mov    esi,0xc002235d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 34 24 02 c0       	mov    edx,0xc0022434
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 4d a9 00 00       	call   c0012622 <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 f2 4b 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 50 24 02 c0       	mov    edx,0xc0022450
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 ff a8 00 00       	call   c0012622 <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 a4 4b 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba c8 23 02 c0       	mov    edx,0xc00223c8
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba c8 23 02 c0       	mov    edx,0xc00223c8
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 4e 4b 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 9c 73 00 00       	call   c000f17c <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 10 33 01 00       	call   c001b0f8 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 88 73 00 00       	call   c000f17c <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 2a 42 01 00       	call   c001c026 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 72 3f 02 c0       	push   0xc0023f72
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 66 23 02 c0       	push   0xc0022366
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 81 23 02 c0       	push   0xc0022381
c0008018:	e8 a5 74 00 00       	call   c000f4c2 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 f4 a3 00 00       	call   c001243c <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 34 24 02 c0       	mov    edx,0xc0022434
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 a7 23 02 c0       	push   0xc00223a7
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 02 1f 00 00       	call   c000a026 <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 fd 1a 00 00       	call   c000a026 <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 0a 6c 00 00       	call   c000f17c <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 1e 9e 00 00       	call   c001243c <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba 50 24 02 c0       	mov    edx,0xc0022450
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 5a 19 00 00       	call   c000a026 <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 d8 08 00 00       	call   c00091f4 <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 39 06 00 00       	call   c0008f94 <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 6c 3f 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000899c:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	83 ec 0c             	sub    esp,0xc
c00089ac:	50                   	push   eax
c00089ad:	e8 3a d9 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c00089b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089b9:	e8 83 09 01 00       	call   c0019341 <HalMakeBeep(int)>
c00089be:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c6:	83 c4 1c             	add    esp,0x1c
c00089c9:	e9 f6 d7 00 00       	jmp    c00161c4 <blockTask(TaskState)>

c00089ce <KeBeep(int, int, bool)>:
c00089ce:	56                   	push   esi
c00089cf:	53                   	push   ebx
c00089d0:	83 ec 10             	sub    esp,0x10
c00089d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089df:	e8 5d 09 01 00       	call   c0019341 <HalMakeBeep(int)>
c00089e4:	89 f0                	mov    eax,esi
c00089e6:	83 c4 10             	add    esp,0x10
c00089e9:	84 c0                	test   al,al
c00089eb:	74 1e                	je     c0008a0b <KeBeep(int, int, bool)+0x3d>
c00089ed:	6b db 0a             	imul   ebx,ebx,0xa
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 f3 d8 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c00089f9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	e9 36 09 01 00       	jmp    c0019341 <HalMakeBeep(int)>
c0008a0b:	68 e6 00 00 00       	push   0xe6
c0008a10:	53                   	push   ebx
c0008a11:	68 8e 89 00 c0       	push   0xc000898e
c0008a16:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0008a1c:	e8 8b d4 00 00       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c0008a21:	83 c4 14             	add    esp,0x14
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	c3                   	ret    
c0008a27:	90                   	nop

c0008a28 <KeLoadClockSettings()>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a31:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a36:	68 90 24 02 c0       	push   0xc0022490
c0008a3b:	e8 08 3f 00 00       	call   c000c948 <CmOpen(char const*)>
c0008a40:	59                   	pop    ecx
c0008a41:	5e                   	pop    esi
c0008a42:	89 c3                	mov    ebx,eax
c0008a44:	68 b5 24 02 c0       	push   0xc00224b5
c0008a49:	50                   	push   eax
c0008a4a:	e8 f4 4a 00 00       	call   c000d543 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a4f:	5f                   	pop    edi
c0008a50:	5a                   	pop    edx
c0008a51:	89 c6                	mov    esi,eax
c0008a53:	50                   	push   eax
c0008a54:	68 ca 24 02 c0       	push   0xc00224ca
c0008a59:	e8 f0 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	85 f6                	test   esi,esi
c0008a63:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a67:	7e 0c                	jle    c0008a75 <KeLoadClockSettings()+0x4d>
c0008a69:	52                   	push   edx
c0008a6a:	57                   	push   edi
c0008a6b:	56                   	push   esi
c0008a6c:	53                   	push   ebx
c0008a6d:	e8 46 40 00 00       	call   c000cab8 <CmGetString(Reghive_Tag*, int, char*)>
c0008a72:	83 c4 10             	add    esp,0x10
c0008a75:	83 ec 0c             	sub    esp,0xc
c0008a78:	53                   	push   ebx
c0008a79:	e8 e8 3f 00 00       	call   c000ca66 <CmClose(Reghive_Tag*)>
c0008a7e:	83 c4 0c             	add    esp,0xc
c0008a81:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a86:	50                   	push   eax
c0008a87:	57                   	push   edi
c0008a88:	68 d8 24 02 c0       	push   0xc00224d8
c0008a8d:	e8 bc e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a92:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa0:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa3:	a8 fd                	test   al,0xfd
c0008aa5:	75 51                	jne    c0008af8 <KeLoadClockSettings()+0xd0>
c0008aa7:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008aac:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab1:	83 fb 2e             	cmp    ebx,0x2e
c0008ab4:	75 07                	jne    c0008abd <KeLoadClockSettings()+0x95>
c0008ab6:	83 fa 35             	cmp    edx,0x35
c0008ab9:	b0 01                	mov    al,0x1
c0008abb:	74 0f                	je     c0008acc <KeLoadClockSettings()+0xa4>
c0008abd:	31 c0                	xor    eax,eax
c0008abf:	83 fa 2e             	cmp    edx,0x2e
c0008ac2:	75 08                	jne    c0008acc <KeLoadClockSettings()+0xa4>
c0008ac4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008ac9:	0f 94 c0             	sete   al
c0008acc:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ad6:	83 e8 30             	sub    eax,0x30
c0008ad9:	6b f0 0a             	imul   esi,eax,0xa
c0008adc:	83 fa 2e             	cmp    edx,0x2e
c0008adf:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008ae3:	0f 44 c3             	cmove  eax,ebx
c0008ae6:	80 f9 2d             	cmp    cl,0x2d
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	75 19                	jne    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af0:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af6:	eb 11                	jmp    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af8:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008aff:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b09:	50                   	push   eax
c0008b0a:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b11:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b14:	50                   	push   eax
c0008b15:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1b:	68 ef 24 02 c0       	push   0xc00224ef
c0008b20:	e8 29 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b25:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2b:	5b                   	pop    ebx
c0008b2c:	5e                   	pop    esi
c0008b2d:	5f                   	pop    edi
c0008b2e:	c3                   	ret    
c0008b2f:	90                   	nop

c0008b30 <Clock::Clock(char const*)>:
c0008b30:	83 ec 0c             	sub    esp,0xc
c0008b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b37:	83 ec 08             	sub    esp,0x8
c0008b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b3e:	50                   	push   eax
c0008b3f:	e8 b0 06 00 00       	call   c00091f4 <Device::Device(char const*)>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	ba 18 25 02 c0       	mov    edx,0xc0022518
c0008b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b50:	89 10                	mov    DWORD PTR [eax],edx
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b60:	90                   	nop
c0008b61:	83 c4 0c             	add    esp,0xc
c0008b64:	c3                   	ret    
c0008b65:	90                   	nop

c0008b66 <Clock::~Clock()>:
c0008b66:	83 ec 0c             	sub    esp,0xc
c0008b69:	ba 18 25 02 c0       	mov    edx,0xc0022518
c0008b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b72:	89 10                	mov    DWORD PTR [eax],edx
c0008b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	50                   	push   eax
c0008b7c:	e8 13 04 00 00       	call   c0008f94 <Device::~Device()>
c0008b81:	83 c4 10             	add    esp,0x10
c0008b84:	90                   	nop
c0008b85:	83 c4 0c             	add    esp,0xc
c0008b88:	c3                   	ret    
c0008b89:	90                   	nop

c0008b8a <Clock::~Clock()>:
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b94:	e8 cd ff ff ff       	call   c0008b66 <Clock::~Clock()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	83 ec 08             	sub    esp,0x8
c0008b9f:	68 58 01 00 00       	push   0x158
c0008ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ba8:	e8 46 3d 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 c4 0c             	add    esp,0xc
c0008bb3:	c3                   	ret    

c0008bb4 <Clock::timeInSecondsLocal()>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 14             	sub    esp,0x14
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bbe:	50                   	push   eax
c0008bbf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc2:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bc9:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bcf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd5:	89 cb                	mov    ebx,ecx
c0008bd7:	c1 fb 1f             	sar    ebx,0x1f
c0008bda:	01 c8                	add    eax,ecx
c0008bdc:	11 da                	adc    edx,ebx
c0008bde:	83 c4 10             	add    esp,0x10
c0008be1:	31 c9                	xor    ecx,ecx
c0008be3:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bea:	74 05                	je     c0008bf1 <Clock::timeInSecondsLocal()+0x3d>
c0008bec:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf1:	31 db                	xor    ebx,ebx
c0008bf3:	01 c8                	add    eax,ecx
c0008bf5:	11 da                	adc    edx,ebx
c0008bf7:	83 c4 08             	add    esp,0x8
c0008bfa:	5b                   	pop    ebx
c0008bfb:	c3                   	ret    

c0008bfc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfc:	57                   	push   edi
c0008bfd:	56                   	push   esi
c0008bfe:	53                   	push   ebx
c0008bff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c10:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c17:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c23:	99                   	cdq    
c0008c24:	29 c6                	sub    esi,eax
c0008c26:	19 d7                	sbb    edi,edx
c0008c28:	89 f0                	mov    eax,esi
c0008c2a:	31 f6                	xor    esi,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c35:	74 05                	je     c0008c3c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c37:	be 08 07 00 00       	mov    esi,0x708
c0008c3c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c40:	31 ff                	xor    edi,edi
c0008c42:	29 f0                	sub    eax,esi
c0008c44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c48:	19 fa                	sbb    edx,edi
c0008c4a:	89 d8                	mov    eax,ebx
c0008c4c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	ff e0                	jmp    eax

c0008c55 <KeDatetimeToSeconds(datetime_t)>:
c0008c55:	55                   	push   ebp
c0008c56:	57                   	push   edi
c0008c57:	56                   	push   esi
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 0c             	sub    esp,0xc
c0008c5c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c64:	89 f7                	mov    edi,esi
c0008c66:	89 f0                	mov    eax,esi
c0008c68:	0f b6 cf             	movzx  ecx,bh
c0008c6b:	0f b6 c4             	movzx  eax,ah
c0008c6e:	c1 ef 10             	shr    edi,0x10
c0008c71:	89 da                	mov    edx,ebx
c0008c73:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c76:	89 f9                	mov    ecx,edi
c0008c78:	0f b6 f9             	movzx  edi,cl
c0008c7b:	89 f1                	mov    ecx,esi
c0008c7d:	6b c0 3c             	imul   eax,eax,0x3c
c0008c80:	0f b6 f1             	movzx  esi,cl
c0008c83:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c89:	0f b6 db             	movzx  ebx,bl
c0008c8c:	c1 ea 10             	shr    edx,0x10
c0008c8f:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c95:	01 f8                	add    eax,edi
c0008c97:	01 f0                	add    eax,esi
c0008c99:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9c:	c1 f8 1f             	sar    eax,0x1f
c0008c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca3:	89 e8                	mov    eax,ebp
c0008ca5:	0f b6 c0             	movzx  eax,al
c0008ca8:	8b 0c 85 60 25 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddaa0]
c0008caf:	83 f8 01             	cmp    eax,0x1
c0008cb2:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008cb6:	0f b7 da             	movzx  ebx,dx
c0008cb9:	76 27                	jbe    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cbb:	80 e2 03             	and    dl,0x3
c0008cbe:	75 22                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cc0:	31 d2                	xor    edx,edx
c0008cc2:	be 64 00 00 00       	mov    esi,0x64
c0008cc7:	89 d8                	mov    eax,ebx
c0008cc9:	f7 f6                	div    esi
c0008ccb:	85 d2                	test   edx,edx
c0008ccd:	75 12                	jne    c0008ce1 <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008ccf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd5:	be 90 01 00 00       	mov    esi,0x190
c0008cda:	99                   	cdq    
c0008cdb:	f7 fe                	idiv   esi
c0008cdd:	85 d2                	test   edx,edx
c0008cdf:	75 01                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ce1:	41                   	inc    ecx
c0008ce2:	83 fb 46             	cmp    ebx,0x46
c0008ce5:	76 48                	jbe    c0008d2f <KeDatetimeToSeconds(datetime_t)+0xda>
c0008ce7:	be 46 00 00 00       	mov    esi,0x46
c0008cec:	bf 64 00 00 00       	mov    edi,0x64
c0008cf1:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf6:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfc:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d01:	75 23                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d03:	89 f0                	mov    eax,esi
c0008d05:	99                   	cdq    
c0008d06:	f7 ff                	idiv   edi
c0008d08:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d0d:	85 d2                	test   edx,edx
c0008d0f:	75 15                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d11:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d17:	99                   	cdq    
c0008d18:	f7 fd                	idiv   ebp
c0008d1a:	83 fa 01             	cmp    edx,0x1
c0008d1d:	19 c0                	sbb    eax,eax
c0008d1f:	f7 d0                	not    eax
c0008d21:	05 6e 01 00 00       	add    eax,0x16e
c0008d26:	46                   	inc    esi
c0008d27:	01 c1                	add    ecx,eax
c0008d29:	39 de                	cmp    esi,ebx
c0008d2b:	7c c9                	jl     c0008cf6 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d2d:	eb 34                	jmp    c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d2f:	74 32                	je     c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d31:	b8 45 00 00 00       	mov    eax,0x45
c0008d36:	89 c2                	mov    edx,eax
c0008d38:	83 e2 03             	and    edx,0x3
c0008d3b:	39 d8                	cmp    eax,ebx
c0008d3d:	7e 0f                	jle    c0008d4e <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d3f:	83 fa 01             	cmp    edx,0x1
c0008d42:	19 d2                	sbb    edx,edx
c0008d44:	48                   	dec    eax
c0008d45:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d4c:	eb e8                	jmp    c0008d36 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d4e:	85 d2                	test   edx,edx
c0008d50:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d55:	75 0a                	jne    c0008d61 <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d57:	83 fb 01             	cmp    ebx,0x1
c0008d5a:	19 c0                	sbb    eax,eax
c0008d5c:	05 6e 01 00 00       	add    eax,0x16e
c0008d61:	29 c1                	sub    ecx,eax
c0008d63:	b8 80 51 01 00       	mov    eax,0x15180
c0008d68:	f7 e9                	imul   ecx
c0008d6a:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d6d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d71:	83 c4 0c             	add    esp,0xc
c0008d74:	5b                   	pop    ebx
c0008d75:	5e                   	pop    esi
c0008d76:	5f                   	pop    edi
c0008d77:	5d                   	pop    ebp
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d7a:	57                   	push   edi
c0008d7b:	56                   	push   esi
c0008d7c:	53                   	push   ebx
c0008d7d:	83 ec 10             	sub    esp,0x10
c0008d80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008d84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d8c:	e8 c4 fe ff ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c0008d91:	5e                   	pop    esi
c0008d92:	0f b6 35 08 a3 02 c0 	movzx  esi,BYTE PTR ds:0xc002a308
c0008d99:	5f                   	pop    edi
c0008d9a:	03 35 0c a3 02 c0    	add    esi,DWORD PTR ds:0xc002a30c
c0008da0:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008da6:	89 f7                	mov    edi,esi
c0008da8:	c1 ff 1f             	sar    edi,0x1f
c0008dab:	29 f0                	sub    eax,esi
c0008dad:	19 fa                	sbb    edx,edi
c0008daf:	31 f6                	xor    esi,esi
c0008db1:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008db8:	74 05                	je     c0008dbf <Clock::setTimeInDatetimeLocal(datetime_t)+0x45>
c0008dba:	be 08 07 00 00       	mov    esi,0x708
c0008dbf:	31 ff                	xor    edi,edi
c0008dc1:	29 f0                	sub    eax,esi
c0008dc3:	19 fa                	sbb    edx,edi
c0008dc5:	83 ec 0c             	sub    esp,0xc
c0008dc8:	31 ff                	xor    edi,edi
c0008dca:	57                   	push   edi
c0008dcb:	31 ff                	xor    edi,edi
c0008dcd:	52                   	push   edx
c0008dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008dd6:	57                   	push   edi
c0008dd7:	50                   	push   eax
c0008dd8:	68 00 25 02 c0       	push   0xc0022500
c0008ddd:	e8 6c e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008de6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008dea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0008dec:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0008df0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0008df4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0008df8:	8b 41 2c             	mov    eax,DWORD PTR [ecx+0x2c]
c0008dfb:	83 c4 30             	add    esp,0x30
c0008dfe:	5b                   	pop    ebx
c0008dff:	5e                   	pop    esi
c0008e00:	5f                   	pop    edi
c0008e01:	ff e0                	jmp    eax

c0008e03 <KeSecondsToDatetime(unsigned long long)>:
c0008e03:	55                   	push   ebp
c0008e04:	57                   	push   edi
c0008e05:	56                   	push   esi
c0008e06:	53                   	push   ebx
c0008e07:	83 ec 1c             	sub    esp,0x1c
c0008e0a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e0e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008e12:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008e16:	6a 00                	push   0x0
c0008e18:	68 80 51 01 00       	push   0x15180
c0008e1d:	55                   	push   ebp
c0008e1e:	57                   	push   edi
c0008e1f:	e8 50 7c 01 00       	call   c0020a74 <__udivdi3>
c0008e24:	83 c4 10             	add    esp,0x10
c0008e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e2b:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e31:	6a 00                	push   0x0
c0008e33:	68 80 51 01 00       	push   0x15180
c0008e38:	55                   	push   ebp
c0008e39:	57                   	push   edi
c0008e3a:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e3f:	e8 30 7d 01 00       	call   c0020b74 <__umoddi3>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	99                   	cdq    
c0008e48:	f7 ff                	idiv   edi
c0008e4a:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e4f:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e52:	89 d0                	mov    eax,edx
c0008e54:	99                   	cdq    
c0008e55:	f7 ff                	idiv   edi
c0008e57:	85 db                	test   ebx,ebx
c0008e59:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e5c:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e5f:	79 11                	jns    c0008e72 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e65:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e6b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e70:	eb 07                	jmp    c0008e79 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e72:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e77:	89 d8                	mov    eax,ebx
c0008e79:	99                   	cdq    
c0008e7a:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e7f:	f7 f9                	idiv   ecx
c0008e81:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e86:	31 d2                	xor    edx,edx
c0008e88:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e99:	01 c3                	add    ebx,eax
c0008e9b:	89 d8                	mov    eax,ebx
c0008e9d:	f7 f1                	div    ecx
c0008e9f:	31 d2                	xor    edx,edx
c0008ea1:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008ea4:	89 d8                	mov    eax,ebx
c0008ea6:	f7 f7                	div    edi
c0008ea8:	31 d2                	xor    edx,edx
c0008eaa:	29 c1                	sub    ecx,eax
c0008eac:	89 d8                	mov    eax,ebx
c0008eae:	f7 f5                	div    ebp
c0008eb0:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008eb5:	31 d2                	xor    edx,edx
c0008eb7:	29 c1                	sub    ecx,eax
c0008eb9:	89 c8                	mov    eax,ecx
c0008ebb:	f7 f5                	div    ebp
c0008ebd:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008ec2:	31 d2                	xor    edx,edx
c0008ec4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec8:	89 c8                	mov    eax,ecx
c0008eca:	f7 f5                	div    ebp
c0008ecc:	31 d2                	xor    edx,edx
c0008ece:	01 c3                	add    ebx,eax
c0008ed0:	89 c8                	mov    eax,ecx
c0008ed2:	f7 f7                	div    edi
c0008ed4:	bf 99 00 00 00       	mov    edi,0x99
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c3                	sub    ebx,eax
c0008edd:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008ee5:	29 c3                	sub    ebx,eax
c0008ee7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008eea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008eed:	83 c1 02             	add    ecx,0x2
c0008ef0:	89 c8                	mov    eax,ecx
c0008ef2:	bb 05 00 00 00       	mov    ebx,0x5
c0008ef7:	f7 f7                	div    edi
c0008ef9:	31 d2                	xor    edx,edx
c0008efb:	89 c7                	mov    edi,eax
c0008efd:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008f03:	83 c0 02             	add    eax,0x2
c0008f06:	f7 f3                	div    ebx
c0008f08:	89 eb                	mov    ebx,ebp
c0008f0a:	29 c3                	sub    ebx,eax
c0008f0c:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008f12:	88 1e                	mov    BYTE PTR [esi],bl
c0008f14:	19 c0                	sbb    eax,eax
c0008f16:	31 c9                	xor    ecx,ecx
c0008f18:	83 e0 0c             	and    eax,0xc
c0008f1b:	8d 54 38 f6          	lea    edx,[eax+edi*1-0xa]
c0008f1f:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008f27:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008f2b:	83 fa 01             	cmp    edx,0x1
c0008f2e:	0f 96 c1             	setbe  cl
c0008f31:	42                   	inc    edx
c0008f32:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0008f35:	8d 44 08 46          	lea    eax,[eax+ecx*1+0x46]
c0008f39:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f3d:	83 c4 1c             	add    esp,0x1c
c0008f40:	89 f0                	mov    eax,esi
c0008f42:	5b                   	pop    ebx
c0008f43:	5e                   	pop    esi
c0008f44:	5f                   	pop    edi
c0008f45:	5d                   	pop    ebp
c0008f46:	c2 04 00             	ret    0x4
c0008f49:	90                   	nop

c0008f4a <Clock::timeInDatetimeLocal()>:
c0008f4a:	53                   	push   ebx
c0008f4b:	83 ec 14             	sub    esp,0x14
c0008f4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f56:	e8 59 fc ff ff       	call   c0008bb4 <Clock::timeInSecondsLocal()>
c0008f5b:	83 c4 0c             	add    esp,0xc
c0008f5e:	52                   	push   edx
c0008f5f:	50                   	push   eax
c0008f60:	53                   	push   ebx
c0008f61:	e8 9d fe ff ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0008f66:	89 d8                	mov    eax,ebx
c0008f68:	83 c4 14             	add    esp,0x14
c0008f6b:	5b                   	pop    ebx
c0008f6c:	c2 04 00             	ret    0x4
c0008f6f:	90                   	nop

c0008f70 <Device::hibernate()>:
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <Device::wake()>:
c0008f72:	c3                   	ret    
c0008f73:	90                   	nop

c0008f74 <Device::detect()>:
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::disableLegacy()>:
c0008f76:	c3                   	ret    
c0008f77:	90                   	nop

c0008f78 <Device::powerSaving(PowerSavingLevel)>:
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <DriverlessDevice::close(int, int, void*)>:
c0008f7a:	31 c0                	xor    eax,eax
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop

c0008f7e <DriverlessDevice::detect()>:
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <DriverlessDevice::open(int, int, void*)>:
c0008f80:	83 ec 18             	sub    esp,0x18
c0008f83:	68 90 25 02 c0       	push   0xc0022590
c0008f88:	e8 35 65 00 00       	call   c000f4c2 <KePanic(char const*)>
c0008f8d:	83 c8 ff             	or     eax,0xffffffff
c0008f90:	83 c4 1c             	add    esp,0x1c
c0008f93:	c3                   	ret    

c0008f94 <Device::~Device()>:
c0008f94:	ba 34 26 02 c0       	mov    edx,0xc0022634
c0008f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f9d:	89 10                	mov    DWORD PTR [eax],edx
c0008f9f:	90                   	nop
c0008fa0:	c3                   	ret    
c0008fa1:	90                   	nop

c0008fa2 <Device::~Device()>:
c0008fa2:	83 ec 0c             	sub    esp,0xc
c0008fa5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008fa9:	e8 e6 ff ff ff       	call   c0008f94 <Device::~Device()>
c0008fae:	83 c4 04             	add    esp,0x4
c0008fb1:	83 ec 08             	sub    esp,0x8
c0008fb4:	68 58 01 00 00       	push   0x158
c0008fb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fbd:	e8 31 39 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	83 c4 0c             	add    esp,0xc
c0008fc8:	c3                   	ret    
c0008fc9:	90                   	nop

c0008fca <Device::findAndLoadDriver()>:
c0008fca:	c7 44 24 04 ae 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc00225ae
c0008fd2:	e9 77 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008fd7:	90                   	nop

c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fd8:	57                   	push   edi
c0008fd9:	b9 09 00 00 00       	mov    ecx,0x9
c0008fde:	56                   	push   esi
c0008fdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fe3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fe7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008ff1:	81 c7 18 01 00 00    	add    edi,0x118
c0008ff7:	fc                   	cld    
c0008ff8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008ffa:	5e                   	pop    esi
c0008ffb:	5f                   	pop    edi
c0008ffc:	c3                   	ret    
c0008ffd:	90                   	nop

c0008ffe <Device::preOpenACPI(void*, char*, char*)>:
c0008ffe:	57                   	push   edi
c0008fff:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009004:	56                   	push   esi
c0009005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009009:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000900d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009011:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000901b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009021:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009027:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009029:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000902f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009033:	b9 0e 00 00 00       	mov    ecx,0xe
c0009038:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000903a:	5e                   	pop    esi
c000903b:	5f                   	pop    edi
c000903c:	c3                   	ret    
c000903d:	90                   	nop

c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000903e:	53                   	push   ebx
c000903f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009043:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009047:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000904b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000904f:	0f b6 c0             	movzx  eax,al
c0009052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009056:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000905a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000905e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009062:	5b                   	pop    ebx
c0009063:	e9 a1 06 01 00       	jmp    c0019709 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009068 <Device::getParent()>:
c0009068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000906c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009072:	c3                   	ret    
c0009073:	90                   	nop

c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000907c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009085:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009089:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000908d:	e9 e8 07 01 00       	jmp    c001987a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009092 <Device::addChild(Device*)>:
c0009092:	53                   	push   ebx
c0009093:	83 ec 08             	sub    esp,0x8
c0009096:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000909a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000909e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00090a4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00090aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00090ac:	85 d2                	test   edx,edx
c00090ae:	74 04                	je     c00090b4 <Device::addChild(Device*)+0x22>
c00090b0:	89 d3                	mov    ebx,edx
c00090b2:	eb f6                	jmp    c00090aa <Device::addChild(Device*)+0x18>
c00090b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00090b7:	83 ec 0c             	sub    esp,0xc
c00090ba:	6a 08                	push   0x8
c00090bc:	e8 bb 60 00 00       	call   c000f17c <malloc>
c00090c1:	89 03                	mov    DWORD PTR [ebx],eax
c00090c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090d0:	83 c4 18             	add    esp,0x18
c00090d3:	5b                   	pop    ebx
c00090d4:	c3                   	ret    
c00090d5:	90                   	nop

c00090d6 <Device::removeAllChildren()>:
c00090d6:	56                   	push   esi
c00090d7:	53                   	push   ebx
c00090d8:	52                   	push   edx
c00090d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090dd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 17                	je     c00090ff <Device::removeAllChildren()+0x29>
c00090e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090eb:	85 c0                	test   eax,eax
c00090ed:	74 0c                	je     c00090fb <Device::removeAllChildren()+0x25>
c00090ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f1:	83 ec 0c             	sub    esp,0xc
c00090f4:	50                   	push   eax
c00090f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090f8:	83 c4 10             	add    esp,0x10
c00090fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090fd:	eb e4                	jmp    c00090e3 <Device::removeAllChildren()+0xd>
c00090ff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009105:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000910b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009111:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009118:	58                   	pop    eax
c0009119:	5b                   	pop    ebx
c000911a:	5e                   	pop    esi
c000911b:	c3                   	ret    

c000911c <Device::hibernateAll()>:
c000911c:	53                   	push   ebx
c000911d:	83 ec 14             	sub    esp,0x14
c0009120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009124:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009126:	53                   	push   ebx
c0009127:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000912a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009136:	74 0f                	je     c0009147 <Device::hibernateAll()+0x2b>
c0009138:	83 ec 0c             	sub    esp,0xc
c000913b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913e:	e8 d9 ff ff ff       	call   c000911c <Device::hibernateAll()>
c0009143:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009145:	eb e9                	jmp    c0009130 <Device::hibernateAll()+0x14>
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <Device::wakeAll()>:
c000914c:	53                   	push   ebx
c000914d:	83 ec 14             	sub    esp,0x14
c0009150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009156:	53                   	push   ebx
c0009157:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000915a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009166:	74 0f                	je     c0009177 <Device::wakeAll()+0x2b>
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000916e:	e8 d9 ff ff ff       	call   c000914c <Device::wakeAll()>
c0009173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009175:	eb e9                	jmp    c0009160 <Device::wakeAll()+0x14>
c0009177:	83 c4 08             	add    esp,0x8
c000917a:	5b                   	pop    ebx
c000917b:	c3                   	ret    

c000917c <Device::detectAll()>:
c000917c:	53                   	push   ebx
c000917d:	83 ec 14             	sub    esp,0x14
c0009180:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009184:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009186:	53                   	push   ebx
c0009187:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000918a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009190:	83 c4 10             	add    esp,0x10
c0009193:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009196:	74 0f                	je     c00091a7 <Device::detectAll()+0x2b>
c0009198:	83 ec 0c             	sub    esp,0xc
c000919b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000919e:	e8 d9 ff ff ff       	call   c000917c <Device::detectAll()>
c00091a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091a5:	eb e9                	jmp    c0009190 <Device::detectAll()+0x14>
c00091a7:	83 c4 08             	add    esp,0x8
c00091aa:	5b                   	pop    ebx
c00091ab:	c3                   	ret    

c00091ac <Device::disableLegacyAll()>:
c00091ac:	c3                   	ret    
c00091ad:	90                   	nop

c00091ae <Device::loadDriversForAll()>:
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Device::powerSavingAll(PowerSavingLevel)>:
c00091b0:	56                   	push   esi
c00091b1:	53                   	push   ebx
c00091b2:	83 ec 0c             	sub    esp,0xc
c00091b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00091b9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00091bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00091bf:	56                   	push   esi
c00091c0:	53                   	push   ebx
c00091c1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00091c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091d0:	74 0f                	je     c00091e1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091d2:	52                   	push   edx
c00091d3:	52                   	push   edx
c00091d4:	56                   	push   esi
c00091d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091d8:	e8 d3 ff ff ff       	call   c00091b0 <Device::powerSavingAll(PowerSavingLevel)>
c00091dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091df:	eb e9                	jmp    c00091ca <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091e1:	58                   	pop    eax
c00091e2:	5b                   	pop    ebx
c00091e3:	5e                   	pop    esi
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop

c00091e6 <Device::setName(char const*)>:
c00091e6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091ee:	e9 5d 74 ff ff       	jmp    c0000650 <strcpy>
c00091f3:	90                   	nop

c00091f4 <Device::Device(char const*)>:
c00091f4:	83 ec 1c             	sub    esp,0x1c
c00091f7:	ba 34 26 02 c0       	mov    edx,0xc0022634
c00091fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009200:	89 10                	mov    DWORD PTR [eax],edx
c0009202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009206:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009214:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000921e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009222:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000922c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009230:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000923a:	83 ec 08             	sub    esp,0x8
c000923d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009245:	e8 9c ff ff ff       	call   c00091e6 <Device::setName(char const*)>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009255:	83 ec 0c             	sub    esp,0xc
c0009258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000925c:	e8 1b 5f 00 00       	call   c000f17c <malloc>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009271:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009275:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000927b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009285:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000928b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009295:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000929c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00092a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ab:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00092b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00092c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092c4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00092ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092ea:	90                   	nop
c00092eb:	83 c4 1c             	add    esp,0x1c
c00092ee:	c3                   	ret    
c00092ef:	90                   	nop

c00092f0 <Device::getName()>:
c00092f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092f4:	05 d0 00 00 00       	add    eax,0xd0
c00092f9:	c3                   	ret    

c00092fa <Device::closeAll()>:
c00092fa:	53                   	push   ebx
c00092fb:	83 ec 08             	sub    esp,0x8
c00092fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009302:	53                   	push   ebx
c0009303:	e8 e8 ff ff ff       	call   c00092f0 <Device::getName()>
c0009308:	52                   	push   edx
c0009309:	50                   	push   eax
c000930a:	68 e8 25 02 c0       	push   0xc00225e8
c000930f:	e8 3a dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009314:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009316:	6a 00                	push   0x0
c0009318:	6a 00                	push   0x0
c000931a:	6a 00                	push   0x0
c000931c:	53                   	push   ebx
c000931d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009320:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009326:	83 c4 20             	add    esp,0x20
c0009329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000932c:	74 12                	je     c0009340 <Device::closeAll()+0x46>
c000932e:	83 ec 0c             	sub    esp,0xc
c0009331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009334:	e8 c1 ff ff ff       	call   c00092fa <Device::closeAll()>
c0009339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	eb e9                	jmp    c0009329 <Device::closeAll()+0x2f>
c0009340:	83 c4 08             	add    esp,0x8
c0009343:	5b                   	pop    ebx
c0009344:	c3                   	ret    
c0009345:	90                   	nop

c0009346 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009346:	83 ec 0c             	sub    esp,0xc
c0009349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000934d:	83 ec 08             	sub    esp,0x8
c0009350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009354:	50                   	push   eax
c0009355:	e8 9a fe ff ff       	call   c00091f4 <Device::Device(char const*)>
c000935a:	83 c4 10             	add    esp,0x10
c000935d:	ba 60 26 02 c0       	mov    edx,0xc0022660
c0009362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009366:	89 10                	mov    DWORD PTR [eax],edx
c0009368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009376:	90                   	nop
c0009377:	83 c4 0c             	add    esp,0xc
c000937a:	c3                   	ret    
c000937b:	90                   	nop

c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000937c:	57                   	push   edi
c000937d:	56                   	push   esi
c000937e:	53                   	push   ebx
c000937f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009383:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009387:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000938b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009391:	75 0c                	jne    c000939f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009393:	52                   	push   edx
c0009394:	52                   	push   edx
c0009395:	53                   	push   ebx
c0009396:	56                   	push   esi
c0009397:	e8 50 79 01 00       	call   c0020cec <LinkedList<Device>::addElement(Device*)>
c000939c:	83 c4 10             	add    esp,0x10
c000939f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093a8:	74 12                	je     c00093bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00093aa:	50                   	push   eax
c00093ab:	57                   	push   edi
c00093ac:	56                   	push   esi
c00093ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093b0:	e8 c7 ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093b7:	83 c4 10             	add    esp,0x10
c00093ba:	eb e9                	jmp    c00093a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00093bc:	5b                   	pop    ebx
c00093bd:	5e                   	pop    esi
c00093be:	5f                   	pop    edi
c00093bf:	c3                   	ret    

c00093c0 <getDevicesOfType(DeviceType)>:
c00093c0:	53                   	push   ebx
c00093c1:	83 ec 14             	sub    esp,0x14
c00093c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00093c8:	53                   	push   ebx
c00093c9:	e8 fa 79 01 00       	call   c0020dc8 <LinkedList<Device>::LinkedList()>
c00093ce:	83 c4 0c             	add    esp,0xc
c00093d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093d5:	53                   	push   ebx
c00093d6:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093dc:	e8 9b ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 d8                	mov    eax,ebx
c00093e6:	5b                   	pop    ebx
c00093e7:	c2 04 00             	ret    0x4
c00093ea:	66 90                	xchg   ax,ax

c00093ec <HardDiskController::HardDiskController(char const*)>:
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f3:	83 ec 08             	sub    esp,0x8
c00093f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fa:	50                   	push   eax
c00093fb:	e8 f4 fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009400:	83 c4 10             	add    esp,0x10
c0009403:	ba 8c 26 02 c0       	mov    edx,0xc002268c
c0009408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940c:	89 10                	mov    DWORD PTR [eax],edx
c000940e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009412:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000941c:	90                   	nop
c000941d:	83 c4 0c             	add    esp,0xc
c0009420:	c3                   	ret    
c0009421:	90                   	nop
c0009422:	66 90                	xchg   ax,ax

c0009424 <HardDiskController::~HardDiskController()>:
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	ba 8c 26 02 c0       	mov    edx,0xc002268c
c000942c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009430:	89 10                	mov    DWORD PTR [eax],edx
c0009432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009436:	83 ec 0c             	sub    esp,0xc
c0009439:	50                   	push   eax
c000943a:	e8 55 fb ff ff       	call   c0008f94 <Device::~Device()>
c000943f:	83 c4 10             	add    esp,0x10
c0009442:	90                   	nop
c0009443:	83 c4 0c             	add    esp,0xc
c0009446:	c3                   	ret    
c0009447:	90                   	nop

c0009448 <HardDiskController::~HardDiskController()>:
c0009448:	83 ec 0c             	sub    esp,0xc
c000944b:	83 ec 0c             	sub    esp,0xc
c000944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009452:	e8 cd ff ff ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	83 ec 08             	sub    esp,0x8
c000945d:	68 58 01 00 00       	push   0x158
c0009462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009466:	e8 88 34 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	83 c4 0c             	add    esp,0xc
c0009471:	c3                   	ret    

c0009472 <PhysicalDisk::eject()>:
c0009472:	83 c8 ff             	or     eax,0xffffffff
c0009475:	c3                   	ret    

c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009476:	83 ec 0c             	sub    esp,0xc
c0009479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947d:	83 ec 08             	sub    esp,0x8
c0009480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009484:	50                   	push   eax
c0009485:	e8 6a fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c000948a:	83 c4 10             	add    esp,0x10
c000948d:	ba b8 26 02 c0       	mov    edx,0xc00226b8
c0009492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009496:	89 10                	mov    DWORD PTR [eax],edx
c0009498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000949c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00094a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00094ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00094bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00094c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00094ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094d8:	90                   	nop
c00094d9:	83 c4 0c             	add    esp,0xc
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <PhysicalDisk::startCache()>:
c00094de:	56                   	push   esi
c00094df:	53                   	push   ebx
c00094e0:	83 ec 10             	sub    esp,0x10
c00094e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094e7:	6a 44                	push   0x44
c00094e9:	e8 8e 5c 00 00       	call   c000f17c <malloc>
c00094ee:	89 c6                	mov    esi,eax
c00094f0:	58                   	pop    eax
c00094f1:	5a                   	pop    edx
c00094f2:	53                   	push   ebx
c00094f3:	56                   	push   esi
c00094f4:	e8 a7 13 00 00       	call   c000a8a0 <VCache::VCache(PhysicalDisk*)>
c00094f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094ff:	83 c4 14             	add    esp,0x14
c0009502:	5b                   	pop    ebx
c0009503:	5e                   	pop    esi
c0009504:	c3                   	ret    
c0009505:	90                   	nop

c0009506 <PhysicalDisk::~PhysicalDisk()>:
c0009506:	83 ec 0c             	sub    esp,0xc
c0009509:	ba b8 26 02 c0       	mov    edx,0xc00226b8
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	89 10                	mov    DWORD PTR [eax],edx
c0009514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009518:	83 ec 0c             	sub    esp,0xc
c000951b:	50                   	push   eax
c000951c:	e8 73 fa ff ff       	call   c0008f94 <Device::~Device()>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	90                   	nop
c0009525:	83 c4 0c             	add    esp,0xc
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <PhysicalDisk::~PhysicalDisk()>:
c000952a:	83 ec 0c             	sub    esp,0xc
c000952d:	83 ec 0c             	sub    esp,0xc
c0009530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009534:	e8 cd ff ff ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0009539:	83 c4 10             	add    esp,0x10
c000953c:	83 ec 08             	sub    esp,0x8
c000953f:	68 6c 01 00 00       	push   0x16c
c0009544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009548:	e8 a6 33 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000954d:	83 c4 10             	add    esp,0x10
c0009550:	83 c4 0c             	add    esp,0xc
c0009553:	c3                   	ret    

c0009554 <startGUI(void*)>:
c0009554:	55                   	push   ebp
c0009555:	89 e5                	mov    ebp,esp
c0009557:	53                   	push   ebx
c0009558:	83 ec 04             	sub    esp,0x4
c000955b:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0009563:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009568:	85 c0                	test   eax,eax
c000956a:	75 01                	jne    c000956d <startGUI(void*)+0x19>
c000956c:	fb                   	sti    
c000956d:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009573:	83 ec 08             	sub    esp,0x8
c0009576:	6a 01                	push   0x1
c0009578:	68 e8 26 02 c0       	push   0xc00226e8
c000957d:	e8 53 c0 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c0009582:	83 c4 10             	add    esp,0x10
c0009585:	83 ec 08             	sub    esp,0x8
c0009588:	53                   	push   ebx
c0009589:	50                   	push   eax
c000958a:	e8 a7 c2 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009598:	83 ec 08             	sub    esp,0x8
c000959b:	6a 01                	push   0x1
c000959d:	68 02 27 02 c0       	push   0xc0022702
c00095a2:	e8 2e c0 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	53                   	push   ebx
c00095ae:	50                   	push   eax
c00095af:	e8 82 c2 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	eb fe                	jmp    c00095b7 <startGUI(void*)+0x63>

c00095b9 <startGUIVESA(void*)>:
c00095b9:	55                   	push   ebp
c00095ba:	89 e5                	mov    ebp,esp
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 04             	sub    esp,0x4
c00095c0:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00095c8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00095cd:	85 c0                	test   eax,eax
c00095cf:	75 01                	jne    c00095d2 <startGUIVESA(void*)+0x19>
c00095d1:	fb                   	sti    
c00095d2:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095d8:	83 ec 08             	sub    esp,0x8
c00095db:	6a 01                	push   0x1
c00095dd:	68 20 27 02 c0       	push   0xc0022720
c00095e2:	e8 ee bf 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c00095e7:	83 c4 10             	add    esp,0x10
c00095ea:	83 ec 08             	sub    esp,0x8
c00095ed:	53                   	push   ebx
c00095ee:	50                   	push   eax
c00095ef:	e8 42 c2 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c00095f4:	83 c4 10             	add    esp,0x10
c00095f7:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095fd:	83 ec 08             	sub    esp,0x8
c0009600:	6a 01                	push   0x1
c0009602:	68 02 27 02 c0       	push   0xc0022702
c0009607:	e8 c9 bf 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	83 ec 08             	sub    esp,0x8
c0009612:	53                   	push   ebx
c0009613:	50                   	push   eax
c0009614:	e8 1d c2 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	eb fe                	jmp    c000961c <startGUIVESA(void*)+0x63>

c000961e <sendKeyToTerminal(unsigned char)>:
c000961e:	55                   	push   ebp
c000961f:	89 e5                	mov    ebp,esp
c0009621:	83 ec 28             	sub    esp,0x28
c0009624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009627:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000962a:	a1 54 ce 02 c0       	mov    eax,ds:0xc002ce54
c000962f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009633:	83 ec 08             	sub    esp,0x8
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	e8 93 89 00 00       	call   c0011fd0 <VgaText::receiveKey(unsigned char)>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009644:	83 f8 0a             	cmp    eax,0xa
c0009647:	74 16                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009649:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000964d:	83 f8 03             	cmp    eax,0x3
c0009650:	74 0d                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009652:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009656:	83 f8 1c             	cmp    eax,0x1c
c0009659:	0f 85 92 00 00 00    	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c000965f:	fa                   	cli    
c0009660:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009665:	83 c0 01             	add    eax,0x1
c0009668:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000966d:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0009672:	83 c0 01             	add    eax,0x1
c0009675:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c000967a:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c000967f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009682:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c000968c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009690:	74 1f                	je     c00096b1 <sendKeyToTerminal(unsigned char)+0x93>
c0009692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009695:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009698:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000969b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000969e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00096a7:	e8 58 cd 00 00       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	eb db                	jmp    c000968c <sendKeyToTerminal(unsigned char)+0x6e>
c00096b1:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00096b6:	83 e8 01             	sub    eax,0x1
c00096b9:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00096be:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00096c3:	85 c0                	test   eax,eax
c00096c5:	75 18                	jne    c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096c7:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c00096cc:	85 c0                	test   eax,eax
c00096ce:	74 0f                	je     c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096d0:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00096da:	e8 25 ca 00 00       	call   c0016104 <schedule()>
c00096df:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00096e7:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00096ec:	85 c0                	test   eax,eax
c00096ee:	75 01                	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096f0:	fb                   	sti    
c00096f1:	90                   	nop
c00096f2:	c9                   	leave  
c00096f3:	c3                   	ret    

c00096f4 <sendKeyboardToken(KeyboardToken)>:
c00096f4:	55                   	push   ebp
c00096f5:	89 e5                	mov    ebp,esp
c00096f7:	83 ec 18             	sub    esp,0x18
c00096fa:	e8 ed 66 00 00       	call   c000fdec <KeUserIOReceived()>
c00096ff:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0009702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009705:	0f b7 c0             	movzx  eax,ax
c0009708:	83 f2 01             	xor    edx,0x1
c000970b:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c0009711:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009716:	85 c0                	test   eax,eax
c0009718:	74 24                	je     c000973e <sendKeyboardToken(KeyboardToken)+0x4a>
c000971a:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c0009720:	83 ec 04             	sub    esp,0x4
c0009723:	68 40 a3 02 c0       	push   0xc002a340
c0009728:	83 ec 08             	sub    esp,0x8
c000972b:	89 e0                	mov    eax,esp
c000972d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009730:	89 08                	mov    DWORD PTR [eax],ecx
c0009732:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009735:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009739:	ff d2                	call   edx
c000973b:	83 c4 10             	add    esp,0x10
c000973e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009742:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009745:	0f b6 c0             	movzx  eax,al
c0009748:	85 c0                	test   eax,eax
c000974a:	0f 84 da 00 00 00    	je     c000982a <sendKeyboardToken(KeyboardToken)+0x136>
c0009750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009753:	0f b7 c0             	movzx  eax,ax
c0009756:	3d 18 03 00 00       	cmp    eax,0x318
c000975b:	75 06                	jne    c0009763 <sendKeyboardToken(KeyboardToken)+0x6f>
c000975d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009766:	0f b7 c0             	movzx  eax,ax
c0009769:	3d 19 03 00 00       	cmp    eax,0x319
c000976e:	75 06                	jne    c0009776 <sendKeyboardToken(KeyboardToken)+0x82>
c0009770:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009779:	0f b7 c0             	movzx  eax,ax
c000977c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009781:	75 06                	jne    c0009789 <sendKeyboardToken(KeyboardToken)+0x95>
c0009783:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000978c:	0f b7 c0             	movzx  eax,ax
c000978f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009794:	75 06                	jne    c000979c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009796:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000979c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979f:	0f b7 c0             	movzx  eax,ax
c00097a2:	3d 1c 03 00 00       	cmp    eax,0x31c
c00097a7:	75 06                	jne    c00097af <sendKeyboardToken(KeyboardToken)+0xbb>
c00097a9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00097af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b2:	0f b7 c0             	movzx  eax,ax
c00097b5:	3d 1d 03 00 00       	cmp    eax,0x31d
c00097ba:	75 06                	jne    c00097c2 <sendKeyboardToken(KeyboardToken)+0xce>
c00097bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	0f b7 c0             	movzx  eax,ax
c00097c8:	3d 1e 03 00 00       	cmp    eax,0x31e
c00097cd:	75 06                	jne    c00097d5 <sendKeyboardToken(KeyboardToken)+0xe1>
c00097cf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d8:	0f b7 c0             	movzx  eax,ax
c00097db:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097e0:	75 06                	jne    c00097e8 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097e2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097eb:	0f b7 c0             	movzx  eax,ax
c00097ee:	3d 20 03 00 00       	cmp    eax,0x320
c00097f3:	75 06                	jne    c00097fb <sendKeyboardToken(KeyboardToken)+0x107>
c00097f5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097fe:	0f b7 c0             	movzx  eax,ax
c0009801:	3d 21 03 00 00       	cmp    eax,0x321
c0009806:	75 06                	jne    c000980e <sendKeyboardToken(KeyboardToken)+0x11a>
c0009808:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000980e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009811:	0f b7 c0             	movzx  eax,ax
c0009814:	3d 22 03 00 00       	cmp    eax,0x322
c0009819:	0f 85 f1 00 00 00    	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000981f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0009825:	e9 e6 00 00 00       	jmp    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000982a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982d:	0f b7 c0             	movzx  eax,ax
c0009830:	3d 18 03 00 00       	cmp    eax,0x318
c0009835:	75 0a                	jne    c0009841 <sendKeyboardToken(KeyboardToken)+0x14d>
c0009837:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000983d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009844:	0f b7 c0             	movzx  eax,ax
c0009847:	3d 19 03 00 00       	cmp    eax,0x319
c000984c:	75 0a                	jne    c0009858 <sendKeyboardToken(KeyboardToken)+0x164>
c000984e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009854:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985b:	0f b7 c0             	movzx  eax,ax
c000985e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009863:	75 0a                	jne    c000986f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009865:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000986b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009872:	0f b7 c0             	movzx  eax,ax
c0009875:	3d 1b 03 00 00       	cmp    eax,0x31b
c000987a:	75 0a                	jne    c0009886 <sendKeyboardToken(KeyboardToken)+0x192>
c000987c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009882:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009889:	0f b7 c0             	movzx  eax,ax
c000988c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009891:	75 0a                	jne    c000989d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009893:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009899:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a0:	0f b7 c0             	movzx  eax,ax
c00098a3:	3d 1d 03 00 00       	cmp    eax,0x31d
c00098a8:	75 0a                	jne    c00098b4 <sendKeyboardToken(KeyboardToken)+0x1c0>
c00098aa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00098b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b7:	0f b7 c0             	movzx  eax,ax
c00098ba:	3d 1e 03 00 00       	cmp    eax,0x31e
c00098bf:	75 0a                	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x1d7>
c00098c1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00098c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ce:	0f b7 c0             	movzx  eax,ax
c00098d1:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098d6:	75 0a                	jne    c00098e2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098d8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e5:	0f b7 c0             	movzx  eax,ax
c00098e8:	3d 20 03 00 00       	cmp    eax,0x320
c00098ed:	75 0a                	jne    c00098f9 <sendKeyboardToken(KeyboardToken)+0x205>
c00098ef:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	0f b7 c0             	movzx  eax,ax
c00098ff:	3d 21 03 00 00       	cmp    eax,0x321
c0009904:	75 0a                	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c0009906:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000990c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009913:	0f b7 c0             	movzx  eax,ax
c0009916:	3d 00 02 00 00       	cmp    eax,0x200
c000991b:	75 2f                	jne    c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000991d:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c0009922:	83 f0 01             	xor    eax,0x1
c0009925:	0f b6 c0             	movzx  eax,al
c0009928:	85 c0                	test   eax,eax
c000992a:	74 20                	je     c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000992c:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0009931:	6a 01                	push   0x1
c0009933:	6a 00                	push   0x0
c0009935:	68 54 95 00 c0       	push   0xc0009554
c000993a:	50                   	push   eax
c000993b:	e8 6c c5 00 00       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c0009940:	83 c4 10             	add    esp,0x10
c0009943:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000994a:	eb 3a                	jmp    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c000994c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000994f:	0f b7 c0             	movzx  eax,ax
c0009952:	3d 01 02 00 00       	cmp    eax,0x201
c0009957:	75 2d                	jne    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009959:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c000995e:	83 f0 01             	xor    eax,0x1
c0009961:	0f b6 c0             	movzx  eax,al
c0009964:	85 c0                	test   eax,eax
c0009966:	74 1e                	je     c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009968:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000996d:	6a 01                	push   0x1
c000996f:	6a 00                	push   0x0
c0009971:	68 b9 95 00 c0       	push   0xc00095b9
c0009976:	50                   	push   eax
c0009977:	e8 30 c5 00 00       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c000997c:	83 c4 10             	add    esp,0x10
c000997f:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c0009986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009989:	0f b7 c0             	movzx  eax,ax
c000998c:	3d 25 03 00 00       	cmp    eax,0x325
c0009991:	75 06                	jne    c0009999 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009993:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000999c:	0f b7 c0             	movzx  eax,ax
c000999f:	3d 24 03 00 00       	cmp    eax,0x324
c00099a4:	75 06                	jne    c00099ac <sendKeyboardToken(KeyboardToken)+0x2b8>
c00099a6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00099ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099af:	0f b7 c0             	movzx  eax,ax
c00099b2:	3d 23 03 00 00       	cmp    eax,0x323
c00099b7:	75 06                	jne    c00099bf <sendKeyboardToken(KeyboardToken)+0x2cb>
c00099b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00099bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099c2:	0f b7 c0             	movzx  eax,ax
c00099c5:	3d 26 03 00 00       	cmp    eax,0x326
c00099ca:	75 06                	jne    c00099d2 <sendKeyboardToken(KeyboardToken)+0x2de>
c00099cc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099d5:	0f b7 c0             	movzx  eax,ax
c00099d8:	3d 27 03 00 00       	cmp    eax,0x327
c00099dd:	75 06                	jne    c00099e5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099df:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e8:	0f b7 c0             	movzx  eax,ax
c00099eb:	3d 22 03 00 00       	cmp    eax,0x322
c00099f0:	75 06                	jne    c00099f8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099f2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099f8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099fc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099ff:	83 f0 01             	xor    eax,0x1
c0009a02:	0f b6 c0             	movzx  eax,al
c0009a05:	85 c0                	test   eax,eax
c0009a07:	74 7c                	je     c0009a85 <sendKeyboardToken(KeyboardToken)+0x391>
c0009a09:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c0009a0e:	0f b6 c0             	movzx  eax,al
c0009a11:	85 c0                	test   eax,eax
c0009a13:	74 43                	je     c0009a58 <sendKeyboardToken(KeyboardToken)+0x364>
c0009a15:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a19:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0009a1d:	85 c0                	test   eax,eax
c0009a1f:	74 2b                	je     c0009a4c <sendKeyboardToken(KeyboardToken)+0x358>
c0009a21:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c0009a27:	89 d0                	mov    eax,edx
c0009a29:	c1 e0 02             	shl    eax,0x2
c0009a2c:	01 d0                	add    eax,edx
c0009a2e:	d1 e0                	shl    eax,1
c0009a30:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a38:	0f b7 c0             	movzx  eax,ax
c0009a3b:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a3e:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a43:	01 d0                	add    eax,edx
c0009a45:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a4a:	eb 71                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a4c:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a56:	eb 65                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a58:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a5d:	85 c0                	test   eax,eax
c0009a5f:	74 18                	je     c0009a79 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a61:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a66:	0f b6 c0             	movzx  eax,al
c0009a69:	83 ec 0c             	sub    esp,0xc
c0009a6c:	50                   	push   eax
c0009a6d:	e8 ac fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009a72:	83 c4 10             	add    esp,0x10
c0009a75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a79:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a83:	eb 38                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a88:	0f b7 c0             	movzx  eax,ax
c0009a8b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a90:	75 2b                	jne    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a92:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a97:	85 c0                	test   eax,eax
c0009a99:	74 18                	je     c0009ab3 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a9b:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009aa0:	0f b6 c0             	movzx  eax,al
c0009aa3:	83 ec 0c             	sub    esp,0xc
c0009aa6:	50                   	push   eax
c0009aa7:	e8 72 fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009aac:	83 c4 10             	add    esp,0x10
c0009aaf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009ab3:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009abd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ac0:	83 f0 01             	xor    eax,0x1
c0009ac3:	0f b6 c0             	movzx  eax,al
c0009ac6:	85 c0                	test   eax,eax
c0009ac8:	74 5a                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009acd:	83 f0 01             	xor    eax,0x1
c0009ad0:	0f b6 c0             	movzx  eax,al
c0009ad3:	85 c0                	test   eax,eax
c0009ad5:	74 4d                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ad7:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009adc:	83 f0 01             	xor    eax,0x1
c0009adf:	0f b6 c0             	movzx  eax,al
c0009ae2:	85 c0                	test   eax,eax
c0009ae4:	74 3e                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae9:	0f b7 c0             	movzx  eax,ax
c0009aec:	83 f8 1f             	cmp    eax,0x1f
c0009aef:	76 0b                	jbe    c0009afc <sendKeyboardToken(KeyboardToken)+0x408>
c0009af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009af4:	0f b7 c0             	movzx  eax,ax
c0009af7:	83 f8 7e             	cmp    eax,0x7e
c0009afa:	76 16                	jbe    c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aff:	0f b7 c0             	movzx  eax,ax
c0009b02:	83 f8 0a             	cmp    eax,0xa
c0009b05:	74 0b                	je     c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0a:	0f b7 c0             	movzx  eax,ax
c0009b0d:	83 f8 08             	cmp    eax,0x8
c0009b10:	75 12                	jne    c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b15:	0f b6 c0             	movzx  eax,al
c0009b18:	83 ec 0c             	sub    esp,0xc
c0009b1b:	50                   	push   eax
c0009b1c:	e8 fd fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b21:	83 c4 10             	add    esp,0x10
c0009b24:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009b27:	83 f0 01             	xor    eax,0x1
c0009b2a:	0f b6 c0             	movzx  eax,al
c0009b2d:	85 c0                	test   eax,eax
c0009b2f:	74 5d                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b31:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b34:	83 f0 01             	xor    eax,0x1
c0009b37:	0f b6 c0             	movzx  eax,al
c0009b3a:	85 c0                	test   eax,eax
c0009b3c:	74 50                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b3e:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b43:	0f b6 c0             	movzx  eax,al
c0009b46:	85 c0                	test   eax,eax
c0009b48:	74 44                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b4d:	0f b7 c0             	movzx  eax,ax
c0009b50:	83 f8 3f             	cmp    eax,0x3f
c0009b53:	76 39                	jbe    c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b58:	0f b7 c0             	movzx  eax,ax
c0009b5b:	83 f8 7f             	cmp    eax,0x7f
c0009b5e:	77 2e                	ja     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b63:	88 c2                	mov    dl,al
c0009b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b68:	0f b7 c0             	movzx  eax,ax
c0009b6b:	83 f8 5f             	cmp    eax,0x5f
c0009b6e:	76 04                	jbe    c0009b74 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b70:	b0 20                	mov    al,0x20
c0009b72:	eb 02                	jmp    c0009b76 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b74:	b0 00                	mov    al,0x0
c0009b76:	89 d1                	mov    ecx,edx
c0009b78:	29 c1                	sub    ecx,eax
c0009b7a:	89 c8                	mov    eax,ecx
c0009b7c:	83 e8 40             	sub    eax,0x40
c0009b7f:	0f b6 c0             	movzx  eax,al
c0009b82:	83 ec 0c             	sub    esp,0xc
c0009b85:	50                   	push   eax
c0009b86:	e8 93 fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b8b:	83 c4 10             	add    esp,0x10
c0009b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b91:	0f b7 c0             	movzx  eax,ax
c0009b94:	3d 00 03 00 00       	cmp    eax,0x300
c0009b99:	75 12                	jne    c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b9b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b9e:	83 f0 01             	xor    eax,0x1
c0009ba1:	0f b6 c0             	movzx  eax,al
c0009ba4:	85 c0                	test   eax,eax
c0009ba6:	74 05                	je     c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009ba8:	e8 28 7b 00 00       	call   c00116d5 <doTerminalCycle()>
c0009bad:	90                   	nop
c0009bae:	c9                   	leave  
c0009baf:	c3                   	ret    

c0009bb0 <clearInternalKeybuffer(VgaText*)>:
c0009bb0:	55                   	push   ebp
c0009bb1:	89 e5                	mov    ebp,esp
c0009bb3:	83 ec 08             	sub    esp,0x8
c0009bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bb9:	05 02 01 00 00       	add    eax,0x102
c0009bbe:	83 ec 0c             	sub    esp,0xc
c0009bc1:	50                   	push   eax
c0009bc2:	e8 b9 69 ff ff       	call   c0000580 <strlen>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009bcd:	81 c2 02 01 00 00    	add    edx,0x102
c0009bd3:	83 ec 04             	sub    esp,0x4
c0009bd6:	50                   	push   eax
c0009bd7:	6a 00                	push   0x0
c0009bd9:	52                   	push   edx
c0009bda:	e8 11 69 ff ff       	call   c00004f0 <memset>
c0009bdf:	83 c4 10             	add    esp,0x10
c0009be2:	90                   	nop
c0009be3:	c9                   	leave  
c0009be4:	c3                   	ret    

c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009be5:	55                   	push   ebp
c0009be6:	89 e5                	mov    ebp,esp
c0009be8:	83 ec 18             	sub    esp,0x18
c0009beb:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bf0:	85 c0                	test   eax,eax
c0009bf2:	74 2a                	je     c0009c1e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bf4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bfa:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c0009c00:	83 ec 04             	sub    esp,0x4
c0009c03:	68 40 a3 02 c0       	push   0xc002a340
c0009c08:	83 ec 08             	sub    esp,0x8
c0009c0b:	89 e0                	mov    eax,esp
c0009c0d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009c10:	89 08                	mov    DWORD PTR [eax],ecx
c0009c12:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009c15:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009c19:	ff d2                	call   edx
c0009c1b:	83 c4 10             	add    esp,0x10
c0009c1e:	fb                   	sti    
c0009c1f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009c26:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009c2a:	0f 84 08 01 00 00    	je     c0009d38 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c33:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c39:	0f be c0             	movsx  eax,al
c0009c3c:	85 c0                	test   eax,eax
c0009c3e:	75 27                	jne    c0009c67 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c40:	fa                   	cli    
c0009c41:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009c46:	83 c0 01             	add    eax,0x1
c0009c49:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0009c4e:	e8 b1 c4 00 00       	call   c0016104 <schedule()>
c0009c53:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0009c5b:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009c60:	85 c0                	test   eax,eax
c0009c62:	75 cc                	jne    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c64:	fb                   	sti    
c0009c65:	eb c9                	jmp    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0009c6d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c73:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c79:	88 10                	mov    BYTE PTR [eax],dl
c0009c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c7e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c84:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c87:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8b:	83 f8 03             	cmp    eax,0x3
c0009c8e:	75 1e                	jne    c0009cae <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca0:	83 ec 08             	sub    esp,0x8
c0009ca3:	6a 02                	push   0x2
c0009ca5:	50                   	push   eax
c0009ca6:	e8 55 69 00 00       	call   c0010600 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cb2:	83 f8 1c             	cmp    eax,0x1c
c0009cb5:	75 1e                	jne    c0009cd5 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009cb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cc1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cc7:	83 ec 08             	sub    esp,0x8
c0009cca:	6a 09                	push   0x9
c0009ccc:	50                   	push   eax
c0009ccd:	e8 2e 69 00 00       	call   c0010600 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cd2:	83 c4 10             	add    esp,0x10
c0009cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cd8:	05 02 01 00 00       	add    eax,0x102
c0009cdd:	83 ec 0c             	sub    esp,0xc
c0009ce0:	50                   	push   eax
c0009ce1:	e8 9a 68 ff ff       	call   c0000580 <strlen>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cec:	81 c2 02 01 00 00    	add    edx,0x102
c0009cf2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cf5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cf8:	81 c2 02 01 00 00    	add    edx,0x102
c0009cfe:	83 ec 04             	sub    esp,0x4
c0009d01:	50                   	push   eax
c0009d02:	51                   	push   ecx
c0009d03:	52                   	push   edx
c0009d04:	e8 c7 66 ff ff       	call   c00003d0 <memmove>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009d10:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d14:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d18:	83 f8 0a             	cmp    eax,0xa
c0009d1b:	74 16                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d1d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d21:	83 f8 03             	cmp    eax,0x3
c0009d24:	74 0d                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d26:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d2a:	83 f8 1c             	cmp    eax,0x1c
c0009d2d:	0f 85 f3 fe ff ff    	jne    c0009c26 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d36:	eb 03                	jmp    c0009d3b <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d3b:	c9                   	leave  
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Keyboard::Keyboard(char const*)>:
c0009d3e:	83 ec 0c             	sub    esp,0xc
c0009d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d45:	83 ec 08             	sub    esp,0x8
c0009d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4c:	50                   	push   eax
c0009d4d:	e8 a2 f4 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009d52:	83 c4 10             	add    esp,0x10
c0009d55:	ba 44 27 02 c0       	mov    edx,0xc0022744
c0009d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5e:	89 10                	mov    DWORD PTR [eax],edx
c0009d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d64:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d6e:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d75:	90                   	nop
c0009d76:	83 c4 0c             	add    esp,0xc
c0009d79:	c3                   	ret    

c0009d7a <Keyboard::~Keyboard()>:
c0009d7a:	83 ec 0c             	sub    esp,0xc
c0009d7d:	ba 44 27 02 c0       	mov    edx,0xc0022744
c0009d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d86:	89 10                	mov    DWORD PTR [eax],edx
c0009d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	50                   	push   eax
c0009d90:	e8 ff f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	90                   	nop
c0009d99:	83 c4 0c             	add    esp,0xc
c0009d9c:	c3                   	ret    
c0009d9d:	90                   	nop

c0009d9e <Keyboard::~Keyboard()>:
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	83 ec 0c             	sub    esp,0xc
c0009da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da8:	e8 cd ff ff ff       	call   c0009d7a <Keyboard::~Keyboard()>
c0009dad:	83 c4 10             	add    esp,0x10
c0009db0:	83 ec 08             	sub    esp,0x8
c0009db3:	68 5c 01 00 00       	push   0x15c
c0009db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dbc:	e8 32 2b 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0009dc1:	83 c4 10             	add    esp,0x10
c0009dc4:	83 c4 0c             	add    esp,0xc
c0009dc7:	c3                   	ret    

c0009dc8 <LogicalDisk::close(int, int, void*)>:
c0009dc8:	83 c8 ff             	or     eax,0xffffffff
c0009dcb:	c3                   	ret    

c0009dcc <LogicalDisk::~LogicalDisk()>:
c0009dcc:	83 ec 0c             	sub    esp,0xc
c0009dcf:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c0009dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd8:	89 10                	mov    DWORD PTR [eax],edx
c0009dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	50                   	push   eax
c0009de2:	e8 ad f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	90                   	nop
c0009deb:	83 c4 0c             	add    esp,0xc
c0009dee:	c3                   	ret    
c0009def:	90                   	nop

c0009df0 <LogicalDisk::~LogicalDisk()>:
c0009df0:	83 ec 0c             	sub    esp,0xc
c0009df3:	83 ec 0c             	sub    esp,0xc
c0009df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfa:	e8 cd ff ff ff       	call   c0009dcc <LogicalDisk::~LogicalDisk()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	83 ec 08             	sub    esp,0x8
c0009e05:	68 78 01 00 00       	push   0x178
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 e0 2a 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	83 c4 0c             	add    esp,0xc
c0009e19:	c3                   	ret    

c0009e1a <LogicalDisk::open(int, int, void*)>:
c0009e1a:	83 ec 18             	sub    esp,0x18
c0009e1d:	68 70 27 02 c0       	push   0xc0022770
c0009e22:	e8 9b 56 00 00       	call   c000f4c2 <KePanic(char const*)>
c0009e27:	83 c8 ff             	or     eax,0xffffffff
c0009e2a:	83 c4 1c             	add    esp,0x1c
c0009e2d:	c3                   	ret    

c0009e2e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e2e:	53                   	push   ebx
c0009e2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e3b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e41:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e47:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e4d:	77 10                	ja     c0009e5f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e4f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e55:	89 d3                	mov    ebx,edx
c0009e57:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e5d:	72 05                	jb     c0009e64 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e5f:	83 c8 ff             	or     eax,0xffffffff
c0009e62:	89 c2                	mov    edx,eax
c0009e64:	5b                   	pop    ebx
c0009e65:	c3                   	ret    

c0009e66 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e66:	56                   	push   esi
c0009e67:	83 c8 ff             	or     eax,0xffffffff
c0009e6a:	53                   	push   ebx
c0009e6b:	89 c2                	mov    edx,eax
c0009e6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e71:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e79:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e7f:	77 27                	ja     c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e81:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e87:	89 d8                	mov    eax,ebx
c0009e89:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e94:	89 c2                	mov    edx,eax
c0009e96:	73 10                	jae    c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e98:	89 c8                	mov    eax,ecx
c0009e9a:	89 da                	mov    edx,ebx
c0009e9c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009ea2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009ea8:	5b                   	pop    ebx
c0009ea9:	5e                   	pop    esi
c0009eaa:	c3                   	ret    
c0009eab:	90                   	nop

c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009eac:	83 ec 1c             	sub    esp,0x1c
c0009eaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009eb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ebf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ec6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed2:	83 ec 08             	sub    esp,0x8
c0009ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ed9:	50                   	push   eax
c0009eda:	e8 15 f3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c0009ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eeb:	89 10                	mov    DWORD PTR [eax],edx
c0009eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f07:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f12:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f28:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f2e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f34:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f3f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f45:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f53:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f5d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f67:	90                   	nop
c0009f68:	83 c4 1c             	add    esp,0x1c
c0009f6b:	c3                   	ret    

c0009f6c <LogicalDisk::assignDriveLetter()>:
c0009f6c:	55                   	push   ebp
c0009f6d:	57                   	push   edi
c0009f6e:	56                   	push   esi
c0009f6f:	53                   	push   ebx
c0009f70:	83 ec 14             	sub    esp,0x14
c0009f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f77:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f7d:	b0 41                	mov    al,0x41
c0009f7f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f85:	84 d2                	test   dl,dl
c0009f87:	75 02                	jne    c0009f8b <LogicalDisk::assignDriveLetter()+0x1f>
c0009f89:	b0 43                	mov    al,0x43
c0009f8b:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f91:	0f b6 ca             	movzx  ecx,dl
c0009f94:	0f be e8             	movsx  ebp,al
c0009f97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f9b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f9f:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009fa5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009fa9:	3c 43                	cmp    al,0x43
c0009fab:	75 10                	jne    c0009fbd <LogicalDisk::assignDriveLetter()+0x51>
c0009fad:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fb4:	75 5a                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fbb:	75 53                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fbd:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fc0:	ba 01 00 00 00       	mov    edx,0x1
c0009fc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fc8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fcb:	d3 e2                	shl    edx,cl
c0009fcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd1:	89 d7                	mov    edi,edx
c0009fd3:	89 d6                	mov    esi,edx
c0009fd5:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fd9:	c1 ff 1f             	sar    edi,0x1f
c0009fdc:	21 f9                	and    ecx,edi
c0009fde:	09 d1                	or     ecx,edx
c0009fe0:	75 2e                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fe2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fe6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fea:	09 f2                	or     edx,esi
c0009fec:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fef:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fff:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c000a006:	09 fa                	or     edx,edi
c000a008:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c000a00e:	eb 0d                	jmp    c000a01d <LogicalDisk::assignDriveLetter()+0xb1>
c000a010:	8d 50 01             	lea    edx,[eax+0x1]
c000a013:	45                   	inc    ebp
c000a014:	80 fa 5b             	cmp    dl,0x5b
c000a017:	88 d0                	mov    al,dl
c000a019:	75 8e                	jne    c0009fa9 <LogicalDisk::assignDriveLetter()+0x3d>
c000a01b:	31 c0                	xor    eax,eax
c000a01d:	83 c4 14             	add    esp,0x14
c000a020:	5b                   	pop    ebx
c000a021:	5e                   	pop    esi
c000a022:	5f                   	pop    edi
c000a023:	5d                   	pop    ebp
c000a024:	c3                   	ret    
c000a025:	90                   	nop

c000a026 <LogicalDisk::mount()>:
c000a026:	56                   	push   esi
c000a027:	53                   	push   ebx
c000a028:	53                   	push   ebx
c000a029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a02d:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a033:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a03d:	85 db                	test   ebx,ebx
c000a03f:	74 27                	je     c000a068 <LogicalDisk::mount()+0x42>
c000a041:	51                   	push   ecx
c000a042:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a049:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a04b:	83 e8 41             	sub    eax,0x41
c000a04e:	50                   	push   eax
c000a04f:	56                   	push   esi
c000a050:	53                   	push   ebx
c000a051:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a054:	83 c4 10             	add    esp,0x10
c000a057:	84 c0                	test   al,al
c000a059:	74 08                	je     c000a063 <LogicalDisk::mount()+0x3d>
c000a05b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a061:	eb 07                	jmp    c000a06a <LogicalDisk::mount()+0x44>
c000a063:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a066:	eb d5                	jmp    c000a03d <LogicalDisk::mount()+0x17>
c000a068:	31 c0                	xor    eax,eax
c000a06a:	5a                   	pop    edx
c000a06b:	5b                   	pop    ebx
c000a06c:	5e                   	pop    esi
c000a06d:	c3                   	ret    

c000a06e <LogicalDisk::unmount()>:
c000a06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a072:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a07c:	c3                   	ret    
c000a07d:	90                   	nop

c000a07e <LogicalDisk::eject()>:
c000a07e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a082:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a088:	8b 10                	mov    edx,DWORD PTR [eax]
c000a08a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a08e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a091:	90                   	nop

c000a092 <LogicalDisk::unassignDriveLetter()>:
c000a092:	57                   	push   edi
c000a093:	56                   	push   esi
c000a094:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a098:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a09f:	85 c9                	test   ecx,ecx
c000a0a1:	75 0f                	jne    c000a0b2 <LogicalDisk::unassignDriveLetter()+0x20>
c000a0a3:	c7 44 24 0c 94 27 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022794
c000a0ab:	5e                   	pop    esi
c000a0ac:	5f                   	pop    edi
c000a0ad:	e9 10 54 00 00       	jmp    c000f4c2 <KePanic(char const*)>
c000a0b2:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0b9:	83 e9 41             	sub    ecx,0x41
c000a0bc:	b8 01 00 00 00       	mov    eax,0x1
c000a0c1:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a0cc:	d3 e0                	shl    eax,cl
c000a0ce:	89 c7                	mov    edi,eax
c000a0d0:	f7 d0                	not    eax
c000a0d2:	c1 ff 1f             	sar    edi,0x1f
c000a0d5:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0db:	89 fe                	mov    esi,edi
c000a0dd:	f7 d6                	not    esi
c000a0df:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0e5:	5e                   	pop    esi
c000a0e6:	5f                   	pop    edi
c000a0e7:	c3                   	ret    

c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0e8:	57                   	push   edi
c000a0e9:	56                   	push   esi
c000a0ea:	53                   	push   ebx
c000a0eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a101:	77 41                	ja     c000a144 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a103:	99                   	cdq    
c000a104:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a10a:	01 c8                	add    eax,ecx
c000a10c:	11 da                	adc    edx,ebx
c000a10e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a114:	19 d7                	sbb    edi,edx
c000a116:	72 33                	jb     c000a14b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a118:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a11e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a128:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a12c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a132:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a138:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a13c:	5b                   	pop    ebx
c000a13d:	5e                   	pop    esi
c000a13e:	5f                   	pop    edi
c000a13f:	e9 76 0b 00 00       	jmp    c000acba <VCache::read(unsigned long long, int, void*)>
c000a144:	b8 05 00 00 00       	mov    eax,0x5
c000a149:	eb 05                	jmp    c000a150 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a14b:	b8 07 00 00 00       	mov    eax,0x7
c000a150:	5b                   	pop    ebx
c000a151:	5e                   	pop    esi
c000a152:	5f                   	pop    edi
c000a153:	c3                   	ret    

c000a154 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a154:	57                   	push   edi
c000a155:	56                   	push   esi
c000a156:	53                   	push   ebx
c000a157:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a15b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a15f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a167:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a16d:	77 41                	ja     c000a1b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a16f:	99                   	cdq    
c000a170:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a176:	01 c8                	add    eax,ecx
c000a178:	11 da                	adc    edx,ebx
c000a17a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a180:	19 d7                	sbb    edi,edx
c000a182:	72 33                	jb     c000a1b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a184:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a18a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a190:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a194:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a198:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a19e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a1a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1a8:	5b                   	pop    ebx
c000a1a9:	5e                   	pop    esi
c000a1aa:	5f                   	pop    edi
c000a1ab:	e9 3c 09 00 00       	jmp    c000aaec <VCache::write(unsigned long long, int, void*)>
c000a1b0:	b8 05 00 00 00       	mov    eax,0x5
c000a1b5:	eb 05                	jmp    c000a1bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1b7:	b8 07 00 00 00       	mov    eax,0x7
c000a1bc:	5b                   	pop    ebx
c000a1bd:	5e                   	pop    esi
c000a1be:	5f                   	pop    edi
c000a1bf:	c3                   	ret    

c000a1c0 <Mouse::Mouse(char const*)>:
c000a1c0:	83 ec 0c             	sub    esp,0xc
c000a1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c7:	83 ec 08             	sub    esp,0x8
c000a1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ce:	50                   	push   eax
c000a1cf:	e8 20 f0 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	ba e8 27 02 c0       	mov    edx,0xc00227e8
c000a1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e0:	89 10                	mov    DWORD PTR [eax],edx
c000a1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1f0:	90                   	nop
c000a1f1:	83 c4 0c             	add    esp,0xc
c000a1f4:	c3                   	ret    
c000a1f5:	90                   	nop
c000a1f6:	66 90                	xchg   ax,ax

c000a1f8 <Mouse::~Mouse()>:
c000a1f8:	83 ec 0c             	sub    esp,0xc
c000a1fb:	ba e8 27 02 c0       	mov    edx,0xc00227e8
c000a200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a204:	89 10                	mov    DWORD PTR [eax],edx
c000a206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20a:	83 ec 0c             	sub    esp,0xc
c000a20d:	50                   	push   eax
c000a20e:	e8 81 ed ff ff       	call   c0008f94 <Device::~Device()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	90                   	nop
c000a217:	83 c4 0c             	add    esp,0xc
c000a21a:	c3                   	ret    
c000a21b:	90                   	nop

c000a21c <Mouse::~Mouse()>:
c000a21c:	83 ec 0c             	sub    esp,0xc
c000a21f:	83 ec 0c             	sub    esp,0xc
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	e8 cd ff ff ff       	call   c000a1f8 <Mouse::~Mouse()>
c000a22b:	83 c4 10             	add    esp,0x10
c000a22e:	83 ec 08             	sub    esp,0x8
c000a231:	68 58 01 00 00       	push   0x158
c000a236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a23a:	e8 b4 26 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	83 c4 0c             	add    esp,0xc
c000a245:	c3                   	ret    

c000a246 <NIC::getMAC()>:
c000a246:	31 c0                	xor    eax,eax
c000a248:	31 d2                	xor    edx,edx
c000a24a:	c3                   	ret    
c000a24b:	90                   	nop

c000a24c <NIC::write(int, unsigned char*, int*)>:
c000a24c:	b8 01 00 00 00       	mov    eax,0x1
c000a251:	c3                   	ret    

c000a252 <NIC::NIC(char const*)>:
c000a252:	83 ec 0c             	sub    esp,0xc
c000a255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a259:	83 ec 08             	sub    esp,0x8
c000a25c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a260:	50                   	push   eax
c000a261:	e8 8e ef ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a266:	83 c4 10             	add    esp,0x10
c000a269:	ba 14 28 02 c0       	mov    edx,0xc0022814
c000a26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a272:	89 10                	mov    DWORD PTR [eax],edx
c000a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a278:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a282:	90                   	nop
c000a283:	83 c4 0c             	add    esp,0xc
c000a286:	c3                   	ret    
c000a287:	90                   	nop

c000a288 <NIC::~NIC()>:
c000a288:	83 ec 0c             	sub    esp,0xc
c000a28b:	ba 14 28 02 c0       	mov    edx,0xc0022814
c000a290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a294:	89 10                	mov    DWORD PTR [eax],edx
c000a296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a29a:	83 ec 0c             	sub    esp,0xc
c000a29d:	50                   	push   eax
c000a29e:	e8 f1 ec ff ff       	call   c0008f94 <Device::~Device()>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	90                   	nop
c000a2a7:	83 c4 0c             	add    esp,0xc
c000a2aa:	c3                   	ret    
c000a2ab:	90                   	nop

c000a2ac <NIC::~NIC()>:
c000a2ac:	83 ec 0c             	sub    esp,0xc
c000a2af:	83 ec 0c             	sub    esp,0xc
c000a2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b6:	e8 cd ff ff ff       	call   c000a288 <NIC::~NIC()>
c000a2bb:	83 c4 10             	add    esp,0x10
c000a2be:	83 ec 08             	sub    esp,0x8
c000a2c1:	68 58 01 00 00       	push   0x158
c000a2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ca:	e8 24 26 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	83 c4 0c             	add    esp,0xc
c000a2d5:	c3                   	ret    

c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2d6:	55                   	push   ebp
c000a2d7:	57                   	push   edi
c000a2d8:	56                   	push   esi
c000a2d9:	53                   	push   ebx
c000a2da:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2e0:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2e7:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2ee:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2f5:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a300:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a304:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a30b:	e8 e0 ef ff ff       	call   c00092f0 <Device::getName()>
c000a310:	5a                   	pop    edx
c000a311:	59                   	pop    ecx
c000a312:	50                   	push   eax
c000a313:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a317:	55                   	push   ebp
c000a318:	e8 33 63 ff ff       	call   c0000650 <strcpy>
c000a31d:	5b                   	pop    ebx
c000a31e:	58                   	pop    eax
c000a31f:	68 40 28 02 c0       	push   0xc0022840
c000a324:	55                   	push   ebp
c000a325:	e8 46 65 ff ff       	call   c0000870 <strcat>
c000a32a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a331:	e8 46 4e 00 00       	call   c000f17c <malloc>
c000a336:	83 c4 0c             	add    esp,0xc
c000a339:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a33d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a341:	89 c3                	mov    ebx,eax
c000a343:	57                   	push   edi
c000a344:	56                   	push   esi
c000a345:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a34c:	55                   	push   ebp
c000a34d:	50                   	push   eax
c000a34e:	e8 59 fb ff ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a353:	83 c4 14             	add    esp,0x14
c000a356:	53                   	push   ebx
c000a357:	e8 10 fc ff ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c000a35c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a35f:	e8 c2 fc ff ff       	call   c000a026 <LogicalDisk::mount()>
c000a364:	58                   	pop    eax
c000a365:	5a                   	pop    edx
c000a366:	53                   	push   ebx
c000a367:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a36e:	e8 1f ed ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a373:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a379:	5b                   	pop    ebx
c000a37a:	5e                   	pop    esi
c000a37b:	5f                   	pop    edi
c000a37c:	5d                   	pop    ebp
c000a37d:	c3                   	ret    

c000a37e <createPartitionsForDisk(PhysicalDisk*)>:
c000a37e:	55                   	push   ebp
c000a37f:	57                   	push   edi
c000a380:	56                   	push   esi
c000a381:	53                   	push   ebx
c000a382:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a388:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a38f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a395:	3d 00 02 00 00       	cmp    eax,0x200
c000a39a:	74 27                	je     c000a3c3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a39c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a3a2:	83 ec 10             	sub    esp,0x10
c000a3a5:	99                   	cdq    
c000a3a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a3ac:	52                   	push   edx
c000a3ad:	50                   	push   eax
c000a3ae:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3b2:	c1 e6 0a             	shl    esi,0xa
c000a3b5:	89 fd                	mov    ebp,edi
c000a3b7:	55                   	push   ebp
c000a3b8:	56                   	push   esi
c000a3b9:	e8 b6 66 01 00       	call   c0020a74 <__udivdi3>
c000a3be:	e9 b9 00 00 00       	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3c3:	83 ec 0c             	sub    esp,0xc
c000a3c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3c8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3cc:	56                   	push   esi
c000a3cd:	6a 01                	push   0x1
c000a3cf:	6a 00                	push   0x0
c000a3d1:	6a 00                	push   0x0
c000a3d3:	53                   	push   ebx
c000a3d4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3d7:	83 c4 20             	add    esp,0x20
c000a3da:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3e2:	75 0a                	jne    c000a3ee <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3e4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3ec:	74 2c                	je     c000a41a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3f4:	83 ec 10             	sub    esp,0x10
c000a3f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a403:	89 f7                	mov    edi,esi
c000a405:	c1 ff 1f             	sar    edi,0x1f
c000a408:	57                   	push   edi
c000a409:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a40d:	56                   	push   esi
c000a40e:	c1 e0 0a             	shl    eax,0xa
c000a411:	52                   	push   edx
c000a412:	50                   	push   eax
c000a413:	e8 5c 66 01 00       	call   c0020a74 <__udivdi3>
c000a418:	eb 62                	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a41a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a421:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a428:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a42f:	89 cf                	mov    edi,ecx
c000a431:	83 e2 7f             	and    edx,0x7f
c000a434:	83 e7 7f             	and    edi,0x7f
c000a437:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a43a:	83 e0 7f             	and    eax,0x7f
c000a43d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a440:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a447:	83 e0 7f             	and    eax,0x7f
c000a44a:	01 d0                	add    eax,edx
c000a44c:	84 c0                	test   al,al
c000a44e:	89 c5                	mov    ebp,eax
c000a450:	74 41                	je     c000a493 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a452:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a458:	83 ec 10             	sub    esp,0x10
c000a45b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a461:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a467:	89 f7                	mov    edi,esi
c000a469:	c1 ff 1f             	sar    edi,0x1f
c000a46c:	57                   	push   edi
c000a46d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a471:	56                   	push   esi
c000a472:	c1 e0 0a             	shl    eax,0xa
c000a475:	52                   	push   edx
c000a476:	50                   	push   eax
c000a477:	e8 f8 65 01 00       	call   c0020a74 <__udivdi3>
c000a47c:	83 c4 14             	add    esp,0x14
c000a47f:	52                   	push   edx
c000a480:	50                   	push   eax
c000a481:	6a 00                	push   0x0
c000a483:	6a 00                	push   0x0
c000a485:	53                   	push   ebx
c000a486:	e8 4b fe ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a48b:	83 c4 20             	add    esp,0x20
c000a48e:	e9 73 01 00 00       	jmp    c000a606 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a493:	89 f0                	mov    eax,esi
c000a495:	31 c9                	xor    ecx,ecx
c000a497:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a49e:	75 02                	jne    c000a4a2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a4a0:	89 cd                	mov    ebp,ecx
c000a4a2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4aa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a4b1:	83 c0 10             	add    eax,0x10
c000a4b4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4bc:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a4c3:	c1 e2 08             	shl    edx,0x8
c000a4c6:	c1 e6 10             	shl    esi,0x10
c000a4c9:	09 f2                	or     edx,esi
c000a4cb:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4d2:	09 f2                	or     edx,esi
c000a4d4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4db:	c1 e6 18             	shl    esi,0x18
c000a4de:	09 f2                	or     edx,esi
c000a4e0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4e7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4eb:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4f2:	c1 e6 10             	shl    esi,0x10
c000a4f5:	c1 e2 08             	shl    edx,0x8
c000a4f8:	09 f2                	or     edx,esi
c000a4fa:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a501:	09 f2                	or     edx,esi
c000a503:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a50a:	c1 e6 18             	shl    esi,0x18
c000a50d:	09 f2                	or     edx,esi
c000a50f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a513:	41                   	inc    ecx
c000a514:	83 f9 04             	cmp    ecx,0x4
c000a517:	0f 85 7a ff ff ff    	jne    c000a497 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a521:	83 f0 01             	xor    eax,0x1
c000a524:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a528:	75 4f                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a52e:	83 f0 01             	xor    eax,0x1
c000a531:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a535:	75 42                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a537:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a53d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a545:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a54b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a553:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a559:	89 f7                	mov    edi,esi
c000a55b:	c1 ff 1f             	sar    edi,0x1f
c000a55e:	57                   	push   edi
c000a55f:	56                   	push   esi
c000a560:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a564:	52                   	push   edx
c000a565:	c1 e0 0a             	shl    eax,0xa
c000a568:	50                   	push   eax
c000a569:	e8 06 65 01 00       	call   c0020a74 <__udivdi3>
c000a56e:	83 c4 10             	add    esp,0x10
c000a571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a575:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a579:	89 e8                	mov    eax,ebp
c000a57b:	0f b6 e8             	movzx  ebp,al
c000a57e:	85 ed                	test   ebp,ebp
c000a580:	74 50                	je     c000a5d2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a586:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a58a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a58e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a592:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a596:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a59a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a59e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5b2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5b6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5ba:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5be:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5c2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5c6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5ca:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5ce:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5d2:	31 ed                	xor    ebp,ebp
c000a5d4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5d8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5dc:	89 f8                	mov    eax,edi
c000a5de:	09 f0                	or     eax,esi
c000a5e0:	74 1e                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5e6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5ea:	89 d1                	mov    ecx,edx
c000a5ec:	09 c1                	or     ecx,eax
c000a5ee:	74 10                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5f0:	83 ec 0c             	sub    esp,0xc
c000a5f3:	57                   	push   edi
c000a5f4:	56                   	push   esi
c000a5f5:	52                   	push   edx
c000a5f6:	50                   	push   eax
c000a5f7:	53                   	push   ebx
c000a5f8:	e8 d9 fc ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5fd:	83 c4 20             	add    esp,0x20
c000a600:	45                   	inc    ebp
c000a601:	83 fd 04             	cmp    ebp,0x4
c000a604:	75 ce                	jne    c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a606:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a60c:	5b                   	pop    ebx
c000a60d:	5e                   	pop    esi
c000a60e:	5f                   	pop    edi
c000a60f:	5d                   	pop    ebp
c000a610:	c3                   	ret    
c000a611:	66 90                	xchg   ax,ax
c000a613:	90                   	nop

c000a614 <Serial::Serial(char const*)>:
c000a614:	83 ec 0c             	sub    esp,0xc
c000a617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61b:	83 ec 08             	sub    esp,0x8
c000a61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a622:	50                   	push   eax
c000a623:	e8 cc eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a628:	83 c4 10             	add    esp,0x10
c000a62b:	ba 54 28 02 c0       	mov    edx,0xc0022854
c000a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a634:	89 10                	mov    DWORD PTR [eax],edx
c000a636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a63a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a644:	90                   	nop
c000a645:	83 c4 0c             	add    esp,0xc
c000a648:	c3                   	ret    
c000a649:	90                   	nop
c000a64a:	66 90                	xchg   ax,ax

c000a64c <Serial::~Serial()>:
c000a64c:	83 ec 0c             	sub    esp,0xc
c000a64f:	ba 54 28 02 c0       	mov    edx,0xc0022854
c000a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a658:	89 10                	mov    DWORD PTR [eax],edx
c000a65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a65e:	83 ec 0c             	sub    esp,0xc
c000a661:	50                   	push   eax
c000a662:	e8 2d e9 ff ff       	call   c0008f94 <Device::~Device()>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	90                   	nop
c000a66b:	83 c4 0c             	add    esp,0xc
c000a66e:	c3                   	ret    
c000a66f:	90                   	nop

c000a670 <Serial::~Serial()>:
c000a670:	83 ec 0c             	sub    esp,0xc
c000a673:	83 ec 0c             	sub    esp,0xc
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	e8 cd ff ff ff       	call   c000a64c <Serial::~Serial()>
c000a67f:	83 c4 10             	add    esp,0x10
c000a682:	83 ec 08             	sub    esp,0x8
c000a685:	68 58 01 00 00       	push   0x158
c000a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a68e:	e8 60 22 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	83 c4 0c             	add    esp,0xc
c000a699:	c3                   	ret    
c000a69a:	66 90                	xchg   ax,ax

c000a69c <Timer::Timer(char const*)>:
c000a69c:	83 ec 0c             	sub    esp,0xc
c000a69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a3:	83 ec 08             	sub    esp,0x8
c000a6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6aa:	50                   	push   eax
c000a6ab:	e8 44 eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a6b0:	83 c4 10             	add    esp,0x10
c000a6b3:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c000a6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6bc:	89 10                	mov    DWORD PTR [eax],edx
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6cc:	90                   	nop
c000a6cd:	83 c4 0c             	add    esp,0xc
c000a6d0:	c3                   	ret    
c000a6d1:	90                   	nop
c000a6d2:	66 90                	xchg   ax,ax

c000a6d4 <Timer::~Timer()>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c000a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e0:	89 10                	mov    DWORD PTR [eax],edx
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	83 ec 0c             	sub    esp,0xc
c000a6e9:	50                   	push   eax
c000a6ea:	e8 a5 e8 ff ff       	call   c0008f94 <Device::~Device()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	90                   	nop
c000a6f3:	83 c4 0c             	add    esp,0xc
c000a6f6:	c3                   	ret    
c000a6f7:	90                   	nop

c000a6f8 <Timer::~Timer()>:
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a702:	e8 cd ff ff ff       	call   c000a6d4 <Timer::~Timer()>
c000a707:	83 c4 10             	add    esp,0x10
c000a70a:	83 ec 08             	sub    esp,0x8
c000a70d:	68 5c 01 00 00       	push   0x15c
c000a712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a716:	e8 d8 21 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	83 c4 0c             	add    esp,0xc
c000a721:	c3                   	ret    

c000a722 <Timer::read()>:
c000a722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a726:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a72c:	c3                   	ret    

c000a72d <setupTimer(int)>:
c000a72d:	53                   	push   ebx
c000a72e:	83 ec 14             	sub    esp,0x14
c000a731:	68 5c 01 00 00       	push   0x15c
c000a736:	e8 41 4a 00 00       	call   c000f17c <malloc>
c000a73b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	e8 b3 5b 01 00       	call   c00202f8 <PIT::PIT()>
c000a745:	58                   	pop    eax
c000a746:	5a                   	pop    edx
c000a747:	53                   	push   ebx
c000a748:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a74e:	e8 3f e9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a753:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a755:	6a 00                	push   0x0
c000a757:	6a 00                	push   0x0
c000a759:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a75d:	53                   	push   ebx
c000a75e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a761:	83 c4 28             	add    esp,0x28
c000a764:	89 d8                	mov    eax,ebx
c000a766:	5b                   	pop    ebx
c000a767:	c3                   	ret    

c000a768 <timerHandler(unsigned int)>:
c000a768:	57                   	push   edi
c000a769:	56                   	push   esi
c000a76a:	53                   	push   ebx
c000a76b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a76f:	83 ec 0c             	sub    esp,0xc
c000a772:	68 e3 28 02 c0       	push   0xc00228e3
c000a777:	01 35 ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,esi
c000a77d:	e8 cc c7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a78c:	75 12                	jne    c000a7a0 <timerHandler(unsigned int)+0x38>
c000a78e:	c7 44 24 10 eb 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc00228eb
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	e9 b0 c7 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000a79e:	66 90                	xchg   ax,ax
c000a7a0:	fa                   	cli    
c000a7a1:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000a7a7:	83 ec 0c             	sub    esp,0xc
c000a7aa:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a7af:	e8 58 66 01 00       	call   c0020e0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7b4:	83 c4 10             	add    esp,0x10
c000a7b7:	84 c0                	test   al,al
c000a7b9:	0f 85 a1 00 00 00    	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a7bf:	83 ec 0c             	sub    esp,0xc
c000a7c2:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a7c7:	e8 5c 66 01 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	89 c7                	mov    edi,eax
c000a7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7d4:	83 ec 0c             	sub    esp,0xc
c000a7d7:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a7dc:	e8 47 66 01 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7e1:	c7 04 24 e0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6e0
c000a7e8:	89 c3                	mov    ebx,eax
c000a7ea:	e8 41 66 01 00       	call   c0020e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7fb:	77 23                	ja     c000a820 <timerHandler(unsigned int)+0xb8>
c000a7fd:	83 ec 0c             	sub    esp,0xc
c000a800:	53                   	push   ebx
c000a801:	e8 fe bb 00 00       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	39 df                	cmp    edi,ebx
c000a80b:	75 27                	jne    c000a834 <timerHandler(unsigned int)+0xcc>
c000a80d:	83 ec 0c             	sub    esp,0xc
c000a810:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a815:	e8 0e 66 01 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a81a:	89 c7                	mov    edi,eax
c000a81c:	eb 12                	jmp    c000a830 <timerHandler(unsigned int)+0xc8>
c000a81e:	66 90                	xchg   ax,ax
c000a820:	50                   	push   eax
c000a821:	50                   	push   eax
c000a822:	53                   	push   ebx
c000a823:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a828:	e8 bf 66 01 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a82d:	8d 76 00             	lea    esi,[esi+0x0]
c000a830:	83 c4 10             	add    esp,0x10
c000a833:	90                   	nop
c000a834:	83 ec 0c             	sub    esp,0xc
c000a837:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a83c:	e8 cb 65 01 00       	call   c0020e0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a841:	83 c4 10             	add    esp,0x10
c000a844:	84 c0                	test   al,al
c000a846:	75 18                	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a848:	83 ec 0c             	sub    esp,0xc
c000a84b:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a850:	e8 d3 65 01 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a855:	83 c4 10             	add    esp,0x10
c000a858:	39 f8                	cmp    eax,edi
c000a85a:	0f 85 74 ff ff ff    	jne    c000a7d4 <timerHandler(unsigned int)+0x6c>
c000a860:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a866:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a869:	85 c0                	test   eax,eax
c000a86b:	74 1b                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a86d:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a874:	74 12                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a876:	89 c1                	mov    ecx,eax
c000a878:	29 f1                	sub    ecx,esi
c000a87a:	39 f0                	cmp    eax,esi
c000a87c:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000a87f:	77 07                	ja     c000a888 <timerHandler(unsigned int)+0x120>
c000a881:	e8 7e b8 00 00       	call   c0016104 <schedule()>
c000a886:	66 90                	xchg   ax,ax
c000a888:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000a88f:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000a896:	75 04                	jne    c000a89c <timerHandler(unsigned int)+0x134>
c000a898:	fb                   	sti    
c000a899:	8d 76 00             	lea    esi,[esi+0x0]
c000a89c:	5b                   	pop    ebx
c000a89d:	5e                   	pop    esi
c000a89e:	5f                   	pop    edi
c000a89f:	c3                   	ret    

c000a8a0 <VCache::VCache(PhysicalDisk*)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	83 ec 18             	sub    esp,0x18
c000a8a4:	ba 7c 29 02 c0       	mov    edx,0xc002297c
c000a8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ad:	89 10                	mov    DWORD PTR [eax],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8be:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8db:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8e2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ed:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a900:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a907:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a912:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a922:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a931:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a939:	83 ec 0c             	sub    esp,0xc
c000a93c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a940:	e8 37 48 00 00       	call   c000f17c <malloc>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 c3                	mov    ebx,eax
c000a94a:	83 ec 0c             	sub    esp,0xc
c000a94d:	53                   	push   ebx
c000a94e:	e8 55 4b 00 00       	call   c000f4a8 <Mutex::Mutex()>
c000a953:	83 c4 10             	add    esp,0x10
c000a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a961:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a965:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a96c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a973:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a977:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a981:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a984:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a988:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a98e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a994:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a998:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a99b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9b0:	05 00 01 00 00       	add    eax,0x100
c000a9b5:	c1 e0 04             	shl    eax,0x4
c000a9b8:	83 ec 0c             	sub    esp,0xc
c000a9bb:	50                   	push   eax
c000a9bc:	e8 bb 47 00 00       	call   c000f17c <malloc>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 c2                	mov    edx,eax
c000a9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9d1:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9ea:	89 d0                	mov    eax,edx
c000a9ec:	c1 e0 02             	shl    eax,0x2
c000a9ef:	01 d0                	add    eax,edx
c000a9f1:	c1 e0 04             	shl    eax,0x4
c000a9f4:	83 ec 0c             	sub    esp,0xc
c000a9f7:	50                   	push   eax
c000a9f8:	e8 7f 47 00 00       	call   c000f17c <malloc>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 c2                	mov    edx,eax
c000aa02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa06:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa09:	90                   	nop
c000aa0a:	83 c4 18             	add    esp,0x18
c000aa0d:	5b                   	pop    ebx
c000aa0e:	c3                   	ret    
c000aa0f:	90                   	nop

c000aa10 <VCache::invalidateReadBuffer()>:
c000aa10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa14:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa1a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa1e:	c3                   	ret    
c000aa1f:	90                   	nop

c000aa20 <VCache::writeWriteBuffer()>:
c000aa20:	53                   	push   ebx
c000aa21:	83 ec 08             	sub    esp,0x8
c000aa24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa28:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa2c:	74 1e                	je     c000aa4c <VCache::writeWriteBuffer()+0x2c>
c000aa2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa31:	83 ec 0c             	sub    esp,0xc
c000aa34:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa3c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa3f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa42:	50                   	push   eax
c000aa43:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa46:	83 c4 20             	add    esp,0x20
c000aa49:	8d 76 00             	lea    esi,[esi+0x0]
c000aa4c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa53:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa5a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa5e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa65:	83 c4 08             	add    esp,0x8
c000aa68:	5b                   	pop    ebx
c000aa69:	c3                   	ret    
c000aa6a:	66 90                	xchg   ax,ax

c000aa6c <VCache::~VCache()>:
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	ba 7c 29 02 c0       	mov    edx,0xc002297c
c000aa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa78:	89 10                	mov    DWORD PTR [eax],edx
c000aa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa81:	0f b6 c0             	movzx  eax,al
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 10                	je     c000aa98 <VCache::~VCache()+0x2c>
c000aa88:	83 ec 0c             	sub    esp,0xc
c000aa8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8f:	e8 8c ff ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000aa94:	83 c4 10             	add    esp,0x10
c000aa97:	90                   	nop
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aa9f:	83 ec 0c             	sub    esp,0xc
c000aaa2:	50                   	push   eax
c000aaa3:	e8 e4 46 00 00       	call   c000f18c <free>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aab2:	83 ec 0c             	sub    esp,0xc
c000aab5:	50                   	push   eax
c000aab6:	e8 d1 46 00 00       	call   c000f18c <free>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	90                   	nop
c000aabf:	83 c4 0c             	add    esp,0xc
c000aac2:	c3                   	ret    
c000aac3:	90                   	nop

c000aac4 <VCache::~VCache()>:
c000aac4:	83 ec 0c             	sub    esp,0xc
c000aac7:	83 ec 0c             	sub    esp,0xc
c000aaca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aace:	e8 99 ff ff ff       	call   c000aa6c <VCache::~VCache()>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	83 ec 08             	sub    esp,0x8
c000aad9:	6a 44                	push   0x44
c000aadb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aadf:	e8 0f 1e 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	83 c4 0c             	add    esp,0xc
c000aaea:	c3                   	ret    
c000aaeb:	90                   	nop

c000aaec <VCache::write(unsigned long long, int, void*)>:
c000aaec:	55                   	push   ebp
c000aaed:	57                   	push   edi
c000aaee:	56                   	push   esi
c000aaef:	53                   	push   ebx
c000aaf0:	83 ec 1c             	sub    esp,0x1c
c000aaf3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aaf7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000aafb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000aaff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab03:	e8 5c b3 00 00       	call   c0015e64 <KeDisablePreemption()>
c000ab08:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab0d:	50                   	push   eax
c000ab0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab11:	0f af c3             	imul   eax,ebx
c000ab14:	05 ff 0f 00 00       	add    eax,0xfff
c000ab19:	99                   	cdq    
c000ab1a:	f7 f9                	idiv   ecx
c000ab1c:	50                   	push   eax
c000ab1d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab21:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ab27:	e8 c8 8a 00 00       	call   c00135f4 <VAS::canLockPages(unsigned long, int)>
c000ab2c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ab38:	74 2a                	je     c000ab64 <VCache::write(unsigned long long, int, void*)+0x78>
c000ab3a:	50                   	push   eax
c000ab3b:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab43:	0f af c3             	imul   eax,ebx
c000ab46:	05 ff 0f 00 00       	add    eax,0xfff
c000ab4b:	99                   	cdq    
c000ab4c:	f7 f9                	idiv   ecx
c000ab4e:	50                   	push   eax
c000ab4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab53:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ab59:	e8 90 8e 00 00       	call   c00139ee <VAS::lockPages(unsigned long, int)>
c000ab5e:	83 c4 10             	add    esp,0x10
c000ab61:	8d 76 00             	lea    esi,[esi+0x0]
c000ab64:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000ab68:	74 0e                	je     c000ab78 <VCache::write(unsigned long long, int, void*)+0x8c>
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	55                   	push   ebp
c000ab6e:	e8 9d fe ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	66 90                	xchg   ax,ax
c000ab78:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ab7c:	74 72                	je     c000abf0 <VCache::write(unsigned long long, int, void*)+0x104>
c000ab7e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000ab81:	89 c8                	mov    eax,ecx
c000ab83:	99                   	cdq    
c000ab84:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000ab87:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000ab8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ab92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab9a:	31 f0                	xor    eax,esi
c000ab9c:	31 fa                	xor    edx,edi
c000ab9e:	09 d0                	or     eax,edx
c000aba0:	75 42                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba2:	83 fb 01             	cmp    ebx,0x1
c000aba5:	75 3d                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abaa:	89 cf                	mov    edi,ecx
c000abac:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abb0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000abb6:	0f af f8             	imul   edi,eax
c000abb9:	89 c1                	mov    ecx,eax
c000abbb:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000abbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc0:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000abc3:	40                   	inc    eax
c000abc4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000abc7:	83 f8 50             	cmp    eax,0x50
c000abca:	0f 85 a8 00 00 00    	jne    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abd0:	83 ec 0c             	sub    esp,0xc
c000abd3:	55                   	push   ebp
c000abd4:	e8 47 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abd9:	83 c4 10             	add    esp,0x10
c000abdc:	e9 97 00 00 00       	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abe1:	8d 76 00             	lea    esi,[esi+0x0]
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	55                   	push   ebp
c000abe8:	e8 33 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	83 fb 4f             	cmp    ebx,0x4f
c000abf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abf6:	7f 20                	jg     c000ac18 <VCache::write(unsigned long long, int, void*)+0x12c>
c000abf8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000abfb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abff:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000ac02:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000ac05:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000ac08:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000ac0c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac14:	eb 62                	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ac16:	66 90                	xchg   ax,ax
c000ac18:	83 ec 0c             	sub    esp,0xc
c000ac1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac21:	53                   	push   ebx
c000ac22:	57                   	push   edi
c000ac23:	56                   	push   esi
c000ac24:	50                   	push   eax
c000ac25:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac28:	83 c4 20             	add    esp,0x20
c000ac2b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac30:	89 c6                	mov    esi,eax
c000ac32:	74 28                	je     c000ac5c <VCache::write(unsigned long long, int, void*)+0x170>
c000ac34:	52                   	push   edx
c000ac35:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac3a:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac3e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac44:	99                   	cdq    
c000ac45:	f7 f9                	idiv   ecx
c000ac47:	50                   	push   eax
c000ac48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac4c:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ac52:	e8 d9 89 00 00       	call   c0013630 <VAS::unlockPages(unsigned long, int)>
c000ac57:	83 c4 10             	add    esp,0x10
c000ac5a:	66 90                	xchg   ax,ax
c000ac5c:	e8 2b b2 00 00       	call   c0015e8c <KeRestorePreemption()>
c000ac61:	85 f6                	test   esi,esi
c000ac63:	74 4b                	je     c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac65:	83 ec 0c             	sub    esp,0xc
c000ac68:	68 34 29 02 c0       	push   0xc0022934
c000ac6d:	e8 dc c2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	eb 39                	jmp    c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac77:	90                   	nop
c000ac78:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac7d:	74 29                	je     c000aca8 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000ac7f:	50                   	push   eax
c000ac80:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac85:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac89:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac8f:	99                   	cdq    
c000ac90:	f7 f9                	idiv   ecx
c000ac92:	50                   	push   eax
c000ac93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac97:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ac9d:	e8 8e 89 00 00       	call   c0013630 <VAS::unlockPages(unsigned long, int)>
c000aca2:	83 c4 10             	add    esp,0x10
c000aca5:	8d 76 00             	lea    esi,[esi+0x0]
c000aca8:	e8 df b1 00 00       	call   c0015e8c <KeRestorePreemption()>
c000acad:	31 f6                	xor    esi,esi
c000acaf:	90                   	nop
c000acb0:	83 c4 1c             	add    esp,0x1c
c000acb3:	89 f0                	mov    eax,esi
c000acb5:	5b                   	pop    ebx
c000acb6:	5e                   	pop    esi
c000acb7:	5f                   	pop    edi
c000acb8:	5d                   	pop    ebp
c000acb9:	c3                   	ret    

c000acba <VCache::read(unsigned long long, int, void*)>:
c000acba:	55                   	push   ebp
c000acbb:	bd 00 10 00 00       	mov    ebp,0x1000
c000acc0:	57                   	push   edi
c000acc1:	56                   	push   esi
c000acc2:	53                   	push   ebx
c000acc3:	83 ec 2c             	sub    esp,0x2c
c000acc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000acca:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000acce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000acd2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000acd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acde:	e8 81 b1 00 00       	call   c0015e64 <KeDisablePreemption()>
c000ace3:	50                   	push   eax
c000ace4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ace7:	0f af c6             	imul   eax,esi
c000acea:	05 ff 0f 00 00       	add    eax,0xfff
c000acef:	99                   	cdq    
c000acf0:	f7 fd                	idiv   ebp
c000acf2:	50                   	push   eax
c000acf3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000acf7:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000acfd:	e8 f2 88 00 00       	call   c00135f4 <VAS::canLockPages(unsigned long, int)>
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	84 c0                	test   al,al
c000ad07:	89 c7                	mov    edi,eax
c000ad09:	74 25                	je     c000ad30 <VCache::read(unsigned long long, int, void*)+0x76>
c000ad0b:	50                   	push   eax
c000ad0c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad0f:	0f af c6             	imul   eax,esi
c000ad12:	05 ff 0f 00 00       	add    eax,0xfff
c000ad17:	99                   	cdq    
c000ad18:	f7 fd                	idiv   ebp
c000ad1a:	50                   	push   eax
c000ad1b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000ad1f:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ad25:	e8 c4 8c 00 00       	call   c00139ee <VAS::lockPages(unsigned long, int)>
c000ad2a:	83 c4 10             	add    esp,0x10
c000ad2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ad34:	74 0e                	je     c000ad44 <VCache::read(unsigned long long, int, void*)+0x8a>
c000ad36:	83 ec 0c             	sub    esp,0xc
c000ad39:	53                   	push   ebx
c000ad3a:	e8 e1 fc ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	66 90                	xchg   ax,ax
c000ad44:	83 fe 01             	cmp    esi,0x1
c000ad47:	0f 85 fb 00 00 00    	jne    c000ae48 <VCache::read(unsigned long long, int, void*)+0x18e>
c000ad4d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ad50:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ad57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ad5b:	0f 85 e7 00 00 00    	jne    c000ae48 <VCache::read(unsigned long long, int, void*)+0x18e>
c000ad61:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ad64:	89 ee                	mov    esi,ebp
c000ad66:	f7 de                	neg    esi
c000ad68:	89 f0                	mov    eax,esi
c000ad6a:	c1 f8 1f             	sar    eax,0x1f
c000ad6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ad71:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ad75:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000ad79:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000ad7d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ad81:	89 ca                	mov    edx,ecx
c000ad83:	89 f9                	mov    ecx,edi
c000ad85:	0f b6 f9             	movzx  edi,cl
c000ad88:	89 f0                	mov    eax,esi
c000ad8a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ad8e:	74 0c                	je     c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad90:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000ad93:	75 07                	jne    c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad95:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ad98:	74 56                	je     c000adf0 <VCache::read(unsigned long long, int, void*)+0x136>
c000ad9a:	66 90                	xchg   ax,ax
c000ad9c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ada0:	83 ec 0c             	sub    esp,0xc
c000ada3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ada6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000adaa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000adad:	8b 37                	mov    esi,DWORD PTR [edi]
c000adaf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000adb2:	55                   	push   ebp
c000adb3:	52                   	push   edx
c000adb4:	50                   	push   eax
c000adb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000adb9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000adbc:	83 c4 20             	add    esp,0x20
c000adbf:	85 c0                	test   eax,eax
c000adc1:	89 c5                	mov    ebp,eax
c000adc3:	74 2b                	je     c000adf0 <VCache::read(unsigned long long, int, void*)+0x136>
c000adc5:	83 ec 0c             	sub    esp,0xc
c000adc8:	68 4c 29 02 c0       	push   0xc002294c
c000adcd:	e8 7c c1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000adda:	0f 84 bc 00 00 00    	je     c000ae9c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000ade0:	56                   	push   esi
c000ade1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ade4:	05 ff 0f 00 00       	add    eax,0xfff
c000ade9:	e9 92 00 00 00       	jmp    c000ae80 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000adee:	66 90                	xchg   ax,ax
c000adf0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000adf3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000adf7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000adfd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ae00:	8d 70 ff             	lea    esi,[eax-0x1]
c000ae03:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000ae07:	0f af f1             	imul   esi,ecx
c000ae0a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ae0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ae0f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ae14:	74 26                	je     c000ae3c <VCache::read(unsigned long long, int, void*)+0x182>
c000ae16:	51                   	push   ecx
c000ae17:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ae1f:	05 ff 0f 00 00       	add    eax,0xfff
c000ae24:	99                   	cdq    
c000ae25:	f7 f9                	idiv   ecx
c000ae27:	50                   	push   eax
c000ae28:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000ae2c:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ae32:	e8 f9 87 00 00       	call   c0013630 <VAS::unlockPages(unsigned long, int)>
c000ae37:	83 c4 10             	add    esp,0x10
c000ae3a:	66 90                	xchg   ax,ax
c000ae3c:	e8 4b b0 00 00       	call   c0015e8c <KeRestorePreemption()>
c000ae41:	31 ed                	xor    ebp,ebp
c000ae43:	eb 5f                	jmp    c000aea4 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000ae45:	8d 76 00             	lea    esi,[esi+0x0]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	e8 bf fb ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ae51:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ae54:	5a                   	pop    edx
c000ae55:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae5b:	56                   	push   esi
c000ae5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae64:	50                   	push   eax
c000ae65:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ae68:	83 c4 20             	add    esp,0x20
c000ae6b:	89 c5                	mov    ebp,eax
c000ae6d:	89 f8                	mov    eax,edi
c000ae6f:	84 c0                	test   al,al
c000ae71:	74 29                	je     c000ae9c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000ae73:	50                   	push   eax
c000ae74:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000ae78:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000ae7e:	66 90                	xchg   ax,ax
c000ae80:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae85:	99                   	cdq    
c000ae86:	f7 f9                	idiv   ecx
c000ae88:	50                   	push   eax
c000ae89:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000ae8d:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ae93:	e8 98 87 00 00       	call   c0013630 <VAS::unlockPages(unsigned long, int)>
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	90                   	nop
c000ae9c:	e8 eb af 00 00       	call   c0015e8c <KeRestorePreemption()>
c000aea1:	8d 76 00             	lea    esi,[esi+0x0]
c000aea4:	83 c4 2c             	add    esp,0x2c
c000aea7:	89 e8                	mov    eax,ebp
c000aea9:	5b                   	pop    ebx
c000aeaa:	5e                   	pop    esi
c000aeab:	5f                   	pop    edi
c000aeac:	5d                   	pop    ebp
c000aead:	c3                   	ret    

c000aeae <Video::putrect(int, int, int, int, unsigned int)>:
c000aeae:	55                   	push   ebp
c000aeaf:	57                   	push   edi
c000aeb0:	56                   	push   esi
c000aeb1:	53                   	push   ebx
c000aeb2:	83 ec 1c             	sub    esp,0x1c
c000aeb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000aeb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aebd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aec1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000aec5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aecd:	01 df                	add    edi,ebx
c000aecf:	39 fb                	cmp    ebx,edi
c000aed1:	7d 1f                	jge    c000aef2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000aed3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aed7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000aedb:	7d 12                	jge    c000aeef <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000aedd:	8b 16                	mov    edx,DWORD PTR [esi]
c000aedf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee3:	53                   	push   ebx
c000aee4:	55                   	push   ebp
c000aee5:	45                   	inc    ebp
c000aee6:	56                   	push   esi
c000aee7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	eb e8                	jmp    c000aed7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000aeef:	43                   	inc    ebx
c000aef0:	eb dd                	jmp    c000aecf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000aef2:	83 c4 1c             	add    esp,0x1c
c000aef5:	5b                   	pop    ebx
c000aef6:	5e                   	pop    esi
c000aef7:	5f                   	pop    edi
c000aef8:	5d                   	pop    ebp
c000aef9:	c3                   	ret    

c000aefa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000aefa:	55                   	push   ebp
c000aefb:	57                   	push   edi
c000aefc:	31 ff                	xor    edi,edi
c000aefe:	56                   	push   esi
c000aeff:	53                   	push   ebx
c000af00:	83 ec 1c             	sub    esp,0x1c
c000af03:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000af07:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000af0b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000af12:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000af17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af1b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af1f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000af23:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000af26:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000af2a:	01 f9                	add    ecx,edi
c000af2c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000af30:	7d 2f                	jge    c000af61 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000af32:	31 f6                	xor    esi,esi
c000af34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af38:	01 f2                	add    edx,esi
c000af3a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000af3e:	7d 1a                	jge    c000af5a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000af40:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af43:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000af46:	46                   	inc    esi
c000af47:	51                   	push   ecx
c000af48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000af4c:	52                   	push   edx
c000af4d:	55                   	push   ebp
c000af4e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000af51:	83 c4 10             	add    esp,0x10
c000af54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000af58:	eb da                	jmp    c000af34 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000af5a:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000af5e:	47                   	inc    edi
c000af5f:	eb c5                	jmp    c000af26 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000af61:	83 c4 1c             	add    esp,0x1c
c000af64:	5b                   	pop    ebx
c000af65:	5e                   	pop    esi
c000af66:	5f                   	pop    edi
c000af67:	5d                   	pop    ebp
c000af68:	c3                   	ret    
c000af69:	90                   	nop

c000af6a <Video::blit(unsigned int*, int, int, int, int)>:
c000af6a:	55                   	push   ebp
c000af6b:	ba 00 00 00 00       	mov    edx,0x0
c000af70:	57                   	push   edi
c000af71:	56                   	push   esi
c000af72:	53                   	push   ebx
c000af73:	83 ec 1c             	sub    esp,0x1c
c000af76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af7a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000af7e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000af82:	85 c0                	test   eax,eax
c000af84:	0f 49 d0             	cmovns edx,eax
c000af87:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000af8e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000af92:	89 eb                	mov    ebx,ebp
c000af94:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000af98:	01 ea                	add    edx,ebp
c000af9a:	39 da                	cmp    edx,ebx
c000af9c:	7e 54                	jle    c000aff2 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000af9e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000afa4:	7c 4c                	jl     c000aff2 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000afa6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000afaa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000afae:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000afb2:	01 c1                	add    ecx,eax
c000afb4:	39 f9                	cmp    ecx,edi
c000afb6:	7e 2f                	jle    c000afe7 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000afb8:	83 c2 04             	add    edx,0x4
c000afbb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000afc1:	7c 21                	jl     c000afe4 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000afc3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000afc7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000afc9:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000afcc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000afd0:	55                   	push   ebp
c000afd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000afd5:	56                   	push   esi
c000afd6:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000afd9:	83 c4 10             	add    esp,0x10
c000afdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000afe0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000afe4:	47                   	inc    edi
c000afe5:	eb c7                	jmp    c000afae <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000afe7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000afeb:	43                   	inc    ebx
c000afec:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000aff0:	eb a2                	jmp    c000af94 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000aff2:	83 c4 1c             	add    esp,0x1c
c000aff5:	5b                   	pop    ebx
c000aff6:	5e                   	pop    esi
c000aff7:	5f                   	pop    edi
c000aff8:	5d                   	pop    ebp
c000aff9:	c3                   	ret    

c000affa <Video::clearScreen(unsigned int)>:
c000affa:	57                   	push   edi
c000affb:	56                   	push   esi
c000affc:	53                   	push   ebx
c000affd:	31 db                	xor    ebx,ebx
c000afff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b003:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b009:	7e 1f                	jle    c000b02a <Video::clearScreen(unsigned int)+0x30>
c000b00b:	31 ff                	xor    edi,edi
c000b00d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b013:	7e 12                	jle    c000b027 <Video::clearScreen(unsigned int)+0x2d>
c000b015:	8b 06                	mov    eax,DWORD PTR [esi]
c000b017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b01b:	53                   	push   ebx
c000b01c:	57                   	push   edi
c000b01d:	47                   	inc    edi
c000b01e:	56                   	push   esi
c000b01f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b022:	83 c4 10             	add    esp,0x10
c000b025:	eb e6                	jmp    c000b00d <Video::clearScreen(unsigned int)+0x13>
c000b027:	43                   	inc    ebx
c000b028:	eb d9                	jmp    c000b003 <Video::clearScreen(unsigned int)+0x9>
c000b02a:	5b                   	pop    ebx
c000b02b:	5e                   	pop    esi
c000b02c:	5f                   	pop    edi
c000b02d:	c3                   	ret    

c000b02e <Video::putpixel(int, int, unsigned int)>:
c000b02e:	c7 44 24 04 84 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022984
c000b036:	e9 87 44 00 00       	jmp    c000f4c2 <KePanic(char const*)>
c000b03b:	90                   	nop

c000b03c <Video::readPixelApprox(int, int)>:
c000b03c:	83 ec 18             	sub    esp,0x18
c000b03f:	68 a5 29 02 c0       	push   0xc00229a5
c000b044:	e8 79 44 00 00       	call   c000f4c2 <KePanic(char const*)>
c000b049:	31 c0                	xor    eax,eax
c000b04b:	83 c4 1c             	add    esp,0x1c
c000b04e:	c3                   	ret    
c000b04f:	90                   	nop

c000b050 <Video::Video(char const*)>:
c000b050:	83 ec 0c             	sub    esp,0xc
c000b053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b057:	83 ec 08             	sub    esp,0x8
c000b05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05e:	50                   	push   eax
c000b05f:	e8 90 e1 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	ba 48 2a 02 c0       	mov    edx,0xc0022a48
c000b06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b070:	89 10                	mov    DWORD PTR [eax],edx
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b080:	90                   	nop
c000b081:	83 c4 0c             	add    esp,0xc
c000b084:	c3                   	ret    
c000b085:	90                   	nop

c000b086 <Video::~Video()>:
c000b086:	83 ec 0c             	sub    esp,0xc
c000b089:	ba 48 2a 02 c0       	mov    edx,0xc0022a48
c000b08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b092:	89 10                	mov    DWORD PTR [eax],edx
c000b094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b098:	83 ec 0c             	sub    esp,0xc
c000b09b:	50                   	push   eax
c000b09c:	e8 f3 de ff ff       	call   c0008f94 <Device::~Device()>
c000b0a1:	83 c4 10             	add    esp,0x10
c000b0a4:	90                   	nop
c000b0a5:	83 c4 0c             	add    esp,0xc
c000b0a8:	c3                   	ret    
c000b0a9:	90                   	nop

c000b0aa <Video::~Video()>:
c000b0aa:	83 ec 0c             	sub    esp,0xc
c000b0ad:	83 ec 0c             	sub    esp,0xc
c000b0b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b4:	e8 cd ff ff ff       	call   c000b086 <Video::~Video()>
c000b0b9:	83 c4 10             	add    esp,0x10
c000b0bc:	83 ec 08             	sub    esp,0x8
c000b0bf:	68 64 01 00 00       	push   0x164
c000b0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c8:	e8 26 18 00 00       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	83 c4 0c             	add    esp,0xc
c000b0d3:	c3                   	ret    

c000b0d4 <Video::isMonochrome()>:
c000b0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000b0de:	c3                   	ret    
c000b0df:	90                   	nop

c000b0e0 <Video::getWidth()>:
c000b0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ea:	c3                   	ret    
c000b0eb:	90                   	nop

c000b0ec <Video::getHeight()>:
c000b0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b0f6:	c3                   	ret    
c000b0f7:	90                   	nop

c000b0f8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000b0f8:	55                   	push   ebp
c000b0f9:	57                   	push   edi
c000b0fa:	56                   	push   esi
c000b0fb:	53                   	push   ebx
c000b0fc:	83 ec 2c             	sub    esp,0x2c
c000b0ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b103:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b107:	83 f8 01             	cmp    eax,0x1
c000b10a:	19 c9                	sbb    ecx,ecx
c000b10c:	31 db                	xor    ebx,ebx
c000b10e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b112:	89 ce                	mov    esi,ecx
c000b114:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000b11c:	f7 d6                	not    esi
c000b11e:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000b124:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b128:	01 d8                	add    eax,ebx
c000b12a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b12e:	57                   	push   edi
c000b12f:	e8 b8 ff ff ff       	call   c000b0ec <Video::getHeight()>
c000b134:	59                   	pop    ecx
c000b135:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b139:	7e 70                	jle    c000b1ab <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000b13b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b13f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000b143:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000b146:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b14a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b14e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000b155:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b159:	89 e8                	mov    eax,ebp
c000b15b:	83 c0 20             	add    eax,0x20
c000b15e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b162:	57                   	push   edi
c000b163:	e8 78 ff ff ff       	call   c000b0e0 <Video::getWidth()>
c000b168:	5a                   	pop    edx
c000b169:	39 c5                	cmp    ebp,eax
c000b16b:	7d 34                	jge    c000b1a1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000b16d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b172:	74 05                	je     c000b179 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b174:	8b 07                	mov    eax,DWORD PTR [edi]
c000b176:	56                   	push   esi
c000b177:	eb 0d                	jmp    c000b186 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b179:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b17e:	74 12                	je     c000b192 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b180:	8b 07                	mov    eax,DWORD PTR [edi]
c000b182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b186:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b18a:	55                   	push   ebp
c000b18b:	57                   	push   edi
c000b18c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b196:	45                   	inc    ebp
c000b197:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b19b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000b19f:	75 c1                	jne    c000b162 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b1a1:	43                   	inc    ebx
c000b1a2:	83 fb 20             	cmp    ebx,0x20
c000b1a5:	0f 85 79 ff ff ff    	jne    c000b124 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b1ab:	83 c4 2c             	add    esp,0x2c
c000b1ae:	5b                   	pop    ebx
c000b1af:	5e                   	pop    esi
c000b1b0:	5f                   	pop    edi
c000b1b1:	5d                   	pop    ebp
c000b1b2:	c3                   	ret    
c000b1b3:	90                   	nop

c000b1b4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b1b4:	55                   	push   ebp
c000b1b5:	57                   	push   edi
c000b1b6:	56                   	push   esi
c000b1b7:	53                   	push   ebx
c000b1b8:	83 ec 48             	sub    esp,0x48
c000b1bb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b1bf:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b1c3:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b1c7:	c1 e0 08             	shl    eax,0x8
c000b1ca:	01 d0                	add    eax,edx
c000b1cc:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b1d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b1d8:	c1 e0 08             	shl    eax,0x8
c000b1db:	01 d0                	add    eax,edx
c000b1dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e5:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b1ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b1ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b1f2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b1f9:	50                   	push   eax
c000b1fa:	e8 7d 3f 00 00       	call   c000f17c <malloc>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	85 c0                	test   eax,eax
c000b204:	89 c5                	mov    ebp,eax
c000b206:	75 10                	jne    c000b218 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 d0 29 02 c0       	push   0xc00229d0
c000b210:	e8 ad 42 00 00       	call   c000f4c2 <KePanic(char const*)>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	52                   	push   edx
c000b219:	bf 12 00 00 00       	mov    edi,0x12
c000b21e:	52                   	push   edx
c000b21f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b223:	50                   	push   eax
c000b224:	68 e0 29 02 c0       	push   0xc00229e0
c000b229:	e8 20 bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b22e:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b231:	83 e0 20             	and    eax,0x20
c000b234:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b238:	85 c0                	test   eax,eax
c000b23a:	59                   	pop    ecx
c000b23b:	0f 94 c0             	sete   al
c000b23e:	0f b6 c0             	movzx  eax,al
c000b241:	5e                   	pop    esi
c000b242:	50                   	push   eax
c000b243:	68 ea 29 02 c0       	push   0xc00229ea
c000b248:	e8 01 bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b24d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b251:	83 c4 10             	add    esp,0x10
c000b254:	85 c0                	test   eax,eax
c000b256:	89 c2                	mov    edx,eax
c000b258:	74 11                	je     c000b26b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b25a:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b25e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b262:	c1 ff 03             	sar    edi,0x3
c000b265:	0f af f9             	imul   edi,ecx
c000b268:	83 c7 12             	add    edi,0x12
c000b26b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b270:	74 07                	je     c000b279 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b272:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b277:	75 12                	jne    c000b28b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b279:	83 ec 0c             	sub    esp,0xc
c000b27c:	68 f8 29 02 c0       	push   0xc00229f8
c000b281:	e8 c8 bc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b286:	e9 aa 02 00 00       	jmp    c000b535 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b28b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b28f:	83 f9 02             	cmp    ecx,0x2
c000b292:	74 0e                	je     c000b2a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b294:	83 f9 0a             	cmp    ecx,0xa
c000b297:	0f 84 d1 00 00 00    	je     c000b36e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b29d:	e9 7e 02 00 00       	jmp    c000b520 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b2a2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b2a7:	75 0e                	jne    c000b2b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b2a9:	84 d2                	test   dl,dl
c000b2ab:	75 0a                	jne    c000b2b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b2ad:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b2b0:	83 e8 18             	sub    eax,0x18
c000b2b3:	a8 f7                	test   al,0xf7
c000b2b5:	74 0d                	je     c000b2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b2b7:	83 ec 0c             	sub    esp,0xc
c000b2ba:	68 0d 2a 02 c0       	push   0xc0022a0d
c000b2bf:	e9 64 02 00 00       	jmp    c000b528 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b2c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b2cc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b2d1:	31 c0                	xor    eax,eax
c000b2d3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b2d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b2df:	89 c6                	mov    esi,eax
c000b2e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b2e6:	75 15                	jne    c000b2fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b2e8:	99                   	cdq    
c000b2e9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2ed:	85 d2                	test   edx,edx
c000b2ef:	75 0c                	jne    c000b2fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b2f1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b2f5:	29 c6                	sub    esi,eax
c000b2f7:	4e                   	dec    esi
c000b2f8:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b2fd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b301:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b309:	75 0c                	jne    c000b317 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b30b:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b310:	c1 e2 18             	shl    edx,0x18
c000b313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b317:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b31c:	8d 46 01             	lea    eax,[esi+0x1]
c000b31f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b323:	c1 e1 10             	shl    ecx,0x10
c000b326:	89 ca                	mov    edx,ecx
c000b328:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b32d:	c1 e1 08             	shl    ecx,0x8
c000b330:	09 d1                	or     ecx,edx
c000b332:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b336:	09 d1                	or     ecx,edx
c000b338:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b33c:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b340:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b344:	c1 fa 03             	sar    edx,0x3
c000b347:	01 d7                	add    edi,edx
c000b349:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b34d:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b351:	7e 04                	jle    c000b357 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b353:	89 c6                	mov    esi,eax
c000b355:	eb 8a                	jmp    c000b2e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b357:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b35b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b35f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b363:	0f 8f 6e ff ff ff    	jg     c000b2d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b369:	e9 ce 01 00 00       	jmp    c000b53c <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b36e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b373:	75 0e                	jne    c000b383 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b375:	85 c0                	test   eax,eax
c000b377:	75 0a                	jne    c000b383 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b379:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b37c:	83 e8 18             	sub    eax,0x18
c000b37f:	a8 f7                	test   al,0xf7
c000b381:	74 0d                	je     c000b390 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b383:	83 ec 0c             	sub    esp,0xc
c000b386:	68 1b 2a 02 c0       	push   0xc0022a1b
c000b38b:	e9 98 01 00 00       	jmp    c000b528 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b390:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b398:	31 c9                	xor    ecx,ecx
c000b39a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b3a2:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b3a6:	0f 8d 90 01 00 00    	jge    c000b53c <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b3ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b3b0:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b3b4:	0f 8e 82 01 00 00    	jle    c000b53c <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b3ba:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b3be:	8d 77 01             	lea    esi,[edi+0x1]
c000b3c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3c5:	83 fa 7f             	cmp    edx,0x7f
c000b3c8:	89 d0                	mov    eax,edx
c000b3ca:	0f 8e a3 00 00 00    	jle    c000b473 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b3d0:	83 e0 7f             	and    eax,0x7f
c000b3d3:	31 d2                	xor    edx,edx
c000b3d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3d9:	40                   	inc    eax
c000b3da:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b3de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3e2:	75 08                	jne    c000b3ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b3e4:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b3e9:	c1 e2 18             	shl    edx,0x18
c000b3ec:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b3f1:	c1 e0 10             	shl    eax,0x10
c000b3f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b3f8:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b3fd:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b401:	c1 e0 08             	shl    eax,0x8
c000b404:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b408:	09 f8                	or     eax,edi
c000b40a:	31 ff                	xor    edi,edi
c000b40c:	09 d0                	or     eax,edx
c000b40e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b412:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b417:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b41b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b420:	75 1d                	jne    c000b43f <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b422:	89 c8                	mov    eax,ecx
c000b424:	99                   	cdq    
c000b425:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b429:	85 d2                	test   edx,edx
c000b42b:	75 12                	jne    c000b43f <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b42d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b431:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b435:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b439:	49                   	dec    ecx
c000b43a:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b43f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b443:	8d 51 01             	lea    edx,[ecx+0x1]
c000b446:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b44a:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b44e:	8d 47 01             	lea    eax,[edi+0x1]
c000b451:	7e 06                	jle    c000b459 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b453:	89 c7                	mov    edi,eax
c000b455:	89 d1                	mov    ecx,edx
c000b457:	eb c2                	jmp    c000b41b <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b459:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b45d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b461:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b465:	c1 f8 03             	sar    eax,0x3
c000b468:	01 c6                	add    esi,eax
c000b46a:	89 d1                	mov    ecx,edx
c000b46c:	89 f7                	mov    edi,esi
c000b46e:	e9 2f ff ff ff       	jmp    c000b3a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b473:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b47b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b47f:	40                   	inc    eax
c000b480:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b484:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b489:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b48d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b492:	75 1d                	jne    c000b4b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b494:	89 c8                	mov    eax,ecx
c000b496:	99                   	cdq    
c000b497:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b49b:	85 d2                	test   edx,edx
c000b49d:	75 12                	jne    c000b4b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b49f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4a3:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b4a7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b4ab:	49                   	dec    ecx
c000b4ac:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b4b1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b4b5:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b4bd:	75 0c                	jne    c000b4cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b4bf:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b4c4:	c1 e7 18             	shl    edi,0x18
c000b4c7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b4cb:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b4d0:	8d 51 01             	lea    edx,[ecx+0x1]
c000b4d3:	c1 e0 10             	shl    eax,0x10
c000b4d6:	89 c7                	mov    edi,eax
c000b4d8:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b4dd:	c1 e0 08             	shl    eax,0x8
c000b4e0:	09 f8                	or     eax,edi
c000b4e2:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b4e6:	09 f8                	or     eax,edi
c000b4e8:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b4ec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b4f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b4f4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b4f8:	c1 f8 03             	sar    eax,0x3
c000b4fb:	01 c6                	add    esi,eax
c000b4fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b501:	40                   	inc    eax
c000b502:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b506:	7e 0b                	jle    c000b513 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b508:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b50c:	89 d1                	mov    ecx,edx
c000b50e:	e9 7a ff ff ff       	jmp    c000b48d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b513:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b517:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b51b:	e9 4a ff ff ff       	jmp    c000b46a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b520:	50                   	push   eax
c000b521:	50                   	push   eax
c000b522:	51                   	push   ecx
c000b523:	68 2a 2a 02 c0       	push   0xc0022a2a
c000b528:	e8 21 ba ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b52d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b530:	e8 57 3c 00 00       	call   c000f18c <free>
c000b535:	83 c4 10             	add    esp,0x10
c000b538:	31 ed                	xor    ebp,ebp
c000b53a:	eb 14                	jmp    c000b550 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b53c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b540:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b544:	89 18                	mov    DWORD PTR [eax],ebx
c000b546:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b54a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b54e:	89 18                	mov    DWORD PTR [eax],ebx
c000b550:	83 c4 3c             	add    esp,0x3c
c000b553:	89 e8                	mov    eax,ebp
c000b555:	5b                   	pop    ebx
c000b556:	5e                   	pop    esi
c000b557:	5f                   	pop    edi
c000b558:	5d                   	pop    ebp
c000b559:	c3                   	ret    

c000b55a <Video::putTGA(int, int, unsigned char*, int)>:
c000b55a:	55                   	push   ebp
c000b55b:	57                   	push   edi
c000b55c:	56                   	push   esi
c000b55d:	53                   	push   ebx
c000b55e:	83 ec 28             	sub    esp,0x28
c000b561:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b565:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b569:	50                   	push   eax
c000b56a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b56e:	50                   	push   eax
c000b56f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b573:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b577:	55                   	push   ebp
c000b578:	e8 37 fc ff ff       	call   c000b1b4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b57d:	83 c4 20             	add    esp,0x20
c000b580:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b584:	85 c0                	test   eax,eax
c000b586:	74 3b                	je     c000b5c3 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b588:	89 c6                	mov    esi,eax
c000b58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b58e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b592:	39 d8                	cmp    eax,ebx
c000b594:	7e 2d                	jle    c000b5c3 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b596:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b59a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b59e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b5a2:	39 f8                	cmp    eax,edi
c000b5a4:	7e 1a                	jle    c000b5c0 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b5a6:	83 c6 04             	add    esi,0x4
c000b5a9:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b5ac:	85 c0                	test   eax,eax
c000b5ae:	79 0d                	jns    c000b5bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b5b0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b5b3:	50                   	push   eax
c000b5b4:	53                   	push   ebx
c000b5b5:	57                   	push   edi
c000b5b6:	55                   	push   ebp
c000b5b7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b5ba:	83 c4 10             	add    esp,0x10
c000b5bd:	47                   	inc    edi
c000b5be:	eb da                	jmp    c000b59a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b5c0:	43                   	inc    ebx
c000b5c1:	eb c7                	jmp    c000b58a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b5c3:	83 c4 1c             	add    esp,0x1c
c000b5c6:	5b                   	pop    ebx
c000b5c7:	5e                   	pop    esi
c000b5c8:	5f                   	pop    edi
c000b5c9:	5d                   	pop    ebp
c000b5ca:	c3                   	ret    
c000b5cb:	90                   	nop

c000b5cc <ACPI::close(int, int, void*)>:
c000b5cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b5d1:	c3                   	ret    
c000b5d2:	66 90                	xchg   ax,ax

c000b5d4 <loadACPITables(unsigned char*)>:
c000b5d4:	57                   	push   edi
c000b5d5:	56                   	push   esi
c000b5d6:	53                   	push   ebx
c000b5d7:	83 ec 60             	sub    esp,0x60
c000b5da:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b5df:	0f 84 43 02 00 00    	je     c000b828 <loadACPITables(unsigned char*)+0x254>
c000b5e5:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b5ea:	0f b6 c0             	movzx  eax,al
c000b5ed:	85 c0                	test   eax,eax
c000b5ef:	74 7b                	je     c000b66c <loadACPITables(unsigned char*)+0x98>
c000b5f1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b5f5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b5f9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b5fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b600:	83 e8 24             	sub    eax,0x24
c000b603:	c1 e8 03             	shr    eax,0x3
c000b606:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b60a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b612:	66 90                	xchg   ax,ax
c000b614:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b618:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b61c:	0f 8d ba 00 00 00    	jge    c000b6dc <loadACPITables(unsigned char*)+0x108>
c000b622:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b626:	83 c0 24             	add    eax,0x24
c000b629:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b62d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b631:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b635:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b639:	c1 e0 03             	shl    eax,0x3
c000b63c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b640:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b644:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b647:	8b 00                	mov    eax,DWORD PTR [eax]
c000b649:	89 c1                	mov    ecx,eax
c000b64b:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b650:	8d 50 01             	lea    edx,[eax+0x1]
c000b653:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b659:	89 ca                	mov    edx,ecx
c000b65b:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b662:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b667:	eb ab                	jmp    c000b614 <loadACPITables(unsigned char*)+0x40>
c000b669:	8d 76 00             	lea    esi,[esi+0x0]
c000b66c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b670:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b674:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67b:	83 e8 24             	sub    eax,0x24
c000b67e:	c1 e8 02             	shr    eax,0x2
c000b681:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b685:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b68d:	8d 76 00             	lea    esi,[esi+0x0]
c000b690:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b694:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b698:	7d 42                	jge    c000b6dc <loadACPITables(unsigned char*)+0x108>
c000b69a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b69e:	83 c0 24             	add    eax,0x24
c000b6a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b6ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b6b1:	c1 e0 02             	shl    eax,0x2
c000b6b4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b6b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b6bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6be:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6c3:	8d 50 01             	lea    edx,[eax+0x1]
c000b6c6:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b6cc:	89 ca                	mov    edx,ecx
c000b6ce:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b6d5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b6da:	eb b4                	jmp    c000b690 <loadACPITables(unsigned char*)+0xbc>
c000b6dc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b6e4:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6e9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b6ed:	0f 8d 39 01 00 00    	jge    c000b82c <loadACPITables(unsigned char*)+0x258>
c000b6f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b6f7:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b6fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b70a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b70e:	25 ff 0f 00 00       	and    eax,0xfff
c000b713:	89 c6                	mov    esi,eax
c000b715:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b71b:	83 ec 0c             	sub    esp,0xc
c000b71e:	6a 01                	push   0x1
c000b720:	e8 78 71 00 00       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b72c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b732:	83 ec 0c             	sub    esp,0xc
c000b735:	6a 01                	push   0x1
c000b737:	6a 01                	push   0x1
c000b739:	50                   	push   eax
c000b73a:	52                   	push   edx
c000b73b:	53                   	push   ebx
c000b73c:	e8 2f 7a 00 00       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b741:	83 c4 20             	add    esp,0x20
c000b744:	09 f0                	or     eax,esi
c000b746:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b74a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b74e:	c1 e0 03             	shl    eax,0x3
c000b751:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b75e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b762:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b76a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b76e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b776:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b77a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b77e:	89 c6                	mov    esi,eax
c000b780:	89 d7                	mov    edi,edx
c000b782:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b784:	89 c8                	mov    eax,ecx
c000b786:	89 fa                	mov    edx,edi
c000b788:	89 f3                	mov    ebx,esi
c000b78a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b78e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b792:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b7a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b7a5:	05 00 10 00 00       	add    eax,0x1000
c000b7aa:	c1 e8 0c             	shr    eax,0xc
c000b7ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7bd:	25 ff 0f 00 00       	and    eax,0xfff
c000b7c2:	89 c6                	mov    esi,eax
c000b7c4:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b7ca:	83 ec 0c             	sub    esp,0xc
c000b7cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b7d1:	e8 c7 70 00 00       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b7dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b7e3:	83 ec 0c             	sub    esp,0xc
c000b7e6:	6a 01                	push   0x1
c000b7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b7ec:	50                   	push   eax
c000b7ed:	52                   	push   edx
c000b7ee:	53                   	push   ebx
c000b7ef:	e8 7c 79 00 00       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b7f4:	83 c4 20             	add    esp,0x20
c000b7f7:	09 f0                	or     eax,esi
c000b7f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b801:	83 ec 0c             	sub    esp,0xc
c000b804:	50                   	push   eax
c000b805:	e8 91 73 00 00       	call   c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c000b80a:	83 c4 10             	add    esp,0x10
c000b80d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b811:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b815:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b81c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b821:	e9 be fe ff ff       	jmp    c000b6e4 <loadACPITables(unsigned char*)+0x110>
c000b826:	66 90                	xchg   ax,ax
c000b828:	90                   	nop
c000b829:	8d 76 00             	lea    esi,[esi+0x0]
c000b82c:	83 c4 60             	add    esp,0x60
c000b82f:	5b                   	pop    ebx
c000b830:	5e                   	pop    esi
c000b831:	5f                   	pop    edi
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <findRSDT(unsigned char*)>:
c000b834:	57                   	push   edi
c000b835:	56                   	push   esi
c000b836:	53                   	push   ebx
c000b837:	83 ec 50             	sub    esp,0x50
c000b83a:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b83f:	85 c0                	test   eax,eax
c000b841:	75 0d                	jne    c000b850 <findRSDT(unsigned char*)+0x1c>
c000b843:	b8 00 00 00 00       	mov    eax,0x0
c000b848:	e9 2b 01 00 00       	jmp    c000b978 <findRSDT(unsigned char*)+0x144>
c000b84d:	8d 76 00             	lea    esi,[esi+0x0]
c000b850:	89 e0                	mov    eax,esp
c000b852:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b856:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b85a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b85e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b866:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b86a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b86e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b872:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b876:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b87a:	89 c6                	mov    esi,eax
c000b87c:	89 d7                	mov    edi,edx
c000b87e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b880:	89 c8                	mov    eax,ecx
c000b882:	89 fa                	mov    edx,edi
c000b884:	89 f3                	mov    ebx,esi
c000b886:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b88a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b88e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b892:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b896:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b89a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b8a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b8a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b8aa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b8b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ba:	25 ff 0f 00 00       	and    eax,0xfff
c000b8bf:	89 c6                	mov    esi,eax
c000b8c1:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b8c7:	83 ec 0c             	sub    esp,0xc
c000b8ca:	6a 02                	push   0x2
c000b8cc:	e8 cc 6f 00 00       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c000b8d1:	83 c4 10             	add    esp,0x10
c000b8d4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b8d8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b8de:	83 ec 0c             	sub    esp,0xc
c000b8e1:	6a 01                	push   0x1
c000b8e3:	6a 02                	push   0x2
c000b8e5:	50                   	push   eax
c000b8e6:	52                   	push   edx
c000b8e7:	53                   	push   ebx
c000b8e8:	e8 83 78 00 00       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b8ed:	83 c4 20             	add    esp,0x20
c000b8f0:	09 f0                	or     eax,esi
c000b8f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8fa:	25 ff 0f 00 00       	and    eax,0xfff
c000b8ff:	89 c6                	mov    esi,eax
c000b901:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b907:	83 ec 0c             	sub    esp,0xc
c000b90a:	6a 02                	push   0x2
c000b90c:	e8 8c 6f 00 00       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b918:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b91e:	83 ec 0c             	sub    esp,0xc
c000b921:	6a 01                	push   0x1
c000b923:	6a 02                	push   0x2
c000b925:	50                   	push   eax
c000b926:	52                   	push   edx
c000b927:	53                   	push   ebx
c000b928:	e8 43 78 00 00       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b92d:	83 c4 20             	add    esp,0x20
c000b930:	09 f0                	or     eax,esi
c000b932:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b936:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b93b:	85 c0                	test   eax,eax
c000b93d:	75 11                	jne    c000b950 <findRSDT(unsigned char*)+0x11c>
c000b93f:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b946:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b94a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b94e:	eb 24                	jmp    c000b974 <findRSDT(unsigned char*)+0x140>
c000b950:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b955:	83 f8 02             	cmp    eax,0x2
c000b958:	75 12                	jne    c000b96c <findRSDT(unsigned char*)+0x138>
c000b95a:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b961:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b965:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b969:	eb 09                	jmp    c000b974 <findRSDT(unsigned char*)+0x140>
c000b96b:	90                   	nop
c000b96c:	b8 00 00 00 00       	mov    eax,0x0
c000b971:	eb 05                	jmp    c000b978 <findRSDT(unsigned char*)+0x144>
c000b973:	90                   	nop
c000b974:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b978:	83 c4 50             	add    esp,0x50
c000b97b:	5b                   	pop    ebx
c000b97c:	5e                   	pop    esi
c000b97d:	5f                   	pop    edi
c000b97e:	c3                   	ret    
c000b97f:	90                   	nop

c000b980 <findDataTable(unsigned char*, char*)>:
c000b980:	83 ec 1c             	sub    esp,0x1c
c000b983:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b988:	75 0a                	jne    c000b994 <findDataTable(unsigned char*, char*)+0x14>
c000b98a:	b8 00 00 00 00       	mov    eax,0x0
c000b98f:	eb 5f                	jmp    c000b9f0 <findDataTable(unsigned char*, char*)+0x70>
c000b991:	8d 76 00             	lea    esi,[esi+0x0]
c000b994:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b99c:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b9a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b9a5:	7d 41                	jge    c000b9e8 <findDataTable(unsigned char*, char*)+0x68>
c000b9a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9ab:	c1 e0 03             	shl    eax,0x3
c000b9ae:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b9b3:	83 ec 04             	sub    esp,0x4
c000b9b6:	6a 04                	push   0x4
c000b9b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b9bc:	50                   	push   eax
c000b9bd:	e8 be 49 ff ff       	call   c0000380 <memcmp>
c000b9c2:	83 c4 10             	add    esp,0x10
c000b9c5:	85 c0                	test   eax,eax
c000b9c7:	0f 94 c0             	sete   al
c000b9ca:	0f b6 c0             	movzx  eax,al
c000b9cd:	85 c0                	test   eax,eax
c000b9cf:	74 0f                	je     c000b9e0 <findDataTable(unsigned char*, char*)+0x60>
c000b9d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9d5:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b9dc:	eb 12                	jmp    c000b9f0 <findDataTable(unsigned char*, char*)+0x70>
c000b9de:	66 90                	xchg   ax,ax
c000b9e0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b9e5:	eb b5                	jmp    c000b99c <findDataTable(unsigned char*, char*)+0x1c>
c000b9e7:	90                   	nop
c000b9e8:	b8 00 00 00 00       	mov    eax,0x0
c000b9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f0:	83 c4 1c             	add    esp,0x1c
c000b9f3:	c3                   	ret    

c000b9f4 <scanMADT()>:
c000b9f4:	53                   	push   ebx
c000b9f5:	83 ec 38             	sub    esp,0x38
c000b9f8:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000ba02:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000ba0c:	e8 25 cf 00 00       	call   c0018936 <HalFindRSDP()>
c000ba11:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000ba16:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000ba1b:	85 c0                	test   eax,eax
c000ba1d:	0f 84 11 04 00 00    	je     c000be34 <scanMADT()+0x440>
c000ba23:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 03 fe ff ff       	call   c000b834 <findRSDT(unsigned char*)>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000ba39:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba3e:	85 c0                	test   eax,eax
c000ba40:	0f 84 f2 03 00 00    	je     c000be38 <scanMADT()+0x444>
c000ba46:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba4b:	83 ec 0c             	sub    esp,0xc
c000ba4e:	50                   	push   eax
c000ba4f:	e8 80 fb ff ff       	call   c000b5d4 <loadACPITables(unsigned char*)>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba5c:	83 ec 08             	sub    esp,0x8
c000ba5f:	68 8c 2a 02 c0       	push   0xc0022a8c
c000ba64:	50                   	push   eax
c000ba65:	e8 16 ff ff ff       	call   c000b980 <findDataTable(unsigned char*, char*)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba71:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ba76:	0f 84 c0 03 00 00    	je     c000be3c <scanMADT()+0x448>
c000ba7c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ba84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba8b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ba8f:	0f 87 af 03 00 00    	ja     c000be44 <scanMADT()+0x450>
c000ba95:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ba9d:	0f 87 a1 03 00 00    	ja     c000be44 <scanMADT()+0x450>
c000baa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baa7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000baab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baaf:	8d 50 01             	lea    edx,[eax+0x1]
c000bab2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bab6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000babe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000bac2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bac6:	8d 50 01             	lea    edx,[eax+0x1]
c000bac9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bacd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bad1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bad5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000bad9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000bade:	83 f8 02             	cmp    eax,0x2
c000bae1:	0f 86 59 03 00 00    	jbe    c000be40 <scanMADT()+0x44c>
c000bae7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000baec:	85 c0                	test   eax,eax
c000baee:	75 58                	jne    c000bb48 <scanMADT()+0x154>
c000baf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf4:	8d 50 01             	lea    edx,[eax+0x1]
c000baf7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bafb:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bb01:	0f b6 d2             	movzx  edx,dl
c000bb04:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb08:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb0c:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000bb12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb16:	8d 50 01             	lea    edx,[eax+0x1]
c000bb19:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb1d:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bb23:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb26:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000bb2c:	0f b6 d2             	movzx  edx,dl
c000bb2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb33:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb37:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000bb3d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb42:	e9 d9 02 00 00       	jmp    c000be20 <scanMADT()+0x42c>
c000bb47:	90                   	nop
c000bb48:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb4d:	83 f8 01             	cmp    eax,0x1
c000bb50:	0f 85 1a 01 00 00    	jne    c000bc70 <scanMADT()+0x27c>
c000bb56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb5a:	8d 50 01             	lea    edx,[eax+0x1]
c000bb5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb61:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000bb67:	0f b6 d2             	movzx  edx,dl
c000bb6a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb6e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb72:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000bb78:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000bb7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb85:	01 d0                	add    eax,edx
c000bb87:	83 c0 2c             	add    eax,0x2c
c000bb8a:	8a 00                	mov    al,BYTE PTR [eax]
c000bb8c:	0f b6 d0             	movzx  edx,al
c000bb8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb93:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb9a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb9e:	0f b6 c0             	movzx  eax,al
c000bba1:	c1 e0 08             	shl    eax,0x8
c000bba4:	89 d1                	mov    ecx,edx
c000bba6:	09 c1                	or     ecx,eax
c000bba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbac:	8d 50 02             	lea    edx,[eax+0x2]
c000bbaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbb3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bbb7:	0f b6 c0             	movzx  eax,al
c000bbba:	c1 e0 10             	shl    eax,0x10
c000bbbd:	09 c1                	or     ecx,eax
c000bbbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbc3:	8d 50 03             	lea    edx,[eax+0x3]
c000bbc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bbce:	0f b6 c0             	movzx  eax,al
c000bbd1:	c1 e0 18             	shl    eax,0x18
c000bbd4:	09 c1                	or     ecx,eax
c000bbd6:	89 ca                	mov    edx,ecx
c000bbd8:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bbdd:	0f b6 c0             	movzx  eax,al
c000bbe0:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000bbe7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bbec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbf4:	01 d0                	add    eax,edx
c000bbf6:	83 c0 2c             	add    eax,0x2c
c000bbf9:	8a 00                	mov    al,BYTE PTR [eax]
c000bbfb:	0f b6 d0             	movzx  edx,al
c000bbfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc02:	8d 48 01             	lea    ecx,[eax+0x1]
c000bc05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc0d:	0f b6 c0             	movzx  eax,al
c000bc10:	c1 e0 08             	shl    eax,0x8
c000bc13:	89 d1                	mov    ecx,edx
c000bc15:	09 c1                	or     ecx,eax
c000bc17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc1b:	8d 50 02             	lea    edx,[eax+0x2]
c000bc1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc22:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc26:	0f b6 c0             	movzx  eax,al
c000bc29:	c1 e0 10             	shl    eax,0x10
c000bc2c:	09 c1                	or     ecx,eax
c000bc2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc32:	8d 50 03             	lea    edx,[eax+0x3]
c000bc35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc39:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc3d:	0f b6 c0             	movzx  eax,al
c000bc40:	c1 e0 18             	shl    eax,0x18
c000bc43:	09 c1                	or     ecx,eax
c000bc45:	89 ca                	mov    edx,ecx
c000bc47:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc4c:	0f b6 c0             	movzx  eax,al
c000bc4f:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000bc56:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bc5b:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc60:	83 c0 01             	add    eax,0x1
c000bc63:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000bc68:	e9 b3 01 00 00       	jmp    c000be20 <scanMADT()+0x42c>
c000bc6d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc70:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc75:	83 f8 02             	cmp    eax,0x2
c000bc78:	0f 85 ea 00 00 00    	jne    c000bd68 <scanMADT()+0x374>
c000bc7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc82:	8d 50 01             	lea    edx,[eax+0x1]
c000bc85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc8d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc91:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bc95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc99:	8d 50 01             	lea    edx,[eax+0x1]
c000bc9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bca4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bca8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bcac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bcb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcb4:	01 d0                	add    eax,edx
c000bcb6:	83 c0 2c             	add    eax,0x2c
c000bcb9:	8a 00                	mov    al,BYTE PTR [eax]
c000bcbb:	0f b6 d0             	movzx  edx,al
c000bcbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcc2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bcc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcc9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bccd:	0f b6 c0             	movzx  eax,al
c000bcd0:	c1 e0 08             	shl    eax,0x8
c000bcd3:	89 d1                	mov    ecx,edx
c000bcd5:	09 c1                	or     ecx,eax
c000bcd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcdb:	8d 50 02             	lea    edx,[eax+0x2]
c000bcde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bce2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bce6:	0f b6 c0             	movzx  eax,al
c000bce9:	c1 e0 10             	shl    eax,0x10
c000bcec:	09 c1                	or     ecx,eax
c000bcee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcf2:	8d 50 03             	lea    edx,[eax+0x3]
c000bcf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcf9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bcfd:	0f b6 c0             	movzx  eax,al
c000bd00:	c1 e0 18             	shl    eax,0x18
c000bd03:	09 c8                	or     eax,ecx
c000bd05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd09:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bd0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd16:	01 d0                	add    eax,edx
c000bd18:	83 c0 2c             	add    eax,0x2c
c000bd1b:	8a 00                	mov    al,BYTE PTR [eax]
c000bd1d:	0f b6 d0             	movzx  edx,al
c000bd20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd24:	8d 48 01             	lea    ecx,[eax+0x1]
c000bd27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bd2b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bd2f:	0f b6 c0             	movzx  eax,al
c000bd32:	c1 e0 08             	shl    eax,0x8
c000bd35:	09 d0                	or     eax,edx
c000bd37:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bd3c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bd41:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bd46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd4a:	88 90 e8 50 02 c0    	mov    BYTE PTR [eax-0x3ffdaf18],dl
c000bd50:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bd55:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bd5a:	66 89 94 00 c0 aa 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd5540],dx
c000bd62:	e9 b9 00 00 00       	jmp    c000be20 <scanMADT()+0x42c>
c000bd67:	90                   	nop
c000bd68:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bd6d:	83 f8 04             	cmp    eax,0x4
c000bd70:	0f 85 9a 00 00 00    	jne    c000be10 <scanMADT()+0x41c>
c000bd76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd7a:	8d 50 01             	lea    edx,[eax+0x1]
c000bd7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd85:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bd89:	0f b6 c0             	movzx  eax,al
c000bd8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd98:	01 d0                	add    eax,edx
c000bd9a:	83 c0 2c             	add    eax,0x2c
c000bd9d:	8a 00                	mov    al,BYTE PTR [eax]
c000bd9f:	0f b6 d0             	movzx  edx,al
c000bda2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bda6:	8d 48 01             	lea    ecx,[eax+0x1]
c000bda9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bdb1:	0f b6 c0             	movzx  eax,al
c000bdb4:	c1 e0 08             	shl    eax,0x8
c000bdb7:	09 d0                	or     eax,edx
c000bdb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdbd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bdc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdc6:	8d 50 01             	lea    edx,[eax+0x1]
c000bdc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bdd1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bdd5:	0f b6 c0             	movzx  eax,al
c000bdd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde0:	c1 e0 08             	shl    eax,0x8
c000bde3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bde7:	89 c1                	mov    ecx,eax
c000bde9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bded:	c1 e0 18             	shl    eax,0x18
c000bdf0:	89 c3                	mov    ebx,eax
c000bdf2:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bdf7:	8d 50 01             	lea    edx,[eax+0x1]
c000bdfa:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000be00:	09 d9                	or     ecx,ebx
c000be02:	89 ca                	mov    edx,ecx
c000be04:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000be0b:	eb 13                	jmp    c000be20 <scanMADT()+0x42c>
c000be0d:	8d 76 00             	lea    esi,[esi+0x0]
c000be10:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000be15:	83 f8 05             	cmp    eax,0x5
c000be18:	75 06                	jne    c000be20 <scanMADT()+0x42c>
c000be1a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000be1f:	90                   	nop
c000be20:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000be25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000be29:	01 d0                	add    eax,edx
c000be2b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be2f:	e9 50 fc ff ff       	jmp    c000ba84 <scanMADT()+0x90>
c000be34:	90                   	nop
c000be35:	eb 0d                	jmp    c000be44 <scanMADT()+0x450>
c000be37:	90                   	nop
c000be38:	90                   	nop
c000be39:	eb 09                	jmp    c000be44 <scanMADT()+0x450>
c000be3b:	90                   	nop
c000be3c:	90                   	nop
c000be3d:	eb 05                	jmp    c000be44 <scanMADT()+0x450>
c000be3f:	90                   	nop
c000be40:	90                   	nop
c000be41:	8d 76 00             	lea    esi,[esi+0x0]
c000be44:	83 c4 38             	add    esp,0x38
c000be47:	5b                   	pop    ebx
c000be48:	c3                   	ret    
c000be49:	90                   	nop
c000be4a:	66 90                	xchg   ax,ax

c000be4c <ACPI::ACPI()>:
c000be4c:	83 ec 0c             	sub    esp,0xc
c000be4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be53:	83 ec 08             	sub    esp,0x8
c000be56:	68 91 2a 02 c0       	push   0xc0022a91
c000be5b:	50                   	push   eax
c000be5c:	e8 93 d3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000be61:	83 c4 10             	add    esp,0x10
c000be64:	ba 8c 2c 02 c0       	mov    edx,0xc0022c8c
c000be69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6d:	89 10                	mov    DWORD PTR [eax],edx
c000be6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be73:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000be7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be7e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000be88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be8c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000be96:	e8 59 fb ff ff       	call   c000b9f4 <scanMADT()>
c000be9b:	90                   	nop
c000be9c:	83 c4 0c             	add    esp,0xc
c000be9f:	c3                   	ret    

c000bea0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bea0:	83 ec 2c             	sub    esp,0x2c
c000bea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bea7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000beab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000beaf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000beb3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000beb8:	88 c8                	mov    al,cl
c000beba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bebe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bec3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000becb:	90                   	nop
c000becc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bed0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bed6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000beda:	0f 8d b0 00 00 00    	jge    c000bf90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bee0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bee4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bee8:	83 c2 2a             	add    edx,0x2a
c000beeb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000beef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bef4:	0f b7 c0             	movzx  eax,ax
c000bef7:	39 c2                	cmp    edx,eax
c000bef9:	0f 85 85 00 00 00    	jne    c000bf84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000beff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf07:	83 c2 2a             	add    edx,0x2a
c000bf0a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bf0e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bf13:	0f b6 c0             	movzx  eax,al
c000bf16:	39 c2                	cmp    edx,eax
c000bf18:	75 6a                	jne    c000bf84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bf1a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf1f:	85 c0                	test   eax,eax
c000bf21:	74 3d                	je     c000bf60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bf23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf2b:	83 c2 2a             	add    edx,0x2a
c000bf2e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bf32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf39:	39 c2                	cmp    edx,eax
c000bf3b:	74 13                	je     c000bf50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bf3d:	83 ec 0c             	sub    esp,0xc
c000bf40:	68 0c 2c 02 c0       	push   0xc0022c0c
c000bf45:	e8 78 35 00 00       	call   c000f4c2 <KePanic(char const*)>
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf50:	83 ec 0c             	sub    esp,0xc
c000bf53:	68 96 2a 02 c0       	push   0xc0022a96
c000bf58:	e8 65 35 00 00       	call   c000f4c2 <KePanic(char const*)>
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bf64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf6c:	83 c2 2a             	add    edx,0x2a
c000bf6f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bf73:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf75:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bf78:	89 01                	mov    DWORD PTR [ecx],eax
c000bf7a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bf7d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf82:	66 90                	xchg   ax,ax
c000bf84:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bf89:	e9 3e ff ff ff       	jmp    c000becc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bf8e:	66 90                	xchg   ax,ax
c000bf90:	90                   	nop
c000bf91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf95:	83 c4 2c             	add    esp,0x2c
c000bf98:	c2 04 00             	ret    0x4
c000bf9b:	90                   	nop

c000bf9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bf9c:	83 ec 1c             	sub    esp,0x1c
c000bf9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bfa3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bfa7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bfab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bfb0:	88 c8                	mov    al,cl
c000bfb2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bfb6:	88 d0                	mov    al,dl
c000bfb8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bfbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfca:	83 c2 2a             	add    edx,0x2a
c000bfcd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bfd1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000bfd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bfe6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfea:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000bfef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bff9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000bffd:	83 c0 01             	add    eax,0x1
c000c000:	88 c1                	mov    cl,al
c000c002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c006:	83 c2 2a             	add    edx,0x2a
c000c009:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c00d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c011:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c01e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c022:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c030:	8d 50 01             	lea    edx,[eax+0x1]
c000c033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c037:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c03d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c041:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c047:	3d 00 02 00 00       	cmp    eax,0x200
c000c04c:	75 12                	jne    c000c060 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c04e:	83 ec 0c             	sub    esp,0xc
c000c051:	68 a5 2a 02 c0       	push   0xc0022aa5
c000c056:	e8 67 34 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c05b:	83 c4 10             	add    esp,0x10
c000c05e:	66 90                	xchg   ax,ax
c000c060:	90                   	nop
c000c061:	83 c4 1c             	add    esp,0x1c
c000c064:	c3                   	ret    
c000c065:	90                   	nop
c000c066:	66 90                	xchg   ax,ax

c000c068 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c068:	b8 00 00 00 00       	mov    eax,0x0
c000c06d:	c3                   	ret    
c000c06e:	66 90                	xchg   ax,ax

c000c070 <ACPI::detectPCI()>:
c000c070:	53                   	push   ebx
c000c071:	83 ec 28             	sub    esp,0x28
c000c074:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c079:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c07e:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c083:	83 ec 08             	sub    esp,0x8
c000c086:	68 c2 2a 02 c0       	push   0xc0022ac2
c000c08b:	50                   	push   eax
c000c08c:	e8 ef f8 ff ff       	call   c000b980 <findDataTable(unsigned char*, char*)>
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c098:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c09d:	74 0d                	je     c000c0ac <ACPI::detectPCI()+0x3c>
c000c09f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0a4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c0ac:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c0b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0b8:	8a 00                	mov    al,BYTE PTR [eax]
c000c0ba:	0f b6 c0             	movzx  eax,al
c000c0bd:	83 f8 01             	cmp    eax,0x1
c000c0c0:	75 0e                	jne    c000c0d0 <ACPI::detectPCI()+0x60>
c000c0c2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0c7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c0cc:	eb 2e                	jmp    c000c0fc <ACPI::detectPCI()+0x8c>
c000c0ce:	66 90                	xchg   ax,ax
c000c0d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0d4:	8a 00                	mov    al,BYTE PTR [eax]
c000c0d6:	0f b6 c0             	movzx  eax,al
c000c0d9:	83 f8 02             	cmp    eax,0x2
c000c0dc:	75 1e                	jne    c000c0fc <ACPI::detectPCI()+0x8c>
c000c0de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0e3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c0e8:	85 c0                	test   eax,eax
c000c0ea:	74 10                	je     c000c0fc <ACPI::detectPCI()+0x8c>
c000c0ec:	83 ec 0c             	sub    esp,0xc
c000c0ef:	68 3c 2c 02 c0       	push   0xc0022c3c
c000c0f4:	e8 c9 33 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c0f9:	83 c4 10             	add    esp,0x10
c000c0fc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000c100:	83 f0 01             	xor    eax,0x1
c000c103:	0f b6 c0             	movzx  eax,al
c000c106:	85 c0                	test   eax,eax
c000c108:	74 46                	je     c000c150 <ACPI::detectPCI()+0xe0>
c000c10a:	e8 21 40 ff ff       	call   c0000130 <manualPCIProbe>
c000c10f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c113:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000c118:	75 0e                	jne    c000c128 <ACPI::detectPCI()+0xb8>
c000c11a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c11f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c124:	eb 2a                	jmp    c000c150 <ACPI::detectPCI()+0xe0>
c000c126:	66 90                	xchg   ax,ax
c000c128:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000c12d:	75 21                	jne    c000c150 <ACPI::detectPCI()+0xe0>
c000c12f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c134:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c139:	85 c0                	test   eax,eax
c000c13b:	74 13                	je     c000c150 <ACPI::detectPCI()+0xe0>
c000c13d:	83 ec 0c             	sub    esp,0xc
c000c140:	68 3c 2c 02 c0       	push   0xc0022c3c
c000c145:	e8 78 33 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	8d 76 00             	lea    esi,[esi+0x0]
c000c150:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c155:	85 c0                	test   eax,eax
c000c157:	0f 84 87 00 00 00    	je     c000c1e4 <ACPI::detectPCI()+0x174>
c000c15d:	83 ec 0c             	sub    esp,0xc
c000c160:	68 c7 2a 02 c0       	push   0xc0022ac7
c000c165:	e8 c9 06 00 00       	call   c000c833 <KeSetBootMessage(char const*)>
c000c16a:	83 c4 10             	add    esp,0x10
c000c16d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c175:	83 ec 0c             	sub    esp,0xc
c000c178:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c17c:	e8 fb 2f 00 00       	call   c000f17c <malloc>
c000c181:	83 c4 10             	add    esp,0x10
c000c184:	89 c3                	mov    ebx,eax
c000c186:	83 ec 0c             	sub    esp,0xc
c000c189:	53                   	push   ebx
c000c18a:	e8 7f 05 01 00       	call   c001c70e <PCI::PCI()>
c000c18f:	83 c4 10             	add    esp,0x10
c000c192:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c19a:	83 ec 08             	sub    esp,0x8
c000c19d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1a1:	50                   	push   eax
c000c1a2:	e8 eb ce ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c1a7:	83 c4 10             	add    esp,0x10
c000c1aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b0:	83 c0 08             	add    eax,0x8
c000c1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c1ba:	85 d2                	test   edx,edx
c000c1bc:	74 0a                	je     c000c1c8 <ACPI::detectPCI()+0x158>
c000c1be:	ba 01 00 00 00       	mov    edx,0x1
c000c1c3:	eb 0b                	jmp    c000c1d0 <ACPI::detectPCI()+0x160>
c000c1c5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1c8:	ba 02 00 00 00       	mov    edx,0x2
c000c1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d0:	6a 00                	push   0x0
c000c1d2:	6a 00                	push   0x0
c000c1d4:	52                   	push   edx
c000c1d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1d9:	ff d0                	call   eax
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	e9 91 00 00 00       	jmp    c000c274 <ACPI::detectPCI()+0x204>
c000c1e3:	90                   	nop
c000c1e4:	83 ec 0c             	sub    esp,0xc
c000c1e7:	68 df 2a 02 c0       	push   0xc0022adf
c000c1ec:	e8 42 06 00 00       	call   c000c833 <KeSetBootMessage(char const*)>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c1fb:	83 ec 0c             	sub    esp,0xc
c000c1fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c202:	e8 75 2f 00 00       	call   c000f17c <malloc>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 c3                	mov    ebx,eax
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	53                   	push   ebx
c000c210:	e8 01 11 01 00       	call   c001d316 <IDE::IDE()>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c21c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c220:	83 ec 08             	sub    esp,0x8
c000c223:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c227:	50                   	push   eax
c000c228:	e8 65 ce ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c234:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c23e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c242:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c24b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c24f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c25c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c25e:	83 c0 08             	add    eax,0x8
c000c261:	8b 00                	mov    eax,DWORD PTR [eax]
c000c263:	6a 00                	push   0x0
c000c265:	6a 00                	push   0x0
c000c267:	6a 00                	push   0x0
c000c269:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26d:	ff d0                	call   eax
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	66 90                	xchg   ax,ax
c000c274:	90                   	nop
c000c275:	83 c4 28             	add    esp,0x28
c000c278:	5b                   	pop    ebx
c000c279:	c3                   	ret    
c000c27a:	66 90                	xchg   ax,ax

c000c27c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c27c:	83 ec 0c             	sub    esp,0xc
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	68 f4 2a 02 c0       	push   0xc0022af4
c000c287:	e8 36 32 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	90                   	nop
c000c290:	83 c4 0c             	add    esp,0xc
c000c293:	c3                   	ret    

c000c294 <ACPI::open(int, int, void*)>:
c000c294:	55                   	push   ebp
c000c295:	89 e5                	mov    ebp,esp
c000c297:	53                   	push   ebx
c000c298:	81 ec 74 01 00 00    	sub    esp,0x174
c000c29e:	83 ec 0c             	sub    esp,0xc
c000c2a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c2a4:	e8 c7 fd ff ff       	call   c000c070 <ACPI::detectPCI()>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	68 64 2c 02 c0       	push   0xc0022c64
c000c2b4:	e8 7a 05 00 00       	call   c000c833 <KeSetBootMessage(char const*)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	b8 4c 05 00 00       	mov    eax,0x54c
c000c2c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c2c3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c2c6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c2ca:	83 f8 01             	cmp    eax,0x1
c000c2cd:	75 15                	jne    c000c2e4 <ACPI::open(int, int, void*)+0x50>
c000c2cf:	83 ec 0c             	sub    esp,0xc
c000c2d2:	68 05 2b 02 c0       	push   0xc0022b05
c000c2d7:	e8 77 88 00 00       	call   c0014b53 <Thr::loadKernelSymbolTable(char const*)>
c000c2dc:	83 c4 10             	add    esp,0x10
c000c2df:	eb 33                	jmp    c000c314 <ACPI::open(int, int, void*)+0x80>
c000c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c2e4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c2e8:	3d bb 00 00 00       	cmp    eax,0xbb
c000c2ed:	75 15                	jne    c000c304 <ACPI::open(int, int, void*)+0x70>
c000c2ef:	83 ec 0c             	sub    esp,0xc
c000c2f2:	68 23 2b 02 c0       	push   0xc0022b23
c000c2f7:	e8 57 88 00 00       	call   c0014b53 <Thr::loadKernelSymbolTable(char const*)>
c000c2fc:	83 c4 10             	add    esp,0x10
c000c2ff:	eb 13                	jmp    c000c314 <ACPI::open(int, int, void*)+0x80>
c000c301:	8d 76 00             	lea    esi,[esi+0x0]
c000c304:	83 ec 0c             	sub    esp,0xc
c000c307:	68 41 2b 02 c0       	push   0xc0022b41
c000c30c:	e8 b1 31 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c311:	83 c4 10             	add    esp,0x10
c000c314:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c318:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c31f:	83 ec 0c             	sub    esp,0xc
c000c322:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c325:	e8 52 2e 00 00       	call   c000f17c <malloc>
c000c32a:	83 c4 10             	add    esp,0x10
c000c32d:	89 c3                	mov    ebx,eax
c000c32f:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000c334:	83 ec 04             	sub    esp,0x4
c000c337:	50                   	push   eax
c000c338:	68 5b 2b 02 c0       	push   0xc0022b5b
c000c33d:	53                   	push   ebx
c000c33e:	e8 e9 bd ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c349:	83 ec 08             	sub    esp,0x8
c000c34c:	6a 01                	push   0x1
c000c34e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c351:	e8 f4 bd ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c356:	83 c4 10             	add    esp,0x10
c000c359:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c35c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c360:	75 12                	jne    c000c374 <ACPI::open(int, int, void*)+0xe0>
c000c362:	83 ec 0c             	sub    esp,0xc
c000c365:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c368:	e8 3b be ff ff       	call   c00081a8 <File::close()>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	eb 06                	jmp    c000c378 <ACPI::open(int, int, void*)+0xe4>
c000c372:	66 90                	xchg   ax,ax
c000c374:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c378:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c37c:	74 16                	je     c000c394 <ACPI::open(int, int, void*)+0x100>
c000c37e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c381:	8b 00                	mov    eax,DWORD PTR [eax]
c000c383:	83 c0 08             	add    eax,0x8
c000c386:	8b 00                	mov    eax,DWORD PTR [eax]
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c38e:	ff d0                	call   eax
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	90                   	nop
c000c394:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c397:	83 f0 01             	xor    eax,0x1
c000c39a:	0f b6 c0             	movzx  eax,al
c000c39d:	85 c0                	test   eax,eax
c000c39f:	74 27                	je     c000c3c8 <ACPI::open(int, int, void*)+0x134>
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	68 79 2b 02 c0       	push   0xc0022b79
c000c3a9:	e8 85 04 00 00       	call   c000c833 <KeSetBootMessage(char const*)>
c000c3ae:	83 c4 10             	add    esp,0x10
c000c3b1:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c3be:	e8 ff 66 00 00       	call   c0012ac2 <Virt::setupPageSwapping(int)>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	66 90                	xchg   ax,ax
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	68 94 2b 02 c0       	push   0xc0022b94
c000c3d0:	e8 5e 04 00 00       	call   c000c833 <KeSetBootMessage(char const*)>
c000c3d5:	83 c4 10             	add    esp,0x10
c000c3d8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c3db:	83 ec 08             	sub    esp,0x8
c000c3de:	6a 13                	push   0x13
c000c3e0:	50                   	push   eax
c000c3e1:	e8 da cf ff ff       	call   c00093c0 <getDevicesOfType(DeviceType)>
c000c3e6:	83 c4 0c             	add    esp,0xc
c000c3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3ec:	83 ec 0c             	sub    esp,0xc
c000c3ef:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c3f2:	50                   	push   eax
c000c3f3:	e8 24 4c 01 00       	call   c002101c <LinkedList<Device>::isEmpty()>
c000c3f8:	83 c4 10             	add    esp,0x10
c000c3fb:	83 f0 01             	xor    eax,0x1
c000c3fe:	0f b6 c0             	movzx  eax,al
c000c401:	85 c0                	test   eax,eax
c000c403:	0f 84 1f 01 00 00    	je     c000c528 <ACPI::open(int, int, void*)+0x294>
c000c409:	83 ec 0c             	sub    esp,0xc
c000c40c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c40f:	50                   	push   eax
c000c410:	e8 23 4c 01 00       	call   c0021038 <LinkedList<Device>::getFirstElement()>
c000c415:	83 c4 10             	add    esp,0x10
c000c418:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c41b:	83 ec 0c             	sub    esp,0xc
c000c41e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c421:	50                   	push   eax
c000c422:	e8 19 4c 01 00       	call   c0021040 <LinkedList<Device>::removeFirst()>
c000c427:	83 c4 10             	add    esp,0x10
c000c42a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c42d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c430:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c433:	b8 24 00 00 00       	mov    eax,0x24
c000c438:	83 e0 fc             	and    eax,0xfffffffc
c000c43b:	89 c3                	mov    ebx,eax
c000c43d:	b8 00 00 00 00       	mov    eax,0x0
c000c442:	66 90                	xchg   ax,ax
c000c444:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c44b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c452:	83 c0 04             	add    eax,0x4
c000c455:	39 d8                	cmp    eax,ebx
c000c457:	72 eb                	jb     c000c444 <ACPI::open(int, int, void*)+0x1b0>
c000c459:	83 ec 08             	sub    esp,0x8
c000c45c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c462:	50                   	push   eax
c000c463:	83 ec 24             	sub    esp,0x24
c000c466:	89 e1                	mov    ecx,esp
c000c468:	b8 24 00 00 00       	mov    eax,0x24
c000c46d:	83 e0 fc             	and    eax,0xfffffffc
c000c470:	89 c3                	mov    ebx,eax
c000c472:	b8 00 00 00 00       	mov    eax,0x0
c000c477:	90                   	nop
c000c478:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c47f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c482:	83 c0 04             	add    eax,0x4
c000c485:	39 d8                	cmp    eax,ebx
c000c487:	72 ef                	jb     c000c478 <ACPI::open(int, int, void*)+0x1e4>
c000c489:	e8 68 07 01 00       	call   c001cbf6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c48e:	83 c4 30             	add    esp,0x30
c000c491:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c494:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c498:	0f 84 4e ff ff ff    	je     c000c3ec <ACPI::open(int, int, void*)+0x158>
c000c49e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c4a5:	83 ec 0c             	sub    esp,0xc
c000c4a8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c4ab:	e8 cc 2c 00 00       	call   c000f17c <malloc>
c000c4b0:	83 c4 10             	add    esp,0x10
c000c4b3:	89 c3                	mov    ebx,eax
c000c4b5:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000c4ba:	83 ec 04             	sub    esp,0x4
c000c4bd:	50                   	push   eax
c000c4be:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c4c1:	53                   	push   ebx
c000c4c2:	e8 65 bc ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c4c7:	83 c4 10             	add    esp,0x10
c000c4ca:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c4cd:	83 ec 0c             	sub    esp,0xc
c000c4d0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c4d3:	e8 36 bf ff ff       	call   c000840e <File::exists()>
c000c4d8:	83 c4 10             	add    esp,0x10
c000c4db:	0f b6 c0             	movzx  eax,al
c000c4de:	85 c0                	test   eax,eax
c000c4e0:	74 22                	je     c000c504 <ACPI::open(int, int, void*)+0x270>
c000c4e2:	83 ec 08             	sub    esp,0x8
c000c4e5:	6a 01                	push   0x1
c000c4e7:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c4ea:	e8 e6 90 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c000c4ef:	83 c4 10             	add    esp,0x10
c000c4f2:	83 ec 08             	sub    esp,0x8
c000c4f5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c4f8:	50                   	push   eax
c000c4f9:	e8 38 93 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c000c4fe:	83 c4 10             	add    esp,0x10
c000c501:	8d 76 00             	lea    esi,[esi+0x0]
c000c504:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c508:	0f 84 de fe ff ff    	je     c000c3ec <ACPI::open(int, int, void*)+0x158>
c000c50e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c511:	8b 00                	mov    eax,DWORD PTR [eax]
c000c513:	83 c0 08             	add    eax,0x8
c000c516:	8b 00                	mov    eax,DWORD PTR [eax]
c000c518:	83 ec 0c             	sub    esp,0xc
c000c51b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c51e:	ff d0                	call   eax
c000c520:	83 c4 10             	add    esp,0x10
c000c523:	e9 c4 fe ff ff       	jmp    c000c3ec <ACPI::open(int, int, void*)+0x158>
c000c528:	83 ec 0c             	sub    esp,0xc
c000c52b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c52e:	50                   	push   eax
c000c52f:	e8 e4 4a 01 00       	call   c0021018 <LinkedList<Device>::~LinkedList()>
c000c534:	83 c4 10             	add    esp,0x10
c000c537:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c53d:	83 ec 08             	sub    esp,0x8
c000c540:	6a 01                	push   0x1
c000c542:	68 ae 2b 02 c0       	push   0xc0022bae
c000c547:	e8 89 90 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	83 ec 08             	sub    esp,0x8
c000c552:	53                   	push   ebx
c000c553:	50                   	push   eax
c000c554:	e8 dd 92 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c000c559:	83 c4 10             	add    esp,0x10
c000c55c:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c561:	85 c0                	test   eax,eax
c000c563:	0f 84 ef 00 00 00    	je     c000c658 <ACPI::open(int, int, void*)+0x3c4>
c000c569:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c56e:	85 c0                	test   eax,eax
c000c570:	0f 84 e2 00 00 00    	je     c000c658 <ACPI::open(int, int, void*)+0x3c4>
c000c576:	83 ec 0c             	sub    esp,0xc
c000c579:	68 cb 2b 02 c0       	push   0xc0022bcb
c000c57e:	e8 b0 02 00 00       	call   c000c833 <KeSetBootMessage(char const*)>
c000c583:	83 c4 10             	add    esp,0x10
c000c586:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c58d:	83 ec 0c             	sub    esp,0xc
c000c590:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c593:	e8 e4 2b 00 00       	call   c000f17c <malloc>
c000c598:	83 c4 10             	add    esp,0x10
c000c59b:	89 c3                	mov    ebx,eax
c000c59d:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000c5a2:	83 ec 04             	sub    esp,0x4
c000c5a5:	50                   	push   eax
c000c5a6:	68 e8 2b 02 c0       	push   0xc0022be8
c000c5ab:	53                   	push   ebx
c000c5ac:	e8 7b bb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c5b1:	83 c4 10             	add    esp,0x10
c000c5b4:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c5b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c5bb:	74 1b                	je     c000c5d8 <ACPI::open(int, int, void*)+0x344>
c000c5bd:	83 ec 0c             	sub    esp,0xc
c000c5c0:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c5c3:	e8 46 be ff ff       	call   c000840e <File::exists()>
c000c5c8:	83 c4 10             	add    esp,0x10
c000c5cb:	0f b6 c0             	movzx  eax,al
c000c5ce:	85 c0                	test   eax,eax
c000c5d0:	74 06                	je     c000c5d8 <ACPI::open(int, int, void*)+0x344>
c000c5d2:	b0 01                	mov    al,0x1
c000c5d4:	eb 06                	jmp    c000c5dc <ACPI::open(int, int, void*)+0x348>
c000c5d6:	66 90                	xchg   ax,ax
c000c5d8:	b0 00                	mov    al,0x0
c000c5da:	66 90                	xchg   ax,ax
c000c5dc:	0f b6 c0             	movzx  eax,al
c000c5df:	85 c0                	test   eax,eax
c000c5e1:	74 21                	je     c000c604 <ACPI::open(int, int, void*)+0x370>
c000c5e3:	83 ec 08             	sub    esp,0x8
c000c5e6:	6a 01                	push   0x1
c000c5e8:	68 e8 2b 02 c0       	push   0xc0022be8
c000c5ed:	e8 e3 8f 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c000c5f2:	83 c4 10             	add    esp,0x10
c000c5f5:	83 ec 08             	sub    esp,0x8
c000c5f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c5fb:	50                   	push   eax
c000c5fc:	e8 35 92 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c608:	74 1e                	je     c000c628 <ACPI::open(int, int, void*)+0x394>
c000c60a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c60e:	74 18                	je     c000c628 <ACPI::open(int, int, void*)+0x394>
c000c610:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c613:	8b 00                	mov    eax,DWORD PTR [eax]
c000c615:	83 c0 08             	add    eax,0x8
c000c618:	8b 00                	mov    eax,DWORD PTR [eax]
c000c61a:	83 ec 0c             	sub    esp,0xc
c000c61d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c620:	ff d0                	call   eax
c000c622:	83 c4 10             	add    esp,0x10
c000c625:	8d 76 00             	lea    esi,[esi+0x0]
c000c628:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c62d:	83 ec 08             	sub    esp,0x8
c000c630:	68 05 2c 02 c0       	push   0xc0022c05
c000c635:	50                   	push   eax
c000c636:	e8 45 f3 ff ff       	call   c000b980 <findDataTable(unsigned char*, char*)>
c000c63b:	83 c4 10             	add    esp,0x10
c000c63e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c641:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c645:	74 11                	je     c000c658 <ACPI::open(int, int, void*)+0x3c4>
c000c647:	83 ec 08             	sub    esp,0x8
c000c64a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c64d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c650:	e8 27 fc ff ff       	call   c000c27c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c655:	83 c4 10             	add    esp,0x10
c000c658:	b8 00 00 00 00       	mov    eax,0x0
c000c65d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c660:	c9                   	leave  
c000c661:	c3                   	ret    
c000c662:	66 90                	xchg   ax,ax

c000c664 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000c664:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000c66a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000c671:	89 c2                	mov    edx,eax
c000c673:	c1 fa 1f             	sar    edx,0x1f
c000c676:	83 ec 04             	sub    esp,0x4
c000c679:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000c67d:	51                   	push   ecx
c000c67e:	52                   	push   edx
c000c67f:	50                   	push   eax
c000c680:	e8 ef 28 00 00       	call   c000ef74 <KeItoa(long long, char*)>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	83 ec 08             	sub    esp,0x8
c000c68b:	68 b0 2c 02 c0       	push   0xc0022cb0
c000c690:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c694:	50                   	push   eax
c000c695:	e8 b6 3f ff ff       	call   c0000650 <strcpy>
c000c69a:	83 c4 10             	add    esp,0x10
c000c69d:	83 ec 08             	sub    esp,0x8
c000c6a0:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000c6a7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c6ab:	50                   	push   eax
c000c6ac:	e8 bf 41 ff ff       	call   c0000870 <strcat>
c000c6b1:	83 c4 10             	add    esp,0x10
c000c6b4:	83 ec 08             	sub    esp,0x8
c000c6b7:	68 be 2c 02 c0       	push   0xc0022cbe
c000c6bc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c6c0:	50                   	push   eax
c000c6c1:	e8 aa 41 ff ff       	call   c0000870 <strcat>
c000c6c6:	83 c4 10             	add    esp,0x10
c000c6c9:	83 ec 08             	sub    esp,0x8
c000c6cc:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000c6d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c6d7:	50                   	push   eax
c000c6d8:	e8 93 41 ff ff       	call   c0000870 <strcat>
c000c6dd:	83 c4 10             	add    esp,0x10
c000c6e0:	83 ec 08             	sub    esp,0x8
c000c6e3:	68 c1 2c 02 c0       	push   0xc0022cc1
c000c6e8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c6ec:	50                   	push   eax
c000c6ed:	e8 7e 41 ff ff       	call   c0000870 <strcat>
c000c6f2:	83 c4 10             	add    esp,0x10
c000c6f5:	83 ec 08             	sub    esp,0x8
c000c6f8:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000c6ff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c703:	50                   	push   eax
c000c704:	e8 67 41 ff ff       	call   c0000870 <strcat>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	83 ec 08             	sub    esp,0x8
c000c70f:	68 c1 2c 02 c0       	push   0xc0022cc1
c000c714:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c718:	50                   	push   eax
c000c719:	e8 52 41 ff ff       	call   c0000870 <strcat>
c000c71e:	83 c4 10             	add    esp,0x10
c000c721:	83 ec 08             	sub    esp,0x8
c000c724:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c728:	50                   	push   eax
c000c729:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c72d:	50                   	push   eax
c000c72e:	e8 3d 41 ff ff       	call   c0000870 <strcat>
c000c733:	83 c4 10             	add    esp,0x10
c000c736:	83 ec 0c             	sub    esp,0xc
c000c739:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c73d:	50                   	push   eax
c000c73e:	e8 7f 2d 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c743:	83 c4 10             	add    esp,0x10
c000c746:	90                   	nop
c000c747:	81 c4 2c 02 00 00    	add    esp,0x22c
c000c74d:	c3                   	ret    

c000c74e <KeInitialiseAtexit()>:
c000c74e:	83 ec 10             	sub    esp,0x10
c000c751:	6a 60                	push   0x60
c000c753:	6a 00                	push   0x0
c000c755:	68 00 ad 02 c0       	push   0xc002ad00
c000c75a:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c764:	e8 87 3d ff ff       	call   c00004f0 <memset>
c000c769:	83 c4 1c             	add    esp,0x1c
c000c76c:	c3                   	ret    

c000c76d <KeRegisterAtexit(void (*)(void*), void*)>:
c000c76d:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c772:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c776:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c77d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c781:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c788:	40                   	inc    eax
c000c789:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c78e:	83 f8 17             	cmp    eax,0x17
c000c791:	7e 0d                	jle    c000c7a0 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c793:	c7 44 24 04 c3 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022cc3
c000c79b:	e9 22 2d 00 00       	jmp    c000f4c2 <KePanic(char const*)>
c000c7a0:	c3                   	ret    

c000c7a1 <KeExecuteAtexit()>:
c000c7a1:	53                   	push   ebx
c000c7a2:	31 db                	xor    ebx,ebx
c000c7a4:	83 ec 08             	sub    esp,0x8
c000c7a7:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c7ad:	7e 50                	jle    c000c7ff <KeExecuteAtexit()+0x5e>
c000c7af:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c7b6:	85 c0                	test   eax,eax
c000c7b8:	74 42                	je     c000c7fc <KeExecuteAtexit()+0x5b>
c000c7ba:	51                   	push   ecx
c000c7bb:	50                   	push   eax
c000c7bc:	53                   	push   ebx
c000c7bd:	68 dc 2c 02 c0       	push   0xc0022cdc
c000c7c2:	e8 87 a7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c7c7:	58                   	pop    eax
c000c7c8:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c7cf:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c7d6:	c7 04 24 fe 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cfe
c000c7dd:	e8 6c a7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c7e2:	c7 04 24 8f 30 02 c0 	mov    DWORD PTR [esp],0xc002308f
c000c7e9:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c7f4:	e8 55 a7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c7f9:	83 c4 10             	add    esp,0x10
c000c7fc:	43                   	inc    ebx
c000c7fd:	eb a8                	jmp    c000c7a7 <KeExecuteAtexit()+0x6>
c000c7ff:	83 c4 08             	add    esp,0x8
c000c802:	5b                   	pop    ebx
c000c803:	c3                   	ret    

c000c804 <KeDisplaySplashScreen()>:
c000c804:	53                   	push   ebx
c000c805:	bb 01 00 00 00       	mov    ebx,0x1
c000c80a:	83 ec 08             	sub    esp,0x8
c000c80d:	43                   	inc    ebx
c000c80e:	0f be 83 01 2d 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdd2ff]
c000c815:	85 c0                	test   eax,eax
c000c817:	74 15                	je     c000c82e <KeDisplaySplashScreen()+0x2a>
c000c819:	83 ec 0c             	sub    esp,0xc
c000c81c:	6a 01                	push   0x1
c000c81e:	53                   	push   ebx
c000c81f:	6a 00                	push   0x0
c000c821:	6a 0f                	push   0xf
c000c823:	50                   	push   eax
c000c824:	e8 97 da 00 00       	call   c001a2c0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c829:	83 c4 20             	add    esp,0x20
c000c82c:	eb df                	jmp    c000c80d <KeDisplaySplashScreen()+0x9>
c000c82e:	83 c4 08             	add    esp,0x8
c000c831:	5b                   	pop    ebx
c000c832:	c3                   	ret    

c000c833 <KeSetBootMessage(char const*)>:
c000c833:	57                   	push   edi
c000c834:	56                   	push   esi
c000c835:	53                   	push   ebx
c000c836:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c83c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c843:	68 9e 00 00 00       	push   0x9e
c000c848:	6a 00                	push   0x0
c000c84a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c84e:	56                   	push   esi
c000c84f:	e8 9c 3c ff ff       	call   c00004f0 <memset>
c000c854:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c857:	e8 24 3d ff ff       	call   c0000580 <strlen>
c000c85c:	ba 50 00 00 00       	mov    edx,0x50
c000c861:	83 c4 10             	add    esp,0x10
c000c864:	31 c9                	xor    ecx,ecx
c000c866:	29 c2                	sub    edx,eax
c000c868:	83 e2 fe             	and    edx,0xfffffffe
c000c86b:	01 f2                	add    edx,esi
c000c86d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c872:	84 c0                	test   al,al
c000c874:	74 0a                	je     c000c880 <KeSetBootMessage(char const*)+0x4d>
c000c876:	80 cc 07             	or     ah,0x7
c000c879:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c87d:	41                   	inc    ecx
c000c87e:	eb ed                	jmp    c000c86d <KeSetBootMessage(char const*)+0x3a>
c000c880:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c885:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c88a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c88c:	50                   	push   eax
c000c88d:	50                   	push   eax
c000c88e:	53                   	push   ebx
c000c88f:	68 16 2d 02 c0       	push   0xc0022d16
c000c894:	e8 b5 a6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c899:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c89f:	5b                   	pop    ebx
c000c8a0:	5e                   	pop    esi
c000c8a1:	5f                   	pop    edi
c000c8a2:	c3                   	ret    

c000c8a3 <__cxa_atexit>:
c000c8a3:	31 c0                	xor    eax,eax
c000c8a5:	c3                   	ret    

c000c8a6 <__cxa_finalize>:
c000c8a6:	c3                   	ret    

c000c8a7 <__stack_chk_fail>:
c000c8a7:	55                   	push   ebp
c000c8a8:	89 e5                	mov    ebp,esp
c000c8aa:	83 ec 10             	sub    esp,0x10
c000c8ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c8b0:	68 24 2d 02 c0       	push   0xc0022d24
c000c8b5:	e8 94 a6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c8ba:	58                   	pop    eax
c000c8bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8be:	5a                   	pop    edx
c000c8bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c8c2:	68 24 2d 02 c0       	push   0xc0022d24
c000c8c7:	e8 82 a6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c8cc:	c7 04 24 2c 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d2c
c000c8d3:	e8 ea 2b 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	c9                   	leave  
c000c8dc:	c3                   	ret    

c000c8dd <__cxa_pure_virtual>:
c000c8dd:	83 ec 18             	sub    esp,0x18
c000c8e0:	68 44 2d 02 c0       	push   0xc0022d44
c000c8e5:	e8 d8 2b 00 00       	call   c000f4c2 <KePanic(char const*)>
c000c8ea:	83 c4 1c             	add    esp,0x1c
c000c8ed:	c3                   	ret    

c000c8ee <operator new[](unsigned long)>:
c000c8ee:	e9 89 28 00 00       	jmp    c000f17c <malloc>

c000c8f3 <operator delete(void*, unsigned long)>:
c000c8f3:	e9 a4 28 00 00       	jmp    c000f19c <rfree>

c000c8f8 <operator delete[](void*)>:
c000c8f8:	e9 9f 28 00 00       	jmp    c000f19c <rfree>

c000c8fd <operator delete[](void*, unsigned long)>:
c000c8fd:	e9 9a 28 00 00       	jmp    c000f19c <rfree>
c000c902:	66 90                	xchg   ax,ax

c000c904 <CUnlockScheduler>:
c000c904:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000c90c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000c911:	85 c0                	test   eax,eax
c000c913:	75 03                	jne    c000c918 <CUnlockScheduler+0x14>
c000c915:	fb                   	sti    
c000c916:	66 90                	xchg   ax,ax
c000c918:	90                   	nop
c000c919:	c3                   	ret    
c000c91a:	66 90                	xchg   ax,ax

c000c91c <CLockScheduler>:
c000c91c:	fa                   	cli    
c000c91d:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000c922:	83 c0 01             	add    eax,0x1
c000c925:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000c92a:	90                   	nop
c000c92b:	c3                   	ret    

c000c92c <CPrintf>:
c000c92c:	83 ec 0c             	sub    esp,0xc
c000c92f:	83 ec 08             	sub    esp,0x8
c000c932:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c936:	68 57 2d 02 c0       	push   0xc0022d57
c000c93b:	e8 0e a6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c940:	83 c4 10             	add    esp,0x10
c000c943:	90                   	nop
c000c944:	83 c4 0c             	add    esp,0xc
c000c947:	c3                   	ret    

c000c948 <CmOpen(char const*)>:
c000c948:	57                   	push   edi
c000c949:	56                   	push   esi
c000c94a:	53                   	push   ebx
c000c94b:	83 ec 1c             	sub    esp,0x1c
c000c94e:	6a 30                	push   0x30
c000c950:	e8 27 28 00 00       	call   c000f17c <malloc>
c000c955:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c95c:	89 c3                	mov    ebx,eax
c000c95e:	e8 19 28 00 00       	call   c000f17c <malloc>
c000c963:	83 c4 0c             	add    esp,0xc
c000c966:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000c96c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c970:	89 c6                	mov    esi,eax
c000c972:	50                   	push   eax
c000c973:	e8 b4 b7 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c978:	83 c4 0c             	add    esp,0xc
c000c97b:	89 33                	mov    DWORD PTR [ebx],esi
c000c97d:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c981:	50                   	push   eax
c000c982:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c986:	50                   	push   eax
c000c987:	56                   	push   esi
c000c988:	e8 bf ba ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000c98d:	5a                   	pop    edx
c000c98e:	59                   	pop    ecx
c000c98f:	6a 01                	push   0x1
c000c991:	ff 33                	push   DWORD PTR [ebx]
c000c993:	e8 b2 b7 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c998:	5e                   	pop    esi
c000c999:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c99d:	e8 da 27 00 00       	call   c000f17c <malloc>
c000c9a2:	5a                   	pop    edx
c000c9a3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c9a7:	89 c7                	mov    edi,eax
c000c9a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9ad:	56                   	push   esi
c000c9ae:	57                   	push   edi
c000c9af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c9b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c9b7:	50                   	push   eax
c000c9b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c9bb:	83 c4 14             	add    esp,0x14
c000c9be:	ff 33                	push   DWORD PTR [ebx]
c000c9c0:	e8 e3 b7 ff ff       	call   c00081a8 <File::close()>
c000c9c5:	59                   	pop    ecx
c000c9c6:	58                   	pop    eax
c000c9c7:	6a 13                	push   0x13
c000c9c9:	ff 33                	push   DWORD PTR [ebx]
c000c9cb:	e8 7a b7 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c9d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9d4:	89 34 24             	mov    DWORD PTR [esp],esi
c000c9d7:	57                   	push   edi
c000c9d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c9dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c9e0:	50                   	push   eax
c000c9e1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9e4:	83 c4 14             	add    esp,0x14
c000c9e7:	57                   	push   edi
c000c9e8:	e8 9f 27 00 00       	call   c000f18c <free>
c000c9ed:	83 c4 10             	add    esp,0x10
c000c9f0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9f3:	75 10                	jne    c000ca05 <CmOpen(char const*)+0xbd>
c000c9f5:	83 ec 0c             	sub    esp,0xc
c000c9f8:	68 5a 2d 02 c0       	push   0xc0022d5a
c000c9fd:	e8 c0 2a 00 00       	call   c000f4c2 <KePanic(char const*)>
c000ca02:	83 c4 10             	add    esp,0x10
c000ca05:	50                   	push   eax
c000ca06:	6a 00                	push   0x0
c000ca08:	6a 00                	push   0x0
c000ca0a:	ff 33                	push   DWORD PTR [ebx]
c000ca0c:	8d 7b 05             	lea    edi,[ebx+0x5]
c000ca0f:	e8 f4 b7 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ca14:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca16:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca18:	89 34 24             	mov    DWORD PTR [esp],esi
c000ca1b:	57                   	push   edi
c000ca1c:	6a 00                	push   0x0
c000ca1e:	6a 2b                	push   0x2b
c000ca20:	50                   	push   eax
c000ca21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca24:	83 c4 1c             	add    esp,0x1c
c000ca27:	6a 00                	push   0x0
c000ca29:	6a 00                	push   0x0
c000ca2b:	ff 33                	push   DWORD PTR [ebx]
c000ca2d:	e8 d6 b7 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ca32:	83 c4 0c             	add    esp,0xc
c000ca35:	6a 08                	push   0x8
c000ca37:	68 6b 2d 02 c0       	push   0xc0022d6b
c000ca3c:	57                   	push   edi
c000ca3d:	e8 3e 39 ff ff       	call   c0000380 <memcmp>
c000ca42:	83 c4 10             	add    esp,0x10
c000ca45:	85 c0                	test   eax,eax
c000ca47:	74 10                	je     c000ca59 <CmOpen(char const*)+0x111>
c000ca49:	83 ec 0c             	sub    esp,0xc
c000ca4c:	68 74 2d 02 c0       	push   0xc0022d74
c000ca51:	e8 6c 2a 00 00       	call   c000f4c2 <KePanic(char const*)>
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	89 d8                	mov    eax,ebx
c000ca62:	5b                   	pop    ebx
c000ca63:	5e                   	pop    esi
c000ca64:	5f                   	pop    edi
c000ca65:	c3                   	ret    

c000ca66 <CmClose(Reghive_Tag*)>:
c000ca66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca6a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ca6e:	74 0b                	je     c000ca7b <CmClose(Reghive_Tag*)+0x15>
c000ca70:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca76:	e9 2d b7 ff ff       	jmp    c00081a8 <File::close()>
c000ca7b:	c3                   	ret    

c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000ca7c:	53                   	push   ebx
c000ca7d:	83 ec 18             	sub    esp,0x18
c000ca80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca84:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca88:	74 29                	je     c000cab3 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000ca8a:	50                   	push   eax
c000ca8b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000ca90:	99                   	cdq    
c000ca91:	52                   	push   edx
c000ca92:	50                   	push   eax
c000ca93:	ff 33                	push   DWORD PTR [ebx]
c000ca95:	e8 6e b7 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ca9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca9c:	5a                   	pop    edx
c000ca9d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000caa1:	8b 10                	mov    edx,DWORD PTR [eax]
c000caa3:	51                   	push   ecx
c000caa4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000caa8:	6a 00                	push   0x0
c000caaa:	6a 2b                	push   0x2b
c000caac:	50                   	push   eax
c000caad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cab0:	83 c4 20             	add    esp,0x20
c000cab3:	83 c4 18             	add    esp,0x18
c000cab6:	5b                   	pop    ebx
c000cab7:	c3                   	ret    

c000cab8 <CmGetString(Reghive_Tag*, int, char*)>:
c000cab8:	55                   	push   ebp
c000cab9:	57                   	push   edi
c000caba:	56                   	push   esi
c000cabb:	53                   	push   ebx
c000cabc:	31 db                	xor    ebx,ebx
c000cabe:	83 ec 70             	sub    esp,0x70
c000cac1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000cac5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000cacc:	50                   	push   eax
c000cacd:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000cad4:	55                   	push   ebp
c000cad5:	e8 a2 ff ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cada:	83 c4 10             	add    esp,0x10
c000cadd:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000cae2:	c1 e0 08             	shl    eax,0x8
c000cae5:	89 c2                	mov    edx,eax
c000cae7:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000caec:	09 d0                	or     eax,edx
c000caee:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000caf3:	c1 e0 08             	shl    eax,0x8
c000caf6:	09 d0                	or     eax,edx
c000caf8:	74 25                	je     c000cb1f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000cafa:	52                   	push   edx
c000cafb:	8d 54 24 39          	lea    edx,[esp+0x39]
c000caff:	52                   	push   edx
c000cb00:	6b fb 0d             	imul   edi,ebx,0xd
c000cb03:	50                   	push   eax
c000cb04:	55                   	push   ebp
c000cb05:	e8 72 ff ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb0a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000cb0e:	b9 27 00 00 00       	mov    ecx,0x27
c000cb13:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000cb1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	83 c3 03             	add    ebx,0x3
c000cb22:	83 fb 15             	cmp    ebx,0x15
c000cb25:	75 b6                	jne    c000cadd <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000cb27:	83 c4 6c             	add    esp,0x6c
c000cb2a:	5b                   	pop    ebx
c000cb2b:	5e                   	pop    esi
c000cb2c:	5f                   	pop    edi
c000cb2d:	5d                   	pop    ebp
c000cb2e:	c3                   	ret    

c000cb2f <CmEnterDirectory(Reghive_Tag*, int)>:
c000cb2f:	83 ec 40             	sub    esp,0x40
c000cb32:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cb36:	50                   	push   eax
c000cb37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb3f:	e8 38 ff ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb44:	83 c4 10             	add    esp,0x10
c000cb47:	83 c8 ff             	or     eax,0xffffffff
c000cb4a:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000cb4f:	75 19                	jne    c000cb6a <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000cb51:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cb56:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000cb5b:	c1 e0 08             	shl    eax,0x8
c000cb5e:	09 c2                	or     edx,eax
c000cb60:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000cb65:	c1 e0 10             	shl    eax,0x10
c000cb68:	09 d0                	or     eax,edx
c000cb6a:	83 c4 3c             	add    esp,0x3c
c000cb6d:	c3                   	ret    

c000cb6e <CmGetNext(Reghive_Tag*, int)>:
c000cb6e:	83 ec 40             	sub    esp,0x40
c000cb71:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cb75:	50                   	push   eax
c000cb76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb7a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb7e:	e8 f9 fe ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb83:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000cb88:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000cb8d:	c1 e0 08             	shl    eax,0x8
c000cb90:	09 c2                	or     edx,eax
c000cb92:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000cb97:	83 c4 4c             	add    esp,0x4c
c000cb9a:	c1 e0 10             	shl    eax,0x10
c000cb9d:	09 d0                	or     eax,edx
c000cb9f:	c3                   	ret    

c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000cba0:	53                   	push   ebx
c000cba1:	83 ec 18             	sub    esp,0x18
c000cba4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cba8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cbac:	74 29                	je     c000cbd7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cbae:	50                   	push   eax
c000cbaf:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000cbb4:	99                   	cdq    
c000cbb5:	52                   	push   edx
c000cbb6:	50                   	push   eax
c000cbb7:	ff 33                	push   DWORD PTR [ebx]
c000cbb9:	e8 4a b6 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cbbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cbc0:	5a                   	pop    edx
c000cbc1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cbc5:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbc7:	51                   	push   ecx
c000cbc8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000cbcc:	6a 00                	push   0x0
c000cbce:	6a 2b                	push   0x2b
c000cbd0:	50                   	push   eax
c000cbd1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cbd4:	83 c4 20             	add    esp,0x20
c000cbd7:	83 c4 18             	add    esp,0x18
c000cbda:	5b                   	pop    ebx
c000cbdb:	c3                   	ret    

c000cbdc <CmFreeExtent(Reghive_Tag*, int)>:
c000cbdc:	53                   	push   ebx
c000cbdd:	83 ec 3c             	sub    esp,0x3c
c000cbe0:	6a 2b                	push   0x2b
c000cbe2:	6a 00                	push   0x0
c000cbe4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000cbe8:	53                   	push   ebx
c000cbe9:	e8 02 39 ff ff       	call   c00004f0 <memset>
c000cbee:	83 c4 0c             	add    esp,0xc
c000cbf1:	53                   	push   ebx
c000cbf2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbf6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbfa:	e8 a1 ff ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cbff:	83 c4 48             	add    esp,0x48
c000cc02:	5b                   	pop    ebx
c000cc03:	c3                   	ret    

c000cc04 <CmUpdateHeader(Reghive_Tag*)>:
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc0b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cc0f:	74 10                	je     c000cc21 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000cc11:	52                   	push   edx
c000cc12:	8d 50 05             	lea    edx,[eax+0x5]
c000cc15:	52                   	push   edx
c000cc16:	6a 00                	push   0x0
c000cc18:	50                   	push   eax
c000cc19:	e8 82 ff ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc1e:	83 c4 10             	add    esp,0x10
c000cc21:	83 c4 0c             	add    esp,0xc
c000cc24:	c3                   	ret    

c000cc25 <CmExpand(Reghive_Tag*, int)>:
c000cc25:	55                   	push   ebp
c000cc26:	57                   	push   edi
c000cc27:	83 cf ff             	or     edi,0xffffffff
c000cc2a:	56                   	push   esi
c000cc2b:	53                   	push   ebx
c000cc2c:	83 ec 3c             	sub    esp,0x3c
c000cc2f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cc33:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cc37:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cc3b:	74 59                	je     c000cc96 <CmExpand(Reghive_Tag*, int)+0x71>
c000cc3d:	50                   	push   eax
c000cc3e:	31 d2                	xor    edx,edx
c000cc40:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000cc44:	31 ff                	xor    edi,edi
c000cc46:	52                   	push   edx
c000cc47:	50                   	push   eax
c000cc48:	ff 33                	push   DWORD PTR [ebx]
c000cc4a:	e8 b9 b5 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cc4f:	83 c4 0c             	add    esp,0xc
c000cc52:	6a 2b                	push   0x2b
c000cc54:	6a 00                	push   0x0
c000cc56:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000cc5a:	55                   	push   ebp
c000cc5b:	e8 90 38 ff ff       	call   c00004f0 <memset>
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	39 f7                	cmp    edi,esi
c000cc65:	7d 1b                	jge    c000cc82 <CmExpand(Reghive_Tag*, int)+0x5d>
c000cc67:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc69:	83 ec 0c             	sub    esp,0xc
c000cc6c:	47                   	inc    edi
c000cc6d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000cc71:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc73:	51                   	push   ecx
c000cc74:	55                   	push   ebp
c000cc75:	6a 00                	push   0x0
c000cc77:	6a 2b                	push   0x2b
c000cc79:	50                   	push   eax
c000cc7a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cc7d:	83 c4 20             	add    esp,0x20
c000cc80:	eb e1                	jmp    c000cc63 <CmExpand(Reghive_Tag*, int)+0x3e>
c000cc82:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000cc85:	83 ec 0c             	sub    esp,0xc
c000cc88:	01 fe                	add    esi,edi
c000cc8a:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000cc8d:	53                   	push   ebx
c000cc8e:	e8 71 ff ff ff       	call   c000cc04 <CmUpdateHeader(Reghive_Tag*)>
c000cc93:	83 c4 10             	add    esp,0x10
c000cc96:	83 c4 3c             	add    esp,0x3c
c000cc99:	89 f8                	mov    eax,edi
c000cc9b:	5b                   	pop    ebx
c000cc9c:	5e                   	pop    esi
c000cc9d:	5f                   	pop    edi
c000cc9e:	5d                   	pop    ebp
c000cc9f:	c3                   	ret    

c000cca0 <CmFindUnusedExtent(Reghive_Tag*)>:
c000cca0:	55                   	push   ebp
c000cca1:	57                   	push   edi
c000cca2:	56                   	push   esi
c000cca3:	53                   	push   ebx
c000cca4:	83 cb ff             	or     ebx,0xffffffff
c000cca7:	83 ec 1c             	sub    esp,0x1c
c000ccaa:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ccae:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ccb2:	74 68                	je     c000cd1c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ccb4:	51                   	push   ecx
c000ccb5:	be 2b 00 00 00       	mov    esi,0x2b
c000ccba:	6a 00                	push   0x0
c000ccbc:	31 ff                	xor    edi,edi
c000ccbe:	6a 00                	push   0x0
c000ccc0:	31 db                	xor    ebx,ebx
c000ccc2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ccc5:	e8 3e b5 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ccca:	83 c4 10             	add    esp,0x10
c000cccd:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ccd0:	76 3b                	jbe    c000cd0d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ccd2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccd5:	83 ec 0c             	sub    esp,0xc
c000ccd8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ccdc:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccde:	51                   	push   ecx
c000ccdf:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cce3:	51                   	push   ecx
c000cce4:	6a 00                	push   0x0
c000cce6:	6a 01                	push   0x1
c000cce8:	50                   	push   eax
c000cce9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccec:	83 c4 20             	add    esp,0x20
c000ccef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ccf4:	74 26                	je     c000cd1c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ccf6:	52                   	push   edx
c000ccf7:	43                   	inc    ebx
c000ccf8:	57                   	push   edi
c000ccf9:	56                   	push   esi
c000ccfa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ccfd:	e8 06 b5 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cd02:	83 c6 2b             	add    esi,0x2b
c000cd05:	83 d7 00             	adc    edi,0x0
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	eb c0                	jmp    c000cccd <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cd0d:	50                   	push   eax
c000cd0e:	50                   	push   eax
c000cd0f:	6a 40                	push   0x40
c000cd11:	55                   	push   ebp
c000cd12:	e8 0e ff ff ff       	call   c000cc25 <CmExpand(Reghive_Tag*, int)>
c000cd17:	83 c4 10             	add    esp,0x10
c000cd1a:	89 c3                	mov    ebx,eax
c000cd1c:	83 c4 1c             	add    esp,0x1c
c000cd1f:	89 d8                	mov    eax,ebx
c000cd21:	5b                   	pop    ebx
c000cd22:	5e                   	pop    esi
c000cd23:	5f                   	pop    edi
c000cd24:	5d                   	pop    ebp
c000cd25:	c3                   	ret    

c000cd26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cd26:	55                   	push   ebp
c000cd27:	57                   	push   edi
c000cd28:	56                   	push   esi
c000cd29:	53                   	push   ebx
c000cd2a:	81 ec 88 00 00 00    	sub    esp,0x88
c000cd30:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cd37:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd3e:	e8 5d ff ff ff       	call   c000cca0 <CmFindUnusedExtent(Reghive_Tag*)>
c000cd43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cd47:	83 c4 0c             	add    esp,0xc
c000cd4a:	6a 2b                	push   0x2b
c000cd4c:	6a 00                	push   0x0
c000cd4e:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cd52:	55                   	push   ebp
c000cd53:	e8 98 37 ff ff       	call   c00004f0 <memset>
c000cd58:	83 c4 10             	add    esp,0x10
c000cd5b:	85 db                	test   ebx,ebx
c000cd5d:	74 12                	je     c000cd71 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cd5f:	51                   	push   ecx
c000cd60:	55                   	push   ebp
c000cd61:	53                   	push   ebx
c000cd62:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd69:	e8 0e fd ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd6e:	83 c4 10             	add    esp,0x10
c000cd71:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cd75:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cd7c:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cd81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cd83:	85 db                	test   ebx,ebx
c000cd85:	74 49                	je     c000cdd0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cd87:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cd8c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cd91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd95:	c1 e0 08             	shl    eax,0x8
c000cd98:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cd9e:	09 c8                	or     eax,ecx
c000cda0:	74 11                	je     c000cdb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cda2:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cda6:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cdaa:	c1 e8 10             	shr    eax,0x10
c000cdad:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cdb1:	eb 0f                	jmp    c000cdc2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cdb3:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cdb8:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cdbd:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cdc2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cdc6:	c1 ea 08             	shr    edx,0x8
c000cdc9:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cdce:	eb 0f                	jmp    c000cddf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cdd0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cdd5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cdda:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cddf:	52                   	push   edx
c000cde0:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cde4:	50                   	push   eax
c000cde5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cde9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cdf0:	e8 ab fd ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cdf5:	83 c4 10             	add    esp,0x10
c000cdf8:	85 db                	test   ebx,ebx
c000cdfa:	74 12                	je     c000ce0e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cdfc:	50                   	push   eax
c000cdfd:	55                   	push   ebp
c000cdfe:	53                   	push   ebx
c000cdff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ce06:	e8 95 fd ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce12:	83 c4 7c             	add    esp,0x7c
c000ce15:	5b                   	pop    ebx
c000ce16:	5e                   	pop    esi
c000ce17:	5f                   	pop    edi
c000ce18:	5d                   	pop    ebp
c000ce19:	c3                   	ret    

c000ce1a <CmSetString(Reghive_Tag*, int, char const*)>:
c000ce1a:	55                   	push   ebp
c000ce1b:	57                   	push   edi
c000ce1c:	56                   	push   esi
c000ce1d:	53                   	push   ebx
c000ce1e:	bb 27 00 00 00       	mov    ebx,0x27
c000ce23:	81 ec 88 00 00 00    	sub    esp,0x88
c000ce29:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000ce30:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000ce37:	e8 44 37 ff ff       	call   c0000580 <strlen>
c000ce3c:	8d 48 26             	lea    ecx,[eax+0x26]
c000ce3f:	89 c8                	mov    eax,ecx
c000ce41:	99                   	cdq    
c000ce42:	f7 fb                	idiv   ebx
c000ce44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ce48:	83 c4 10             	add    esp,0x10
c000ce4b:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000ce51:	7e 10                	jle    c000ce63 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000ce53:	83 ec 0c             	sub    esp,0xc
c000ce56:	68 85 2d 02 c0       	push   0xc0022d85
c000ce5b:	e8 62 26 00 00       	call   c000f4c2 <KePanic(char const*)>
c000ce60:	83 c4 10             	add    esp,0x10
c000ce63:	53                   	push   ebx
c000ce64:	31 ed                	xor    ebp,ebp
c000ce66:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000ce6a:	53                   	push   ebx
c000ce6b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ce72:	57                   	push   edi
c000ce73:	e8 04 fc ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce78:	83 c4 10             	add    esp,0x10
c000ce7b:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000ce7f:	89 f0                	mov    eax,esi
c000ce81:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000ce85:	c1 e0 08             	shl    eax,0x8
c000ce88:	09 c6                	or     esi,eax
c000ce8a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000ce8e:	c1 e6 08             	shl    esi,0x8
c000ce91:	09 c6                	or     esi,eax
c000ce93:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000ce97:	7e 72                	jle    c000cf0b <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000ce99:	85 f6                	test   esi,esi
c000ce9b:	75 25                	jne    c000cec2 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000ce9d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cea2:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cea6:	50                   	push   eax
c000cea7:	6a 00                	push   0x0
c000cea9:	6a 00                	push   0x0
c000ceab:	57                   	push   edi
c000ceac:	e8 75 fe ff ff       	call   c000cd26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000ceb7:	89 c6                	mov    esi,eax
c000ceb9:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cebc:	c1 f8 10             	sar    eax,0x10
c000cebf:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cec2:	51                   	push   ecx
c000cec3:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cec7:	52                   	push   edx
c000cec8:	56                   	push   esi
c000cec9:	57                   	push   edi
c000ceca:	e8 ad fb ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cecf:	83 c4 0c             	add    esp,0xc
c000ced2:	6a 27                	push   0x27
c000ced4:	6a 00                	push   0x0
c000ced6:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ceda:	51                   	push   ecx
c000cedb:	e8 10 36 ff ff       	call   c00004f0 <memset>
c000cee0:	6b c5 27             	imul   eax,ebp,0x27
c000cee3:	83 c4 0c             	add    esp,0xc
c000cee6:	6a 27                	push   0x27
c000cee8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000ceef:	50                   	push   eax
c000cef0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cef4:	51                   	push   ecx
c000cef5:	e8 96 37 ff ff       	call   c0000690 <strncpy>
c000cefa:	83 c4 0c             	add    esp,0xc
c000cefd:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cf01:	52                   	push   edx
c000cf02:	56                   	push   esi
c000cf03:	57                   	push   edi
c000cf04:	e8 97 fc ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cf09:	eb 19                	jmp    c000cf24 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000cf0b:	85 f6                	test   esi,esi
c000cf0d:	74 18                	je     c000cf27 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000cf0f:	52                   	push   edx
c000cf10:	52                   	push   edx
c000cf11:	56                   	push   esi
c000cf12:	57                   	push   edi
c000cf13:	e8 c4 fc ff ff       	call   c000cbdc <CmFreeExtent(Reghive_Tag*, int)>
c000cf18:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cf1c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cf20:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	45                   	inc    ebp
c000cf28:	83 c3 03             	add    ebx,0x3
c000cf2b:	83 fd 07             	cmp    ebp,0x7
c000cf2e:	0f 85 47 ff ff ff    	jne    c000ce7b <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cf34:	50                   	push   eax
c000cf35:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cf39:	50                   	push   eax
c000cf3a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cf41:	57                   	push   edi
c000cf42:	e8 59 fc ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cf47:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cf4d:	5b                   	pop    ebx
c000cf4e:	5e                   	pop    esi
c000cf4f:	5f                   	pop    edi
c000cf50:	5d                   	pop    ebp
c000cf51:	c3                   	ret    

c000cf52 <CmGetMatch(char*, char*, bool, bool*)>:
c000cf52:	56                   	push   esi
c000cf53:	53                   	push   ebx
c000cf54:	50                   	push   eax
c000cf55:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cf5a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cf5e:	74 25                	je     c000cf85 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cf60:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cf63:	31 db                	xor    ebx,ebx
c000cf65:	50                   	push   eax
c000cf66:	50                   	push   eax
c000cf67:	8d 04 9d 00 51 02 c0 	lea    eax,[ebx*4-0x3ffdaf00]
c000cf6e:	50                   	push   eax
c000cf6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf73:	e8 08 38 ff ff       	call   c0000780 <strcmp>
c000cf78:	83 c4 10             	add    esp,0x10
c000cf7b:	85 c0                	test   eax,eax
c000cf7d:	74 2e                	je     c000cfad <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cf7f:	43                   	inc    ebx
c000cf80:	83 fb 3f             	cmp    ebx,0x3f
c000cf83:	75 e0                	jne    c000cf65 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cf85:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cf88:	31 db                	xor    ebx,ebx
c000cf8a:	51                   	push   ecx
c000cf8b:	51                   	push   ecx
c000cf8c:	8d 04 9d 00 51 02 c0 	lea    eax,[ebx*4-0x3ffdaf00]
c000cf93:	50                   	push   eax
c000cf94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cf98:	e8 e3 37 ff ff       	call   c0000780 <strcmp>
c000cf9d:	83 c4 10             	add    esp,0x10
c000cfa0:	85 c0                	test   eax,eax
c000cfa2:	74 09                	je     c000cfad <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cfa4:	43                   	inc    ebx
c000cfa5:	83 fb 3f             	cmp    ebx,0x3f
c000cfa8:	75 e0                	jne    c000cf8a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cfaa:	83 cb ff             	or     ebx,0xffffffff
c000cfad:	5a                   	pop    edx
c000cfae:	89 d8                	mov    eax,ebx
c000cfb0:	5b                   	pop    ebx
c000cfb1:	5e                   	pop    esi
c000cfb2:	c3                   	ret    

c000cfb3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cfb3:	55                   	push   ebp
c000cfb4:	31 c0                	xor    eax,eax
c000cfb6:	57                   	push   edi
c000cfb7:	56                   	push   esi
c000cfb8:	53                   	push   ebx
c000cfb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cfbd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfc1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cfc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cfc9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cfcb:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cfce:	83 fd 1f             	cmp    ebp,0x1f
c000cfd1:	7f 0b                	jg     c000cfde <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cfd3:	0f b6 c2             	movzx  eax,dl
c000cfd6:	d3 e0                	shl    eax,cl
c000cfd8:	09 07                	or     DWORD PTR [edi],eax
c000cfda:	b0 01                	mov    al,0x1
c000cfdc:	01 33                	add    DWORD PTR [ebx],esi
c000cfde:	5b                   	pop    ebx
c000cfdf:	5e                   	pop    esi
c000cfe0:	5f                   	pop    edi
c000cfe1:	5d                   	pop    ebp
c000cfe2:	c3                   	ret    

c000cfe3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cfe3:	57                   	push   edi
c000cfe4:	56                   	push   esi
c000cfe5:	53                   	push   ebx
c000cfe6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cfea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cfee:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cff2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cff6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cff8:	7c 17                	jl     c000d011 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cffa:	8b 17                	mov    edx,DWORD PTR [edi]
c000cffc:	b8 01 00 00 00       	mov    eax,0x1
c000d001:	d3 e0                	shl    eax,cl
c000d003:	48                   	dec    eax
c000d004:	21 d0                	and    eax,edx
c000d006:	d3 ea                	shr    edx,cl
c000d008:	89 17                	mov    DWORD PTR [edi],edx
c000d00a:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d00c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d00f:	eb 05                	jmp    c000d016 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d011:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d014:	31 c0                	xor    eax,eax
c000d016:	5b                   	pop    ebx
c000d017:	5e                   	pop    esi
c000d018:	5f                   	pop    edi
c000d019:	c3                   	ret    

c000d01a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d01a:	83 ec 40             	sub    esp,0x40
c000d01d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d021:	50                   	push   eax
c000d022:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d026:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d02a:	e8 4d fa ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d02f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d033:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d037:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d03b:	89 10                	mov    DWORD PTR [eax],edx
c000d03d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d040:	83 c4 4c             	add    esp,0x4c
c000d043:	c3                   	ret    

c000d044 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d044:	55                   	push   ebp
c000d045:	57                   	push   edi
c000d046:	56                   	push   esi
c000d047:	53                   	push   ebx
c000d048:	83 ec 40             	sub    esp,0x40
c000d04b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d04f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d053:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d057:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d05b:	53                   	push   ebx
c000d05c:	56                   	push   esi
c000d05d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d061:	e8 16 fa ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d066:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d06a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d06e:	83 c4 0c             	add    esp,0xc
c000d071:	53                   	push   ebx
c000d072:	56                   	push   esi
c000d073:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d077:	e8 24 fb ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d07c:	83 c4 4c             	add    esp,0x4c
c000d07f:	5b                   	pop    ebx
c000d080:	5e                   	pop    esi
c000d081:	5f                   	pop    edi
c000d082:	5d                   	pop    ebp
c000d083:	c3                   	ret    

c000d084 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d084:	55                   	push   ebp
c000d085:	57                   	push   edi
c000d086:	56                   	push   esi
c000d087:	31 f6                	xor    esi,esi
c000d089:	53                   	push   ebx
c000d08a:	31 db                	xor    ebx,ebx
c000d08c:	83 ec 40             	sub    esp,0x40
c000d08f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d097:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d09f:	6a 12                	push   0x12
c000d0a1:	68 ee 00 00 00       	push   0xee
c000d0a6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d0aa:	e8 41 34 ff ff       	call   c00004f0 <memset>
c000d0af:	83 c4 10             	add    esp,0x10
c000d0b2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000d0b6:	6a 08                	push   0x8
c000d0b8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d0bc:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000d0c0:	50                   	push   eax
c000d0c1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d0c5:	55                   	push   ebp
c000d0c6:	57                   	push   edi
c000d0c7:	e8 e7 fe ff ff       	call   c000cfb3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d0cc:	83 c4 10             	add    esp,0x10
c000d0cf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d0d3:	50                   	push   eax
c000d0d4:	6a 06                	push   0x6
c000d0d6:	55                   	push   ebp
c000d0d7:	57                   	push   edi
c000d0d8:	e8 06 ff ff ff       	call   c000cfe3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d0dd:	83 c4 10             	add    esp,0x10
c000d0e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d0e5:	74 07                	je     c000d0ee <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000d0e7:	46                   	inc    esi
c000d0e8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000d0ec:	eb e1                	jmp    c000d0cf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000d0ee:	43                   	inc    ebx
c000d0ef:	83 fb 12             	cmp    ebx,0x12
c000d0f2:	75 c2                	jne    c000d0b6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000d0f4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d0f8:	31 f6                	xor    esi,esi
c000d0fa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d0fd:	50                   	push   eax
c000d0fe:	50                   	push   eax
c000d0ff:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000d104:	46                   	inc    esi
c000d105:	8d 04 85 00 51 02 c0 	lea    eax,[eax*4-0x3ffdaf00]
c000d10c:	50                   	push   eax
c000d10d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d111:	e8 5a 37 ff ff       	call   c0000870 <strcat>
c000d116:	83 c4 10             	add    esp,0x10
c000d119:	83 fe 18             	cmp    esi,0x18
c000d11c:	75 df                	jne    c000d0fd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000d11e:	83 c4 3c             	add    esp,0x3c
c000d121:	31 c0                	xor    eax,eax
c000d123:	5b                   	pop    ebx
c000d124:	5e                   	pop    esi
c000d125:	5f                   	pop    edi
c000d126:	5d                   	pop    ebp
c000d127:	c3                   	ret    

c000d128 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000d128:	83 ec 40             	sub    esp,0x40
c000d12b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d12f:	50                   	push   eax
c000d130:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d134:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d138:	e8 3f f9 ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d13d:	58                   	pop    eax
c000d13e:	5a                   	pop    edx
c000d13f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000d143:	8d 44 24 15          	lea    eax,[esp+0x15]
c000d147:	50                   	push   eax
c000d148:	e8 37 ff ff ff       	call   c000d084 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000d14d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000d152:	83 c4 4c             	add    esp,0x4c
c000d155:	c3                   	ret    

c000d156 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000d156:	55                   	push   ebp
c000d157:	57                   	push   edi
c000d158:	56                   	push   esi
c000d159:	53                   	push   ebx
c000d15a:	31 db                	xor    ebx,ebx
c000d15c:	83 ec 70             	sub    esp,0x70
c000d15f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000d166:	6a 30                	push   0x30
c000d168:	6a 00                	push   0x0
c000d16a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000d16e:	56                   	push   esi
c000d16f:	e8 7c 33 ff ff       	call   c00004f0 <memset>
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	83 ec 0c             	sub    esp,0xc
c000d17a:	57                   	push   edi
c000d17b:	e8 00 34 ff ff       	call   c0000580 <strlen>
c000d180:	83 c4 10             	add    esp,0x10
c000d183:	39 d8                	cmp    eax,ebx
c000d185:	76 16                	jbe    c000d19d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000d187:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000d18b:	83 ec 0c             	sub    esp,0xc
c000d18e:	50                   	push   eax
c000d18f:	e8 cc 37 ff ff       	call   c0000960 <toupper>
c000d194:	83 c4 10             	add    esp,0x10
c000d197:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000d19a:	43                   	inc    ebx
c000d19b:	eb da                	jmp    c000d177 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000d19d:	52                   	push   edx
c000d19e:	31 db                	xor    ebx,ebx
c000d1a0:	6a 18                	push   0x18
c000d1a2:	31 ff                	xor    edi,edi
c000d1a4:	6a 3f                	push   0x3f
c000d1a6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d1aa:	50                   	push   eax
c000d1ab:	e8 40 33 ff ff       	call   c00004f0 <memset>
c000d1b0:	83 c4 10             	add    esp,0x10
c000d1b3:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000d1b7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d1bb:	84 c0                	test   al,al
c000d1bd:	0f 84 af 00 00 00    	je     c000d272 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000d1c3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000d1c7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d1ca:	83 ec 0c             	sub    esp,0xc
c000d1cd:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000d1d2:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000d1d6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000d1da:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000d1df:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000d1e3:	56                   	push   esi
c000d1e4:	e8 97 33 ff ff       	call   c0000580 <strlen>
c000d1e9:	83 c4 10             	add    esp,0x10
c000d1ec:	85 c0                	test   eax,eax
c000d1ee:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d1f2:	74 0b                	je     c000d1ff <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d1f4:	50                   	push   eax
c000d1f5:	6a 01                	push   0x1
c000d1f7:	56                   	push   esi
c000d1f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d1fc:	50                   	push   eax
c000d1fd:	eb 0a                	jmp    c000d209 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d1ff:	50                   	push   eax
c000d200:	6a 00                	push   0x0
c000d202:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d206:	50                   	push   eax
c000d207:	6a 00                	push   0x0
c000d209:	e8 44 fd ff ff       	call   c000cf52 <CmGetMatch(char*, char*, bool, bool*)>
c000d20e:	83 c4 10             	add    esp,0x10
c000d211:	83 f8 ff             	cmp    eax,0xffffffff
c000d214:	75 1a                	jne    c000d230 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d216:	83 ec 0c             	sub    esp,0xc
c000d219:	68 9a 2d 02 c0       	push   0xc0022d9a
c000d21e:	e8 9f 22 00 00       	call   c000f4c2 <KePanic(char const*)>
c000d223:	83 c4 10             	add    esp,0x10
c000d226:	b8 02 00 00 00       	mov    eax,0x2
c000d22b:	e9 bb 00 00 00       	jmp    c000d2eb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d230:	83 ff 18             	cmp    edi,0x18
c000d233:	75 1a                	jne    c000d24f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d235:	83 ec 0c             	sub    esp,0xc
c000d238:	68 af 2d 02 c0       	push   0xc0022daf
c000d23d:	e8 80 22 00 00       	call   c000f4c2 <KePanic(char const*)>
c000d242:	83 c4 10             	add    esp,0x10
c000d245:	b8 01 00 00 00       	mov    eax,0x1
c000d24a:	e9 9c 00 00 00       	jmp    c000d2eb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d24f:	47                   	inc    edi
c000d250:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d255:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d259:	0f 45 dd             	cmovne ebx,ebp
c000d25c:	83 ec 0c             	sub    esp,0xc
c000d25f:	56                   	push   esi
c000d260:	e8 1b 33 ff ff       	call   c0000580 <strlen>
c000d265:	83 c4 10             	add    esp,0x10
c000d268:	85 c0                	test   eax,eax
c000d26a:	74 06                	je     c000d272 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000d26c:	43                   	inc    ebx
c000d26d:	e9 41 ff ff ff       	jmp    c000d1b3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d272:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d27a:	31 db                	xor    ebx,ebx
c000d27c:	31 ff                	xor    edi,edi
c000d27e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d286:	50                   	push   eax
c000d287:	6a 12                	push   0x12
c000d289:	68 ee 00 00 00       	push   0xee
c000d28e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d295:	e8 56 32 ff ff       	call   c00004f0 <memset>
c000d29a:	83 c4 10             	add    esp,0x10
c000d29d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d2a1:	83 fb 17             	cmp    ebx,0x17
c000d2a4:	7e 26                	jle    c000d2cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d2a6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d2aa:	50                   	push   eax
c000d2ab:	6a 08                	push   0x8
c000d2ad:	55                   	push   ebp
c000d2ae:	56                   	push   esi
c000d2af:	e8 2f fd ff ff       	call   c000cfe3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d2b4:	83 c4 10             	add    esp,0x10
c000d2b7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d2bc:	74 26                	je     c000d2e4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d2be:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d2c5:	4b                   	dec    ebx
c000d2c6:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d2c9:	47                   	inc    edi
c000d2ca:	eb 1c                	jmp    c000d2e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d2cc:	6a 06                	push   0x6
c000d2ce:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d2d3:	50                   	push   eax
c000d2d4:	55                   	push   ebp
c000d2d5:	56                   	push   esi
c000d2d6:	e8 d8 fc ff ff       	call   c000cfb3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d2db:	83 c4 10             	add    esp,0x10
c000d2de:	84 c0                	test   al,al
c000d2e0:	75 06                	jne    c000d2e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d2e2:	eb c2                	jmp    c000d2a6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d2e4:	31 c0                	xor    eax,eax
c000d2e6:	eb 03                	jmp    c000d2eb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d2e8:	43                   	inc    ebx
c000d2e9:	eb b2                	jmp    c000d29d <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d2eb:	83 c4 6c             	add    esp,0x6c
c000d2ee:	5b                   	pop    ebx
c000d2ef:	5e                   	pop    esi
c000d2f0:	5f                   	pop    edi
c000d2f1:	5d                   	pop    ebp
c000d2f2:	c3                   	ret    

c000d2f3 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d2f3:	53                   	push   ebx
c000d2f4:	83 ec 3c             	sub    esp,0x3c
c000d2f7:	6a 2b                	push   0x2b
c000d2f9:	6a 00                	push   0x0
c000d2fb:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d2ff:	53                   	push   ebx
c000d300:	e8 eb 31 ff ff       	call   c00004f0 <memset>
c000d305:	58                   	pop    eax
c000d306:	5a                   	pop    edx
c000d307:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d310:	e8 41 fe ff ff       	call   c000d156 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d315:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d31a:	83 c4 0c             	add    esp,0xc
c000d31d:	6a 15                	push   0x15
c000d31f:	6a 00                	push   0x0
c000d321:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d325:	50                   	push   eax
c000d326:	e8 c5 31 ff ff       	call   c00004f0 <memset>
c000d32b:	53                   	push   ebx
c000d32c:	6a 00                	push   0x0
c000d32e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d332:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d336:	e8 eb f9 ff ff       	call   c000cd26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d33b:	83 c4 58             	add    esp,0x58
c000d33e:	5b                   	pop    ebx
c000d33f:	c3                   	ret    

c000d340 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d340:	56                   	push   esi
c000d341:	53                   	push   ebx
c000d342:	83 ec 48             	sub    esp,0x48
c000d345:	6a 12                	push   0x12
c000d347:	68 ff 00 00 00       	push   0xff
c000d34c:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d350:	56                   	push   esi
c000d351:	e8 9a 31 ff ff       	call   c00004f0 <memset>
c000d356:	5a                   	pop    edx
c000d357:	59                   	pop    ecx
c000d358:	56                   	push   esi
c000d359:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d35d:	e8 f4 fd ff ff       	call   c000d156 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d362:	83 c4 10             	add    esp,0x10
c000d365:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d369:	85 db                	test   ebx,ebx
c000d36b:	74 42                	je     c000d3af <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d36d:	50                   	push   eax
c000d36e:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d372:	50                   	push   eax
c000d373:	53                   	push   ebx
c000d374:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d378:	e8 ff f6 ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d37d:	83 c4 0c             	add    esp,0xc
c000d380:	6a 12                	push   0x12
c000d382:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d386:	50                   	push   eax
c000d387:	56                   	push   esi
c000d388:	e8 f3 2f ff ff       	call   c0000380 <memcmp>
c000d38d:	83 c4 10             	add    esp,0x10
c000d390:	85 c0                	test   eax,eax
c000d392:	74 1e                	je     c000d3b2 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d394:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d399:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d39e:	c1 e3 08             	shl    ebx,0x8
c000d3a1:	09 d8                	or     eax,ebx
c000d3a3:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d3a8:	c1 e3 10             	shl    ebx,0x10
c000d3ab:	09 c3                	or     ebx,eax
c000d3ad:	eb ba                	jmp    c000d369 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d3af:	83 cb ff             	or     ebx,0xffffffff
c000d3b2:	83 c4 44             	add    esp,0x44
c000d3b5:	89 d8                	mov    eax,ebx
c000d3b7:	5b                   	pop    ebx
c000d3b8:	5e                   	pop    esi
c000d3b9:	c3                   	ret    

c000d3ba <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d3ba:	57                   	push   edi
c000d3bb:	56                   	push   esi
c000d3bc:	53                   	push   ebx
c000d3bd:	83 ec 34             	sub    esp,0x34
c000d3c0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d3c4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d3c8:	6a 2b                	push   0x2b
c000d3ca:	6a 00                	push   0x0
c000d3cc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d3d0:	53                   	push   ebx
c000d3d1:	e8 1a 31 ff ff       	call   c00004f0 <memset>
c000d3d6:	58                   	pop    eax
c000d3d7:	5a                   	pop    edx
c000d3d8:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d3dc:	50                   	push   eax
c000d3dd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d3e1:	e8 70 fd ff ff       	call   c000d156 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d3e6:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d3ea:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d3ee:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d3f2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d3f6:	53                   	push   ebx
c000d3f7:	6a 00                	push   0x0
c000d3f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d3fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d401:	e8 20 f9 ff ff       	call   c000cd26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d406:	83 c4 50             	add    esp,0x50
c000d409:	5b                   	pop    ebx
c000d40a:	5e                   	pop    esi
c000d40b:	5f                   	pop    edi
c000d40c:	c3                   	ret    

c000d40d <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d40d:	55                   	push   ebp
c000d40e:	57                   	push   edi
c000d40f:	56                   	push   esi
c000d410:	53                   	push   ebx
c000d411:	83 ec 40             	sub    esp,0x40
c000d414:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d418:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d41c:	6a 2b                	push   0x2b
c000d41e:	6a 00                	push   0x0
c000d420:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d424:	56                   	push   esi
c000d425:	e8 c6 30 ff ff       	call   c00004f0 <memset>
c000d42a:	5f                   	pop    edi
c000d42b:	89 ef                	mov    edi,ebp
c000d42d:	58                   	pop    eax
c000d42e:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d432:	50                   	push   eax
c000d433:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d437:	e8 1a fd ff ff       	call   c000d156 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d43c:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d441:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d446:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d44b:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	85 ed                	test   ebp,ebp
c000d455:	74 14                	je     c000d46b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d457:	51                   	push   ecx
c000d458:	51                   	push   ecx
c000d459:	57                   	push   edi
c000d45a:	53                   	push   ebx
c000d45b:	e8 0e f7 ff ff       	call   c000cb6e <CmGetNext(Reghive_Tag*, int)>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	85 c0                	test   eax,eax
c000d465:	74 04                	je     c000d46b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d467:	89 c7                	mov    edi,eax
c000d469:	eb e8                	jmp    c000d453 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d46b:	56                   	push   esi
c000d46c:	6a 00                	push   0x0
c000d46e:	57                   	push   edi
c000d46f:	53                   	push   ebx
c000d470:	e8 b1 f8 ff ff       	call   c000cd26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d475:	83 c4 0c             	add    esp,0xc
c000d478:	56                   	push   esi
c000d479:	50                   	push   eax
c000d47a:	89 c7                	mov    edi,eax
c000d47c:	53                   	push   ebx
c000d47d:	e8 fa f5 ff ff       	call   c000ca7c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d482:	58                   	pop    eax
c000d483:	5a                   	pop    edx
c000d484:	6a 6c                	push   0x6c
c000d486:	6a 00                	push   0x0
c000d488:	6a 00                	push   0x0
c000d48a:	68 c0 2d 02 c0       	push   0xc0022dc0
c000d48f:	57                   	push   edi
c000d490:	53                   	push   ebx
c000d491:	e8 24 ff ff ff       	call   c000d3ba <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d496:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d49a:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d49e:	c1 e8 10             	shr    eax,0x10
c000d4a1:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d4a5:	83 c4 1c             	add    esp,0x1c
c000d4a8:	56                   	push   esi
c000d4a9:	57                   	push   edi
c000d4aa:	53                   	push   ebx
c000d4ab:	e8 f0 f6 ff ff       	call   c000cba0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d4b0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d4b5:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d4ba:	c1 e0 08             	shl    eax,0x8
c000d4bd:	09 c2                	or     edx,eax
c000d4bf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d4c4:	83 c4 4c             	add    esp,0x4c
c000d4c7:	5b                   	pop    ebx
c000d4c8:	5e                   	pop    esi
c000d4c9:	c1 e0 10             	shl    eax,0x10
c000d4cc:	09 d0                	or     eax,edx
c000d4ce:	5f                   	pop    edi
c000d4cf:	5d                   	pop    ebp
c000d4d0:	c3                   	ret    

c000d4d1 <zStrtok(char*, char const*)>:
c000d4d1:	55                   	push   ebp
c000d4d2:	57                   	push   edi
c000d4d3:	56                   	push   esi
c000d4d4:	53                   	push   ebx
c000d4d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d4d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d4dd:	85 db                	test   ebx,ebx
c000d4df:	74 2f                	je     c000d510 <zStrtok(char*, char const*)+0x3f>
c000d4e1:	85 c0                	test   eax,eax
c000d4e3:	75 09                	jne    c000d4ee <zStrtok(char*, char const*)+0x1d>
c000d4e5:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d4ea:	85 c0                	test   eax,eax
c000d4ec:	74 50                	je     c000d53e <zStrtok(char*, char const*)+0x6d>
c000d4ee:	31 c9                	xor    ecx,ecx
c000d4f0:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d4f4:	74 03                	je     c000d4f9 <zStrtok(char*, char const*)+0x28>
c000d4f6:	41                   	inc    ecx
c000d4f7:	eb f7                	jmp    c000d4f0 <zStrtok(char*, char const*)+0x1f>
c000d4f9:	31 d2                	xor    edx,edx
c000d4fb:	39 ca                	cmp    edx,ecx
c000d4fd:	74 15                	je     c000d514 <zStrtok(char*, char const*)+0x43>
c000d4ff:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d503:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d506:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d509:	39 ee                	cmp    esi,ebp
c000d50b:	74 13                	je     c000d520 <zStrtok(char*, char const*)+0x4f>
c000d50d:	42                   	inc    edx
c000d50e:	eb eb                	jmp    c000d4fb <zStrtok(char*, char const*)+0x2a>
c000d510:	31 c0                	xor    eax,eax
c000d512:	eb 2a                	jmp    c000d53e <zStrtok(char*, char const*)+0x6d>
c000d514:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d51e:	eb 1e                	jmp    c000d53e <zStrtok(char*, char const*)+0x6d>
c000d520:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d523:	39 ce                	cmp    esi,ecx
c000d525:	75 0a                	jne    c000d531 <zStrtok(char*, char const*)+0x60>
c000d527:	40                   	inc    eax
c000d528:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d52d:	89 d8                	mov    eax,ebx
c000d52f:	eb 0d                	jmp    c000d53e <zStrtok(char*, char const*)+0x6d>
c000d531:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d534:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d538:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d53e:	5b                   	pop    ebx
c000d53f:	5e                   	pop    esi
c000d540:	5f                   	pop    edi
c000d541:	5d                   	pop    ebp
c000d542:	c3                   	ret    

c000d543 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d543:	57                   	push   edi
c000d544:	56                   	push   esi
c000d545:	53                   	push   ebx
c000d546:	81 ec 08 01 00 00    	sub    esp,0x108
c000d54c:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d553:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d55a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d55e:	53                   	push   ebx
c000d55f:	e8 ec 30 ff ff       	call   c0000650 <strcpy>
c000d564:	59                   	pop    ecx
c000d565:	5e                   	pop    esi
c000d566:	68 72 3f 02 c0       	push   0xc0023f72
c000d56b:	53                   	push   ebx
c000d56c:	bb 01 00 00 00       	mov    ebx,0x1
c000d571:	e8 5b ff ff ff       	call   c000d4d1 <zStrtok(char*, char const*)>
c000d576:	83 c4 10             	add    esp,0x10
c000d579:	85 c0                	test   eax,eax
c000d57b:	74 3b                	je     c000d5b8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d57d:	52                   	push   edx
c000d57e:	50                   	push   eax
c000d57f:	6a 01                	push   0x1
c000d581:	57                   	push   edi
c000d582:	e8 b9 fd ff ff       	call   c000d340 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d587:	59                   	pop    ecx
c000d588:	5e                   	pop    esi
c000d589:	89 c3                	mov    ebx,eax
c000d58b:	68 72 3f 02 c0       	push   0xc0023f72
c000d590:	6a 00                	push   0x0
c000d592:	e8 3a ff ff ff       	call   c000d4d1 <zStrtok(char*, char const*)>
c000d597:	83 c4 10             	add    esp,0x10
c000d59a:	85 c0                	test   eax,eax
c000d59c:	89 c6                	mov    esi,eax
c000d59e:	74 18                	je     c000d5b8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d5a0:	52                   	push   edx
c000d5a1:	52                   	push   edx
c000d5a2:	53                   	push   ebx
c000d5a3:	57                   	push   edi
c000d5a4:	e8 86 f5 ff ff       	call   c000cb2f <CmEnterDirectory(Reghive_Tag*, int)>
c000d5a9:	83 c4 10             	add    esp,0x10
c000d5ac:	83 f8 ff             	cmp    eax,0xffffffff
c000d5af:	89 c3                	mov    ebx,eax
c000d5b1:	74 05                	je     c000d5b8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d5b3:	50                   	push   eax
c000d5b4:	56                   	push   esi
c000d5b5:	53                   	push   ebx
c000d5b6:	eb c9                	jmp    c000d581 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d5b8:	81 c4 00 01 00 00    	add    esp,0x100
c000d5be:	89 d8                	mov    eax,ebx
c000d5c0:	5b                   	pop    ebx
c000d5c1:	5e                   	pop    esi
c000d5c2:	5f                   	pop    edi
c000d5c3:	c3                   	ret    

c000d5c4 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d5c4:	55                   	push   ebp
c000d5c5:	57                   	push   edi
c000d5c6:	56                   	push   esi
c000d5c7:	53                   	push   ebx
c000d5c8:	83 ec 5c             	sub    esp,0x5c
c000d5cb:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d5cf:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d5d3:	85 db                	test   ebx,ebx
c000d5d5:	0f 8e 84 00 00 00    	jle    c000d65f <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d5db:	57                   	push   edi
c000d5dc:	31 ed                	xor    ebp,ebp
c000d5de:	6a 32                	push   0x32
c000d5e0:	6a 00                	push   0x0
c000d5e2:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d5e6:	57                   	push   edi
c000d5e7:	e8 04 2f ff ff       	call   c00004f0 <memset>
c000d5ec:	83 c4 0c             	add    esp,0xc
c000d5ef:	57                   	push   edi
c000d5f0:	53                   	push   ebx
c000d5f1:	56                   	push   esi
c000d5f2:	e8 31 fb ff ff       	call   c000d128 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d5f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d5fb:	83 c4 10             	add    esp,0x10
c000d5fe:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d602:	7d 13                	jge    c000d617 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d604:	83 ec 0c             	sub    esp,0xc
c000d607:	45                   	inc    ebp
c000d608:	68 64 44 02 c0       	push   0xc0024464
c000d60d:	e8 3c 99 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d612:	83 c4 10             	add    esp,0x10
c000d615:	eb e7                	jmp    c000d5fe <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d617:	51                   	push   ecx
c000d618:	57                   	push   edi
c000d619:	53                   	push   ebx
c000d61a:	68 c6 2d 02 c0       	push   0xc0022dc6
c000d61f:	e8 2a 99 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d624:	83 c4 10             	add    esp,0x10
c000d627:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d62c:	75 1e                	jne    c000d64c <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d62e:	52                   	push   edx
c000d62f:	52                   	push   edx
c000d630:	53                   	push   ebx
c000d631:	56                   	push   esi
c000d632:	e8 f8 f4 ff ff       	call   c000cb2f <CmEnterDirectory(Reghive_Tag*, int)>
c000d637:	83 c4 0c             	add    esp,0xc
c000d63a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d63e:	8d 51 04             	lea    edx,[ecx+0x4]
c000d641:	52                   	push   edx
c000d642:	50                   	push   eax
c000d643:	56                   	push   esi
c000d644:	e8 7b ff ff ff       	call   c000d5c4 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d649:	83 c4 10             	add    esp,0x10
c000d64c:	50                   	push   eax
c000d64d:	50                   	push   eax
c000d64e:	53                   	push   ebx
c000d64f:	56                   	push   esi
c000d650:	e8 19 f5 ff ff       	call   c000cb6e <CmGetNext(Reghive_Tag*, int)>
c000d655:	83 c4 10             	add    esp,0x10
c000d658:	89 c3                	mov    ebx,eax
c000d65a:	e9 74 ff ff ff       	jmp    c000d5d3 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d65f:	83 c4 5c             	add    esp,0x5c
c000d662:	5b                   	pop    ebx
c000d663:	5e                   	pop    esi
c000d664:	5f                   	pop    edi
c000d665:	5d                   	pop    ebp
c000d666:	c3                   	ret    

c000d667 <CmSplitFinalSlashInPlace(char*)>:
c000d667:	53                   	push   ebx
c000d668:	83 ec 14             	sub    esp,0x14
c000d66b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d66f:	53                   	push   ebx
c000d670:	e8 0b 2f ff ff       	call   c0000580 <strlen>
c000d675:	83 c4 10             	add    esp,0x10
c000d678:	48                   	dec    eax
c000d679:	85 c0                	test   eax,eax
c000d67b:	74 15                	je     c000d692 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d67d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d681:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d684:	75 09                	jne    c000d68f <CmSplitFinalSlashInPlace(char*)+0x28>
c000d686:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d689:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d68d:	eb 05                	jmp    c000d694 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d68f:	48                   	dec    eax
c000d690:	eb e7                	jmp    c000d679 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d692:	31 c0                	xor    eax,eax
c000d694:	83 c4 08             	add    esp,0x8
c000d697:	5b                   	pop    ebx
c000d698:	c3                   	ret    
c000d699:	66 90                	xchg   ax,ax
c000d69b:	90                   	nop

c000d69c <Krnl::handlePowerButton()>:
c000d69c:	83 ec 0c             	sub    esp,0xc
c000d69f:	e8 53 27 00 00       	call   c000fdf7 <KeHandlePowerButton()>
c000d6a4:	90                   	nop
c000d6a5:	83 c4 0c             	add    esp,0xc
c000d6a8:	c3                   	ret    
c000d6a9:	8d 76 00             	lea    esi,[esi+0x0]

c000d6ac <Krnl::handleSleepButton()>:
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	e8 5b 27 00 00       	call   c000fe0f <KeHandleSleepButton()>
c000d6b4:	90                   	nop
c000d6b5:	83 c4 0c             	add    esp,0xc
c000d6b8:	c3                   	ret    
c000d6b9:	90                   	nop

c000d6ba <Computer::close(int, int, void*)>:
c000d6ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d6bf:	c3                   	ret    

c000d6c0 <Computer::open(int, int, void*)>:
c000d6c0:	56                   	push   esi
c000d6c1:	53                   	push   ebx
c000d6c2:	83 ec 04             	sub    esp,0x4
c000d6c5:	f6 05 c4 cd 02 c0 04 	test   BYTE PTR ds:0xc002cdc4,0x4
c000d6cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6d0:	0f 94 05 e0 57 02 c0 	sete   BYTE PTR ds:0xc00257e0
c000d6d7:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d6dd:	74 10                	je     c000d6ef <Computer::open(int, int, void*)+0x2f>
c000d6df:	83 ec 0c             	sub    esp,0xc
c000d6e2:	68 d0 2d 02 c0       	push   0xc0022dd0
c000d6e7:	e8 d6 1d 00 00       	call   c000f4c2 <KePanic(char const*)>
c000d6ec:	83 c4 10             	add    esp,0x10
c000d6ef:	83 ec 0c             	sub    esp,0xc
c000d6f2:	68 88 2e 02 c0       	push   0xc0022e88
c000d6f7:	e8 37 f1 ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d6fc:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d703:	e8 74 1a 00 00       	call   c000f17c <malloc>
c000d708:	89 04 24             	mov    DWORD PTR [esp],eax
c000d70b:	89 c6                	mov    esi,eax
c000d70d:	e8 3a e7 ff ff       	call   c000be4c <ACPI::ACPI()>
c000d712:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d718:	58                   	pop    eax
c000d719:	5a                   	pop    edx
c000d71a:	56                   	push   esi
c000d71b:	53                   	push   ebx
c000d71c:	e8 71 b9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d721:	c7 04 24 a0 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ea0
c000d728:	e8 06 f1 ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d72d:	e8 3f b1 00 00       	call   c0018871 <HalEnableNMI()>
c000d732:	e8 6f a3 00 00       	call   c0017aa6 <HalDetectFeatures()>
c000d737:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d73e:	e8 39 1a 00 00       	call   c000f17c <malloc>
c000d743:	89 04 24             	mov    DWORD PTR [esp],eax
c000d746:	89 c6                	mov    esi,eax
c000d748:	e8 5f bc 00 00       	call   c00193ac <CPU::CPU()>
c000d74d:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d753:	59                   	pop    ecx
c000d754:	58                   	pop    eax
c000d755:	56                   	push   esi
c000d756:	53                   	push   ebx
c000d757:	e8 36 b9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d75c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d760:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d766:	8b 10                	mov    edx,DWORD PTR [eax]
c000d768:	51                   	push   ecx
c000d769:	6a 00                	push   0x0
c000d76b:	6a 00                	push   0x0
c000d76d:	50                   	push   eax
c000d76e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d771:	83 c4 14             	add    esp,0x14
c000d774:	68 fc 2d 02 c0       	push   0xc0022dfc
c000d779:	e8 b5 f0 ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d77e:	e8 84 b8 00 00       	call   c0019007 <HalInitialiseCoprocessor()>
c000d783:	c7 04 24 ba 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eba
c000d78a:	e8 a4 f0 ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d78f:	c7 04 24 a6 d7 00 c0 	mov    DWORD PTR [esp],0xc000d7a6
c000d796:	e8 45 88 00 00       	call   c0015fe0 <setupMultitasking(void (*)())>
c000d79b:	83 c4 14             	add    esp,0x14
c000d79e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d7a3:	5b                   	pop    ebx
c000d7a4:	5e                   	pop    esi
c000d7a5:	c3                   	ret    

c000d7a6 <KeFirstTask()>:
c000d7a6:	53                   	push   ebx
c000d7a7:	83 ec 14             	sub    esp,0x14
c000d7aa:	fb                   	sti    
c000d7ab:	68 d5 2e 02 c0       	push   0xc0022ed5
c000d7b0:	e8 7e f0 ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d7b5:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d7bc:	e8 bb 19 00 00       	call   c000f17c <malloc>
c000d7c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d7c8:	89 c3                	mov    ebx,eax
c000d7ca:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000d7cf:	50                   	push   eax
c000d7d0:	68 ee 2e 02 c0       	push   0xc0022eee
c000d7d5:	6a 01                	push   0x1
c000d7d7:	53                   	push   ebx
c000d7d8:	e8 8f 84 00 00       	call   c0015c6c <Process::Process(bool, char const*, Process*, char**)>
c000d7dd:	83 c4 20             	add    esp,0x20
c000d7e0:	68 ff 00 00 00       	push   0xff
c000d7e5:	6a 00                	push   0x0
c000d7e7:	68 a5 e4 00 c0       	push   0xc000e4a5
c000d7ec:	53                   	push   ebx
c000d7ed:	e8 ba 86 00 00       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c000d7f2:	8b 15 f8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6f8
c000d7f8:	6a 7a                	push   0x7a
c000d7fa:	6a 00                	push   0x0
c000d7fc:	68 8c 67 01 c0       	push   0xc001678c
c000d801:	52                   	push   edx
c000d802:	e8 a5 86 00 00       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c000d807:	83 c4 14             	add    esp,0x14
c000d80a:	68 20 2e 02 c0       	push   0xc0022e20
c000d80f:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000d814:	e8 1a f0 ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d819:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d820:	e8 f4 26 00 00       	call   c000ff19 <KeInitRand()>
c000d825:	e8 30 93 00 00       	call   c0016b5a <Vm::initialise8086()>
c000d82a:	e8 a7 a5 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d82f:	c7 04 24 94 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b94
c000d836:	e8 f8 ef ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d83b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d840:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d846:	8b 10                	mov    edx,DWORD PTR [eax]
c000d848:	6a 00                	push   0x0
c000d84a:	6a 00                	push   0x0
c000d84c:	6a 00                	push   0x0
c000d84e:	50                   	push   eax
c000d84f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d852:	83 c4 14             	add    esp,0x14
c000d855:	68 20 2e 02 c0       	push   0xc0022e20
c000d85a:	e8 d4 ef ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d85f:	e8 57 9d ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d864:	e8 f5 05 00 00       	call   c000de5e <KeLoadSystemEnv()>
c000d869:	e8 b9 25 00 00       	call   c000fe27 <KeSetupPowerManager()>
c000d86e:	c7 04 24 44 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e44
c000d875:	e8 b9 ef ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d87a:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d87f:	59                   	pop    ecx
c000d880:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d886:	53                   	push   ebx
c000d887:	e8 22 b9 ff ff       	call   c00091ae <Device::loadDriversForAll()>
c000d88c:	c7 04 24 fb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022efb
c000d893:	e8 9b ef ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c000d898:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d89e:	58                   	pop    eax
c000d89f:	5a                   	pop    edx
c000d8a0:	6a 01                	push   0x1
c000d8a2:	68 0c 2f 02 c0       	push   0xc0022f0c
c000d8a7:	e8 29 7d 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c000d8ac:	59                   	pop    ecx
c000d8ad:	5a                   	pop    edx
c000d8ae:	53                   	push   ebx
c000d8af:	50                   	push   eax
c000d8b0:	e8 81 7f 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c000d8b5:	83 c4 10             	add    esp,0x10
c000d8b8:	83 ec 0c             	sub    esp,0xc
c000d8bb:	6a 02                	push   0x2
c000d8bd:	e8 02 89 00 00       	call   c00161c4 <blockTask(TaskState)>
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	eb f1                	jmp    c000d8b8 <KeFirstTask()+0x112>
c000d8c7:	90                   	nop

c000d8c8 <Computer::Computer()>:
c000d8c8:	83 ec 0c             	sub    esp,0xc
c000d8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8cf:	83 ec 08             	sub    esp,0x8
c000d8d2:	68 28 2f 02 c0       	push   0xc0022f28
c000d8d7:	50                   	push   eax
c000d8d8:	e8 17 b9 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000d8dd:	83 c4 10             	add    esp,0x10
c000d8e0:	ba 3c 2f 02 c0       	mov    edx,0xc0022f3c
c000d8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e9:	89 10                	mov    DWORD PTR [eax],edx
c000d8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ef:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8fd:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d907:	90                   	nop
c000d908:	83 c4 0c             	add    esp,0xc
c000d90b:	c3                   	ret    

c000d90c <KePrepareShutdown()>:
c000d90c:	83 ec 0c             	sub    esp,0xc
c000d90f:	e8 8d ee ff ff       	call   c000c7a1 <KeExecuteAtexit()>
c000d914:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d919:	83 ec 0c             	sub    esp,0xc
c000d91c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d922:	50                   	push   eax
c000d923:	e8 d2 b9 ff ff       	call   c00092fa <Device::closeAll()>
c000d928:	83 c4 1c             	add    esp,0x1c
c000d92b:	c3                   	ret    

c000d92c <KeShutdown()>:
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	e8 d8 ff ff ff       	call   c000d90c <KePrepareShutdown()>
c000d934:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d939:	85 c0                	test   eax,eax
c000d93b:	74 02                	je     c000d93f <KeShutdown()+0x13>
c000d93d:	ff d0                	call   eax
c000d93f:	83 ec 0c             	sub    esp,0xc
c000d942:	68 64 2e 02 c0       	push   0xc0022e64
c000d947:	e8 76 1b 00 00       	call   c000f4c2 <KePanic(char const*)>
c000d94c:	83 c4 1c             	add    esp,0x1c
c000d94f:	c3                   	ret    

c000d950 <KeSleep()>:
c000d950:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d955:	85 c0                	test   eax,eax
c000d957:	74 02                	je     c000d95b <KeSleep()+0xb>
c000d959:	ff e0                	jmp    eax
c000d95b:	c3                   	ret    

c000d95c <KeRestart()>:
c000d95c:	83 ec 0c             	sub    esp,0xc
c000d95f:	e8 a8 ff ff ff       	call   c000d90c <KePrepareShutdown()>
c000d964:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000d969:	85 c0                	test   eax,eax
c000d96b:	74 02                	je     c000d96f <KeRestart()+0x13>
c000d96d:	ff d0                	call   eax
c000d96f:	e4 64                	in     al,0x64
c000d971:	a8 02                	test   al,0x2
c000d973:	75 fa                	jne    c000d96f <KeRestart()+0x13>
c000d975:	b0 fe                	mov    al,0xfe
c000d977:	e6 64                	out    0x64,al
c000d979:	83 c4 0c             	add    esp,0xc
c000d97c:	c3                   	ret    

c000d97d <KeCalculateCRC32(unsigned char*, int)>:
c000d97d:	53                   	push   ebx
c000d97e:	83 c8 ff             	or     eax,0xffffffff
c000d981:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d985:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d989:	01 cb                	add    ebx,ecx
c000d98b:	39 d9                	cmp    ecx,ebx
c000d98d:	74 15                	je     c000d9a4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d98f:	41                   	inc    ecx
c000d990:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d993:	31 c2                	xor    edx,eax
c000d995:	c1 e8 08             	shr    eax,0x8
c000d998:	0f b6 d2             	movzx  edx,dl
c000d99b:	33 04 95 00 52 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdae00]
c000d9a2:	eb e7                	jmp    c000d98b <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d9a4:	5b                   	pop    ebx
c000d9a5:	f7 d0                	not    eax
c000d9a7:	c3                   	ret    

c000d9a8 <EnvVarContainer::getEnv(char const*)>:
c000d9a8:	57                   	push   edi
c000d9a9:	56                   	push   esi
c000d9aa:	53                   	push   ebx
c000d9ab:	31 db                	xor    ebx,ebx
c000d9ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9b1:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d9b3:	7e 2b                	jle    c000d9e0 <EnvVarContainer::getEnv(char const*)+0x38>
c000d9b5:	50                   	push   eax
c000d9b6:	50                   	push   eax
c000d9b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d9ba:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d9c1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d9c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d9c8:	e8 b3 2d ff ff       	call   c0000780 <strcmp>
c000d9cd:	83 c4 10             	add    esp,0x10
c000d9d0:	85 c0                	test   eax,eax
c000d9d2:	75 09                	jne    c000d9dd <EnvVarContainer::getEnv(char const*)+0x35>
c000d9d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d9d7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d9db:	eb 05                	jmp    c000d9e2 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d9dd:	43                   	inc    ebx
c000d9de:	eb d1                	jmp    c000d9b1 <EnvVarContainer::getEnv(char const*)+0x9>
c000d9e0:	31 c0                	xor    eax,eax
c000d9e2:	5b                   	pop    ebx
c000d9e3:	5e                   	pop    esi
c000d9e4:	5f                   	pop    edi
c000d9e5:	c3                   	ret    

c000d9e6 <EnvVarContainer::setEnv(char const*, char const*)>:
c000d9e6:	55                   	push   ebp
c000d9e7:	57                   	push   edi
c000d9e8:	56                   	push   esi
c000d9e9:	53                   	push   ebx
c000d9ea:	83 ec 28             	sub    esp,0x28
c000d9ed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9f1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d9f5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d9f9:	56                   	push   esi
c000d9fa:	e8 81 2b ff ff       	call   c0000580 <strlen>
c000d9ff:	40                   	inc    eax
c000da00:	89 04 24             	mov    DWORD PTR [esp],eax
c000da03:	e8 74 17 00 00       	call   c000f17c <malloc>
c000da08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da0f:	e8 6c 2b ff ff       	call   c0000580 <strlen>
c000da14:	40                   	inc    eax
c000da15:	89 04 24             	mov    DWORD PTR [esp],eax
c000da18:	e8 5f 17 00 00       	call   c000f17c <malloc>
c000da1d:	89 34 24             	mov    DWORD PTR [esp],esi
c000da20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da24:	e8 57 2b ff ff       	call   c0000580 <strlen>
c000da29:	83 c4 0c             	add    esp,0xc
c000da2c:	40                   	inc    eax
c000da2d:	50                   	push   eax
c000da2e:	6a 00                	push   0x0
c000da30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da34:	e8 b7 2a ff ff       	call   c00004f0 <memset>
c000da39:	89 34 24             	mov    DWORD PTR [esp],esi
c000da3c:	e8 3f 2b ff ff       	call   c0000580 <strlen>
c000da41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da45:	8d 48 01             	lea    ecx,[eax+0x1]
c000da48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da4d:	89 de                	mov    esi,ebx
c000da4f:	e8 2c 2b ff ff       	call   c0000580 <strlen>
c000da54:	83 c4 0c             	add    esp,0xc
c000da57:	40                   	inc    eax
c000da58:	50                   	push   eax
c000da59:	6a 00                	push   0x0
c000da5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da5f:	e8 8c 2a ff ff       	call   c00004f0 <memset>
c000da64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da67:	e8 14 2b ff ff       	call   c0000580 <strlen>
c000da6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000da70:	8d 48 01             	lea    ecx,[eax+0x1]
c000da73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da78:	40                   	inc    eax
c000da79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000da7c:	c1 e0 03             	shl    eax,0x3
c000da7f:	5a                   	pop    edx
c000da80:	59                   	pop    ecx
c000da81:	50                   	push   eax
c000da82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da85:	e8 de 16 00 00       	call   c000f168 <realloc>
c000da8a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da8d:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da91:	b9 08 00 00 00       	mov    ecx,0x8
c000da96:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000da99:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da9f:	83 c4 2c             	add    esp,0x2c
c000daa2:	5b                   	pop    ebx
c000daa3:	5e                   	pop    esi
c000daa4:	5f                   	pop    edi
c000daa5:	5d                   	pop    ebp
c000daa6:	c3                   	ret    
c000daa7:	90                   	nop

c000daa8 <EnvVarContainer::deleteEnv(char const*)>:
c000daa8:	c3                   	ret    
c000daa9:	90                   	nop

c000daaa <EnvVarContainer::loadFrom(char const*, char const*)>:
c000daaa:	55                   	push   ebp
c000daab:	57                   	push   edi
c000daac:	56                   	push   esi
c000daad:	53                   	push   ebx
c000daae:	81 ec 38 01 00 00    	sub    esp,0x138
c000dab4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000dabb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000dac2:	68 14 01 00 00       	push   0x114
c000dac7:	e8 b0 16 00 00       	call   c000f17c <malloc>
c000dacc:	83 c4 0c             	add    esp,0xc
c000dacf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dad2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000dad9:	89 c3                	mov    ebx,eax
c000dadb:	50                   	push   eax
c000dadc:	e8 4b a6 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000dae1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dae4:	e8 25 a9 ff ff       	call   c000840e <File::exists()>
c000dae9:	83 c4 10             	add    esp,0x10
c000daec:	84 c0                	test   al,al
c000daee:	75 31                	jne    c000db21 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000daf0:	50                   	push   eax
c000daf1:	50                   	push   eax
c000daf2:	6a 12                	push   0x12
c000daf4:	53                   	push   ebx
c000daf5:	e8 50 a6 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000dafa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dafc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000daff:	89 34 24             	mov    DWORD PTR [esp],esi
c000db02:	e8 79 2a ff ff       	call   c0000580 <strlen>
c000db07:	5a                   	pop    edx
c000db08:	8d 54 24 20          	lea    edx,[esp+0x20]
c000db0c:	52                   	push   edx
c000db0d:	31 d2                	xor    edx,edx
c000db0f:	56                   	push   esi
c000db10:	52                   	push   edx
c000db11:	50                   	push   eax
c000db12:	53                   	push   ebx
c000db13:	ff d7                	call   edi
c000db15:	83 c4 14             	add    esp,0x14
c000db18:	53                   	push   ebx
c000db19:	e8 8a a6 ff ff       	call   c00081a8 <File::close()>
c000db1e:	83 c4 10             	add    esp,0x10
c000db21:	56                   	push   esi
c000db22:	31 f6                	xor    esi,esi
c000db24:	68 00 01 00 00       	push   0x100
c000db29:	6a 00                	push   0x0
c000db2b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000db2f:	50                   	push   eax
c000db30:	e8 bb 29 ff ff       	call   c00004f0 <memset>
c000db35:	5f                   	pop    edi
c000db36:	58                   	pop    eax
c000db37:	6a 01                	push   0x1
c000db39:	53                   	push   ebx
c000db3a:	e8 0b a6 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db52:	83 ec 0c             	sub    esp,0xc
c000db55:	8d 54 24 20          	lea    edx,[esp+0x20]
c000db59:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db5b:	52                   	push   edx
c000db5c:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000db60:	51                   	push   ecx
c000db61:	6a 00                	push   0x0
c000db63:	6a 01                	push   0x1
c000db65:	53                   	push   ebx
c000db66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000db69:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000db6e:	83 c4 20             	add    esp,0x20
c000db71:	85 c0                	test   eax,eax
c000db73:	89 c1                	mov    ecx,eax
c000db75:	0f 84 36 01 00 00    	je     c000dcb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000db7b:	83 f8 0d             	cmp    eax,0xd
c000db7e:	0f 84 22 01 00 00    	je     c000dca6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000db84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000db89:	0f 84 f0 00 00 00    	je     c000dc7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000db8f:	83 f8 0a             	cmp    eax,0xa
c000db92:	74 13                	je     c000dba7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000db94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000db99:	74 0c                	je     c000dba7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000db9b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000dba1:	0f 8e f6 00 00 00    	jle    c000dc9d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000dba7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbab:	83 ec 0c             	sub    esp,0xc
c000dbae:	8d 78 01             	lea    edi,[eax+0x1]
c000dbb1:	57                   	push   edi
c000dbb2:	e8 c5 15 00 00       	call   c000f17c <malloc>
c000dbb7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dbbb:	8d 56 04             	lea    edx,[esi+0x4]
c000dbbe:	89 14 24             	mov    DWORD PTR [esp],edx
c000dbc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbc5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbc9:	e8 ae 15 00 00       	call   c000f17c <malloc>
c000dbce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000dbd2:	83 c4 0c             	add    esp,0xc
c000dbd5:	57                   	push   edi
c000dbd6:	6a 00                	push   0x0
c000dbd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbdc:	e8 0f 29 ff ff       	call   c00004f0 <memset>
c000dbe1:	8d 74 24 30          	lea    esi,[esp+0x30]
c000dbe5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dbe9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000dbed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbef:	83 c4 0c             	add    esp,0xc
c000dbf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dbf6:	52                   	push   edx
c000dbf7:	6a 00                	push   0x0
c000dbf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dbfd:	e8 ee 28 ff ff       	call   c00004f0 <memset>
c000dc02:	8d 74 24 30          	lea    esi,[esp+0x30]
c000dc06:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000dc0a:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc0d:	e8 6e 29 ff ff       	call   c0000580 <strlen>
c000dc12:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000dc16:	89 c1                	mov    ecx,eax
c000dc18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc23:	40                   	inc    eax
c000dc24:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000dc27:	85 d2                	test   edx,edx
c000dc29:	75 0c                	jne    c000dc37 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000dc2b:	83 ec 0c             	sub    esp,0xc
c000dc2e:	6a 08                	push   0x8
c000dc30:	e8 47 15 00 00       	call   c000f17c <malloc>
c000dc35:	eb 0c                	jmp    c000dc43 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000dc37:	51                   	push   ecx
c000dc38:	51                   	push   ecx
c000dc39:	c1 e0 03             	shl    eax,0x3
c000dc3c:	50                   	push   eax
c000dc3d:	52                   	push   edx
c000dc3e:	e8 25 15 00 00       	call   c000f168 <realloc>
c000dc43:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000dc46:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000dc49:	83 c4 10             	add    esp,0x10
c000dc4c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000dc4f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000dc53:	b9 08 00 00 00       	mov    ecx,0x8
c000dc58:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000dc5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc5e:	50                   	push   eax
c000dc5f:	31 f6                	xor    esi,esi
c000dc61:	68 00 01 00 00       	push   0x100
c000dc66:	6a 00                	push   0x0
c000dc68:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc6c:	50                   	push   eax
c000dc6d:	e8 7e 28 ff ff       	call   c00004f0 <memset>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc7d:	eb 27                	jmp    c000dca6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dc7f:	83 f8 3d             	cmp    eax,0x3d
c000dc82:	74 1e                	je     c000dca2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000dc84:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000dc8a:	7f 07                	jg     c000dc93 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000dc8c:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000dc90:	46                   	inc    esi
c000dc91:	eb 13                	jmp    c000dca6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dc93:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000dc9b:	eb 09                	jmp    c000dca6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dc9d:	83 f8 3d             	cmp    eax,0x3d
c000dca0:	75 ea                	jne    c000dc8c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dca2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dca6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dcab:	0f 85 99 fe ff ff    	jne    c000db4a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dcb1:	83 ec 0c             	sub    esp,0xc
c000dcb4:	53                   	push   ebx
c000dcb5:	e8 ee a4 ff ff       	call   c00081a8 <File::close()>
c000dcba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dcbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dcc2:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dcc8:	5b                   	pop    ebx
c000dcc9:	5e                   	pop    esi
c000dcca:	5f                   	pop    edi
c000dccb:	5d                   	pop    ebp
c000dccc:	c3                   	ret    
c000dccd:	90                   	nop

c000dcce <EnvVarContainer::__loadSystem()>:
c000dcce:	83 ec 10             	sub    esp,0x10
c000dcd1:	68 00 56 02 c0       	push   0xc0025600
c000dcd6:	68 60 2f 02 c0       	push   0xc0022f60
c000dcdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcdf:	e8 c6 fd ff ff       	call   c000daaa <EnvVarContainer::loadFrom(char const*, char const*)>
c000dce4:	83 c4 1c             	add    esp,0x1c
c000dce7:	c3                   	ret    

c000dce8 <EnvVarContainer::__loadUser()>:
c000dce8:	c3                   	ret    
c000dce9:	90                   	nop

c000dcea <EnvVarContainer::EnvVarContainer(Process*)>:
c000dcea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dcf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcfc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dcff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dd0a:	90                   	nop
c000dd0b:	c3                   	ret    

c000dd0c <EnvVarContainer::~EnvVarContainer()>:
c000dd0c:	83 ec 0c             	sub    esp,0xc
c000dd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd16:	85 c0                	test   eax,eax
c000dd18:	74 1d                	je     c000dd37 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd20:	85 c0                	test   eax,eax
c000dd22:	74 13                	je     c000dd37 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd2b:	83 ec 0c             	sub    esp,0xc
c000dd2e:	50                   	push   eax
c000dd2f:	e8 58 14 00 00       	call   c000f18c <free>
c000dd34:	83 c4 10             	add    esp,0x10
c000dd37:	90                   	nop
c000dd38:	83 c4 0c             	add    esp,0xc
c000dd3b:	c3                   	ret    

c000dd3c <KeGetEnv(Process*, char const*)>:
c000dd3c:	53                   	push   ebx
c000dd3d:	83 ec 08             	sub    esp,0x8
c000dd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd44:	39 05 f8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6f8,eax
c000dd4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dd4e:	74 04                	je     c000dd54 <KeGetEnv(Process*, char const*)+0x18>
c000dd50:	85 c0                	test   eax,eax
c000dd52:	75 0b                	jne    c000dd5f <KeGetEnv(Process*, char const*)+0x23>
c000dd54:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dd59:	85 c0                	test   eax,eax
c000dd5b:	75 19                	jne    c000dd76 <KeGetEnv(Process*, char const*)+0x3a>
c000dd5d:	eb 27                	jmp    c000dd86 <KeGetEnv(Process*, char const*)+0x4a>
c000dd5f:	52                   	push   edx
c000dd60:	52                   	push   edx
c000dd61:	53                   	push   ebx
c000dd62:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dd68:	e8 3b fc ff ff       	call   c000d9a8 <EnvVarContainer::getEnv(char const*)>
c000dd6d:	83 c4 10             	add    esp,0x10
c000dd70:	85 c0                	test   eax,eax
c000dd72:	75 28                	jne    c000dd9c <KeGetEnv(Process*, char const*)+0x60>
c000dd74:	eb de                	jmp    c000dd54 <KeGetEnv(Process*, char const*)+0x18>
c000dd76:	52                   	push   edx
c000dd77:	52                   	push   edx
c000dd78:	53                   	push   ebx
c000dd79:	50                   	push   eax
c000dd7a:	e8 29 fc ff ff       	call   c000d9a8 <EnvVarContainer::getEnv(char const*)>
c000dd7f:	83 c4 10             	add    esp,0x10
c000dd82:	85 c0                	test   eax,eax
c000dd84:	75 16                	jne    c000dd9c <KeGetEnv(Process*, char const*)+0x60>
c000dd86:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dd8a:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dd8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd93:	83 c4 08             	add    esp,0x8
c000dd96:	5b                   	pop    ebx
c000dd97:	e9 0c fc ff ff       	jmp    c000d9a8 <EnvVarContainer::getEnv(char const*)>
c000dd9c:	83 c4 08             	add    esp,0x8
c000dd9f:	5b                   	pop    ebx
c000dda0:	c3                   	ret    

c000dda1 <KeSetEnvSystem(char const*, char const*)>:
c000dda1:	83 ec 10             	sub    esp,0x10
c000dda4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dda8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddac:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000ddb2:	e8 2f fc ff ff       	call   c000d9e6 <EnvVarContainer::setEnv(char const*, char const*)>
c000ddb7:	83 c4 1c             	add    esp,0x1c
c000ddba:	c3                   	ret    

c000ddbb <KeSetEnvUser(char const*, char const*)>:
c000ddbb:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000ddc0:	85 c0                	test   eax,eax
c000ddc2:	74 15                	je     c000ddd9 <KeSetEnvUser(char const*, char const*)+0x1e>
c000ddc4:	83 ec 10             	sub    esp,0x10
c000ddc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddcf:	50                   	push   eax
c000ddd0:	e8 11 fc ff ff       	call   c000d9e6 <EnvVarContainer::setEnv(char const*, char const*)>
c000ddd5:	83 c4 1c             	add    esp,0x1c
c000ddd8:	c3                   	ret    
c000ddd9:	c3                   	ret    

c000ddda <KeSetEnvProcess(Process*, char const*, char const*)>:
c000ddda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddde:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dde4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dde8:	e9 f9 fb ff ff       	jmp    c000d9e6 <EnvVarContainer::setEnv(char const*, char const*)>

c000dded <KeDeleteEnvSystem(char const*)>:
c000dded:	c3                   	ret    

c000ddee <KeDeleteEnvUser(char const*)>:
c000ddee:	c3                   	ret    

c000ddef <KeDeleteEnvProcess(Process*, char const*)>:
c000ddef:	c3                   	ret    

c000ddf0 <KeNewProcessEnv(Process*)>:
c000ddf0:	83 ec 28             	sub    esp,0x28
c000ddf3:	6a 0c                	push   0xc
c000ddf5:	e8 82 13 00 00       	call   c000f17c <malloc>
c000ddfa:	5a                   	pop    edx
c000ddfb:	59                   	pop    ecx
c000ddfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de00:	50                   	push   eax
c000de01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de05:	e8 e0 fe ff ff       	call   c000dcea <EnvVarContainer::EnvVarContainer(Process*)>
c000de0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de0e:	83 c4 2c             	add    esp,0x2c
c000de11:	c3                   	ret    

c000de12 <KeCopyProcessEnv(Process*, Process*)>:
c000de12:	57                   	push   edi
c000de13:	56                   	push   esi
c000de14:	53                   	push   ebx
c000de15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de19:	83 ec 0c             	sub    esp,0xc
c000de1c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000de22:	6a 0c                	push   0xc
c000de24:	e8 53 13 00 00       	call   c000f17c <malloc>
c000de29:	89 c3                	mov    ebx,eax
c000de2b:	58                   	pop    eax
c000de2c:	5a                   	pop    edx
c000de2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de31:	53                   	push   ebx
c000de32:	e8 b3 fe ff ff       	call   c000dcea <EnvVarContainer::EnvVarContainer(Process*)>
c000de37:	8b 07                	mov    eax,DWORD PTR [edi]
c000de39:	89 03                	mov    DWORD PTR [ebx],eax
c000de3b:	c1 e0 03             	shl    eax,0x3
c000de3e:	89 04 24             	mov    DWORD PTR [esp],eax
c000de41:	e8 36 13 00 00       	call   c000f17c <malloc>
c000de46:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000de49:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000de4b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000de4e:	89 c7                	mov    edi,eax
c000de50:	c1 e1 03             	shl    ecx,0x3
c000de53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de55:	83 c4 10             	add    esp,0x10
c000de58:	89 d8                	mov    eax,ebx
c000de5a:	5b                   	pop    ebx
c000de5b:	5e                   	pop    esi
c000de5c:	5f                   	pop    edi
c000de5d:	c3                   	ret    

c000de5e <KeLoadSystemEnv()>:
c000de5e:	53                   	push   ebx
c000de5f:	83 ec 14             	sub    esp,0x14
c000de62:	6a 0c                	push   0xc
c000de64:	e8 13 13 00 00       	call   c000f17c <malloc>
c000de69:	89 c3                	mov    ebx,eax
c000de6b:	58                   	pop    eax
c000de6c:	5a                   	pop    edx
c000de6d:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000de73:	53                   	push   ebx
c000de74:	e8 71 fe ff ff       	call   c000dcea <EnvVarContainer::EnvVarContainer(Process*)>
c000de79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000de7c:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000de82:	e8 47 fe ff ff       	call   c000dcce <EnvVarContainer::__loadSystem()>
c000de87:	83 c4 18             	add    esp,0x18
c000de8a:	5b                   	pop    ebx
c000de8b:	c3                   	ret    

c000de8c <KeLoadUserEnv()>:
c000de8c:	53                   	push   ebx
c000de8d:	83 ec 14             	sub    esp,0x14
c000de90:	6a 0c                	push   0xc
c000de92:	e8 e5 12 00 00       	call   c000f17c <malloc>
c000de97:	89 c3                	mov    ebx,eax
c000de99:	58                   	pop    eax
c000de9a:	5a                   	pop    edx
c000de9b:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000dea1:	53                   	push   ebx
c000dea2:	e8 43 fe ff ff       	call   c000dcea <EnvVarContainer::EnvVarContainer(Process*)>
c000dea7:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000dead:	83 c4 18             	add    esp,0x18
c000deb0:	5b                   	pop    ebx
c000deb1:	c3                   	ret    

c000deb2 <KeFlushEnv()>:
c000deb2:	c3                   	ret    

c000deb3 <KeGetProcessTotalEnvCount(Process*)>:
c000deb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000deb7:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000debd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dec3:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dec8:	8b 00                	mov    eax,DWORD PTR [eax]
c000deca:	03 01                	add    eax,DWORD PTR [ecx]
c000decc:	85 d2                	test   edx,edx
c000dece:	74 02                	je     c000ded2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000ded0:	03 02                	add    eax,DWORD PTR [edx]
c000ded2:	c3                   	ret    

c000ded3 <KeGetProcessEnvPair(Process*, int)>:
c000ded3:	57                   	push   edi
c000ded4:	56                   	push   esi
c000ded5:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000dedb:	53                   	push   ebx
c000dedc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dee0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dee4:	85 f6                	test   esi,esi
c000dee6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000deea:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000def0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000def2:	75 16                	jne    c000df0a <KeGetProcessEnvPair(Process*, int)+0x37>
c000def4:	39 c2                	cmp    edx,eax
c000def6:	7c 16                	jl     c000df0e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000def8:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000defe:	8b 31                	mov    esi,DWORD PTR [ecx]
c000df00:	01 c6                	add    esi,eax
c000df02:	39 d6                	cmp    esi,edx
c000df04:	7e 3c                	jle    c000df42 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000df06:	29 c2                	sub    edx,eax
c000df08:	eb 04                	jmp    c000df0e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000df0a:	39 c2                	cmp    edx,eax
c000df0c:	7d 05                	jge    c000df13 <KeGetProcessEnvPair(Process*, int)+0x40>
c000df0e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000df11:	eb 20                	jmp    c000df33 <KeGetProcessEnvPair(Process*, int)+0x60>
c000df13:	8b 3e                	mov    edi,DWORD PTR [esi]
c000df15:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000df18:	39 d1                	cmp    ecx,edx
c000df1a:	7e 04                	jle    c000df20 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000df1c:	29 c2                	sub    edx,eax
c000df1e:	eb 10                	jmp    c000df30 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000df20:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000df26:	03 0e                	add    ecx,DWORD PTR [esi]
c000df28:	39 d1                	cmp    ecx,edx
c000df2a:	7e 16                	jle    c000df42 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000df2c:	29 c2                	sub    edx,eax
c000df2e:	29 fa                	sub    edx,edi
c000df30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000df33:	8d 14 d0             	lea    edx,[eax+edx*8]
c000df36:	8b 02                	mov    eax,DWORD PTR [edx]
c000df38:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000df3b:	89 03                	mov    DWORD PTR [ebx],eax
c000df3d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000df40:	eb 1d                	jmp    c000df5f <KeGetProcessEnvPair(Process*, int)+0x8c>
c000df42:	83 ec 0c             	sub    esp,0xc
c000df45:	68 82 2f 02 c0       	push   0xc0022f82
c000df4a:	e8 73 15 00 00       	call   c000f4c2 <KePanic(char const*)>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000df58:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000df5f:	89 d8                	mov    eax,ebx
c000df61:	5b                   	pop    ebx
c000df62:	5e                   	pop    esi
c000df63:	5f                   	pop    edi
c000df64:	c2 04 00             	ret    0x4
c000df67:	90                   	nop

c000df68 <KeSetupInterrupts()>:
c000df68:	83 ec 10             	sub    esp,0x10
c000df6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df73:	90                   	nop
c000df74:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000df7c:	7f 5a                	jg     c000dfd8 <KeSetupInterrupts()+0x70>
c000df7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000df86:	66 90                	xchg   ax,ax
c000df88:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000df8d:	7f 41                	jg     c000dfd0 <KeSetupInterrupts()+0x68>
c000df8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df93:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000df9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df9e:	01 d0                	add    eax,edx
c000dfa0:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000dfab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfaf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dfb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfba:	01 d0                	add    eax,edx
c000dfbc:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dfc7:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dfcc:	eb ba                	jmp    c000df88 <KeSetupInterrupts()+0x20>
c000dfce:	66 90                	xchg   ax,ax
c000dfd0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dfd5:	eb 9d                	jmp    c000df74 <KeSetupInterrupts()+0xc>
c000dfd7:	90                   	nop
c000dfd8:	90                   	nop
c000dfd9:	83 c4 10             	add    esp,0x10
c000dfdc:	c3                   	ret    
c000dfdd:	8d 76 00             	lea    esi,[esi+0x0]

c000dfe0 <int_handler>:
c000dfe0:	83 ec 2c             	sub    esp,0x2c
c000dfe3:	90                   	nop
c000dfe4:	a0 c8 cd 02 c0       	mov    al,ds:0xc002cdc8
c000dfe9:	0f b6 c0             	movzx  eax,al
c000dfec:	85 c0                	test   eax,eax
c000dfee:	74 04                	je     c000dff4 <int_handler+0x14>
c000dff0:	fa                   	cli    
c000dff1:	f4                   	hlt    
c000dff2:	eb f0                	jmp    c000dfe4 <int_handler+0x4>
c000dff4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dff8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dffb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfff:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e004:	7e 1a                	jle    c000e020 <int_handler+0x40>
c000e006:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e00b:	7f 13                	jg     c000e020 <int_handler+0x40>
c000e00d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e011:	83 e8 20             	sub    eax,0x20
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	50                   	push   eax
c000e018:	e8 61 b3 00 00       	call   c001937e <HalEndOfInterrupt(int)>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e024:	c1 e0 04             	shl    eax,0x4
c000e027:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000e02c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e030:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e034:	c1 e0 04             	shl    eax,0x4
c000e037:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000e03c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e040:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e048:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e04d:	0f 8f ad 00 00 00    	jg     c000e100 <int_handler+0x120>
c000e053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e057:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e062:	01 d0                	add    eax,edx
c000e064:	8b 00                	mov    eax,DWORD PTR [eax]
c000e066:	85 c0                	test   eax,eax
c000e068:	0f 84 86 00 00 00    	je     c000e0f4 <int_handler+0x114>
c000e06e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e072:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e075:	83 f8 60             	cmp    eax,0x60
c000e078:	75 46                	jne    c000e0c0 <int_handler+0xe0>
c000e07a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e07e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e085:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e089:	01 d0                	add    eax,edx
c000e08b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e08d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e091:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e098:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e09c:	01 ca                	add    edx,ecx
c000e09e:	8b 12                	mov    edx,DWORD PTR [edx]
c000e0a0:	83 ec 08             	sub    esp,0x8
c000e0a3:	52                   	push   edx
c000e0a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e0a8:	ff d0                	call   eax
c000e0aa:	83 c4 10             	add    esp,0x10
c000e0ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e0bd:	eb 4d                	jmp    c000e10c <int_handler+0x12c>
c000e0bf:	90                   	nop
c000e0c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0c4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e0cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e0cf:	01 d0                	add    eax,edx
c000e0d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e0d7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e0de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e0e2:	01 ca                	add    edx,ecx
c000e0e4:	8b 12                	mov    edx,DWORD PTR [edx]
c000e0e6:	83 ec 08             	sub    esp,0x8
c000e0e9:	52                   	push   edx
c000e0ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e0ee:	ff d0                	call   eax
c000e0f0:	83 c4 10             	add    esp,0x10
c000e0f3:	90                   	nop
c000e0f4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e0f9:	e9 4a ff ff ff       	jmp    c000e048 <int_handler+0x68>
c000e0fe:	66 90                	xchg   ax,ax
c000e100:	b8 00 00 00 00       	mov    eax,0x0
c000e105:	ba 00 00 00 00       	mov    edx,0x0
c000e10a:	66 90                	xchg   ax,ax
c000e10c:	83 c4 2c             	add    esp,0x2c
c000e10f:	c3                   	ret    

c000e110 <KeDisplayProgramFault(char const*)>:
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	83 ec 0c             	sub    esp,0xc
c000e116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e11a:	e8 2f 8e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e127:	8b 00                	mov    eax,DWORD PTR [eax]
c000e129:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e12c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e132:	85 c0                	test   eax,eax
c000e134:	74 22                	je     c000e158 <KeDisplayProgramFault(char const*)+0x48>
c000e136:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e13b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e13d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e140:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e146:	6a 04                	push   0x4
c000e148:	6a 0f                	push   0xf
c000e14a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e14e:	50                   	push   eax
c000e14f:	e8 a2 3b 00 00       	call   c0011cf6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e154:	83 c4 10             	add    esp,0x10
c000e157:	90                   	nop
c000e158:	90                   	nop
c000e159:	83 c4 0c             	add    esp,0xc
c000e15c:	c3                   	ret    
c000e15d:	8d 76 00             	lea    esi,[esi+0x0]

c000e160 <KeGeneralProtectionFault(void*, void*)>:
c000e160:	83 ec 0c             	sub    esp,0xc
c000e163:	83 ec 08             	sub    esp,0x8
c000e166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e16e:	e8 ad a7 00 00       	call   c0018920 <HalHandleGeneralProtectionFault(void*, void*)>
c000e173:	83 c4 10             	add    esp,0x10
c000e176:	0f b6 c0             	movzx  eax,al
c000e179:	85 c0                	test   eax,eax
c000e17b:	75 2f                	jne    c000e1ac <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e17d:	83 ec 0c             	sub    esp,0xc
c000e180:	68 9c 2f 02 c0       	push   0xc0022f9c
c000e185:	e8 86 ff ff ff       	call   c000e110 <KeDisplayProgramFault(char const*)>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	83 ec 0c             	sub    esp,0xc
c000e190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e194:	e8 21 a9 00 00       	call   c0018aba <HalDisplayDebugInfo(void*)>
c000e199:	83 c4 10             	add    esp,0x10
c000e19c:	83 ec 0c             	sub    esp,0xc
c000e19f:	6a 00                	push   0x0
c000e1a1:	e8 0e 88 00 00       	call   c00169b4 <Thr::terminateFromIRQ(int)>
c000e1a6:	83 c4 10             	add    esp,0x10
c000e1a9:	eb 05                	jmp    c000e1b0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e1ab:	90                   	nop
c000e1ac:	90                   	nop
c000e1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b0:	83 c4 0c             	add    esp,0xc
c000e1b3:	c3                   	ret    

c000e1b4 <KePageFault(void*, void*)>:
c000e1b4:	83 ec 0c             	sub    esp,0xc
c000e1b7:	83 ec 0c             	sub    esp,0xc
c000e1ba:	68 b5 2f 02 c0       	push   0xc0022fb5
c000e1bf:	e8 8a 8d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	83 ec 08             	sub    esp,0x8
c000e1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d2:	e8 f4 a7 00 00       	call   c00189cb <HalHandlePageFault(void*, void*)>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	0f b6 c0             	movzx  eax,al
c000e1dd:	85 c0                	test   eax,eax
c000e1df:	75 2f                	jne    c000e210 <KePageFault(void*, void*)+0x5c>
c000e1e1:	83 ec 0c             	sub    esp,0xc
c000e1e4:	68 c2 2f 02 c0       	push   0xc0022fc2
c000e1e9:	e8 22 ff ff ff       	call   c000e110 <KeDisplayProgramFault(char const*)>
c000e1ee:	83 c4 10             	add    esp,0x10
c000e1f1:	83 ec 0c             	sub    esp,0xc
c000e1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f8:	e8 bd a8 00 00       	call   c0018aba <HalDisplayDebugInfo(void*)>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	83 ec 0c             	sub    esp,0xc
c000e203:	6a 00                	push   0x0
c000e205:	e8 aa 87 00 00       	call   c00169b4 <Thr::terminateFromIRQ(int)>
c000e20a:	83 c4 10             	add    esp,0x10
c000e20d:	eb 05                	jmp    c000e214 <KePageFault(void*, void*)+0x60>
c000e20f:	90                   	nop
c000e210:	90                   	nop
c000e211:	8d 76 00             	lea    esi,[esi+0x0]
c000e214:	83 c4 0c             	add    esp,0xc
c000e217:	c3                   	ret    

c000e218 <KeNonMaskableInterrupt(void*, void*)>:
c000e218:	83 ec 0c             	sub    esp,0xc
c000e21b:	e8 28 ac 00 00       	call   c0018e48 <HalReceivedNMI()>
c000e220:	90                   	nop
c000e221:	83 c4 0c             	add    esp,0xc
c000e224:	c3                   	ret    
c000e225:	8d 76 00             	lea    esi,[esi+0x0]

c000e228 <KeOtherFault(void*, void*)>:
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	83 ec 0c             	sub    esp,0xc
c000e22e:	68 d0 2f 02 c0       	push   0xc0022fd0
c000e233:	e8 d8 fe ff ff       	call   c000e110 <KeDisplayProgramFault(char const*)>
c000e238:	83 c4 10             	add    esp,0x10
c000e23b:	83 ec 0c             	sub    esp,0xc
c000e23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e242:	e8 73 a8 00 00       	call   c0018aba <HalDisplayDebugInfo(void*)>
c000e247:	83 c4 10             	add    esp,0x10
c000e24a:	83 ec 0c             	sub    esp,0xc
c000e24d:	6a 00                	push   0x0
c000e24f:	e8 60 87 00 00       	call   c00169b4 <Thr::terminateFromIRQ(int)>
c000e254:	83 c4 10             	add    esp,0x10
c000e257:	90                   	nop
c000e258:	83 c4 0c             	add    esp,0xc
c000e25b:	c3                   	ret    

c000e25c <KeOpcodeFault(void*, void*)>:
c000e25c:	55                   	push   ebp
c000e25d:	89 e5                	mov    ebp,esp
c000e25f:	83 ec 08             	sub    esp,0x8
c000e262:	83 ec 08             	sub    esp,0x8
c000e265:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e268:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e26b:	e8 08 a8 00 00       	call   c0018a78 <HalHandleOpcodeFault(void*, void*)>
c000e270:	83 c4 10             	add    esp,0x10
c000e273:	0f b6 c0             	movzx  eax,al
c000e276:	85 c0                	test   eax,eax
c000e278:	75 2e                	jne    c000e2a8 <KeOpcodeFault(void*, void*)+0x4c>
c000e27a:	83 ec 0c             	sub    esp,0xc
c000e27d:	68 f8 2f 02 c0       	push   0xc0022ff8
c000e282:	e8 89 fe ff ff       	call   c000e110 <KeDisplayProgramFault(char const*)>
c000e287:	83 c4 10             	add    esp,0x10
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e290:	e8 25 a8 00 00       	call   c0018aba <HalDisplayDebugInfo(void*)>
c000e295:	83 c4 10             	add    esp,0x10
c000e298:	83 ec 0c             	sub    esp,0xc
c000e29b:	6a 00                	push   0x0
c000e29d:	e8 12 87 00 00       	call   c00169b4 <Thr::terminateFromIRQ(int)>
c000e2a2:	83 c4 10             	add    esp,0x10
c000e2a5:	eb 05                	jmp    c000e2ac <KeOpcodeFault(void*, void*)+0x50>
c000e2a7:	90                   	nop
c000e2a8:	90                   	nop
c000e2a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2ac:	c9                   	leave  
c000e2ad:	c3                   	ret    
c000e2ae:	66 90                	xchg   ax,ax

c000e2b0 <KeDoubleFault(void*, void*)>:
c000e2b0:	55                   	push   ebp
c000e2b1:	89 e5                	mov    ebp,esp
c000e2b3:	83 ec 08             	sub    esp,0x8
c000e2b6:	83 ec 0c             	sub    esp,0xc
c000e2b9:	68 05 30 02 c0       	push   0xc0023005
c000e2be:	e8 ff 11 00 00       	call   c000f4c2 <KePanic(char const*)>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	90                   	nop
c000e2c7:	c9                   	leave  
c000e2c8:	c3                   	ret    
c000e2c9:	90                   	nop

c000e2ca <GDTEntry::setBase(unsigned int)>:
c000e2ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e2d2:	89 c1                	mov    ecx,eax
c000e2d4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e2d8:	c1 e9 10             	shr    ecx,0x10
c000e2db:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e2de:	c1 e8 18             	shr    eax,0x18
c000e2e1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e2e4:	c3                   	ret    
c000e2e5:	90                   	nop

c000e2e6 <GDTEntry::setLimit(unsigned int)>:
c000e2e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e2ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2ee:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e2f1:	66 89 01             	mov    WORD PTR [ecx],ax
c000e2f4:	c1 e8 10             	shr    eax,0x10
c000e2f7:	83 e0 0f             	and    eax,0xf
c000e2fa:	83 e2 f0             	and    edx,0xfffffff0
c000e2fd:	09 d0                	or     eax,edx
c000e2ff:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e302:	c3                   	ret    
c000e303:	90                   	nop

c000e304 <GDT::GDT()>:
c000e304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e308:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e312:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e318:	90                   	nop
c000e319:	c3                   	ret    

c000e31a <GDT::addEntry(GDTEntry)>:
c000e31a:	53                   	push   ebx
c000e31b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e327:	8b 02                	mov    eax,DWORD PTR [edx]
c000e329:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e32d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e330:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e334:	c1 e0 03             	shl    eax,0x3
c000e337:	89 0a                	mov    DWORD PTR [edx],ecx
c000e339:	5b                   	pop    ebx
c000e33a:	c3                   	ret    
c000e33b:	90                   	nop

c000e33c <GDT::getNumberOfEntries()>:
c000e33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e340:	8b 00                	mov    eax,DWORD PTR [eax]
c000e342:	c3                   	ret    
c000e343:	90                   	nop

c000e344 <GDT::flush()>:
c000e344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e348:	8b 10                	mov    edx,DWORD PTR [eax]
c000e34a:	83 c0 04             	add    eax,0x4
c000e34d:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e352:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e359:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e360:	e9 f5 1f ff ff       	jmp    c000035a <loadGDT>
c000e365:	90                   	nop

c000e366 <GDT::setup()>:
c000e366:	57                   	push   edi
c000e367:	56                   	push   esi
c000e368:	53                   	push   ebx
c000e369:	83 ec 30             	sub    esp,0x30
c000e36c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e370:	6a 00                	push   0x0
c000e372:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e376:	56                   	push   esi
c000e377:	e8 4e ff ff ff       	call   c000e2ca <GDTEntry::setBase(unsigned int)>
c000e37c:	6a 00                	push   0x0
c000e37e:	56                   	push   esi
c000e37f:	e8 62 ff ff ff       	call   c000e2e6 <GDTEntry::setLimit(unsigned int)>
c000e384:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e38c:	6a 00                	push   0x0
c000e38e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e392:	56                   	push   esi
c000e393:	e8 32 ff ff ff       	call   c000e2ca <GDTEntry::setBase(unsigned int)>
c000e398:	68 ff ff ff 00       	push   0xffffff
c000e39d:	56                   	push   esi
c000e39e:	e8 43 ff ff ff       	call   c000e2e6 <GDTEntry::setLimit(unsigned int)>
c000e3a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e3a7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e3ab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e3b0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e3b4:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e3b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e3bd:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e3c1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e3c5:	89 f8                	mov    eax,edi
c000e3c7:	89 fa                	mov    edx,edi
c000e3c9:	80 e4 f7             	and    ah,0xf7
c000e3cc:	80 ce 60             	or     dh,0x60
c000e3cf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3d3:	89 c7                	mov    edi,eax
c000e3d5:	80 cc 60             	or     ah,0x60
c000e3d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e3dc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e3e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e3e4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e3e8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e3ec:	83 c4 20             	add    esp,0x20
c000e3ef:	6a 00                	push   0x0
c000e3f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e3f5:	50                   	push   eax
c000e3f6:	e8 cf fe ff ff       	call   c000e2ca <GDTEntry::setBase(unsigned int)>
c000e3fb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e3ff:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e403:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e407:	83 e0 3f             	and    eax,0x3f
c000e40a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e40e:	6a 00                	push   0x0
c000e410:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e414:	50                   	push   eax
c000e415:	e8 b0 fe ff ff       	call   c000e2ca <GDTEntry::setBase(unsigned int)>
c000e41a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e41e:	83 e0 3f             	and    eax,0x3f
c000e421:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e425:	83 c4 0c             	add    esp,0xc
c000e428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e42c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e430:	53                   	push   ebx
c000e431:	e8 e4 fe ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c000e436:	83 c4 0c             	add    esp,0xc
c000e439:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e43d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e441:	53                   	push   ebx
c000e442:	e8 d3 fe ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c000e447:	83 c4 0c             	add    esp,0xc
c000e44a:	57                   	push   edi
c000e44b:	56                   	push   esi
c000e44c:	53                   	push   ebx
c000e44d:	e8 c8 fe ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c000e452:	83 c4 0c             	add    esp,0xc
c000e455:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e459:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e45d:	53                   	push   ebx
c000e45e:	e8 b7 fe ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c000e463:	83 c4 0c             	add    esp,0xc
c000e466:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e46a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e46e:	53                   	push   ebx
c000e46f:	e8 a6 fe ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c000e474:	83 c4 0c             	add    esp,0xc
c000e477:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e47b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e47f:	53                   	push   ebx
c000e480:	e8 95 fe ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c000e485:	83 c4 0c             	add    esp,0xc
c000e488:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e48c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e490:	53                   	push   ebx
c000e491:	e8 84 fe ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c000e496:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e499:	e8 a6 fe ff ff       	call   c000e344 <GDT::flush()>
c000e49e:	83 c4 40             	add    esp,0x40
c000e4a1:	5b                   	pop    ebx
c000e4a2:	5e                   	pop    esi
c000e4a3:	5f                   	pop    edi
c000e4a4:	c3                   	ret    

c000e4a5 <idleFunction(void*)>:
c000e4a5:	83 ec 0c             	sub    esp,0xc
c000e4a8:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000e4af:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000e4b6:	75 01                	jne    c000e4b9 <idleFunction(void*)+0x14>
c000e4b8:	fb                   	sti    
c000e4b9:	e8 25 aa 00 00       	call   c0018ee3 <HalSystemIdle()>
c000e4be:	e8 83 2c 01 00       	call   c0021146 <idleCommon()>
c000e4c3:	eb f4                	jmp    c000e4b9 <idleFunction(void*)+0x14>
c000e4c5:	66 90                	xchg   ax,ax
c000e4c7:	90                   	nop

c000e4c8 <IDTEntry::IDTEntry(bool)>:
c000e4c8:	53                   	push   ebx
c000e4c9:	83 ec 04             	sub    esp,0x4
c000e4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d0:	88 04 24             	mov    BYTE PTR [esp],al
c000e4d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d7:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e4dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4e1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e4e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4e9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e4ec:	83 e2 f0             	and    edx,0xfffffff0
c000e4ef:	83 ca 0e             	or     edx,0xe
c000e4f2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e4f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4f9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e4fc:	83 e2 ef             	and    edx,0xffffffef
c000e4ff:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e502:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e506:	85 c0                	test   eax,eax
c000e508:	74 06                	je     c000e510 <IDTEntry::IDTEntry(bool)+0x48>
c000e50a:	b2 03                	mov    dl,0x3
c000e50c:	eb 06                	jmp    c000e514 <IDTEntry::IDTEntry(bool)+0x4c>
c000e50e:	66 90                	xchg   ax,ax
c000e510:	b2 00                	mov    dl,0x0
c000e512:	66 90                	xchg   ax,ax
c000e514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e518:	83 e2 03             	and    edx,0x3
c000e51b:	89 d3                	mov    ebx,edx
c000e51d:	c1 e3 05             	shl    ebx,0x5
c000e520:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e523:	83 e2 9f             	and    edx,0xffffff9f
c000e526:	88 d1                	mov    cl,dl
c000e528:	88 da                	mov    dl,bl
c000e52a:	09 ca                	or     edx,ecx
c000e52c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e52f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e533:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e536:	83 ca 80             	or     edx,0xffffff80
c000e539:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e53c:	90                   	nop
c000e53d:	83 c4 04             	add    esp,0x4
c000e540:	5b                   	pop    ebx
c000e541:	c3                   	ret    

c000e542 <IDTEntry::setOffset(unsigned int)>:
c000e542:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e54a:	66 89 02             	mov    WORD PTR [edx],ax
c000e54d:	c1 e8 10             	shr    eax,0x10
c000e550:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e554:	c3                   	ret    
c000e555:	90                   	nop
c000e556:	66 90                	xchg   ax,ax

c000e558 <IDT::IDT()>:
c000e558:	90                   	nop
c000e559:	c3                   	ret    

c000e55a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e55a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e55e:	83 c0 30             	add    eax,0x30
c000e561:	c3                   	ret    

c000e562 <IDT::addEntry(IDTEntry, int)>:
c000e562:	53                   	push   ebx
c000e563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e567:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e56b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e56f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e573:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e576:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e57a:	5b                   	pop    ebx
c000e57b:	c3                   	ret    

c000e57c <IDT::addEntry(int, void (*)(), bool)>:
c000e57c:	53                   	push   ebx
c000e57d:	83 ec 10             	sub    esp,0x10
c000e580:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e585:	50                   	push   eax
c000e586:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e58a:	53                   	push   ebx
c000e58b:	e8 38 ff ff ff       	call   c000e4c8 <IDTEntry::IDTEntry(bool)>
c000e590:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e594:	53                   	push   ebx
c000e595:	e8 a8 ff ff ff       	call   c000e542 <IDTEntry::setOffset(unsigned int)>
c000e59a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e59e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e5a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e5a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e5aa:	e8 b3 ff ff ff       	call   c000e562 <IDT::addEntry(IDTEntry, int)>
c000e5af:	83 c4 30             	add    esp,0x30
c000e5b2:	5b                   	pop    ebx
c000e5b3:	c3                   	ret    

c000e5b4 <IDT::flush()>:
c000e5b4:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5c1:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e5c6:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e5cd:	c3                   	ret    

c000e5ce <IDT::setup()>:
c000e5ce:	57                   	push   edi
c000e5cf:	56                   	push   esi
c000e5d0:	53                   	push   ebx
c000e5d1:	83 ec 10             	sub    esp,0x10
c000e5d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e5d8:	6a 00                	push   0x0
c000e5da:	68 f0 03 02 c0       	push   0xc00203f0
c000e5df:	6a 00                	push   0x0
c000e5e1:	53                   	push   ebx
c000e5e2:	e8 95 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e5e7:	6a 00                	push   0x0
c000e5e9:	68 00 04 02 c0       	push   0xc0020400
c000e5ee:	6a 01                	push   0x1
c000e5f0:	53                   	push   ebx
c000e5f1:	e8 86 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e5f6:	83 c4 20             	add    esp,0x20
c000e5f9:	6a 00                	push   0x0
c000e5fb:	68 0a 04 02 c0       	push   0xc002040a
c000e600:	6a 02                	push   0x2
c000e602:	53                   	push   ebx
c000e603:	e8 74 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e608:	6a 00                	push   0x0
c000e60a:	68 14 04 02 c0       	push   0xc0020414
c000e60f:	6a 03                	push   0x3
c000e611:	53                   	push   ebx
c000e612:	e8 65 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e617:	83 c4 20             	add    esp,0x20
c000e61a:	6a 00                	push   0x0
c000e61c:	68 1e 04 02 c0       	push   0xc002041e
c000e621:	6a 04                	push   0x4
c000e623:	53                   	push   ebx
c000e624:	e8 53 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e629:	6a 00                	push   0x0
c000e62b:	68 28 04 02 c0       	push   0xc0020428
c000e630:	6a 05                	push   0x5
c000e632:	53                   	push   ebx
c000e633:	e8 44 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e638:	83 c4 20             	add    esp,0x20
c000e63b:	6a 00                	push   0x0
c000e63d:	68 32 04 02 c0       	push   0xc0020432
c000e642:	6a 06                	push   0x6
c000e644:	53                   	push   ebx
c000e645:	e8 32 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e64a:	6a 00                	push   0x0
c000e64c:	68 3c 04 02 c0       	push   0xc002043c
c000e651:	6a 07                	push   0x7
c000e653:	53                   	push   ebx
c000e654:	e8 23 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e659:	83 c4 20             	add    esp,0x20
c000e65c:	6a 00                	push   0x0
c000e65e:	68 46 04 02 c0       	push   0xc0020446
c000e663:	6a 08                	push   0x8
c000e665:	53                   	push   ebx
c000e666:	e8 11 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e66b:	6a 00                	push   0x0
c000e66d:	68 4e 04 02 c0       	push   0xc002044e
c000e672:	6a 09                	push   0x9
c000e674:	53                   	push   ebx
c000e675:	e8 02 ff ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e67a:	83 c4 20             	add    esp,0x20
c000e67d:	6a 00                	push   0x0
c000e67f:	68 58 04 02 c0       	push   0xc0020458
c000e684:	6a 0a                	push   0xa
c000e686:	53                   	push   ebx
c000e687:	e8 f0 fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e68c:	6a 00                	push   0x0
c000e68e:	68 60 04 02 c0       	push   0xc0020460
c000e693:	6a 0b                	push   0xb
c000e695:	53                   	push   ebx
c000e696:	e8 e1 fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e69b:	83 c4 20             	add    esp,0x20
c000e69e:	6a 00                	push   0x0
c000e6a0:	68 68 04 02 c0       	push   0xc0020468
c000e6a5:	6a 0c                	push   0xc
c000e6a7:	53                   	push   ebx
c000e6a8:	e8 cf fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e6ad:	6a 00                	push   0x0
c000e6af:	68 70 04 02 c0       	push   0xc0020470
c000e6b4:	6a 0d                	push   0xd
c000e6b6:	53                   	push   ebx
c000e6b7:	e8 c0 fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e6bc:	83 c4 20             	add    esp,0x20
c000e6bf:	6a 00                	push   0x0
c000e6c1:	68 8a 04 02 c0       	push   0xc002048a
c000e6c6:	6a 0e                	push   0xe
c000e6c8:	53                   	push   ebx
c000e6c9:	e8 ae fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e6ce:	6a 00                	push   0x0
c000e6d0:	68 92 04 02 c0       	push   0xc0020492
c000e6d5:	6a 0f                	push   0xf
c000e6d7:	53                   	push   ebx
c000e6d8:	e8 9f fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e6dd:	83 c4 20             	add    esp,0x20
c000e6e0:	6a 00                	push   0x0
c000e6e2:	68 9c 04 02 c0       	push   0xc002049c
c000e6e7:	6a 10                	push   0x10
c000e6e9:	53                   	push   ebx
c000e6ea:	e8 8d fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e6ef:	6a 00                	push   0x0
c000e6f1:	68 a6 04 02 c0       	push   0xc00204a6
c000e6f6:	6a 11                	push   0x11
c000e6f8:	53                   	push   ebx
c000e6f9:	e8 7e fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e6fe:	83 c4 20             	add    esp,0x20
c000e701:	6a 00                	push   0x0
c000e703:	68 b0 04 02 c0       	push   0xc00204b0
c000e708:	6a 12                	push   0x12
c000e70a:	53                   	push   ebx
c000e70b:	e8 6c fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e710:	6a 01                	push   0x1
c000e712:	68 4a 05 02 c0       	push   0xc002054a
c000e717:	6a 60                	push   0x60
c000e719:	53                   	push   ebx
c000e71a:	e8 5d fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e71f:	83 c4 20             	add    esp,0x20
c000e722:	6a 00                	push   0x0
c000e724:	68 51 05 02 c0       	push   0xc0020551
c000e729:	6a 20                	push   0x20
c000e72b:	53                   	push   ebx
c000e72c:	e8 4b fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e731:	6a 00                	push   0x0
c000e733:	68 3c 05 02 c0       	push   0xc002053c
c000e738:	6a 21                	push   0x21
c000e73a:	53                   	push   ebx
c000e73b:	e8 3c fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e740:	83 c4 20             	add    esp,0x20
c000e743:	6a 00                	push   0x0
c000e745:	68 43 05 02 c0       	push   0xc0020543
c000e74a:	6a 22                	push   0x22
c000e74c:	53                   	push   ebx
c000e74d:	e8 2a fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e752:	6a 00                	push   0x0
c000e754:	68 ba 04 02 c0       	push   0xc00204ba
c000e759:	6a 23                	push   0x23
c000e75b:	53                   	push   ebx
c000e75c:	e8 1b fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e761:	83 c4 20             	add    esp,0x20
c000e764:	6a 00                	push   0x0
c000e766:	68 c4 04 02 c0       	push   0xc00204c4
c000e76b:	6a 24                	push   0x24
c000e76d:	53                   	push   ebx
c000e76e:	e8 09 fe ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e773:	6a 00                	push   0x0
c000e775:	68 ce 04 02 c0       	push   0xc00204ce
c000e77a:	6a 25                	push   0x25
c000e77c:	53                   	push   ebx
c000e77d:	e8 fa fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e782:	83 c4 20             	add    esp,0x20
c000e785:	6a 00                	push   0x0
c000e787:	68 d8 04 02 c0       	push   0xc00204d8
c000e78c:	6a 26                	push   0x26
c000e78e:	53                   	push   ebx
c000e78f:	e8 e8 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e794:	6a 00                	push   0x0
c000e796:	68 e2 04 02 c0       	push   0xc00204e2
c000e79b:	6a 27                	push   0x27
c000e79d:	53                   	push   ebx
c000e79e:	e8 d9 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e7a3:	83 c4 20             	add    esp,0x20
c000e7a6:	6a 00                	push   0x0
c000e7a8:	68 ec 04 02 c0       	push   0xc00204ec
c000e7ad:	6a 28                	push   0x28
c000e7af:	53                   	push   ebx
c000e7b0:	e8 c7 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e7b5:	6a 00                	push   0x0
c000e7b7:	68 f6 04 02 c0       	push   0xc00204f6
c000e7bc:	6a 29                	push   0x29
c000e7be:	53                   	push   ebx
c000e7bf:	e8 b8 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e7c4:	83 c4 20             	add    esp,0x20
c000e7c7:	6a 00                	push   0x0
c000e7c9:	68 00 05 02 c0       	push   0xc0020500
c000e7ce:	6a 2a                	push   0x2a
c000e7d0:	53                   	push   ebx
c000e7d1:	e8 a6 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e7d6:	6a 00                	push   0x0
c000e7d8:	68 0a 05 02 c0       	push   0xc002050a
c000e7dd:	6a 2b                	push   0x2b
c000e7df:	53                   	push   ebx
c000e7e0:	e8 97 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e7e5:	83 c4 20             	add    esp,0x20
c000e7e8:	6a 00                	push   0x0
c000e7ea:	68 14 05 02 c0       	push   0xc0020514
c000e7ef:	6a 2c                	push   0x2c
c000e7f1:	53                   	push   ebx
c000e7f2:	e8 85 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e7f7:	6a 00                	push   0x0
c000e7f9:	68 1e 05 02 c0       	push   0xc002051e
c000e7fe:	6a 2d                	push   0x2d
c000e800:	53                   	push   ebx
c000e801:	e8 76 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e806:	83 c4 20             	add    esp,0x20
c000e809:	6a 00                	push   0x0
c000e80b:	68 28 05 02 c0       	push   0xc0020528
c000e810:	6a 2e                	push   0x2e
c000e812:	53                   	push   ebx
c000e813:	e8 64 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e818:	6a 00                	push   0x0
c000e81a:	68 32 05 02 c0       	push   0xc0020532
c000e81f:	6a 2f                	push   0x2f
c000e821:	53                   	push   ebx
c000e822:	e8 55 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e827:	83 c4 20             	add    esp,0x20
c000e82a:	6a 00                	push   0x0
c000e82c:	68 8c 06 02 c0       	push   0xc002068c
c000e831:	6a 30                	push   0x30
c000e833:	53                   	push   ebx
c000e834:	e8 43 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e839:	6a 00                	push   0x0
c000e83b:	68 96 06 02 c0       	push   0xc0020696
c000e840:	6a 31                	push   0x31
c000e842:	53                   	push   ebx
c000e843:	e8 34 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e848:	83 c4 20             	add    esp,0x20
c000e84b:	6a 00                	push   0x0
c000e84d:	68 a0 06 02 c0       	push   0xc00206a0
c000e852:	6a 32                	push   0x32
c000e854:	53                   	push   ebx
c000e855:	e8 22 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e85a:	6a 00                	push   0x0
c000e85c:	68 aa 06 02 c0       	push   0xc00206aa
c000e861:	6a 33                	push   0x33
c000e863:	53                   	push   ebx
c000e864:	e8 13 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e869:	83 c4 20             	add    esp,0x20
c000e86c:	6a 00                	push   0x0
c000e86e:	68 b4 06 02 c0       	push   0xc00206b4
c000e873:	6a 34                	push   0x34
c000e875:	53                   	push   ebx
c000e876:	e8 01 fd ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e87b:	6a 00                	push   0x0
c000e87d:	68 be 06 02 c0       	push   0xc00206be
c000e882:	6a 35                	push   0x35
c000e884:	53                   	push   ebx
c000e885:	e8 f2 fc ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e88a:	83 c4 20             	add    esp,0x20
c000e88d:	6a 00                	push   0x0
c000e88f:	68 c8 06 02 c0       	push   0xc00206c8
c000e894:	6a 36                	push   0x36
c000e896:	53                   	push   ebx
c000e897:	e8 e0 fc ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e89c:	6a 00                	push   0x0
c000e89e:	68 d2 06 02 c0       	push   0xc00206d2
c000e8a3:	6a 37                	push   0x37
c000e8a5:	53                   	push   ebx
c000e8a6:	e8 d1 fc ff ff       	call   c000e57c <IDT::addEntry(int, void (*)(), bool)>
c000e8ab:	83 c4 1c             	add    esp,0x1c
c000e8ae:	6a 03                	push   0x3
c000e8b0:	6a 02                	push   0x2
c000e8b2:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000e8b8:	e8 c1 47 00 00       	call   c001307e <VAS::allocatePages(int, int)>
c000e8bd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e8c4:	89 c6                	mov    esi,eax
c000e8c6:	e8 b1 08 00 00       	call   c000f17c <malloc>
c000e8cb:	81 c6 00 20 00 00    	add    esi,0x2000
c000e8d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8d4:	89 c7                	mov    edi,eax
c000e8d6:	e8 65 38 00 00       	call   c0012140 <TSS::TSS()>
c000e8db:	83 c4 0c             	add    esp,0xc
c000e8de:	68 46 04 02 c0       	push   0xc0020446
c000e8e3:	56                   	push   esi
c000e8e4:	57                   	push   edi
c000e8e5:	e8 9a 38 00 00       	call   c0012184 <TSS::setup(unsigned long, unsigned long)>
c000e8ea:	89 c6                	mov    esi,eax
c000e8ec:	58                   	pop    eax
c000e8ed:	5a                   	pop    edx
c000e8ee:	6a 00                	push   0x0
c000e8f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e8f4:	50                   	push   eax
c000e8f5:	e8 ce fb ff ff       	call   c000e4c8 <IDTEntry::IDTEntry(bool)>
c000e8fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8fe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e903:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e90a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e90e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e914:	80 ce 05             	or     dh,0x5
c000e917:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e91b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e91e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e922:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e925:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e928:	e8 87 fc ff ff       	call   c000e5b4 <IDT::flush()>
c000e92d:	83 c4 20             	add    esp,0x20
c000e930:	5b                   	pop    ebx
c000e931:	5e                   	pop    esi
c000e932:	5f                   	pop    edi
c000e933:	c3                   	ret    

c000e934 <CPU::current()>:
c000e934:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e939:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e93f:	c3                   	ret    

c000e940 <operator new(unsigned long)>:
c000e940:	e9 37 08 00 00       	jmp    c000f17c <malloc>

c000e945 <operator delete(void*)>:
c000e945:	e9 52 08 00 00       	jmp    c000f19c <rfree>

c000e94a <disableIRQs()>:
c000e94a:	fa                   	cli    
c000e94b:	c3                   	ret    

c000e94c <enableIRQs()>:
c000e94c:	fb                   	sti    
c000e94d:	c3                   	ret    

c000e94e <lockScheduler()>:
c000e94e:	fa                   	cli    
c000e94f:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000e955:	c3                   	ret    

c000e956 <unlockScheduler()>:
c000e956:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000e95d:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000e964:	75 01                	jne    c000e967 <unlockScheduler()+0x11>
c000e966:	fb                   	sti    
c000e967:	c3                   	ret    

c000e968 <lockStuff()>:
c000e968:	fa                   	cli    
c000e969:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000e96f:	ff 05 cc d6 02 c0    	inc    DWORD PTR ds:0xc002d6cc
c000e975:	c3                   	ret    

c000e976 <unlockStuff()>:
c000e976:	83 ec 0c             	sub    esp,0xc
c000e979:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c000e97e:	48                   	dec    eax
c000e97f:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c000e984:	75 18                	jne    c000e99e <unlockStuff()+0x28>
c000e986:	83 3d c8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c8,0x0
c000e98d:	74 0f                	je     c000e99e <unlockStuff()+0x28>
c000e98f:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c000e999:	e8 66 77 00 00       	call   c0016104 <schedule()>
c000e99e:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000e9a5:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000e9ac:	75 01                	jne    c000e9af <unlockStuff()+0x39>
c000e9ae:	fb                   	sti    
c000e9af:	83 c4 0c             	add    esp,0xc
c000e9b2:	c3                   	ret    

c000e9b3 <Virt::getAKernelVAS()>:
c000e9b3:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c000e9b8:	c3                   	ret    

c000e9b9 <__not_memcpy>:
c000e9b9:	57                   	push   edi
c000e9ba:	56                   	push   esi
c000e9bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e9c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9c7:	89 c7                	mov    edi,eax
c000e9c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9cb:	5e                   	pop    esi
c000e9cc:	5f                   	pop    edi
c000e9cd:	c3                   	ret    

c000e9ce <KeFormatDate(char*, int, int, int, int, bool)>:
c000e9ce:	55                   	push   ebp
c000e9cf:	57                   	push   edi
c000e9d0:	56                   	push   esi
c000e9d1:	be e8 03 00 00       	mov    esi,0x3e8
c000e9d6:	53                   	push   ebx
c000e9d7:	bb 0a 00 00 00       	mov    ebx,0xa
c000e9dc:	81 ec ac 00 00 00    	sub    esp,0xac
c000e9e2:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000e9e7:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000e9ee:	89 c8                	mov    eax,ecx
c000e9f0:	99                   	cdq    
c000e9f1:	f7 fb                	idiv   ebx
c000e9f3:	89 d5                	mov    ebp,edx
c000e9f5:	99                   	cdq    
c000e9f6:	f7 fb                	idiv   ebx
c000e9f8:	8d 42 30             	lea    eax,[edx+0x30]
c000e9fb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9ff:	8d 45 30             	lea    eax,[ebp+0x30]
c000ea02:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000ea0a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000ea0e:	89 c8                	mov    eax,ecx
c000ea10:	99                   	cdq    
c000ea11:	f7 fe                	idiv   esi
c000ea13:	be 64 00 00 00       	mov    esi,0x64
c000ea18:	99                   	cdq    
c000ea19:	f7 fb                	idiv   ebx
c000ea1b:	8d 42 30             	lea    eax,[edx+0x30]
c000ea1e:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000ea22:	89 c8                	mov    eax,ecx
c000ea24:	99                   	cdq    
c000ea25:	f7 fe                	idiv   esi
c000ea27:	99                   	cdq    
c000ea28:	f7 fb                	idiv   ebx
c000ea2a:	31 db                	xor    ebx,ebx
c000ea2c:	8d 42 30             	lea    eax,[edx+0x30]
c000ea2f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ea33:	0f be 8b a4 cd 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd325c]
c000ea3a:	83 f9 59             	cmp    ecx,0x59
c000ea3d:	0f 84 1f 01 00 00    	je     c000eb62 <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000ea43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ea47:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000ea4e:	83 f9 4d             	cmp    ecx,0x4d
c000ea51:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000ea59:	57                   	push   edi
c000ea5a:	57                   	push   edi
c000ea5b:	89 d7                	mov    edi,edx
c000ea5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ea61:	c1 ff 1f             	sar    edi,0x1f
c000ea64:	57                   	push   edi
c000ea65:	52                   	push   edx
c000ea66:	e8 6d 04 00 00       	call   c000eed8 <KeGetDigitsInNumber(long long)>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ea72:	48                   	dec    eax
c000ea73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea77:	75 1c                	jne    c000ea95 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000ea79:	83 f9 44             	cmp    ecx,0x44
c000ea7c:	75 09                	jne    c000ea87 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000ea7e:	80 3d c0 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cdc0,0x0
c000ea85:	eb 0c                	jmp    c000ea93 <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000ea87:	83 f9 4d             	cmp    ecx,0x4d
c000ea8a:	75 60                	jne    c000eaec <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000ea8c:	80 3d c1 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cdc1,0x0
c000ea93:	74 57                	je     c000eaec <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000ea95:	89 d0                	mov    eax,edx
c000ea97:	b9 0a 00 00 00       	mov    ecx,0xa
c000ea9c:	99                   	cdq    
c000ea9d:	f7 f9                	idiv   ecx
c000ea9f:	89 d6                	mov    esi,edx
c000eaa1:	99                   	cdq    
c000eaa2:	f7 f9                	idiv   ecx
c000eaa4:	83 c2 30             	add    edx,0x30
c000eaa7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000eaab:	8d 56 30             	lea    edx,[esi+0x30]
c000eaae:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000eab2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000eab7:	56                   	push   esi
c000eab8:	56                   	push   esi
c000eab9:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000eabd:	57                   	push   edi
c000eabe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000eac2:	56                   	push   esi
c000eac3:	e8 a8 1d ff ff       	call   c0000870 <strcat>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	83 fb 02             	cmp    ebx,0x2
c000eace:	74 34                	je     c000eb04 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000ead0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000ead5:	a0 a8 cd 02 c0       	mov    al,ds:0xc002cda8
c000eada:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000eade:	51                   	push   ecx
c000eadf:	51                   	push   ecx
c000eae0:	57                   	push   edi
c000eae1:	56                   	push   esi
c000eae2:	e8 89 1d ff ff       	call   c0000870 <strcat>
c000eae7:	83 c4 10             	add    esp,0x10
c000eaea:	eb 18                	jmp    c000eb04 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000eaec:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000eaf1:	89 d0                	mov    eax,edx
c000eaf3:	b9 0a 00 00 00       	mov    ecx,0xa
c000eaf8:	99                   	cdq    
c000eaf9:	f7 f9                	idiv   ecx
c000eafb:	83 c2 30             	add    edx,0x30
c000eafe:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000eb02:	eb b3                	jmp    c000eab7 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000eb04:	43                   	inc    ebx
c000eb05:	83 fb 03             	cmp    ebx,0x3
c000eb08:	0f 85 25 ff ff ff    	jne    c000ea33 <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000eb0e:	52                   	push   edx
c000eb0f:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000eb16:	6a 00                	push   0x0
c000eb18:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000eb1f:	e8 cc 19 ff ff       	call   c00004f0 <memset>
c000eb24:	89 34 24             	mov    DWORD PTR [esp],esi
c000eb27:	e8 54 1a ff ff       	call   c0000580 <strlen>
c000eb2c:	83 c4 10             	add    esp,0x10
c000eb2f:	40                   	inc    eax
c000eb30:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000eb37:	72 14                	jb     c000eb4d <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000eb39:	50                   	push   eax
c000eb3a:	50                   	push   eax
c000eb3b:	56                   	push   esi
c000eb3c:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000eb43:	e8 08 1b ff ff       	call   c0000650 <strcpy>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	eb 58                	jmp    c000eba5 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000eb4d:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000eb54:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000eb5b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000eb5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eb60:	eb 43                	jmp    c000eba5 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000eb62:	85 ed                	test   ebp,ebp
c000eb64:	74 2a                	je     c000eb90 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000eb66:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eb6b:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000eb6f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000eb73:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000eb7b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000eb7f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000eb83:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000eb87:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000eb8b:	e9 27 ff ff ff       	jmp    c000eab7 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000eb90:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000eb94:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000eb98:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000eb9c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000eba0:	e9 0d ff ff ff       	jmp    c000eab2 <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000eba5:	81 c4 ac 00 00 00    	add    esp,0xac
c000ebab:	5b                   	pop    ebx
c000ebac:	5e                   	pop    esi
c000ebad:	5f                   	pop    edi
c000ebae:	5d                   	pop    ebp
c000ebaf:	c3                   	ret    

c000ebb0 <KeFormatShortDate(char*, int, int, int, int)>:
c000ebb0:	83 ec 14             	sub    esp,0x14
c000ebb3:	6a 00                	push   0x0
c000ebb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebc9:	e8 00 fe ff ff       	call   c000e9ce <KeFormatDate(char*, int, int, int, int, bool)>
c000ebce:	83 c4 2c             	add    esp,0x2c
c000ebd1:	c3                   	ret    

c000ebd2 <KeFormatLongDate(char*, int, int, int, int)>:
c000ebd2:	83 ec 14             	sub    esp,0x14
c000ebd5:	6a 01                	push   0x1
c000ebd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebeb:	e8 de fd ff ff       	call   c000e9ce <KeFormatDate(char*, int, int, int, int, bool)>
c000ebf0:	83 c4 2c             	add    esp,0x2c
c000ebf3:	c3                   	ret    

c000ebf4 <KeSetLocale(klocale_t)>:
c000ebf4:	57                   	push   edi
c000ebf5:	b9 09 00 00 00       	mov    ecx,0x9
c000ebfa:	56                   	push   esi
c000ebfb:	bf a0 cd 02 c0       	mov    edi,0xc002cda0
c000ec00:	fc                   	cld    
c000ec01:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ec05:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec07:	5e                   	pop    esi
c000ec08:	5f                   	pop    edi
c000ec09:	c3                   	ret    

c000ec0a <KeInitialiseLocale()>:
c000ec0a:	57                   	push   edi
c000ec0b:	56                   	push   esi
c000ec0c:	83 ec 3c             	sub    esp,0x3c
c000ec0f:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000ec17:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000ec1f:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000ec27:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000ec2f:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000ec36:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000ec3e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ec46:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000ec4d:	68 12 30 02 c0       	push   0xc0023012
c000ec52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000ec56:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ec5a:	50                   	push   eax
c000ec5b:	e8 f0 19 ff ff       	call   c0000650 <strcpy>
c000ec60:	83 ec 20             	sub    esp,0x20
c000ec63:	b9 09 00 00 00       	mov    ecx,0x9
c000ec68:	fc                   	cld    
c000ec69:	89 e7                	mov    edi,esp
c000ec6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec6d:	e8 82 ff ff ff       	call   c000ebf4 <KeSetLocale(klocale_t)>
c000ec72:	83 c4 64             	add    esp,0x64
c000ec75:	5e                   	pop    esi
c000ec76:	5f                   	pop    edi
c000ec77:	c3                   	ret    

c000ec78 <KeFormatCurrency(char*, int, long long, long long)>:
c000ec78:	c3                   	ret    

c000ec79 <KeFormatCurrency(char*, int, double)>:
c000ec79:	c3                   	ret    

c000ec7a <KeFormatNumber(char*, long long, long long)>:
c000ec7a:	c3                   	ret    

c000ec7b <KeFormatNumber(char*, double)>:
c000ec7b:	c3                   	ret    

c000ec7c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000ec7c:	55                   	push   ebp
c000ec7d:	57                   	push   edi
c000ec7e:	56                   	push   esi
c000ec7f:	53                   	push   ebx
c000ec80:	83 ec 4c             	sub    esp,0x4c
c000ec83:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ec87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec8b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ec8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec93:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000ec9b:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000eca3:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000ecab:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000ecb3:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ecb8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ecbc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ecc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eccc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ecd0:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000ecd5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ecd9:	89 c2                	mov    edx,eax
c000ecdb:	c1 fa 1f             	sar    edx,0x1f
c000ecde:	52                   	push   edx
c000ecdf:	50                   	push   eax
c000ece0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ece4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ece8:	e8 87 1d 01 00       	call   c0020a74 <__udivdi3>
c000eced:	83 c4 10             	add    esp,0x10
c000ecf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ecf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ecf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecfc:	80 f4 00             	xor    ah,0x0
c000ecff:	89 c7                	mov    edi,eax
c000ed01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed05:	80 f4 00             	xor    ah,0x0
c000ed08:	89 c5                	mov    ebp,eax
c000ed0a:	89 e8                	mov    eax,ebp
c000ed0c:	09 f8                	or     eax,edi
c000ed0e:	74 04                	je     c000ed14 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000ed10:	eb be                	jmp    c000ecd0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000ed12:	66 90                	xchg   ax,ax
c000ed14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed18:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ed1b:	90                   	nop
c000ed1c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ed20:	89 c7                	mov    edi,eax
c000ed22:	89 c5                	mov    ebp,eax
c000ed24:	c1 fd 1f             	sar    ebp,0x1f
c000ed27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed2f:	55                   	push   ebp
c000ed30:	57                   	push   edi
c000ed31:	52                   	push   edx
c000ed32:	50                   	push   eax
c000ed33:	e8 3c 1e 01 00       	call   c0020b74 <__umoddi3>
c000ed38:	83 c4 10             	add    esp,0x10
c000ed3b:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000ed40:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000ed44:	01 c8                	add    eax,ecx
c000ed46:	8a 10                	mov    dl,BYTE PTR [eax]
c000ed48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed4c:	88 10                	mov    BYTE PTR [eax],dl
c000ed4e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ed52:	89 c2                	mov    edx,eax
c000ed54:	c1 fa 1f             	sar    edx,0x1f
c000ed57:	52                   	push   edx
c000ed58:	50                   	push   eax
c000ed59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ed5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ed61:	e8 0e 1d 01 00       	call   c0020a74 <__udivdi3>
c000ed66:	83 c4 10             	add    esp,0x10
c000ed69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ed6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed75:	80 f4 00             	xor    ah,0x0
c000ed78:	89 c3                	mov    ebx,eax
c000ed7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed7e:	80 f4 00             	xor    ah,0x0
c000ed81:	89 c6                	mov    esi,eax
c000ed83:	89 f0                	mov    eax,esi
c000ed85:	09 d8                	or     eax,ebx
c000ed87:	74 03                	je     c000ed8c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000ed89:	eb 91                	jmp    c000ed1c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000ed8b:	90                   	nop
c000ed8c:	90                   	nop
c000ed8d:	83 c4 4c             	add    esp,0x4c
c000ed90:	5b                   	pop    ebx
c000ed91:	5e                   	pop    esi
c000ed92:	5f                   	pop    edi
c000ed93:	5d                   	pop    ebp
c000ed94:	c3                   	ret    
c000ed95:	8d 76 00             	lea    esi,[esi+0x0]

c000ed98 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000ed98:	55                   	push   ebp
c000ed99:	57                   	push   edi
c000ed9a:	56                   	push   esi
c000ed9b:	53                   	push   ebx
c000ed9c:	83 ec 4c             	sub    esp,0x4c
c000ed9f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eda3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eda7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000edab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000edaf:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000edb7:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000edbf:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000edc7:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000edcf:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000edd4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000edd8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eddc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ede1:	79 1d                	jns    c000ee00 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000ede3:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000ede7:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000edec:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000edf0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edf4:	8d 50 01             	lea    edx,[eax+0x1]
c000edf7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000edfb:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000edfe:	66 90                	xchg   ax,ax
c000ee00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ee10:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000ee15:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ee19:	89 c2                	mov    edx,eax
c000ee1b:	c1 fa 1f             	sar    edx,0x1f
c000ee1e:	52                   	push   edx
c000ee1f:	50                   	push   eax
c000ee20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee28:	e8 47 1c 01 00       	call   c0020a74 <__udivdi3>
c000ee2d:	83 c4 10             	add    esp,0x10
c000ee30:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee34:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ee38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee3c:	80 f4 00             	xor    ah,0x0
c000ee3f:	89 c7                	mov    edi,eax
c000ee41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee45:	80 f4 00             	xor    ah,0x0
c000ee48:	89 c5                	mov    ebp,eax
c000ee4a:	89 e8                	mov    eax,ebp
c000ee4c:	09 f8                	or     eax,edi
c000ee4e:	74 04                	je     c000ee54 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000ee50:	eb be                	jmp    c000ee10 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000ee52:	66 90                	xchg   ax,ax
c000ee54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ee5b:	90                   	nop
c000ee5c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ee60:	89 c7                	mov    edi,eax
c000ee62:	89 c5                	mov    ebp,eax
c000ee64:	c1 fd 1f             	sar    ebp,0x1f
c000ee67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee6f:	55                   	push   ebp
c000ee70:	57                   	push   edi
c000ee71:	52                   	push   edx
c000ee72:	50                   	push   eax
c000ee73:	e8 7c 1a 01 00       	call   c00208f4 <__moddi3>
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000ee80:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000ee84:	01 c8                	add    eax,ecx
c000ee86:	8a 10                	mov    dl,BYTE PTR [eax]
c000ee88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee8c:	88 10                	mov    BYTE PTR [eax],dl
c000ee8e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ee92:	89 c2                	mov    edx,eax
c000ee94:	c1 fa 1f             	sar    edx,0x1f
c000ee97:	52                   	push   edx
c000ee98:	50                   	push   eax
c000ee99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ee9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eea1:	e8 02 19 01 00       	call   c00207a8 <__divdi3>
c000eea6:	83 c4 10             	add    esp,0x10
c000eea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eeb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeb5:	80 f4 00             	xor    ah,0x0
c000eeb8:	89 c3                	mov    ebx,eax
c000eeba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebe:	80 f4 00             	xor    ah,0x0
c000eec1:	89 c6                	mov    esi,eax
c000eec3:	89 f0                	mov    eax,esi
c000eec5:	09 d8                	or     eax,ebx
c000eec7:	74 03                	je     c000eecc <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000eec9:	eb 91                	jmp    c000ee5c <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000eecb:	90                   	nop
c000eecc:	90                   	nop
c000eecd:	83 c4 4c             	add    esp,0x4c
c000eed0:	5b                   	pop    ebx
c000eed1:	5e                   	pop    esi
c000eed2:	5f                   	pop    edi
c000eed3:	5d                   	pop    ebp
c000eed4:	c3                   	ret    
c000eed5:	8d 76 00             	lea    esi,[esi+0x0]

c000eed8 <KeGetDigitsInNumber(long long)>:
c000eed8:	56                   	push   esi
c000eed9:	53                   	push   ebx
c000eeda:	83 ec 24             	sub    esp,0x24
c000eedd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eee1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eee5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eeed:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000eef5:	8d 76 00             	lea    esi,[esi+0x0]
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	80 f4 00             	xor    ah,0x0
c000eeff:	89 c3                	mov    ebx,eax
c000ef01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef05:	80 f4 00             	xor    ah,0x0
c000ef08:	89 c6                	mov    esi,eax
c000ef0a:	89 f0                	mov    eax,esi
c000ef0c:	09 d8                	or     eax,ebx
c000ef0e:	74 28                	je     c000ef38 <KeGetDigitsInNumber(long long)+0x60>
c000ef10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef18:	6a 00                	push   0x0
c000ef1a:	6a 0a                	push   0xa
c000ef1c:	52                   	push   edx
c000ef1d:	50                   	push   eax
c000ef1e:	e8 85 18 01 00       	call   c00207a8 <__divdi3>
c000ef23:	83 c4 10             	add    esp,0x10
c000ef26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef2e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000ef33:	eb c3                	jmp    c000eef8 <KeGetDigitsInNumber(long long)+0x20>
c000ef35:	8d 76 00             	lea    esi,[esi+0x0]
c000ef38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef3c:	83 c4 24             	add    esp,0x24
c000ef3f:	5b                   	pop    ebx
c000ef40:	5e                   	pop    esi
c000ef41:	c3                   	ret    
c000ef42:	66 90                	xchg   ax,ax

c000ef44 <KeItoa(unsigned long long, char*)>:
c000ef44:	83 ec 1c             	sub    esp,0x1c
c000ef47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ef57:	6a 0a                	push   0xa
c000ef59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef65:	e8 12 fd ff ff       	call   c000ec7c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	90                   	nop
c000ef6e:	83 c4 1c             	add    esp,0x1c
c000ef71:	c3                   	ret    
c000ef72:	66 90                	xchg   ax,ax

c000ef74 <KeItoa(long long, char*)>:
c000ef74:	83 ec 1c             	sub    esp,0x1c
c000ef77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ef87:	6a 0a                	push   0xa
c000ef89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef95:	e8 fe fd ff ff       	call   c000ed98 <KeBasedSignedIntegerToString(long long, char*, int)>
c000ef9a:	83 c4 10             	add    esp,0x10
c000ef9d:	90                   	nop
c000ef9e:	83 c4 1c             	add    esp,0x1c
c000efa1:	c3                   	ret    
c000efa2:	66 90                	xchg   ax,ax

c000efa4 <KeXtoa(unsigned long long, char*)>:
c000efa4:	83 ec 1c             	sub    esp,0x1c
c000efa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efb7:	6a 10                	push   0x10
c000efb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000efc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000efc5:	e8 b2 fc ff ff       	call   c000ec7c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000efca:	83 c4 10             	add    esp,0x10
c000efcd:	90                   	nop
c000efce:	83 c4 1c             	add    esp,0x1c
c000efd1:	c3                   	ret    

c000efd2 <sbrk>:
c000efd2:	55                   	push   ebp
c000efd3:	57                   	push   edi
c000efd4:	56                   	push   esi
c000efd5:	53                   	push   ebx
c000efd6:	83 ec 1c             	sub    esp,0x1c
c000efd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000efdd:	85 c0                	test   eax,eax
c000efdf:	74 66                	je     c000f047 <sbrk+0x75>
c000efe1:	78 6b                	js     c000f04e <sbrk+0x7c>
c000efe3:	8b 15 50 56 02 c0    	mov    edx,DWORD PTR ds:0xc0025650
c000efe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000efed:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000eff3:	05 ff 0f 00 00       	add    eax,0xfff
c000eff8:	0f 49 e8             	cmovns ebp,eax
c000effb:	c1 fd 0c             	sar    ebp,0xc
c000effe:	bb 00 00 00 00       	mov    ebx,0x0
c000f003:	8b 35 f0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cef0
c000f009:	8b 3d 50 56 02 c0    	mov    edi,DWORD PTR ds:0xc0025650
c000f00f:	e8 a8 06 00 00       	call   c000f6bc <Phys::allocatePage()>
c000f014:	68 01 04 00 00       	push   0x401
c000f019:	57                   	push   edi
c000f01a:	50                   	push   eax
c000f01b:	56                   	push   esi
c000f01c:	e8 55 3f 00 00       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f021:	81 05 50 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0025650,0x1000
c000f02b:	83 c3 01             	add    ebx,0x1
c000f02e:	83 c4 10             	add    esp,0x10
c000f031:	39 dd                	cmp    ebp,ebx
c000f033:	75 ce                	jne    c000f003 <sbrk+0x31>
c000f035:	0f 20 d8             	mov    eax,cr3
c000f038:	0f 22 d8             	mov    cr3,eax
c000f03b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f03f:	83 c4 1c             	add    esp,0x1c
c000f042:	5b                   	pop    ebx
c000f043:	5e                   	pop    esi
c000f044:	5f                   	pop    edi
c000f045:	5d                   	pop    ebp
c000f046:	c3                   	ret    
c000f047:	a1 50 56 02 c0       	mov    eax,ds:0xc0025650
c000f04c:	eb f1                	jmp    c000f03f <sbrk+0x6d>
c000f04e:	83 ec 08             	sub    esp,0x8
c000f051:	50                   	push   eax
c000f052:	68 18 30 02 c0       	push   0xc0023018
c000f057:	e8 f2 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f064:	eb d9                	jmp    c000f03f <sbrk+0x6d>

c000f066 <sbrk_thunk>:
c000f066:	83 ec 0c             	sub    esp,0xc
c000f069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f06d:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f072:	7f 10                	jg     c000f084 <sbrk_thunk+0x1e>
c000f074:	83 ec 0c             	sub    esp,0xc
c000f077:	50                   	push   eax
c000f078:	e8 55 ff ff ff       	call   c000efd2 <sbrk>
c000f07d:	83 c4 10             	add    esp,0x10
c000f080:	83 c4 0c             	add    esp,0xc
c000f083:	c3                   	ret    
c000f084:	83 ec 08             	sub    esp,0x8
c000f087:	50                   	push   eax
c000f088:	68 48 30 02 c0       	push   0xc0023048
c000f08d:	e8 bc 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f092:	83 c4 10             	add    esp,0x10
c000f095:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f09a:	eb e4                	jmp    c000f080 <sbrk_thunk+0x1a>

c000f09c <mmap>:
c000f09c:	55                   	push   ebp
c000f09d:	57                   	push   edi
c000f09e:	56                   	push   esi
c000f09f:	53                   	push   ebx
c000f0a0:	83 ec 18             	sub    esp,0x18
c000f0a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0a7:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f0ad:	89 fb                	mov    ebx,edi
c000f0af:	c1 eb 0c             	shr    ebx,0xc
c000f0b2:	53                   	push   ebx
c000f0b3:	e8 e5 37 00 00       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c000f0b8:	89 c5                	mov    ebp,eax
c000f0ba:	83 c4 10             	add    esp,0x10
c000f0bd:	85 db                	test   ebx,ebx
c000f0bf:	7e 2f                	jle    c000f0f0 <mmap+0x54>
c000f0c1:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f0c7:	01 c7                	add    edi,eax
c000f0c9:	89 c3                	mov    ebx,eax
c000f0cb:	8b 35 f0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cef0
c000f0d1:	e8 e6 05 00 00       	call   c000f6bc <Phys::allocatePage()>
c000f0d6:	68 01 04 00 00       	push   0x401
c000f0db:	53                   	push   ebx
c000f0dc:	50                   	push   eax
c000f0dd:	56                   	push   esi
c000f0de:	e8 93 3e 00 00       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f0e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f0e9:	83 c4 10             	add    esp,0x10
c000f0ec:	39 fb                	cmp    ebx,edi
c000f0ee:	75 db                	jne    c000f0cb <mmap+0x2f>
c000f0f0:	89 e8                	mov    eax,ebp
c000f0f2:	83 c4 0c             	add    esp,0xc
c000f0f5:	5b                   	pop    ebx
c000f0f6:	5e                   	pop    esi
c000f0f7:	5f                   	pop    edi
c000f0f8:	5d                   	pop    ebp
c000f0f9:	c3                   	ret    

c000f0fa <munmap>:
c000f0fa:	83 ec 18             	sub    esp,0x18
c000f0fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f101:	e8 95 3a 00 00       	call   c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c000f106:	b8 00 00 00 00       	mov    eax,0x0
c000f10b:	83 c4 1c             	add    esp,0x1c
c000f10e:	c3                   	ret    

c000f10f <liballoc_lock()>:
c000f10f:	fa                   	cli    
c000f110:	83 05 d0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6d0,0x1
c000f117:	b8 00 00 00 00       	mov    eax,0x0
c000f11c:	c3                   	ret    

c000f11d <liballoc_unlock()>:
c000f11d:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f125:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000f12c:	75 01                	jne    c000f12f <liballoc_unlock()+0x12>
c000f12e:	fb                   	sti    
c000f12f:	b8 00 00 00 00       	mov    eax,0x0
c000f134:	c3                   	ret    

c000f135 <liballoc_alloc(int)>:
c000f135:	83 ec 10             	sub    esp,0x10
c000f138:	6a 01                	push   0x1
c000f13a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f13e:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000f144:	e8 35 3f 00 00       	call   c001307e <VAS::allocatePages(int, int)>
c000f149:	83 c4 1c             	add    esp,0x1c
c000f14c:	c3                   	ret    

c000f14d <liballoc_free(void*, int)>:
c000f14d:	83 ec 14             	sub    esp,0x14
c000f150:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f154:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000f15a:	e8 79 3b 00 00       	call   c0012cd8 <VAS::freeAllocatedPages(unsigned long)>
c000f15f:	b8 00 00 00 00       	mov    eax,0x0
c000f164:	83 c4 1c             	add    esp,0x1c
c000f167:	c3                   	ret    

c000f168 <realloc>:
c000f168:	83 ec 14             	sub    esp,0x14
c000f16b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f16f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f173:	e8 0d 26 ff ff       	call   c0001785 <dlrealloc>
c000f178:	83 c4 1c             	add    esp,0x1c
c000f17b:	c3                   	ret    

c000f17c <malloc>:
c000f17c:	83 ec 18             	sub    esp,0x18
c000f17f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f183:	e8 c0 20 ff ff       	call   c0001248 <dlmalloc>
c000f188:	83 c4 1c             	add    esp,0x1c
c000f18b:	c3                   	ret    

c000f18c <free>:
c000f18c:	83 ec 18             	sub    esp,0x18
c000f18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f193:	e8 ee 1b ff ff       	call   c0000d86 <dlfree>
c000f198:	83 c4 1c             	add    esp,0x1c
c000f19b:	c3                   	ret    

c000f19c <rfree>:
c000f19c:	83 ec 18             	sub    esp,0x18
c000f19f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1a3:	e8 de 1b ff ff       	call   c0000d86 <dlfree>
c000f1a8:	83 c4 1c             	add    esp,0x1c
c000f1ab:	c3                   	ret    

c000f1ac <calloc>:
c000f1ac:	56                   	push   esi
c000f1ad:	53                   	push   ebx
c000f1ae:	83 ec 10             	sub    esp,0x10
c000f1b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f1b5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 bc ff ff ff       	call   c000f17c <malloc>
c000f1c0:	89 c6                	mov    esi,eax
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	53                   	push   ebx
c000f1c6:	6a 00                	push   0x0
c000f1c8:	50                   	push   eax
c000f1c9:	e8 22 13 ff ff       	call   c00004f0 <memset>
c000f1ce:	89 f0                	mov    eax,esi
c000f1d0:	83 c4 14             	add    esp,0x14
c000f1d3:	5b                   	pop    ebx
c000f1d4:	5e                   	pop    esi
c000f1d5:	c3                   	ret    
c000f1d6:	66 90                	xchg   ax,ax

c000f1d8 <KeMailboxTryPost(Mailbox*, void*)>:
c000f1d8:	83 ec 10             	sub    esp,0x10
c000f1db:	fa                   	cli    
c000f1dc:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f1e1:	83 c0 01             	add    eax,0x1
c000f1e4:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f1e9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f1ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1f5:	85 c0                	test   eax,eax
c000f1f7:	75 23                	jne    c000f21c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f1f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f201:	89 10                	mov    DWORD PTR [eax],edx
c000f203:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f207:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f20a:	8d 50 01             	lea    edx,[eax+0x1]
c000f20d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f211:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f214:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f219:	8d 76 00             	lea    esi,[esi+0x0]
c000f21c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f224:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f229:	85 c0                	test   eax,eax
c000f22b:	75 03                	jne    c000f230 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f22d:	fb                   	sti    
c000f22e:	66 90                	xchg   ax,ax
c000f230:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f234:	83 c4 10             	add    esp,0x10
c000f237:	c3                   	ret    

c000f238 <KeMailboxTryGet(Mailbox*, void**)>:
c000f238:	83 ec 10             	sub    esp,0x10
c000f23b:	fa                   	cli    
c000f23c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f241:	83 c0 01             	add    eax,0x1
c000f244:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f249:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f24e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f255:	83 f8 01             	cmp    eax,0x1
c000f258:	75 22                	jne    c000f27c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f25a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f25e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f260:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f264:	89 10                	mov    DWORD PTR [eax],edx
c000f266:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f26a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f26d:	8d 50 ff             	lea    edx,[eax-0x1]
c000f270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f274:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f277:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f27c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f284:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f289:	85 c0                	test   eax,eax
c000f28b:	75 03                	jne    c000f290 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f28d:	fb                   	sti    
c000f28e:	66 90                	xchg   ax,ax
c000f290:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f294:	83 c4 10             	add    esp,0x10
c000f297:	c3                   	ret    

c000f298 <KeMailboxCreate()>:
c000f298:	83 ec 1c             	sub    esp,0x1c
c000f29b:	83 ec 0c             	sub    esp,0xc
c000f29e:	6a 08                	push   0x8
c000f2a0:	e8 d7 fe ff ff       	call   c000f17c <malloc>
c000f2a5:	83 c4 10             	add    esp,0x10
c000f2a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f2b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f2c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2c5:	83 c4 1c             	add    esp,0x1c
c000f2c8:	c3                   	ret    
c000f2c9:	8d 76 00             	lea    esi,[esi+0x0]

c000f2cc <KeMailboxPost(Mailbox*, void*)>:
c000f2cc:	83 ec 1c             	sub    esp,0x1c
c000f2cf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f2d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f2d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f2dc:	e8 f7 fe ff ff       	call   c000f1d8 <KeMailboxTryPost(Mailbox*, void*)>
c000f2e1:	83 c4 08             	add    esp,0x8
c000f2e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f2e8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2ec:	83 f0 01             	xor    eax,0x1
c000f2ef:	0f b6 c0             	movzx  eax,al
c000f2f2:	85 c0                	test   eax,eax
c000f2f4:	74 26                	je     c000f31c <KeMailboxPost(Mailbox*, void*)+0x50>
c000f2f6:	fa                   	cli    
c000f2f7:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f2fc:	83 c0 01             	add    eax,0x1
c000f2ff:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f304:	e8 fb 6d 00 00       	call   c0016104 <schedule()>
c000f309:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f311:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f316:	85 c0                	test   eax,eax
c000f318:	75 02                	jne    c000f31c <KeMailboxPost(Mailbox*, void*)+0x50>
c000f31a:	fb                   	sti    
c000f31b:	90                   	nop
c000f31c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f321:	85 c0                	test   eax,eax
c000f323:	75 03                	jne    c000f328 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f325:	eb ad                	jmp    c000f2d4 <KeMailboxPost(Mailbox*, void*)+0x8>
c000f327:	90                   	nop
c000f328:	90                   	nop
c000f329:	83 c4 1c             	add    esp,0x1c
c000f32c:	c3                   	ret    
c000f32d:	8d 76 00             	lea    esi,[esi+0x0]

c000f330 <KeMailboxGet(Mailbox*, void**)>:
c000f330:	83 ec 1c             	sub    esp,0x1c
c000f333:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f338:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f33c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f340:	e8 f3 fe ff ff       	call   c000f238 <KeMailboxTryGet(Mailbox*, void**)>
c000f345:	83 c4 08             	add    esp,0x8
c000f348:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f34c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f350:	83 f0 01             	xor    eax,0x1
c000f353:	0f b6 c0             	movzx  eax,al
c000f356:	85 c0                	test   eax,eax
c000f358:	74 26                	je     c000f380 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f35a:	fa                   	cli    
c000f35b:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f360:	83 c0 01             	add    eax,0x1
c000f363:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f368:	e8 97 6d 00 00       	call   c0016104 <schedule()>
c000f36d:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f375:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f37a:	85 c0                	test   eax,eax
c000f37c:	75 02                	jne    c000f380 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f37e:	fb                   	sti    
c000f37f:	90                   	nop
c000f380:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f385:	85 c0                	test   eax,eax
c000f387:	75 03                	jne    c000f38c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f389:	eb ad                	jmp    c000f338 <KeMailboxGet(Mailbox*, void**)+0x8>
c000f38b:	90                   	nop
c000f38c:	90                   	nop
c000f38d:	83 c4 1c             	add    esp,0x1c
c000f390:	c3                   	ret    
c000f391:	8d 76 00             	lea    esi,[esi+0x0]

c000f394 <KeMailboxDestroy(Mailbox*)>:
c000f394:	83 ec 0c             	sub    esp,0xc
c000f397:	83 ec 0c             	sub    esp,0xc
c000f39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f39e:	e8 e9 fd ff ff       	call   c000f18c <free>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	90                   	nop
c000f3a7:	83 c4 0c             	add    esp,0xc
c000f3aa:	c3                   	ret    

c000f3ab <KeEntryPoint>:
c000f3ab:	57                   	push   edi
c000f3ac:	bf f9 03 00 00       	mov    edi,0x3f9
c000f3b1:	56                   	push   esi
c000f3b2:	31 f6                	xor    esi,esi
c000f3b4:	53                   	push   ebx
c000f3b5:	89 fa                	mov    edx,edi
c000f3b7:	83 ec 2c             	sub    esp,0x2c
c000f3ba:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f3bf:	a3 c4 cd 02 c0       	mov    ds:0xc002cdc4,eax
c000f3c4:	89 f0                	mov    eax,esi
c000f3c6:	ee                   	out    dx,al
c000f3c7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f3cc:	b0 80                	mov    al,0x80
c000f3ce:	89 da                	mov    edx,ebx
c000f3d0:	ee                   	out    dx,al
c000f3d1:	b1 03                	mov    cl,0x3
c000f3d3:	ba f8 03 00 00       	mov    edx,0x3f8
c000f3d8:	88 c8                	mov    al,cl
c000f3da:	ee                   	out    dx,al
c000f3db:	89 f0                	mov    eax,esi
c000f3dd:	89 fa                	mov    edx,edi
c000f3df:	ee                   	out    dx,al
c000f3e0:	88 c8                	mov    al,cl
c000f3e2:	89 da                	mov    edx,ebx
c000f3e4:	ee                   	out    dx,al
c000f3e5:	b0 c7                	mov    al,0xc7
c000f3e7:	ba fa 03 00 00       	mov    edx,0x3fa
c000f3ec:	ee                   	out    dx,al
c000f3ed:	b0 0b                	mov    al,0xb
c000f3ef:	ba fc 03 00 00       	mov    edx,0x3fc
c000f3f4:	ee                   	out    dx,al
c000f3f5:	68 57 30 02 c0       	push   0xc0023057
c000f3fa:	e8 4f 7b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f3ff:	e8 00 d4 ff ff       	call   c000c804 <KeDisplaySplashScreen()>
c000f404:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f409:	05 ff 0f 00 00       	add    eax,0xfff
c000f40e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f413:	89 04 24             	mov    DWORD PTR [esp],eax
c000f416:	e8 32 04 00 00       	call   c000f84d <Phys::physicalMemorySetup(unsigned int)>
c000f41b:	e8 51 36 00 00       	call   c0012a71 <Virt::virtualMemorySetup()>
c000f420:	e8 29 d3 ff ff       	call   c000c74e <KeInitialiseAtexit()>
c000f425:	c7 04 24 6e 30 02 c0 	mov    DWORD PTR [esp],0xc002306e
c000f42c:	e8 1d 7b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f431:	58                   	pop    eax
c000f432:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f436:	53                   	push   ebx
c000f437:	e8 1c 39 00 00       	call   c0012d58 <VAS::VAS()>
c000f43c:	c7 04 24 7e 30 02 c0 	mov    DWORD PTR [esp],0xc002307e
c000f443:	89 1d f0 ce 02 c0    	mov    DWORD PTR ds:0xc002cef0,ebx
c000f449:	e8 00 7b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f44e:	e8 3b 18 01 00       	call   c0020c8e <_init>
c000f453:	c7 04 24 92 30 02 c0 	mov    DWORD PTR [esp],0xc0023092
c000f45a:	e8 ef 7a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f45f:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000f466:	e8 11 fd ff ff       	call   c000f17c <malloc>
c000f46b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f46e:	89 c6                	mov    esi,eax
c000f470:	e8 53 e4 ff ff       	call   c000d8c8 <Computer::Computer()>
c000f475:	5a                   	pop    edx
c000f476:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000f47c:	59                   	pop    ecx
c000f47d:	56                   	push   esi
c000f47e:	68 a1 30 02 c0       	push   0xc00230a1
c000f483:	e8 c6 7a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f488:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000f48d:	8b 10                	mov    edx,DWORD PTR [eax]
c000f48f:	53                   	push   ebx
c000f490:	6a 00                	push   0x0
c000f492:	6a 00                	push   0x0
c000f494:	50                   	push   eax
c000f495:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f498:	83 c4 14             	add    esp,0x14
c000f49b:	53                   	push   ebx
c000f49c:	e8 6d 39 00 00       	call   c0012e0e <VAS::~VAS()>
c000f4a1:	83 c4 30             	add    esp,0x30
c000f4a4:	5b                   	pop    ebx
c000f4a5:	5e                   	pop    esi
c000f4a6:	5f                   	pop    edi
c000f4a7:	c3                   	ret    

c000f4a8 <Mutex::Mutex()>:
c000f4a8:	83 ec 0c             	sub    esp,0xc
c000f4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4af:	83 ec 08             	sub    esp,0x8
c000f4b2:	6a 01                	push   0x1
c000f4b4:	50                   	push   eax
c000f4b5:	e8 4e 0c 00 00       	call   c0010108 <Semaphore::Semaphore(int)>
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	90                   	nop
c000f4be:	83 c4 0c             	add    esp,0xc
c000f4c1:	c3                   	ret    

c000f4c2 <KePanic(char const*)>:
c000f4c2:	c6 05 c8 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cdc8,0x1
c000f4c9:	e9 bd 9b 00 00       	jmp    c001908b <HalPanic(char const*)>

c000f4ce <Phys::allocateDMA(unsigned long)>:
c000f4ce:	55                   	push   ebp
c000f4cf:	31 ed                	xor    ebp,ebp
c000f4d1:	57                   	push   edi
c000f4d2:	56                   	push   esi
c000f4d3:	31 f6                	xor    esi,esi
c000f4d5:	53                   	push   ebx
c000f4d6:	31 db                	xor    ebx,ebx
c000f4d8:	83 ec 1c             	sub    esp,0x1c
c000f4db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4df:	05 ff 0f 00 00       	add    eax,0xfff
c000f4e4:	c1 e8 0c             	shr    eax,0xc
c000f4e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4eb:	31 c0                	xor    eax,eax
c000f4ed:	eb 1b                	jmp    c000f50a <Phys::allocateDMA(unsigned long)+0x3c>
c000f4ef:	8d 78 01             	lea    edi,[eax+0x1]
c000f4f2:	85 c0                	test   eax,eax
c000f4f4:	0f 44 eb             	cmove  ebp,ebx
c000f4f7:	0f 44 f3             	cmove  esi,ebx
c000f4fa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f4fe:	74 37                	je     c000f537 <Phys::allocateDMA(unsigned long)+0x69>
c000f500:	89 f8                	mov    eax,edi
c000f502:	83 c3 01             	add    ebx,0x1
c000f505:	83 fb 0f             	cmp    ebx,0xf
c000f508:	7f 13                	jg     c000f51d <Phys::allocateDMA(unsigned long)+0x4f>
c000f50a:	80 bb e4 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd321c],0x0
c000f511:	74 dc                	je     c000f4ef <Phys::allocateDMA(unsigned long)+0x21>
c000f513:	31 c0                	xor    eax,eax
c000f515:	83 c3 01             	add    ebx,0x1
c000f518:	83 fb 0f             	cmp    ebx,0xf
c000f51b:	7e ed                	jle    c000f50a <Phys::allocateDMA(unsigned long)+0x3c>
c000f51d:	83 ec 0c             	sub    esp,0xc
c000f520:	68 b8 30 02 c0       	push   0xc00230b8
c000f525:	e8 98 ff ff ff       	call   c000f4c2 <KePanic(char const*)>
c000f52a:	83 c4 10             	add    esp,0x10
c000f52d:	31 c0                	xor    eax,eax
c000f52f:	83 c4 1c             	add    esp,0x1c
c000f532:	5b                   	pop    ebx
c000f533:	5e                   	pop    esi
c000f534:	5f                   	pop    edi
c000f535:	5d                   	pop    ebp
c000f536:	c3                   	ret    
c000f537:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f53b:	89 f2                	mov    edx,esi
c000f53d:	c1 fa 04             	sar    edx,0x4
c000f540:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f544:	01 f1                	add    ecx,esi
c000f546:	8d 51 0e             	lea    edx,[ecx+0xe]
c000f549:	83 e9 01             	sub    ecx,0x1
c000f54c:	0f 48 ca             	cmovs  ecx,edx
c000f54f:	c1 f9 04             	sar    ecx,0x4
c000f552:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000f556:	74 06                	je     c000f55e <Phys::allocateDMA(unsigned long)+0x90>
c000f558:	89 eb                	mov    ebx,ebp
c000f55a:	31 c0                	xor    eax,eax
c000f55c:	eb b7                	jmp    c000f515 <Phys::allocateDMA(unsigned long)+0x47>
c000f55e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f562:	85 d2                	test   edx,edx
c000f564:	74 17                	je     c000f57d <Phys::allocateDMA(unsigned long)+0xaf>
c000f566:	8d 96 e4 cd 02 c0    	lea    edx,[esi-0x3ffd321c]
c000f56c:	8d 84 06 e5 cd 02 c0 	lea    eax,[esi+eax*1-0x3ffd321b]
c000f573:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f576:	83 c2 01             	add    edx,0x1
c000f579:	39 d0                	cmp    eax,edx
c000f57b:	75 f6                	jne    c000f573 <Phys::allocateDMA(unsigned long)+0xa5>
c000f57d:	8b 15 dc cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cddc
c000f583:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f587:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f58b:	01 c2                	add    edx,eax
c000f58d:	89 15 dc cd 02 c0    	mov    DWORD PTR ds:0xc002cddc,edx
c000f593:	85 c9                	test   ecx,ecx
c000f595:	74 17                	je     c000f5ae <Phys::allocateDMA(unsigned long)+0xe0>
c000f597:	83 ec 0c             	sub    esp,0xc
c000f59a:	68 b8 30 02 c0       	push   0xc00230b8
c000f59f:	e8 1e ff ff ff       	call   c000f4c2 <KePanic(char const*)>
c000f5a4:	83 c4 10             	add    esp,0x10
c000f5a7:	89 f8                	mov    eax,edi
c000f5a9:	e9 54 ff ff ff       	jmp    c000f502 <Phys::allocateDMA(unsigned long)+0x34>
c000f5ae:	c1 e6 0c             	shl    esi,0xc
c000f5b1:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000f5b7:	e9 73 ff ff ff       	jmp    c000f52f <Phys::allocateDMA(unsigned long)+0x61>

c000f5bc <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5c0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f5c6:	a1 dc cd 02 c0       	mov    eax,ds:0xc002cddc
c000f5cb:	c1 ea 0c             	shr    edx,0xc
c000f5ce:	29 d0                	sub    eax,edx
c000f5d0:	a3 dc cd 02 c0       	mov    ds:0xc002cddc,eax
c000f5d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5d9:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000f5de:	c1 e8 0c             	shr    eax,0xc
c000f5e1:	85 d2                	test   edx,edx
c000f5e3:	74 11                	je     c000f5f6 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000f5e5:	05 e4 cd 02 c0       	add    eax,0xc002cde4
c000f5ea:	01 c2                	add    edx,eax
c000f5ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f5ef:	83 c0 01             	add    eax,0x1
c000f5f2:	39 d0                	cmp    eax,edx
c000f5f4:	75 f6                	jne    c000f5ec <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000f5f6:	c3                   	ret    

c000f5f7 <Phys::setPageState(unsigned long, bool)>:
c000f5f7:	57                   	push   edi
c000f5f8:	56                   	push   esi
c000f5f9:	8b 35 54 56 02 c0    	mov    esi,DWORD PTR ds:0xc0025654
c000f5ff:	53                   	push   ebx
c000f600:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000f605:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f609:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f60d:	89 ca                	mov    edx,ecx
c000f60f:	83 e1 07             	and    ecx,0x7
c000f612:	c1 ea 03             	shr    edx,0x3
c000f615:	0f b6 c0             	movzx  eax,al
c000f618:	d3 c3                	rol    ebx,cl
c000f61a:	01 d6                	add    esi,edx
c000f61c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000f61f:	d3 e0                	shl    eax,cl
c000f621:	21 fb                	and    ebx,edi
c000f623:	88 1e                	mov    BYTE PTR [esi],bl
c000f625:	8b 1d 54 56 02 c0    	mov    ebx,DWORD PTR ds:0xc0025654
c000f62b:	01 da                	add    edx,ebx
c000f62d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000f62f:	09 c8                	or     eax,ecx
c000f631:	88 02                	mov    BYTE PTR [edx],al
c000f633:	5b                   	pop    ebx
c000f634:	5e                   	pop    esi
c000f635:	5f                   	pop    edi
c000f636:	c3                   	ret    

c000f637 <Phys::getPageState(unsigned long)>:
c000f637:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f63b:	8b 15 54 56 02 c0    	mov    edx,DWORD PTR ds:0xc0025654
c000f641:	89 c8                	mov    eax,ecx
c000f643:	83 e1 07             	and    ecx,0x7
c000f646:	c1 e8 03             	shr    eax,0x3
c000f649:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f64d:	d3 f8                	sar    eax,cl
c000f64f:	83 e0 01             	and    eax,0x1
c000f652:	c3                   	ret    

c000f653 <Phys::freePage(unsigned long)>:
c000f653:	53                   	push   ebx
c000f654:	83 ec 08             	sub    esp,0x8
c000f657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f65b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000f661:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000f667:	76 41                	jbe    c000f6aa <Phys::freePage(unsigned long)+0x57>
c000f669:	c1 e8 0c             	shr    eax,0xc
c000f66c:	50                   	push   eax
c000f66d:	89 c3                	mov    ebx,eax
c000f66f:	e8 c3 ff ff ff       	call   c000f637 <Phys::getPageState(unsigned long)>
c000f674:	5a                   	pop    edx
c000f675:	84 c0                	test   al,al
c000f677:	74 20                	je     c000f699 <Phys::freePage(unsigned long)+0x46>
c000f679:	a1 dc cd 02 c0       	mov    eax,ds:0xc002cddc
c000f67e:	83 ec 08             	sub    esp,0x8
c000f681:	6a 00                	push   0x0
c000f683:	53                   	push   ebx
c000f684:	83 e8 01             	sub    eax,0x1
c000f687:	a3 dc cd 02 c0       	mov    ds:0xc002cddc,eax
c000f68c:	e8 66 ff ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000f691:	83 c4 10             	add    esp,0x10
c000f694:	83 c4 08             	add    esp,0x8
c000f697:	5b                   	pop    ebx
c000f698:	c3                   	ret    
c000f699:	c7 44 24 10 bd 31 02 c0 	mov    DWORD PTR [esp+0x10],0xc00231bd
c000f6a1:	83 c4 08             	add    esp,0x8
c000f6a4:	5b                   	pop    ebx
c000f6a5:	e9 18 fe ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c000f6aa:	68 00 10 00 00       	push   0x1000
c000f6af:	50                   	push   eax
c000f6b0:	e8 07 ff ff ff       	call   c000f5bc <Phys::freeDMA(unsigned long, unsigned long)>
c000f6b5:	59                   	pop    ecx
c000f6b6:	5b                   	pop    ebx
c000f6b7:	83 c4 08             	add    esp,0x8
c000f6ba:	5b                   	pop    ebx
c000f6bb:	c3                   	ret    

c000f6bc <Phys::allocatePage()>:
c000f6bc:	56                   	push   esi
c000f6bd:	53                   	push   ebx
c000f6be:	83 ec 14             	sub    esp,0x14
c000f6c1:	8b 35 d0 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cdd0
c000f6c7:	89 f3                	mov    ebx,esi
c000f6c9:	eb 0a                	jmp    c000f6d5 <Phys::allocatePage()+0x19>
c000f6cb:	89 1d d0 cd 02 c0    	mov    DWORD PTR ds:0xc002cdd0,ebx
c000f6d1:	39 de                	cmp    esi,ebx
c000f6d3:	74 26                	je     c000f6fb <Phys::allocatePage()+0x3f>
c000f6d5:	53                   	push   ebx
c000f6d6:	e8 5c ff ff ff       	call   c000f637 <Phys::getPageState(unsigned long)>
c000f6db:	59                   	pop    ecx
c000f6dc:	84 c0                	test   al,al
c000f6de:	74 67                	je     c000f747 <Phys::allocatePage()+0x8b>
c000f6e0:	83 c3 01             	add    ebx,0x1
c000f6e3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f6e9:	75 e0                	jne    c000f6cb <Phys::allocatePage()+0xf>
c000f6eb:	c7 05 d0 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cdd0,0x0
c000f6f5:	31 db                	xor    ebx,ebx
c000f6f7:	39 de                	cmp    esi,ebx
c000f6f9:	75 da                	jne    c000f6d5 <Phys::allocatePage()+0x19>
c000f6fb:	a0 f4 cd 02 c0       	mov    al,ds:0xc002cdf4
c000f700:	83 ec 0c             	sub    esp,0xc
c000f703:	83 f0 01             	xor    eax,0x1
c000f706:	a2 f4 cd 02 c0       	mov    ds:0xc002cdf4,al
c000f70b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f710:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f713:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000f719:	51                   	push   ecx
c000f71a:	e8 ab 43 00 00       	call   c0013aca <VAS::scanForEviction()>
c000f71f:	83 c4 10             	add    esp,0x10
c000f722:	85 c0                	test   eax,eax
c000f724:	75 48                	jne    c000f76e <Phys::allocatePage()+0xb2>
c000f726:	83 ec 0c             	sub    esp,0xc
c000f729:	68 e0 30 02 c0       	push   0xc00230e0
c000f72e:	e8 8f fd ff ff       	call   c000f4c2 <KePanic(char const*)>
c000f733:	8b 1d d0 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cdd0
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	53                   	push   ebx
c000f73d:	e8 f5 fe ff ff       	call   c000f637 <Phys::getPageState(unsigned long)>
c000f742:	59                   	pop    ecx
c000f743:	84 c0                	test   al,al
c000f745:	75 99                	jne    c000f6e0 <Phys::allocatePage()+0x24>
c000f747:	6a 01                	push   0x1
c000f749:	53                   	push   ebx
c000f74a:	e8 a8 fe ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000f74f:	8b 1d dc cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cddc
c000f755:	5e                   	pop    esi
c000f756:	a1 d0 cd 02 c0       	mov    eax,ds:0xc002cdd0
c000f75b:	5a                   	pop    edx
c000f75c:	83 c3 01             	add    ebx,0x1
c000f75f:	89 1d dc cd 02 c0    	mov    DWORD PTR ds:0xc002cddc,ebx
c000f765:	c1 e0 0c             	shl    eax,0xc
c000f768:	83 c4 14             	add    esp,0x14
c000f76b:	5b                   	pop    ebx
c000f76c:	5e                   	pop    esi
c000f76d:	c3                   	ret    
c000f76e:	8b 15 dc cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cddc
c000f774:	83 ec 08             	sub    esp,0x8
c000f777:	6a 01                	push   0x1
c000f779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f77d:	83 c2 01             	add    edx,0x1
c000f780:	89 15 dc cd 02 c0    	mov    DWORD PTR ds:0xc002cddc,edx
c000f786:	89 c2                	mov    edx,eax
c000f788:	c1 ea 0c             	shr    edx,0xc
c000f78b:	52                   	push   edx
c000f78c:	e8 66 fe ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000f791:	83 c4 10             	add    esp,0x10
c000f794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f798:	eb ce                	jmp    c000f768 <Phys::allocatePage()+0xac>

c000f79a <Phys::allocateContiguousPages(int)>:
c000f79a:	57                   	push   edi
c000f79b:	56                   	push   esi
c000f79c:	53                   	push   ebx
c000f79d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f7a1:	fa                   	cli    
c000f7a2:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c000f7a8:	83 ec 0c             	sub    esp,0xc
c000f7ab:	31 db                	xor    ebx,ebx
c000f7ad:	68 10 31 02 c0       	push   0xc0023110
c000f7b2:	83 c2 01             	add    edx,0x1
c000f7b5:	89 15 d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,edx
c000f7bb:	e8 8e 77 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f7c0:	83 c4 10             	add    esp,0x10
c000f7c3:	85 db                	test   ebx,ebx
c000f7c5:	75 11                	jne    c000f7d8 <Phys::allocateContiguousPages(int)+0x3e>
c000f7c7:	e8 f0 fe ff ff       	call   c000f6bc <Phys::allocatePage()>
c000f7cc:	83 ff 01             	cmp    edi,0x1
c000f7cf:	89 c6                	mov    esi,eax
c000f7d1:	74 21                	je     c000f7f4 <Phys::allocateContiguousPages(int)+0x5a>
c000f7d3:	bb 01 00 00 00       	mov    ebx,0x1
c000f7d8:	e8 df fe ff ff       	call   c000f6bc <Phys::allocatePage()>
c000f7dd:	89 da                	mov    edx,ebx
c000f7df:	c1 e2 0c             	shl    edx,0xc
c000f7e2:	01 f2                	add    edx,esi
c000f7e4:	39 c2                	cmp    edx,eax
c000f7e6:	74 24                	je     c000f80c <Phys::allocateContiguousPages(int)+0x72>
c000f7e8:	83 ff 01             	cmp    edi,0x1
c000f7eb:	bb 01 00 00 00       	mov    ebx,0x1
c000f7f0:	89 c6                	mov    esi,eax
c000f7f2:	75 e4                	jne    c000f7d8 <Phys::allocateContiguousPages(int)+0x3e>
c000f7f4:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f7fc:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f801:	85 c0                	test   eax,eax
c000f803:	75 01                	jne    c000f806 <Phys::allocateContiguousPages(int)+0x6c>
c000f805:	fb                   	sti    
c000f806:	5b                   	pop    ebx
c000f807:	89 f0                	mov    eax,esi
c000f809:	5e                   	pop    esi
c000f80a:	5f                   	pop    edi
c000f80b:	c3                   	ret    
c000f80c:	83 c3 01             	add    ebx,0x1
c000f80f:	39 fb                	cmp    ebx,edi
c000f811:	75 b0                	jne    c000f7c3 <Phys::allocateContiguousPages(int)+0x29>
c000f813:	eb df                	jmp    c000f7f4 <Phys::allocateContiguousPages(int)+0x5a>

c000f815 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f815:	56                   	push   esi
c000f816:	53                   	push   ebx
c000f817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f81b:	39 1d d4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cdd4,ebx
c000f821:	73 06                	jae    c000f829 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f823:	89 1d d4 cd 02 c0    	mov    DWORD PTR ds:0xc002cdd4,ebx
c000f829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f82d:	c1 eb 0c             	shr    ebx,0xc
c000f830:	c1 e8 0c             	shr    eax,0xc
c000f833:	39 d8                	cmp    eax,ebx
c000f835:	73 13                	jae    c000f84a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f837:	6a 00                	push   0x0
c000f839:	50                   	push   eax
c000f83a:	8d 70 01             	lea    esi,[eax+0x1]
c000f83d:	e8 b5 fd ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000f842:	39 f3                	cmp    ebx,esi
c000f844:	89 f0                	mov    eax,esi
c000f846:	5a                   	pop    edx
c000f847:	59                   	pop    ecx
c000f848:	75 ed                	jne    c000f837 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f84a:	5b                   	pop    ebx
c000f84b:	5e                   	pop    esi
c000f84c:	c3                   	ret    

c000f84d <Phys::physicalMemorySetup(unsigned int)>:
c000f84d:	55                   	push   ebp
c000f84e:	57                   	push   edi
c000f84f:	56                   	push   esi
c000f850:	53                   	push   ebx
c000f851:	31 db                	xor    ebx,ebx
c000f853:	83 ec 40             	sub    esp,0x40
c000f856:	6a 10                	push   0x10
c000f858:	6a 00                	push   0x0
c000f85a:	68 e4 cd 02 c0       	push   0xc002cde4
c000f85f:	e8 8c 0c ff ff       	call   c00004f0 <memset>
c000f864:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f868:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f86d:	05 00 10 00 00       	add    eax,0x1000
c000f872:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f876:	5a                   	pop    edx
c000f877:	59                   	pop    ecx
c000f878:	50                   	push   eax
c000f879:	68 d3 31 02 c0       	push   0xc00231d3
c000f87e:	e8 cb 76 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f883:	83 c4 10             	add    esp,0x10
c000f886:	83 ec 08             	sub    esp,0x8
c000f889:	6a 01                	push   0x1
c000f88b:	53                   	push   ebx
c000f88c:	83 c3 01             	add    ebx,0x1
c000f88f:	e8 63 fd ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000f894:	83 c4 10             	add    esp,0x10
c000f897:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f89d:	75 e7                	jne    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f89f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f8a6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f8ad:	c1 e0 08             	shl    eax,0x8
c000f8b0:	09 c2                	or     edx,eax
c000f8b2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f8b6:	0f 84 43 01 00 00    	je     c000f9ff <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000f8bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f8c4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f8c9:	e9 82 00 00 00       	jmp    c000f950 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f8ce:	ba 00 00 08 00       	mov    edx,0x80000
c000f8d3:	89 c1                	mov    ecx,eax
c000f8d5:	39 f2                	cmp    edx,esi
c000f8d7:	19 f9                	sbb    ecx,edi
c000f8d9:	0f 82 c0 00 00 00    	jb     c000f99f <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f8df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8e3:	89 c5                	mov    ebp,eax
c000f8e5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f8ed:	19 cd                	sbb    ebp,ecx
c000f8ef:	0f 83 af 00 00 00    	jae    c000f9a4 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f8f5:	89 d6                	mov    esi,edx
c000f8f7:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8fc:	39 f2                	cmp    edx,esi
c000f8fe:	89 cf                	mov    edi,ecx
c000f900:	19 c8                	sbb    eax,ecx
c000f902:	73 07                	jae    c000f90b <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f904:	be 00 00 0a 00       	mov    esi,0xa0000
c000f909:	31 ff                	xor    edi,edi
c000f90b:	89 f2                	mov    edx,esi
c000f90d:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f912:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f918:	89 f9                	mov    ecx,edi
c000f91a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f91e:	83 d1 ff             	adc    ecx,0xffffffff
c000f921:	39 d0                	cmp    eax,edx
c000f923:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f927:	b8 00 00 00 00       	mov    eax,0x0
c000f92c:	19 c8                	sbb    eax,ecx
c000f92e:	0f 82 9d 01 00 00    	jb     c000fad1 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f934:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f938:	83 c3 18             	add    ebx,0x18
c000f93b:	83 c6 01             	add    esi,0x1
c000f93e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f946:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f94a:	0f 84 bf 00 00 00    	je     c000fa0f <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f950:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f952:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f955:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f958:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f95b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f95f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f966:	01 f0                	add    eax,esi
c000f968:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f96c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f970:	55                   	push   ebp
c000f971:	11 fa                	adc    edx,edi
c000f973:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f977:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f97b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f97f:	50                   	push   eax
c000f980:	56                   	push   esi
c000f981:	68 70 31 02 c0       	push   0xc0023170
c000f986:	e8 c3 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f98b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	09 f8                	or     eax,edi
c000f994:	75 79                	jne    c000fa0f <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f996:	83 fd 01             	cmp    ebp,0x1
c000f999:	0f 84 2f ff ff ff    	je     c000f8ce <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f99f:	83 fd 01             	cmp    ebp,0x1
c000f9a2:	75 90                	jne    c000f934 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f9a4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f9a8:	31 d2                	xor    edx,edx
c000f9aa:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f9ae:	89 c8                	mov    eax,ecx
c000f9b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9b4:	19 d1                	sbb    ecx,edx
c000f9b6:	0f 82 78 ff ff ff    	jb     c000f934 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f9bc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f9c1:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f9c5:	b9 00 00 00 00       	mov    ecx,0x0
c000f9ca:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f9ce:	0f 83 60 ff ff ff    	jae    c000f934 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f9d4:	39 c6                	cmp    esi,eax
c000f9d6:	19 d7                	sbb    edi,edx
c000f9d8:	0f 83 ff 00 00 00    	jae    c000fadd <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f9de:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f9e2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f9e6:	29 c7                	sub    edi,eax
c000f9e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f9ec:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f9f0:	19 d5                	sbb    ebp,edx
c000f9f2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f9f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f9fa:	e9 de 00 00 00       	jmp    c000fadd <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f9ff:	83 ec 0c             	sub    esp,0xc
c000fa02:	68 eb 31 02 c0       	push   0xc00231eb
c000fa07:	e8 b6 fa ff ff       	call   c000f4c2 <KePanic(char const*)>
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	83 ec 08             	sub    esp,0x8
c000fa12:	bb 60 00 00 00       	mov    ebx,0x60
c000fa17:	6a 00                	push   0x0
c000fa19:	6a 06                	push   0x6
c000fa1b:	e8 d7 fb ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000fa20:	58                   	pop    eax
c000fa21:	5a                   	pop    edx
c000fa22:	6a 00                	push   0x0
c000fa24:	6a 07                	push   0x7
c000fa26:	e8 cc fb ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000fa2b:	8b 0d e0 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cde0
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	83 c1 02             	add    ecx,0x2
c000fa37:	89 0d e0 cd 02 c0    	mov    DWORD PTR ds:0xc002cde0,ecx
c000fa3d:	83 ec 08             	sub    esp,0x8
c000fa40:	6a 00                	push   0x0
c000fa42:	53                   	push   ebx
c000fa43:	83 c3 01             	add    ebx,0x1
c000fa46:	e8 ac fb ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000fa4b:	83 c4 10             	add    esp,0x10
c000fa4e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000fa54:	75 e7                	jne    c000fa3d <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000fa56:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c000fa5b:	bb 40 01 00 00       	mov    ebx,0x140
c000fa60:	83 c0 20             	add    eax,0x20
c000fa63:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fa68:	eb 26                	jmp    c000fa90 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000fa6a:	83 ec 08             	sub    esp,0x8
c000fa6d:	6a 00                	push   0x0
c000fa6f:	53                   	push   ebx
c000fa70:	83 c3 01             	add    ebx,0x1
c000fa73:	e8 7f fb ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000fa78:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	83 c0 01             	add    eax,0x1
c000fa83:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000fa89:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fa8e:	74 07                	je     c000fa97 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000fa90:	3d ff 03 00 00       	cmp    eax,0x3ff
c000fa95:	7e d3                	jle    c000fa6a <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000fa97:	bb d0 01 00 00       	mov    ebx,0x1d0
c000fa9c:	3d ff 07 00 00       	cmp    eax,0x7ff
c000faa1:	7f 26                	jg     c000fac9 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000faa3:	83 ec 08             	sub    esp,0x8
c000faa6:	6a 00                	push   0x0
c000faa8:	53                   	push   ebx
c000faa9:	83 c3 01             	add    ebx,0x1
c000faac:	e8 46 fb ff ff       	call   c000f5f7 <Phys::setPageState(unsigned long, bool)>
c000fab1:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c000fab6:	83 c4 10             	add    esp,0x10
c000fab9:	83 c0 01             	add    eax,0x1
c000fabc:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000fac2:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fac7:	75 d3                	jne    c000fa9c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fac9:	83 c4 3c             	add    esp,0x3c
c000facc:	5b                   	pop    ebx
c000facd:	5e                   	pop    esi
c000face:	5f                   	pop    edi
c000facf:	5d                   	pop    ebp
c000fad0:	c3                   	ret    
c000fad1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000fad5:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000fadd:	83 ec 04             	sub    esp,0x4
c000fae0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000fae4:	56                   	push   esi
c000fae5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fae9:	57                   	push   edi
c000faea:	68 94 31 02 c0       	push   0xc0023194
c000faef:	e8 5a 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000faf4:	5d                   	pop    ebp
c000faf5:	58                   	pop    eax
c000faf6:	56                   	push   esi
c000faf7:	57                   	push   edi
c000faf8:	e8 18 fd ff ff       	call   c000f815 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fafd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fb01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb05:	83 c4 0c             	add    esp,0xc
c000fb08:	8b 35 e0 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cde0
c000fb0e:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fb12:	01 f0                	add    eax,esi
c000fb14:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fb19:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fb20:	52                   	push   edx
c000fb21:	50                   	push   eax
c000fb22:	68 f9 31 02 c0       	push   0xc00231f9
c000fb27:	e8 22 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fb2c:	83 c4 10             	add    esp,0x10
c000fb2f:	e9 00 fe ff ff       	jmp    c000f934 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000fb34 <Pipe::isAtty()>:
c000fb34:	31 c0                	xor    eax,eax
c000fb36:	c3                   	ret    
c000fb37:	90                   	nop

c000fb38 <Pipe::~Pipe()>:
c000fb38:	83 ec 0c             	sub    esp,0xc
c000fb3b:	ba 58 32 02 c0       	mov    edx,0xc0023258
c000fb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb44:	89 10                	mov    DWORD PTR [eax],edx
c000fb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb4a:	83 ec 0c             	sub    esp,0xc
c000fb4d:	50                   	push   eax
c000fb4e:	e8 cf 2a 00 00       	call   c0012622 <UnixFile::~UnixFile()>
c000fb53:	83 c4 10             	add    esp,0x10
c000fb56:	90                   	nop
c000fb57:	83 c4 0c             	add    esp,0xc
c000fb5a:	c3                   	ret    
c000fb5b:	90                   	nop

c000fb5c <Pipe::~Pipe()>:
c000fb5c:	83 ec 0c             	sub    esp,0xc
c000fb5f:	83 ec 0c             	sub    esp,0xc
c000fb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb66:	e8 cd ff ff ff       	call   c000fb38 <Pipe::~Pipe()>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	83 ec 08             	sub    esp,0x8
c000fb71:	6a 20                	push   0x20
c000fb73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb77:	e8 77 cd ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c000fb7c:	83 c4 10             	add    esp,0x10
c000fb7f:	83 c4 0c             	add    esp,0xc
c000fb82:	c3                   	ret    
c000fb83:	90                   	nop

c000fb84 <Pipe::write(unsigned long long, void*, int*)>:
c000fb84:	55                   	push   ebp
c000fb85:	57                   	push   edi
c000fb86:	56                   	push   esi
c000fb87:	53                   	push   ebx
c000fb88:	83 ec 1c             	sub    esp,0x1c
c000fb8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb97:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fb9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb9e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fba1:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fba8:	89 d8                	mov    eax,ebx
c000fbaa:	89 d6                	mov    esi,edx
c000fbac:	89 d7                	mov    edi,edx
c000fbae:	c1 ff 1f             	sar    edi,0x1f
c000fbb1:	03 34 24             	add    esi,DWORD PTR [esp]
c000fbb4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fbb8:	c1 f8 1f             	sar    eax,0x1f
c000fbbb:	39 f3                	cmp    ebx,esi
c000fbbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbc5:	19 f8                	sbb    eax,edi
c000fbc7:	b8 01 00 00 00       	mov    eax,0x1
c000fbcc:	72 72                	jb     c000fc40 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000fbce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fbd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000fbd5:	01 d0                	add    eax,edx
c000fbd7:	99                   	cdq    
c000fbd8:	f7 fb                	idiv   ebx
c000fbda:	89 d8                	mov    eax,ebx
c000fbdc:	29 d0                	sub    eax,edx
c000fbde:	89 d6                	mov    esi,edx
c000fbe0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fbe3:	89 c3                	mov    ebx,eax
c000fbe5:	c1 fb 1f             	sar    ebx,0x1f
c000fbe8:	39 c2                	cmp    edx,eax
c000fbea:	19 df                	sbb    edi,ebx
c000fbec:	bb 00 00 00 00       	mov    ebx,0x0
c000fbf1:	72 04                	jb     c000fbf7 <Pipe::write(unsigned long long, void*, int*)+0x73>
c000fbf3:	89 d3                	mov    ebx,edx
c000fbf5:	29 c3                	sub    ebx,eax
c000fbf7:	89 d0                	mov    eax,edx
c000fbf9:	29 d8                	sub    eax,ebx
c000fbfb:	74 0d                	je     c000fc0a <Pipe::write(unsigned long long, void*, int*)+0x86>
c000fbfd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fc00:	89 c1                	mov    ecx,eax
c000fc02:	01 f7                	add    edi,esi
c000fc04:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fc08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc0a:	85 db                	test   ebx,ebx
c000fc0c:	74 0d                	je     c000fc1b <Pipe::write(unsigned long long, void*, int*)+0x97>
c000fc0e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fc12:	89 d9                	mov    ecx,ebx
c000fc14:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fc17:	89 c6                	mov    esi,eax
c000fc19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc1b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fc1e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc23:	75 10                	jne    c000fc35 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000fc25:	83 ec 0c             	sub    esp,0xc
c000fc28:	68 15 32 02 c0       	push   0xc0023215
c000fc2d:	e8 90 f8 ff ff       	call   c000f4c2 <KePanic(char const*)>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc39:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fc3c:	89 08                	mov    DWORD PTR [eax],ecx
c000fc3e:	31 c0                	xor    eax,eax
c000fc40:	83 c4 1c             	add    esp,0x1c
c000fc43:	5b                   	pop    ebx
c000fc44:	5e                   	pop    esi
c000fc45:	5f                   	pop    edi
c000fc46:	5d                   	pop    ebp
c000fc47:	c3                   	ret    

c000fc48 <Pipe::read(unsigned long long, void*, int*)>:
c000fc48:	55                   	push   ebp
c000fc49:	57                   	push   edi
c000fc4a:	56                   	push   esi
c000fc4b:	53                   	push   ebx
c000fc4c:	83 ec 1c             	sub    esp,0x1c
c000fc4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fc53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fc57:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fc5b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fc5e:	89 c8                	mov    eax,ecx
c000fc60:	99                   	cdq    
c000fc61:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fc65:	74 27                	je     c000fc8e <Pipe::read(unsigned long long, void*, int*)+0x46>
c000fc67:	39 f9                	cmp    ecx,edi
c000fc69:	89 d1                	mov    ecx,edx
c000fc6b:	19 f1                	sbb    ecx,esi
c000fc6d:	73 1f                	jae    c000fc8e <Pipe::read(unsigned long long, void*, int*)+0x46>
c000fc6f:	fa                   	cli    
c000fc70:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000fc76:	e8 89 64 00 00       	call   c0016104 <schedule()>
c000fc7b:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000fc82:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000fc89:	75 d0                	jne    c000fc5b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fc8b:	fb                   	sti    
c000fc8c:	eb cd                	jmp    c000fc5b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fc8e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fc92:	39 f8                	cmp    eax,edi
c000fc94:	89 d1                	mov    ecx,edx
c000fc96:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fc9a:	19 f1                	sbb    ecx,esi
c000fc9c:	73 08                	jae    c000fca6 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000fc9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fca2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fca6:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fca9:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fcac:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000fcb0:	29 f7                	sub    edi,esi
c000fcb2:	89 f8                	mov    eax,edi
c000fcb4:	99                   	cdq    
c000fcb5:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fcb9:	89 d0                	mov    eax,edx
c000fcbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcbf:	19 c2                	sbb    edx,eax
c000fcc1:	89 f8                	mov    eax,edi
c000fcc3:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000fcc8:	89 ea                	mov    edx,ebp
c000fcca:	29 c2                	sub    edx,eax
c000fccc:	85 c0                	test   eax,eax
c000fcce:	74 0b                	je     c000fcdb <Pipe::read(unsigned long long, void*, int*)+0x93>
c000fcd0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fcd3:	89 c1                	mov    ecx,eax
c000fcd5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fcd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcdb:	85 d2                	test   edx,edx
c000fcdd:	74 0d                	je     c000fcec <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000fcdf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fce3:	89 d1                	mov    ecx,edx
c000fce5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fce8:	89 c7                	mov    edi,eax
c000fcea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fcef:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fcf2:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fcf5:	99                   	cdq    
c000fcf6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fcfa:	89 f7                	mov    edi,esi
c000fcfc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fd00:	c1 ff 1f             	sar    edi,0x1f
c000fd03:	57                   	push   edi
c000fd04:	56                   	push   esi
c000fd05:	52                   	push   edx
c000fd06:	50                   	push   eax
c000fd07:	e8 68 0e 01 00       	call   c0020b74 <__umoddi3>
c000fd0c:	83 c4 10             	add    esp,0x10
c000fd0f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fd14:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fd17:	75 10                	jne    c000fd29 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000fd19:	83 ec 0c             	sub    esp,0xc
c000fd1c:	68 32 32 02 c0       	push   0xc0023232
c000fd21:	e8 9c f7 ff ff       	call   c000f4c2 <KePanic(char const*)>
c000fd26:	83 c4 10             	add    esp,0x10
c000fd29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fd2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd31:	89 10                	mov    DWORD PTR [eax],edx
c000fd33:	83 c4 1c             	add    esp,0x1c
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	5b                   	pop    ebx
c000fd39:	5e                   	pop    esi
c000fd3a:	5f                   	pop    edi
c000fd3b:	5d                   	pop    ebp
c000fd3c:	c3                   	ret    
c000fd3d:	90                   	nop

c000fd3e <Pipe::Pipe(int)>:
c000fd3e:	83 ec 0c             	sub    esp,0xc
c000fd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd45:	83 ec 08             	sub    esp,0x8
c000fd48:	6a 00                	push   0x0
c000fd4a:	50                   	push   eax
c000fd4b:	e8 ec 26 00 00       	call   c001243c <UnixFile::UnixFile(int)>
c000fd50:	83 c4 10             	add    esp,0x10
c000fd53:	ba 58 32 02 c0       	mov    edx,0xc0023258
c000fd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd5c:	89 10                	mov    DWORD PTR [eax],edx
c000fd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fd66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd78:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fd7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd83:	83 ec 0c             	sub    esp,0xc
c000fd86:	50                   	push   eax
c000fd87:	e8 f0 f3 ff ff       	call   c000f17c <malloc>
c000fd8c:	83 c4 10             	add    esp,0x10
c000fd8f:	89 c2                	mov    edx,eax
c000fd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd95:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd9c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fda0:	90                   	nop
c000fda1:	83 c4 0c             	add    esp,0xc
c000fda4:	c3                   	ret    

c000fda5 <KePowerThread(void*)>:
c000fda5:	83 ec 0c             	sub    esp,0xc
c000fda8:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000fdaf:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000fdb6:	75 01                	jne    c000fdb9 <KePowerThread(void*)+0x14>
c000fdb8:	fb                   	sti    
c000fdb9:	c6 05 00 ce 02 c0 00 	mov    BYTE PTR ds:0xc002ce00,0x0
c000fdc0:	83 ec 0c             	sub    esp,0xc
c000fdc3:	6a 0a                	push   0xa
c000fdc5:	e8 36 65 00 00       	call   c0016300 <sleep(unsigned int)>
c000fdca:	83 c4 10             	add    esp,0x10
c000fdcd:	83 05 44 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce44,0xa
c000fdd4:	eb e3                	jmp    c000fdb9 <KePowerThread(void*)+0x14>

c000fdd6 <KeChangePowerSettings(PowerSettings)>:
c000fdd6:	57                   	push   edi
c000fdd7:	b9 09 00 00 00       	mov    ecx,0x9
c000fddc:	56                   	push   esi
c000fddd:	bf 20 ce 02 c0       	mov    edi,0xc002ce20
c000fde2:	fc                   	cld    
c000fde3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000fde7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fde9:	5e                   	pop    esi
c000fdea:	5f                   	pop    edi
c000fdeb:	c3                   	ret    

c000fdec <KeUserIOReceived()>:
c000fdec:	c7 05 44 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce44,0x0
c000fdf6:	c3                   	ret    

c000fdf7 <KeHandlePowerButton()>:
c000fdf7:	a1 20 ce 02 c0       	mov    eax,ds:0xc002ce20
c000fdfc:	83 f8 02             	cmp    eax,0x2
c000fdff:	75 05                	jne    c000fe06 <KeHandlePowerButton()+0xf>
c000fe01:	e9 26 db ff ff       	jmp    c000d92c <KeShutdown()>
c000fe06:	48                   	dec    eax
c000fe07:	75 05                	jne    c000fe0e <KeHandlePowerButton()+0x17>
c000fe09:	e9 42 db ff ff       	jmp    c000d950 <KeSleep()>
c000fe0e:	c3                   	ret    

c000fe0f <KeHandleSleepButton()>:
c000fe0f:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c000fe14:	83 f8 02             	cmp    eax,0x2
c000fe17:	75 05                	jne    c000fe1e <KeHandleSleepButton()+0xf>
c000fe19:	e9 0e db ff ff       	jmp    c000d92c <KeShutdown()>
c000fe1e:	48                   	dec    eax
c000fe1f:	75 05                	jne    c000fe26 <KeHandleSleepButton()+0x17>
c000fe21:	e9 2a db ff ff       	jmp    c000d950 <KeSleep()>
c000fe26:	c3                   	ret    

c000fe27 <KeSetupPowerManager()>:
c000fe27:	83 ec 0c             	sub    esp,0xc
c000fe2a:	68 f0 00 00 00       	push   0xf0
c000fe2f:	6a 00                	push   0x0
c000fe31:	68 a5 fd 00 c0       	push   0xc000fda5
c000fe36:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000fe3c:	c7 05 44 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce44,0x0
c000fe46:	c6 05 00 ce 02 c0 00 	mov    BYTE PTR ds:0xc002ce00,0x0
c000fe4d:	e8 5a 60 00 00       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c000fe52:	c7 05 20 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x2
c000fe5c:	c7 05 24 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x1
c000fe66:	c7 05 28 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce28,0x3
c000fe70:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c000fe7a:	c7 05 38 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce38,0x0
c000fe84:	c7 05 30 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce30,0x0
c000fe8e:	c7 05 3c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce3c,0x0
c000fe98:	c7 05 34 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce34,0x3c
c000fea2:	c7 05 40 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce40,0x3c
c000feac:	83 c4 1c             	add    esp,0x1c
c000feaf:	c3                   	ret    

c000feb0 <KeRand()>:
c000feb0:	69 05 48 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce48,0x2875
c000feba:	69 0d 4c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce4c,0xa2e7b175
c000fec4:	53                   	push   ebx
c000fec5:	01 c1                	add    ecx,eax
c000fec7:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000fecc:	f7 25 48 ce 02 c0    	mul    DWORD PTR ds:0xc002ce48
c000fed2:	01 ca                	add    edx,ecx
c000fed4:	05 ef 04 b5 00       	add    eax,0xb504ef
c000fed9:	a3 48 ce 02 c0       	mov    ds:0xc002ce48,eax
c000fede:	83 d2 00             	adc    edx,0x0
c000fee1:	0f b7 da             	movzx  ebx,dx
c000fee4:	89 1d 4c ce 02 c0    	mov    DWORD PTR ds:0xc002ce4c,ebx
c000feea:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000feee:	5b                   	pop    ebx
c000feef:	c3                   	ret    

c000fef0 <KeSeedRand(unsigned int)>:
c000fef0:	53                   	push   ebx
c000fef1:	83 ec 08             	sub    esp,0x8
c000fef4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fef8:	e8 7e 94 00 00       	call   c001937b <HalGetRand()>
c000fefd:	c7 05 4c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce4c,0x0
c000ff07:	31 d8                	xor    eax,ebx
c000ff09:	a3 48 ce 02 c0       	mov    ds:0xc002ce48,eax
c000ff0e:	e8 9d ff ff ff       	call   c000feb0 <KeRand()>
c000ff13:	83 c4 08             	add    esp,0x8
c000ff16:	5b                   	pop    ebx
c000ff17:	eb 97                	jmp    c000feb0 <KeRand()>

c000ff19 <KeInitRand()>:
c000ff19:	83 ec 0c             	sub    esp,0xc
c000ff1c:	e8 7e 92 00 00       	call   c001919f <HalQueryPerformanceCounter()>
c000ff21:	0f 20 da             	mov    edx,cr3
c000ff24:	0f 22 da             	mov    cr3,edx
c000ff27:	0f 20 da             	mov    edx,cr3
c000ff2a:	0f 22 da             	mov    cr3,edx
c000ff2d:	0f 20 da             	mov    edx,cr3
c000ff30:	0f 22 da             	mov    cr3,edx
c000ff33:	0f 20 da             	mov    edx,cr3
c000ff36:	0f 22 da             	mov    cr3,edx
c000ff39:	83 ec 0c             	sub    esp,0xc
c000ff3c:	35 03 8a 95 38       	xor    eax,0x38958a03
c000ff41:	50                   	push   eax
c000ff42:	e8 a9 ff ff ff       	call   c000fef0 <KeSeedRand(unsigned int)>
c000ff47:	83 c4 1c             	add    esp,0x1c
c000ff4a:	c3                   	ret    
c000ff4b:	90                   	nop

c000ff4c <KeResolveCompatibilitySymbol(char*)>:
c000ff4c:	83 ec 0c             	sub    esp,0xc
c000ff4f:	83 ec 08             	sub    esp,0x8
c000ff52:	68 6c 32 02 c0       	push   0xc002326c
c000ff57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff5b:	e8 20 08 ff ff       	call   c0000780 <strcmp>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	85 c0                	test   eax,eax
c000ff65:	0f 94 c0             	sete   al
c000ff68:	0f b6 c0             	movzx  eax,al
c000ff6b:	85 c0                	test   eax,eax
c000ff6d:	74 0d                	je     c000ff7c <KeResolveCompatibilitySymbol(char*)+0x30>
c000ff6f:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c000ff74:	e9 8b 01 00 00       	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000ff79:	8d 76 00             	lea    esi,[esi+0x0]
c000ff7c:	83 ec 08             	sub    esp,0x8
c000ff7f:	68 75 32 02 c0       	push   0xc0023275
c000ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff88:	e8 f3 07 ff ff       	call   c0000780 <strcmp>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	85 c0                	test   eax,eax
c000ff92:	0f 94 c0             	sete   al
c000ff95:	0f b6 c0             	movzx  eax,al
c000ff98:	85 c0                	test   eax,eax
c000ff9a:	74 0c                	je     c000ffa8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000ff9c:	b8 74 0a 02 c0       	mov    eax,0xc0020a74
c000ffa1:	e9 5e 01 00 00       	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000ffa6:	66 90                	xchg   ax,ax
c000ffa8:	83 ec 08             	sub    esp,0x8
c000ffab:	68 7f 32 02 c0       	push   0xc002327f
c000ffb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb4:	e8 c7 07 ff ff       	call   c0000780 <strcmp>
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	85 c0                	test   eax,eax
c000ffbe:	0f 94 c0             	sete   al
c000ffc1:	0f b6 c0             	movzx  eax,al
c000ffc4:	85 c0                	test   eax,eax
c000ffc6:	74 0c                	je     c000ffd4 <KeResolveCompatibilitySymbol(char*)+0x88>
c000ffc8:	b8 a8 07 02 c0       	mov    eax,0xc00207a8
c000ffcd:	e9 32 01 00 00       	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000ffd2:	66 90                	xchg   ax,ax
c000ffd4:	83 ec 08             	sub    esp,0x8
c000ffd7:	68 88 32 02 c0       	push   0xc0023288
c000ffdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe0:	e8 9b 07 ff ff       	call   c0000780 <strcmp>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	85 c0                	test   eax,eax
c000ffea:	0f 94 c0             	sete   al
c000ffed:	0f b6 c0             	movzx  eax,al
c000fff0:	85 c0                	test   eax,eax
c000fff2:	74 0c                	je     c0010000 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000fff4:	b8 c2 f4 00 c0       	mov    eax,0xc000f4c2
c000fff9:	e9 06 01 00 00       	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000fffe:	66 90                	xchg   ax,ax
c0010000:	83 ec 08             	sub    esp,0x8
c0010003:	68 9b 32 02 c0       	push   0xc002329b
c0010008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001000c:	e8 6f 07 ff ff       	call   c0000780 <strcmp>
c0010011:	83 c4 10             	add    esp,0x10
c0010014:	85 c0                	test   eax,eax
c0010016:	0f 94 c0             	sete   al
c0010019:	0f b6 c0             	movzx  eax,al
c001001c:	85 c0                	test   eax,eax
c001001e:	74 0c                	je     c001002c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010020:	b8 33 c8 00 c0       	mov    eax,0xc000c833
c0010025:	e9 da 00 00 00       	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001002a:	66 90                	xchg   ax,ax
c001002c:	83 ec 08             	sub    esp,0x8
c001002f:	68 b8 32 02 c0       	push   0xc00232b8
c0010034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010038:	e8 43 07 ff ff       	call   c0000780 <strcmp>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	85 c0                	test   eax,eax
c0010042:	0f 94 c0             	sete   al
c0010045:	0f b6 c0             	movzx  eax,al
c0010048:	85 c0                	test   eax,eax
c001004a:	74 0c                	je     c0010058 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001004c:	b8 74 0b 02 c0       	mov    eax,0xc0020b74
c0010051:	e9 ae 00 00 00       	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010056:	66 90                	xchg   ax,ax
c0010058:	83 ec 08             	sub    esp,0x8
c001005b:	68 c2 32 02 c0       	push   0xc00232c2
c0010060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010064:	e8 17 07 ff ff       	call   c0000780 <strcmp>
c0010069:	83 c4 10             	add    esp,0x10
c001006c:	85 c0                	test   eax,eax
c001006e:	0f 94 c0             	sete   al
c0010071:	0f b6 c0             	movzx  eax,al
c0010074:	85 c0                	test   eax,eax
c0010076:	74 0c                	je     c0010084 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010078:	b8 f4 08 02 c0       	mov    eax,0xc00208f4
c001007d:	e9 82 00 00 00       	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010082:	66 90                	xchg   ax,ax
c0010084:	83 ec 08             	sub    esp,0x8
c0010087:	68 cb 32 02 c0       	push   0xc00232cb
c001008c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010090:	e8 eb 06 ff ff       	call   c0000780 <strcmp>
c0010095:	83 c4 10             	add    esp,0x10
c0010098:	85 c0                	test   eax,eax
c001009a:	0f 94 c0             	sete   al
c001009d:	0f b6 c0             	movzx  eax,al
c00100a0:	85 c0                	test   eax,eax
c00100a2:	74 08                	je     c00100ac <KeResolveCompatibilitySymbol(char*)+0x160>
c00100a4:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c00100a9:	eb 59                	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00100ab:	90                   	nop
c00100ac:	83 ec 08             	sub    esp,0x8
c00100af:	68 e3 32 02 c0       	push   0xc00232e3
c00100b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b8:	e8 c3 06 ff ff       	call   c0000780 <strcmp>
c00100bd:	83 c4 10             	add    esp,0x10
c00100c0:	85 c0                	test   eax,eax
c00100c2:	0f 94 c0             	sete   al
c00100c5:	0f b6 c0             	movzx  eax,al
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 08                	je     c00100d4 <KeResolveCompatibilitySymbol(char*)+0x188>
c00100cc:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c00100d1:	eb 31                	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00100d3:	90                   	nop
c00100d4:	83 ec 08             	sub    esp,0x8
c00100d7:	68 f0 32 02 c0       	push   0xc00232f0
c00100dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100e0:	e8 9b 06 ff ff       	call   c0000780 <strcmp>
c00100e5:	83 c4 10             	add    esp,0x10
c00100e8:	85 c0                	test   eax,eax
c00100ea:	0f 94 c0             	sete   al
c00100ed:	0f b6 c0             	movzx  eax,al
c00100f0:	85 c0                	test   eax,eax
c00100f2:	74 08                	je     c00100fc <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00100f4:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c00100f9:	eb 09                	jmp    c0010104 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00100fb:	90                   	nop
c00100fc:	b8 00 00 00 00       	mov    eax,0x0
c0010101:	8d 76 00             	lea    esi,[esi+0x0]
c0010104:	83 c4 0c             	add    esp,0xc
c0010107:	c3                   	ret    

c0010108 <Semaphore::Semaphore(int)>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010110:	89 10                	mov    DWORD PTR [eax],edx
c0010112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010116:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001011d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010121:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010133:	90                   	nop
c0010134:	c3                   	ret    
c0010135:	90                   	nop
c0010136:	66 90                	xchg   ax,ax

c0010138 <Semaphore::tryAcquire()>:
c0010138:	83 ec 0c             	sub    esp,0xc
c001013b:	fa                   	cli    
c001013c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010141:	83 c0 01             	add    eax,0x1
c0010144:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0010149:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001014e:	83 c0 01             	add    eax,0x1
c0010151:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0010156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001015d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010161:	8b 00                	mov    eax,DWORD PTR [eax]
c0010163:	39 c2                	cmp    edx,eax
c0010165:	7d 59                	jge    c00101c0 <Semaphore::tryAcquire()+0x88>
c0010167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001016e:	8d 50 01             	lea    edx,[eax+0x1]
c0010171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010175:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010178:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001017d:	83 e8 01             	sub    eax,0x1
c0010180:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0010185:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001018a:	85 c0                	test   eax,eax
c001018c:	75 1a                	jne    c00101a8 <Semaphore::tryAcquire()+0x70>
c001018e:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c0010193:	85 c0                	test   eax,eax
c0010195:	74 11                	je     c00101a8 <Semaphore::tryAcquire()+0x70>
c0010197:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00101a1:	e8 5e 5f 00 00       	call   c0016104 <schedule()>
c00101a6:	66 90                	xchg   ax,ax
c00101a8:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00101b0:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00101b5:	85 c0                	test   eax,eax
c00101b7:	75 03                	jne    c00101bc <Semaphore::tryAcquire()+0x84>
c00101b9:	fb                   	sti    
c00101ba:	66 90                	xchg   ax,ax
c00101bc:	b0 01                	mov    al,0x1
c00101be:	eb 48                	jmp    c0010208 <Semaphore::tryAcquire()+0xd0>
c00101c0:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00101c5:	83 e8 01             	sub    eax,0x1
c00101c8:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00101cd:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00101d2:	85 c0                	test   eax,eax
c00101d4:	75 1a                	jne    c00101f0 <Semaphore::tryAcquire()+0xb8>
c00101d6:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c00101db:	85 c0                	test   eax,eax
c00101dd:	74 11                	je     c00101f0 <Semaphore::tryAcquire()+0xb8>
c00101df:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00101e9:	e8 16 5f 00 00       	call   c0016104 <schedule()>
c00101ee:	66 90                	xchg   ax,ax
c00101f0:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00101f8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00101fd:	85 c0                	test   eax,eax
c00101ff:	75 03                	jne    c0010204 <Semaphore::tryAcquire()+0xcc>
c0010201:	fb                   	sti    
c0010202:	66 90                	xchg   ax,ax
c0010204:	b0 00                	mov    al,0x0
c0010206:	66 90                	xchg   ax,ax
c0010208:	83 c4 0c             	add    esp,0xc
c001020b:	c3                   	ret    

c001020c <Semaphore::assertLocked(char const*)>:
c001020c:	83 ec 0c             	sub    esp,0xc
c001020f:	fa                   	cli    
c0010210:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010215:	83 c0 01             	add    eax,0x1
c0010218:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c001021d:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010222:	83 c0 01             	add    eax,0x1
c0010225:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c001022a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001022e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010235:	8b 00                	mov    eax,DWORD PTR [eax]
c0010237:	39 c2                	cmp    edx,eax
c0010239:	7d 11                	jge    c001024c <Semaphore::assertLocked(char const*)+0x40>
c001023b:	83 ec 0c             	sub    esp,0xc
c001023e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010242:	e8 7b f2 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0010247:	83 c4 10             	add    esp,0x10
c001024a:	66 90                	xchg   ax,ax
c001024c:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010251:	83 e8 01             	sub    eax,0x1
c0010254:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0010259:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001025e:	85 c0                	test   eax,eax
c0010260:	75 1a                	jne    c001027c <Semaphore::assertLocked(char const*)+0x70>
c0010262:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c0010267:	85 c0                	test   eax,eax
c0010269:	74 11                	je     c001027c <Semaphore::assertLocked(char const*)+0x70>
c001026b:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0010275:	e8 8a 5e 00 00       	call   c0016104 <schedule()>
c001027a:	66 90                	xchg   ax,ax
c001027c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0010284:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010289:	85 c0                	test   eax,eax
c001028b:	75 03                	jne    c0010290 <Semaphore::assertLocked(char const*)+0x84>
c001028d:	fb                   	sti    
c001028e:	66 90                	xchg   ax,ax
c0010290:	90                   	nop
c0010291:	83 c4 0c             	add    esp,0xc
c0010294:	c3                   	ret    
c0010295:	90                   	nop
c0010296:	66 90                	xchg   ax,ax

c0010298 <Semaphore::acquire(int)>:
c0010298:	83 ec 1c             	sub    esp,0x1c
c001029b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00102a0:	0f 84 9a 00 00 00    	je     c0010340 <Semaphore::acquire(int)+0xa8>
c00102a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ae:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00102b3:	90                   	nop
c00102b4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00102b9:	85 c0                	test   eax,eax
c00102bb:	74 77                	je     c0010334 <Semaphore::acquire(int)+0x9c>
c00102bd:	83 ec 0c             	sub    esp,0xc
c00102c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00102c4:	e8 6f fe ff ff       	call   c0010138 <Semaphore::tryAcquire()>
c00102c9:	83 c4 10             	add    esp,0x10
c00102cc:	83 f0 01             	xor    eax,0x1
c00102cf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00102d3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00102d7:	83 f0 01             	xor    eax,0x1
c00102da:	0f b6 c0             	movzx  eax,al
c00102dd:	85 c0                	test   eax,eax
c00102df:	75 4f                	jne    c0010330 <Semaphore::acquire(int)+0x98>
c00102e1:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00102e6:	7f 2c                	jg     c0010314 <Semaphore::acquire(int)+0x7c>
c00102e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102ec:	89 d0                	mov    eax,edx
c00102ee:	c1 e0 02             	shl    eax,0x2
c00102f1:	01 d0                	add    eax,edx
c00102f3:	d1 e0                	shl    eax,1
c00102f5:	83 ec 0c             	sub    esp,0xc
c00102f8:	50                   	push   eax
c00102f9:	e8 ee 5f 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c00102fe:	83 c4 10             	add    esp,0x10
c0010301:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010305:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010309:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010311:	eb a1                	jmp    c00102b4 <Semaphore::acquire(int)+0x1c>
c0010313:	90                   	nop
c0010314:	83 ec 0c             	sub    esp,0xc
c0010317:	68 90 01 00 00       	push   0x190
c001031c:	e8 cb 5f 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010329:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c001032e:	eb 84                	jmp    c00102b4 <Semaphore::acquire(int)+0x1c>
c0010330:	90                   	nop
c0010331:	8d 76 00             	lea    esi,[esi+0x0]
c0010334:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010338:	e9 fb 00 00 00       	jmp    c0010438 <Semaphore::acquire(int)+0x1a0>
c001033d:	8d 76 00             	lea    esi,[esi+0x0]
c0010340:	fa                   	cli    
c0010341:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010346:	83 c0 01             	add    eax,0x1
c0010349:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c001034e:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010353:	83 c0 01             	add    eax,0x1
c0010356:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c001035b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001035f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010362:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010366:	8b 00                	mov    eax,DWORD PTR [eax]
c0010368:	39 c2                	cmp    edx,eax
c001036a:	7d 14                	jge    c0010380 <Semaphore::acquire(int)+0xe8>
c001036c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010370:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010373:	8d 50 01             	lea    edx,[eax+0x1]
c0010376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001037a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001037d:	eb 6d                	jmp    c00103ec <Semaphore::acquire(int)+0x154>
c001037f:	90                   	nop
c0010380:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010385:	8b 00                	mov    eax,DWORD PTR [eax]
c0010387:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001038e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010395:	85 c0                	test   eax,eax
c0010397:	75 13                	jne    c00103ac <Semaphore::acquire(int)+0x114>
c0010399:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001039e:	8b 10                	mov    edx,DWORD PTR [eax]
c00103a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00103a7:	eb 17                	jmp    c00103c0 <Semaphore::acquire(int)+0x128>
c00103a9:	8d 76 00             	lea    esi,[esi+0x0]
c00103ac:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00103b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00103b8:	8b 12                	mov    edx,DWORD PTR [edx]
c00103ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00103bd:	8d 76 00             	lea    esi,[esi+0x0]
c00103c0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00103c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00103c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00103ce:	83 ec 0c             	sub    esp,0xc
c00103d1:	68 00 33 02 c0       	push   0xc0023300
c00103d6:	e8 73 6b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00103db:	83 c4 10             	add    esp,0x10
c00103de:	83 ec 0c             	sub    esp,0xc
c00103e1:	6a 05                	push   0x5
c00103e3:	e8 dc 5d 00 00       	call   c00161c4 <blockTask(TaskState)>
c00103e8:	83 c4 10             	add    esp,0x10
c00103eb:	90                   	nop
c00103ec:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00103f1:	83 e8 01             	sub    eax,0x1
c00103f4:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00103f9:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00103fe:	85 c0                	test   eax,eax
c0010400:	75 1a                	jne    c001041c <Semaphore::acquire(int)+0x184>
c0010402:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c0010407:	85 c0                	test   eax,eax
c0010409:	74 11                	je     c001041c <Semaphore::acquire(int)+0x184>
c001040b:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0010415:	e8 ea 5c 00 00       	call   c0016104 <schedule()>
c001041a:	66 90                	xchg   ax,ax
c001041c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0010424:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010429:	85 c0                	test   eax,eax
c001042b:	75 03                	jne    c0010430 <Semaphore::acquire(int)+0x198>
c001042d:	fb                   	sti    
c001042e:	66 90                	xchg   ax,ax
c0010430:	b8 00 00 00 00       	mov    eax,0x0
c0010435:	8d 76 00             	lea    esi,[esi+0x0]
c0010438:	83 c4 1c             	add    esp,0x1c
c001043b:	c3                   	ret    

c001043c <Semaphore::acquire()>:
c001043c:	83 ec 0c             	sub    esp,0xc
c001043f:	83 ec 08             	sub    esp,0x8
c0010442:	6a 00                	push   0x0
c0010444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010448:	e8 4b fe ff ff       	call   c0010298 <Semaphore::acquire(int)>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	90                   	nop
c0010451:	83 c4 0c             	add    esp,0xc
c0010454:	c3                   	ret    
c0010455:	90                   	nop
c0010456:	66 90                	xchg   ax,ax

c0010458 <Semaphore::release()>:
c0010458:	83 ec 1c             	sub    esp,0x1c
c001045b:	fa                   	cli    
c001045c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010461:	83 c0 01             	add    eax,0x1
c0010464:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0010469:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001046e:	83 c0 01             	add    eax,0x1
c0010471:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0010476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001047a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001047d:	85 c0                	test   eax,eax
c001047f:	74 2b                	je     c00104ac <Semaphore::release()+0x54>
c0010481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010485:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010488:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001048c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010490:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010497:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001049a:	83 ec 0c             	sub    esp,0xc
c001049d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104a1:	e8 5e 5f 00 00       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c00104a6:	83 c4 10             	add    esp,0x10
c00104a9:	eb 15                	jmp    c00104c0 <Semaphore::release()+0x68>
c00104ab:	90                   	nop
c00104ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104b3:	8d 50 ff             	lea    edx,[eax-0x1]
c00104b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104bd:	8d 76 00             	lea    esi,[esi+0x0]
c00104c0:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00104c5:	83 e8 01             	sub    eax,0x1
c00104c8:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00104cd:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00104d2:	85 c0                	test   eax,eax
c00104d4:	75 1a                	jne    c00104f0 <Semaphore::release()+0x98>
c00104d6:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c00104db:	85 c0                	test   eax,eax
c00104dd:	74 11                	je     c00104f0 <Semaphore::release()+0x98>
c00104df:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00104e9:	e8 16 5c 00 00       	call   c0016104 <schedule()>
c00104ee:	66 90                	xchg   ax,ax
c00104f0:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00104f8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00104fd:	85 c0                	test   eax,eax
c00104ff:	75 03                	jne    c0010504 <Semaphore::release()+0xac>
c0010501:	fb                   	sti    
c0010502:	66 90                	xchg   ax,ax
c0010504:	90                   	nop
c0010505:	83 c4 1c             	add    esp,0x1c
c0010508:	c3                   	ret    

c0010509 <KiSigKill(int)>:
c0010509:	83 ec 0c             	sub    esp,0xc
c001050c:	6a 00                	push   0x0
c001050e:	6a 00                	push   0x0
c0010510:	6a ff                	push   0xffffffff
c0010512:	6a 01                	push   0x1
c0010514:	e8 39 5b 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010519:	83 c4 1c             	add    esp,0x1c
c001051c:	c3                   	ret    

c001051d <KiDefaultSignalHandlerIgnore(int)>:
c001051d:	c3                   	ret    

c001051e <KiDefaultSignalHandlerPause(int)>:
c001051e:	57                   	push   edi
c001051f:	b9 07 00 00 00       	mov    ecx,0x7
c0010524:	56                   	push   esi
c0010525:	be 5b 33 02 c0       	mov    esi,0xc002335b
c001052a:	83 ec 24             	sub    esp,0x24
c001052d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010531:	fc                   	cld    
c0010532:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010534:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010538:	50                   	push   eax
c0010539:	6a 00                	push   0x0
c001053b:	6a 00                	push   0x0
c001053d:	6a 27                	push   0x27
c001053f:	e8 0e 5b 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010544:	83 c4 34             	add    esp,0x34
c0010547:	5e                   	pop    esi
c0010548:	5f                   	pop    edi
c0010549:	c3                   	ret    

c001054a <KiDefaultSignalHandlerResume(int)>:
c001054a:	57                   	push   edi
c001054b:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010550:	56                   	push   esi
c0010551:	be 77 33 02 c0       	mov    esi,0xc0023377
c0010556:	83 ec 24             	sub    esp,0x24
c0010559:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001055d:	fc                   	cld    
c001055e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010560:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010564:	50                   	push   eax
c0010565:	6a 00                	push   0x0
c0010567:	6a 00                	push   0x0
c0010569:	6a 27                	push   0x27
c001056b:	e8 e2 5a 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010570:	83 c4 34             	add    esp,0x34
c0010573:	5e                   	pop    esi
c0010574:	5f                   	pop    edi
c0010575:	c3                   	ret    

c0010576 <KeDeinitSignals(SigHandlerBlock*)>:
c0010576:	e9 11 ec ff ff       	jmp    c000f18c <free>

c001057b <KeInitSignals()>:
c001057b:	53                   	push   ebx
c001057c:	83 ec 14             	sub    esp,0x14
c001057f:	68 c8 00 00 00       	push   0xc8
c0010584:	e8 f3 eb ff ff       	call   c000f17c <malloc>
c0010589:	83 c4 0c             	add    esp,0xc
c001058c:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010596:	89 c3                	mov    ebx,eax
c0010598:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00105a2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00105a8:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00105ac:	6a 20                	push   0x20
c00105ae:	6a 00                	push   0x0
c00105b0:	50                   	push   eax
c00105b1:	e8 3a ff fe ff       	call   c00004f0 <memset>
c00105b6:	83 c4 0c             	add    esp,0xc
c00105b9:	6a 44                	push   0x44
c00105bb:	6a 00                	push   0x0
c00105bd:	53                   	push   ebx
c00105be:	e8 2d ff fe ff       	call   c00004f0 <memset>
c00105c3:	83 c4 18             	add    esp,0x18
c00105c6:	89 d8                	mov    eax,ebx
c00105c8:	5b                   	pop    ebx
c00105c9:	c3                   	ret    

c00105ca <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00105ca:	53                   	push   ebx
c00105cb:	b8 01 00 00 00       	mov    eax,0x1
c00105d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00105d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105d8:	83 f9 10             	cmp    ecx,0x10
c00105db:	7f 21                	jg     c00105fe <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00105dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e1:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00105e4:	89 03                	mov    DWORD PTR [ebx],eax
c00105e6:	b8 01 00 00 00       	mov    eax,0x1
c00105eb:	d3 e0                	shl    eax,cl
c00105ed:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00105f1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00105f4:	31 c0                	xor    eax,eax
c00105f6:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00105fe:	5b                   	pop    ebx
c00105ff:	c3                   	ret    

c0010600 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010600:	55                   	push   ebp
c0010601:	57                   	push   edi
c0010602:	bf 08 00 00 00       	mov    edi,0x8
c0010607:	56                   	push   esi
c0010608:	53                   	push   ebx
c0010609:	83 ec 18             	sub    esp,0x18
c001060c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010610:	68 94 33 02 c0       	push   0xc0023394
c0010615:	e8 34 69 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001061a:	83 c4 10             	add    esp,0x10
c001061d:	31 c9                	xor    ecx,ecx
c001061f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010626:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001062c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010630:	99                   	cdq    
c0010631:	f7 ff                	idiv   edi
c0010633:	8d 42 24             	lea    eax,[edx+0x24]
c0010636:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001063a:	85 f6                	test   esi,esi
c001063c:	75 1a                	jne    c0010658 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001063e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010642:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010646:	50                   	push   eax
c0010647:	50                   	push   eax
c0010648:	52                   	push   edx
c0010649:	68 a5 33 02 c0       	push   0xc00233a5
c001064e:	e8 fb 68 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010653:	83 c4 10             	add    esp,0x10
c0010656:	eb 1b                	jmp    c0010673 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010658:	41                   	inc    ecx
c0010659:	83 f9 08             	cmp    ecx,0x8
c001065c:	75 ce                	jne    c001062c <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	be 01 00 00 00       	mov    esi,0x1
c0010666:	68 c6 33 02 c0       	push   0xc00233c6
c001066b:	e8 de 68 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010670:	83 c4 10             	add    esp,0x10
c0010673:	83 c4 0c             	add    esp,0xc
c0010676:	89 f0                	mov    eax,esi
c0010678:	5b                   	pop    ebx
c0010679:	5e                   	pop    esi
c001067a:	5f                   	pop    edi
c001067b:	5d                   	pop    ebp
c001067c:	c3                   	ret    

c001067d <KeCheckSignal(SigHandlerBlock*, int*)>:
c001067d:	55                   	push   ebp
c001067e:	57                   	push   edi
c001067f:	56                   	push   esi
c0010680:	53                   	push   ebx
c0010681:	51                   	push   ecx
c0010682:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010686:	85 db                	test   ebx,ebx
c0010688:	0f 84 bc 00 00 00    	je     c001074a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001068e:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010695:	0f 84 af 00 00 00    	je     c001074a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001069b:	31 c9                	xor    ecx,ecx
c001069d:	bf 08 00 00 00       	mov    edi,0x8
c00106a2:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00106a8:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00106ab:	99                   	cdq    
c00106ac:	f7 ff                	idiv   edi
c00106ae:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00106b5:	85 ed                	test   ebp,ebp
c00106b7:	0f 84 9e 00 00 00    	je     c001075b <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00106bd:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00106c3:	89 e9                	mov    ecx,ebp
c00106c5:	bf 01 00 00 00       	mov    edi,0x1
c00106ca:	d3 e7                	shl    edi,cl
c00106cc:	31 c9                	xor    ecx,ecx
c00106ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00106d1:	b8 01 00 00 00       	mov    eax,0x1
c00106d6:	d3 e0                	shl    eax,cl
c00106d8:	85 04 24             	test   DWORD PTR [esp],eax
c00106db:	74 06                	je     c00106e3 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00106dd:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00106e1:	75 67                	jne    c001074a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00106e3:	41                   	inc    ecx
c00106e4:	83 f9 11             	cmp    ecx,0x11
c00106e7:	75 e8                	jne    c00106d1 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00106e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00106ec:	46                   	inc    esi
c00106ed:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00106f3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00106fe:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010705:	09 f8                	or     eax,edi
c0010707:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001070d:	31 c0                	xor    eax,eax
c001070f:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010717:	74 09                	je     c0010722 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010719:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010720:	eb 06                	jmp    c0010728 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0010722:	40                   	inc    eax
c0010723:	83 f8 08             	cmp    eax,0x8
c0010726:	75 e7                	jne    c001070f <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0010728:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001072c:	83 fd 09             	cmp    ebp,0x9
c001072f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010732:	89 2a                	mov    DWORD PTR [edx],ebp
c0010734:	75 07                	jne    c001073d <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0010736:	b8 09 05 01 c0       	mov    eax,0xc0010509
c001073b:	eb 31                	jmp    c001076e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001073d:	83 f8 01             	cmp    eax,0x1
c0010740:	75 0c                	jne    c001074e <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0010742:	f7 d7                	not    edi
c0010744:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001074a:	31 c0                	xor    eax,eax
c001074c:	eb 20                	jmp    c001076e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001074e:	85 c0                	test   eax,eax
c0010750:	75 1c                	jne    c001076e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010752:	8b 04 ad 60 56 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffda9a0]
c0010759:	eb 13                	jmp    c001076e <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001075b:	41                   	inc    ecx
c001075c:	46                   	inc    esi
c001075d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010763:	83 f9 08             	cmp    ecx,0x8
c0010766:	0f 85 36 ff ff ff    	jne    c00106a2 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001076c:	eb dc                	jmp    c001074a <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001076e:	5a                   	pop    edx
c001076f:	5b                   	pop    ebx
c0010770:	5e                   	pop    esi
c0010771:	5f                   	pop    edi
c0010772:	5d                   	pop    ebp
c0010773:	c3                   	ret    

c0010774 <KiCheckSignalZ>:
c0010774:	83 ec 10             	sub    esp,0x10
c0010777:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001077b:	50                   	push   eax
c001077c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010781:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010784:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001078a:	e8 ee fe ff ff       	call   c001067d <KeCheckSignal(SigHandlerBlock*, int*)>
c001078f:	5a                   	pop    edx
c0010790:	31 d2                	xor    edx,edx
c0010792:	59                   	pop    ecx
c0010793:	85 c0                	test   eax,eax
c0010795:	74 19                	je     c00107b0 <KiCheckSignalZ+0x3c>
c0010797:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001079d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00107a0:	89 02                	mov    DWORD PTR [edx],eax
c00107a2:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00107a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107ad:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00107b0:	89 d0                	mov    eax,edx
c00107b2:	83 c4 10             	add    esp,0x10
c00107b5:	c3                   	ret    

c00107b6 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00107b6:	56                   	push   esi
c00107b7:	53                   	push   ebx
c00107b8:	bb 01 00 00 00       	mov    ebx,0x1
c00107bd:	52                   	push   edx
c00107be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107c6:	d3 e3                	shl    ebx,cl
c00107c8:	83 f9 10             	cmp    ecx,0x10
c00107cb:	7f 08                	jg     c00107d5 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00107cd:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00107d3:	75 10                	jne    c00107e5 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00107d5:	83 ec 0c             	sub    esp,0xc
c00107d8:	68 d7 33 02 c0       	push   0xc00233d7
c00107dd:	e8 e0 ec ff ff       	call   c000f4c2 <KePanic(char const*)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	f7 d3                	not    ebx
c00107e7:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00107ed:	58                   	pop    eax
c00107ee:	5b                   	pop    ebx
c00107ef:	5e                   	pop    esi
c00107f0:	c3                   	ret    

c00107f1 <KiFinishSignalZ>:
c00107f1:	53                   	push   ebx
c00107f2:	83 ec 10             	sub    esp,0x10
c00107f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107f9:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00107fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010801:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010804:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001080a:	e8 a7 ff ff ff       	call   c00107b6 <KeCompleteSignal(SigHandlerBlock*, int)>
c001080f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010815:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001081c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010823:	83 c4 18             	add    esp,0x18
c0010826:	5b                   	pop    ebx
c0010827:	c3                   	ret    

c0010828 <SysSeekDir(regs*)>:
c0010828:	31 c0                	xor    eax,eax
c001082a:	31 d2                	xor    edx,edx
c001082c:	c3                   	ret    

c001082d <SysTellDir(regs*)>:
c001082d:	31 c0                	xor    eax,eax
c001082f:	31 d2                	xor    edx,edx
c0010831:	c3                   	ret    

c0010832 <SysVerify(regs*)>:
c0010832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010836:	31 d2                	xor    edx,edx
c0010838:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001083b:	c3                   	ret    

c001083c <SysGetArgc(regs*)>:
c001083c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010841:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010844:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001084a:	89 c2                	mov    edx,eax
c001084c:	c1 fa 1f             	sar    edx,0x1f
c001084f:	c3                   	ret    

c0010850 <SysTTYName(regs*)>:
c0010850:	b8 01 00 00 00       	mov    eax,0x1
c0010855:	31 d2                	xor    edx,edx
c0010857:	c3                   	ret    

c0010858 <SysFormatDisk(regs*)>:
c0010858:	56                   	push   esi
c0010859:	53                   	push   ebx
c001085a:	83 ec 04             	sub    esp,0x4
c001085d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010861:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c0010867:	eb 2a                	jmp    c0010893 <SysFormatDisk(regs*)+0x3b>
c0010869:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001086c:	83 ec 0c             	sub    esp,0xc
c001086f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010872:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010874:	51                   	push   ecx
c0010875:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010878:	51                   	push   ecx
c0010879:	50                   	push   eax
c001087a:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0010881:	50                   	push   eax
c0010882:	53                   	push   ebx
c0010883:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010886:	83 c4 20             	add    esp,0x20
c0010889:	83 f8 08             	cmp    eax,0x8
c001088c:	89 c1                	mov    ecx,eax
c001088e:	75 14                	jne    c00108a4 <SysFormatDisk(regs*)+0x4c>
c0010890:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010893:	85 db                	test   ebx,ebx
c0010895:	75 d2                	jne    c0010869 <SysFormatDisk(regs*)+0x11>
c0010897:	b8 03 00 00 00       	mov    eax,0x3
c001089c:	31 d2                	xor    edx,edx
c001089e:	83 c4 04             	add    esp,0x4
c00108a1:	5b                   	pop    ebx
c00108a2:	5e                   	pop    esi
c00108a3:	c3                   	ret    
c00108a4:	85 c0                	test   eax,eax
c00108a6:	74 13                	je     c00108bb <SysFormatDisk(regs*)+0x63>
c00108a8:	31 d2                	xor    edx,edx
c00108aa:	83 f9 09             	cmp    ecx,0x9
c00108ad:	b8 01 00 00 00       	mov    eax,0x1
c00108b2:	74 ea                	je     c001089e <SysFormatDisk(regs*)+0x46>
c00108b4:	b8 02 00 00 00       	mov    eax,0x2
c00108b9:	eb e1                	jmp    c001089c <SysFormatDisk(regs*)+0x44>
c00108bb:	31 c0                	xor    eax,eax
c00108bd:	eb dd                	jmp    c001089c <SysFormatDisk(regs*)+0x44>

c00108bf <SysSetDiskVolumeLabel(regs*)>:
c00108bf:	56                   	push   esi
c00108c0:	53                   	push   ebx
c00108c1:	83 ec 04             	sub    esp,0x4
c00108c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108c8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108cb:	83 f8 19             	cmp    eax,0x19
c00108ce:	77 33                	ja     c0010903 <SysSetDiskVolumeLabel(regs*)+0x44>
c00108d0:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c00108d7:	85 c9                	test   ecx,ecx
c00108d9:	74 28                	je     c0010903 <SysSetDiskVolumeLabel(regs*)+0x44>
c00108db:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108de:	85 db                	test   ebx,ebx
c00108e0:	74 21                	je     c0010903 <SysSetDiskVolumeLabel(regs*)+0x44>
c00108e2:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00108e8:	85 d2                	test   edx,edx
c00108ea:	74 17                	je     c0010903 <SysSetDiskVolumeLabel(regs*)+0x44>
c00108ec:	8b 32                	mov    esi,DWORD PTR [edx]
c00108ee:	53                   	push   ebx
c00108ef:	50                   	push   eax
c00108f0:	51                   	push   ecx
c00108f1:	52                   	push   edx
c00108f2:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00108f5:	83 c4 10             	add    esp,0x10
c00108f8:	83 c4 04             	add    esp,0x4
c00108fb:	5b                   	pop    ebx
c00108fc:	5e                   	pop    esi
c00108fd:	89 c2                	mov    edx,eax
c00108ff:	c1 fa 1f             	sar    edx,0x1f
c0010902:	c3                   	ret    
c0010903:	83 c4 04             	add    esp,0x4
c0010906:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001090b:	5b                   	pop    ebx
c001090c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010911:	5e                   	pop    esi
c0010912:	c3                   	ret    

c0010913 <SysGetDiskVolumeLabel(regs*)>:
c0010913:	57                   	push   edi
c0010914:	56                   	push   esi
c0010915:	53                   	push   ebx
c0010916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001091d:	83 fa 19             	cmp    edx,0x19
c0010920:	77 3c                	ja     c001095e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010922:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c0010929:	85 c9                	test   ecx,ecx
c001092b:	74 31                	je     c001095e <SysGetDiskVolumeLabel(regs*)+0x4b>
c001092d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010930:	85 db                	test   ebx,ebx
c0010932:	74 2a                	je     c001095e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010934:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010937:	85 f6                	test   esi,esi
c0010939:	74 23                	je     c001095e <SysGetDiskVolumeLabel(regs*)+0x4b>
c001093b:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010941:	85 c0                	test   eax,eax
c0010943:	74 19                	je     c001095e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010945:	83 ec 0c             	sub    esp,0xc
c0010948:	8b 38                	mov    edi,DWORD PTR [eax]
c001094a:	56                   	push   esi
c001094b:	53                   	push   ebx
c001094c:	52                   	push   edx
c001094d:	51                   	push   ecx
c001094e:	50                   	push   eax
c001094f:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010952:	83 c4 20             	add    esp,0x20
c0010955:	5b                   	pop    ebx
c0010956:	5e                   	pop    esi
c0010957:	89 c2                	mov    edx,eax
c0010959:	c1 fa 1f             	sar    edx,0x1f
c001095c:	5f                   	pop    edi
c001095d:	c3                   	ret    
c001095e:	5b                   	pop    ebx
c001095f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010964:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010969:	5e                   	pop    esi
c001096a:	5f                   	pop    edi
c001096b:	c3                   	ret    

c001096c <SysRealpath(regs*)>:
c001096c:	53                   	push   ebx
c001096d:	83 ec 08             	sub    esp,0x8
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0010977:	85 c9                	test   ecx,ecx
c0010979:	74 36                	je     c00109b1 <SysRealpath(regs*)+0x45>
c001097b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001097e:	31 d2                	xor    edx,edx
c0010980:	b8 01 00 00 00       	mov    eax,0x1
c0010985:	85 db                	test   ebx,ebx
c0010987:	75 05                	jne    c001098e <SysRealpath(regs*)+0x22>
c0010989:	83 c4 08             	add    esp,0x8
c001098c:	5b                   	pop    ebx
c001098d:	c3                   	ret    
c001098e:	6a 00                	push   0x0
c0010990:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010995:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010998:	05 0c 01 00 00       	add    eax,0x10c
c001099d:	50                   	push   eax
c001099e:	51                   	push   ecx
c001099f:	53                   	push   ebx
c00109a0:	e8 5b 74 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00109a5:	83 c4 10             	add    esp,0x10
c00109a8:	31 c0                	xor    eax,eax
c00109aa:	31 d2                	xor    edx,edx
c00109ac:	83 c4 08             	add    esp,0x8
c00109af:	5b                   	pop    ebx
c00109b0:	c3                   	ret    
c00109b1:	b8 01 00 00 00       	mov    eax,0x1
c00109b6:	31 d2                	xor    edx,edx
c00109b8:	eb f2                	jmp    c00109ac <SysRealpath(regs*)+0x40>

c00109ba <SysReadDir(regs*)>:
c00109ba:	53                   	push   ebx
c00109bb:	83 ec 18             	sub    esp,0x18
c00109be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109c2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00109c5:	83 f8 02             	cmp    eax,0x2
c00109c8:	76 4f                	jbe    c0010a19 <SysReadDir(regs*)+0x5f>
c00109ca:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00109d1:	77 52                	ja     c0010a25 <SysReadDir(regs*)+0x6b>
c00109d3:	83 ec 0c             	sub    esp,0xc
c00109d6:	50                   	push   eax
c00109d7:	e8 55 1d 00 00       	call   c0012731 <KeGetFileFromDescriptor(int)>
c00109dc:	83 c4 10             	add    esp,0x10
c00109df:	85 c0                	test   eax,eax
c00109e1:	74 42                	je     c0010a25 <SysReadDir(regs*)+0x6b>
c00109e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00109eb:	83 ec 0c             	sub    esp,0xc
c00109ee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00109f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00109f4:	51                   	push   ecx
c00109f5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00109f8:	51                   	push   ecx
c00109f9:	6a 00                	push   0x0
c00109fb:	68 10 01 00 00       	push   0x110
c0010a00:	50                   	push   eax
c0010a01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a04:	83 c4 20             	add    esp,0x20
c0010a07:	85 c0                	test   eax,eax
c0010a09:	89 c1                	mov    ecx,eax
c0010a0b:	74 27                	je     c0010a34 <SysReadDir(regs*)+0x7a>
c0010a0d:	31 d2                	xor    edx,edx
c0010a0f:	83 f9 07             	cmp    ecx,0x7
c0010a12:	b8 02 00 00 00       	mov    eax,0x2
c0010a17:	75 16                	jne    c0010a2f <SysReadDir(regs*)+0x75>
c0010a19:	b8 01 00 00 00       	mov    eax,0x1
c0010a1e:	31 d2                	xor    edx,edx
c0010a20:	83 c4 18             	add    esp,0x18
c0010a23:	5b                   	pop    ebx
c0010a24:	c3                   	ret    
c0010a25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a2f:	83 c4 18             	add    esp,0x18
c0010a32:	5b                   	pop    ebx
c0010a33:	c3                   	ret    
c0010a34:	31 c0                	xor    eax,eax
c0010a36:	31 d2                	xor    edx,edx
c0010a38:	eb e6                	jmp    c0010a20 <SysReadDir(regs*)+0x66>

c0010a3a <SysIsATTY(regs*)>:
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a41:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a44:	83 f8 02             	cmp    eax,0x2
c0010a47:	76 07                	jbe    c0010a50 <SysIsATTY(regs*)+0x16>
c0010a49:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a4e:	75 26                	jne    c0010a76 <SysIsATTY(regs*)+0x3c>
c0010a50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a58:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a5e:	85 c0                	test   eax,eax
c0010a60:	74 24                	je     c0010a86 <SysIsATTY(regs*)+0x4c>
c0010a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a64:	83 ec 0c             	sub    esp,0xc
c0010a67:	50                   	push   eax
c0010a68:	ff 12                	call   DWORD PTR [edx]
c0010a6a:	83 c4 10             	add    esp,0x10
c0010a6d:	31 d2                	xor    edx,edx
c0010a6f:	83 c4 0c             	add    esp,0xc
c0010a72:	0f b6 c0             	movzx  eax,al
c0010a75:	c3                   	ret    
c0010a76:	83 ec 0c             	sub    esp,0xc
c0010a79:	50                   	push   eax
c0010a7a:	e8 b2 1c 00 00       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0010a7f:	83 c4 10             	add    esp,0x10
c0010a82:	85 c0                	test   eax,eax
c0010a84:	75 dc                	jne    c0010a62 <SysIsATTY(regs*)+0x28>
c0010a86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a90:	83 c4 0c             	add    esp,0xc
c0010a93:	c3                   	ret    

c0010a94 <SysSeek(regs*)>:
c0010a94:	53                   	push   ebx
c0010a95:	83 ec 08             	sub    esp,0x8
c0010a98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a9f:	8d 50 fd             	lea    edx,[eax-0x3]
c0010aa2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010aa8:	77 39                	ja     c0010ae3 <SysSeek(regs*)+0x4f>
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	50                   	push   eax
c0010aae:	e8 7e 1c 00 00       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	85 c0                	test   eax,eax
c0010ab8:	74 29                	je     c0010ae3 <SysSeek(regs*)+0x4f>
c0010aba:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010abd:	83 ec 04             	sub    esp,0x4
c0010ac0:	31 db                	xor    ebx,ebx
c0010ac2:	53                   	push   ebx
c0010ac3:	51                   	push   ecx
c0010ac4:	50                   	push   eax
c0010ac5:	e8 3e 77 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0010aca:	83 c4 10             	add    esp,0x10
c0010acd:	85 c0                	test   eax,eax
c0010acf:	0f 95 c0             	setne  al
c0010ad2:	31 d2                	xor    edx,edx
c0010ad4:	0f b6 c0             	movzx  eax,al
c0010ad7:	f7 d8                	neg    eax
c0010ad9:	83 d2 00             	adc    edx,0x0
c0010adc:	83 c4 08             	add    esp,0x8
c0010adf:	5b                   	pop    ebx
c0010ae0:	f7 da                	neg    edx
c0010ae2:	c3                   	ret    
c0010ae3:	83 c4 08             	add    esp,0x8
c0010ae6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aeb:	5b                   	pop    ebx
c0010aec:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010af1:	c3                   	ret    

c0010af2 <SysTell(regs*)>:
c0010af2:	53                   	push   ebx
c0010af3:	83 ec 08             	sub    esp,0x8
c0010af6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010afa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010afd:	83 f8 02             	cmp    eax,0x2
c0010b00:	76 56                	jbe    c0010b58 <SysTell(regs*)+0x66>
c0010b02:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b07:	76 19                	jbe    c0010b22 <SysTell(regs*)+0x30>
c0010b09:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b0c:	31 d2                	xor    edx,edx
c0010b0e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b1b:	83 c4 08             	add    esp,0x8
c0010b1e:	31 c0                	xor    eax,eax
c0010b20:	5b                   	pop    ebx
c0010b21:	c3                   	ret    
c0010b22:	83 ec 0c             	sub    esp,0xc
c0010b25:	50                   	push   eax
c0010b26:	e8 06 1c 00 00       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0010b2b:	83 c4 10             	add    esp,0x10
c0010b2e:	85 c0                	test   eax,eax
c0010b30:	74 26                	je     c0010b58 <SysTell(regs*)+0x66>
c0010b32:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b35:	83 ec 08             	sub    esp,0x8
c0010b38:	52                   	push   edx
c0010b39:	50                   	push   eax
c0010b3a:	e8 75 77 ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c0010b3f:	83 c4 10             	add    esp,0x10
c0010b42:	85 c0                	test   eax,eax
c0010b44:	0f 95 c0             	setne  al
c0010b47:	31 d2                	xor    edx,edx
c0010b49:	0f b6 c0             	movzx  eax,al
c0010b4c:	f7 d8                	neg    eax
c0010b4e:	83 d2 00             	adc    edx,0x0
c0010b51:	83 c4 08             	add    esp,0x8
c0010b54:	5b                   	pop    ebx
c0010b55:	f7 da                	neg    edx
c0010b57:	c3                   	ret    
c0010b58:	83 c4 08             	add    esp,0x8
c0010b5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b60:	5b                   	pop    ebx
c0010b61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b66:	c3                   	ret    

c0010b67 <SysSize(regs*)>:
c0010b67:	53                   	push   ebx
c0010b68:	83 ec 18             	sub    esp,0x18
c0010b6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b72:	83 f8 02             	cmp    eax,0x2
c0010b75:	76 5b                	jbe    c0010bd2 <SysSize(regs*)+0x6b>
c0010b77:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b7c:	76 19                	jbe    c0010b97 <SysSize(regs*)+0x30>
c0010b7e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b81:	31 d2                	xor    edx,edx
c0010b83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b90:	83 c4 18             	add    esp,0x18
c0010b93:	31 c0                	xor    eax,eax
c0010b95:	5b                   	pop    ebx
c0010b96:	c3                   	ret    
c0010b97:	83 ec 0c             	sub    esp,0xc
c0010b9a:	50                   	push   eax
c0010b9b:	e8 91 1b 00 00       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0010ba0:	83 c4 10             	add    esp,0x10
c0010ba3:	85 c0                	test   eax,eax
c0010ba5:	74 2b                	je     c0010bd2 <SysSize(regs*)+0x6b>
c0010ba7:	83 ec 04             	sub    esp,0x4
c0010baa:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010bae:	52                   	push   edx
c0010baf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010bb2:	52                   	push   edx
c0010bb3:	50                   	push   eax
c0010bb4:	e8 93 78 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	0f 95 c0             	setne  al
c0010bc1:	31 d2                	xor    edx,edx
c0010bc3:	0f b6 c0             	movzx  eax,al
c0010bc6:	f7 d8                	neg    eax
c0010bc8:	83 d2 00             	adc    edx,0x0
c0010bcb:	83 c4 18             	add    esp,0x18
c0010bce:	5b                   	pop    ebx
c0010bcf:	f7 da                	neg    edx
c0010bd1:	c3                   	ret    
c0010bd2:	83 c4 18             	add    esp,0x18
c0010bd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bda:	5b                   	pop    ebx
c0010bdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010be0:	c3                   	ret    

c0010be1 <SysSizeFromFilename(regs*)>:
c0010be1:	55                   	push   ebp
c0010be2:	57                   	push   edi
c0010be3:	56                   	push   esi
c0010be4:	53                   	push   ebx
c0010be5:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010beb:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010bf2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010bf5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010bf8:	85 f6                	test   esi,esi
c0010bfa:	89 f8                	mov    eax,edi
c0010bfc:	74 09                	je     c0010c07 <SysSizeFromFilename(regs*)+0x26>
c0010bfe:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010c04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c07:	83 f8 02             	cmp    eax,0x2
c0010c0a:	0f 86 c9 00 00 00    	jbe    c0010cd9 <SysSizeFromFilename(regs*)+0xf8>
c0010c10:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c15:	76 1f                	jbe    c0010c36 <SysSizeFromFilename(regs*)+0x55>
c0010c17:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010c1a:	31 d2                	xor    edx,edx
c0010c1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c29:	31 c0                	xor    eax,eax
c0010c2b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010c31:	5b                   	pop    ebx
c0010c32:	5e                   	pop    esi
c0010c33:	5f                   	pop    edi
c0010c34:	5d                   	pop    ebp
c0010c35:	c3                   	ret    
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	68 14 01 00 00       	push   0x114
c0010c3e:	e8 39 e5 ff ff       	call   c000f17c <malloc>
c0010c43:	6a 01                	push   0x1
c0010c45:	89 c5                	mov    ebp,eax
c0010c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c4f:	50                   	push   eax
c0010c50:	57                   	push   edi
c0010c51:	55                   	push   ebp
c0010c52:	e8 d7 73 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010c57:	83 c4 20             	add    esp,0x20
c0010c5a:	85 ed                	test   ebp,ebp
c0010c5c:	74 7b                	je     c0010cd9 <SysSizeFromFilename(regs*)+0xf8>
c0010c5e:	83 ec 04             	sub    esp,0x4
c0010c61:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010c65:	50                   	push   eax
c0010c66:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010c69:	51                   	push   ecx
c0010c6a:	55                   	push   ebp
c0010c6b:	e8 dc 77 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010c70:	89 c3                	mov    ebx,eax
c0010c72:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010c75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010c78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	85 db                	test   ebx,ebx
c0010c80:	75 57                	jne    c0010cd9 <SysSizeFromFilename(regs*)+0xf8>
c0010c82:	6a 00                	push   0x0
c0010c84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c8c:	05 0c 01 00 00       	add    eax,0x10c
c0010c91:	50                   	push   eax
c0010c92:	57                   	push   edi
c0010c93:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010c9a:	53                   	push   ebx
c0010c9b:	e8 60 71 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010ca0:	58                   	pop    eax
c0010ca1:	5a                   	pop    edx
c0010ca2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010ca6:	50                   	push   eax
c0010ca7:	53                   	push   ebx
c0010ca8:	e8 da 6b ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010cad:	83 c4 10             	add    esp,0x10
c0010cb0:	ba 00 00 00 00       	mov    edx,0x0
c0010cb5:	83 f8 01             	cmp    eax,0x1
c0010cb8:	b8 00 00 00 00       	mov    eax,0x0
c0010cbd:	74 2f                	je     c0010cee <SysSizeFromFilename(regs*)+0x10d>
c0010cbf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010cc4:	74 3b                	je     c0010d01 <SysSizeFromFilename(regs*)+0x120>
c0010cc6:	85 f6                	test   esi,esi
c0010cc8:	0f 84 5d ff ff ff    	je     c0010c2b <SysSizeFromFilename(regs*)+0x4a>
c0010cce:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010cd4:	e9 52 ff ff ff       	jmp    c0010c2b <SysSizeFromFilename(regs*)+0x4a>
c0010cd9:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010cdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ce4:	5b                   	pop    ebx
c0010ce5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cea:	5e                   	pop    esi
c0010ceb:	5f                   	pop    edi
c0010cec:	5d                   	pop    ebp
c0010ced:	c3                   	ret    
c0010cee:	85 f6                	test   esi,esi
c0010cf0:	0f 84 35 ff ff ff    	je     c0010c2b <SysSizeFromFilename(regs*)+0x4a>
c0010cf6:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010cfc:	e9 2a ff ff ff       	jmp    c0010c2b <SysSizeFromFilename(regs*)+0x4a>
c0010d01:	85 f6                	test   esi,esi
c0010d03:	0f 84 22 ff ff ff    	je     c0010c2b <SysSizeFromFilename(regs*)+0x4a>
c0010d09:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010d0f:	e9 17 ff ff ff       	jmp    c0010c2b <SysSizeFromFilename(regs*)+0x4a>

c0010d14 <SysSizeFromFilenameNoSymlink(regs*)>:
c0010d14:	55                   	push   ebp
c0010d15:	57                   	push   edi
c0010d16:	56                   	push   esi
c0010d17:	53                   	push   ebx
c0010d18:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010d1e:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010d25:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010d28:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010d2b:	85 f6                	test   esi,esi
c0010d2d:	89 f8                	mov    eax,edi
c0010d2f:	74 09                	je     c0010d3a <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010d31:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010d37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d3a:	83 f8 02             	cmp    eax,0x2
c0010d3d:	0f 86 c9 00 00 00    	jbe    c0010e0c <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0010d43:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d48:	76 1f                	jbe    c0010d69 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010d4a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d4d:	31 d2                	xor    edx,edx
c0010d4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d5c:	31 c0                	xor    eax,eax
c0010d5e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010d64:	5b                   	pop    ebx
c0010d65:	5e                   	pop    esi
c0010d66:	5f                   	pop    edi
c0010d67:	5d                   	pop    ebp
c0010d68:	c3                   	ret    
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	68 14 01 00 00       	push   0x114
c0010d71:	e8 06 e4 ff ff       	call   c000f17c <malloc>
c0010d76:	6a 00                	push   0x0
c0010d78:	89 c5                	mov    ebp,eax
c0010d7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d82:	50                   	push   eax
c0010d83:	57                   	push   edi
c0010d84:	55                   	push   ebp
c0010d85:	e8 a4 72 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010d8a:	83 c4 20             	add    esp,0x20
c0010d8d:	85 ed                	test   ebp,ebp
c0010d8f:	74 7b                	je     c0010e0c <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0010d91:	83 ec 04             	sub    esp,0x4
c0010d94:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010d98:	50                   	push   eax
c0010d99:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010d9c:	51                   	push   ecx
c0010d9d:	55                   	push   ebp
c0010d9e:	e8 a9 76 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010da3:	89 c3                	mov    ebx,eax
c0010da5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010da8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010dab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	85 db                	test   ebx,ebx
c0010db3:	75 57                	jne    c0010e0c <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0010db5:	6a 00                	push   0x0
c0010db7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010dbf:	05 0c 01 00 00       	add    eax,0x10c
c0010dc4:	50                   	push   eax
c0010dc5:	57                   	push   edi
c0010dc6:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010dcd:	53                   	push   ebx
c0010dce:	e8 2d 70 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010dd3:	58                   	pop    eax
c0010dd4:	5a                   	pop    edx
c0010dd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010dd9:	50                   	push   eax
c0010dda:	53                   	push   ebx
c0010ddb:	e8 a7 6a ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	ba 00 00 00 00       	mov    edx,0x0
c0010de8:	83 f8 01             	cmp    eax,0x1
c0010deb:	b8 00 00 00 00       	mov    eax,0x0
c0010df0:	74 2f                	je     c0010e21 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0010df2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010df7:	74 3b                	je     c0010e34 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0010df9:	85 f6                	test   esi,esi
c0010dfb:	0f 84 5d ff ff ff    	je     c0010d5e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010e01:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010e07:	e9 52 ff ff ff       	jmp    c0010d5e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010e0c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010e12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e17:	5b                   	pop    ebx
c0010e18:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e1d:	5e                   	pop    esi
c0010e1e:	5f                   	pop    edi
c0010e1f:	5d                   	pop    ebp
c0010e20:	c3                   	ret    
c0010e21:	85 f6                	test   esi,esi
c0010e23:	0f 84 35 ff ff ff    	je     c0010d5e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010e29:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010e2f:	e9 2a ff ff ff       	jmp    c0010d5e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010e34:	85 f6                	test   esi,esi
c0010e36:	0f 84 22 ff ff ff    	je     c0010d5e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010e3c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010e42:	e9 17 ff ff ff       	jmp    c0010d5e <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0010e47 <SysClose(regs*)>:
c0010e47:	57                   	push   edi
c0010e48:	56                   	push   esi
c0010e49:	53                   	push   ebx
c0010e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e51:	83 f8 02             	cmp    eax,0x2
c0010e54:	76 44                	jbe    c0010e9a <SysClose(regs*)+0x53>
c0010e56:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010e5c:	31 f6                	xor    esi,esi
c0010e5e:	31 ff                	xor    edi,edi
c0010e60:	83 fa 01             	cmp    edx,0x1
c0010e63:	76 2d                	jbe    c0010e92 <SysClose(regs*)+0x4b>
c0010e65:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e6a:	77 2e                	ja     c0010e9a <SysClose(regs*)+0x53>
c0010e6c:	83 ec 0c             	sub    esp,0xc
c0010e6f:	50                   	push   eax
c0010e70:	e8 bc 18 00 00       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0010e75:	83 c4 10             	add    esp,0x10
c0010e78:	85 c0                	test   eax,eax
c0010e7a:	89 c3                	mov    ebx,eax
c0010e7c:	74 1c                	je     c0010e9a <SysClose(regs*)+0x53>
c0010e7e:	83 ec 0c             	sub    esp,0xc
c0010e81:	50                   	push   eax
c0010e82:	e8 21 73 ff ff       	call   c00081a8 <File::close()>
c0010e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e8f:	83 c4 10             	add    esp,0x10
c0010e92:	5b                   	pop    ebx
c0010e93:	89 f0                	mov    eax,esi
c0010e95:	89 fa                	mov    edx,edi
c0010e97:	5e                   	pop    esi
c0010e98:	5f                   	pop    edi
c0010e99:	c3                   	ret    
c0010e9a:	5b                   	pop    ebx
c0010e9b:	be ff ff ff ff       	mov    esi,0xffffffff
c0010ea0:	89 f0                	mov    eax,esi
c0010ea2:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010ea7:	89 fa                	mov    edx,edi
c0010ea9:	5e                   	pop    esi
c0010eaa:	5f                   	pop    edi
c0010eab:	c3                   	ret    

c0010eac <SysOpenDir(regs*)>:
c0010eac:	56                   	push   esi
c0010ead:	53                   	push   ebx
c0010eae:	83 ec 04             	sub    esp,0x4
c0010eb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eb5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010eb8:	85 c9                	test   ecx,ecx
c0010eba:	74 5d                	je     c0010f19 <SysOpenDir(regs*)+0x6d>
c0010ebc:	83 ec 0c             	sub    esp,0xc
c0010ebf:	68 14 01 00 00       	push   0x114
c0010ec4:	e8 b3 e2 ff ff       	call   c000f17c <malloc>
c0010ec9:	83 c4 0c             	add    esp,0xc
c0010ecc:	89 c6                	mov    esi,eax
c0010ece:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ed6:	50                   	push   eax
c0010ed7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010eda:	52                   	push   edx
c0010edb:	56                   	push   esi
c0010edc:	e8 2b 77 ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0010ee1:	83 c4 10             	add    esp,0x10
c0010ee4:	85 f6                	test   esi,esi
c0010ee6:	74 31                	je     c0010f19 <SysOpenDir(regs*)+0x6d>
c0010ee8:	83 ec 0c             	sub    esp,0xc
c0010eeb:	56                   	push   esi
c0010eec:	e8 e3 77 ff ff       	call   c00086d4 <Directory::open()>
c0010ef1:	83 c4 10             	add    esp,0x10
c0010ef4:	85 c0                	test   eax,eax
c0010ef6:	75 21                	jne    c0010f19 <SysOpenDir(regs*)+0x6d>
c0010ef8:	83 ec 0c             	sub    esp,0xc
c0010efb:	56                   	push   esi
c0010efc:	e8 33 15 00 00       	call   c0012434 <UnixFile::getFileDescriptor()>
c0010f01:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	89 02                	mov    DWORD PTR [edx],eax
c0010f09:	c1 f8 1f             	sar    eax,0x1f
c0010f0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f0f:	83 c4 04             	add    esp,0x4
c0010f12:	31 c0                	xor    eax,eax
c0010f14:	5b                   	pop    ebx
c0010f15:	31 d2                	xor    edx,edx
c0010f17:	5e                   	pop    esi
c0010f18:	c3                   	ret    
c0010f19:	83 c4 04             	add    esp,0x4
c0010f1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f21:	5b                   	pop    ebx
c0010f22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f27:	5e                   	pop    esi
c0010f28:	c3                   	ret    

c0010f29 <SysMakeDir(regs*)>:
c0010f29:	56                   	push   esi
c0010f2a:	53                   	push   ebx
c0010f2b:	83 ec 10             	sub    esp,0x10
c0010f2e:	68 14 01 00 00       	push   0x114
c0010f33:	e8 44 e2 ff ff       	call   c000f17c <malloc>
c0010f38:	83 c4 0c             	add    esp,0xc
c0010f3b:	89 c3                	mov    ebx,eax
c0010f3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f45:	50                   	push   eax
c0010f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f4a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0010f4d:	52                   	push   edx
c0010f4e:	53                   	push   ebx
c0010f4f:	e8 b8 76 ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	85 db                	test   ebx,ebx
c0010f59:	74 2c                	je     c0010f87 <SysMakeDir(regs*)+0x5e>
c0010f5b:	83 ec 0c             	sub    esp,0xc
c0010f5e:	53                   	push   ebx
c0010f5f:	e8 50 79 ff ff       	call   c00088b4 <Directory::create()>
c0010f64:	89 c6                	mov    esi,eax
c0010f66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	31 c0                	xor    eax,eax
c0010f73:	85 f6                	test   esi,esi
c0010f75:	0f 95 c0             	setne  al
c0010f78:	31 d2                	xor    edx,edx
c0010f7a:	f7 d8                	neg    eax
c0010f7c:	83 d2 00             	adc    edx,0x0
c0010f7f:	83 c4 04             	add    esp,0x4
c0010f82:	5b                   	pop    ebx
c0010f83:	f7 da                	neg    edx
c0010f85:	5e                   	pop    esi
c0010f86:	c3                   	ret    
c0010f87:	83 c4 04             	add    esp,0x4
c0010f8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f8f:	5b                   	pop    ebx
c0010f90:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f95:	5e                   	pop    esi
c0010f96:	c3                   	ret    

c0010f97 <SysCloseDir(regs*)>:
c0010f97:	53                   	push   ebx
c0010f98:	83 ec 08             	sub    esp,0x8
c0010f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fa2:	8d 50 fd             	lea    edx,[eax-0x3]
c0010fa5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010fab:	77 2f                	ja     c0010fdc <SysCloseDir(regs*)+0x45>
c0010fad:	83 ec 0c             	sub    esp,0xc
c0010fb0:	50                   	push   eax
c0010fb1:	e8 7b 17 00 00       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0010fb6:	83 c4 10             	add    esp,0x10
c0010fb9:	85 c0                	test   eax,eax
c0010fbb:	89 c3                	mov    ebx,eax
c0010fbd:	74 1d                	je     c0010fdc <SysCloseDir(regs*)+0x45>
c0010fbf:	83 ec 0c             	sub    esp,0xc
c0010fc2:	50                   	push   eax
c0010fc3:	e8 68 77 ff ff       	call   c0008730 <Directory::close()>
c0010fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	31 c0                	xor    eax,eax
c0010fd5:	83 c4 08             	add    esp,0x8
c0010fd8:	31 d2                	xor    edx,edx
c0010fda:	5b                   	pop    ebx
c0010fdb:	c3                   	ret    
c0010fdc:	83 c4 08             	add    esp,0x8
c0010fdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fe4:	5b                   	pop    ebx
c0010fe5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fea:	c3                   	ret    

c0010feb <SysWait(regs*)>:
c0010feb:	83 ec 10             	sub    esp,0x10
c0010fee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ff2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ff5:	52                   	push   edx
c0010ff6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010ff9:	51                   	push   ecx
c0010ffa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ffd:	50                   	push   eax
c0010ffe:	e8 fd 51 00 00       	call   c0016200 <waitTask(int, int*, int)>
c0011003:	83 c4 1c             	add    esp,0x1c
c0011006:	89 c2                	mov    edx,eax
c0011008:	c1 fa 1f             	sar    edx,0x1f
c001100b:	c3                   	ret    

c001100c <SysNotImpl(regs*)>:
c001100c:	83 ec 18             	sub    esp,0x18
c001100f:	68 e8 33 02 c0       	push   0xc00233e8
c0011014:	e8 a9 e4 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0011019:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001101e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011023:	83 c4 1c             	add    esp,0x1c
c0011026:	c3                   	ret    

c0011027 <SysPanic(regs*)>:
c0011027:	83 ec 18             	sub    esp,0x18
c001102a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001102e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011031:	50                   	push   eax
c0011032:	e8 8b e4 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0011037:	b8 01 00 00 00       	mov    eax,0x1
c001103c:	31 d2                	xor    edx,edx
c001103e:	83 c4 1c             	add    esp,0x1c
c0011041:	c3                   	ret    

c0011042 <SysRmdir(regs*)>:
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 10             	sub    esp,0x10
c0011047:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001104b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001104e:	68 14 01 00 00       	push   0x114
c0011053:	e8 24 e1 ff ff       	call   c000f17c <malloc>
c0011058:	6a 00                	push   0x0
c001105a:	89 c3                	mov    ebx,eax
c001105c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011061:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011064:	50                   	push   eax
c0011065:	56                   	push   esi
c0011066:	53                   	push   ebx
c0011067:	e8 c2 6f ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001106c:	83 c4 14             	add    esp,0x14
c001106f:	53                   	push   ebx
c0011070:	e8 a3 72 ff ff       	call   c0008318 <File::unlink()>
c0011075:	83 c4 10             	add    esp,0x10
c0011078:	85 db                	test   ebx,ebx
c001107a:	89 c6                	mov    esi,eax
c001107c:	74 0c                	je     c001108a <SysRmdir(regs*)+0x48>
c001107e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011080:	83 ec 0c             	sub    esp,0xc
c0011083:	53                   	push   ebx
c0011084:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	31 c0                	xor    eax,eax
c001108c:	85 f6                	test   esi,esi
c001108e:	0f 95 c0             	setne  al
c0011091:	31 d2                	xor    edx,edx
c0011093:	f7 d8                	neg    eax
c0011095:	83 d2 00             	adc    edx,0x0
c0011098:	83 c4 04             	add    esp,0x4
c001109b:	5b                   	pop    ebx
c001109c:	f7 da                	neg    edx
c001109e:	5e                   	pop    esi
c001109f:	c3                   	ret    

c00110a0 <SysUnlink(regs*)>:
c00110a0:	56                   	push   esi
c00110a1:	53                   	push   ebx
c00110a2:	83 ec 10             	sub    esp,0x10
c00110a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110a9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00110ac:	68 14 01 00 00       	push   0x114
c00110b1:	e8 c6 e0 ff ff       	call   c000f17c <malloc>
c00110b6:	6a 00                	push   0x0
c00110b8:	89 c3                	mov    ebx,eax
c00110ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110c2:	50                   	push   eax
c00110c3:	56                   	push   esi
c00110c4:	53                   	push   ebx
c00110c5:	e8 64 6f ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00110ca:	83 c4 14             	add    esp,0x14
c00110cd:	53                   	push   ebx
c00110ce:	e8 45 72 ff ff       	call   c0008318 <File::unlink()>
c00110d3:	83 c4 10             	add    esp,0x10
c00110d6:	85 db                	test   ebx,ebx
c00110d8:	89 c6                	mov    esi,eax
c00110da:	74 0c                	je     c00110e8 <SysUnlink(regs*)+0x48>
c00110dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110de:	83 ec 0c             	sub    esp,0xc
c00110e1:	53                   	push   ebx
c00110e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110e5:	83 c4 10             	add    esp,0x10
c00110e8:	31 c0                	xor    eax,eax
c00110ea:	85 f6                	test   esi,esi
c00110ec:	0f 95 c0             	setne  al
c00110ef:	31 d2                	xor    edx,edx
c00110f1:	f7 d8                	neg    eax
c00110f3:	83 d2 00             	adc    edx,0x0
c00110f6:	83 c4 04             	add    esp,0x4
c00110f9:	5b                   	pop    ebx
c00110fa:	f7 da                	neg    edx
c00110fc:	5e                   	pop    esi
c00110fd:	c3                   	ret    

c00110fe <SysGetArgv(regs*)>:
c00110fe:	83 ec 0c             	sub    esp,0xc
c0011101:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011105:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011108:	85 c0                	test   eax,eax
c001110a:	78 2c                	js     c0011138 <SysGetArgv(regs*)+0x3a>
c001110c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011112:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011115:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001111b:	7d 1b                	jge    c0011138 <SysGetArgv(regs*)+0x3a>
c001111d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011124:	85 c0                	test   eax,eax
c0011126:	74 18                	je     c0011140 <SysGetArgv(regs*)+0x42>
c0011128:	83 ec 08             	sub    esp,0x8
c001112b:	50                   	push   eax
c001112c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001112f:	50                   	push   eax
c0011130:	e8 1b f5 fe ff       	call   c0000650 <strcpy>
c0011135:	83 c4 10             	add    esp,0x10
c0011138:	31 c0                	xor    eax,eax
c001113a:	31 d2                	xor    edx,edx
c001113c:	83 c4 0c             	add    esp,0xc
c001113f:	c3                   	ret    
c0011140:	b8 01 00 00 00       	mov    eax,0x1
c0011145:	31 d2                	xor    edx,edx
c0011147:	83 c4 0c             	add    esp,0xc
c001114a:	c3                   	ret    

c001114b <SysUSleep(regs*)>:
c001114b:	83 ec 1c             	sub    esp,0x1c
c001114e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011152:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011155:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011158:	6a 00                	push   0x0
c001115a:	6a 64                	push   0x64
c001115c:	52                   	push   edx
c001115d:	50                   	push   eax
c001115e:	e8 11 f9 00 00       	call   c0020a74 <__udivdi3>
c0011163:	83 c4 14             	add    esp,0x14
c0011166:	50                   	push   eax
c0011167:	e8 80 51 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c001116c:	31 c0                	xor    eax,eax
c001116e:	31 d2                	xor    edx,edx
c0011170:	83 c4 1c             	add    esp,0x1c
c0011173:	c3                   	ret    

c0011174 <SysSpawn(regs*)>:
c0011174:	56                   	push   esi
c0011175:	53                   	push   ebx
c0011176:	83 ec 04             	sub    esp,0x4
c0011179:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001117d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011180:	85 f6                	test   esi,esi
c0011182:	75 0a                	jne    c001118e <SysSpawn(regs*)+0x1a>
c0011184:	83 c4 04             	add    esp,0x4
c0011187:	31 c0                	xor    eax,eax
c0011189:	5b                   	pop    ebx
c001118a:	31 d2                	xor    edx,edx
c001118c:	5e                   	pop    esi
c001118d:	c3                   	ret    
c001118e:	83 ec 0c             	sub    esp,0xc
c0011191:	68 24 07 00 00       	push   0x724
c0011196:	e8 e1 df ff ff       	call   c000f17c <malloc>
c001119b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111a4:	89 c6                	mov    esi,eax
c00111a6:	31 c0                	xor    eax,eax
c00111a8:	85 c9                	test   ecx,ecx
c00111aa:	74 08                	je     c00111b4 <SysSpawn(regs*)+0x40>
c00111ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111b4:	52                   	push   edx
c00111b5:	50                   	push   eax
c00111b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00111b9:	50                   	push   eax
c00111ba:	56                   	push   esi
c00111bb:	e8 84 48 00 00       	call   c0015a44 <Process::Process(char const*, Process*, char**)>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00111ca:	75 b8                	jne    c0011184 <SysSpawn(regs*)+0x10>
c00111cc:	83 ec 0c             	sub    esp,0xc
c00111cf:	56                   	push   esi
c00111d0:	e8 eb 4d 00 00       	call   c0015fc0 <Process::createUserThread()>
c00111d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	83 c4 04             	add    esp,0x4
c00111dd:	5b                   	pop    ebx
c00111de:	89 c2                	mov    edx,eax
c00111e0:	c1 fa 1f             	sar    edx,0x1f
c00111e3:	5e                   	pop    esi
c00111e4:	c3                   	ret    

c00111e5 <SysGetEnv(regs*)>:
c00111e5:	57                   	push   edi
c00111e6:	56                   	push   esi
c00111e7:	53                   	push   ebx
c00111e8:	83 ec 1c             	sub    esp,0x1c
c00111eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111f4:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00111f7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00111fa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00111fd:	51                   	push   ecx
c00111fe:	e8 b0 cc ff ff       	call   c000deb3 <KeGetProcessTotalEnvCount(Process*)>
c0011203:	83 c4 10             	add    esp,0x10
c0011206:	39 c7                	cmp    edi,eax
c0011208:	7c 12                	jl     c001121c <SysGetEnv(regs*)+0x37>
c001120a:	31 c0                	xor    eax,eax
c001120c:	31 d2                	xor    edx,edx
c001120e:	85 f6                	test   esi,esi
c0011210:	74 03                	je     c0011215 <SysGetEnv(regs*)+0x30>
c0011212:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	5b                   	pop    ebx
c0011219:	5e                   	pop    esi
c001121a:	5f                   	pop    edi
c001121b:	c3                   	ret    
c001121c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011220:	83 ec 04             	sub    esp,0x4
c0011223:	57                   	push   edi
c0011224:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001122a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001122d:	57                   	push   edi
c001122e:	50                   	push   eax
c001122f:	e8 9f cc ff ff       	call   c000ded3 <KeGetProcessEnvPair(Process*, int)>
c0011234:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001123b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001123f:	83 c4 0c             	add    esp,0xc
c0011242:	85 d2                	test   edx,edx
c0011244:	75 23                	jne    c0011269 <SysGetEnv(regs*)+0x84>
c0011246:	83 ec 0c             	sub    esp,0xc
c0011249:	50                   	push   eax
c001124a:	e8 31 f3 fe ff       	call   c0000580 <strlen>
c001124f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011252:	89 c3                	mov    ebx,eax
c0011254:	e8 27 f3 fe ff       	call   c0000580 <strlen>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	31 d2                	xor    edx,edx
c001125e:	83 c4 10             	add    esp,0x10
c0011261:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011265:	5b                   	pop    ebx
c0011266:	5e                   	pop    esi
c0011267:	5f                   	pop    edi
c0011268:	c3                   	ret    
c0011269:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001126c:	83 ec 08             	sub    esp,0x8
c001126f:	50                   	push   eax
c0011270:	56                   	push   esi
c0011271:	e8 da f3 fe ff       	call   c0000650 <strcpy>
c0011276:	58                   	pop    eax
c0011277:	5a                   	pop    edx
c0011278:	68 02 34 02 c0       	push   0xc0023402
c001127d:	56                   	push   esi
c001127e:	e8 ed f5 fe ff       	call   c0000870 <strcat>
c0011283:	59                   	pop    ecx
c0011284:	5b                   	pop    ebx
c0011285:	57                   	push   edi
c0011286:	56                   	push   esi
c0011287:	e8 e4 f5 fe ff       	call   c0000870 <strcat>
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	31 c0                	xor    eax,eax
c0011291:	83 c4 10             	add    esp,0x10
c0011294:	31 d2                	xor    edx,edx
c0011296:	5b                   	pop    ebx
c0011297:	5e                   	pop    esi
c0011298:	5f                   	pop    edi
c0011299:	c3                   	ret    

c001129a <SysSetFatAttrib(regs*)>:
c001129a:	57                   	push   edi
c001129b:	56                   	push   esi
c001129c:	53                   	push   ebx
c001129d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112a1:	83 ec 0c             	sub    esp,0xc
c00112a4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00112a7:	68 14 01 00 00       	push   0x114
c00112ac:	e8 cb de ff ff       	call   c000f17c <malloc>
c00112b1:	83 c4 0c             	add    esp,0xc
c00112b4:	89 c3                	mov    ebx,eax
c00112b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112be:	50                   	push   eax
c00112bf:	57                   	push   edi
c00112c0:	53                   	push   ebx
c00112c1:	e8 66 6e ff ff       	call   c000812c <File::File(char const*, Process*)>
c00112c6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112c9:	83 c4 0c             	add    esp,0xc
c00112cc:	0f b6 d4             	movzx  edx,ah
c00112cf:	0f b6 c0             	movzx  eax,al
c00112d2:	52                   	push   edx
c00112d3:	50                   	push   eax
c00112d4:	53                   	push   ebx
c00112d5:	e8 d8 70 ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	85 db                	test   ebx,ebx
c00112df:	89 c6                	mov    esi,eax
c00112e1:	74 0c                	je     c00112ef <SysSetFatAttrib(regs*)+0x55>
c00112e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e5:	83 ec 0c             	sub    esp,0xc
c00112e8:	53                   	push   ebx
c00112e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	5b                   	pop    ebx
c00112f0:	31 c0                	xor    eax,eax
c00112f2:	85 f6                	test   esi,esi
c00112f4:	0f 95 c0             	setne  al
c00112f7:	31 d2                	xor    edx,edx
c00112f9:	5e                   	pop    esi
c00112fa:	f7 d8                	neg    eax
c00112fc:	83 d2 00             	adc    edx,0x0
c00112ff:	f7 da                	neg    edx
c0011301:	5f                   	pop    edi
c0011302:	c3                   	ret    

c0011303 <SysShutdown(regs*)>:
c0011303:	83 ec 1c             	sub    esp,0x1c
c0011306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001130a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001130d:	85 c9                	test   ecx,ecx
c001130f:	74 18                	je     c0011329 <SysShutdown(regs*)+0x26>
c0011311:	83 f9 01             	cmp    ecx,0x1
c0011314:	74 26                	je     c001133c <SysShutdown(regs*)+0x39>
c0011316:	83 f9 02             	cmp    ecx,0x2
c0011319:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001131e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011323:	74 24                	je     c0011349 <SysShutdown(regs*)+0x46>
c0011325:	83 c4 1c             	add    esp,0x1c
c0011328:	c3                   	ret    
c0011329:	e8 fe c5 ff ff       	call   c000d92c <KeShutdown()>
c001132e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011333:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011338:	83 c4 1c             	add    esp,0x1c
c001133b:	c3                   	ret    
c001133c:	e8 0f c6 ff ff       	call   c000d950 <KeSleep()>
c0011341:	31 c0                	xor    eax,eax
c0011343:	31 d2                	xor    edx,edx
c0011345:	83 c4 1c             	add    esp,0x1c
c0011348:	c3                   	ret    
c0011349:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001134d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011351:	e8 06 c6 ff ff       	call   c000d95c <KeRestart()>
c0011356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001135a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001135e:	eb c5                	jmp    c0011325 <SysShutdown(regs*)+0x22>

c0011360 <SysPipe(regs*)>:
c0011360:	57                   	push   edi
c0011361:	56                   	push   esi
c0011362:	53                   	push   ebx
c0011363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011367:	83 ec 0c             	sub    esp,0xc
c001136a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001136d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011370:	6a 20                	push   0x20
c0011372:	e8 05 de ff ff       	call   c000f17c <malloc>
c0011377:	89 c3                	mov    ebx,eax
c0011379:	58                   	pop    eax
c001137a:	5a                   	pop    edx
c001137b:	68 00 50 00 00       	push   0x5000
c0011380:	53                   	push   ebx
c0011381:	e8 b8 e9 ff ff       	call   c000fd3e <Pipe::Pipe(int)>
c0011386:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011389:	e8 a6 10 00 00       	call   c0012434 <UnixFile::getFileDescriptor()>
c001138e:	89 07                	mov    DWORD PTR [edi],eax
c0011390:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011393:	e8 9c 10 00 00       	call   c0012434 <UnixFile::getFileDescriptor()>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	31 d2                	xor    edx,edx
c001139d:	89 06                	mov    DWORD PTR [esi],eax
c001139f:	31 c0                	xor    eax,eax
c00113a1:	5b                   	pop    ebx
c00113a2:	5e                   	pop    esi
c00113a3:	5f                   	pop    edi
c00113a4:	c3                   	ret    

c00113a5 <SysGetUnixTime(regs*)>:
c00113a5:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00113aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113b4:	e9 fb 77 ff ff       	jmp    c0008bb4 <Clock::timeInSecondsLocal()>

c00113b9 <string_ends_with(char const*, char const*)>:
c00113b9:	57                   	push   edi
c00113ba:	56                   	push   esi
c00113bb:	53                   	push   ebx
c00113bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00113c7:	53                   	push   ebx
c00113c8:	e8 b3 f1 fe ff       	call   c0000580 <strlen>
c00113cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113d0:	89 c6                	mov    esi,eax
c00113d2:	e8 a9 f1 fe ff       	call   c0000580 <strlen>
c00113d7:	83 c4 10             	add    esp,0x10
c00113da:	31 d2                	xor    edx,edx
c00113dc:	39 c6                	cmp    esi,eax
c00113de:	7d 06                	jge    c00113e6 <string_ends_with(char const*, char const*)+0x2d>
c00113e0:	5b                   	pop    ebx
c00113e1:	89 d0                	mov    eax,edx
c00113e3:	5e                   	pop    esi
c00113e4:	5f                   	pop    edi
c00113e5:	c3                   	ret    
c00113e6:	83 ec 08             	sub    esp,0x8
c00113e9:	29 c6                	sub    esi,eax
c00113eb:	57                   	push   edi
c00113ec:	01 f3                	add    ebx,esi
c00113ee:	53                   	push   ebx
c00113ef:	e8 8c f3 fe ff       	call   c0000780 <strcmp>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	31 d2                	xor    edx,edx
c00113f9:	5b                   	pop    ebx
c00113fa:	5e                   	pop    esi
c00113fb:	85 c0                	test   eax,eax
c00113fd:	5f                   	pop    edi
c00113fe:	0f 94 c2             	sete   dl
c0011401:	89 d0                	mov    eax,edx
c0011403:	c3                   	ret    

c0011404 <SysOpen(regs*)>:
c0011404:	56                   	push   esi
c0011405:	53                   	push   ebx
c0011406:	81 ec 04 01 00 00    	sub    esp,0x104
c001140c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011413:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011416:	85 c0                	test   eax,eax
c0011418:	0f 84 c4 01 00 00    	je     c00115e2 <SysOpen(regs*)+0x1de>
c001141e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011421:	85 c0                	test   eax,eax
c0011423:	0f 84 b9 01 00 00    	je     c00115e2 <SysOpen(regs*)+0x1de>
c0011429:	6a 00                	push   0x0
c001142b:	68 04 34 02 c0       	push   0xc0023404
c0011430:	50                   	push   eax
c0011431:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011435:	56                   	push   esi
c0011436:	e8 c5 69 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001143b:	89 34 24             	mov    DWORD PTR [esp],esi
c001143e:	e8 3d f1 fe ff       	call   c0000580 <strlen>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	83 e8 01             	sub    eax,0x1
c0011449:	74 29                	je     c0011474 <SysOpen(regs*)+0x70>
c001144b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001144f:	83 fa 2e             	cmp    edx,0x2e
c0011452:	74 1c                	je     c0011470 <SysOpen(regs*)+0x6c>
c0011454:	83 fa 3a             	cmp    edx,0x3a
c0011457:	74 17                	je     c0011470 <SysOpen(regs*)+0x6c>
c0011459:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001145d:	83 e8 01             	sub    eax,0x1
c0011460:	74 12                	je     c0011474 <SysOpen(regs*)+0x70>
c0011462:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011466:	83 fa 3a             	cmp    edx,0x3a
c0011469:	74 05                	je     c0011470 <SysOpen(regs*)+0x6c>
c001146b:	83 fa 2e             	cmp    edx,0x2e
c001146e:	75 e9                	jne    c0011459 <SysOpen(regs*)+0x55>
c0011470:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011474:	83 ec 08             	sub    esp,0x8
c0011477:	68 08 34 02 c0       	push   0xc0023408
c001147c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001147f:	50                   	push   eax
c0011480:	e8 34 ff ff ff       	call   c00113b9 <string_ends_with(char const*, char const*)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	85 c0                	test   eax,eax
c001148a:	74 1d                	je     c00114a9 <SysOpen(regs*)+0xa5>
c001148c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001148f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011495:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001149c:	81 c4 04 01 00 00    	add    esp,0x104
c00114a2:	31 c0                	xor    eax,eax
c00114a4:	5b                   	pop    ebx
c00114a5:	31 d2                	xor    edx,edx
c00114a7:	5e                   	pop    esi
c00114a8:	c3                   	ret    
c00114a9:	83 ec 08             	sub    esp,0x8
c00114ac:	68 0d 34 02 c0       	push   0xc002340d
c00114b1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114b4:	50                   	push   eax
c00114b5:	e8 ff fe ff ff       	call   c00113b9 <string_ends_with(char const*, char const*)>
c00114ba:	83 c4 10             	add    esp,0x10
c00114bd:	85 c0                	test   eax,eax
c00114bf:	75 cb                	jne    c001148c <SysOpen(regs*)+0x88>
c00114c1:	83 ec 08             	sub    esp,0x8
c00114c4:	68 09 34 02 c0       	push   0xc0023409
c00114c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114cc:	50                   	push   eax
c00114cd:	e8 ae f2 fe ff       	call   c0000780 <strcmp>
c00114d2:	83 c4 10             	add    esp,0x10
c00114d5:	85 c0                	test   eax,eax
c00114d7:	74 b3                	je     c001148c <SysOpen(regs*)+0x88>
c00114d9:	83 ec 08             	sub    esp,0x8
c00114dc:	68 08 34 02 c0       	push   0xc0023408
c00114e1:	56                   	push   esi
c00114e2:	e8 d2 fe ff ff       	call   c00113b9 <string_ends_with(char const*, char const*)>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	85 c0                	test   eax,eax
c00114ec:	75 9e                	jne    c001148c <SysOpen(regs*)+0x88>
c00114ee:	83 ec 08             	sub    esp,0x8
c00114f1:	68 12 34 02 c0       	push   0xc0023412
c00114f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114f9:	50                   	push   eax
c00114fa:	e8 ba fe ff ff       	call   c00113b9 <string_ends_with(char const*, char const*)>
c00114ff:	83 c4 10             	add    esp,0x10
c0011502:	85 c0                	test   eax,eax
c0011504:	0f 85 eb 00 00 00    	jne    c00115f5 <SysOpen(regs*)+0x1f1>
c001150a:	83 ec 08             	sub    esp,0x8
c001150d:	68 17 34 02 c0       	push   0xc0023417
c0011512:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011515:	50                   	push   eax
c0011516:	e8 9e fe ff ff       	call   c00113b9 <string_ends_with(char const*, char const*)>
c001151b:	83 c4 10             	add    esp,0x10
c001151e:	85 c0                	test   eax,eax
c0011520:	0f 85 cf 00 00 00    	jne    c00115f5 <SysOpen(regs*)+0x1f1>
c0011526:	83 ec 08             	sub    esp,0x8
c0011529:	68 13 34 02 c0       	push   0xc0023413
c001152e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011531:	51                   	push   ecx
c0011532:	e8 49 f2 fe ff       	call   c0000780 <strcmp>
c0011537:	83 c4 10             	add    esp,0x10
c001153a:	85 c0                	test   eax,eax
c001153c:	0f 84 b3 00 00 00    	je     c00115f5 <SysOpen(regs*)+0x1f1>
c0011542:	83 ec 08             	sub    esp,0x8
c0011545:	68 12 34 02 c0       	push   0xc0023412
c001154a:	56                   	push   esi
c001154b:	e8 69 fe ff ff       	call   c00113b9 <string_ends_with(char const*, char const*)>
c0011550:	83 c4 10             	add    esp,0x10
c0011553:	85 c0                	test   eax,eax
c0011555:	0f 85 9a 00 00 00    	jne    c00115f5 <SysOpen(regs*)+0x1f1>
c001155b:	83 ec 0c             	sub    esp,0xc
c001155e:	68 14 01 00 00       	push   0x114
c0011563:	e8 14 dc ff ff       	call   c000f17c <malloc>
c0011568:	83 c4 0c             	add    esp,0xc
c001156b:	89 c6                	mov    esi,eax
c001156d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011572:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011575:	50                   	push   eax
c0011576:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011579:	52                   	push   edx
c001157a:	56                   	push   esi
c001157b:	e8 ac 6b ff ff       	call   c000812c <File::File(char const*, Process*)>
c0011580:	83 c4 10             	add    esp,0x10
c0011583:	85 f6                	test   esi,esi
c0011585:	74 5b                	je     c00115e2 <SysOpen(regs*)+0x1de>
c0011587:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001158a:	0f b6 c2             	movzx  eax,dl
c001158d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011590:	89 d0                	mov    eax,edx
c0011592:	83 e0 01             	and    eax,0x1
c0011595:	f6 c2 02             	test   dl,0x2
c0011598:	74 03                	je     c001159d <SysOpen(regs*)+0x199>
c001159a:	83 c8 02             	or     eax,0x2
c001159d:	f6 c2 04             	test   dl,0x4
c00115a0:	74 03                	je     c00115a5 <SysOpen(regs*)+0x1a1>
c00115a2:	83 c8 04             	or     eax,0x4
c00115a5:	f6 c2 08             	test   dl,0x8
c00115a8:	74 03                	je     c00115ad <SysOpen(regs*)+0x1a9>
c00115aa:	83 c8 0a             	or     eax,0xa
c00115ad:	80 e2 10             	and    dl,0x10
c00115b0:	74 03                	je     c00115b5 <SysOpen(regs*)+0x1b1>
c00115b2:	83 c8 12             	or     eax,0x12
c00115b5:	83 ec 08             	sub    esp,0x8
c00115b8:	50                   	push   eax
c00115b9:	56                   	push   esi
c00115ba:	e8 8b 6b ff ff       	call   c000814a <File::open(FileOpenMode)>
c00115bf:	83 c4 10             	add    esp,0x10
c00115c2:	85 c0                	test   eax,eax
c00115c4:	75 1c                	jne    c00115e2 <SysOpen(regs*)+0x1de>
c00115c6:	83 ec 0c             	sub    esp,0xc
c00115c9:	56                   	push   esi
c00115ca:	e8 65 0e 00 00       	call   c0012434 <UnixFile::getFileDescriptor()>
c00115cf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00115d2:	83 c4 10             	add    esp,0x10
c00115d5:	89 02                	mov    DWORD PTR [edx],eax
c00115d7:	c1 f8 1f             	sar    eax,0x1f
c00115da:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00115dd:	e9 ba fe ff ff       	jmp    c001149c <SysOpen(regs*)+0x98>
c00115e2:	81 c4 04 01 00 00    	add    esp,0x104
c00115e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ed:	5b                   	pop    ebx
c00115ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115f3:	5e                   	pop    esi
c00115f4:	c3                   	ret    
c00115f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115f8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00115fe:	e9 92 fe ff ff       	jmp    c0011495 <SysOpen(regs*)+0x91>

c0011603 <KeSystemCall(regs*, void*)>:
c0011603:	53                   	push   ebx
c0011604:	83 ec 08             	sub    esp,0x8
c0011607:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001160b:	68 fa 02 00 00       	push   0x2fa
c0011610:	68 44 34 02 c0       	push   0xc0023444
c0011615:	68 1c 34 02 c0       	push   0xc002341c
c001161a:	68 9c 18 02 c0       	push   0xc002189c
c001161f:	e8 40 b0 ff ff       	call   c000c664 <KeAssertionFailed(char*, char const*, char const*, int)>
c0011624:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011627:	83 c4 10             	add    esp,0x10
c001162a:	83 f8 40             	cmp    eax,0x40
c001162d:	77 16                	ja     c0011645 <KeSystemCall(regs*, void*)+0x42>
c001162f:	8b 14 85 c0 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda940]
c0011636:	85 d2                	test   edx,edx
c0011638:	74 0b                	je     c0011645 <KeSystemCall(regs*, void*)+0x42>
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	53                   	push   ebx
c001163e:	ff d2                	call   edx
c0011640:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011643:	eb 0d                	jmp    c0011652 <KeSystemCall(regs*, void*)+0x4f>
c0011645:	52                   	push   edx
c0011646:	52                   	push   edx
c0011647:	50                   	push   eax
c0011648:	68 2e 34 02 c0       	push   0xc002342e
c001164d:	e8 fc 58 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001165a:	83 c4 08             	add    esp,0x8
c001165d:	31 d2                	xor    edx,edx
c001165f:	5b                   	pop    ebx
c0011660:	c3                   	ret    
c0011661:	90                   	nop

c0011662 <VgaText::isAtty()>:
c0011662:	b0 01                	mov    al,0x1
c0011664:	c3                   	ret    
c0011665:	90                   	nop

c0011666 <VgaText::~VgaText()>:
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c001166e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011672:	89 10                	mov    DWORD PTR [eax],edx
c0011674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011678:	83 ec 0c             	sub    esp,0xc
c001167b:	50                   	push   eax
c001167c:	e8 a1 0f 00 00       	call   c0012622 <UnixFile::~UnixFile()>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	90                   	nop
c0011685:	83 c4 0c             	add    esp,0xc
c0011688:	c3                   	ret    
c0011689:	90                   	nop

c001168a <VgaText::~VgaText()>:
c001168a:	83 ec 0c             	sub    esp,0xc
c001168d:	83 ec 0c             	sub    esp,0xc
c0011690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011694:	e8 cd ff ff ff       	call   c0011666 <VgaText::~VgaText()>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	83 ec 08             	sub    esp,0x8
c001169f:	68 84 01 00 00       	push   0x184
c00116a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a8:	e8 46 b2 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	83 c4 0c             	add    esp,0xc
c00116b3:	c3                   	ret    

c00116b4 <VgaText::read(unsigned long long, void*, int*)>:
c00116b4:	83 ec 10             	sub    esp,0x10
c00116b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116c3:	e8 1d 85 ff ff       	call   c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>
c00116c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116cc:	89 02                	mov    DWORD PTR [edx],eax
c00116ce:	31 c0                	xor    eax,eax
c00116d0:	83 c4 1c             	add    esp,0x1c
c00116d3:	c3                   	ret    

c00116d4 <setTerminalScrollLock(bool)>:
c00116d4:	c3                   	ret    

c00116d5 <doTerminalCycle()>:
c00116d5:	c3                   	ret    

c00116d6 <addToTerminalCycle(VgaText*)>:
c00116d6:	c3                   	ret    

c00116d7 <scrollTerminalScrollLock(int)>:
c00116d7:	c3                   	ret    

c00116d8 <VgaText::updateTitle()>:
c00116d8:	c3                   	ret    
c00116d9:	90                   	nop

c00116da <VgaText::load()>:
c00116da:	c3                   	ret    
c00116db:	90                   	nop

c00116dc <VgaText::updateCursor()>:
c00116dc:	83 ec 14             	sub    esp,0x14
c00116df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00116e6:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00116e9:	e8 36 8c 00 00       	call   c001a324 <HalConsoleCursorUpdate(int, int)>
c00116ee:	83 c4 1c             	add    esp,0x1c
c00116f1:	c3                   	ret    

c00116f2 <VgaText::doANSI_SGR(int)>:
c00116f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	85 d2                	test   edx,edx
c00116fc:	75 0b                	jne    c0011709 <VgaText::doANSI_SGR(int)+0x17>
c00116fe:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011701:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011704:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011707:	eb 59                	jmp    c0011762 <VgaText::doANSI_SGR(int)+0x70>
c0011709:	83 fa 07             	cmp    edx,0x7
c001170c:	75 0b                	jne    c0011719 <VgaText::doANSI_SGR(int)+0x27>
c001170e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011711:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011714:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0011717:	eb 49                	jmp    c0011762 <VgaText::doANSI_SGR(int)+0x70>
c0011719:	83 fa 1b             	cmp    edx,0x1b
c001171c:	74 e0                	je     c00116fe <VgaText::doANSI_SGR(int)+0xc>
c001171e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011721:	83 f9 07             	cmp    ecx,0x7
c0011724:	77 09                	ja     c001172f <VgaText::doANSI_SGR(int)+0x3d>
c0011726:	8b 14 8d 00 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda800]
c001172d:	eb 20                	jmp    c001174f <VgaText::doANSI_SGR(int)+0x5d>
c001172f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011732:	83 f9 07             	cmp    ecx,0x7
c0011735:	77 09                	ja     c0011740 <VgaText::doANSI_SGR(int)+0x4e>
c0011737:	8b 14 8d 00 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda800]
c001173e:	eb 22                	jmp    c0011762 <VgaText::doANSI_SGR(int)+0x70>
c0011740:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011743:	83 f9 07             	cmp    ecx,0x7
c0011746:	77 0b                	ja     c0011753 <VgaText::doANSI_SGR(int)+0x61>
c0011748:	8b 14 95 b8 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda948]
c001174f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011752:	c3                   	ret    
c0011753:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0011756:	83 f9 07             	cmp    ecx,0x7
c0011759:	77 0a                	ja     c0011765 <VgaText::doANSI_SGR(int)+0x73>
c001175b:	8b 14 95 90 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda970]
c0011762:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011765:	c3                   	ret    

c0011766 <VgaText::setDefaultBgColour(VgaColour)>:
c0011766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001176a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001176e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011771:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011774:	c3                   	ret    
c0011775:	90                   	nop

c0011776 <VgaText::setDefaultFgColour(VgaColour)>:
c0011776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001177a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001177e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011781:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011786:	53                   	push   ebx
c0011787:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001178b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001178f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011793:	51                   	push   ecx
c0011794:	e8 cd ff ff ff       	call   c0011766 <VgaText::setDefaultBgColour(VgaColour)>
c0011799:	58                   	pop    eax
c001179a:	5a                   	pop    edx
c001179b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001179f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00117a3:	5b                   	pop    ebx
c00117a4:	eb d0                	jmp    c0011776 <VgaText::setDefaultFgColour(VgaColour)>

c00117a6 <VgaText::setTitleTextColour(VgaColour)>:
c00117a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117ae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00117b1:	c3                   	ret    

c00117b2 <VgaText::setTitleColour(VgaColour)>:
c00117b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00117bd:	c3                   	ret    

c00117be <VgaText::setTitle(char*)>:
c00117be:	c3                   	ret    
c00117bf:	90                   	nop

c00117c0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00117c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00117c9:	83 e0 0f             	and    eax,0xf
c00117cc:	c1 e2 04             	shl    edx,0x4
c00117cf:	09 d0                	or     eax,edx
c00117d1:	c3                   	ret    

c00117d2 <VgaText::scrollScreen()>:
c00117d2:	55                   	push   ebp
c00117d3:	57                   	push   edi
c00117d4:	56                   	push   esi
c00117d5:	be 01 00 00 00       	mov    esi,0x1
c00117da:	53                   	push   ebx
c00117db:	83 ec 0c             	sub    esp,0xc
c00117de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117e2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00117e5:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00117eb:	31 ff                	xor    edi,edi
c00117ed:	01 e9                	add    ecx,ebp
c00117ef:	8a 01                	mov    al,BYTE PTR [ecx]
c00117f1:	83 fe 18             	cmp    esi,0x18
c00117f4:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00117fa:	75 20                	jne    c001181c <VgaText::scrollScreen()+0x4a>
c00117fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0011802:	74 15                	je     c0011819 <VgaText::scrollScreen()+0x47>
c0011804:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011808:	50                   	push   eax
c0011809:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001180d:	50                   	push   eax
c001180e:	e8 ad ff ff ff       	call   c00117c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0011813:	5a                   	pop    edx
c0011814:	5a                   	pop    edx
c0011815:	88 01                	mov    BYTE PTR [ecx],al
c0011817:	eb 03                	jmp    c001181c <VgaText::scrollScreen()+0x4a>
c0011819:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001181c:	47                   	inc    edi
c001181d:	41                   	inc    ecx
c001181e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011824:	75 c9                	jne    c00117ef <VgaText::scrollScreen()+0x1d>
c0011826:	46                   	inc    esi
c0011827:	83 fe 19             	cmp    esi,0x19
c001182a:	75 b9                	jne    c00117e5 <VgaText::scrollScreen()+0x13>
c001182c:	39 1d 54 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce54,ebx
c0011832:	75 1f                	jne    c0011853 <VgaText::scrollScreen()+0x81>
c0011834:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011838:	74 05                	je     c001183f <VgaText::scrollScreen()+0x6d>
c001183a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001183d:	eb 14                	jmp    c0011853 <VgaText::scrollScreen()+0x81>
c001183f:	50                   	push   eax
c0011840:	50                   	push   eax
c0011841:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011845:	50                   	push   eax
c0011846:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001184a:	50                   	push   eax
c001184b:	e8 68 89 00 00       	call   c001a1b8 <HalConsoleScroll(int, int)>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011857:	83 c4 0c             	add    esp,0xc
c001185a:	5b                   	pop    ebx
c001185b:	5e                   	pop    esi
c001185c:	5f                   	pop    edi
c001185d:	5d                   	pop    ebp
c001185e:	e9 79 fe ff ff       	jmp    c00116dc <VgaText::updateCursor()>
c0011863:	90                   	nop

c0011864 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011864:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011869:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001186e:	c1 e0 08             	shl    eax,0x8
c0011871:	09 d0                	or     eax,edx
c0011873:	c3                   	ret    

c0011874 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011874:	55                   	push   ebp
c0011875:	57                   	push   edi
c0011876:	56                   	push   esi
c0011877:	53                   	push   ebx
c0011878:	83 ec 1c             	sub    esp,0x1c
c001187b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001187f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011883:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011887:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001188b:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c001188e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011892:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011896:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001189a:	85 ed                	test   ebp,ebp
c001189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118a0:	75 14                	jne    c00118b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00118a2:	c7 44 24 30 51 34 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023451
c00118aa:	83 c4 1c             	add    esp,0x1c
c00118ad:	5b                   	pop    ebx
c00118ae:	5e                   	pop    esi
c00118af:	5f                   	pop    edi
c00118b0:	5d                   	pop    ebp
c00118b1:	e9 0c dc ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c00118b6:	50                   	push   eax
c00118b7:	50                   	push   eax
c00118b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00118bd:	50                   	push   eax
c00118be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00118c3:	50                   	push   eax
c00118c4:	e8 f7 fe ff ff       	call   c00117c0 <VgaText::combineColours(unsigned char, unsigned char)>
c00118c9:	5a                   	pop    edx
c00118ca:	5a                   	pop    edx
c00118cb:	0f b6 c0             	movzx  eax,al
c00118ce:	0f be c9             	movsx  ecx,cl
c00118d1:	50                   	push   eax
c00118d2:	51                   	push   ecx
c00118d3:	e8 8c ff ff ff       	call   c0011864 <VgaText::combineCharAndColour(char, unsigned char)>
c00118d8:	6b d6 50             	imul   edx,esi,0x50
c00118db:	83 c4 10             	add    esp,0x10
c00118de:	01 da                	add    edx,ebx
c00118e0:	0f b7 d2             	movzx  edx,dx
c00118e3:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00118e8:	39 3d 54 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce54,edi
c00118ee:	75 28                	jne    c0011918 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00118f0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00118f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118f8:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00118fc:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0011900:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011908:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001190c:	83 c4 1c             	add    esp,0x1c
c001190f:	5b                   	pop    ebx
c0011910:	5e                   	pop    esi
c0011911:	5f                   	pop    edi
c0011912:	5d                   	pop    ebp
c0011913:	e9 a8 89 00 00       	jmp    c001a2c0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011918:	83 c4 1c             	add    esp,0x1c
c001191b:	5b                   	pop    ebx
c001191c:	5e                   	pop    esi
c001191d:	5f                   	pop    edi
c001191e:	5d                   	pop    ebp
c001191f:	c3                   	ret    

c0011920 <VgaText::getCursorX()>:
c0011920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011924:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011927:	c3                   	ret    

c0011928 <VgaText::getCursorY()>:
c0011928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001192f:	c3                   	ret    

c0011930 <VgaText::setCursor(int, int)>:
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011938:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001193b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001193f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011942:	e9 95 fd ff ff       	jmp    c00116dc <VgaText::updateCursor()>

c0011947 <setActiveTerminal(VgaText*)>:
c0011947:	53                   	push   ebx
c0011948:	83 ec 08             	sub    esp,0x8
c001194b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001194f:	85 db                	test   ebx,ebx
c0011951:	75 11                	jne    c0011964 <setActiveTerminal(VgaText*)+0x1d>
c0011953:	c7 44 24 10 61 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023461
c001195b:	83 c4 08             	add    esp,0x8
c001195e:	5b                   	pop    ebx
c001195f:	e9 5e db ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c0011964:	a1 54 ce 02 c0       	mov    eax,ds:0xc002ce54
c0011969:	85 c0                	test   eax,eax
c001196b:	74 0c                	je     c0011979 <setActiveTerminal(VgaText*)+0x32>
c001196d:	83 ec 0c             	sub    esp,0xc
c0011970:	50                   	push   eax
c0011971:	e8 66 fd ff ff       	call   c00116dc <VgaText::updateCursor()>
c0011976:	83 c4 10             	add    esp,0x10
c0011979:	50                   	push   eax
c001197a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001197d:	89 1d 54 ce 02 c0    	mov    DWORD PTR ds:0xc002ce54,ebx
c0011983:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011986:	53                   	push   ebx
c0011987:	e8 a4 ff ff ff       	call   c0011930 <VgaText::setCursor(int, int)>
c001198c:	83 c4 18             	add    esp,0x18
c001198f:	5b                   	pop    ebx
c0011990:	c3                   	ret    
c0011991:	90                   	nop

c0011992 <VgaText::clearScreen()>:
c0011992:	57                   	push   edi
c0011993:	56                   	push   esi
c0011994:	31 f6                	xor    esi,esi
c0011996:	53                   	push   ebx
c0011997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001199b:	52                   	push   edx
c001199c:	6a 00                	push   0x0
c001199e:	6a 00                	push   0x0
c00119a0:	53                   	push   ebx
c00119a1:	e8 8a ff ff ff       	call   c0011930 <VgaText::setCursor(int, int)>
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00119b0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00119b3:	7e 20                	jle    c00119d5 <VgaText::clearScreen()+0x43>
c00119b5:	31 ff                	xor    edi,edi
c00119b7:	50                   	push   eax
c00119b8:	50                   	push   eax
c00119b9:	56                   	push   esi
c00119ba:	57                   	push   edi
c00119bb:	47                   	inc    edi
c00119bc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00119bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00119c2:	6a 20                	push   0x20
c00119c4:	53                   	push   ebx
c00119c5:	e8 aa fe ff ff       	call   c0011874 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00119ca:	83 c4 20             	add    esp,0x20
c00119cd:	83 ff 50             	cmp    edi,0x50
c00119d0:	75 e5                	jne    c00119b7 <VgaText::clearScreen()+0x25>
c00119d2:	46                   	inc    esi
c00119d3:	eb db                	jmp    c00119b0 <VgaText::clearScreen()+0x1e>
c00119d5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00119dc:	5b                   	pop    ebx
c00119dd:	5e                   	pop    esi
c00119de:	5f                   	pop    edi
c00119df:	c3                   	ret    

c00119e0 <VgaText::setCursorX(int)>:
c00119e0:	83 ec 10             	sub    esp,0x10
c00119e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119e7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00119ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ee:	50                   	push   eax
c00119ef:	e8 3c ff ff ff       	call   c0011930 <VgaText::setCursor(int, int)>
c00119f4:	83 c4 1c             	add    esp,0x1c
c00119f7:	c3                   	ret    

c00119f8 <VgaText::setCursorY(int)>:
c00119f8:	83 ec 10             	sub    esp,0x10
c00119fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a03:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011a06:	50                   	push   eax
c0011a07:	e8 24 ff ff ff       	call   c0011930 <VgaText::setCursor(int, int)>
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	c3                   	ret    

c0011a10 <VgaText::incrementCursor(bool)>:
c0011a10:	56                   	push   esi
c0011a11:	53                   	push   ebx
c0011a12:	51                   	push   ecx
c0011a13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011a1b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011a1e:	40                   	inc    eax
c0011a1f:	83 f8 50             	cmp    eax,0x50
c0011a22:	74 05                	je     c0011a29 <VgaText::incrementCursor(bool)+0x19>
c0011a24:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011a27:	eb 24                	jmp    c0011a4d <VgaText::incrementCursor(bool)+0x3d>
c0011a29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011a30:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011a33:	8d 50 01             	lea    edx,[eax+0x1]
c0011a36:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011a39:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011a3c:	75 0f                	jne    c0011a4d <VgaText::incrementCursor(bool)+0x3d>
c0011a3e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011a41:	83 ec 0c             	sub    esp,0xc
c0011a44:	53                   	push   ebx
c0011a45:	e8 88 fd ff ff       	call   c00117d2 <VgaText::scrollScreen()>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	89 f0                	mov    eax,esi
c0011a4f:	84 c0                	test   al,al
c0011a51:	74 0c                	je     c0011a5f <VgaText::incrementCursor(bool)+0x4f>
c0011a53:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011a57:	5a                   	pop    edx
c0011a58:	5b                   	pop    ebx
c0011a59:	5e                   	pop    esi
c0011a5a:	e9 7d fc ff ff       	jmp    c00116dc <VgaText::updateCursor()>
c0011a5f:	58                   	pop    eax
c0011a60:	5b                   	pop    ebx
c0011a61:	5e                   	pop    esi
c0011a62:	c3                   	ret    
c0011a63:	90                   	nop

c0011a64 <VgaText::decrementCursor(bool)>:
c0011a64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011a68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a6c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011a6f:	85 c0                	test   eax,eax
c0011a71:	74 04                	je     c0011a77 <VgaText::decrementCursor(bool)+0x13>
c0011a73:	48                   	dec    eax
c0011a74:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011a77:	84 c9                	test   cl,cl
c0011a79:	74 09                	je     c0011a84 <VgaText::decrementCursor(bool)+0x20>
c0011a7b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a7f:	e9 58 fc ff ff       	jmp    c00116dc <VgaText::updateCursor()>
c0011a84:	c3                   	ret    
c0011a85:	90                   	nop

c0011a86 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011a86:	53                   	push   ebx
c0011a87:	83 ec 08             	sub    esp,0x8
c0011a8a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011a8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011a97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011a9b:	83 f8 07             	cmp    eax,0x7
c0011a9e:	75 21                	jne    c0011ac1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011aa0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011aa8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011ab0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011ab8:	83 c4 08             	add    esp,0x8
c0011abb:	5b                   	pop    ebx
c0011abc:	e9 0d 6f ff ff       	jmp    c00089ce <KeBeep(int, int, bool)>
c0011ac1:	83 f8 0d             	cmp    eax,0xd
c0011ac4:	75 09                	jne    c0011acf <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011ac6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011acd:	eb 2d                	jmp    c0011afc <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011acf:	83 f8 0a             	cmp    eax,0xa
c0011ad2:	75 31                	jne    c0011b05 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011ad4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011adb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011ade:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011ae4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011ae7:	75 0f                	jne    c0011af8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011ae9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	53                   	push   ebx
c0011af0:	e8 dd fc ff ff       	call   c00117d2 <VgaText::scrollScreen()>
c0011af5:	83 c4 10             	add    esp,0x10
c0011af8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011afc:	83 c4 08             	add    esp,0x8
c0011aff:	5b                   	pop    ebx
c0011b00:	e9 d7 fb ff ff       	jmp    c00116dc <VgaText::updateCursor()>
c0011b05:	83 f8 08             	cmp    eax,0x8
c0011b08:	75 25                	jne    c0011b2f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011b0a:	50                   	push   eax
c0011b0b:	50                   	push   eax
c0011b0c:	6a 01                	push   0x1
c0011b0e:	53                   	push   ebx
c0011b0f:	e8 50 ff ff ff       	call   c0011a64 <VgaText::decrementCursor(bool)>
c0011b14:	5a                   	pop    edx
c0011b15:	59                   	pop    ecx
c0011b16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011b19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011b1c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011b1f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011b22:	6a 20                	push   0x20
c0011b24:	53                   	push   ebx
c0011b25:	e8 4a fd ff ff       	call   c0011874 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011b2a:	83 c4 28             	add    esp,0x28
c0011b2d:	5b                   	pop    ebx
c0011b2e:	c3                   	ret    
c0011b2f:	83 ec 08             	sub    esp,0x8
c0011b32:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011b35:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011b38:	51                   	push   ecx
c0011b39:	52                   	push   edx
c0011b3a:	50                   	push   eax
c0011b3b:	53                   	push   ebx
c0011b3c:	e8 33 fd ff ff       	call   c0011874 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011b41:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011b45:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011b4d:	83 c4 28             	add    esp,0x28
c0011b50:	5b                   	pop    ebx
c0011b51:	e9 ba fe ff ff       	jmp    c0011a10 <VgaText::incrementCursor(bool)>

c0011b56 <VgaText::putchar(char)>:
c0011b56:	57                   	push   edi
c0011b57:	56                   	push   esi
c0011b58:	53                   	push   ebx
c0011b59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b61:	0f be c2             	movsx  eax,dl
c0011b64:	83 f8 5b             	cmp    eax,0x5b
c0011b67:	75 18                	jne    c0011b81 <VgaText::putchar(char)+0x2b>
c0011b69:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011b6d:	74 20                	je     c0011b8f <VgaText::putchar(char)+0x39>
c0011b6f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011b75:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011b7c:	e9 b8 00 00 00       	jmp    c0011c39 <VgaText::putchar(char)+0xe3>
c0011b81:	83 f8 1b             	cmp    eax,0x1b
c0011b84:	75 09                	jne    c0011b8f <VgaText::putchar(char)+0x39>
c0011b86:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011b8a:	e9 aa 00 00 00       	jmp    c0011c39 <VgaText::putchar(char)+0xe3>
c0011b8f:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0011b93:	89 f9                	mov    ecx,edi
c0011b95:	84 c9                	test   cl,cl
c0011b97:	0f 84 8c 00 00 00    	je     c0011c29 <VgaText::putchar(char)+0xd3>
c0011b9d:	8d 4a c0             	lea    ecx,[edx-0x40]
c0011ba0:	80 f9 3e             	cmp    cl,0x3e
c0011ba3:	77 70                	ja     c0011c15 <VgaText::putchar(char)+0xbf>
c0011ba5:	83 f8 6d             	cmp    eax,0x6d
c0011ba8:	75 3f                	jne    c0011be9 <VgaText::putchar(char)+0x93>
c0011baa:	31 f6                	xor    esi,esi
c0011bac:	31 d2                	xor    edx,edx
c0011bae:	31 c0                	xor    eax,eax
c0011bb0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011bb3:	7e 25                	jle    c0011bda <VgaText::putchar(char)+0x84>
c0011bb5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011bba:	83 fa 3b             	cmp    edx,0x3b
c0011bbd:	75 0f                	jne    c0011bce <VgaText::putchar(char)+0x78>
c0011bbf:	50                   	push   eax
c0011bc0:	53                   	push   ebx
c0011bc1:	e8 2c fb ff ff       	call   c00116f2 <VgaText::doANSI_SGR(int)>
c0011bc6:	31 d2                	xor    edx,edx
c0011bc8:	59                   	pop    ecx
c0011bc9:	58                   	pop    eax
c0011bca:	31 c0                	xor    eax,eax
c0011bcc:	eb 09                	jmp    c0011bd7 <VgaText::putchar(char)+0x81>
c0011bce:	6b c0 0a             	imul   eax,eax,0xa
c0011bd1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011bd5:	89 fa                	mov    edx,edi
c0011bd7:	46                   	inc    esi
c0011bd8:	eb d6                	jmp    c0011bb0 <VgaText::putchar(char)+0x5a>
c0011bda:	84 d2                	test   dl,dl
c0011bdc:	74 2f                	je     c0011c0d <VgaText::putchar(char)+0xb7>
c0011bde:	50                   	push   eax
c0011bdf:	53                   	push   ebx
c0011be0:	e8 0d fb ff ff       	call   c00116f2 <VgaText::doANSI_SGR(int)>
c0011be5:	58                   	pop    eax
c0011be6:	5a                   	pop    edx
c0011be7:	eb 24                	jmp    c0011c0d <VgaText::putchar(char)+0xb7>
c0011be9:	83 f8 4a             	cmp    eax,0x4a
c0011bec:	75 1f                	jne    c0011c0d <VgaText::putchar(char)+0xb7>
c0011bee:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011bf2:	75 19                	jne    c0011c0d <VgaText::putchar(char)+0xb7>
c0011bf4:	83 ec 0c             	sub    esp,0xc
c0011bf7:	53                   	push   ebx
c0011bf8:	e8 95 fd ff ff       	call   c0011992 <VgaText::clearScreen()>
c0011bfd:	83 c4 0c             	add    esp,0xc
c0011c00:	6a 00                	push   0x0
c0011c02:	6a 00                	push   0x0
c0011c04:	53                   	push   ebx
c0011c05:	e8 26 fd ff ff       	call   c0011930 <VgaText::setCursor(int, int)>
c0011c0a:	83 c4 10             	add    esp,0x10
c0011c0d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011c13:	eb 24                	jmp    c0011c39 <VgaText::putchar(char)+0xe3>
c0011c15:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011c18:	83 f8 0e             	cmp    eax,0xe
c0011c1b:	7f 1c                	jg     c0011c39 <VgaText::putchar(char)+0xe3>
c0011c1d:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c20:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011c23:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011c27:	eb 10                	jmp    c0011c39 <VgaText::putchar(char)+0xe3>
c0011c29:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011c2c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011c2f:	50                   	push   eax
c0011c30:	53                   	push   ebx
c0011c31:	e8 50 fe ff ff       	call   c0011a86 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	5b                   	pop    ebx
c0011c3a:	5e                   	pop    esi
c0011c3b:	5f                   	pop    edi
c0011c3c:	c3                   	ret    
c0011c3d:	90                   	nop

c0011c3e <VgaText::putx(unsigned int)>:
c0011c3e:	57                   	push   edi
c0011c3f:	b9 11 00 00 00       	mov    ecx,0x11
c0011c44:	56                   	push   esi
c0011c45:	be 6f 34 02 c0       	mov    esi,0xc002346f
c0011c4a:	53                   	push   ebx
c0011c4b:	83 ec 20             	sub    esp,0x20
c0011c4e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011c52:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011c56:	fc                   	cld    
c0011c57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c59:	be 08 00 00 00       	mov    esi,0x8
c0011c5e:	50                   	push   eax
c0011c5f:	50                   	push   eax
c0011c60:	89 d8                	mov    eax,ebx
c0011c62:	c1 e8 1c             	shr    eax,0x1c
c0011c65:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011c6a:	c1 e3 04             	shl    ebx,0x4
c0011c6d:	50                   	push   eax
c0011c6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011c72:	e8 df fe ff ff       	call   c0011b56 <VgaText::putchar(char)>
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	4e                   	dec    esi
c0011c7b:	75 e1                	jne    c0011c5e <VgaText::putx(unsigned int)+0x20>
c0011c7d:	83 c4 20             	add    esp,0x20
c0011c80:	5b                   	pop    ebx
c0011c81:	5e                   	pop    esi
c0011c82:	5f                   	pop    edi
c0011c83:	c3                   	ret    

c0011c84 <VgaText::puts(char const*)>:
c0011c84:	53                   	push   ebx
c0011c85:	83 ec 08             	sub    esp,0x8
c0011c88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011c8c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011c8f:	85 c0                	test   eax,eax
c0011c91:	74 12                	je     c0011ca5 <VgaText::puts(char const*)+0x21>
c0011c93:	51                   	push   ecx
c0011c94:	43                   	inc    ebx
c0011c95:	51                   	push   ecx
c0011c96:	50                   	push   eax
c0011c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c9b:	e8 b6 fe ff ff       	call   c0011b56 <VgaText::putchar(char)>
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	eb e7                	jmp    c0011c8c <VgaText::puts(char const*)+0x8>
c0011ca5:	83 c4 08             	add    esp,0x8
c0011ca8:	5b                   	pop    ebx
c0011ca9:	c3                   	ret    

c0011caa <VgaText::write(unsigned long long, void*, int*)>:
c0011caa:	55                   	push   ebp
c0011cab:	57                   	push   edi
c0011cac:	56                   	push   esi
c0011cad:	53                   	push   ebx
c0011cae:	83 ec 0c             	sub    esp,0xc
c0011cb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011cb5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011cb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011cbd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011cc4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011cc7:	39 eb                	cmp    ebx,ebp
c0011cc9:	74 13                	je     c0011cde <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011ccb:	50                   	push   eax
c0011ccc:	43                   	inc    ebx
c0011ccd:	50                   	push   eax
c0011cce:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011cd2:	50                   	push   eax
c0011cd3:	56                   	push   esi
c0011cd4:	e8 7d fe ff ff       	call   c0011b56 <VgaText::putchar(char)>
c0011cd9:	83 c4 10             	add    esp,0x10
c0011cdc:	eb e9                	jmp    c0011cc7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011cde:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ce9:	89 38                	mov    DWORD PTR [eax],edi
c0011ceb:	83 c4 0c             	add    esp,0xc
c0011cee:	31 c0                	xor    eax,eax
c0011cf0:	5b                   	pop    ebx
c0011cf1:	5e                   	pop    esi
c0011cf2:	5f                   	pop    edi
c0011cf3:	5d                   	pop    ebp
c0011cf4:	c3                   	ret    
c0011cf5:	90                   	nop

c0011cf6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011cf6:	55                   	push   ebp
c0011cf7:	57                   	push   edi
c0011cf8:	56                   	push   esi
c0011cf9:	53                   	push   ebx
c0011cfa:	83 ec 1c             	sub    esp,0x1c
c0011cfd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d05:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011d09:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011d0d:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0011d10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d14:	85 db                	test   ebx,ebx
c0011d16:	75 14                	jne    c0011d2c <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0011d18:	c7 44 24 30 80 34 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023480
c0011d20:	83 c4 1c             	add    esp,0x1c
c0011d23:	5b                   	pop    ebx
c0011d24:	5e                   	pop    esi
c0011d25:	5f                   	pop    edi
c0011d26:	5d                   	pop    ebp
c0011d27:	e9 96 d7 ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c0011d2c:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0011d33:	50                   	push   eax
c0011d34:	50                   	push   eax
c0011d35:	89 e8                	mov    eax,ebp
c0011d37:	0f b6 c0             	movzx  eax,al
c0011d3a:	50                   	push   eax
c0011d3b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011d40:	50                   	push   eax
c0011d41:	e8 7a fa ff ff       	call   c00117c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0011d4d:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0011d50:	0f b6 c0             	movzx  eax,al
c0011d53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d57:	0f b7 c9             	movzx  ecx,cx
c0011d5a:	01 c9                	add    ecx,ecx
c0011d5c:	01 cb                	add    ebx,ecx
c0011d5e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011d61:	85 c0                	test   eax,eax
c0011d63:	0f 84 ef 00 00 00    	je     c0011e58 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0011d69:	83 f8 0d             	cmp    eax,0xd
c0011d6c:	75 0c                	jne    c0011d7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0011d6e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011d75:	e9 d8 00 00 00       	jmp    c0011e52 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011d7a:	83 f8 0a             	cmp    eax,0xa
c0011d7d:	75 44                	jne    c0011dc3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0011d7f:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011d86:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011d89:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d8c:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0011d8f:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0011d92:	75 0f                	jne    c0011da3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0011d94:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0011d97:	83 ec 0c             	sub    esp,0xc
c0011d9a:	57                   	push   edi
c0011d9b:	e8 32 fa ff ff       	call   c00117d2 <VgaText::scrollScreen()>
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	83 ec 0c             	sub    esp,0xc
c0011da6:	57                   	push   edi
c0011da7:	e8 30 f9 ff ff       	call   c00116dc <VgaText::updateCursor()>
c0011dac:	83 c4 10             	add    esp,0x10
c0011daf:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011db3:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0011db6:	0f b7 db             	movzx  ebx,bx
c0011db9:	01 db                	add    ebx,ebx
c0011dbb:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011dbe:	e9 8f 00 00 00       	jmp    c0011e52 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011dc3:	83 f8 08             	cmp    eax,0x8
c0011dc6:	75 34                	jne    c0011dfc <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0011dc8:	51                   	push   ecx
c0011dc9:	51                   	push   ecx
c0011dca:	6a 01                	push   0x1
c0011dcc:	57                   	push   edi
c0011dcd:	e8 92 fc ff ff       	call   c0011a64 <VgaText::decrementCursor(bool)>
c0011dd2:	5b                   	pop    ebx
c0011dd3:	58                   	pop    eax
c0011dd4:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0011dd7:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0011dda:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0011ddd:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0011de0:	6a 20                	push   0x20
c0011de2:	57                   	push   edi
c0011de3:	e8 8c fa ff ff       	call   c0011874 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011de8:	83 c4 20             	add    esp,0x20
c0011deb:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011def:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0011df2:	0f b7 db             	movzx  ebx,bx
c0011df5:	01 db                	add    ebx,ebx
c0011df7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011dfa:	eb 56                	jmp    c0011e52 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011dfc:	52                   	push   edx
c0011dfd:	52                   	push   edx
c0011dfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e02:	50                   	push   eax
c0011e03:	e8 5c fa ff ff       	call   c0011864 <VgaText::combineCharAndColour(char, unsigned char)>
c0011e08:	83 c4 10             	add    esp,0x10
c0011e0b:	66 89 03             	mov    WORD PTR [ebx],ax
c0011e0e:	39 3d 54 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce54,edi
c0011e14:	75 1a                	jne    c0011e30 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0011e16:	83 ec 0c             	sub    esp,0xc
c0011e19:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0011e1c:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0011e1f:	55                   	push   ebp
c0011e20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e24:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011e27:	50                   	push   eax
c0011e28:	e8 93 84 00 00       	call   c001a2c0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011e2d:	83 c4 20             	add    esp,0x20
c0011e30:	50                   	push   eax
c0011e31:	83 c3 02             	add    ebx,0x2
c0011e34:	50                   	push   eax
c0011e35:	6a 00                	push   0x0
c0011e37:	57                   	push   edi
c0011e38:	e8 d3 fb ff ff       	call   c0011a10 <VgaText::incrementCursor(bool)>
c0011e3d:	83 c4 10             	add    esp,0x10
c0011e40:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0011e44:	75 0c                	jne    c0011e52 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011e46:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011e4a:	0f b7 db             	movzx  ebx,bx
c0011e4d:	01 db                	add    ebx,ebx
c0011e4f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011e52:	46                   	inc    esi
c0011e53:	e9 06 ff ff ff       	jmp    c0011d5e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0011e58:	83 ec 0c             	sub    esp,0xc
c0011e5b:	57                   	push   edi
c0011e5c:	e8 7b f8 ff ff       	call   c00116dc <VgaText::updateCursor()>
c0011e61:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0011e68:	83 c4 2c             	add    esp,0x2c
c0011e6b:	5b                   	pop    ebx
c0011e6c:	5e                   	pop    esi
c0011e6d:	5f                   	pop    edi
c0011e6e:	5d                   	pop    ebp
c0011e6f:	c3                   	ret    

c0011e70 <VgaText::VgaText(char const*)>:
c0011e70:	56                   	push   esi
c0011e71:	53                   	push   ebx
c0011e72:	83 ec 04             	sub    esp,0x4
c0011e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e79:	83 ec 08             	sub    esp,0x8
c0011e7c:	6a 00                	push   0x0
c0011e7e:	50                   	push   eax
c0011e7f:	e8 b8 05 00 00       	call   c001243c <UnixFile::UnixFile(int)>
c0011e84:	83 c4 10             	add    esp,0x10
c0011e87:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c0011e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e90:	89 10                	mov    DWORD PTR [eax],edx
c0011e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e96:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eac:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ebc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011edd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011ee4:	83 ec 0c             	sub    esp,0xc
c0011ee7:	68 90 34 02 c0       	push   0xc0023490
c0011eec:	e8 5d 50 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011ef1:	83 c4 10             	add    esp,0x10
c0011ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0011eff:	83 ec 0c             	sub    esp,0xc
c0011f02:	6a 01                	push   0x1
c0011f04:	e8 94 09 00 00       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	89 c2                	mov    edx,eax
c0011f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f15:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c0011f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f22:	89 c6                	mov    esi,eax
c0011f24:	e8 93 d7 ff ff       	call   c000f6bc <Phys::allocatePage()>
c0011f29:	68 05 0c 00 00       	push   0xc05
c0011f2e:	56                   	push   esi
c0011f2f:	50                   	push   eax
c0011f30:	53                   	push   ebx
c0011f31:	e8 40 10 00 00       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f3d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f40:	83 ec 04             	sub    esp,0x4
c0011f43:	68 a0 0f 00 00       	push   0xfa0
c0011f48:	6a 00                	push   0x0
c0011f4a:	50                   	push   eax
c0011f4b:	e8 a0 e5 fe ff       	call   c00004f0 <memset>
c0011f50:	83 c4 10             	add    esp,0x10
c0011f53:	83 ec 04             	sub    esp,0x4
c0011f56:	6a 00                	push   0x0
c0011f58:	6a 07                	push   0x7
c0011f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f5e:	e8 23 f8 ff ff       	call   c0011786 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	83 ec 04             	sub    esp,0x4
c0011f69:	6a 00                	push   0x0
c0011f6b:	6a 00                	push   0x0
c0011f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f71:	e8 ba f9 ff ff       	call   c0011930 <VgaText::setCursor(int, int)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	83 ec 0c             	sub    esp,0xc
c0011f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f80:	e8 0d fa ff ff       	call   c0011992 <VgaText::clearScreen()>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f8c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f94:	05 82 00 00 00       	add    eax,0x82
c0011f99:	83 ec 04             	sub    esp,0x4
c0011f9c:	68 80 00 00 00       	push   0x80
c0011fa1:	6a 00                	push   0x0
c0011fa3:	50                   	push   eax
c0011fa4:	e8 47 e5 fe ff       	call   c00004f0 <memset>
c0011fa9:	83 c4 10             	add    esp,0x10
c0011fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fb0:	05 02 01 00 00       	add    eax,0x102
c0011fb5:	83 ec 04             	sub    esp,0x4
c0011fb8:	68 80 00 00 00       	push   0x80
c0011fbd:	6a 00                	push   0x0
c0011fbf:	50                   	push   eax
c0011fc0:	e8 2b e5 fe ff       	call   c00004f0 <memset>
c0011fc5:	83 c4 10             	add    esp,0x10
c0011fc8:	90                   	nop
c0011fc9:	83 c4 04             	add    esp,0x4
c0011fcc:	5b                   	pop    ebx
c0011fcd:	5e                   	pop    esi
c0011fce:	c3                   	ret    
c0011fcf:	90                   	nop

c0011fd0 <VgaText::receiveKey(unsigned char)>:
c0011fd0:	55                   	push   ebp
c0011fd1:	57                   	push   edi
c0011fd2:	56                   	push   esi
c0011fd3:	53                   	push   ebx
c0011fd4:	83 ec 2c             	sub    esp,0x2c
c0011fd7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011fdb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011fdf:	89 fd                	mov    ebp,edi
c0011fe1:	81 e5 ff 00 00 00    	and    ebp,0xff
c0011fe7:	0f 84 48 01 00 00    	je     c0012135 <VgaText::receiveKey(unsigned char)+0x165>
c0011fed:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0011ff3:	83 fd 08             	cmp    ebp,0x8
c0011ff6:	75 6a                	jne    c0012062 <VgaText::receiveKey(unsigned char)+0x92>
c0011ff8:	83 ec 0c             	sub    esp,0xc
c0011ffb:	56                   	push   esi
c0011ffc:	e8 7f e5 fe ff       	call   c0000580 <strlen>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	85 c0                	test   eax,eax
c0012006:	0f 84 ef 00 00 00    	je     c00120fb <VgaText::receiveKey(unsigned char)+0x12b>
c001200c:	50                   	push   eax
c001200d:	50                   	push   eax
c001200e:	6a 08                	push   0x8
c0012010:	53                   	push   ebx
c0012011:	e8 40 fb ff ff       	call   c0011b56 <VgaText::putchar(char)>
c0012016:	89 34 24             	mov    DWORD PTR [esp],esi
c0012019:	e8 62 e5 fe ff       	call   c0000580 <strlen>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012029:	83 fa 1f             	cmp    edx,0x1f
c001202c:	89 d0                	mov    eax,edx
c001202e:	7f 1c                	jg     c001204c <VgaText::receiveKey(unsigned char)+0x7c>
c0012030:	83 e8 08             	sub    eax,0x8
c0012033:	3c 02                	cmp    al,0x2
c0012035:	76 15                	jbe    c001204c <VgaText::receiveKey(unsigned char)+0x7c>
c0012037:	83 fa 0d             	cmp    edx,0xd
c001203a:	74 10                	je     c001204c <VgaText::receiveKey(unsigned char)+0x7c>
c001203c:	57                   	push   edi
c001203d:	57                   	push   edi
c001203e:	68 a3 34 02 c0       	push   0xc00234a3
c0012043:	53                   	push   ebx
c0012044:	e8 3b fc ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	83 ec 0c             	sub    esp,0xc
c001204f:	56                   	push   esi
c0012050:	e8 2b e5 fe ff       	call   c0000580 <strlen>
c0012055:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001205d:	e9 96 00 00 00       	jmp    c00120f8 <VgaText::receiveKey(unsigned char)+0x128>
c0012062:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012068:	83 ec 0c             	sub    esp,0xc
c001206b:	50                   	push   eax
c001206c:	e8 0f e5 fe ff       	call   c0000580 <strlen>
c0012071:	89 34 24             	mov    DWORD PTR [esp],esi
c0012074:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012078:	e8 03 e5 fe ff       	call   c0000580 <strlen>
c001207d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012081:	83 c4 10             	add    esp,0x10
c0012084:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012088:	3d 80 00 00 00       	cmp    eax,0x80
c001208d:	0f 87 a2 00 00 00    	ja     c0012135 <VgaText::receiveKey(unsigned char)+0x165>
c0012093:	8d 47 ff             	lea    eax,[edi-0x1]
c0012096:	3c 1e                	cmp    al,0x1e
c0012098:	77 35                	ja     c00120cf <VgaText::receiveKey(unsigned char)+0xff>
c001209a:	8d 47 f7             	lea    eax,[edi-0x9]
c001209d:	3c 01                	cmp    al,0x1
c001209f:	76 2e                	jbe    c00120cf <VgaText::receiveKey(unsigned char)+0xff>
c00120a1:	83 fd 0d             	cmp    ebp,0xd
c00120a4:	74 29                	je     c00120cf <VgaText::receiveKey(unsigned char)+0xff>
c00120a6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00120a9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00120ac:	68 a9 34 02 c0       	push   0xc00234a9
c00120b1:	53                   	push   ebx
c00120b2:	e8 3f fc ff ff       	call   c0011cf6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00120b7:	8d 47 40             	lea    eax,[edi+0x40]
c00120ba:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00120bd:	0f b6 c0             	movzx  eax,al
c00120c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00120c3:	50                   	push   eax
c00120c4:	53                   	push   ebx
c00120c5:	e8 bc f9 ff ff       	call   c0011a86 <VgaText::putchar(char, VgaColour, VgaColour)>
c00120ca:	83 c4 20             	add    esp,0x20
c00120cd:	eb 11                	jmp    c00120e0 <VgaText::receiveKey(unsigned char)+0x110>
c00120cf:	51                   	push   ecx
c00120d0:	89 f8                	mov    eax,edi
c00120d2:	51                   	push   ecx
c00120d3:	0f be c0             	movsx  eax,al
c00120d6:	50                   	push   eax
c00120d7:	53                   	push   ebx
c00120d8:	e8 79 fa ff ff       	call   c0011b56 <VgaText::putchar(char)>
c00120dd:	83 c4 10             	add    esp,0x10
c00120e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120e5:	89 f8                	mov    eax,edi
c00120e7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00120eb:	52                   	push   edx
c00120ec:	52                   	push   edx
c00120ed:	8d 44 24 26          	lea    eax,[esp+0x26]
c00120f1:	50                   	push   eax
c00120f2:	56                   	push   esi
c00120f3:	e8 78 e7 fe ff       	call   c0000870 <strcat>
c00120f8:	83 c4 10             	add    esp,0x10
c00120fb:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012102:	75 0f                	jne    c0012113 <VgaText::receiveKey(unsigned char)+0x143>
c0012104:	83 fd 1c             	cmp    ebp,0x1c
c0012107:	77 2c                	ja     c0012135 <VgaText::receiveKey(unsigned char)+0x165>
c0012109:	b8 08 04 00 10       	mov    eax,0x10000408
c001210e:	0f a3 e8             	bt     eax,ebp
c0012111:	73 22                	jae    c0012135 <VgaText::receiveKey(unsigned char)+0x165>
c0012113:	50                   	push   eax
c0012114:	81 c3 02 01 00 00    	add    ebx,0x102
c001211a:	50                   	push   eax
c001211b:	56                   	push   esi
c001211c:	53                   	push   ebx
c001211d:	e8 4e e7 fe ff       	call   c0000870 <strcat>
c0012122:	83 c4 0c             	add    esp,0xc
c0012125:	68 80 00 00 00       	push   0x80
c001212a:	6a 00                	push   0x0
c001212c:	56                   	push   esi
c001212d:	e8 be e3 fe ff       	call   c00004f0 <memset>
c0012132:	83 c4 10             	add    esp,0x10
c0012135:	83 c4 2c             	add    esp,0x2c
c0012138:	5b                   	pop    ebx
c0012139:	5e                   	pop    esi
c001213a:	5f                   	pop    edi
c001213b:	5d                   	pop    ebp
c001213c:	c3                   	ret    
c001213d:	90                   	nop

c001213e <VgaText::doUpdate()>:
c001213e:	c3                   	ret    
c001213f:	90                   	nop

c0012140 <TSS::TSS()>:
c0012140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012144:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001214b:	90                   	nop
c001214c:	c3                   	ret    
c001214d:	90                   	nop
c001214e:	66 90                	xchg   ax,ax

c0012150 <TSS::setESP(unsigned long)>:
c0012150:	55                   	push   ebp
c0012151:	89 e5                	mov    ebp,esp
c0012153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012159:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001215c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001215f:	90                   	nop
c0012160:	5d                   	pop    ebp
c0012161:	c3                   	ret    
c0012162:	66 90                	xchg   ax,ax

c0012164 <TSS::flush()>:
c0012164:	55                   	push   ebp
c0012165:	89 e5                	mov    ebp,esp
c0012167:	83 ec 10             	sub    esp,0x10
c001216a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001216d:	8b 00                	mov    eax,DWORD PTR [eax]
c001216f:	83 c8 03             	or     eax,0x3
c0012172:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012176:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001217a:	66 89 d0             	mov    ax,dx
c001217d:	0f 00 d8             	ltr    ax
c0012180:	90                   	nop
c0012181:	c9                   	leave  
c0012182:	c3                   	ret    
c0012183:	90                   	nop

c0012184 <TSS::setup(unsigned long, unsigned long)>:
c0012184:	55                   	push   ebp
c0012185:	89 e5                	mov    ebp,esp
c0012187:	83 ec 18             	sub    esp,0x18
c001218a:	83 ec 0c             	sub    esp,0xc
c001218d:	6a 68                	push   0x68
c001218f:	e8 e8 cf ff ff       	call   c000f17c <malloc>
c0012194:	83 c4 10             	add    esp,0x10
c0012197:	89 c2                	mov    edx,eax
c0012199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001219c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001219f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121a5:	83 ec 08             	sub    esp,0x8
c00121a8:	50                   	push   eax
c00121a9:	68 cc 34 02 c0       	push   0xc00234cc
c00121ae:	e8 9b 4d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121bc:	83 ec 04             	sub    esp,0x4
c00121bf:	6a 68                	push   0x68
c00121c1:	6a 00                	push   0x0
c00121c3:	50                   	push   eax
c00121c4:	e8 27 e3 fe ff       	call   c00004f0 <memset>
c00121c9:	83 c4 10             	add    esp,0x10
c00121cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121d2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00121d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121de:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00121e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121ea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00121ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00121f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121f6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00121fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012202:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001220b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001220e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012217:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001221a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012223:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012226:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001222f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012232:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001223b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012241:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012247:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001224a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001224d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012253:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012256:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001225d:	83 ec 0c             	sub    esp,0xc
c0012260:	68 e3 34 02 c0       	push   0xc00234e3
c0012265:	e8 e4 4c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001226a:	83 c4 10             	add    esp,0x10
c001226d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012270:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012273:	0f 20 da             	mov    edx,cr3
c0012276:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012279:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001227c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001227f:	83 ec 0c             	sub    esp,0xc
c0012282:	68 e6 34 02 c0       	push   0xc00234e6
c0012287:	e8 c2 4c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012295:	83 ec 08             	sub    esp,0x8
c0012298:	50                   	push   eax
c0012299:	8d 45 ec             	lea    eax,[ebp-0x14]
c001229c:	50                   	push   eax
c001229d:	e8 28 c0 ff ff       	call   c000e2ca <GDTEntry::setBase(unsigned int)>
c00122a2:	83 c4 10             	add    esp,0x10
c00122a5:	83 ec 08             	sub    esp,0x8
c00122a8:	6a 68                	push   0x68
c00122aa:	8d 45 ec             	lea    eax,[ebp-0x14]
c00122ad:	50                   	push   eax
c00122ae:	e8 33 c0 ff ff       	call   c000e2e6 <GDTEntry::setLimit(unsigned int)>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00122ba:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00122bd:	83 e0 0f             	and    eax,0xf
c00122c0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00122c3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00122c6:	83 c8 40             	or     eax,0x40
c00122c9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00122cc:	83 ec 0c             	sub    esp,0xc
c00122cf:	68 e9 34 02 c0       	push   0xc00234e9
c00122d4:	e8 75 4c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00122e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e7:	83 ec 08             	sub    esp,0x8
c00122ea:	50                   	push   eax
c00122eb:	68 ec 34 02 c0       	push   0xc00234ec
c00122f0:	e8 59 4c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00122fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012303:	05 64 01 00 00       	add    eax,0x164
c0012308:	83 ec 04             	sub    esp,0x4
c001230b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001230e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012311:	50                   	push   eax
c0012312:	e8 03 c0 ff ff       	call   c000e31a <GDT::addEntry(GDTEntry)>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	89 c2                	mov    edx,eax
c001231c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001231f:	89 10                	mov    DWORD PTR [eax],edx
c0012321:	83 ec 0c             	sub    esp,0xc
c0012324:	68 01 35 02 c0       	push   0xc0023501
c0012329:	e8 20 4c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012336:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001233c:	05 64 01 00 00       	add    eax,0x164
c0012341:	83 ec 0c             	sub    esp,0xc
c0012344:	50                   	push   eax
c0012345:	e8 fa bf ff ff       	call   c000e344 <GDT::flush()>
c001234a:	83 c4 10             	add    esp,0x10
c001234d:	83 ec 0c             	sub    esp,0xc
c0012350:	68 04 35 02 c0       	push   0xc0023504
c0012355:	e8 f4 4b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012360:	8b 00                	mov    eax,DWORD PTR [eax]
c0012362:	c9                   	leave  
c0012363:	c3                   	ret    

c0012364 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012368:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001236c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001236f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012374:	75 08                	jne    c001237e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012376:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001237c:	eb 38                	jmp    c00123b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001237e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012383:	75 17                	jne    c001239c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001238a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001238d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012393:	8b 10                	mov    edx,DWORD PTR [eax]
c0012395:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012399:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001239c:	89 c1                	mov    ecx,eax
c001239e:	83 e1 fd             	and    ecx,0xfffffffd
c00123a1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00123a7:	74 cd                	je     c0012376 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00123a9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00123ae:	83 e0 ef             	and    eax,0xffffffef
c00123b1:	83 f8 08             	cmp    eax,0x8
c00123b4:	76 c0                	jbe    c0012376 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00123b6:	31 c0                	xor    eax,eax
c00123b8:	c3                   	ret    
c00123b9:	90                   	nop

c00123ba <ReservedFilename::isAtty()>:
c00123ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00123c1:	31 c0                	xor    eax,eax
c00123c3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00123c9:	74 09                	je     c00123d4 <ReservedFilename::isAtty()+0x1a>
c00123cb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00123d1:	0f 94 c0             	sete   al
c00123d4:	c3                   	ret    
c00123d5:	90                   	nop

c00123d6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00123d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00123e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00123ea:	75 08                	jne    c00123f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00123ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00123f2:	eb 3d                	jmp    c0012431 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00123f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00123f9:	75 17                	jne    c0012412 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00123fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012400:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012403:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012409:	8b 10                	mov    edx,DWORD PTR [eax]
c001240b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001240f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012412:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012417:	75 04                	jne    c001241d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012419:	89 0a                	mov    DWORD PTR [edx],ecx
c001241b:	eb 14                	jmp    c0012431 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001241d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012422:	74 c8                	je     c00123ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012424:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012429:	83 e0 ef             	and    eax,0xffffffef
c001242c:	83 f8 08             	cmp    eax,0x8
c001242f:	76 bb                	jbe    c00123ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012431:	31 c0                	xor    eax,eax
c0012433:	c3                   	ret    

c0012434 <UnixFile::getFileDescriptor()>:
c0012434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001243b:	c3                   	ret    

c001243c <UnixFile::UnixFile(int)>:
c001243c:	53                   	push   ebx
c001243d:	83 ec 28             	sub    esp,0x28
c0012440:	ba 54 35 02 c0       	mov    edx,0xc0023554
c0012445:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012449:	89 10                	mov    DWORD PTR [eax],edx
c001244b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012453:	0f 8f 90 01 00 00    	jg     c00125e9 <UnixFile::UnixFile(int)+0x1ad>
c0012459:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c001245e:	8d 50 01             	lea    edx,[eax+0x1]
c0012461:	89 15 40 58 02 c0    	mov    DWORD PTR ds:0xc0025840,edx
c0012467:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001246b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001246e:	83 ec 08             	sub    esp,0x8
c0012471:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012475:	68 d8 ce 02 c0       	push   0xc002ced8
c001247a:	e8 2f ed 00 00       	call   c00211ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c001247f:	83 c4 10             	add    esp,0x10
c0012482:	a0 d4 ce 02 c0       	mov    al,ds:0xc002ced4
c0012487:	83 f0 01             	xor    eax,0x1
c001248a:	0f b6 c0             	movzx  eax,al
c001248d:	85 c0                	test   eax,eax
c001248f:	0f 84 55 01 00 00    	je     c00125ea <UnixFile::UnixFile(int)+0x1ae>
c0012495:	c6 05 d4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ced4,0x1
c001249c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00124a4:	83 ec 0c             	sub    esp,0xc
c00124a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124ab:	e8 cc cc ff ff       	call   c000f17c <malloc>
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	89 c3                	mov    ebx,eax
c00124b5:	83 ec 08             	sub    esp,0x8
c00124b8:	68 03 ff ff 0f       	push   0xfffff03
c00124bd:	53                   	push   ebx
c00124be:	e8 2d 01 00 00       	call   c00125f0 <ReservedFilename::ReservedFilename(int)>
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	89 1d cc ce 02 c0    	mov    DWORD PTR ds:0xc002cecc,ebx
c00124cc:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00124d4:	83 ec 0c             	sub    esp,0xc
c00124d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124db:	e8 9c cc ff ff       	call   c000f17c <malloc>
c00124e0:	83 c4 10             	add    esp,0x10
c00124e3:	89 c3                	mov    ebx,eax
c00124e5:	83 ec 08             	sub    esp,0x8
c00124e8:	68 01 ff ff 0f       	push   0xfffff01
c00124ed:	53                   	push   ebx
c00124ee:	e8 fd 00 00 00       	call   c00125f0 <ReservedFilename::ReservedFilename(int)>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c00124fc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012504:	83 ec 0c             	sub    esp,0xc
c0012507:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001250b:	e8 6c cc ff ff       	call   c000f17c <malloc>
c0012510:	83 c4 10             	add    esp,0x10
c0012513:	89 c3                	mov    ebx,eax
c0012515:	83 ec 08             	sub    esp,0x8
c0012518:	68 00 ff ff 0f       	push   0xfffff00
c001251d:	53                   	push   ebx
c001251e:	e8 cd 00 00 00       	call   c00125f0 <ReservedFilename::ReservedFilename(int)>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	89 1d c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,ebx
c001252c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012534:	83 ec 0c             	sub    esp,0xc
c0012537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001253b:	e8 3c cc ff ff       	call   c000f17c <malloc>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	89 c3                	mov    ebx,eax
c0012545:	83 ec 08             	sub    esp,0x8
c0012548:	68 02 ff ff 0f       	push   0xfffff02
c001254d:	53                   	push   ebx
c001254e:	e8 9d 00 00 00       	call   c00125f0 <ReservedFilename::ReservedFilename(int)>
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	89 1d c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,ebx
c001255c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012564:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012569:	7f 7f                	jg     c00125ea <UnixFile::UnixFile(int)+0x1ae>
c001256b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012573:	83 ec 0c             	sub    esp,0xc
c0012576:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001257a:	e8 fd cb ff ff       	call   c000f17c <malloc>
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	89 c3                	mov    ebx,eax
c0012584:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012588:	05 10 ff ff 0f       	add    eax,0xfffff10
c001258d:	83 ec 08             	sub    esp,0x8
c0012590:	50                   	push   eax
c0012591:	53                   	push   ebx
c0012592:	e8 59 00 00 00       	call   c00125f0 <ReservedFilename::ReservedFilename(int)>
c0012597:	83 c4 10             	add    esp,0x10
c001259a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001259e:	89 1c 85 a0 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3160],ebx
c00125a5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00125ad:	83 ec 0c             	sub    esp,0xc
c00125b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125b4:	e8 c3 cb ff ff       	call   c000f17c <malloc>
c00125b9:	83 c4 10             	add    esp,0x10
c00125bc:	89 c3                	mov    ebx,eax
c00125be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125c2:	05 20 ff ff 0f       	add    eax,0xfffff20
c00125c7:	83 ec 08             	sub    esp,0x8
c00125ca:	50                   	push   eax
c00125cb:	53                   	push   ebx
c00125cc:	e8 1f 00 00 00       	call   c00125f0 <ReservedFilename::ReservedFilename(int)>
c00125d1:	83 c4 10             	add    esp,0x10
c00125d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125d8:	89 1c 85 60 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31a0],ebx
c00125df:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125e4:	e9 7b ff ff ff       	jmp    c0012564 <UnixFile::UnixFile(int)+0x128>
c00125e9:	90                   	nop
c00125ea:	83 c4 28             	add    esp,0x28
c00125ed:	5b                   	pop    ebx
c00125ee:	c3                   	ret    
c00125ef:	90                   	nop

c00125f0 <ReservedFilename::ReservedFilename(int)>:
c00125f0:	83 ec 0c             	sub    esp,0xc
c00125f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125f7:	83 ec 08             	sub    esp,0x8
c00125fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125fe:	50                   	push   eax
c00125ff:	e8 38 fe ff ff       	call   c001243c <UnixFile::UnixFile(int)>
c0012604:	83 c4 10             	add    esp,0x10
c0012607:	ba 70 35 02 c0       	mov    edx,0xc0023570
c001260c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012610:	89 10                	mov    DWORD PTR [eax],edx
c0012612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012616:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001261a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001261d:	90                   	nop
c001261e:	83 c4 0c             	add    esp,0xc
c0012621:	c3                   	ret    

c0012622 <UnixFile::~UnixFile()>:
c0012622:	83 ec 1c             	sub    esp,0x1c
c0012625:	ba 54 35 02 c0       	mov    edx,0xc0023554
c001262a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001262e:	89 10                	mov    DWORD PTR [eax],edx
c0012630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012637:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001263c:	7f 76                	jg     c00126b4 <UnixFile::~UnixFile()+0x92>
c001263e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	68 d8 ce 02 c0       	push   0xc002ced8
c001264e:	e8 2f ec 00 00       	call   c0021282 <LinkedList<UnixFile>::getFirstElement()>
c0012653:	83 c4 10             	add    esp,0x10
c0012656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001265a:	83 ec 0c             	sub    esp,0xc
c001265d:	68 d8 ce 02 c0       	push   0xc002ced8
c0012662:	e8 23 ec 00 00       	call   c002128a <LinkedList<UnixFile>::removeFirst()>
c0012667:	83 c4 10             	add    esp,0x10
c001266a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001266e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012672:	74 43                	je     c00126b7 <UnixFile::~UnixFile()+0x95>
c0012674:	83 ec 08             	sub    esp,0x8
c0012677:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001267b:	68 d8 ce 02 c0       	push   0xc002ced8
c0012680:	e8 29 eb 00 00       	call   c00211ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012685:	83 c4 10             	add    esp,0x10
c0012688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001268c:	8d 50 01             	lea    edx,[eax+0x1]
c001268f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012693:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012698:	0f 94 c0             	sete   al
c001269b:	0f b6 c0             	movzx  eax,al
c001269e:	85 c0                	test   eax,eax
c00126a0:	74 a4                	je     c0012646 <UnixFile::~UnixFile()+0x24>
c00126a2:	83 ec 0c             	sub    esp,0xc
c00126a5:	68 08 35 02 c0       	push   0xc0023508
c00126aa:	e8 13 ce ff ff       	call   c000f4c2 <KePanic(char const*)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	eb 92                	jmp    c0012646 <UnixFile::~UnixFile()+0x24>
c00126b4:	90                   	nop
c00126b5:	eb 01                	jmp    c00126b8 <UnixFile::~UnixFile()+0x96>
c00126b7:	90                   	nop
c00126b8:	90                   	nop
c00126b9:	83 c4 1c             	add    esp,0x1c
c00126bc:	c3                   	ret    
c00126bd:	90                   	nop

c00126be <UnixFile::~UnixFile()>:
c00126be:	83 ec 0c             	sub    esp,0xc
c00126c1:	83 ec 0c             	sub    esp,0xc
c00126c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126c8:	e8 55 ff ff ff       	call   c0012622 <UnixFile::~UnixFile()>
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	83 ec 08             	sub    esp,0x8
c00126d3:	6a 0c                	push   0xc
c00126d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126d9:	e8 15 a2 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c00126de:	83 c4 10             	add    esp,0x10
c00126e1:	83 c4 0c             	add    esp,0xc
c00126e4:	c3                   	ret    
c00126e5:	90                   	nop

c00126e6 <ReservedFilename::~ReservedFilename()>:
c00126e6:	83 ec 0c             	sub    esp,0xc
c00126e9:	ba 70 35 02 c0       	mov    edx,0xc0023570
c00126ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f2:	89 10                	mov    DWORD PTR [eax],edx
c00126f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f8:	83 ec 0c             	sub    esp,0xc
c00126fb:	50                   	push   eax
c00126fc:	e8 21 ff ff ff       	call   c0012622 <UnixFile::~UnixFile()>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	90                   	nop
c0012705:	83 c4 0c             	add    esp,0xc
c0012708:	c3                   	ret    
c0012709:	90                   	nop

c001270a <ReservedFilename::~ReservedFilename()>:
c001270a:	83 ec 0c             	sub    esp,0xc
c001270d:	83 ec 0c             	sub    esp,0xc
c0012710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012714:	e8 cd ff ff ff       	call   c00126e6 <ReservedFilename::~ReservedFilename()>
c0012719:	83 c4 10             	add    esp,0x10
c001271c:	83 ec 08             	sub    esp,0x8
c001271f:	6a 0c                	push   0xc
c0012721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012725:	e8 c9 a1 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	83 c4 0c             	add    esp,0xc
c0012730:	c3                   	ret    

c0012731 <KeGetFileFromDescriptor(int)>:
c0012731:	53                   	push   ebx
c0012732:	83 ec 10             	sub    esp,0x10
c0012735:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012739:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001273f:	53                   	push   ebx
c0012740:	68 28 35 02 c0       	push   0xc0023528
c0012745:	e8 04 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001274a:	83 c4 10             	add    esp,0x10
c001274d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0012753:	7f 30                	jg     c0012785 <KeGetFileFromDescriptor(int)+0x54>
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	68 d8 ce 02 c0       	push   0xc002ced8
c001275d:	e8 20 eb 00 00       	call   c0021282 <LinkedList<UnixFile>::getFirstElement()>
c0012762:	8d 50 ff             	lea    edx,[eax-0x1]
c0012765:	83 c4 10             	add    esp,0x10
c0012768:	83 fa fd             	cmp    edx,0xfffffffd
c001276b:	76 04                	jbe    c0012771 <KeGetFileFromDescriptor(int)+0x40>
c001276d:	31 c0                	xor    eax,eax
c001276f:	eb 6e                	jmp    c00127df <KeGetFileFromDescriptor(int)+0xae>
c0012771:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012774:	74 69                	je     c00127df <KeGetFileFromDescriptor(int)+0xae>
c0012776:	52                   	push   edx
c0012777:	52                   	push   edx
c0012778:	50                   	push   eax
c0012779:	68 d8 ce 02 c0       	push   0xc002ced8
c001277e:	e8 a9 eb 00 00       	call   c002132c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0012783:	eb dd                	jmp    c0012762 <KeGetFileFromDescriptor(int)+0x31>
c0012785:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001278b:	a1 cc ce 02 c0       	mov    eax,ds:0xc002cecc
c0012790:	74 4d                	je     c00127df <KeGetFileFromDescriptor(int)+0xae>
c0012792:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012798:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001279d:	74 40                	je     c00127df <KeGetFileFromDescriptor(int)+0xae>
c001279f:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00127a5:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00127aa:	74 33                	je     c00127df <KeGetFileFromDescriptor(int)+0xae>
c00127ac:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00127b2:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c00127b7:	74 26                	je     c00127df <KeGetFileFromDescriptor(int)+0xae>
c00127b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00127bf:	83 f8 08             	cmp    eax,0x8
c00127c2:	77 09                	ja     c00127cd <KeGetFileFromDescriptor(int)+0x9c>
c00127c4:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c00127cb:	eb 12                	jmp    c00127df <KeGetFileFromDescriptor(int)+0xae>
c00127cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00127d3:	83 fb 08             	cmp    ebx,0x8
c00127d6:	77 95                	ja     c001276d <KeGetFileFromDescriptor(int)+0x3c>
c00127d8:	8b 04 9d 60 ce 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd31a0]
c00127df:	83 c4 08             	add    esp,0x8
c00127e2:	5b                   	pop    ebx
c00127e3:	c3                   	ret    

c00127e4 <__static_initialization_and_destruction_0(int, int)>:
c00127e4:	83 ec 0c             	sub    esp,0xc
c00127e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00127ec:	75 34                	jne    c0012822 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00127ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00127f6:	75 2a                	jne    c0012822 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00127f8:	83 ec 0c             	sub    esp,0xc
c00127fb:	68 d8 ce 02 c0       	push   0xc002ced8
c0012800:	e8 67 e9 00 00       	call   c002116c <LinkedList<UnixFile>::LinkedList()>
c0012805:	83 c4 10             	add    esp,0x10
c0012808:	83 ec 04             	sub    esp,0x4
c001280b:	68 b4 50 02 c0       	push   0xc00250b4
c0012810:	68 d8 ce 02 c0       	push   0xc002ced8
c0012815:	68 6a 11 02 c0       	push   0xc002116a
c001281a:	e8 84 a0 ff ff       	call   c000c8a3 <__cxa_atexit>
c001281f:	83 c4 10             	add    esp,0x10
c0012822:	90                   	nop
c0012823:	83 c4 0c             	add    esp,0xc
c0012826:	c3                   	ret    

c0012827 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0012827:	83 ec 0c             	sub    esp,0xc
c001282a:	83 ec 08             	sub    esp,0x8
c001282d:	68 ff ff 00 00       	push   0xffff
c0012832:	6a 01                	push   0x1
c0012834:	e8 ab ff ff ff       	call   c00127e4 <__static_initialization_and_destruction_0(int, int)>
c0012839:	83 c4 10             	add    esp,0x10
c001283c:	83 c4 0c             	add    esp,0xc
c001283f:	c3                   	ret    

c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012840:	53                   	push   ebx
c0012841:	8b 15 48 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025848
c0012847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001284b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001284f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012855:	89 d8                	mov    eax,ebx
c0012857:	d1 e8                	shr    eax,1
c0012859:	01 d0                	add    eax,edx
c001285b:	80 e3 01             	and    bl,0x1
c001285e:	8a 10                	mov    dl,BYTE PTR [eax]
c0012860:	75 09                	jne    c001286b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012862:	83 e2 f0             	and    edx,0xfffffff0
c0012865:	09 ca                	or     edx,ecx
c0012867:	88 10                	mov    BYTE PTR [eax],dl
c0012869:	5b                   	pop    ebx
c001286a:	c3                   	ret    
c001286b:	0f b6 c9             	movzx  ecx,cl
c001286e:	83 e2 0f             	and    edx,0xf
c0012871:	c1 e1 04             	shl    ecx,0x4
c0012874:	09 ca                	or     edx,ecx
c0012876:	88 10                	mov    BYTE PTR [eax],dl
c0012878:	5b                   	pop    ebx
c0012879:	c3                   	ret    

c001287a <Virt::getPageState(unsigned long)>:
c001287a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001287e:	8b 0d 48 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025848
c0012884:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001288a:	89 d0                	mov    eax,edx
c001288c:	d1 e8                	shr    eax,1
c001288e:	80 e2 01             	and    dl,0x1
c0012891:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012894:	74 03                	je     c0012899 <Virt::getPageState(unsigned long)+0x1f>
c0012896:	c1 e8 04             	shr    eax,0x4
c0012899:	83 e0 0f             	and    eax,0xf
c001289c:	c3                   	ret    

c001289d <Virt::allocateKernelVirtualPages(int)>:
c001289d:	55                   	push   ebp
c001289e:	57                   	push   edi
c001289f:	56                   	push   esi
c00128a0:	31 f6                	xor    esi,esi
c00128a2:	53                   	push   ebx
c00128a3:	31 db                	xor    ebx,ebx
c00128a5:	83 ec 1c             	sub    esp,0x1c
c00128a8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00128ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00128b1:	8b 2d 44 58 02 c0    	mov    ebp,DWORD PTR ds:0xc0025844
c00128b7:	55                   	push   ebp
c00128b8:	e8 bd ff ff ff       	call   c001287a <Virt::getPageState(unsigned long)>
c00128bd:	5a                   	pop    edx
c00128be:	84 c0                	test   al,al
c00128c0:	75 3d                	jne    c00128ff <Virt::allocateKernelVirtualPages(int)+0x62>
c00128c2:	85 db                	test   ebx,ebx
c00128c4:	0f 44 f5             	cmove  esi,ebp
c00128c7:	83 c3 01             	add    ebx,0x1
c00128ca:	39 fb                	cmp    ebx,edi
c00128cc:	74 5e                	je     c001292c <Virt::allocateKernelVirtualPages(int)+0x8f>
c00128ce:	83 c5 01             	add    ebp,0x1
c00128d1:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00128d7:	76 33                	jbe    c001290c <Virt::allocateKernelVirtualPages(int)+0x6f>
c00128d9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00128de:	c7 05 44 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025844,0xc8000
c00128e8:	75 2a                	jne    c0012914 <Virt::allocateKernelVirtualPages(int)+0x77>
c00128ea:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00128ef:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00128f4:	55                   	push   ebp
c00128f5:	e8 80 ff ff ff       	call   c001287a <Virt::getPageState(unsigned long)>
c00128fa:	5a                   	pop    edx
c00128fb:	84 c0                	test   al,al
c00128fd:	74 c3                	je     c00128c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00128ff:	83 c5 01             	add    ebp,0x1
c0012902:	31 db                	xor    ebx,ebx
c0012904:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001290a:	77 cd                	ja     c00128d9 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001290c:	89 2d 44 58 02 c0    	mov    DWORD PTR ds:0xc0025844,ebp
c0012912:	eb a3                	jmp    c00128b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012914:	83 ec 0c             	sub    esp,0xc
c0012917:	68 84 35 02 c0       	push   0xc0023584
c001291c:	e8 a1 cb ff ff       	call   c000f4c2 <KePanic(char const*)>
c0012921:	8b 2d 44 58 02 c0    	mov    ebp,DWORD PTR ds:0xc0025844
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	eb 8b                	jmp    c00128b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001292c:	89 35 44 58 02 c0    	mov    DWORD PTR ds:0xc0025844,esi
c0012932:	83 fb 01             	cmp    ebx,0x1
c0012935:	74 63                	je     c001299a <Virt::allocateKernelVirtualPages(int)+0xfd>
c0012937:	85 ff                	test   edi,edi
c0012939:	74 41                	je     c001297c <Virt::allocateKernelVirtualPages(int)+0xdf>
c001293b:	89 f0                	mov    eax,esi
c001293d:	31 db                	xor    ebx,ebx
c001293f:	8d 6f ff             	lea    ebp,[edi-0x1]
c0012942:	eb 16                	jmp    c001295a <Virt::allocateKernelVirtualPages(int)+0xbd>
c0012944:	6a 01                	push   0x1
c0012946:	83 c3 01             	add    ebx,0x1
c0012949:	50                   	push   eax
c001294a:	e8 f1 fe ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001294f:	39 fb                	cmp    ebx,edi
c0012951:	58                   	pop    eax
c0012952:	5a                   	pop    edx
c0012953:	74 27                	je     c001297c <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012955:	a1 44 58 02 c0       	mov    eax,ds:0xc0025844
c001295a:	8d 50 01             	lea    edx,[eax+0x1]
c001295d:	85 db                	test   ebx,ebx
c001295f:	89 15 44 58 02 c0    	mov    DWORD PTR ds:0xc0025844,edx
c0012965:	74 22                	je     c0012989 <Virt::allocateKernelVirtualPages(int)+0xec>
c0012967:	39 dd                	cmp    ebp,ebx
c0012969:	75 d9                	jne    c0012944 <Virt::allocateKernelVirtualPages(int)+0xa7>
c001296b:	6a 03                	push   0x3
c001296d:	83 c3 01             	add    ebx,0x1
c0012970:	50                   	push   eax
c0012971:	e8 ca fe ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012976:	39 fb                	cmp    ebx,edi
c0012978:	59                   	pop    ecx
c0012979:	58                   	pop    eax
c001297a:	75 d9                	jne    c0012955 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001297c:	83 c4 1c             	add    esp,0x1c
c001297f:	89 f0                	mov    eax,esi
c0012981:	5b                   	pop    ebx
c0012982:	c1 e0 0c             	shl    eax,0xc
c0012985:	5e                   	pop    esi
c0012986:	5f                   	pop    edi
c0012987:	5d                   	pop    ebp
c0012988:	c3                   	ret    
c0012989:	6a 02                	push   0x2
c001298b:	bb 01 00 00 00       	mov    ebx,0x1
c0012990:	50                   	push   eax
c0012991:	e8 aa fe ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012996:	58                   	pop    eax
c0012997:	5a                   	pop    edx
c0012998:	eb bb                	jmp    c0012955 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001299a:	6a 04                	push   0x4
c001299c:	56                   	push   esi
c001299d:	8d 46 01             	lea    eax,[esi+0x1]
c00129a0:	a3 44 58 02 c0       	mov    ds:0xc0025844,eax
c00129a5:	e8 96 fe ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00129aa:	89 f0                	mov    eax,esi
c00129ac:	59                   	pop    ecx
c00129ad:	c1 e0 0c             	shl    eax,0xc
c00129b0:	5b                   	pop    ebx
c00129b1:	83 c4 1c             	add    esp,0x1c
c00129b4:	5b                   	pop    ebx
c00129b5:	5e                   	pop    esi
c00129b6:	5f                   	pop    edi
c00129b7:	5d                   	pop    ebp
c00129b8:	c3                   	ret    

c00129b9 <Virt::freeSwapfilePage(unsigned long)>:
c00129b9:	53                   	push   ebx
c00129ba:	8b 15 ec ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ceec
c00129c0:	b8 01 00 00 00       	mov    eax,0x1
c00129c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00129c9:	d3 e0                	shl    eax,cl
c00129cb:	89 cb                	mov    ebx,ecx
c00129cd:	c1 eb 05             	shr    ebx,0x5
c00129d0:	f7 d0                	not    eax
c00129d2:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00129d5:	21 c1                	and    ecx,eax
c00129d7:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00129da:	5b                   	pop    ebx
c00129db:	c3                   	ret    

c00129dc <Virt::swapIDToSector(unsigned long)>:
c00129dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129e0:	8b 15 4c 58 02 c0    	mov    edx,DWORD PTR ds:0xc002584c
c00129e6:	8b 0d 54 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025854
c00129ec:	0f af c2             	imul   eax,edx
c00129ef:	01 c8                	add    eax,ecx
c00129f1:	c3                   	ret    

c00129f2 <Virt::allocateSwapfilePage()>:
c00129f2:	55                   	push   ebp
c00129f3:	31 d2                	xor    edx,edx
c00129f5:	57                   	push   edi
c00129f6:	56                   	push   esi
c00129f7:	53                   	push   ebx
c00129f8:	83 ec 0c             	sub    esp,0xc
c00129fb:	8b 1d 50 58 02 c0    	mov    ebx,DWORD PTR ds:0xc0025850
c0012a01:	8b 0d 4c 58 02 c0    	mov    ecx,DWORD PTR ds:0xc002584c
c0012a07:	89 d8                	mov    eax,ebx
c0012a09:	f7 f1                	div    ecx
c0012a0b:	39 cb                	cmp    ebx,ecx
c0012a0d:	72 2f                	jb     c0012a3e <Virt::allocateSwapfilePage()+0x4c>
c0012a0f:	8b 35 ec ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ceec
c0012a15:	8b 16                	mov    edx,DWORD PTR [esi]
c0012a17:	f6 c2 01             	test   dl,0x1
c0012a1a:	74 3e                	je     c0012a5a <Virt::allocateSwapfilePage()+0x68>
c0012a1c:	31 c9                	xor    ecx,ecx
c0012a1e:	bf 01 00 00 00       	mov    edi,0x1
c0012a23:	eb 12                	jmp    c0012a37 <Virt::allocateSwapfilePage()+0x45>
c0012a25:	89 ca                	mov    edx,ecx
c0012a27:	89 fd                	mov    ebp,edi
c0012a29:	c1 ea 05             	shr    edx,0x5
c0012a2c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012a2f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012a31:	d3 e5                	shl    ebp,cl
c0012a33:	85 ea                	test   edx,ebp
c0012a35:	74 2c                	je     c0012a63 <Virt::allocateSwapfilePage()+0x71>
c0012a37:	83 c1 01             	add    ecx,0x1
c0012a3a:	39 c8                	cmp    eax,ecx
c0012a3c:	77 e7                	ja     c0012a25 <Virt::allocateSwapfilePage()+0x33>
c0012a3e:	83 ec 0c             	sub    esp,0xc
c0012a41:	68 07 3b 02 c0       	push   0xc0023b07
c0012a46:	e8 77 ca ff ff       	call   c000f4c2 <KePanic(char const*)>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	31 c9                	xor    ecx,ecx
c0012a50:	83 c4 0c             	add    esp,0xc
c0012a53:	89 c8                	mov    eax,ecx
c0012a55:	5b                   	pop    ebx
c0012a56:	5e                   	pop    esi
c0012a57:	5f                   	pop    edi
c0012a58:	5d                   	pop    ebp
c0012a59:	c3                   	ret    
c0012a5a:	89 f3                	mov    ebx,esi
c0012a5c:	bd 01 00 00 00       	mov    ebp,0x1
c0012a61:	31 c9                	xor    ecx,ecx
c0012a63:	09 ea                	or     edx,ebp
c0012a65:	89 c8                	mov    eax,ecx
c0012a67:	89 13                	mov    DWORD PTR [ebx],edx
c0012a69:	83 c4 0c             	add    esp,0xc
c0012a6c:	5b                   	pop    ebx
c0012a6d:	5e                   	pop    esi
c0012a6e:	5f                   	pop    edi
c0012a6f:	5d                   	pop    ebp
c0012a70:	c3                   	ret    

c0012a71 <Virt::virtualMemorySetup()>:
c0012a71:	53                   	push   ebx
c0012a72:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012a77:	6a 0f                	push   0xf
c0012a79:	53                   	push   ebx
c0012a7a:	83 c3 01             	add    ebx,0x1
c0012a7d:	e8 be fd ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012a82:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012a88:	58                   	pop    eax
c0012a89:	5a                   	pop    edx
c0012a8a:	75 eb                	jne    c0012a77 <Virt::virtualMemorySetup()+0x6>
c0012a8c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012a91:	6a 00                	push   0x0
c0012a93:	53                   	push   ebx
c0012a94:	83 c3 01             	add    ebx,0x1
c0012a97:	e8 a4 fd ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012a9c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012aa2:	59                   	pop    ecx
c0012aa3:	58                   	pop    eax
c0012aa4:	75 eb                	jne    c0012a91 <Virt::virtualMemorySetup()+0x20>
c0012aa6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012aab:	6a 0f                	push   0xf
c0012aad:	53                   	push   ebx
c0012aae:	83 c3 01             	add    ebx,0x1
c0012ab1:	e8 8a fd ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012ab6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012abc:	58                   	pop    eax
c0012abd:	5a                   	pop    edx
c0012abe:	75 eb                	jne    c0012aab <Virt::virtualMemorySetup()+0x3a>
c0012ac0:	5b                   	pop    ebx
c0012ac1:	c3                   	ret    

c0012ac2 <Virt::setupPageSwapping(int)>:
c0012ac2:	53                   	push   ebx
c0012ac3:	83 ec 0c             	sub    esp,0xc
c0012ac6:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c0012acb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012acf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012ad5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ad7:	53                   	push   ebx
c0012ad8:	68 1e 3b 02 c0       	push   0xc0023b1e
c0012add:	50                   	push   eax
c0012ade:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012ae1:	c1 e3 0b             	shl    ebx,0xb
c0012ae4:	89 1d 50 58 02 c0    	mov    DWORD PTR ds:0xc0025850,ebx
c0012aea:	c1 eb 08             	shr    ebx,0x8
c0012aed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012af0:	c6 05 58 58 02 c0 43 	mov    BYTE PTR ds:0xc0025858,0x43
c0012af7:	c7 05 4c 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002584c,0x8
c0012b01:	a3 54 58 02 c0       	mov    ds:0xc0025854,eax
c0012b06:	e8 71 c6 ff ff       	call   c000f17c <malloc>
c0012b0b:	31 d2                	xor    edx,edx
c0012b0d:	83 c4 0c             	add    esp,0xc
c0012b10:	a3 ec ce 02 c0       	mov    ds:0xc002ceec,eax
c0012b15:	89 c1                	mov    ecx,eax
c0012b17:	a1 50 58 02 c0       	mov    eax,ds:0xc0025850
c0012b1c:	f7 35 4c 58 02 c0    	div    DWORD PTR ds:0xc002584c
c0012b22:	c1 e8 05             	shr    eax,0x5
c0012b25:	50                   	push   eax
c0012b26:	6a 00                	push   0x0
c0012b28:	51                   	push   ecx
c0012b29:	e8 c2 d9 fe ff       	call   c00004f0 <memset>
c0012b2e:	83 c4 18             	add    esp,0x18
c0012b31:	5b                   	pop    ebx
c0012b32:	c3                   	ret    
c0012b33:	90                   	nop

c0012b34 <VAS::setCPUSpecific(unsigned long)>:
c0012b34:	c3                   	ret    
c0012b35:	90                   	nop

c0012b36 <VAS::VAS(VAS*)>:
c0012b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012b4c:	90                   	nop
c0012b4d:	c3                   	ret    

c0012b4e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b52:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012b57:	89 c2                	mov    edx,eax
c0012b59:	c1 ea 16             	shr    edx,0x16
c0012b5c:	c1 e8 0a             	shr    eax,0xa
c0012b5f:	83 f9 01             	cmp    ecx,0x1
c0012b62:	19 c9                	sbb    ecx,ecx
c0012b64:	25 fc 0f 00 00       	and    eax,0xffc
c0012b69:	c1 e2 0c             	shl    edx,0xc
c0012b6c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012b72:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012b79:	01 d0                	add    eax,edx
c0012b7b:	c3                   	ret    

c0012b7c <VAS::getPageTableEntry(unsigned long)>:
c0012b7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012b80:	89 ca                	mov    edx,ecx
c0012b82:	c1 ea 16             	shr    edx,0x16
c0012b85:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012b8b:	c1 e9 0a             	shr    ecx,0xa
c0012b8e:	c1 e0 0c             	shl    eax,0xc
c0012b91:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012b97:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012b9a:	c3                   	ret    

c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>:
c0012b9b:	55                   	push   ebp
c0012b9c:	57                   	push   edi
c0012b9d:	bf 01 00 00 00       	mov    edi,0x1
c0012ba2:	56                   	push   esi
c0012ba3:	53                   	push   ebx
c0012ba4:	83 ec 1c             	sub    esp,0x1c
c0012ba7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012bab:	c1 ee 0c             	shr    esi,0xc
c0012bae:	eb 48                	jmp    c0012bf8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012bb0:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c0012bb5:	83 ec 08             	sub    esp,0x8
c0012bb8:	55                   	push   ebp
c0012bb9:	50                   	push   eax
c0012bba:	e8 bd ff ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bc4:	f6 c6 04             	test   dh,0x4
c0012bc7:	75 70                	jne    c0012c39 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012bc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012bcf:	83 fb 04             	cmp    ebx,0x4
c0012bd2:	0f 84 8a 00 00 00    	je     c0012c62 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012bd8:	83 fb 02             	cmp    ebx,0x2
c0012bdb:	0f 84 9a 00 00 00    	je     c0012c7b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012be1:	83 fb 03             	cmp    ebx,0x3
c0012be4:	0f 84 be 00 00 00    	je     c0012ca8 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012bea:	83 fb 01             	cmp    ebx,0x1
c0012bed:	0f 84 a2 00 00 00    	je     c0012c95 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012bf3:	83 c6 01             	add    esi,0x1
c0012bf6:	31 ff                	xor    edi,edi
c0012bf8:	56                   	push   esi
c0012bf9:	89 f5                	mov    ebp,esi
c0012bfb:	e8 7a fc ff ff       	call   c001287a <Virt::getPageState(unsigned long)>
c0012c00:	c1 e5 0c             	shl    ebp,0xc
c0012c03:	5a                   	pop    edx
c0012c04:	0f b6 d8             	movzx  ebx,al
c0012c07:	85 db                	test   ebx,ebx
c0012c09:	75 a5                	jne    c0012bb0 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012c0b:	83 ec 0c             	sub    esp,0xc
c0012c0e:	68 35 3b 02 c0       	push   0xc0023b35
c0012c13:	e8 aa c8 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0012c18:	5a                   	pop    edx
c0012c19:	59                   	pop    ecx
c0012c1a:	55                   	push   ebp
c0012c1b:	8b 2d f0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002cef0
c0012c21:	55                   	push   ebp
c0012c22:	e8 55 ff ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c2c:	f6 c6 04             	test   dh,0x4
c0012c2f:	75 08                	jne    c0012c39 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012c31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012c37:	eb ba                	jmp    c0012bf3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c3d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012c43:	83 ec 0c             	sub    esp,0xc
c0012c46:	52                   	push   edx
c0012c47:	e8 07 ca ff ff       	call   c000f653 <Phys::freePage(unsigned long)>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	83 fb 04             	cmp    ebx,0x4
c0012c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012c5c:	0f 85 76 ff ff ff    	jne    c0012bd8 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012c62:	83 e7 01             	and    edi,0x1
c0012c65:	75 46                	jne    c0012cad <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012c67:	c7 44 24 30 a4 35 02 c0 	mov    DWORD PTR [esp+0x30],0xc00235a4
c0012c6f:	83 c4 1c             	add    esp,0x1c
c0012c72:	5b                   	pop    ebx
c0012c73:	5e                   	pop    esi
c0012c74:	5f                   	pop    edi
c0012c75:	5d                   	pop    ebp
c0012c76:	e9 47 c8 ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c0012c7b:	83 e7 01             	and    edi,0x1
c0012c7e:	75 15                	jne    c0012c95 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	68 51 3b 02 c0       	push   0xc0023b51
c0012c88:	e8 35 c8 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	e9 5e ff ff ff       	jmp    c0012bf3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012c95:	83 ec 08             	sub    esp,0x8
c0012c98:	6a 00                	push   0x0
c0012c9a:	56                   	push   esi
c0012c9b:	e8 a0 fb ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012ca0:	83 c4 10             	add    esp,0x10
c0012ca3:	e9 4b ff ff ff       	jmp    c0012bf3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012ca8:	83 e7 01             	and    edi,0x1
c0012cab:	75 16                	jne    c0012cc3 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012cad:	83 ec 08             	sub    esp,0x8
c0012cb0:	6a 00                	push   0x0
c0012cb2:	56                   	push   esi
c0012cb3:	e8 88 fb ff ff       	call   c0012840 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012cb8:	83 c4 10             	add    esp,0x10
c0012cbb:	83 c4 1c             	add    esp,0x1c
c0012cbe:	5b                   	pop    ebx
c0012cbf:	5e                   	pop    esi
c0012cc0:	5f                   	pop    edi
c0012cc1:	5d                   	pop    ebp
c0012cc2:	c3                   	ret    
c0012cc3:	c7 44 24 30 6d 3b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023b6d
c0012ccb:	83 c4 1c             	add    esp,0x1c
c0012cce:	5b                   	pop    ebx
c0012ccf:	5e                   	pop    esi
c0012cd0:	5f                   	pop    edi
c0012cd1:	5d                   	pop    ebp
c0012cd2:	e9 eb c7 ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c0012cd7:	90                   	nop

c0012cd8 <VAS::freeAllocatedPages(unsigned long)>:
c0012cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ce0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012ce4:	74 09                	je     c0012cef <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012ce6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012cea:	e9 ac fe ff ff       	jmp    c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c0012cef:	c7 44 24 04 c8 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc00235c8
c0012cf7:	e9 52 42 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012cfc <VAS::virtualToPhysical(unsigned long)>:
c0012cfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012d00:	50                   	push   eax
c0012d01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d05:	52                   	push   edx
c0012d06:	e8 71 fe ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0012d0b:	59                   	pop    ecx
c0012d0c:	5a                   	pop    edx
c0012d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d0f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012d14:	c3                   	ret    
c0012d15:	90                   	nop

c0012d16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0012d16:	55                   	push   ebp
c0012d17:	57                   	push   edi
c0012d18:	56                   	push   esi
c0012d19:	53                   	push   ebx
c0012d1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012d1e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012d22:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012d26:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012d2a:	85 db                	test   ebx,ebx
c0012d2c:	7e 24                	jle    c0012d52 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012d2e:	c1 e3 0c             	shl    ebx,0xc
c0012d31:	01 f3                	add    ebx,esi
c0012d33:	56                   	push   esi
c0012d34:	81 c6 00 10 00 00    	add    esi,0x1000
c0012d3a:	55                   	push   ebp
c0012d3b:	e8 3c fe ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0012d40:	5a                   	pop    edx
c0012d41:	59                   	pop    ecx
c0012d42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012d48:	21 f9                	and    ecx,edi
c0012d4a:	09 d1                	or     ecx,edx
c0012d4c:	39 f3                	cmp    ebx,esi
c0012d4e:	89 08                	mov    DWORD PTR [eax],ecx
c0012d50:	75 e1                	jne    c0012d33 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012d52:	5b                   	pop    ebx
c0012d53:	5e                   	pop    esi
c0012d54:	5f                   	pop    edi
c0012d55:	5d                   	pop    ebp
c0012d56:	c3                   	ret    
c0012d57:	90                   	nop

c0012d58 <VAS::VAS()>:
c0012d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012d63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d72:	a3 f0 ce 02 c0       	mov    ds:0xc002cef0,eax
c0012d77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d7b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d83:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d8a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012d91:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c0012d96:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012d9b:	29 c2                	sub    edx,eax
c0012d9d:	89 d0                	mov    eax,edx
c0012d9f:	05 ff 0f 00 00       	add    eax,0xfff
c0012da4:	c1 e8 0c             	shr    eax,0xc
c0012da7:	89 c2                	mov    edx,eax
c0012da9:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012dae:	6a 04                	push   0x4
c0012db0:	6a ff                	push   0xffffffff
c0012db2:	52                   	push   edx
c0012db3:	50                   	push   eax
c0012db4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012db8:	e8 59 ff ff ff       	call   c0012d16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012dbd:	83 c4 14             	add    esp,0x14
c0012dc0:	90                   	nop
c0012dc1:	c3                   	ret    

c0012dc2 <VAS::setToWriteCombining(unsigned long, int)>:
c0012dc2:	a1 84 d7 02 c0       	mov    eax,ds:0xc002d784
c0012dc7:	50                   	push   eax
c0012dc8:	6a ff                	push   0xffffffff
c0012dca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012dce:	52                   	push   edx
c0012dcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012dd3:	51                   	push   ecx
c0012dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012dd8:	50                   	push   eax
c0012dd9:	e8 38 ff ff ff       	call   c0012d16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012dde:	83 c4 14             	add    esp,0x14
c0012de1:	c3                   	ret    

c0012de2 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012de6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012de9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ded:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012df5:	83 f8 01             	cmp    eax,0x1
c0012df8:	19 c0                	sbb    eax,eax
c0012dfa:	83 ca 03             	or     edx,0x3
c0012dfd:	83 e0 fc             	and    eax,0xfffffffc
c0012e00:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012e07:	0f 20 d8             	mov    eax,cr3
c0012e0a:	0f 22 d8             	mov    cr3,eax
c0012e0d:	c3                   	ret    

c0012e0e <VAS::~VAS()>:
c0012e0e:	83 ec 2c             	sub    esp,0x2c
c0012e11:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012e19:	fa                   	cli    
c0012e1a:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0012e1f:	83 c0 01             	add    eax,0x1
c0012e22:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0012e27:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e31:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012e37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012e3b:	6a 01                	push   0x1
c0012e3d:	50                   	push   eax
c0012e3e:	e8 9f ff ff ff       	call   c0012de2 <VAS::mapOtherVASIn(bool, VAS*)>
c0012e43:	83 c4 0c             	add    esp,0xc
c0012e46:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012e4e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012e56:	0f 8f d8 00 00 00    	jg     c0012f34 <VAS::~VAS()+0x126>
c0012e5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012e63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012e67:	c1 e2 02             	shl    edx,0x2
c0012e6a:	01 d0                	add    eax,edx
c0012e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e76:	83 e0 01             	and    eax,0x1
c0012e79:	0f 84 ab 00 00 00    	je     c0012f2a <VAS::~VAS()+0x11c>
c0012e7f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012e87:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012e8f:	7f 74                	jg     c0012f05 <VAS::~VAS()+0xf7>
c0012e91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e95:	c1 e0 0a             	shl    eax,0xa
c0012e98:	89 c2                	mov    edx,eax
c0012e9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e9e:	01 d0                	add    eax,edx
c0012ea0:	c1 e0 0c             	shl    eax,0xc
c0012ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ea7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012eb1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012eb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012ebb:	6a 01                	push   0x1
c0012ebd:	50                   	push   eax
c0012ebe:	e8 8b fc ff ff       	call   c0012b4e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012ec3:	83 c4 0c             	add    esp,0xc
c0012ec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012eca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ece:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ed0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ed8:	25 01 04 00 00       	and    eax,0x401
c0012edd:	3d 01 04 00 00       	cmp    eax,0x401
c0012ee2:	75 1a                	jne    c0012efe <VAS::~VAS()+0xf0>
c0012ee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ee8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012eed:	83 ec 0c             	sub    esp,0xc
c0012ef0:	50                   	push   eax
c0012ef1:	e8 5d c7 ff ff       	call   c000f653 <Phys::freePage(unsigned long)>
c0012ef6:	83 c4 10             	add    esp,0x10
c0012ef9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012efe:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0012f03:	eb 82                	jmp    c0012e87 <VAS::~VAS()+0x79>
c0012f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f09:	25 00 04 00 00       	and    eax,0x400
c0012f0e:	74 1a                	je     c0012f2a <VAS::~VAS()+0x11c>
c0012f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f14:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f19:	83 ec 0c             	sub    esp,0xc
c0012f1c:	50                   	push   eax
c0012f1d:	e8 31 c7 ff ff       	call   c000f653 <Phys::freePage(unsigned long)>
c0012f22:	83 c4 10             	add    esp,0x10
c0012f25:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012f2a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012f2f:	e9 1a ff ff ff       	jmp    c0012e4e <VAS::~VAS()+0x40>
c0012f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012f3b:	83 ec 0c             	sub    esp,0xc
c0012f3e:	50                   	push   eax
c0012f3f:	e8 57 fc ff ff       	call   c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c0012f44:	83 c4 10             	add    esp,0x10
c0012f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f4b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012f4e:	83 ec 0c             	sub    esp,0xc
c0012f51:	50                   	push   eax
c0012f52:	e8 fc c6 ff ff       	call   c000f653 <Phys::freePage(unsigned long)>
c0012f57:	83 c4 10             	add    esp,0x10
c0012f5a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012f5f:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0012f67:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0012f6c:	85 c0                	test   eax,eax
c0012f6e:	75 01                	jne    c0012f71 <VAS::~VAS()+0x163>
c0012f70:	fb                   	sti    
c0012f71:	90                   	nop
c0012f72:	83 c4 2c             	add    esp,0x2c
c0012f75:	c3                   	ret    

c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012f76:	55                   	push   ebp
c0012f77:	57                   	push   edi
c0012f78:	56                   	push   esi
c0012f79:	53                   	push   ebx
c0012f7a:	83 ec 1c             	sub    esp,0x1c
c0012f7d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012f81:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012f89:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012f8f:	77 08                	ja     c0012f99 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0012f91:	0f 20 d8             	mov    eax,cr3
c0012f94:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0012f97:	75 43                	jne    c0012fdc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012f99:	89 d8                	mov    eax,ebx
c0012f9b:	09 f8                	or     eax,edi
c0012f9d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012fa2:	75 53                	jne    c0012ff7 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0012fa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012fa7:	89 de                	mov    esi,ebx
c0012fa9:	c1 ee 16             	shr    esi,0x16
c0012fac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012fb3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012fb7:	74 50                	je     c0013009 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0012fb9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012fbd:	c1 eb 0a             	shr    ebx,0xa
c0012fc0:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012fc6:	c1 e6 0c             	shl    esi,0xc
c0012fc9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012fcf:	09 c7                	or     edi,eax
c0012fd1:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0012fd4:	83 c4 1c             	add    esp,0x1c
c0012fd7:	5b                   	pop    ebx
c0012fd8:	5e                   	pop    esi
c0012fd9:	5f                   	pop    edi
c0012fda:	5d                   	pop    ebp
c0012fdb:	c3                   	ret    
c0012fdc:	83 ec 0c             	sub    esp,0xc
c0012fdf:	68 ec 35 02 c0       	push   0xc00235ec
c0012fe4:	e8 65 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fe9:	89 d8                	mov    eax,ebx
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	09 f8                	or     eax,edi
c0012ff0:	a9 ff 0f 00 00       	test   eax,0xfff
c0012ff5:	74 ad                	je     c0012fa4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0012ff7:	83 ec 0c             	sub    esp,0xc
c0012ffa:	68 54 36 02 c0       	push   0xc0023654
c0012fff:	e8 be c4 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0013004:	83 c4 10             	add    esp,0x10
c0013007:	eb 9b                	jmp    c0012fa4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013009:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001300d:	e8 aa c6 ff ff       	call   c000f6bc <Phys::allocatePage()>
c0013012:	8b 0d f0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cef0
c0013018:	83 ec 0c             	sub    esp,0xc
c001301b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001301f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013023:	6a 01                	push   0x1
c0013025:	e8 73 f8 ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c001302a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013031:	6a 01                	push   0x1
c0013033:	50                   	push   eax
c0013034:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013038:	52                   	push   edx
c0013039:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001303d:	51                   	push   ecx
c001303e:	e8 2d 01 00 00       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013043:	83 c4 1c             	add    esp,0x1c
c0013046:	68 00 10 00 00       	push   0x1000
c001304b:	6a 00                	push   0x0
c001304d:	50                   	push   eax
c001304e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013052:	e8 99 d4 fe ff       	call   c00004f0 <memset>
c0013057:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001305b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001305e:	e8 38 fb ff ff       	call   c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c0013063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013067:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013071:	0d 07 04 00 00       	or     eax,0x407
c0013076:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013079:	e9 3b ff ff ff       	jmp    c0012fb9 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c001307e <VAS::allocatePages(int, int)>:
c001307e:	55                   	push   ebp
c001307f:	57                   	push   edi
c0013080:	56                   	push   esi
c0013081:	53                   	push   ebx
c0013082:	83 ec 1c             	sub    esp,0x1c
c0013085:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013089:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001308d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013091:	75 75                	jne    c0013108 <VAS::allocatePages(int, int)+0x8a>
c0013093:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013096:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001309a:	85 c0                	test   eax,eax
c001309c:	74 49                	je     c00130e7 <VAS::allocatePages(int, int)+0x69>
c001309e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130a2:	89 d5                	mov    ebp,edx
c00130a4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00130a8:	c1 e5 0c             	shl    ebp,0xc
c00130ab:	01 dd                	add    ebp,ebx
c00130ad:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00130b0:	81 cf 00 04 00 00    	or     edi,0x400
c00130b6:	85 d2                	test   edx,edx
c00130b8:	7e 1b                	jle    c00130d5 <VAS::allocatePages(int, int)+0x57>
c00130ba:	e8 fd c5 ff ff       	call   c000f6bc <Phys::allocatePage()>
c00130bf:	57                   	push   edi
c00130c0:	53                   	push   ebx
c00130c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00130c7:	50                   	push   eax
c00130c8:	56                   	push   esi
c00130c9:	e8 a8 fe ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c00130ce:	83 c4 10             	add    esp,0x10
c00130d1:	39 dd                	cmp    ebp,ebx
c00130d3:	75 e5                	jne    c00130ba <VAS::allocatePages(int, int)+0x3c>
c00130d5:	0f 20 d8             	mov    eax,cr3
c00130d8:	0f 22 d8             	mov    cr3,eax
c00130db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130df:	83 c4 1c             	add    esp,0x1c
c00130e2:	5b                   	pop    ebx
c00130e3:	5e                   	pop    esi
c00130e4:	5f                   	pop    edi
c00130e5:	5d                   	pop    ebp
c00130e6:	c3                   	ret    
c00130e7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00130eb:	83 ec 0c             	sub    esp,0xc
c00130ee:	68 78 36 02 c0       	push   0xc0023678
c00130f3:	e8 ca c3 ff ff       	call   c000f4c2 <KePanic(char const*)>
c00130f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00130fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130ff:	83 c4 10             	add    esp,0x10
c0013102:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013106:	eb 96                	jmp    c001309e <VAS::allocatePages(int, int)+0x20>
c0013108:	83 ec 0c             	sub    esp,0xc
c001310b:	52                   	push   edx
c001310c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013110:	e8 88 f7 ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c0013115:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013119:	83 c4 10             	add    esp,0x10
c001311c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013121:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013125:	77 38                	ja     c001315f <VAS::allocatePages(int, int)+0xe1>
c0013127:	85 d2                	test   edx,edx
c0013129:	7e aa                	jle    c00130d5 <VAS::allocatePages(int, int)+0x57>
c001312b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001312f:	c1 e2 0c             	shl    edx,0xc
c0013132:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013136:	81 cf 00 04 00 00    	or     edi,0x400
c001313c:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c001313f:	e8 78 c5 ff ff       	call   c000f6bc <Phys::allocatePage()>
c0013144:	57                   	push   edi
c0013145:	53                   	push   ebx
c0013146:	81 c3 00 10 00 00    	add    ebx,0x1000
c001314c:	50                   	push   eax
c001314d:	56                   	push   esi
c001314e:	e8 23 fe ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	39 dd                	cmp    ebp,ebx
c0013158:	75 e5                	jne    c001313f <VAS::allocatePages(int, int)+0xc1>
c001315a:	e9 76 ff ff ff       	jmp    c00130d5 <VAS::allocatePages(int, int)+0x57>
c001315f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013163:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0013168:	09 c1                	or     ecx,eax
c001316a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001316e:	eb b7                	jmp    c0013127 <VAS::allocatePages(int, int)+0xa9>

c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013170:	55                   	push   ebp
c0013171:	57                   	push   edi
c0013172:	56                   	push   esi
c0013173:	53                   	push   ebx
c0013174:	83 ec 1c             	sub    esp,0x1c
c0013177:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001317b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001317f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013183:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013187:	85 db                	test   ebx,ebx
c0013189:	7e 2c                	jle    c00131b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c001318b:	c1 e3 0c             	shl    ebx,0xc
c001318e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013191:	89 f3                	mov    ebx,esi
c0013193:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013197:	55                   	push   ebp
c0013198:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001319c:	29 f2                	sub    edx,esi
c001319e:	01 da                	add    edx,ebx
c00131a0:	52                   	push   edx
c00131a1:	53                   	push   ebx
c00131a2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00131a8:	57                   	push   edi
c00131a9:	e8 c8 fd ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c00131ae:	83 c4 10             	add    esp,0x10
c00131b1:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c00131b5:	75 e0                	jne    c0013197 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c00131b7:	0f 20 d8             	mov    eax,cr3
c00131ba:	0f 22 d8             	mov    cr3,eax
c00131bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00131c1:	83 c4 1c             	add    esp,0x1c
c00131c4:	5b                   	pop    ebx
c00131c5:	5e                   	pop    esi
c00131c6:	5f                   	pop    edi
c00131c7:	5d                   	pop    ebp
c00131c8:	c3                   	ret    
c00131c9:	90                   	nop

c00131ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00131ca:	55                   	push   ebp
c00131cb:	57                   	push   edi
c00131cc:	56                   	push   esi
c00131cd:	53                   	push   ebx
c00131ce:	83 ec 1c             	sub    esp,0x1c
c00131d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00131d9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00131dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00131e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131e5:	09 d8                	or     eax,ebx
c00131e7:	a9 ff 0f 00 00       	test   eax,0xfff
c00131ec:	75 4b                	jne    c0013239 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00131ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00131f1:	89 de                	mov    esi,ebx
c00131f3:	c1 ee 16             	shr    esi,0x16
c00131f6:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00131fd:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013201:	74 48                	je     c001324b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013203:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013208:	c1 eb 0a             	shr    ebx,0xa
c001320b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001320f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013213:	83 ff 01             	cmp    edi,0x1
c0013216:	19 c0                	sbb    eax,eax
c0013218:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001321e:	c1 e6 0c             	shl    esi,0xc
c0013221:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013226:	01 f3                	add    ebx,esi
c0013228:	09 ca                	or     edx,ecx
c001322a:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013231:	83 c4 1c             	add    esp,0x1c
c0013234:	5b                   	pop    ebx
c0013235:	5e                   	pop    esi
c0013236:	5f                   	pop    edi
c0013237:	5d                   	pop    ebp
c0013238:	c3                   	ret    
c0013239:	83 ec 0c             	sub    esp,0xc
c001323c:	68 a4 36 02 c0       	push   0xc00236a4
c0013241:	e8 7c c2 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	eb a3                	jmp    c00131ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c001324b:	e8 6c c4 ff ff       	call   c000f6bc <Phys::allocatePage()>
c0013250:	8b 0d f0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cef0
c0013256:	83 ec 0c             	sub    esp,0xc
c0013259:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001325d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013261:	6a 01                	push   0x1
c0013263:	e8 35 f6 ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c0013268:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001326f:	6a 01                	push   0x1
c0013271:	50                   	push   eax
c0013272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013276:	50                   	push   eax
c0013277:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001327b:	51                   	push   ecx
c001327c:	e8 ef fe ff ff       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013281:	83 c4 1c             	add    esp,0x1c
c0013284:	68 00 10 00 00       	push   0x1000
c0013289:	6a 00                	push   0x0
c001328b:	50                   	push   eax
c001328c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013290:	e8 5b d2 fe ff       	call   c00004f0 <memset>
c0013295:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013299:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001329c:	e8 fa f8 ff ff       	call   c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c00132a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a5:	83 c4 10             	add    esp,0x10
c00132a8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00132ab:	81 ca 07 04 00 00    	or     edx,0x407
c00132b1:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c00132b4:	e9 4a ff ff ff       	jmp    c0013203 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c00132b9:	90                   	nop

c00132ba <VAS::VAS(bool)>:
c00132ba:	53                   	push   ebx
c00132bb:	83 ec 28             	sub    esp,0x28
c00132be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00132c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00132d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00132dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132e0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00132e4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00132e7:	e8 d0 c3 ff ff       	call   c000f6bc <Phys::allocatePage()>
c00132ec:	89 c2                	mov    edx,eax
c00132ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132f2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00132f5:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c00132fb:	83 ec 0c             	sub    esp,0xc
c00132fe:	6a 01                	push   0x1
c0013300:	e8 98 f5 ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c0013305:	83 c4 10             	add    esp,0x10
c0013308:	89 c2                	mov    edx,eax
c001330a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001330e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013311:	83 ec 0c             	sub    esp,0xc
c0013314:	6a 03                	push   0x3
c0013316:	6a 01                	push   0x1
c0013318:	52                   	push   edx
c0013319:	50                   	push   eax
c001331a:	53                   	push   ebx
c001331b:	e8 50 fe ff ff       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013320:	83 c4 20             	add    esp,0x20
c0013323:	89 c2                	mov    edx,eax
c0013325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013329:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001332c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013334:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001333c:	7f 1d                	jg     c001335b <VAS::VAS(bool)+0xa1>
c001333e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013342:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013345:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013349:	c1 e2 02             	shl    edx,0x2
c001334c:	01 d0                	add    eax,edx
c001334e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013354:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013359:	eb d9                	jmp    c0013334 <VAS::VAS(bool)+0x7a>
c001335b:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013363:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001336b:	7f 59                	jg     c00133c6 <VAS::VAS(bool)+0x10c>
c001336d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013371:	2d 00 02 00 00       	sub    eax,0x200
c0013376:	c1 e0 0c             	shl    eax,0xc
c0013379:	89 c2                	mov    edx,eax
c001337b:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0013380:	89 d1                	mov    ecx,edx
c0013382:	09 c1                	or     ecx,eax
c0013384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013388:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001338b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001338f:	c1 e2 02             	shl    edx,0x2
c0013392:	01 d0                	add    eax,edx
c0013394:	83 c9 05             	or     ecx,0x5
c0013397:	89 ca                	mov    edx,ecx
c0013399:	89 10                	mov    DWORD PTR [eax],edx
c001339b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001339f:	2d 40 03 00 00       	sub    eax,0x340
c00133a4:	83 f8 7f             	cmp    eax,0x7f
c00133a7:	77 16                	ja     c00133bf <VAS::VAS(bool)+0x105>
c00133a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00133b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133b4:	c1 e2 02             	shl    edx,0x2
c00133b7:	01 d0                	add    eax,edx
c00133b9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00133bf:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00133c4:	eb 9d                	jmp    c0013363 <VAS::VAS(bool)+0xa9>
c00133c6:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c00133cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00133d3:	05 20 0c 00 00       	add    eax,0xc20
c00133d8:	81 ca 03 40 00 00    	or     edx,0x4003
c00133de:	89 10                	mov    DWORD PTR [eax],edx
c00133e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133e4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00133e7:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00133ec:	09 c2                	or     edx,eax
c00133ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00133f5:	05 fc 0f 00 00       	add    eax,0xffc
c00133fa:	83 ca 03             	or     edx,0x3
c00133fd:	89 10                	mov    DWORD PTR [eax],edx
c00133ff:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0013404:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001340a:	83 ec 0c             	sub    esp,0xc
c001340d:	50                   	push   eax
c001340e:	e8 dd 5e ff ff       	call   c00092f0 <Device::getName()>
c0013413:	83 c4 10             	add    esp,0x10
c0013416:	83 ec 08             	sub    esp,0x8
c0013419:	68 87 3b 02 c0       	push   0xc0023b87
c001341e:	50                   	push   eax
c001341f:	e8 5c d3 fe ff       	call   c0000780 <strcmp>
c0013424:	83 c4 10             	add    esp,0x10
c0013427:	85 c0                	test   eax,eax
c0013429:	0f 94 c0             	sete   al
c001342c:	0f b6 c0             	movzx  eax,al
c001342f:	85 c0                	test   eax,eax
c0013431:	74 68                	je     c001349b <VAS::VAS(bool)+0x1e1>
c0013433:	fa                   	cli    
c0013434:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0013439:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001343f:	05 68 09 00 00       	add    eax,0x968
c0013444:	83 ec 0c             	sub    esp,0xc
c0013447:	50                   	push   eax
c0013448:	e8 0d b1 ff ff       	call   c000e55a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013455:	89 c3                	mov    ebx,eax
c0013457:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001345c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013462:	05 68 09 00 00       	add    eax,0x968
c0013467:	83 ec 0c             	sub    esp,0xc
c001346a:	50                   	push   eax
c001346b:	e8 ea b0 ff ff       	call   c000e55a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013470:	83 c4 10             	add    esp,0x10
c0013473:	83 ec 08             	sub    esp,0x8
c0013476:	50                   	push   eax
c0013477:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001347b:	e8 fc f6 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0013480:	83 c4 10             	add    esp,0x10
c0013483:	8b 00                	mov    eax,DWORD PTR [eax]
c0013485:	25 00 f0 ff ff       	and    eax,0xfffff000
c001348a:	6a 11                	push   0x11
c001348c:	53                   	push   ebx
c001348d:	50                   	push   eax
c001348e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013492:	e8 df fa ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013497:	83 c4 10             	add    esp,0x10
c001349a:	fb                   	sti    
c001349b:	90                   	nop
c001349c:	83 c4 28             	add    esp,0x28
c001349f:	5b                   	pop    ebx
c00134a0:	c3                   	ret    
c00134a1:	90                   	nop

c00134a2 <VAS::evict(unsigned long)>:
c00134a2:	55                   	push   ebp
c00134a3:	57                   	push   edi
c00134a4:	56                   	push   esi
c00134a5:	53                   	push   ebx
c00134a6:	83 ec 24             	sub    esp,0x24
c00134a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00134ad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00134b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134b5:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00134ba:	50                   	push   eax
c00134bb:	68 95 3b 02 c0       	push   0xc0023b95
c00134c0:	e8 89 3a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00134c5:	e8 28 f5 ff ff       	call   c00129f2 <Virt::allocateSwapfilePage()>
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	89 c7                	mov    edi,eax
c00134cf:	a1 4c 58 02 c0       	mov    eax,ds:0xc002584c
c00134d4:	85 c0                	test   eax,eax
c00134d6:	7e 40                	jle    c0013518 <VAS::evict(unsigned long)+0x76>
c00134d8:	89 ee                	mov    esi,ebp
c00134da:	31 db                	xor    ebx,ebx
c00134dc:	83 ec 0c             	sub    esp,0xc
c00134df:	57                   	push   edi
c00134e0:	e8 f7 f4 ff ff       	call   c00129dc <Virt::swapIDToSector(unsigned long)>
c00134e5:	31 d2                	xor    edx,edx
c00134e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00134ea:	81 c6 00 02 00 00    	add    esi,0x200
c00134f0:	6a 01                	push   0x1
c00134f2:	52                   	push   edx
c00134f3:	01 d8                	add    eax,ebx
c00134f5:	83 c3 01             	add    ebx,0x1
c00134f8:	50                   	push   eax
c00134f9:	0f be 05 58 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025858
c0013500:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0013507:	50                   	push   eax
c0013508:	e8 47 6c ff ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c001350d:	83 c4 20             	add    esp,0x20
c0013510:	39 1d 4c 58 02 c0    	cmp    DWORD PTR ds:0xc002584c,ebx
c0013516:	7f c4                	jg     c00134dc <VAS::evict(unsigned long)+0x3a>
c0013518:	c1 e7 0c             	shl    edi,0xc
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	55                   	push   ebp
c001351f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013523:	50                   	push   eax
c0013524:	e8 53 f6 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0013529:	8b 10                	mov    edx,DWORD PTR [eax]
c001352b:	89 d3                	mov    ebx,edx
c001352d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013533:	09 d7                	or     edi,edx
c0013535:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001353b:	89 38                	mov    DWORD PTR [eax],edi
c001353d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013540:	8b 15 e8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cee8
c0013546:	83 c2 01             	add    edx,0x1
c0013549:	89 15 e8 ce 02 c0    	mov    DWORD PTR ds:0xc002cee8,edx
c001354f:	e8 ff c0 ff ff       	call   c000f653 <Phys::freePage(unsigned long)>
c0013554:	0f 20 d8             	mov    eax,cr3
c0013557:	0f 22 d8             	mov    cr3,eax
c001355a:	8b 0d e8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cee8
c0013560:	51                   	push   ecx
c0013561:	55                   	push   ebp
c0013562:	53                   	push   ebx
c0013563:	68 c8 36 02 c0       	push   0xc00236c8
c0013568:	e8 e1 39 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001356d:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0013572:	83 c4 18             	add    esp,0x18
c0013575:	50                   	push   eax
c0013576:	68 aa 3b 02 c0       	push   0xc0023baa
c001357b:	8d 50 01             	lea    edx,[eax+0x1]
c001357e:	89 15 e4 ce 02 c0    	mov    DWORD PTR ds:0xc002cee4,edx
c0013584:	e8 c5 39 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013589:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001358e:	c7 44 24 40 bc 3b 02 c0 	mov    DWORD PTR [esp+0x40],0xc0023bbc
c0013596:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001359a:	83 c4 2c             	add    esp,0x2c
c001359d:	5b                   	pop    ebx
c001359e:	5e                   	pop    esi
c001359f:	5f                   	pop    edi
c00135a0:	5d                   	pop    ebp
c00135a1:	e9 a8 39 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00135a6 <VAS::canLockPage(unsigned long)>:
c00135a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135aa:	50                   	push   eax
c00135ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135af:	52                   	push   edx
c00135b0:	e8 c7 f5 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c00135b5:	59                   	pop    ecx
c00135b6:	5a                   	pop    edx
c00135b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00135b9:	c1 e8 0b             	shr    eax,0xb
c00135bc:	83 e0 01             	and    eax,0x1
c00135bf:	c3                   	ret    

c00135c0 <VAS::unlockPage(unsigned long)>:
c00135c0:	83 ec 0c             	sub    esp,0xc
c00135c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135c7:	50                   	push   eax
c00135c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00135cc:	52                   	push   edx
c00135cd:	e8 aa f5 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c00135d2:	59                   	pop    ecx
c00135d3:	5a                   	pop    edx
c00135d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00135d6:	f6 c6 08             	test   dh,0x8
c00135d9:	75 09                	jne    c00135e4 <VAS::unlockPage(unsigned long)+0x24>
c00135db:	80 ce 08             	or     dh,0x8
c00135de:	89 10                	mov    DWORD PTR [eax],edx
c00135e0:	83 c4 0c             	add    esp,0xc
c00135e3:	c3                   	ret    
c00135e4:	c7 44 24 10 fc 36 02 c0 	mov    DWORD PTR [esp+0x10],0xc00236fc
c00135ec:	83 c4 0c             	add    esp,0xc
c00135ef:	e9 ce be ff ff       	jmp    c000f4c2 <KePanic(char const*)>

c00135f4 <VAS::canLockPages(unsigned long, int)>:
c00135f4:	55                   	push   ebp
c00135f5:	57                   	push   edi
c00135f6:	56                   	push   esi
c00135f7:	53                   	push   ebx
c00135f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135fc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013600:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013604:	85 ff                	test   edi,edi
c0013606:	7e 23                	jle    c001362b <VAS::canLockPages(unsigned long, int)+0x37>
c0013608:	31 f6                	xor    esi,esi
c001360a:	eb 0d                	jmp    c0013619 <VAS::canLockPages(unsigned long, int)+0x25>
c001360c:	83 c6 01             	add    esi,0x1
c001360f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013615:	39 f7                	cmp    edi,esi
c0013617:	74 0d                	je     c0013626 <VAS::canLockPages(unsigned long, int)+0x32>
c0013619:	53                   	push   ebx
c001361a:	55                   	push   ebp
c001361b:	e8 86 ff ff ff       	call   c00135a6 <VAS::canLockPage(unsigned long)>
c0013620:	5a                   	pop    edx
c0013621:	59                   	pop    ecx
c0013622:	84 c0                	test   al,al
c0013624:	75 e6                	jne    c001360c <VAS::canLockPages(unsigned long, int)+0x18>
c0013626:	5b                   	pop    ebx
c0013627:	5e                   	pop    esi
c0013628:	5f                   	pop    edi
c0013629:	5d                   	pop    ebp
c001362a:	c3                   	ret    
c001362b:	b0 01                	mov    al,0x1
c001362d:	eb f7                	jmp    c0013626 <VAS::canLockPages(unsigned long, int)+0x32>
c001362f:	90                   	nop

c0013630 <VAS::unlockPages(unsigned long, int)>:
c0013630:	55                   	push   ebp
c0013631:	57                   	push   edi
c0013632:	56                   	push   esi
c0013633:	53                   	push   ebx
c0013634:	83 ec 0c             	sub    esp,0xc
c0013637:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001363b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001363f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013643:	85 ff                	test   edi,edi
c0013645:	7e 1c                	jle    c0013663 <VAS::unlockPages(unsigned long, int)+0x33>
c0013647:	31 f6                	xor    esi,esi
c0013649:	83 ec 08             	sub    esp,0x8
c001364c:	83 c6 01             	add    esi,0x1
c001364f:	53                   	push   ebx
c0013650:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013656:	55                   	push   ebp
c0013657:	e8 64 ff ff ff       	call   c00135c0 <VAS::unlockPage(unsigned long)>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	39 f7                	cmp    edi,esi
c0013661:	75 e6                	jne    c0013649 <VAS::unlockPages(unsigned long, int)+0x19>
c0013663:	83 c4 0c             	add    esp,0xc
c0013666:	5b                   	pop    ebx
c0013667:	5e                   	pop    esi
c0013668:	5f                   	pop    edi
c0013669:	5d                   	pop    ebp
c001366a:	c3                   	ret    
c001366b:	90                   	nop

c001366c <VAS::tryLoadBackOffDisk(unsigned long)>:
c001366c:	55                   	push   ebp
c001366d:	57                   	push   edi
c001366e:	56                   	push   esi
c001366f:	53                   	push   ebx
c0013670:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0013676:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c001367d:	89 f3                	mov    ebx,esi
c001367f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013685:	53                   	push   ebx
c0013686:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c001368d:	50                   	push   eax
c001368e:	e8 e9 f4 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0013693:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0013699:	5a                   	pop    edx
c001369a:	59                   	pop    ecx
c001369b:	89 c5                	mov    ebp,eax
c001369d:	0f 87 cb 00 00 00    	ja     c001376e <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c00136a3:	83 ec 08             	sub    esp,0x8
c00136a6:	56                   	push   esi
c00136a7:	68 2c 37 02 c0       	push   0xc002372c
c00136ac:	e8 9d 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00136b1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00136b6:	5e                   	pop    esi
c00136b7:	5f                   	pop    edi
c00136b8:	50                   	push   eax
c00136b9:	68 5c 37 02 c0       	push   0xc002375c
c00136be:	e8 8b 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00136c3:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c00136c9:	58                   	pop    eax
c00136ca:	5a                   	pop    edx
c00136cb:	51                   	push   ecx
c00136cc:	68 80 37 02 c0       	push   0xc0023780
c00136d1:	e8 78 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	85 db                	test   ebx,ebx
c00136db:	74 5b                	je     c0013738 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00136dd:	85 ed                	test   ebp,ebp
c00136df:	74 21                	je     c0013702 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c00136e1:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00136e4:	f7 c6 00 02 00 00    	test   esi,0x200
c00136ea:	0f 85 c5 00 00 00    	jne    c00137b5 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00136f0:	89 f0                	mov    eax,esi
c00136f2:	25 01 04 00 00       	and    eax,0x401
c00136f7:	3d 00 04 00 00       	cmp    eax,0x400
c00136fc:	0f 84 39 01 00 00    	je     c001383b <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0013702:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0013707:	83 ec 08             	sub    esp,0x8
c001370a:	50                   	push   eax
c001370b:	68 74 39 02 c0       	push   0xc0023974
c0013710:	e8 39 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013715:	8b 1d d0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6d0
c001371b:	5a                   	pop    edx
c001371c:	59                   	pop    ecx
c001371d:	53                   	push   ebx
c001371e:	68 98 39 02 c0       	push   0xc0023998
c0013723:	e8 26 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	31 c0                	xor    eax,eax
c001372d:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013733:	5b                   	pop    ebx
c0013734:	5e                   	pop    esi
c0013735:	5f                   	pop    edi
c0013736:	5d                   	pop    ebp
c0013737:	c3                   	ret    
c0013738:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c001373d:	83 ec 08             	sub    esp,0x8
c0013740:	50                   	push   eax
c0013741:	68 a4 37 02 c0       	push   0xc00237a4
c0013746:	e8 03 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001374b:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c0013751:	58                   	pop    eax
c0013752:	5a                   	pop    edx
c0013753:	51                   	push   ecx
c0013754:	68 c8 37 02 c0       	push   0xc00237c8
c0013759:	e8 f0 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001375e:	83 c4 10             	add    esp,0x10
c0013761:	31 c0                	xor    eax,eax
c0013763:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013769:	5b                   	pop    ebx
c001376a:	5e                   	pop    esi
c001376b:	5f                   	pop    edi
c001376c:	5d                   	pop    ebp
c001376d:	c3                   	ret    
c001376e:	83 ec 0c             	sub    esp,0xc
c0013771:	68 d1 3b 02 c0       	push   0xc0023bd1
c0013776:	e8 47 bd ff ff       	call   c000f4c2 <KePanic(char const*)>
c001377b:	5f                   	pop    edi
c001377c:	58                   	pop    eax
c001377d:	56                   	push   esi
c001377e:	68 2c 37 02 c0       	push   0xc002372c
c0013783:	e8 c6 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013788:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c001378e:	58                   	pop    eax
c001378f:	5a                   	pop    edx
c0013790:	51                   	push   ecx
c0013791:	68 5c 37 02 c0       	push   0xc002375c
c0013796:	e8 b3 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001379b:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00137a0:	5e                   	pop    esi
c00137a1:	5f                   	pop    edi
c00137a2:	50                   	push   eax
c00137a3:	68 80 37 02 c0       	push   0xc0023780
c00137a8:	e8 a1 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00137ad:	83 c4 10             	add    esp,0x10
c00137b0:	e9 28 ff ff ff       	jmp    c00136dd <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00137b5:	83 ec 0c             	sub    esp,0xc
c00137b8:	68 ec 37 02 c0       	push   0xc00237ec
c00137bd:	e8 8c 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00137c2:	e8 f5 be ff ff       	call   c000f6bc <Phys::allocatePage()>
c00137c7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00137ca:	83 ca 01             	or     edx,0x1
c00137cd:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00137d0:	0f 20 da             	mov    edx,cr3
c00137d3:	0f 22 da             	mov    cr3,edx
c00137d6:	ba 00 10 00 00       	mov    edx,0x1000
c00137db:	89 de                	mov    esi,ebx
c00137dd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00137e1:	89 d1                	mov    ecx,edx
c00137e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137e5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00137e8:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00137ee:	09 c8                	or     eax,ecx
c00137f0:	83 c8 02             	or     eax,0x2
c00137f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00137f6:	0f 20 d8             	mov    eax,cr3
c00137f9:	0f 22 d8             	mov    cr3,eax
c00137fc:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013800:	89 df                	mov    edi,ebx
c0013802:	89 d1                	mov    ecx,edx
c0013804:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013806:	59                   	pop    ecx
c0013807:	8b 35 ac d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6ac
c001380d:	5b                   	pop    ebx
c001380e:	56                   	push   esi
c001380f:	68 0c 38 02 c0       	push   0xc002380c
c0013814:	e8 35 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013819:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001381e:	5f                   	pop    edi
c001381f:	5d                   	pop    ebp
c0013820:	50                   	push   eax
c0013821:	68 30 38 02 c0       	push   0xc0023830
c0013826:	e8 23 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001382b:	83 c4 10             	add    esp,0x10
c001382e:	b0 01                	mov    al,0x1
c0013830:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013836:	5b                   	pop    ebx
c0013837:	5e                   	pop    esi
c0013838:	5f                   	pop    edi
c0013839:	5d                   	pop    ebp
c001383a:	c3                   	ret    
c001383b:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013840:	c1 ee 0c             	shr    esi,0xc
c0013843:	83 ec 08             	sub    esp,0x8
c0013846:	50                   	push   eax
c0013847:	68 54 38 02 c0       	push   0xc0023854
c001384c:	e8 fd 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013851:	e8 66 be ff ff       	call   c000f6bc <Phys::allocatePage()>
c0013856:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c001385c:	89 c7                	mov    edi,eax
c001385e:	58                   	pop    eax
c001385f:	5a                   	pop    edx
c0013860:	51                   	push   ecx
c0013861:	68 78 38 02 c0       	push   0xc0023878
c0013866:	e8 e3 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001386b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001386e:	83 c4 10             	add    esp,0x10
c0013871:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0013877:	09 fa                	or     edx,edi
c0013879:	31 ff                	xor    edi,edi
c001387b:	81 ca 01 08 00 00    	or     edx,0x801
c0013881:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013884:	89 dd                	mov    ebp,ebx
c0013886:	a1 4c 58 02 c0       	mov    eax,ds:0xc002584c
c001388b:	85 c0                	test   eax,eax
c001388d:	7e 61                	jle    c00138f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c001388f:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013894:	83 ec 08             	sub    esp,0x8
c0013897:	50                   	push   eax
c0013898:	68 2c 39 02 c0       	push   0xc002392c
c001389d:	e8 ac 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00138a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00138a5:	e8 32 f1 ff ff       	call   c00129dc <Virt::swapIDToSector(unsigned long)>
c00138aa:	31 d2                	xor    edx,edx
c00138ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00138af:	81 c5 00 02 00 00    	add    ebp,0x200
c00138b5:	6a 01                	push   0x1
c00138b7:	52                   	push   edx
c00138b8:	01 f8                	add    eax,edi
c00138ba:	83 c7 01             	add    edi,0x1
c00138bd:	50                   	push   eax
c00138be:	0f be 05 58 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025858
c00138c5:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c00138cc:	50                   	push   eax
c00138cd:	e8 16 68 ff ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c00138d2:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00138d7:	83 c4 18             	add    esp,0x18
c00138da:	50                   	push   eax
c00138db:	68 50 39 02 c0       	push   0xc0023950
c00138e0:	e8 69 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	39 3d 4c 58 02 c0    	cmp    DWORD PTR ds:0xc002584c,edi
c00138ee:	7f 9f                	jg     c001388f <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c00138f0:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00138f5:	83 ec 08             	sub    esp,0x8
c00138f8:	50                   	push   eax
c00138f9:	68 9c 38 02 c0       	push   0xc002389c
c00138fe:	e8 4b 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013903:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0013908:	83 c4 0c             	add    esp,0xc
c001390b:	83 e8 01             	sub    eax,0x1
c001390e:	50                   	push   eax
c001390f:	53                   	push   ebx
c0013910:	68 e3 3b 02 c0       	push   0xc0023be3
c0013915:	a3 e8 ce 02 c0       	mov    ds:0xc002cee8,eax
c001391a:	e8 2f 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001391f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013922:	e8 92 f0 ff ff       	call   c00129b9 <Virt::freeSwapfilePage(unsigned long)>
c0013927:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c001392d:	58                   	pop    eax
c001392e:	5a                   	pop    edx
c001392f:	51                   	push   ecx
c0013930:	68 c0 38 02 c0       	push   0xc00238c0
c0013935:	e8 14 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001393a:	0f 20 d8             	mov    eax,cr3
c001393d:	0f 22 d8             	mov    cr3,eax
c0013940:	c7 04 24 f8 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bf8
c0013947:	e8 02 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001394c:	8b 3d ac d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6ac
c0013952:	5b                   	pop    ebx
c0013953:	5e                   	pop    esi
c0013954:	57                   	push   edi
c0013955:	68 e4 38 02 c0       	push   0xc00238e4
c001395a:	e8 ef 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001395f:	5d                   	pop    ebp
c0013960:	58                   	pop    eax
c0013961:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013966:	50                   	push   eax
c0013967:	68 08 39 02 c0       	push   0xc0023908
c001396c:	e8 dd 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013971:	83 c4 10             	add    esp,0x10
c0013974:	b0 01                	mov    al,0x1
c0013976:	e9 b2 fd ff ff       	jmp    c001372d <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c001397b:	90                   	nop

c001397c <VAS::lockPage(unsigned long)>:
c001397c:	56                   	push   esi
c001397d:	53                   	push   ebx
c001397e:	83 ec 04             	sub    esp,0x4
c0013981:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013985:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013989:	50                   	push   eax
c001398a:	56                   	push   esi
c001398b:	e8 ec f1 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0013990:	5a                   	pop    edx
c0013991:	59                   	pop    ecx
c0013992:	89 c3                	mov    ebx,eax
c0013994:	8b 00                	mov    eax,DWORD PTR [eax]
c0013996:	a8 01                	test   al,0x1
c0013998:	74 10                	je     c00139aa <VAS::lockPage(unsigned long)+0x2e>
c001399a:	f6 c4 08             	test   ah,0x8
c001399d:	74 28                	je     c00139c7 <VAS::lockPage(unsigned long)+0x4b>
c001399f:	80 e4 f7             	and    ah,0xf7
c00139a2:	89 03                	mov    DWORD PTR [ebx],eax
c00139a4:	83 c4 04             	add    esp,0x4
c00139a7:	5b                   	pop    ebx
c00139a8:	5e                   	pop    esi
c00139a9:	c3                   	ret    
c00139aa:	83 ec 08             	sub    esp,0x8
c00139ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139b2:	50                   	push   eax
c00139b3:	56                   	push   esi
c00139b4:	e8 b3 fc ff ff       	call   c001366c <VAS::tryLoadBackOffDisk(unsigned long)>
c00139b9:	83 c4 10             	add    esp,0x10
c00139bc:	84 c0                	test   al,al
c00139be:	74 19                	je     c00139d9 <VAS::lockPage(unsigned long)+0x5d>
c00139c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139c2:	f6 c4 08             	test   ah,0x8
c00139c5:	75 d8                	jne    c001399f <VAS::lockPage(unsigned long)+0x23>
c00139c7:	c7 44 24 10 fc 36 02 c0 	mov    DWORD PTR [esp+0x10],0xc00236fc
c00139cf:	83 c4 04             	add    esp,0x4
c00139d2:	5b                   	pop    ebx
c00139d3:	5e                   	pop    esi
c00139d4:	e9 e9 ba ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c00139d9:	83 ec 0c             	sub    esp,0xc
c00139dc:	68 bc 39 02 c0       	push   0xc00239bc
c00139e1:	e8 dc ba ff ff       	call   c000f4c2 <KePanic(char const*)>
c00139e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	eb ad                	jmp    c001399a <VAS::lockPage(unsigned long)+0x1e>
c00139ed:	90                   	nop

c00139ee <VAS::lockPages(unsigned long, int)>:
c00139ee:	55                   	push   ebp
c00139ef:	57                   	push   edi
c00139f0:	56                   	push   esi
c00139f1:	53                   	push   ebx
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00139f9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00139fd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013a01:	85 ff                	test   edi,edi
c0013a03:	7e 1c                	jle    c0013a21 <VAS::lockPages(unsigned long, int)+0x33>
c0013a05:	31 f6                	xor    esi,esi
c0013a07:	83 ec 08             	sub    esp,0x8
c0013a0a:	83 c6 01             	add    esi,0x1
c0013a0d:	53                   	push   ebx
c0013a0e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a14:	55                   	push   ebp
c0013a15:	e8 62 ff ff ff       	call   c001397c <VAS::lockPage(unsigned long)>
c0013a1a:	83 c4 10             	add    esp,0x10
c0013a1d:	39 f7                	cmp    edi,esi
c0013a1f:	75 e6                	jne    c0013a07 <VAS::lockPages(unsigned long, int)+0x19>
c0013a21:	83 c4 0c             	add    esp,0xc
c0013a24:	5b                   	pop    ebx
c0013a25:	5e                   	pop    esi
c0013a26:	5f                   	pop    edi
c0013a27:	5d                   	pop    ebp
c0013a28:	c3                   	ret    
c0013a29:	90                   	nop

c0013a2a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0013a2a:	55                   	push   ebp
c0013a2b:	57                   	push   edi
c0013a2c:	56                   	push   esi
c0013a2d:	53                   	push   ebx
c0013a2e:	83 ec 28             	sub    esp,0x28
c0013a31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013a35:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013a39:	50                   	push   eax
c0013a3a:	e8 5e ee ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c0013a3f:	83 c4 0c             	add    esp,0xc
c0013a42:	6a 07                	push   0x7
c0013a44:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013a48:	52                   	push   edx
c0013a49:	89 c5                	mov    ebp,eax
c0013a4b:	53                   	push   ebx
c0013a4c:	e8 2d f6 ff ff       	call   c001307e <VAS::allocatePages(int, int)>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013a58:	89 c7                	mov    edi,eax
c0013a5a:	85 c9                	test   ecx,ecx
c0013a5c:	74 2f                	je     c0013a8d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013a5e:	31 f6                	xor    esi,esi
c0013a60:	e8 57 bc ff ff       	call   c000f6bc <Phys::allocatePage()>
c0013a65:	83 c6 01             	add    esi,0x1
c0013a68:	6a 03                	push   0x3
c0013a6a:	55                   	push   ebp
c0013a6b:	50                   	push   eax
c0013a6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a70:	53                   	push   ebx
c0013a71:	e8 00 f5 ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a76:	6a 07                	push   0x7
c0013a78:	57                   	push   edi
c0013a79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a7d:	50                   	push   eax
c0013a7e:	53                   	push   ebx
c0013a7f:	e8 f2 f4 ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a84:	83 c4 20             	add    esp,0x20
c0013a87:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0013a8b:	75 d3                	jne    c0013a60 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013a8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013a91:	89 28                	mov    DWORD PTR [eax],ebp
c0013a93:	83 c4 1c             	add    esp,0x1c
c0013a96:	89 f8                	mov    eax,edi
c0013a98:	5b                   	pop    ebx
c0013a99:	5e                   	pop    esi
c0013a9a:	5f                   	pop    edi
c0013a9b:	5d                   	pop    ebp
c0013a9c:	c3                   	ret    
c0013a9d:	90                   	nop

c0013a9e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013a9e:	53                   	push   ebx
c0013a9f:	83 ec 14             	sub    esp,0x14
c0013aa2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013aa6:	68 ec 39 02 c0       	push   0xc00239ec
c0013aab:	e8 9e 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ab0:	c7 04 24 4c 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a4c
c0013ab7:	e8 92 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013abc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ac0:	83 c4 18             	add    esp,0x18
c0013ac3:	5b                   	pop    ebx
c0013ac4:	e9 d2 f0 ff ff       	jmp    c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c0013ac9:	90                   	nop

c0013aca <VAS::scanForEviction()>:
c0013aca:	57                   	push   edi
c0013acb:	56                   	push   esi
c0013acc:	31 f6                	xor    esi,esi
c0013ace:	53                   	push   ebx
c0013acf:	83 ec 18             	sub    esp,0x18
c0013ad2:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013ad7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013adb:	50                   	push   eax
c0013adc:	68 c8 3a 02 c0       	push   0xc0023ac8
c0013ae1:	e8 68 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ae6:	c7 04 24 ff 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bff
c0013aed:	e8 5c 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013af2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013af5:	83 c4 10             	add    esp,0x10
c0013af8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013afe:	75 0e                	jne    c0013b0e <VAS::scanForEviction()+0x44>
c0013b00:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b03:	89 da                	mov    edx,ebx
c0013b05:	c1 ea 16             	shr    edx,0x16
c0013b08:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013b0c:	74 5b                	je     c0013b69 <VAS::scanForEviction()+0x9f>
c0013b0e:	83 ec 08             	sub    esp,0x8
c0013b11:	53                   	push   ebx
c0013b12:	57                   	push   edi
c0013b13:	e8 64 f0 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0013b18:	83 c4 10             	add    esp,0x10
c0013b1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b1d:	89 d1                	mov    ecx,edx
c0013b1f:	c1 e9 0c             	shr    ecx,0xc
c0013b22:	74 10                	je     c0013b34 <VAS::scanForEviction()+0x6a>
c0013b24:	89 d1                	mov    ecx,edx
c0013b26:	81 e1 01 08 00 00    	and    ecx,0x801
c0013b2c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0013b32:	74 40                	je     c0013b74 <VAS::scanForEviction()+0xaa>
c0013b34:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b3a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013b40:	76 2d                	jbe    c0013b6f <VAS::scanForEviction()+0xa5>
c0013b42:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0013b49:	83 c6 01             	add    esi,0x1
c0013b4c:	83 fe 03             	cmp    esi,0x3
c0013b4f:	74 32                	je     c0013b83 <VAS::scanForEviction()+0xb9>
c0013b51:	31 db                	xor    ebx,ebx
c0013b53:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013b59:	75 b3                	jne    c0013b0e <VAS::scanForEviction()+0x44>
c0013b5b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b5e:	89 da                	mov    edx,ebx
c0013b60:	c1 ea 16             	shr    edx,0x16
c0013b63:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013b67:	75 a5                	jne    c0013b0e <VAS::scanForEviction()+0x44>
c0013b69:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013b6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013b72:	eb 84                	jmp    c0013af8 <VAS::scanForEviction()+0x2e>
c0013b74:	f6 c2 20             	test   dl,0x20
c0013b77:	74 13                	je     c0013b8c <VAS::scanForEviction()+0xc2>
c0013b79:	83 e2 df             	and    edx,0xffffffdf
c0013b7c:	89 10                	mov    DWORD PTR [eax],edx
c0013b7e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013b81:	eb b1                	jmp    c0013b34 <VAS::scanForEviction()+0x6a>
c0013b83:	83 c4 10             	add    esp,0x10
c0013b86:	31 c0                	xor    eax,eax
c0013b88:	5b                   	pop    ebx
c0013b89:	5e                   	pop    esi
c0013b8a:	5f                   	pop    edi
c0013b8b:	c3                   	ret    
c0013b8c:	89 d0                	mov    eax,edx
c0013b8e:	83 ec 08             	sub    esp,0x8
c0013b91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b9a:	53                   	push   ebx
c0013b9b:	68 1b 3c 02 c0       	push   0xc0023c1b
c0013ba0:	e8 a9 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ba5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013ba8:	58                   	pop    eax
c0013ba9:	5a                   	pop    edx
c0013baa:	51                   	push   ecx
c0013bab:	57                   	push   edi
c0013bac:	e8 f1 f8 ff ff       	call   c00134a2 <VAS::evict(unsigned long)>
c0013bb1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013bb4:	5b                   	pop    ebx
c0013bb5:	5e                   	pop    esi
c0013bb6:	50                   	push   eax
c0013bb7:	68 2f 3c 02 c0       	push   0xc0023c2f
c0013bbc:	e8 8d 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013bc1:	58                   	pop    eax
c0013bc2:	5a                   	pop    edx
c0013bc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bc7:	50                   	push   eax
c0013bc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bcc:	68 42 3c 02 c0       	push   0xc0023c42
c0013bd1:	e8 78 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013bd6:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013bd9:	81 c1 00 10 00 00    	add    ecx,0x1000
c0013bdf:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013be2:	8b 3d d0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6d0
c0013be8:	5b                   	pop    ebx
c0013be9:	5e                   	pop    esi
c0013bea:	57                   	push   edi
c0013beb:	68 e8 3a 02 c0       	push   0xc0023ae8
c0013bf0:	e8 59 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	5b                   	pop    ebx
c0013c00:	5e                   	pop    esi
c0013c01:	5f                   	pop    edi
c0013c02:	c3                   	ret    

c0013c03 <mapVASFirstTime>:
c0013c03:	55                   	push   ebp
c0013c04:	57                   	push   edi
c0013c05:	56                   	push   esi
c0013c06:	53                   	push   ebx
c0013c07:	83 ec 0c             	sub    esp,0xc
c0013c0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c0f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0013c12:	83 fa 01             	cmp    edx,0x1
c0013c15:	0f 84 cb 00 00 00    	je     c0013ce6 <mapVASFirstTime+0xe3>
c0013c1b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c1e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0013c23:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0013c28:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0013c2b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0013c31:	c1 e5 15             	shl    ebp,0x15
c0013c34:	29 eb                	sub    ebx,ebp
c0013c36:	29 ef                	sub    edi,ebp
c0013c38:	e8 7f ba ff ff       	call   c000f6bc <Phys::allocatePage()>
c0013c3d:	83 ec 0c             	sub    esp,0xc
c0013c40:	68 03 04 00 00       	push   0x403
c0013c45:	6a 01                	push   0x1
c0013c47:	53                   	push   ebx
c0013c48:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013c4e:	50                   	push   eax
c0013c4f:	56                   	push   esi
c0013c50:	e8 1b f5 ff ff       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c55:	83 c4 20             	add    esp,0x20
c0013c58:	39 fb                	cmp    ebx,edi
c0013c5a:	75 dc                	jne    c0013c38 <mapVASFirstTime+0x35>
c0013c5c:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0013c61:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0013c66:	29 eb                	sub    ebx,ebp
c0013c68:	29 ef                	sub    edi,ebp
c0013c6a:	e8 4d ba ff ff       	call   c000f6bc <Phys::allocatePage()>
c0013c6f:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013c73:	83 fa 01             	cmp    edx,0x1
c0013c76:	19 d2                	sbb    edx,edx
c0013c78:	83 ec 0c             	sub    esp,0xc
c0013c7b:	83 e2 04             	and    edx,0x4
c0013c7e:	81 c2 03 04 00 00    	add    edx,0x403
c0013c84:	52                   	push   edx
c0013c85:	6a 01                	push   0x1
c0013c87:	53                   	push   ebx
c0013c88:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013c8e:	50                   	push   eax
c0013c8f:	56                   	push   esi
c0013c90:	e8 db f4 ff ff       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c95:	83 c4 20             	add    esp,0x20
c0013c98:	39 df                	cmp    edi,ebx
c0013c9a:	75 ce                	jne    c0013c6a <mapVASFirstTime+0x67>
c0013c9c:	83 ec 0c             	sub    esp,0xc
c0013c9f:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c0013ca4:	6a 04                	push   0x4
c0013ca6:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c0013cac:	6a ff                	push   0xffffffff
c0013cae:	c1 eb 0c             	shr    ebx,0xc
c0013cb1:	53                   	push   ebx
c0013cb2:	68 00 60 02 c0       	push   0xc0026000
c0013cb7:	56                   	push   esi
c0013cb8:	e8 59 f0 ff ff       	call   c0012d16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013cbd:	83 c4 14             	add    esp,0x14
c0013cc0:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c0013cc5:	6a 04                	push   0x4
c0013cc7:	6a ff                	push   0xffffffff
c0013cc9:	53                   	push   ebx
c0013cca:	68 00 60 02 c0       	push   0xc0026000
c0013ccf:	50                   	push   eax
c0013cd0:	e8 41 f0 ff ff       	call   c0012d16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013cd5:	0f 20 d8             	mov    eax,cr3
c0013cd8:	0f 22 d8             	mov    cr3,eax
c0013cdb:	83 c4 20             	add    esp,0x20
c0013cde:	83 c4 0c             	add    esp,0xc
c0013ce1:	5b                   	pop    ebx
c0013ce2:	5e                   	pop    esi
c0013ce3:	5f                   	pop    edi
c0013ce4:	5d                   	pop    ebp
c0013ce5:	c3                   	ret    
c0013ce6:	83 ec 0c             	sub    esp,0xc
c0013ce9:	68 4f 3c 02 c0       	push   0xc0023c4f
c0013cee:	e8 5b 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	83 c4 0c             	add    esp,0xc
c0013cf9:	5b                   	pop    ebx
c0013cfa:	5e                   	pop    esi
c0013cfb:	5f                   	pop    edi
c0013cfc:	5d                   	pop    ebp
c0013cfd:	c3                   	ret    

c0013cfe <SysEject(regs*)>:
c0013cfe:	83 ec 0c             	sub    esp,0xc
c0013d01:	83 ca ff             	or     edx,0xffffffff
c0013d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d08:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013d0b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d10:	83 e9 41             	sub    ecx,0x41
c0013d13:	83 f9 19             	cmp    ecx,0x19
c0013d16:	77 18                	ja     c0013d30 <SysEject(regs*)+0x32>
c0013d18:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0013d1f:	85 c9                	test   ecx,ecx
c0013d21:	74 0d                	je     c0013d30 <SysEject(regs*)+0x32>
c0013d23:	83 ec 0c             	sub    esp,0xc
c0013d26:	51                   	push   ecx
c0013d27:	e8 52 63 ff ff       	call   c000a07e <LogicalDisk::eject()>
c0013d2c:	83 c4 10             	add    esp,0x10
c0013d2f:	99                   	cdq    
c0013d30:	83 c4 0c             	add    esp,0xc
c0013d33:	c3                   	ret    

c0013d34 <SysExit(regs*)>:
c0013d34:	83 ec 18             	sub    esp,0x18
c0013d37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d3e:	e8 61 2b 00 00       	call   c00168a4 <terminateTask(int)>
c0013d43:	83 c8 ff             	or     eax,0xffffffff
c0013d46:	83 c4 1c             	add    esp,0x1c
c0013d49:	89 c2                	mov    edx,eax
c0013d4b:	c3                   	ret    

c0013d4c <SysGetCwd(regs*)>:
c0013d4c:	83 ec 10             	sub    esp,0x10
c0013d4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d53:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013d56:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d5e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d61:	e8 46 40 ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c0013d66:	83 c4 1c             	add    esp,0x1c
c0013d69:	99                   	cdq    
c0013d6a:	c3                   	ret    

c0013d6b <SysGetPID(regs*)>:
c0013d6b:	83 ec 14             	sub    esp,0x14
c0013d6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d76:	ff 30                	push   DWORD PTR [eax]
c0013d78:	68 68 3c 02 c0       	push   0xc0023c68
c0013d7d:	e8 cc 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013d82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d8c:	83 c4 1c             	add    esp,0x1c
c0013d8f:	99                   	cdq    
c0013d90:	c3                   	ret    

c0013d91 <SysGetRAMData(regs*)>:
c0013d91:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0013d96:	03 05 dc cd 02 c0    	add    eax,DWORD PTR ds:0xc002cddc
c0013d9c:	8b 0d e0 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cde0
c0013da2:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0013da8:	99                   	cdq    
c0013da9:	f7 f9                	idiv   ecx
c0013dab:	c1 e0 18             	shl    eax,0x18
c0013dae:	09 c8                	or     eax,ecx
c0013db0:	99                   	cdq    
c0013db1:	c3                   	ret    

c0013db2 <SysGetVGAPtr(regs*)>:
c0013db2:	55                   	push   ebp
c0013db3:	57                   	push   edi
c0013db4:	56                   	push   esi
c0013db5:	53                   	push   ebx
c0013db6:	83 ec 0c             	sub    esp,0xc
c0013db9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013dbd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0013dc3:	74 1b                	je     c0013de0 <SysGetVGAPtr(regs*)+0x2e>
c0013dc5:	83 ec 0c             	sub    esp,0xc
c0013dc8:	50                   	push   eax
c0013dc9:	e8 8a 25 00 00       	call   c0016358 <Thr::processFromPID(int)>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	31 d2                	xor    edx,edx
c0013dd3:	89 c1                	mov    ecx,eax
c0013dd5:	b8 01 00 00 00       	mov    eax,0x1
c0013dda:	85 c9                	test   ecx,ecx
c0013ddc:	75 0a                	jne    c0013de8 <SysGetVGAPtr(regs*)+0x36>
c0013dde:	eb 61                	jmp    c0013e41 <SysGetVGAPtr(regs*)+0x8f>
c0013de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013de5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0013de8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013dec:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013df2:	74 0c                	je     c0013e00 <SysGetVGAPtr(regs*)+0x4e>
c0013df4:	83 ec 0c             	sub    esp,0xc
c0013df7:	55                   	push   ebp
c0013df8:	e8 4a db ff ff       	call   c0011947 <setActiveTerminal(VgaText*)>
c0013dfd:	83 c4 10             	add    esp,0x10
c0013e00:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013e03:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013e08:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013e0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e0d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013e10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013e13:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013e19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013e1c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013e1f:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013e25:	50                   	push   eax
c0013e26:	50                   	push   eax
c0013e27:	68 77 3c 02 c0       	push   0xc0023c77
c0013e2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013e2f:	05 a8 0f 00 00       	add    eax,0xfa8
c0013e34:	50                   	push   eax
c0013e35:	e8 16 c8 fe ff       	call   c0000650 <strcpy>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	31 c0                	xor    eax,eax
c0013e3f:	31 d2                	xor    edx,edx
c0013e41:	83 c4 0c             	add    esp,0xc
c0013e44:	5b                   	pop    ebx
c0013e45:	5e                   	pop    esi
c0013e46:	5f                   	pop    edi
c0013e47:	5d                   	pop    ebp
c0013e48:	c3                   	ret    
c0013e49:	66 90                	xchg   ax,ax
c0013e4b:	90                   	nop

c0013e4c <SysKill(regs*)>:
c0013e4c:	53                   	push   ebx
c0013e4d:	83 ec 08             	sub    esp,0x8
c0013e50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e54:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013e58:	75 16                	jne    c0013e70 <SysKill(regs*)+0x24>
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	68 81 3c 02 c0       	push   0xc0023c81
c0013e62:	e8 5b b6 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	e9 89 00 00 00       	jmp    c0013ef8 <SysKill(regs*)+0xac>
c0013e6f:	90                   	nop
c0013e70:	83 ec 0c             	sub    esp,0xc
c0013e73:	68 ec d6 02 c0       	push   0xc002d6ec
c0013e78:	e8 ab cf 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e80:	83 c4 10             	add    esp,0x10
c0013e83:	85 c0                	test   eax,eax
c0013e85:	74 19                	je     c0013ea0 <SysKill(regs*)+0x54>
c0013e87:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013e8a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013e8d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013e8f:	74 33                	je     c0013ec4 <SysKill(regs*)+0x78>
c0013e91:	52                   	push   edx
c0013e92:	52                   	push   edx
c0013e93:	50                   	push   eax
c0013e94:	68 ec d6 02 c0       	push   0xc002d6ec
c0013e99:	e8 96 d4 00 00       	call   c0021334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e9e:	eb e0                	jmp    c0013e80 <SysKill(regs*)+0x34>
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	68 e0 d6 02 c0       	push   0xc002d6e0
c0013ea8:	e8 7b cf 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ead:	8d 76 00             	lea    esi,[esi+0x0]
c0013eb0:	83 c4 10             	add    esp,0x10
c0013eb3:	85 c0                	test   eax,eax
c0013eb5:	74 41                	je     c0013ef8 <SysKill(regs*)+0xac>
c0013eb7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013eba:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ebd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ebf:	75 27                	jne    c0013ee8 <SysKill(regs*)+0x9c>
c0013ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ec4:	51                   	push   ecx
c0013ec5:	51                   	push   ecx
c0013ec6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ece:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ed1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013ed7:	e8 24 c7 ff ff       	call   c0010600 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013edc:	83 c4 10             	add    esp,0x10
c0013edf:	31 c0                	xor    eax,eax
c0013ee1:	31 d2                	xor    edx,edx
c0013ee3:	eb 1b                	jmp    c0013f00 <SysKill(regs*)+0xb4>
c0013ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ee8:	52                   	push   edx
c0013ee9:	52                   	push   edx
c0013eea:	50                   	push   eax
c0013eeb:	68 e0 d6 02 c0       	push   0xc002d6e0
c0013ef0:	e8 3f d4 00 00       	call   c0021334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ef5:	eb b9                	jmp    c0013eb0 <SysKill(regs*)+0x64>
c0013ef7:	90                   	nop
c0013ef8:	83 c8 ff             	or     eax,0xffffffff
c0013efb:	89 c2                	mov    edx,eax
c0013efd:	8d 76 00             	lea    esi,[esi+0x0]
c0013f00:	83 c4 08             	add    esp,0x8
c0013f03:	5b                   	pop    ebx
c0013f04:	c3                   	ret    

c0013f05 <SysLoadDLL(regs*)>:
c0013f05:	56                   	push   esi
c0013f06:	31 d2                	xor    edx,edx
c0013f08:	53                   	push   ebx
c0013f09:	b8 01 00 00 00       	mov    eax,0x1
c0013f0e:	51                   	push   ecx
c0013f0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f13:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013f17:	0f 84 8c 00 00 00    	je     c0013fa9 <SysLoadDLL(regs*)+0xa4>
c0013f1d:	83 ec 0c             	sub    esp,0xc
c0013f20:	68 14 01 00 00       	push   0x114
c0013f25:	e8 52 b2 ff ff       	call   c000f17c <malloc>
c0013f2a:	83 c4 0c             	add    esp,0xc
c0013f2d:	89 c3                	mov    ebx,eax
c0013f2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f34:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f37:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013f3a:	53                   	push   ebx
c0013f3b:	e8 ec 41 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013f40:	83 c4 10             	add    esp,0x10
c0013f43:	31 d2                	xor    edx,edx
c0013f45:	85 db                	test   ebx,ebx
c0013f47:	b8 02 00 00 00       	mov    eax,0x2
c0013f4c:	74 5b                	je     c0013fa9 <SysLoadDLL(regs*)+0xa4>
c0013f4e:	83 ec 0c             	sub    esp,0xc
c0013f51:	53                   	push   ebx
c0013f52:	e8 b7 44 ff ff       	call   c000840e <File::exists()>
c0013f57:	83 c4 10             	add    esp,0x10
c0013f5a:	84 c0                	test   al,al
c0013f5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f5e:	75 11                	jne    c0013f71 <SysLoadDLL(regs*)+0x6c>
c0013f60:	83 ec 0c             	sub    esp,0xc
c0013f63:	53                   	push   ebx
c0013f64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f67:	83 c4 10             	add    esp,0x10
c0013f6a:	b8 03 00 00 00       	mov    eax,0x3
c0013f6f:	eb 36                	jmp    c0013fa7 <SysLoadDLL(regs*)+0xa2>
c0013f71:	83 ec 0c             	sub    esp,0xc
c0013f74:	53                   	push   ebx
c0013f75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f78:	58                   	pop    eax
c0013f79:	5a                   	pop    edx
c0013f7a:	6a 00                	push   0x0
c0013f7c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013f7f:	e8 51 16 00 00       	call   c00155d5 <Thr::loadDLL(char const*, bool)>
c0013f84:	83 c4 10             	add    esp,0x10
c0013f87:	31 d2                	xor    edx,edx
c0013f89:	89 c1                	mov    ecx,eax
c0013f8b:	b8 04 00 00 00       	mov    eax,0x4
c0013f90:	85 c9                	test   ecx,ecx
c0013f92:	74 15                	je     c0013fa9 <SysLoadDLL(regs*)+0xa4>
c0013f94:	53                   	push   ebx
c0013f95:	53                   	push   ebx
c0013f96:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0013f9c:	51                   	push   ecx
c0013f9d:	e8 94 18 00 00       	call   c0015836 <Thr::executeDLL(unsigned long, void*)>
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	31 c0                	xor    eax,eax
c0013fa7:	31 d2                	xor    edx,edx
c0013fa9:	59                   	pop    ecx
c0013faa:	5b                   	pop    ebx
c0013fab:	5e                   	pop    esi
c0013fac:	c3                   	ret    

c0013fad <SysRead(regs*)>:
c0013fad:	57                   	push   edi
c0013fae:	56                   	push   esi
c0013faf:	53                   	push   ebx
c0013fb0:	83 ec 10             	sub    esp,0x10
c0013fb3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013fb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fba:	83 f8 02             	cmp    eax,0x2
c0013fbd:	77 10                	ja     c0013fcf <SysRead(regs*)+0x22>
c0013fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fc7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013fcd:	eb 0e                	jmp    c0013fdd <SysRead(regs*)+0x30>
c0013fcf:	83 ec 0c             	sub    esp,0xc
c0013fd2:	50                   	push   eax
c0013fd3:	e8 59 e7 ff ff       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0013fd8:	83 c4 10             	add    esp,0x10
c0013fdb:	89 c1                	mov    ecx,eax
c0013fdd:	83 c8 ff             	or     eax,0xffffffff
c0013fe0:	85 c9                	test   ecx,ecx
c0013fe2:	89 c2                	mov    edx,eax
c0013fe4:	74 28                	je     c001400e <SysRead(regs*)+0x61>
c0013fe6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fee:	83 ec 0c             	sub    esp,0xc
c0013ff1:	31 ff                	xor    edi,edi
c0013ff3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ff7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ff9:	52                   	push   edx
c0013ffa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ffd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014000:	57                   	push   edi
c0014001:	56                   	push   esi
c0014002:	51                   	push   ecx
c0014003:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001400a:	83 c4 20             	add    esp,0x20
c001400d:	99                   	cdq    
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	5b                   	pop    ebx
c0014012:	5e                   	pop    esi
c0014013:	5f                   	pop    edi
c0014014:	c3                   	ret    

c0014015 <SysRegisterSignal(regs*)>:
c0014015:	83 ec 18             	sub    esp,0x18
c0014018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001401c:	6a 00                	push   0x0
c001401e:	6a 00                	push   0x0
c0014020:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014023:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001402b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001402e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014034:	e8 91 c5 ff ff       	call   c00105ca <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014039:	83 c4 2c             	add    esp,0x2c
c001403c:	99                   	cdq    
c001403d:	c3                   	ret    

c001403e <SysRegistryGetTypeFromPath(regs*)>:
c001403e:	53                   	push   ebx
c001403f:	81 ec 40 01 00 00    	sub    esp,0x140
c0014045:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001404c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001404f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014052:	e8 ec 94 ff ff       	call   c000d543 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	85 c0                	test   eax,eax
c001405c:	89 c1                	mov    ecx,eax
c001405e:	74 15                	je     c0014075 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014060:	50                   	push   eax
c0014061:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014065:	50                   	push   eax
c0014066:	51                   	push   ecx
c0014067:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001406a:	e8 b9 90 ff ff       	call   c000d128 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	99                   	cdq    
c0014073:	eb 05                	jmp    c001407a <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014075:	83 c8 ff             	or     eax,0xffffffff
c0014078:	89 c2                	mov    edx,eax
c001407a:	81 c4 38 01 00 00    	add    esp,0x138
c0014080:	5b                   	pop    ebx
c0014081:	c3                   	ret    

c0014082 <SysRegistryReadExtent(regs*)>:
c0014082:	83 ec 1c             	sub    esp,0x1c
c0014085:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014089:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001408c:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001408f:	85 c0                	test   eax,eax
c0014091:	79 1f                	jns    c00140b2 <SysRegistryReadExtent(regs*)+0x30>
c0014093:	52                   	push   edx
c0014094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001409d:	52                   	push   edx
c001409e:	50                   	push   eax
c001409f:	51                   	push   ecx
c00140a0:	e8 75 8f ff ff       	call   c000d01a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00140a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00140ad:	83 c4 10             	add    esp,0x10
c00140b0:	eb 14                	jmp    c00140c6 <SysRegistryReadExtent(regs*)+0x44>
c00140b2:	83 ec 04             	sub    esp,0x4
c00140b5:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00140b8:	50                   	push   eax
c00140b9:	51                   	push   ecx
c00140ba:	e8 f9 89 ff ff       	call   c000cab8 <CmGetString(Reghive_Tag*, int, char*)>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	31 c0                	xor    eax,eax
c00140c4:	31 d2                	xor    edx,edx
c00140c6:	83 c4 1c             	add    esp,0x1c
c00140c9:	c3                   	ret    

c00140ca <SysRegistryPathToExtentLookup(regs*)>:
c00140ca:	83 ec 14             	sub    esp,0x14
c00140cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140d1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140d4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00140d7:	e8 67 94 ff ff       	call   c000d543 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00140dc:	83 c4 1c             	add    esp,0x1c
c00140df:	99                   	cdq    
c00140e0:	c3                   	ret    

c00140e1 <SysRegistryEnterDirectory(regs*)>:
c00140e1:	83 ec 14             	sub    esp,0x14
c00140e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140e8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00140eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00140ee:	e8 3c 8a ff ff       	call   c000cb2f <CmEnterDirectory(Reghive_Tag*, int)>
c00140f3:	83 c4 1c             	add    esp,0x1c
c00140f6:	99                   	cdq    
c00140f7:	c3                   	ret    

c00140f8 <SysRegistryGetNext(regs*)>:
c00140f8:	83 ec 14             	sub    esp,0x14
c00140fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140ff:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014102:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014105:	e8 64 8a ff ff       	call   c000cb6e <CmGetNext(Reghive_Tag*, int)>
c001410a:	83 c4 1c             	add    esp,0x1c
c001410d:	99                   	cdq    
c001410e:	c3                   	ret    

c001410f <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001410f:	57                   	push   edi
c0014110:	56                   	push   esi
c0014111:	53                   	push   ebx
c0014112:	81 ec 34 01 00 00    	sub    esp,0x134
c0014118:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001411f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014123:	57                   	push   edi
c0014124:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014127:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001412a:	e8 f9 8f ff ff       	call   c000d128 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001412f:	89 c3                	mov    ebx,eax
c0014131:	58                   	pop    eax
c0014132:	5a                   	pop    edx
c0014133:	57                   	push   edi
c0014134:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014137:	e8 14 c5 fe ff       	call   c0000650 <strcpy>
c001413c:	81 c4 40 01 00 00    	add    esp,0x140
c0014142:	89 d8                	mov    eax,ebx
c0014144:	5b                   	pop    ebx
c0014145:	99                   	cdq    
c0014146:	5e                   	pop    esi
c0014147:	5f                   	pop    edi
c0014148:	c3                   	ret    

c0014149 <SysRegistryOpen(regs*)>:
c0014149:	83 ec 18             	sub    esp,0x18
c001414c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014150:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014153:	e8 f0 87 ff ff       	call   c000c948 <CmOpen(char const*)>
c0014158:	83 c4 1c             	add    esp,0x1c
c001415b:	99                   	cdq    
c001415c:	c3                   	ret    

c001415d <SysRegistryClose(regs*)>:
c001415d:	83 ec 18             	sub    esp,0x18
c0014160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014164:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014167:	e8 fa 88 ff ff       	call   c000ca66 <CmClose(Reghive_Tag*)>
c001416c:	31 c0                	xor    eax,eax
c001416e:	31 d2                	xor    edx,edx
c0014170:	83 c4 1c             	add    esp,0x1c
c0014173:	c3                   	ret    

c0014174 <SysRegistryEasyReadString(regs*)>:
c0014174:	57                   	push   edi
c0014175:	56                   	push   esi
c0014176:	53                   	push   ebx
c0014177:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001417b:	83 ec 0c             	sub    esp,0xc
c001417e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014181:	e8 c2 87 ff ff       	call   c000c948 <CmOpen(char const*)>
c0014186:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014189:	5a                   	pop    edx
c001418a:	59                   	pop    ecx
c001418b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001418e:	89 c3                	mov    ebx,eax
c0014190:	50                   	push   eax
c0014191:	e8 ad 93 ff ff       	call   c000d543 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014196:	83 c4 10             	add    esp,0x10
c0014199:	89 c1                	mov    ecx,eax
c001419b:	b8 01 00 00 00       	mov    eax,0x1
c00141a0:	85 c9                	test   ecx,ecx
c00141a2:	7e 16                	jle    c00141ba <SysRegistryEasyReadString(regs*)+0x46>
c00141a4:	50                   	push   eax
c00141a5:	57                   	push   edi
c00141a6:	51                   	push   ecx
c00141a7:	53                   	push   ebx
c00141a8:	e8 0b 89 ff ff       	call   c000cab8 <CmGetString(Reghive_Tag*, int, char*)>
c00141ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141b0:	e8 b1 88 ff ff       	call   c000ca66 <CmClose(Reghive_Tag*)>
c00141b5:	83 c4 10             	add    esp,0x10
c00141b8:	31 c0                	xor    eax,eax
c00141ba:	5b                   	pop    ebx
c00141bb:	31 d2                	xor    edx,edx
c00141bd:	5e                   	pop    esi
c00141be:	5f                   	pop    edi
c00141bf:	c3                   	ret    

c00141c0 <SysRegistryEasyReadInteger(regs*)>:
c00141c0:	56                   	push   esi
c00141c1:	53                   	push   ebx
c00141c2:	83 ec 10             	sub    esp,0x10
c00141c5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00141c9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00141cc:	e8 77 87 ff ff       	call   c000c948 <CmOpen(char const*)>
c00141d1:	5a                   	pop    edx
c00141d2:	59                   	pop    ecx
c00141d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141d6:	89 c3                	mov    ebx,eax
c00141d8:	50                   	push   eax
c00141d9:	e8 65 93 ff ff       	call   c000d543 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141de:	83 c4 10             	add    esp,0x10
c00141e1:	89 c1                	mov    ecx,eax
c00141e3:	b8 01 00 00 00       	mov    eax,0x1
c00141e8:	85 c9                	test   ecx,ecx
c00141ea:	7e 18                	jle    c0014204 <SysRegistryEasyReadInteger(regs*)+0x44>
c00141ec:	50                   	push   eax
c00141ed:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00141f0:	51                   	push   ecx
c00141f1:	53                   	push   ebx
c00141f2:	e8 23 8e ff ff       	call   c000d01a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00141f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141fa:	e8 67 88 ff ff       	call   c000ca66 <CmClose(Reghive_Tag*)>
c00141ff:	83 c4 10             	add    esp,0x10
c0014202:	31 c0                	xor    eax,eax
c0014204:	59                   	pop    ecx
c0014205:	31 d2                	xor    edx,edx
c0014207:	5b                   	pop    ebx
c0014208:	5e                   	pop    esi
c0014209:	c3                   	ret    

c001420a <SysSbrk(regs*)>:
c001420a:	56                   	push   esi
c001420b:	53                   	push   ebx
c001420c:	50                   	push   eax
c001420d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014212:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014216:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014219:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001421c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014222:	85 db                	test   ebx,ebx
c0014224:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014227:	74 02                	je     c001422b <SysSbrk(regs*)+0x21>
c0014229:	79 06                	jns    c0014231 <SysSbrk(regs*)+0x27>
c001422b:	89 f0                	mov    eax,esi
c001422d:	31 d2                	xor    edx,edx
c001422f:	eb 2a                	jmp    c001425b <SysSbrk(regs*)+0x51>
c0014231:	83 c8 ff             	or     eax,0xffffffff
c0014234:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001423a:	89 c2                	mov    edx,eax
c001423c:	77 1d                	ja     c001425b <SysSbrk(regs*)+0x51>
c001423e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014244:	50                   	push   eax
c0014245:	68 07 0c 00 00       	push   0xc07
c001424a:	c1 ea 0c             	shr    edx,0xc
c001424d:	52                   	push   edx
c001424e:	51                   	push   ecx
c001424f:	e8 2a ee ff ff       	call   c001307e <VAS::allocatePages(int, int)>
c0014254:	89 f0                	mov    eax,esi
c0014256:	31 d2                	xor    edx,edx
c0014258:	83 c4 10             	add    esp,0x10
c001425b:	59                   	pop    ecx
c001425c:	5b                   	pop    ebx
c001425d:	5e                   	pop    esi
c001425e:	c3                   	ret    

c001425f <SysSetCwd(regs*)>:
c001425f:	83 ec 14             	sub    esp,0x14
c0014262:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014266:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014269:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001426e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014271:	e8 37 42 ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c0014276:	83 c4 1c             	add    esp,0x1c
c0014279:	99                   	cdq    
c001427a:	c3                   	ret    

c001427b <SysSetTime(regs*)>:
c001427b:	55                   	push   ebp
c001427c:	31 d2                	xor    edx,edx
c001427e:	57                   	push   edi
c001427f:	56                   	push   esi
c0014280:	53                   	push   ebx
c0014281:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014286:	83 ec 30             	sub    esp,0x30
c0014289:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001428d:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014290:	89 f0                	mov    eax,esi
c0014292:	f7 f3                	div    ebx
c0014294:	89 d7                	mov    edi,edx
c0014296:	31 d2                	xor    edx,edx
c0014298:	f7 f3                	div    ebx
c001429a:	bb 10 0e 00 00       	mov    ebx,0xe10
c001429f:	89 f0                	mov    eax,esi
c00142a1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a5:	31 d2                	xor    edx,edx
c00142a7:	f7 f3                	div    ebx
c00142a9:	bb 18 00 00 00       	mov    ebx,0x18
c00142ae:	31 d2                	xor    edx,edx
c00142b0:	f7 f3                	div    ebx
c00142b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142b5:	bb 0c 00 00 00       	mov    ebx,0xc
c00142ba:	89 c6                	mov    esi,eax
c00142bc:	c1 e8 05             	shr    eax,0x5
c00142bf:	83 e6 1f             	and    esi,0x1f
c00142c2:	46                   	inc    esi
c00142c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00142c7:	31 d2                	xor    edx,edx
c00142c9:	f7 f3                	div    ebx
c00142cb:	31 db                	xor    ebx,ebx
c00142cd:	57                   	push   edi
c00142ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00142d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d6:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c00142da:	55                   	push   ebp
c00142db:	52                   	push   edx
c00142dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00142e0:	56                   	push   esi
c00142e1:	68 a2 3c 02 c0       	push   0xc0023ca2
c00142e6:	e8 63 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00142eb:	83 c4 1c             	add    esp,0x1c
c00142ee:	57                   	push   edi
c00142ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00142f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142f7:	55                   	push   ebp
c00142f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00142fc:	52                   	push   edx
c00142fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014301:	56                   	push   esi
c0014302:	68 c4 3c 02 c0       	push   0xc0023cc4
c0014307:	e8 42 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001430c:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0014311:	31 c9                	xor    ecx,ecx
c0014313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014317:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c001431b:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c001431f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014325:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014329:	89 f0                	mov    eax,esi
c001432b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001432f:	88 c1                	mov    cl,al
c0014331:	89 e8                	mov    eax,ebp
c0014333:	88 d5                	mov    ch,dl
c0014335:	83 c4 1c             	add    esp,0x1c
c0014338:	c1 e0 10             	shl    eax,0x10
c001433b:	0f b7 d1             	movzx  edx,cx
c001433e:	09 c2                	or     edx,eax
c0014340:	89 f8                	mov    eax,edi
c0014342:	c1 e0 10             	shl    eax,0x10
c0014345:	89 d1                	mov    ecx,edx
c0014347:	89 da                	mov    edx,ebx
c0014349:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c001434f:	09 c2                	or     edx,eax
c0014351:	52                   	push   edx
c0014352:	51                   	push   ecx
c0014353:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014357:	e8 1e 4a ff ff       	call   c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001435c:	83 c4 3c             	add    esp,0x3c
c001435f:	31 d2                	xor    edx,edx
c0014361:	5b                   	pop    ebx
c0014362:	5e                   	pop    esi
c0014363:	83 f0 01             	xor    eax,0x1
c0014366:	5f                   	pop    edi
c0014367:	0f b6 c0             	movzx  eax,al
c001436a:	5d                   	pop    ebp
c001436b:	c3                   	ret    

c001436c <SysSymlink(regs*)>:
c001436c:	56                   	push   esi
c001436d:	83 c8 ff             	or     eax,0xffffffff
c0014370:	53                   	push   ebx
c0014371:	89 c2                	mov    edx,eax
c0014373:	81 ec 34 02 00 00    	sub    esp,0x234
c0014379:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014380:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014384:	74 50                	je     c00143d6 <SysSymlink(regs*)+0x6a>
c0014386:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014389:	85 c9                	test   ecx,ecx
c001438b:	74 49                	je     c00143d6 <SysSymlink(regs*)+0x6a>
c001438d:	6a 01                	push   0x1
c001438f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014394:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014397:	05 0c 01 00 00       	add    eax,0x10c
c001439c:	50                   	push   eax
c001439d:	51                   	push   ecx
c001439e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00143a2:	56                   	push   esi
c00143a3:	e8 58 3a ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00143a8:	6a 01                	push   0x1
c00143aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143b2:	05 0c 01 00 00       	add    eax,0x10c
c00143b7:	50                   	push   eax
c00143b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143bb:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00143c2:	53                   	push   ebx
c00143c3:	e8 38 3a ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00143c8:	83 c4 18             	add    esp,0x18
c00143cb:	56                   	push   esi
c00143cc:	53                   	push   ebx
c00143cd:	e8 5c 36 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	99                   	cdq    
c00143d6:	81 c4 34 02 00 00    	add    esp,0x234
c00143dc:	5b                   	pop    ebx
c00143dd:	5e                   	pop    esi
c00143de:	c3                   	ret    

c00143df <SysTimezone(regs*)>:
c00143df:	83 ec 0c             	sub    esp,0xc
c00143e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143e6:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00143ea:	75 17                	jne    c0014403 <SysTimezone(regs*)+0x24>
c00143ec:	83 ec 0c             	sub    esp,0xc
c00143ef:	68 e6 3c 02 c0       	push   0xc0023ce6
c00143f4:	e8 55 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00143f9:	83 c8 ff             	or     eax,0xffffffff
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	89 c2                	mov    edx,eax
c0014401:	eb 17                	jmp    c001441a <SysTimezone(regs*)+0x3b>
c0014403:	83 ec 0c             	sub    esp,0xc
c0014406:	68 fb 3c 02 c0       	push   0xc0023cfb
c001440b:	e8 3e 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014410:	83 c4 10             	add    esp,0x10
c0014413:	b8 01 00 00 00       	mov    eax,0x1
c0014418:	31 d2                	xor    edx,edx
c001441a:	83 c4 0c             	add    esp,0xc
c001441d:	c3                   	ret    

c001441e <SysTruncate(regs*)>:
c001441e:	55                   	push   ebp
c001441f:	57                   	push   edi
c0014420:	31 ff                	xor    edi,edi
c0014422:	56                   	push   esi
c0014423:	53                   	push   ebx
c0014424:	83 ec 0c             	sub    esp,0xc
c0014427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001442b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001442e:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014432:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014435:	89 ce                	mov    esi,ecx
c0014437:	0f 84 9a 00 00 00    	je     c00144d7 <SysTruncate(regs*)+0xb9>
c001443d:	83 ec 0c             	sub    esp,0xc
c0014440:	68 14 01 00 00       	push   0x114
c0014445:	e8 32 ad ff ff       	call   c000f17c <malloc>
c001444a:	83 c4 0c             	add    esp,0xc
c001444d:	89 c3                	mov    ebx,eax
c001444f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014454:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014457:	55                   	push   ebp
c0014458:	53                   	push   ebx
c0014459:	e8 ce 3c ff ff       	call   c000812c <File::File(char const*, Process*)>
c001445e:	83 c4 10             	add    esp,0x10
c0014461:	31 d2                	xor    edx,edx
c0014463:	85 db                	test   ebx,ebx
c0014465:	b8 03 00 00 00       	mov    eax,0x3
c001446a:	0f 84 a2 00 00 00    	je     c0014512 <SysTruncate(regs*)+0xf4>
c0014470:	51                   	push   ecx
c0014471:	51                   	push   ecx
c0014472:	6a 02                	push   0x2
c0014474:	53                   	push   ebx
c0014475:	e8 d0 3c ff ff       	call   c000814a <File::open(FileOpenMode)>
c001447a:	83 c4 10             	add    esp,0x10
c001447d:	85 c0                	test   eax,eax
c001447f:	74 13                	je     c0014494 <SysTruncate(regs*)+0x76>
c0014481:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014483:	83 ec 0c             	sub    esp,0xc
c0014486:	53                   	push   ebx
c0014487:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001448a:	83 c4 10             	add    esp,0x10
c001448d:	b8 04 00 00 00       	mov    eax,0x4
c0014492:	eb 7c                	jmp    c0014510 <SysTruncate(regs*)+0xf2>
c0014494:	52                   	push   edx
c0014495:	57                   	push   edi
c0014496:	56                   	push   esi
c0014497:	53                   	push   ebx
c0014498:	e8 c1 3d ff ff       	call   c000825e <File::truncate(unsigned long long)>
c001449d:	83 c4 10             	add    esp,0x10
c00144a0:	85 c0                	test   eax,eax
c00144a2:	74 1b                	je     c00144bf <SysTruncate(regs*)+0xa1>
c00144a4:	83 ec 0c             	sub    esp,0xc
c00144a7:	53                   	push   ebx
c00144a8:	e8 fb 3c ff ff       	call   c00081a8 <File::close()>
c00144ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144b5:	83 c4 10             	add    esp,0x10
c00144b8:	b8 05 00 00 00       	mov    eax,0x5
c00144bd:	eb 51                	jmp    c0014510 <SysTruncate(regs*)+0xf2>
c00144bf:	83 ec 0c             	sub    esp,0xc
c00144c2:	53                   	push   ebx
c00144c3:	e8 e0 3c ff ff       	call   c00081a8 <File::close()>
c00144c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144d0:	83 c4 10             	add    esp,0x10
c00144d3:	31 c0                	xor    eax,eax
c00144d5:	eb 39                	jmp    c0014510 <SysTruncate(regs*)+0xf2>
c00144d7:	31 d2                	xor    edx,edx
c00144d9:	83 fd 02             	cmp    ebp,0x2
c00144dc:	b8 01 00 00 00       	mov    eax,0x1
c00144e1:	7e 2f                	jle    c0014512 <SysTruncate(regs*)+0xf4>
c00144e3:	83 ec 0c             	sub    esp,0xc
c00144e6:	51                   	push   ecx
c00144e7:	e8 45 e2 ff ff       	call   c0012731 <KeGetFileFromDescriptor(int)>
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	31 d2                	xor    edx,edx
c00144f1:	89 c1                	mov    ecx,eax
c00144f3:	b8 02 00 00 00       	mov    eax,0x2
c00144f8:	85 c9                	test   ecx,ecx
c00144fa:	74 16                	je     c0014512 <SysTruncate(regs*)+0xf4>
c00144fc:	50                   	push   eax
c00144fd:	57                   	push   edi
c00144fe:	56                   	push   esi
c00144ff:	51                   	push   ecx
c0014500:	e8 59 3d ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	85 c0                	test   eax,eax
c001450a:	0f 95 c0             	setne  al
c001450d:	0f b6 c0             	movzx  eax,al
c0014510:	31 d2                	xor    edx,edx
c0014512:	83 c4 0c             	add    esp,0xc
c0014515:	5b                   	pop    ebx
c0014516:	5e                   	pop    esi
c0014517:	5f                   	pop    edi
c0014518:	5d                   	pop    ebp
c0014519:	c3                   	ret    

c001451a <SysWrite(regs*)>:
c001451a:	57                   	push   edi
c001451b:	56                   	push   esi
c001451c:	53                   	push   ebx
c001451d:	83 ec 10             	sub    esp,0x10
c0014520:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014524:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014527:	83 f8 02             	cmp    eax,0x2
c001452a:	77 10                	ja     c001453c <SysWrite(regs*)+0x22>
c001452c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014531:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014534:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001453a:	eb 0e                	jmp    c001454a <SysWrite(regs*)+0x30>
c001453c:	83 ec 0c             	sub    esp,0xc
c001453f:	50                   	push   eax
c0014540:	e8 ec e1 ff ff       	call   c0012731 <KeGetFileFromDescriptor(int)>
c0014545:	83 c4 10             	add    esp,0x10
c0014548:	89 c1                	mov    ecx,eax
c001454a:	83 c8 ff             	or     eax,0xffffffff
c001454d:	85 c9                	test   ecx,ecx
c001454f:	89 c2                	mov    edx,eax
c0014551:	74 28                	je     c001457b <SysWrite(regs*)+0x61>
c0014553:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001455b:	83 ec 0c             	sub    esp,0xc
c001455e:	31 ff                	xor    edi,edi
c0014560:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014564:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014566:	52                   	push   edx
c0014567:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001456a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001456d:	57                   	push   edi
c001456e:	56                   	push   esi
c001456f:	51                   	push   ecx
c0014570:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014577:	83 c4 20             	add    esp,0x20
c001457a:	99                   	cdq    
c001457b:	83 c4 10             	add    esp,0x10
c001457e:	5b                   	pop    ebx
c001457f:	5e                   	pop    esi
c0014580:	5f                   	pop    edi
c0014581:	c3                   	ret    

c0014582 <SysWsbe(regs*)>:
c0014582:	55                   	push   ebp
c0014583:	57                   	push   edi
c0014584:	56                   	push   esi
c0014585:	53                   	push   ebx
c0014586:	83 ec 3c             	sub    esp,0x3c
c0014589:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001458d:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014594:	75 2d                	jne    c00145c3 <SysWsbe(regs*)+0x41>
c0014596:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001459d:	75 24                	jne    c00145c3 <SysWsbe(regs*)+0x41>
c001459f:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00145a6:	75 1b                	jne    c00145c3 <SysWsbe(regs*)+0x41>
c00145a8:	6a 01                	push   0x1
c00145aa:	6a 00                	push   0x0
c00145ac:	68 b9 95 00 c0       	push   0xc00095b9
c00145b1:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c00145b7:	e8 f0 18 00 00       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	31 c0                	xor    eax,eax
c00145c1:	eb 52                	jmp    c0014615 <SysWsbe(regs*)+0x93>
c00145c3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00145c7:	be 3a 3d 02 c0       	mov    esi,0xc0023d3a
c00145cc:	b9 0b 00 00 00       	mov    ecx,0xb
c00145d1:	fc                   	cld    
c00145d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00145d4:	83 ec 0c             	sub    esp,0xc
c00145d7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00145db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145e3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00145e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00145eb:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00145ee:	57                   	push   edi
c00145ef:	e8 8c bf fe ff       	call   c0000580 <strlen>
c00145f4:	5a                   	pop    edx
c00145f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00145f9:	52                   	push   edx
c00145fa:	31 d2                	xor    edx,edx
c00145fc:	57                   	push   edi
c00145fd:	52                   	push   edx
c00145fe:	50                   	push   eax
c00145ff:	56                   	push   esi
c0014600:	ff d5                	call   ebp
c0014602:	83 c4 14             	add    esp,0x14
c0014605:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014608:	e8 97 22 00 00       	call   c00168a4 <terminateTask(int)>
c001460d:	83 c4 10             	add    esp,0x10
c0014610:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014615:	83 c4 3c             	add    esp,0x3c
c0014618:	31 d2                	xor    edx,edx
c001461a:	5b                   	pop    ebx
c001461b:	5e                   	pop    esi
c001461c:	5f                   	pop    edi
c001461d:	5d                   	pop    ebp
c001461e:	c3                   	ret    

c001461f <SysYield(regs*)>:
c001461f:	83 ec 0c             	sub    esp,0xc
c0014622:	fa                   	cli    
c0014623:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0014629:	e8 d6 1a 00 00       	call   c0016104 <schedule()>
c001462e:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0014635:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001463c:	75 01                	jne    c001463f <SysYield(regs*)+0x20>
c001463e:	fb                   	sti    
c001463f:	31 c0                	xor    eax,eax
c0014641:	31 d2                	xor    edx,edx
c0014643:	83 c4 0c             	add    esp,0xc
c0014646:	c3                   	ret    

c0014647 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014647:	55                   	push   ebp
c0014648:	57                   	push   edi
c0014649:	56                   	push   esi
c001464a:	53                   	push   ebx
c001464b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014651:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001465c:	74 3b                	je     c0014699 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001465e:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014666:	74 31                	je     c0014699 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014668:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014670:	75 27                	jne    c0014699 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014672:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014679:	05 00 10 00 00       	add    eax,0x1000
c001467e:	89 c2                	mov    edx,eax
c0014680:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014685:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001468c:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014692:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014699:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00146a0:	83 ec 0c             	sub    esp,0xc
c00146a3:	6a 01                	push   0x1
c00146a5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00146ab:	e8 ed e1 ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c00146b0:	83 c4 10             	add    esp,0x10
c00146b3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00146b9:	89 c3                	mov    ebx,eax
c00146bb:	0f 86 27 01 00 00    	jbe    c00147e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00146c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146c9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00146d0:	c1 ee 0c             	shr    esi,0xc
c00146d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00146d7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00146de:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00146e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146e9:	29 ef                	sub    edi,ebp
c00146eb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00146ef:	0f 83 fa 00 00 00    	jae    c00147ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00146f5:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00146fb:	b8 00 10 00 00       	mov    eax,0x1000
c0014700:	0f 47 f8             	cmova  edi,eax
c0014703:	83 ec 0c             	sub    esp,0xc
c0014706:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001470d:	31 d2                	xor    edx,edx
c001470f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014711:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014715:	50                   	push   eax
c0014716:	8d 74 24 30          	lea    esi,[esp+0x30]
c001471a:	56                   	push   esi
c001471b:	52                   	push   edx
c001471c:	57                   	push   edi
c001471d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014724:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014727:	83 c4 20             	add    esp,0x20
c001472a:	85 c0                	test   eax,eax
c001472c:	75 06                	jne    c0014734 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001472e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014732:	74 13                	je     c0014747 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014734:	83 ec 0c             	sub    esp,0xc
c0014737:	53                   	push   ebx
c0014738:	e8 5e e4 ff ff       	call   c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	31 c0                	xor    eax,eax
c0014742:	e9 80 01 00 00       	jmp    c00148c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0014747:	fa                   	cli    
c0014748:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001474e:	e8 69 af ff ff       	call   c000f6bc <Phys::allocatePage()>
c0014753:	6a 07                	push   0x7
c0014755:	53                   	push   ebx
c0014756:	50                   	push   eax
c0014757:	89 c7                	mov    edi,eax
c0014759:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001475e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014761:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014767:	e8 0a e8 ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c001476c:	83 c4 0c             	add    esp,0xc
c001476f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014776:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001477c:	6a 00                	push   0x0
c001477e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014783:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014786:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001478c:	e8 51 e6 ff ff       	call   c0012de2 <VAS::mapOtherVASIn(bool, VAS*)>
c0014791:	58                   	pop    eax
c0014792:	5a                   	pop    edx
c0014793:	68 07 0c 00 00       	push   0xc07
c0014798:	55                   	push   ebp
c0014799:	57                   	push   edi
c001479a:	89 df                	mov    edi,ebx
c001479c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00147a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147a9:	6a 00                	push   0x0
c00147ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147b3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147b9:	e8 0c ea ff ff       	call   c00131ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00147be:	b9 00 10 00 00       	mov    ecx,0x1000
c00147c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147c5:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c00147cc:	83 c4 20             	add    esp,0x20
c00147cf:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c00147d6:	75 01                	jne    c00147d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00147d8:	fb                   	sti    
c00147d9:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147dd:	81 c5 00 10 00 00    	add    ebp,0x1000
c00147e3:	e9 ef fe ff ff       	jmp    c00146d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00147e8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147ef:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147f6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147fc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014802:	0f 86 b1 00 00 00    	jbe    c00148b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0014808:	fa                   	cli    
c0014809:	51                   	push   ecx
c001480a:	31 ff                	xor    edi,edi
c001480c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014813:	c1 ee 0c             	shr    esi,0xc
c0014816:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001481c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014822:	6a 00                	push   0x0
c0014824:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014829:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001482c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014832:	e8 ab e5 ff ff       	call   c0012de2 <VAS::mapOtherVASIn(bool, VAS*)>
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	e8 7d ae ff ff       	call   c000f6bc <Phys::allocatePage()>
c001483f:	47                   	inc    edi
c0014840:	6a 07                	push   0x7
c0014842:	53                   	push   ebx
c0014843:	50                   	push   eax
c0014844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014848:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001484e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014851:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014857:	e8 1a e7 ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c001485c:	58                   	pop    eax
c001485d:	5a                   	pop    edx
c001485e:	68 07 0c 00 00       	push   0xc07
c0014863:	55                   	push   ebp
c0014864:	81 c5 00 10 00 00    	add    ebp,0x1000
c001486a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001486e:	50                   	push   eax
c001486f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014876:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001487c:	6a 00                	push   0x0
c001487e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014883:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014886:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001488c:	e8 39 e9 ff ff       	call   c00131ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014891:	83 c4 1c             	add    esp,0x1c
c0014894:	68 00 10 00 00       	push   0x1000
c0014899:	6a 00                	push   0x0
c001489b:	53                   	push   ebx
c001489c:	e8 4f bc fe ff       	call   c00004f0 <memset>
c00148a1:	83 c4 10             	add    esp,0x10
c00148a4:	39 fe                	cmp    esi,edi
c00148a6:	77 92                	ja     c001483a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c00148a8:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c00148af:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c00148b6:	75 01                	jne    c00148b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00148b8:	fb                   	sti    
c00148b9:	83 ec 0c             	sub    esp,0xc
c00148bc:	53                   	push   ebx
c00148bd:	e8 d9 e2 ff ff       	call   c0012b9b <Virt::freeKernelVirtualPages(unsigned long)>
c00148c2:	83 c4 10             	add    esp,0x10
c00148c5:	b0 01                	mov    al,0x1
c00148c7:	81 c4 2c 10 00 00    	add    esp,0x102c
c00148cd:	5b                   	pop    ebx
c00148ce:	5e                   	pop    esi
c00148cf:	5f                   	pop    edi
c00148d0:	5d                   	pop    ebp
c00148d1:	c3                   	ret    

c00148d2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00148d2:	55                   	push   ebp
c00148d3:	57                   	push   edi
c00148d4:	56                   	push   esi
c00148d5:	53                   	push   ebx
c00148d6:	83 ec 48             	sub    esp,0x48
c00148d9:	68 14 01 00 00       	push   0x114
c00148de:	e8 99 a8 ff ff       	call   c000f17c <malloc>
c00148e3:	83 c4 0c             	add    esp,0xc
c00148e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00148ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00148ee:	89 c7                	mov    edi,eax
c00148f0:	50                   	push   eax
c00148f1:	e8 36 38 ff ff       	call   c000812c <File::File(char const*, Process*)>
c00148f6:	58                   	pop    eax
c00148f7:	5a                   	pop    edx
c00148f8:	6a 01                	push   0x1
c00148fa:	57                   	push   edi
c00148fb:	e8 4a 38 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014900:	83 c4 10             	add    esp,0x10
c0014903:	85 c0                	test   eax,eax
c0014905:	0f 85 4c 01 00 00    	jne    c0014a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001490b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014913:	83 ec 0c             	sub    esp,0xc
c0014916:	6a 34                	push   0x34
c0014918:	e8 5f a8 ff ff       	call   c000f17c <malloc>
c001491d:	89 c3                	mov    ebx,eax
c001491f:	58                   	pop    eax
c0014920:	8b 07                	mov    eax,DWORD PTR [edi]
c0014922:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014926:	56                   	push   esi
c0014927:	53                   	push   ebx
c0014928:	6a 00                	push   0x0
c001492a:	6a 34                	push   0x34
c001492c:	57                   	push   edi
c001492d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014930:	83 c4 20             	add    esp,0x20
c0014933:	85 c0                	test   eax,eax
c0014935:	0f 85 1c 01 00 00    	jne    c0014a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001493b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014941:	0f 85 10 01 00 00    	jne    c0014a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014947:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001494a:	85 c0                	test   eax,eax
c001494c:	0f 84 05 01 00 00    	je     c0014a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014952:	31 d2                	xor    edx,edx
c0014954:	55                   	push   ebp
c0014955:	52                   	push   edx
c0014956:	50                   	push   eax
c0014957:	57                   	push   edi
c0014958:	e8 ab 38 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	85 c0                	test   eax,eax
c0014962:	0f 85 ef 00 00 00    	jne    c0014a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014968:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001496b:	83 ec 0c             	sub    esp,0xc
c001496e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014972:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014976:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001497a:	0f af c2             	imul   eax,edx
c001497d:	50                   	push   eax
c001497e:	e8 f9 a7 ff ff       	call   c000f17c <malloc>
c0014983:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014985:	89 34 24             	mov    DWORD PTR [esp],esi
c0014988:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001498c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014990:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014994:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014998:	0f af c2             	imul   eax,edx
c001499b:	99                   	cdq    
c001499c:	52                   	push   edx
c001499d:	50                   	push   eax
c001499e:	57                   	push   edi
c001499f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149a2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00149a5:	83 c4 20             	add    esp,0x20
c00149a8:	85 c0                	test   eax,eax
c00149aa:	0f 84 a7 00 00 00    	je     c0014a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149b0:	31 d2                	xor    edx,edx
c00149b2:	51                   	push   ecx
c00149b3:	52                   	push   edx
c00149b4:	50                   	push   eax
c00149b5:	57                   	push   edi
c00149b6:	e8 4d 38 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00149bb:	83 c4 10             	add    esp,0x10
c00149be:	85 c0                	test   eax,eax
c00149c0:	0f 85 91 00 00 00    	jne    c0014a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149c6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149ca:	83 ec 0c             	sub    esp,0xc
c00149cd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149d1:	0f af c2             	imul   eax,edx
c00149d4:	50                   	push   eax
c00149d5:	e8 a2 a7 ff ff       	call   c000f17c <malloc>
c00149da:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00149dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00149df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149e7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149eb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149ef:	0f af c2             	imul   eax,edx
c00149f2:	99                   	cdq    
c00149f3:	52                   	push   edx
c00149f4:	50                   	push   eax
c00149f5:	57                   	push   edi
c00149f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149f9:	83 c4 20             	add    esp,0x20
c00149fc:	31 c9                	xor    ecx,ecx
c00149fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a06:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014a0a:	0f b7 e9             	movzx  ebp,cx
c0014a0d:	0f 83 86 00 00 00    	jae    c0014a99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014a13:	c1 e5 05             	shl    ebp,0x5
c0014a16:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014a1a:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014a1e:	75 73                	jne    c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014a20:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a27:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014a2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a2e:	52                   	push   edx
c0014a2f:	31 d2                	xor    edx,edx
c0014a31:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a34:	52                   	push   edx
c0014a35:	50                   	push   eax
c0014a36:	57                   	push   edi
c0014a37:	e8 cc 37 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014a3c:	83 c4 10             	add    esp,0x10
c0014a3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a43:	85 c0                	test   eax,eax
c0014a45:	74 17                	je     c0014a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014a47:	83 ec 0c             	sub    esp,0xc
c0014a4a:	68 66 3d 02 c0       	push   0xc0023d66
c0014a4f:	e8 fa 24 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014a54:	83 c4 10             	add    esp,0x10
c0014a57:	31 c0                	xor    eax,eax
c0014a59:	e9 8b 00 00 00       	jmp    c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014a5e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a62:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014a65:	83 ec 0c             	sub    esp,0xc
c0014a68:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014a6b:	50                   	push   eax
c0014a6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a70:	56                   	push   esi
c0014a71:	57                   	push   edi
c0014a72:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a76:	e8 cc fb ff ff       	call   c0014647 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a7b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014a7f:	83 c4 20             	add    esp,0x20
c0014a82:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014a86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a8a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014a8f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a93:	41                   	inc    ecx
c0014a94:	e9 6d ff ff ff       	jmp    c0014a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014a99:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a9d:	83 ec 0c             	sub    esp,0xc
c0014aa0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014aa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aa8:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014aae:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014ab4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014ab9:	05 00 10 00 00       	add    eax,0x1000
c0014abe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ac5:	e8 c2 a6 ff ff       	call   c000f18c <free>
c0014aca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014acd:	e8 ba a6 ff ff       	call   c000f18c <free>
c0014ad2:	58                   	pop    eax
c0014ad3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ad7:	e8 b0 a6 ff ff       	call   c000f18c <free>
c0014adc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014adf:	e8 c4 36 ff ff       	call   c00081a8 <File::close()>
c0014ae4:	83 c4 10             	add    esp,0x10
c0014ae7:	b0 01                	mov    al,0x1
c0014ae9:	83 c4 3c             	add    esp,0x3c
c0014aec:	5b                   	pop    ebx
c0014aed:	5e                   	pop    esi
c0014aee:	5f                   	pop    edi
c0014aef:	5d                   	pop    ebp
c0014af0:	c3                   	ret    

c0014af1 <Thr::runtimeReferenceHelper()>:
c0014af1:	83 ec 18             	sub    esp,0x18
c0014af4:	68 6e 3d 02 c0       	push   0xc0023d6e
c0014af9:	e8 50 24 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014afe:	fa                   	cli    
c0014aff:	83 c4 10             	add    esp,0x10
c0014b02:	eb fe                	jmp    c0014b02 <Thr::runtimeReferenceHelper()+0x11>

c0014b04 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b04:	57                   	push   edi
c0014b05:	56                   	push   esi
c0014b06:	53                   	push   ebx
c0014b07:	31 db                	xor    ebx,ebx
c0014b09:	39 1d a0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6a0,ebx
c0014b0f:	7e 3c                	jle    c0014b4d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b11:	8b 34 9d 20 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd29e0]
c0014b18:	31 ff                	xor    edi,edi
c0014b1a:	39 3c 9d 20 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2ae0],edi
c0014b21:	7e 27                	jle    c0014b4a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b23:	50                   	push   eax
c0014b24:	50                   	push   eax
c0014b25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b29:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b2b:	03 04 9d a0 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a60]
c0014b32:	50                   	push   eax
c0014b33:	e8 48 bc fe ff       	call   c0000780 <strcmp>
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	85 c0                	test   eax,eax
c0014b3d:	75 05                	jne    c0014b44 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b3f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b42:	eb 0b                	jmp    c0014b4f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b44:	83 c6 10             	add    esi,0x10
c0014b47:	47                   	inc    edi
c0014b48:	eb d0                	jmp    c0014b1a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b4a:	43                   	inc    ebx
c0014b4b:	eb bc                	jmp    c0014b09 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b4d:	31 c0                	xor    eax,eax
c0014b4f:	5b                   	pop    ebx
c0014b50:	5e                   	pop    esi
c0014b51:	5f                   	pop    edi
c0014b52:	c3                   	ret    

c0014b53 <Thr::loadKernelSymbolTable(char const*)>:
c0014b53:	55                   	push   ebp
c0014b54:	57                   	push   edi
c0014b55:	56                   	push   esi
c0014b56:	53                   	push   ebx
c0014b57:	83 ec 68             	sub    esp,0x68
c0014b5a:	68 14 01 00 00       	push   0x114
c0014b5f:	8b 35 f8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6f8
c0014b65:	e8 12 a6 ff ff       	call   c000f17c <malloc>
c0014b6a:	83 c4 0c             	add    esp,0xc
c0014b6d:	56                   	push   esi
c0014b6e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b72:	89 c3                	mov    ebx,eax
c0014b74:	50                   	push   eax
c0014b75:	e8 b2 35 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014b7a:	5e                   	pop    esi
c0014b7b:	5f                   	pop    edi
c0014b7c:	6a 01                	push   0x1
c0014b7e:	53                   	push   ebx
c0014b7f:	e8 c6 35 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	85 c0                	test   eax,eax
c0014b89:	74 0a                	je     c0014b95 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b8b:	83 ec 0c             	sub    esp,0xc
c0014b8e:	68 90 3d 02 c0       	push   0xc0023d90
c0014b93:	eb 34                	jmp    c0014bc9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014b95:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014b9d:	83 ec 0c             	sub    esp,0xc
c0014ba0:	6a 34                	push   0x34
c0014ba2:	e8 d5 a5 ff ff       	call   c000f17c <malloc>
c0014ba7:	59                   	pop    ecx
c0014ba8:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014bac:	89 c7                	mov    edi,eax
c0014bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bb0:	56                   	push   esi
c0014bb1:	57                   	push   edi
c0014bb2:	6a 00                	push   0x0
c0014bb4:	6a 34                	push   0x34
c0014bb6:	53                   	push   ebx
c0014bb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014bba:	83 c4 20             	add    esp,0x20
c0014bbd:	85 c0                	test   eax,eax
c0014bbf:	74 17                	je     c0014bd8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014bc1:	83 ec 0c             	sub    esp,0xc
c0014bc4:	68 a7 3d 02 c0       	push   0xc0023da7
c0014bc9:	e8 f4 a8 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0014bce:	83 c4 10             	add    esp,0x10
c0014bd1:	31 c0                	xor    eax,eax
c0014bd3:	e9 31 02 00 00       	jmp    c0014e09 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014bd8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014bde:	75 e1                	jne    c0014bc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014be0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014be3:	85 c0                	test   eax,eax
c0014be5:	74 da                	je     c0014bc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014be7:	52                   	push   edx
c0014be8:	31 d2                	xor    edx,edx
c0014bea:	52                   	push   edx
c0014beb:	50                   	push   eax
c0014bec:	53                   	push   ebx
c0014bed:	e8 16 36 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014bf2:	83 c4 10             	add    esp,0x10
c0014bf5:	85 c0                	test   eax,eax
c0014bf7:	75 c8                	jne    c0014bc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bf9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bfd:	83 ec 0c             	sub    esp,0xc
c0014c00:	31 ed                	xor    ebp,ebp
c0014c02:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c06:	0f af c2             	imul   eax,edx
c0014c09:	50                   	push   eax
c0014c0a:	e8 6d a5 ff ff       	call   c000f17c <malloc>
c0014c0f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c11:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c24:	0f af c2             	imul   eax,edx
c0014c27:	99                   	cdq    
c0014c28:	52                   	push   edx
c0014c29:	50                   	push   eax
c0014c2a:	53                   	push   ebx
c0014c2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c2e:	83 c4 20             	add    esp,0x20
c0014c31:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c39:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c41:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c51:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014c55:	0f b7 f5             	movzx  esi,bp
c0014c58:	0f 83 a7 00 00 00    	jae    c0014d05 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c5e:	6b f6 28             	imul   esi,esi,0x28
c0014c61:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c65:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c6c:	50                   	push   eax
c0014c6d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c75:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c77:	6b c0 28             	imul   eax,eax,0x28
c0014c7a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c7e:	89 d0                	mov    eax,edx
c0014c80:	31 d2                	xor    edx,edx
c0014c82:	52                   	push   edx
c0014c83:	50                   	push   eax
c0014c84:	53                   	push   ebx
c0014c85:	e8 7e 35 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014c8a:	83 c4 0c             	add    esp,0xc
c0014c8d:	6a 20                	push   0x20
c0014c8f:	6a 00                	push   0x0
c0014c91:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c95:	52                   	push   edx
c0014c96:	e8 55 b8 fe ff       	call   c00004f0 <memset>
c0014c9b:	58                   	pop    eax
c0014c9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c9e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014ca2:	51                   	push   ecx
c0014ca3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014ca7:	52                   	push   edx
c0014ca8:	6a 00                	push   0x0
c0014caa:	6a 1f                	push   0x1f
c0014cac:	53                   	push   ebx
c0014cad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cb0:	83 c4 18             	add    esp,0x18
c0014cb3:	68 be 3d 02 c0       	push   0xc0023dbe
c0014cb8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cbc:	52                   	push   edx
c0014cbd:	e8 be ba fe ff       	call   c0000780 <strcmp>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	85 c0                	test   eax,eax
c0014cc7:	75 0f                	jne    c0014cd8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014cc9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cd8:	50                   	push   eax
c0014cd9:	50                   	push   eax
c0014cda:	68 c6 3d 02 c0       	push   0xc0023dc6
c0014cdf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014ce3:	50                   	push   eax
c0014ce4:	e8 97 ba fe ff       	call   c0000780 <strcmp>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	85 c0                	test   eax,eax
c0014cee:	75 0f                	jne    c0014cff <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014cf0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cff:	45                   	inc    ebp
c0014d00:	e9 4c ff ff ff       	jmp    c0014c51 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d0a:	75 10                	jne    c0014d1c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d0c:	83 ec 0c             	sub    esp,0xc
c0014d0f:	68 ce 3d 02 c0       	push   0xc0023dce
c0014d14:	e8 a9 a7 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0014d19:	83 c4 10             	add    esp,0x10
c0014d1c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d21:	75 10                	jne    c0014d33 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d23:	83 ec 0c             	sub    esp,0xc
c0014d26:	68 ce 3d 02 c0       	push   0xc0023dce
c0014d2b:	e8 92 a7 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0014d30:	83 c4 10             	add    esp,0x10
c0014d33:	50                   	push   eax
c0014d34:	31 d2                	xor    edx,edx
c0014d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d3a:	52                   	push   edx
c0014d3b:	50                   	push   eax
c0014d3c:	53                   	push   ebx
c0014d3d:	e8 c6 34 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014d42:	5a                   	pop    edx
c0014d43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d47:	e8 30 a4 ff ff       	call   c000f17c <malloc>
c0014d4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d50:	31 c9                	xor    ecx,ecx
c0014d52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d58:	5e                   	pop    esi
c0014d59:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d5d:	55                   	push   ebp
c0014d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d62:	51                   	push   ecx
c0014d63:	52                   	push   edx
c0014d64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d68:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014d6c:	53                   	push   ebx
c0014d6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d70:	83 c4 14             	add    esp,0x14
c0014d73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d77:	e8 00 a4 ff ff       	call   c000f17c <malloc>
c0014d7c:	89 c6                	mov    esi,eax
c0014d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d83:	56                   	push   esi
c0014d84:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d8c:	51                   	push   ecx
c0014d8d:	52                   	push   edx
c0014d8e:	53                   	push   ebx
c0014d8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d96:	83 c4 1c             	add    esp,0x1c
c0014d99:	8b 15 a0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a0
c0014d9f:	c1 e8 04             	shr    eax,0x4
c0014da2:	89 04 95 20 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2ae0],eax
c0014da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014dad:	31 d2                	xor    edx,edx
c0014daf:	52                   	push   edx
c0014db0:	50                   	push   eax
c0014db1:	53                   	push   ebx
c0014db2:	e8 51 34 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014db7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014db9:	31 d2                	xor    edx,edx
c0014dbb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014dbe:	56                   	push   esi
c0014dbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dc3:	52                   	push   edx
c0014dc4:	50                   	push   eax
c0014dc5:	53                   	push   ebx
c0014dc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dc9:	83 c4 14             	add    esp,0x14
c0014dcc:	53                   	push   ebx
c0014dcd:	e8 d6 33 ff ff       	call   c00081a8 <File::close()>
c0014dd2:	5d                   	pop    ebp
c0014dd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014dd7:	e8 b0 a3 ff ff       	call   c000f18c <free>
c0014ddc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ddf:	e8 a8 a3 ff ff       	call   c000f18c <free>
c0014de4:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c0014de9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ded:	83 c4 10             	add    esp,0x10
c0014df0:	89 34 85 a0 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a60],esi
c0014df7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dfa:	89 0c 85 20 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29e0],ecx
c0014e01:	b0 01                	mov    al,0x1
c0014e03:	89 15 a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,edx
c0014e09:	83 c4 5c             	add    esp,0x5c
c0014e0c:	5b                   	pop    ebx
c0014e0d:	5e                   	pop    esi
c0014e0e:	5f                   	pop    edi
c0014e0f:	5d                   	pop    ebp
c0014e10:	c3                   	ret    

c0014e11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e11:	55                   	push   ebp
c0014e12:	57                   	push   edi
c0014e13:	56                   	push   esi
c0014e14:	53                   	push   ebx
c0014e15:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e1b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e22:	8b 35 f8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6f8
c0014e28:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014e2c:	68 14 01 00 00       	push   0x114
c0014e31:	e8 46 a3 ff ff       	call   c000f17c <malloc>
c0014e36:	83 c4 0c             	add    esp,0xc
c0014e39:	56                   	push   esi
c0014e3a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e41:	50                   	push   eax
c0014e42:	89 c3                	mov    ebx,eax
c0014e44:	e8 e3 32 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014e49:	5f                   	pop    edi
c0014e4a:	5d                   	pop    ebp
c0014e4b:	6a 01                	push   0x1
c0014e4d:	53                   	push   ebx
c0014e4e:	e8 f7 32 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014e53:	83 c4 10             	add    esp,0x10
c0014e56:	85 c0                	test   eax,eax
c0014e58:	0f 85 b3 06 00 00    	jne    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e5e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	6a 34                	push   0x34
c0014e6b:	e8 0c a3 ff ff       	call   c000f17c <malloc>
c0014e70:	5e                   	pop    esi
c0014e71:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014e75:	89 c5                	mov    ebp,eax
c0014e77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e79:	56                   	push   esi
c0014e7a:	55                   	push   ebp
c0014e7b:	6a 00                	push   0x0
c0014e7d:	6a 34                	push   0x34
c0014e7f:	53                   	push   ebx
c0014e80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e83:	83 c4 20             	add    esp,0x20
c0014e86:	85 c0                	test   eax,eax
c0014e88:	0f 85 83 06 00 00    	jne    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e8e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014e95:	0f 85 76 06 00 00    	jne    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e9b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014e9e:	85 c0                	test   eax,eax
c0014ea0:	0f 84 6b 06 00 00    	je     c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ea6:	31 d2                	xor    edx,edx
c0014ea8:	51                   	push   ecx
c0014ea9:	52                   	push   edx
c0014eaa:	50                   	push   eax
c0014eab:	53                   	push   ebx
c0014eac:	e8 57 33 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014eb1:	83 c4 10             	add    esp,0x10
c0014eb4:	85 c0                	test   eax,eax
c0014eb6:	0f 85 55 06 00 00    	jne    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ebc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014ebf:	83 ec 0c             	sub    esp,0xc
c0014ec2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ec6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014eca:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ece:	0f af c2             	imul   eax,edx
c0014ed1:	50                   	push   eax
c0014ed2:	e8 a5 a2 ff ff       	call   c000f17c <malloc>
c0014ed7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ed9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ee4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ee8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014eec:	0f af c2             	imul   eax,edx
c0014eef:	99                   	cdq    
c0014ef0:	52                   	push   edx
c0014ef1:	50                   	push   eax
c0014ef2:	53                   	push   ebx
c0014ef3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ef6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014ef9:	83 c4 20             	add    esp,0x20
c0014efc:	85 c0                	test   eax,eax
c0014efe:	0f 84 0d 06 00 00    	je     c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f04:	52                   	push   edx
c0014f05:	31 d2                	xor    edx,edx
c0014f07:	52                   	push   edx
c0014f08:	50                   	push   eax
c0014f09:	53                   	push   ebx
c0014f0a:	e8 f9 32 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014f0f:	83 c4 10             	add    esp,0x10
c0014f12:	85 c0                	test   eax,eax
c0014f14:	0f 85 f7 05 00 00    	jne    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f1a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f1e:	83 ec 0c             	sub    esp,0xc
c0014f21:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f25:	0f af c2             	imul   eax,edx
c0014f28:	50                   	push   eax
c0014f29:	e8 4e a2 ff ff       	call   c000f17c <malloc>
c0014f2e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f30:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f3b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f3f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f43:	0f af c2             	imul   eax,edx
c0014f46:	99                   	cdq    
c0014f47:	52                   	push   edx
c0014f48:	50                   	push   eax
c0014f49:	53                   	push   ebx
c0014f4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f4d:	83 c4 20             	add    esp,0x20
c0014f50:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014f56:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014f59:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014f5d:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014f61:	73 78                	jae    c0014fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014f63:	c1 e7 05             	shl    edi,0x5
c0014f66:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014f6a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014f6d:	75 63                	jne    c0014fd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014f6f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014f72:	31 d2                	xor    edx,edx
c0014f74:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f7b:	50                   	push   eax
c0014f7c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014f7f:	52                   	push   edx
c0014f80:	50                   	push   eax
c0014f81:	53                   	push   ebx
c0014f82:	e8 81 32 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	85 c0                	test   eax,eax
c0014f8c:	0f 85 7f 05 00 00    	jne    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f92:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f99:	83 ec 0c             	sub    esp,0xc
c0014f9c:	31 d2                	xor    edx,edx
c0014f9e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014fa2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fa4:	01 c6                	add    esi,eax
c0014fa6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fad:	50                   	push   eax
c0014fae:	56                   	push   esi
c0014faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb3:	52                   	push   edx
c0014fb4:	50                   	push   eax
c0014fb5:	53                   	push   ebx
c0014fb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fb9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014fbc:	83 c4 1c             	add    esp,0x1c
c0014fbf:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014fc2:	50                   	push   eax
c0014fc3:	6a 00                	push   0x0
c0014fc5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014fc9:	56                   	push   esi
c0014fca:	e8 21 b5 fe ff       	call   c00004f0 <memset>
c0014fcf:	83 c4 10             	add    esp,0x10
c0014fd2:	66 ff 04 24          	inc    WORD PTR [esp]
c0014fd6:	e9 7b ff ff ff       	jmp    c0014f56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014fdb:	50                   	push   eax
c0014fdc:	68 00 01 00 00       	push   0x100
c0014fe1:	6a 00                	push   0x0
c0014fe3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014fe7:	50                   	push   eax
c0014fe8:	e8 03 b5 fe ff       	call   c00004f0 <memset>
c0014fed:	83 c4 0c             	add    esp,0xc
c0014ff0:	68 00 01 00 00       	push   0x100
c0014ff5:	6a 00                	push   0x0
c0014ff7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014ffe:	50                   	push   eax
c0014fff:	e8 ec b4 fe ff       	call   c00004f0 <memset>
c0015004:	83 c4 10             	add    esp,0x10
c0015007:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001500e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015015:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001501d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015025:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001502d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015035:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015039:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001503d:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015042:	0f 83 16 01 00 00    	jae    c001515e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015048:	6b ff 28             	imul   edi,edi,0x28
c001504b:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001504f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015052:	51                   	push   ecx
c0015053:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015057:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001505b:	8b 07                	mov    eax,DWORD PTR [edi]
c001505d:	6b d2 28             	imul   edx,edx,0x28
c0015060:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015064:	31 d2                	xor    edx,edx
c0015066:	52                   	push   edx
c0015067:	50                   	push   eax
c0015068:	53                   	push   ebx
c0015069:	e8 9a 31 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001506e:	83 c4 0c             	add    esp,0xc
c0015071:	6a 20                	push   0x20
c0015073:	6a 00                	push   0x0
c0015075:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001507c:	51                   	push   ecx
c001507d:	e8 6e b4 fe ff       	call   c00004f0 <memset>
c0015082:	58                   	pop    eax
c0015083:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015085:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015089:	52                   	push   edx
c001508a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015091:	51                   	push   ecx
c0015092:	6a 00                	push   0x0
c0015094:	6a 1f                	push   0x1f
c0015096:	53                   	push   ebx
c0015097:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001509a:	83 c4 1c             	add    esp,0x1c
c001509d:	6a 09                	push   0x9
c001509f:	68 e8 3d 02 c0       	push   0xc0023de8
c00150a4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150ab:	51                   	push   ecx
c00150ac:	e8 cf b2 fe ff       	call   c0000380 <memcmp>
c00150b1:	83 c4 10             	add    esp,0x10
c00150b4:	85 c0                	test   eax,eax
c00150b6:	75 1a                	jne    c00150d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00150b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00150be:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150c2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150c5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00150cc:	89 d0                	mov    eax,edx
c00150ce:	40                   	inc    eax
c00150cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00150d2:	52                   	push   edx
c00150d3:	6a 09                	push   0x9
c00150d5:	68 f2 3d 02 c0       	push   0xc0023df2
c00150da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150e1:	50                   	push   eax
c00150e2:	e8 99 b2 fe ff       	call   c0000380 <memcmp>
c00150e7:	83 c4 10             	add    esp,0x10
c00150ea:	85 c0                	test   eax,eax
c00150ec:	75 1a                	jne    c0015108 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00150ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150f1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00150f4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150f8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150fb:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015102:	89 c8                	mov    eax,ecx
c0015104:	40                   	inc    eax
c0015105:	89 04 24             	mov    DWORD PTR [esp],eax
c0015108:	50                   	push   eax
c0015109:	50                   	push   eax
c001510a:	68 be 3d 02 c0       	push   0xc0023dbe
c001510f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015116:	50                   	push   eax
c0015117:	e8 64 b6 fe ff       	call   c0000780 <strcmp>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	85 c0                	test   eax,eax
c0015121:	75 0b                	jne    c001512e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015123:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015127:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001512a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001512e:	50                   	push   eax
c001512f:	50                   	push   eax
c0015130:	68 c6 3d 02 c0       	push   0xc0023dc6
c0015135:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001513c:	50                   	push   eax
c001513d:	e8 3e b6 fe ff       	call   c0000780 <strcmp>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	85 c0                	test   eax,eax
c0015147:	75 0b                	jne    c0015154 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015149:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001514d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015150:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015154:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015159:	e9 d7 fe ff ff       	jmp    c0015035 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001515e:	50                   	push   eax
c001515f:	31 d2                	xor    edx,edx
c0015161:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015165:	52                   	push   edx
c0015166:	50                   	push   eax
c0015167:	53                   	push   ebx
c0015168:	e8 9b 30 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001516d:	58                   	pop    eax
c001516e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015172:	e8 05 a0 ff ff       	call   c000f17c <malloc>
c0015177:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015179:	31 d2                	xor    edx,edx
c001517b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001517f:	58                   	pop    eax
c0015180:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015184:	56                   	push   esi
c0015185:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001518d:	52                   	push   edx
c001518e:	50                   	push   eax
c001518f:	53                   	push   ebx
c0015190:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015193:	83 c4 14             	add    esp,0x14
c0015196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001519a:	e8 dd 9f ff ff       	call   c000f17c <malloc>
c001519f:	31 d2                	xor    edx,edx
c00151a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00151a5:	83 c4 0c             	add    esp,0xc
c00151a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ac:	52                   	push   edx
c00151ad:	50                   	push   eax
c00151ae:	53                   	push   ebx
c00151af:	e8 54 30 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00151b4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151b6:	31 d2                	xor    edx,edx
c00151b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00151bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151c3:	52                   	push   edx
c00151c4:	50                   	push   eax
c00151c5:	53                   	push   ebx
c00151c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151c9:	83 c4 20             	add    esp,0x20
c00151cc:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00151d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00151d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00151dd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00151e1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00151e4:	0f 84 2b 03 00 00    	je     c0015515 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00151ea:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00151f1:	31 d2                	xor    edx,edx
c00151f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151f7:	c1 e8 03             	shr    eax,0x3
c00151fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00151fe:	51                   	push   ecx
c00151ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015203:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015207:	52                   	push   edx
c0015208:	50                   	push   eax
c0015209:	53                   	push   ebx
c001520a:	e8 f9 2f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001520f:	5e                   	pop    esi
c0015210:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015214:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001521b:	e8 5c 9f ff ff       	call   c000f17c <malloc>
c0015220:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015222:	31 d2                	xor    edx,edx
c0015224:	89 c7                	mov    edi,eax
c0015226:	58                   	pop    eax
c0015227:	8d 44 24 58          	lea    eax,[esp+0x58]
c001522b:	50                   	push   eax
c001522c:	57                   	push   edi
c001522d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015231:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015238:	52                   	push   edx
c0015239:	50                   	push   eax
c001523a:	53                   	push   ebx
c001523b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001523e:	83 c4 20             	add    esp,0x20
c0015241:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015249:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001524d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015251:	0f 8d a5 02 00 00    	jge    c00154fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015257:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001525c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015260:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015263:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015267:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001526b:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001526f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015273:	c1 e8 08             	shr    eax,0x8
c0015276:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001527a:	89 c2                	mov    edx,eax
c001527c:	c1 e2 04             	shl    edx,0x4
c001527f:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015283:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015286:	85 f6                	test   esi,esi
c0015288:	0f 85 cf 00 00 00    	jne    c001535d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001528e:	83 ec 0c             	sub    esp,0xc
c0015291:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015299:	03 02                	add    eax,DWORD PTR [edx]
c001529b:	50                   	push   eax
c001529c:	e8 63 f8 ff ff       	call   c0014b04 <Thr::getAddressOfKernelSymbol(char const*)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152a8:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00152ad:	85 c0                	test   eax,eax
c00152af:	89 c6                	mov    esi,eax
c00152b1:	0f 85 a6 00 00 00    	jne    c001535d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152b7:	83 ec 0c             	sub    esp,0xc
c00152ba:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00152be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152c2:	03 02                	add    eax,DWORD PTR [edx]
c00152c4:	50                   	push   eax
c00152c5:	e8 82 ac ff ff       	call   c000ff4c <KeResolveCompatibilitySymbol(char*)>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152d1:	85 c0                	test   eax,eax
c00152d3:	89 c6                	mov    esi,eax
c00152d5:	0f 85 82 00 00 00    	jne    c001535d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152db:	50                   	push   eax
c00152dc:	50                   	push   eax
c00152dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152e1:	03 02                	add    eax,DWORD PTR [edx]
c00152e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00152e7:	50                   	push   eax
c00152e8:	68 fc 3d 02 c0       	push   0xc0023dfc
c00152ed:	e8 5c 1c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00152f2:	58                   	pop    eax
c00152f3:	5a                   	pop    edx
c00152f4:	68 16 3e 02 c0       	push   0xc0023e16
c00152f9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015300:	51                   	push   ecx
c0015301:	e8 4a b3 fe ff       	call   c0000650 <strcpy>
c0015306:	59                   	pop    ecx
c0015307:	58                   	pop    eax
c0015308:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001530c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015310:	03 02                	add    eax,DWORD PTR [edx]
c0015312:	50                   	push   eax
c0015313:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001531a:	51                   	push   ecx
c001531b:	e8 50 b5 fe ff       	call   c0000870 <strcat>
c0015320:	58                   	pop    eax
c0015321:	5a                   	pop    edx
c0015322:	68 b0 3e 02 c0       	push   0xc0023eb0
c0015327:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001532e:	51                   	push   ecx
c001532f:	e8 3c b5 fe ff       	call   c0000870 <strcat>
c0015334:	83 c4 10             	add    esp,0x10
c0015337:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001533c:	0f 84 77 01 00 00    	je     c00154b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001534c:	51                   	push   ecx
c001534d:	e8 70 a1 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015359:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001535d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015362:	83 f8 01             	cmp    eax,0x1
c0015365:	0f 85 9b 00 00 00    	jne    c0015406 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001536b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001536f:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015376:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001537a:	01 d0                	add    eax,edx
c001537c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015384:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015388:	0f 94 c0             	sete   al
c001538b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015393:	0f 94 c1             	sete   cl
c0015396:	09 c1                	or     ecx,eax
c0015398:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001539c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00153a1:	0f b6 c9             	movzx  ecx,cl
c00153a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a6:	74 41                	je     c00153e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00153a8:	8d 14 06             	lea    edx,[esi+eax*1]
c00153ab:	85 c9                	test   ecx,ecx
c00153ad:	75 15                	jne    c00153c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00153af:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153b3:	66 83 f8 0c          	cmp    ax,0xc
c00153b7:	76 05                	jbe    c00153be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00153b9:	b8 0c 00 00 00       	mov    eax,0xc
c00153be:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153c2:	76 37                	jbe    c00153fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153c4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00153c9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00153cd:	0f 84 e6 00 00 00    	je     c00154b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153d3:	83 ec 0c             	sub    esp,0xc
c00153d6:	68 2d 3e 02 c0       	push   0xc0023e2d
c00153db:	e8 e2 a0 ff ff       	call   c000f4c2 <KePanic(char const*)>
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153e7:	eb 12                	jmp    c00153fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153e9:	01 c2                	add    edx,eax
c00153eb:	85 c9                	test   ecx,ecx
c00153ed:	75 0c                	jne    c00153fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153ef:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153f3:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153f7:	77 02                	ja     c00153fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153f9:	01 f2                	add    edx,esi
c00153fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153ff:	89 10                	mov    DWORD PTR [eax],edx
c0015401:	e9 ed 00 00 00       	jmp    c00154f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015406:	83 f8 02             	cmp    eax,0x2
c0015409:	0f 85 81 00 00 00    	jne    c0015490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001540f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015416:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001541a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001541e:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015426:	74 21                	je     c0015449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015428:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015430:	74 17                	je     c0015449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015432:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015436:	ba 0a 00 00 00       	mov    edx,0xa
c001543b:	83 f9 0e             	cmp    ecx,0xe
c001543e:	77 03                	ja     c0015443 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015440:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015443:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015447:	76 1f                	jbe    c0015468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015449:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001544e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015452:	74 65                	je     c00154b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015454:	83 ec 0c             	sub    esp,0xc
c0015457:	68 49 3e 02 c0       	push   0xc0023e49
c001545c:	e8 61 a0 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015468:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001546d:	8b 10                	mov    edx,DWORD PTR [eax]
c001546f:	74 15                	je     c0015486 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015471:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015475:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001547c:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015480:	01 d1                	add    ecx,edx
c0015482:	01 ce                	add    esi,ecx
c0015484:	eb 06                	jmp    c001548c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015486:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001548a:	01 d6                	add    esi,edx
c001548c:	89 30                	mov    DWORD PTR [eax],esi
c001548e:	eb 63                	jmp    c00154f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015490:	56                   	push   esi
c0015491:	56                   	push   esi
c0015492:	50                   	push   eax
c0015493:	68 65 3e 02 c0       	push   0xc0023e65
c0015498:	e8 b1 1a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154a5:	74 12                	je     c00154b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154a7:	83 ec 0c             	sub    esp,0xc
c00154aa:	68 70 3e 02 c0       	push   0xc0023e70
c00154af:	e8 0e a0 ff ff       	call   c000f4c2 <KePanic(char const*)>
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	eb 3a                	jmp    c00154f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154b9:	83 ec 0c             	sub    esp,0xc
c00154bc:	53                   	push   ebx
c00154bd:	e8 e6 2c ff ff       	call   c00081a8 <File::close()>
c00154c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154cd:	e8 ba 9c ff ff       	call   c000f18c <free>
c00154d2:	59                   	pop    ecx
c00154d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154d7:	e8 b0 9c ff ff       	call   c000f18c <free>
c00154dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154df:	e8 a8 9c ff ff       	call   c000f18c <free>
c00154e4:	5b                   	pop    ebx
c00154e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154e9:	e8 9e 9c ff ff       	call   c000f18c <free>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	eb 1e                	jmp    c0015511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00154f3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00154f7:	e9 4d fd ff ff       	jmp    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	57                   	push   edi
c0015500:	e8 87 9c ff ff       	call   c000f18c <free>
c0015505:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	e9 cc fc ff ff       	jmp    c00151dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015511:	31 c0                	xor    eax,eax
c0015513:	eb 32                	jmp    c0015547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015515:	83 ec 0c             	sub    esp,0xc
c0015518:	53                   	push   ebx
c0015519:	e8 8a 2c ff ff       	call   c00081a8 <File::close()>
c001551e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015520:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015523:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015526:	58                   	pop    eax
c0015527:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001552b:	e8 5c 9c ff ff       	call   c000f18c <free>
c0015530:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015533:	e8 54 9c ff ff       	call   c000f18c <free>
c0015538:	5a                   	pop    edx
c0015539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001553d:	e8 4a 9c ff ff       	call   c000f18c <free>
c0015542:	83 c4 10             	add    esp,0x10
c0015545:	b0 01                	mov    al,0x1
c0015547:	81 c4 5c 03 00 00    	add    esp,0x35c
c001554d:	5b                   	pop    ebx
c001554e:	5e                   	pop    esi
c001554f:	5f                   	pop    edi
c0015550:	5d                   	pop    ebp
c0015551:	c3                   	ret    

c0015552 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015552:	56                   	push   esi
c0015553:	31 d2                	xor    edx,edx
c0015555:	53                   	push   ebx
c0015556:	8b 1d 00 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf00
c001555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015560:	39 d3                	cmp    ebx,edx
c0015562:	7e 1b                	jle    c001557f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015564:	8b 04 95 20 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2ee0]
c001556b:	39 c8                	cmp    eax,ecx
c001556d:	77 0d                	ja     c001557c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001556f:	8b 34 95 20 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd30e0]
c0015576:	01 c6                	add    esi,eax
c0015578:	39 ce                	cmp    esi,ecx
c001557a:	77 05                	ja     c0015581 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001557c:	42                   	inc    edx
c001557d:	eb e1                	jmp    c0015560 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001557f:	31 c0                	xor    eax,eax
c0015581:	5b                   	pop    ebx
c0015582:	5e                   	pop    esi
c0015583:	c3                   	ret    

c0015584 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015584:	53                   	push   ebx
c0015585:	8b 1d 00 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf00
c001558b:	31 c0                	xor    eax,eax
c001558d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015591:	39 c3                	cmp    ebx,eax
c0015593:	7e 22                	jle    c00155b7 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015595:	8b 14 85 20 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ee0]
c001559c:	39 ca                	cmp    edx,ecx
c001559e:	77 14                	ja     c00155b4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155a0:	03 14 85 20 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd30e0]
c00155a7:	39 ca                	cmp    edx,ecx
c00155a9:	76 09                	jbe    c00155b4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155ab:	8b 04 85 20 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ce0]
c00155b2:	eb 05                	jmp    c00155b9 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00155b4:	40                   	inc    eax
c00155b5:	eb da                	jmp    c0015591 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00155b7:	31 c0                	xor    eax,eax
c00155b9:	5b                   	pop    ebx
c00155ba:	c3                   	ret    

c00155bb <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00155bb:	53                   	push   ebx
c00155bc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00155c0:	53                   	push   ebx
c00155c1:	e8 8c ff ff ff       	call   c0015552 <Thr::getDriverBaseFromAddress(unsigned long)>
c00155c6:	5a                   	pop    edx
c00155c7:	31 d2                	xor    edx,edx
c00155c9:	85 c0                	test   eax,eax
c00155cb:	74 04                	je     c00155d1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00155cd:	89 da                	mov    edx,ebx
c00155cf:	29 c2                	sub    edx,eax
c00155d1:	5b                   	pop    ebx
c00155d2:	89 d0                	mov    eax,edx
c00155d4:	c3                   	ret    

c00155d5 <Thr::loadDLL(char const*, bool)>:
c00155d5:	55                   	push   ebp
c00155d6:	57                   	push   edi
c00155d7:	56                   	push   esi
c00155d8:	53                   	push   ebx
c00155d9:	81 ec 34 01 00 00    	sub    esp,0x134
c00155df:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00155e6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00155ed:	56                   	push   esi
c00155ee:	68 88 3e 02 c0       	push   0xc0023e88
c00155f3:	e8 56 19 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00155f8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155ff:	e8 78 9b ff ff       	call   c000f17c <malloc>
c0015604:	83 c4 0c             	add    esp,0xc
c0015607:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c001560d:	56                   	push   esi
c001560e:	50                   	push   eax
c001560f:	89 c3                	mov    ebx,eax
c0015611:	e8 16 2b ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015616:	83 c4 10             	add    esp,0x10
c0015619:	85 db                	test   ebx,ebx
c001561b:	75 3c                	jne    c0015659 <Thr::loadDLL(char const*, bool)+0x84>
c001561d:	89 e8                	mov    eax,ebp
c001561f:	84 c0                	test   al,al
c0015621:	0f 84 02 02 00 00    	je     c0015829 <Thr::loadDLL(char const*, bool)+0x254>
c0015627:	50                   	push   eax
c0015628:	50                   	push   eax
c0015629:	68 99 3e 02 c0       	push   0xc0023e99
c001562e:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015632:	57                   	push   edi
c0015633:	e8 18 b0 fe ff       	call   c0000650 <strcpy>
c0015638:	58                   	pop    eax
c0015639:	5a                   	pop    edx
c001563a:	56                   	push   esi
c001563b:	57                   	push   edi
c001563c:	e8 2f b2 fe ff       	call   c0000870 <strcat>
c0015641:	59                   	pop    ecx
c0015642:	58                   	pop    eax
c0015643:	68 b0 3e 02 c0       	push   0xc0023eb0
c0015648:	57                   	push   edi
c0015649:	e8 22 b2 fe ff       	call   c0000870 <strcat>
c001564e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015651:	e8 6c 9e ff ff       	call   c000f4c2 <KePanic(char const*)>
c0015656:	83 c4 10             	add    esp,0x10
c0015659:	50                   	push   eax
c001565a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001565e:	50                   	push   eax
c001565f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015663:	50                   	push   eax
c0015664:	53                   	push   ebx
c0015665:	e8 e2 2d ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001566a:	83 c4 10             	add    esp,0x10
c001566d:	85 db                	test   ebx,ebx
c001566f:	89 c7                	mov    edi,eax
c0015671:	74 0c                	je     c001567f <Thr::loadDLL(char const*, bool)+0xaa>
c0015673:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015675:	83 ec 0c             	sub    esp,0xc
c0015678:	53                   	push   ebx
c0015679:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001567c:	83 c4 10             	add    esp,0x10
c001567f:	83 ec 0c             	sub    esp,0xc
c0015682:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0015687:	50                   	push   eax
c0015688:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001568c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015690:	57                   	push   edi
c0015691:	68 b2 3e 02 c0       	push   0xc0023eb2
c0015696:	e8 b3 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001569b:	83 c4 20             	add    esp,0x20
c001569e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00156a3:	75 0a                	jne    c00156af <Thr::loadDLL(char const*, bool)+0xda>
c00156a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156a9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00156ad:	75 3e                	jne    c00156ed <Thr::loadDLL(char const*, bool)+0x118>
c00156af:	89 e8                	mov    eax,ebp
c00156b1:	31 db                	xor    ebx,ebx
c00156b3:	84 c0                	test   al,al
c00156b5:	0f 84 6e 01 00 00    	je     c0015829 <Thr::loadDLL(char const*, bool)+0x254>
c00156bb:	50                   	push   eax
c00156bc:	50                   	push   eax
c00156bd:	68 d3 3e 02 c0       	push   0xc0023ed3
c00156c2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156c6:	53                   	push   ebx
c00156c7:	e8 84 af fe ff       	call   c0000650 <strcpy>
c00156cc:	58                   	pop    eax
c00156cd:	5a                   	pop    edx
c00156ce:	56                   	push   esi
c00156cf:	53                   	push   ebx
c00156d0:	e8 9b b1 fe ff       	call   c0000870 <strcat>
c00156d5:	59                   	pop    ecx
c00156d6:	5f                   	pop    edi
c00156d7:	68 b0 3e 02 c0       	push   0xc0023eb0
c00156dc:	53                   	push   ebx
c00156dd:	e8 8e b1 fe ff       	call   c0000870 <strcat>
c00156e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156e5:	e8 d8 9d ff ff       	call   c000f4c2 <KePanic(char const*)>
c00156ea:	83 c4 10             	add    esp,0x10
c00156ed:	53                   	push   ebx
c00156ee:	6a 03                	push   0x3
c00156f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156f8:	05 ff 0f 00 00       	add    eax,0xfff
c00156fd:	83 d2 00             	adc    edx,0x0
c0015700:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015704:	50                   	push   eax
c0015705:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001570b:	e8 6e d9 ff ff       	call   c001307e <VAS::allocatePages(int, int)>
c0015710:	89 c3                	mov    ebx,eax
c0015712:	58                   	pop    eax
c0015713:	5a                   	pop    edx
c0015714:	53                   	push   ebx
c0015715:	68 de 31 02 c0       	push   0xc00231de
c001571a:	e8 2f 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001571f:	89 34 24             	mov    DWORD PTR [esp],esi
c0015722:	e8 59 ae fe ff       	call   c0000580 <strlen>
c0015727:	8b 3d 00 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf00
c001572d:	40                   	inc    eax
c001572e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015731:	e8 46 9a ff ff       	call   c000f17c <malloc>
c0015736:	59                   	pop    ecx
c0015737:	89 04 bd 20 d3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2ce0],eax
c001573e:	a1 00 cf 02 c0       	mov    eax,ds:0xc002cf00
c0015743:	5f                   	pop    edi
c0015744:	56                   	push   esi
c0015745:	ff 34 85 20 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2ce0]
c001574c:	e8 ff ae fe ff       	call   c0000650 <strcpy>
c0015751:	a1 00 cf 02 c0       	mov    eax,ds:0xc002cf00
c0015756:	89 1c 85 20 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ee0],ebx
c001575d:	8d 50 01             	lea    edx,[eax+0x1]
c0015760:	89 15 00 cf 02 c0    	mov    DWORD PTR ds:0xc002cf00,edx
c0015766:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001576a:	83 c4 0c             	add    esp,0xc
c001576d:	6a 01                	push   0x1
c001576f:	53                   	push   ebx
c0015770:	56                   	push   esi
c0015771:	89 14 85 20 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd30e0],edx
c0015778:	e8 94 f6 ff ff       	call   c0014e11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	89 c7                	mov    edi,eax
c0015782:	89 f8                	mov    eax,edi
c0015784:	83 f0 01             	xor    eax,0x1
c0015787:	84 c0                	test   al,al
c0015789:	74 18                	je     c00157a3 <Thr::loadDLL(char const*, bool)+0x1ce>
c001578b:	89 e8                	mov    eax,ebp
c001578d:	84 c0                	test   al,al
c001578f:	74 12                	je     c00157a3 <Thr::loadDLL(char const*, bool)+0x1ce>
c0015791:	83 ec 0c             	sub    esp,0xc
c0015794:	68 ec 3e 02 c0       	push   0xc0023eec
c0015799:	e8 24 9d ff ff       	call   c000f4c2 <KePanic(char const*)>
c001579e:	83 c4 10             	add    esp,0x10
c00157a1:	eb 06                	jmp    c00157a9 <Thr::loadDLL(char const*, bool)+0x1d4>
c00157a3:	89 f8                	mov    eax,edi
c00157a5:	84 c0                	test   al,al
c00157a7:	75 10                	jne    c00157b9 <Thr::loadDLL(char const*, bool)+0x1e4>
c00157a9:	83 ec 0c             	sub    esp,0xc
c00157ac:	68 0b 3f 02 c0       	push   0xc0023f0b
c00157b1:	e8 0c 9d ff ff       	call   c000f4c2 <KePanic(char const*)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	31 f6                	xor    esi,esi
c00157bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00157c3:	05 ff 0f 00 00       	add    eax,0xfff
c00157c8:	83 d2 00             	adc    edx,0x0
c00157cb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00157d3:	c1 ea 0c             	shr    edx,0xc
c00157d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00157da:	ba 00 00 00 00       	mov    edx,0x0
c00157df:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00157e3:	89 d0                	mov    eax,edx
c00157e5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00157e9:	73 32                	jae    c001581d <Thr::loadDLL(char const*, bool)+0x248>
c00157eb:	50                   	push   eax
c00157ec:	50                   	push   eax
c00157ed:	89 f0                	mov    eax,esi
c00157ef:	c1 e0 0c             	shl    eax,0xc
c00157f2:	01 d8                	add    eax,ebx
c00157f4:	50                   	push   eax
c00157f5:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c00157fb:	e8 7c d3 ff ff       	call   c0012b7c <VAS::getPageTableEntry(unsigned long)>
c0015800:	83 c4 10             	add    esp,0x10
c0015803:	8b 00                	mov    eax,DWORD PTR [eax]
c0015805:	a8 60                	test   al,0x60
c0015807:	75 11                	jne    c001581a <Thr::loadDLL(char const*, bool)+0x245>
c0015809:	83 ec 0c             	sub    esp,0xc
c001580c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015811:	50                   	push   eax
c0015812:	e8 3c 9e ff ff       	call   c000f653 <Phys::freePage(unsigned long)>
c0015817:	83 c4 10             	add    esp,0x10
c001581a:	46                   	inc    esi
c001581b:	eb 9e                	jmp    c00157bb <Thr::loadDLL(char const*, bool)+0x1e6>
c001581d:	89 f8                	mov    eax,edi
c001581f:	84 c0                	test   al,al
c0015821:	b8 00 00 00 00       	mov    eax,0x0
c0015826:	0f 44 d8             	cmove  ebx,eax
c0015829:	81 c4 2c 01 00 00    	add    esp,0x12c
c001582f:	89 d8                	mov    eax,ebx
c0015831:	5b                   	pop    ebx
c0015832:	5e                   	pop    esi
c0015833:	5f                   	pop    edi
c0015834:	5d                   	pop    ebp
c0015835:	c3                   	ret    

c0015836 <Thr::executeDLL(unsigned long, void*)>:
c0015836:	56                   	push   esi
c0015837:	53                   	push   ebx
c0015838:	52                   	push   edx
c0015839:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001583d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015841:	85 db                	test   ebx,ebx
c0015843:	75 10                	jne    c0015855 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015845:	83 ec 0c             	sub    esp,0xc
c0015848:	68 27 3f 02 c0       	push   0xc0023f27
c001584d:	e8 70 9c ff ff       	call   c000f4c2 <KePanic(char const*)>
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	50                   	push   eax
c0015856:	50                   	push   eax
c0015857:	53                   	push   ebx
c0015858:	68 51 3f 02 c0       	push   0xc0023f51
c001585d:	e8 ec 16 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015862:	89 d8                	mov    eax,ebx
c0015864:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015868:	83 c4 14             	add    esp,0x14
c001586b:	5b                   	pop    ebx
c001586c:	5e                   	pop    esi
c001586d:	ff e0                	jmp    eax

c001586f <KeProcessExec(Process*, char const*)>:
c001586f:	56                   	push   esi
c0015870:	53                   	push   ebx
c0015871:	83 ec 04             	sub    esp,0x4
c0015874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015878:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c001587e:	85 f6                	test   esi,esi
c0015880:	74 16                	je     c0015898 <KeProcessExec(Process*, char const*)+0x29>
c0015882:	83 ec 0c             	sub    esp,0xc
c0015885:	56                   	push   esi
c0015886:	e8 83 d5 ff ff       	call   c0012e0e <VAS::~VAS()>
c001588b:	58                   	pop    eax
c001588c:	5a                   	pop    edx
c001588d:	6a 14                	push   0x14
c001588f:	56                   	push   esi
c0015890:	e8 5e 70 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0015895:	83 c4 10             	add    esp,0x10
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	6a 14                	push   0x14
c001589d:	e8 da 98 ff ff       	call   c000f17c <malloc>
c00158a2:	89 c6                	mov    esi,eax
c00158a4:	58                   	pop    eax
c00158a5:	5a                   	pop    edx
c00158a6:	6a 00                	push   0x0
c00158a8:	56                   	push   esi
c00158a9:	e8 0c da ff ff       	call   c00132ba <VAS::VAS(bool)>
c00158ae:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c00158b4:	59                   	pop    ecx
c00158b5:	5e                   	pop    esi
c00158b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158ba:	50                   	push   eax
c00158bb:	53                   	push   ebx
c00158bc:	e8 11 f0 ff ff       	call   c00148d2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00158c1:	83 c4 14             	add    esp,0x14
c00158c4:	31 c0                	xor    eax,eax
c00158c6:	5b                   	pop    ebx
c00158c7:	5e                   	pop    esi
c00158c8:	c3                   	ret    
c00158c9:	66 90                	xchg   ax,ax
c00158cb:	90                   	nop

c00158cc <userModeEntryPoint(void*)>:
c00158cc:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00158d4:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00158d9:	85 c0                	test   eax,eax
c00158db:	75 03                	jne    c00158e0 <userModeEntryPoint(void*)+0x14>
c00158dd:	fb                   	sti    
c00158de:	66 90                	xchg   ax,ax
c00158e0:	fb                   	sti    
c00158e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158e9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158f3:	e9 47 a9 fe ff       	jmp    c000023f <goToUsermode>

c00158f8 <changeTSS>:
c00158f8:	83 ec 14             	sub    esp,0x14
c00158fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015900:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015903:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015908:	c1 e2 15             	shl    edx,0x15
c001590b:	29 d0                	sub    eax,edx
c001590d:	50                   	push   eax
c001590e:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0015913:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015919:	05 68 11 00 00       	add    eax,0x1168
c001591e:	50                   	push   eax
c001591f:	e8 2c c8 ff ff       	call   c0012150 <TSS::setESP(unsigned long)>
c0015924:	83 c4 1c             	add    esp,0x1c
c0015927:	c3                   	ret    

c0015928 <switchToThread(ThreadControlBlock*)>:
c0015928:	57                   	push   edi
c0015929:	8b 0d cc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6cc
c001592f:	56                   	push   esi
c0015930:	53                   	push   ebx
c0015931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015935:	85 c9                	test   ecx,ecx
c0015937:	0f 85 8b 00 00 00    	jne    c00159c8 <switchToThread(ThreadControlBlock*)+0xa0>
c001593d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015941:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015947:	74 7b                	je     c00159c4 <switchToThread(ThreadControlBlock*)+0x9c>
c0015949:	b8 00 04 00 00       	mov    eax,0x400
c001594e:	29 d0                	sub    eax,edx
c0015950:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015953:	d1 f8                	sar    eax,1
c0015955:	01 d0                	add    eax,edx
c0015957:	90                   	nop
c0015958:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001595b:	e8 3f 38 00 00       	call   c001919f <HalQueryPerformanceCounter()>
c0015960:	a3 10 d7 02 c0       	mov    ds:0xc002d710,eax
c0015965:	89 c6                	mov    esi,eax
c0015967:	89 d7                	mov    edi,edx
c0015969:	2b 35 00 d7 02 c0    	sub    esi,DWORD PTR ds:0xc002d700
c001596f:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c0015974:	1b 3d 04 d7 02 c0    	sbb    edi,DWORD PTR ds:0xc002d704
c001597a:	89 35 08 d7 02 c0    	mov    DWORD PTR ds:0xc002d708,esi
c0015980:	89 15 14 d7 02 c0    	mov    DWORD PTR ds:0xc002d714,edx
c0015986:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001598c:	89 15 04 d7 02 c0    	mov    DWORD PTR ds:0xc002d704,edx
c0015992:	89 3d 0c d7 02 c0    	mov    DWORD PTR ds:0xc002d70c,edi
c0015998:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001599b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001599e:	01 c6                	add    esi,eax
c00159a0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00159a3:	11 d7                	adc    edi,edx
c00159a5:	83 ec 0c             	sub    esp,0xc
c00159a8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00159ab:	53                   	push   ebx
c00159ac:	e8 c6 a8 fe ff       	call   c0000277 <switchToThreadASM>
c00159b1:	0f 20 c0             	mov    eax,cr0
c00159b4:	83 c8 08             	or     eax,0x8
c00159b7:	0f 22 c0             	mov    cr0,eax
c00159ba:	83 c4 10             	add    esp,0x10
c00159bd:	5b                   	pop    ebx
c00159be:	5e                   	pop    esi
c00159bf:	5f                   	pop    edi
c00159c0:	c3                   	ret    
c00159c1:	8d 76 00             	lea    esi,[esi+0x0]
c00159c4:	31 c0                	xor    eax,eax
c00159c6:	eb 90                	jmp    c0015958 <switchToThread(ThreadControlBlock*)+0x30>
c00159c8:	5b                   	pop    ebx
c00159c9:	c7 05 c8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x1
c00159d3:	5e                   	pop    esi
c00159d4:	5f                   	pop    edi
c00159d5:	c3                   	ret    
c00159d6:	66 90                	xchg   ax,ax

c00159d8 <Process::addArgs(char**)>:
c00159d8:	57                   	push   edi
c00159d9:	56                   	push   esi
c00159da:	53                   	push   ebx
c00159db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00159df:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00159e3:	85 f6                	test   esi,esi
c00159e5:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00159ef:	74 4f                	je     c0015a40 <Process::addArgs(char**)+0x68>
c00159f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00159f3:	85 c0                	test   eax,eax
c00159f5:	74 49                	je     c0015a40 <Process::addArgs(char**)+0x68>
c00159f7:	31 db                	xor    ebx,ebx
c00159f9:	8d 76 00             	lea    esi,[esi+0x0]
c00159fc:	83 ec 0c             	sub    esp,0xc
c00159ff:	50                   	push   eax
c0015a00:	e8 7b ab fe ff       	call   c0000580 <strlen>
c0015a05:	83 c0 01             	add    eax,0x1
c0015a08:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a0b:	e8 6c 97 ff ff       	call   c000f17c <malloc>
c0015a10:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015a17:	5a                   	pop    edx
c0015a18:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015a1b:	83 c3 01             	add    ebx,0x1
c0015a1e:	59                   	pop    ecx
c0015a1f:	52                   	push   edx
c0015a20:	50                   	push   eax
c0015a21:	e8 2a ac fe ff       	call   c0000650 <strcpy>
c0015a26:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015a2c:	83 c4 10             	add    esp,0x10
c0015a2f:	83 c1 01             	add    ecx,0x1
c0015a32:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015a38:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015a3b:	85 c0                	test   eax,eax
c0015a3d:	75 bd                	jne    c00159fc <Process::addArgs(char**)+0x24>
c0015a3f:	90                   	nop
c0015a40:	5b                   	pop    ebx
c0015a41:	5e                   	pop    esi
c0015a42:	5f                   	pop    edi
c0015a43:	c3                   	ret    

c0015a44 <Process::Process(char const*, Process*, char**)>:
c0015a44:	56                   	push   esi
c0015a45:	53                   	push   ebx
c0015a46:	83 ec 14             	sub    esp,0x14
c0015a49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a4d:	05 0c 02 00 00       	add    eax,0x20c
c0015a52:	bb 07 00 00 00       	mov    ebx,0x7
c0015a57:	89 c6                	mov    esi,eax
c0015a59:	8d 76 00             	lea    esi,[esi+0x0]
c0015a5c:	85 db                	test   ebx,ebx
c0015a5e:	78 14                	js     c0015a74 <Process::Process(char const*, Process*, char**)+0x30>
c0015a60:	83 ec 0c             	sub    esp,0xc
c0015a63:	56                   	push   esi
c0015a64:	e8 d7 b8 00 00       	call   c0021340 <ThreadControlBlock::ThreadControlBlock()>
c0015a69:	83 c4 10             	add    esp,0x10
c0015a6c:	83 c6 5f             	add    esi,0x5f
c0015a6f:	83 eb 01             	sub    ebx,0x1
c0015a72:	eb e8                	jmp    c0015a5c <Process::Process(char const*, Process*, char**)+0x18>
c0015a74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a78:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a83:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a8a:	83 ec 0c             	sub    esp,0xc
c0015a8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a91:	e8 5a 83 ff ff       	call   c000ddf0 <KeNewProcessEnv(Process*)>
c0015a96:	83 c4 10             	add    esp,0x10
c0015a99:	89 c2                	mov    edx,eax
c0015a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a9f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015ab2:	a1 5c 58 02 c0       	mov    eax,ds:0xc002585c
c0015ab7:	8d 50 01             	lea    edx,[eax+0x1]
c0015aba:	89 15 5c 58 02 c0    	mov    DWORD PTR ds:0xc002585c,edx
c0015ac0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ac4:	89 02                	mov    DWORD PTR [edx],eax
c0015ac6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015ace:	83 ec 0c             	sub    esp,0xc
c0015ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ad5:	e8 a2 96 ff ff       	call   c000f17c <malloc>
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	89 c3                	mov    ebx,eax
c0015adf:	83 ec 08             	sub    esp,0x8
c0015ae2:	6a 00                	push   0x0
c0015ae4:	53                   	push   ebx
c0015ae5:	e8 d0 d7 ff ff       	call   c00132ba <VAS::VAS(bool)>
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015afb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b0d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b13:	e8 63 aa ff ff       	call   c001057b <KeInitSignals()>
c0015b18:	89 c2                	mov    edx,eax
c0015b1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b2e:	85 c0                	test   eax,eax
c0015b30:	74 42                	je     c0015b74 <Process::Process(char const*, Process*, char**)+0x130>
c0015b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b36:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b3c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b46:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b56:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b60:	05 0c 01 00 00       	add    eax,0x10c
c0015b65:	83 ec 08             	sub    esp,0x8
c0015b68:	52                   	push   edx
c0015b69:	50                   	push   eax
c0015b6a:	e8 e1 aa fe ff       	call   c0000650 <strcpy>
c0015b6f:	83 c4 10             	add    esp,0x10
c0015b72:	eb 7c                	jmp    c0015bf0 <Process::Process(char const*, Process*, char**)+0x1ac>
c0015b74:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b83:	e8 f4 95 ff ff       	call   c000f17c <malloc>
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	89 c3                	mov    ebx,eax
c0015b8d:	83 ec 08             	sub    esp,0x8
c0015b90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b94:	53                   	push   ebx
c0015b95:	e8 d6 c2 ff ff       	call   c0011e70 <VgaText::VgaText(char const*)>
c0015b9a:	83 c4 10             	add    esp,0x10
c0015b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bb1:	83 ec 0c             	sub    esp,0xc
c0015bb4:	50                   	push   eax
c0015bb5:	e8 1c bb ff ff       	call   c00116d6 <addToTerminalCycle(VgaText*)>
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bc7:	83 ec 0c             	sub    esp,0xc
c0015bca:	50                   	push   eax
c0015bcb:	e8 77 bd ff ff       	call   c0011947 <setActiveTerminal(VgaText*)>
c0015bd0:	83 c4 10             	add    esp,0x10
c0015bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd7:	05 0c 01 00 00       	add    eax,0x10c
c0015bdc:	83 ec 08             	sub    esp,0x8
c0015bdf:	68 70 3f 02 c0       	push   0xc0023f70
c0015be4:	50                   	push   eax
c0015be5:	e8 66 aa fe ff       	call   c0000650 <strcpy>
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf4:	83 c0 0c             	add    eax,0xc
c0015bf7:	83 ec 08             	sub    esp,0x8
c0015bfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bfe:	50                   	push   eax
c0015bff:	e8 4c aa fe ff       	call   c0000650 <strcpy>
c0015c04:	83 c4 10             	add    esp,0x10
c0015c07:	83 ec 08             	sub    esp,0x8
c0015c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c12:	e8 c1 fd ff ff       	call   c00159d8 <Process::addArgs(char**)>
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	83 ec 08             	sub    esp,0x8
c0015c1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c25:	e8 a8 ec ff ff       	call   c00148d2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c35:	83 f0 01             	xor    eax,0x1
c0015c38:	88 c2                	mov    dl,al
c0015c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c3e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c48:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c4a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c4f:	52                   	push   edx
c0015c50:	50                   	push   eax
c0015c51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c55:	68 c8 3f 02 c0       	push   0xc0023fc8
c0015c5a:	e8 ef 12 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	90                   	nop
c0015c63:	83 c4 14             	add    esp,0x14
c0015c66:	5b                   	pop    ebx
c0015c67:	5e                   	pop    esi
c0015c68:	c3                   	ret    
c0015c69:	90                   	nop
c0015c6a:	66 90                	xchg   ax,ax

c0015c6c <Process::Process(bool, char const*, Process*, char**)>:
c0015c6c:	56                   	push   esi
c0015c6d:	53                   	push   ebx
c0015c6e:	83 ec 24             	sub    esp,0x24
c0015c71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c75:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c7d:	05 0c 02 00 00       	add    eax,0x20c
c0015c82:	bb 07 00 00 00       	mov    ebx,0x7
c0015c87:	89 c6                	mov    esi,eax
c0015c89:	8d 76 00             	lea    esi,[esi+0x0]
c0015c8c:	85 db                	test   ebx,ebx
c0015c8e:	78 14                	js     c0015ca4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c90:	83 ec 0c             	sub    esp,0xc
c0015c93:	56                   	push   esi
c0015c94:	e8 a7 b6 00 00       	call   c0021340 <ThreadControlBlock::ThreadControlBlock()>
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	83 c6 5f             	add    esi,0x5f
c0015c9f:	83 eb 01             	sub    ebx,0x1
c0015ca2:	eb e8                	jmp    c0015c8c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015ca4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ca8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015cba:	83 ec 0c             	sub    esp,0xc
c0015cbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015cc1:	e8 2a 81 ff ff       	call   c000ddf0 <KeNewProcessEnv(Process*)>
c0015cc6:	83 c4 10             	add    esp,0x10
c0015cc9:	89 c2                	mov    edx,eax
c0015ccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015cd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015ce2:	a1 5c 58 02 c0       	mov    eax,ds:0xc002585c
c0015ce7:	8d 50 01             	lea    edx,[eax+0x1]
c0015cea:	89 15 5c 58 02 c0    	mov    DWORD PTR ds:0xc002585c,edx
c0015cf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015cf4:	89 02                	mov    DWORD PTR [edx],eax
c0015cf6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015cfe:	83 ec 0c             	sub    esp,0xc
c0015d01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d05:	e8 72 94 ff ff       	call   c000f17c <malloc>
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	89 c3                	mov    ebx,eax
c0015d0f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d14:	83 ec 08             	sub    esp,0x8
c0015d17:	50                   	push   eax
c0015d18:	53                   	push   ebx
c0015d19:	e8 9c d5 ff ff       	call   c00132ba <VAS::VAS(bool)>
c0015d1e:	83 c4 10             	add    esp,0x10
c0015d21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d25:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d2f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d3d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d41:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d47:	e8 2f a8 ff ff       	call   c001057b <KeInitSignals()>
c0015d4c:	89 c2                	mov    edx,eax
c0015d4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d52:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d62:	85 c0                	test   eax,eax
c0015d64:	74 42                	je     c0015da8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d6a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d70:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d84:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d94:	05 0c 01 00 00       	add    eax,0x10c
c0015d99:	83 ec 08             	sub    esp,0x8
c0015d9c:	52                   	push   edx
c0015d9d:	50                   	push   eax
c0015d9e:	e8 ad a8 fe ff       	call   c0000650 <strcpy>
c0015da3:	83 c4 10             	add    esp,0x10
c0015da6:	eb 7c                	jmp    c0015e24 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0015da8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015db0:	83 ec 0c             	sub    esp,0xc
c0015db3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015db7:	e8 c0 93 ff ff       	call   c000f17c <malloc>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	89 c3                	mov    ebx,eax
c0015dc1:	83 ec 08             	sub    esp,0x8
c0015dc4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015dc8:	53                   	push   ebx
c0015dc9:	e8 a2 c0 ff ff       	call   c0011e70 <VgaText::VgaText(char const*)>
c0015dce:	83 c4 10             	add    esp,0x10
c0015dd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ddf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015de5:	83 ec 0c             	sub    esp,0xc
c0015de8:	50                   	push   eax
c0015de9:	e8 e8 b8 ff ff       	call   c00116d6 <addToTerminalCycle(VgaText*)>
c0015dee:	83 c4 10             	add    esp,0x10
c0015df1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dfb:	83 ec 0c             	sub    esp,0xc
c0015dfe:	50                   	push   eax
c0015dff:	e8 43 bb ff ff       	call   c0011947 <setActiveTerminal(VgaText*)>
c0015e04:	83 c4 10             	add    esp,0x10
c0015e07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e0b:	05 0c 01 00 00       	add    eax,0x10c
c0015e10:	83 ec 08             	sub    esp,0x8
c0015e13:	68 70 3f 02 c0       	push   0xc0023f70
c0015e18:	50                   	push   eax
c0015e19:	e8 32 a8 fe ff       	call   c0000650 <strcpy>
c0015e1e:	83 c4 10             	add    esp,0x10
c0015e21:	8d 76 00             	lea    esi,[esi+0x0]
c0015e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e28:	83 c0 0c             	add    eax,0xc
c0015e2b:	83 ec 08             	sub    esp,0x8
c0015e2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e32:	50                   	push   eax
c0015e33:	e8 18 a8 fe ff       	call   c0000650 <strcpy>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	83 ec 08             	sub    esp,0x8
c0015e3e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e46:	e8 8d fb ff ff       	call   c00159d8 <Process::addArgs(char**)>
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	90                   	nop
c0015e4f:	83 c4 24             	add    esp,0x24
c0015e52:	5b                   	pop    ebx
c0015e53:	5e                   	pop    esi
c0015e54:	c3                   	ret    
c0015e55:	8d 76 00             	lea    esi,[esi+0x0]

c0015e58 <taskStartupFunction>:
c0015e58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e5d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e60:	c3                   	ret    
c0015e61:	8d 76 00             	lea    esi,[esi+0x0]

c0015e64 <KeDisablePreemption()>:
c0015e64:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015e69:	85 c0                	test   eax,eax
c0015e6b:	75 13                	jne    c0015e80 <KeDisablePreemption()+0x1c>
c0015e6d:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c0015e73:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c0015e7a:	88 15 a8 d6 02 c0    	mov    BYTE PTR ds:0xc002d6a8,dl
c0015e80:	83 c0 01             	add    eax,0x1
c0015e83:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015e88:	c3                   	ret    
c0015e89:	8d 76 00             	lea    esi,[esi+0x0]

c0015e8c <KeRestorePreemption()>:
c0015e8c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015e91:	83 e8 01             	sub    eax,0x1
c0015e94:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015e99:	75 0d                	jne    c0015ea8 <KeRestorePreemption()+0x1c>
c0015e9b:	a0 a8 d6 02 c0       	mov    al,ds:0xc002d6a8
c0015ea0:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c0015ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ea8:	c3                   	ret    
c0015ea9:	90                   	nop
c0015eaa:	66 90                	xchg   ax,ax

c0015eac <Process::createThread(void (*)(void*), void*, int)>:
c0015eac:	57                   	push   edi
c0015ead:	31 c9                	xor    ecx,ecx
c0015eaf:	56                   	push   esi
c0015eb0:	53                   	push   ebx
c0015eb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015eb5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ebc:	89 f2                	mov    edx,esi
c0015ebe:	66 90                	xchg   ax,ax
c0015ec0:	0f b7 c2             	movzx  eax,dx
c0015ec3:	80 e2 01             	and    dl,0x1
c0015ec6:	74 14                	je     c0015edc <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015ec8:	d1 f8                	sar    eax,1
c0015eca:	83 c1 01             	add    ecx,0x1
c0015ecd:	83 f9 10             	cmp    ecx,0x10
c0015ed0:	89 c2                	mov    edx,eax
c0015ed2:	75 ec                	jne    c0015ec0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ed4:	31 db                	xor    ebx,ebx
c0015ed6:	89 d8                	mov    eax,ebx
c0015ed8:	5b                   	pop    ebx
c0015ed9:	5e                   	pop    esi
c0015eda:	5f                   	pop    edi
c0015edb:	c3                   	ret    
c0015edc:	b8 01 00 00 00       	mov    eax,0x1
c0015ee1:	d3 e0                	shl    eax,cl
c0015ee3:	09 c6                	or     esi,eax
c0015ee5:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015eec:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015eef:	c1 e0 05             	shl    eax,0x5
c0015ef2:	29 c8                	sub    eax,ecx
c0015ef4:	01 d8                	add    eax,ebx
c0015ef6:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015efd:	75 0d                	jne    c0015f0c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015eff:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f09:	8d 76 00             	lea    esi,[esi+0x0]
c0015f0c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f12:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015f15:	83 ec 0c             	sub    esp,0xc
c0015f18:	c1 e6 05             	shl    esi,0x5
c0015f1b:	29 ce                	sub    esi,ecx
c0015f1d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f20:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015f23:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f29:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015f2f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f35:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015f3c:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c0015f46:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f50:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f56:	89 ca                	mov    edx,ecx
c0015f58:	f7 da                	neg    edx
c0015f5a:	c1 e2 15             	shl    edx,0x15
c0015f5d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f63:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f69:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015f6d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f77:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f81:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f87:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f91:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f9b:	68 00 01 00 00       	push   0x100
c0015fa0:	e8 d7 91 ff ff       	call   c000f17c <malloc>
c0015fa5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015fa8:	58                   	pop    eax
c0015fa9:	5a                   	pop    edx
c0015faa:	53                   	push   ebx
c0015fab:	68 ec d6 02 c0       	push   0xc002d6ec
c0015fb0:	e8 37 af 00 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	89 d8                	mov    eax,ebx
c0015fba:	5b                   	pop    ebx
c0015fbb:	5e                   	pop    esi
c0015fbc:	5f                   	pop    edi
c0015fbd:	c3                   	ret    
c0015fbe:	66 90                	xchg   ax,ax

c0015fc0 <Process::createUserThread()>:
c0015fc0:	83 ec 0c             	sub    esp,0xc
c0015fc3:	68 80 00 00 00       	push   0x80
c0015fc8:	6a 00                	push   0x0
c0015fca:	68 cc 58 01 c0       	push   0xc00158cc
c0015fcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fd3:	50                   	push   eax
c0015fd4:	e8 d3 fe ff ff       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c0015fd9:	83 c4 1c             	add    esp,0x1c
c0015fdc:	c3                   	ret    
c0015fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0015fe0 <setupMultitasking(void (*)())>:
c0015fe0:	56                   	push   esi
c0015fe1:	53                   	push   ebx
c0015fe2:	83 ec 04             	sub    esp,0x4
c0015fe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fe9:	eb 11                	jmp    c0015ffc <setupMultitasking(void (*)())+0x1c>
c0015feb:	90                   	nop
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	68 ec d6 02 c0       	push   0xc002d6ec
c0015ff4:	e8 37 ae 00 00       	call   c0020e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ff9:	83 c4 10             	add    esp,0x10
c0015ffc:	83 ec 0c             	sub    esp,0xc
c0015fff:	68 ec d6 02 c0       	push   0xc002d6ec
c0016004:	e8 03 ae 00 00       	call   c0020e0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016009:	83 c4 10             	add    esp,0x10
c001600c:	84 c0                	test   al,al
c001600e:	74 dc                	je     c0015fec <setupMultitasking(void (*)())+0xc>
c0016010:	83 ec 0c             	sub    esp,0xc
c0016013:	68 24 07 00 00       	push   0x724
c0016018:	e8 5f 91 ff ff       	call   c000f17c <malloc>
c001601d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016024:	6a 00                	push   0x0
c0016026:	68 74 3f 02 c0       	push   0xc0023f74
c001602b:	6a 01                	push   0x1
c001602d:	50                   	push   eax
c001602e:	89 c3                	mov    ebx,eax
c0016030:	e8 37 fc ff ff       	call   c0015c6c <Process::Process(bool, char const*, Process*, char**)>
c0016035:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001603b:	83 c4 14             	add    esp,0x14
c001603e:	89 1d f8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f8,ebx
c0016044:	50                   	push   eax
c0016045:	e8 fd b8 ff ff       	call   c0011947 <setActiveTerminal(VgaText*)>
c001604a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016051:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001605b:	83 c8 01             	or     eax,0x1
c001605e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016065:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001606b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001606e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016078:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001607e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016088:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001608e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016098:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160a2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160a8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00160ae:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160b8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00160c2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00160c9:	e8 ae 90 ff ff       	call   c000f17c <malloc>
c00160ce:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00160d4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00160da:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00160e0:	5a                   	pop    edx
c00160e1:	59                   	pop    ecx
c00160e2:	68 70 3f 02 c0       	push   0xc0023f70
c00160e7:	50                   	push   eax
c00160e8:	e8 63 a5 fe ff       	call   c0000650 <strcpy>
c00160ed:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160f4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00160f8:	83 c4 14             	add    esp,0x14
c00160fb:	5b                   	pop    ebx
c00160fc:	5e                   	pop    esi
c00160fd:	e9 67 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016102:	66 90                	xchg   ax,ax

c0016104 <schedule()>:
c0016104:	8b 15 cc d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6cc
c001610a:	85 d2                	test   edx,edx
c001610c:	74 0e                	je     c001611c <schedule()+0x18>
c001610e:	c7 05 c8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x1
c0016118:	c3                   	ret    
c0016119:	8d 76 00             	lea    esi,[esi+0x0]
c001611c:	53                   	push   ebx
c001611d:	83 ec 14             	sub    esp,0x14
c0016120:	68 ec d6 02 c0       	push   0xc002d6ec
c0016125:	e8 e2 ac 00 00       	call   c0020e0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001612a:	83 c4 10             	add    esp,0x10
c001612d:	84 c0                	test   al,al
c001612f:	75 3f                	jne    c0016170 <schedule()+0x6c>
c0016131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016136:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016139:	83 fa 01             	cmp    edx,0x1
c001613c:	74 3a                	je     c0016178 <schedule()+0x74>
c001613e:	66 90                	xchg   ax,ax
c0016140:	83 ec 0c             	sub    esp,0xc
c0016143:	68 ec d6 02 c0       	push   0xc002d6ec
c0016148:	e8 db ac 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001614d:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c0016154:	89 c3                	mov    ebx,eax
c0016156:	e8 d5 ac 00 00       	call   c0020e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001615b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016162:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016165:	e8 be f7 ff ff       	call   c0015928 <switchToThread(ThreadControlBlock*)>
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	8d 76 00             	lea    esi,[esi+0x0]
c0016170:	83 c4 08             	add    esp,0x8
c0016173:	5b                   	pop    ebx
c0016174:	c3                   	ret    
c0016175:	8d 76 00             	lea    esi,[esi+0x0]
c0016178:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001617f:	83 ec 08             	sub    esp,0x8
c0016182:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016187:	50                   	push   eax
c0016188:	68 ec d6 02 c0       	push   0xc002d6ec
c001618d:	e8 5a ad 00 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	eb a9                	jmp    c0016140 <schedule()+0x3c>
c0016197:	90                   	nop

c0016198 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016198:	83 ec 0c             	sub    esp,0xc
c001619b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161a7:	e8 58 ff ff ff       	call   c0016104 <schedule()>
c00161ac:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00161b4:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00161b9:	85 c0                	test   eax,eax
c00161bb:	75 03                	jne    c00161c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00161bd:	fb                   	sti    
c00161be:	66 90                	xchg   ax,ax
c00161c0:	83 c4 0c             	add    esp,0xc
c00161c3:	c3                   	ret    

c00161c4 <blockTask(TaskState)>:
c00161c4:	83 ec 0c             	sub    esp,0xc
c00161c7:	fa                   	cli    
c00161c8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00161cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161d1:	83 c0 01             	add    eax,0x1
c00161d4:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00161d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161e1:	e8 1e ff ff ff       	call   c0016104 <schedule()>
c00161e6:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00161ee:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c00161f4:	85 d2                	test   edx,edx
c00161f6:	75 04                	jne    c00161fc <blockTask(TaskState)+0x38>
c00161f8:	fb                   	sti    
c00161f9:	8d 76 00             	lea    esi,[esi+0x0]
c00161fc:	83 c4 0c             	add    esp,0xc
c00161ff:	c3                   	ret    

c0016200 <waitTask(int, int*, int)>:
c0016200:	83 ec 18             	sub    esp,0x18
c0016203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016208:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001620c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001620f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016218:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001621b:	6a 07                	push   0x7
c001621d:	e8 a2 ff ff ff       	call   c00161c4 <blockTask(TaskState)>
c0016222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016227:	83 c4 10             	add    esp,0x10
c001622a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001622d:	85 d2                	test   edx,edx
c001622f:	74 0b                	je     c001623c <waitTask(int, int*, int)+0x3c>
c0016231:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016234:	89 02                	mov    DWORD PTR [edx],eax
c0016236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001623b:	90                   	nop
c001623c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001623f:	83 c4 0c             	add    esp,0xc
c0016242:	c3                   	ret    
c0016243:	90                   	nop

c0016244 <milliTenthSleepUntil(unsigned int)>:
c0016244:	83 ec 0c             	sub    esp,0xc
c0016247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001624b:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c0016251:	76 05                	jbe    c0016258 <milliTenthSleepUntil(unsigned int)+0x14>
c0016253:	90                   	nop
c0016254:	83 c4 0c             	add    esp,0xc
c0016257:	c3                   	ret    
c0016258:	fa                   	cli    
c0016259:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c001625f:	83 ec 08             	sub    esp,0x8
c0016262:	8b 15 cc d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6cc
c0016268:	83 c1 01             	add    ecx,0x1
c001626b:	89 0d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,ecx
c0016271:	83 c2 01             	add    edx,0x1
c0016274:	89 15 cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,edx
c001627a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016280:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016283:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016289:	51                   	push   ecx
c001628a:	68 e0 d6 02 c0       	push   0xc002d6e0
c001628f:	e8 58 ac 00 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016294:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001629b:	e8 24 ff ff ff       	call   c00161c4 <blockTask(TaskState)>
c00162a0:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	83 e8 01             	sub    eax,0x1
c00162ab:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00162b0:	85 c0                	test   eax,eax
c00162b2:	75 0c                	jne    c00162c0 <milliTenthSleepUntil(unsigned int)+0x7c>
c00162b4:	8b 15 c8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6c8
c00162ba:	85 d2                	test   edx,edx
c00162bc:	75 1a                	jne    c00162d8 <milliTenthSleepUntil(unsigned int)+0x94>
c00162be:	66 90                	xchg   ax,ax
c00162c0:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00162c8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00162cd:	85 c0                	test   eax,eax
c00162cf:	75 83                	jne    c0016254 <milliTenthSleepUntil(unsigned int)+0x10>
c00162d1:	fb                   	sti    
c00162d2:	83 c4 0c             	add    esp,0xc
c00162d5:	c3                   	ret    
c00162d6:	66 90                	xchg   ax,ax
c00162d8:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00162e2:	e8 1d fe ff ff       	call   c0016104 <schedule()>
c00162e7:	eb d7                	jmp    c00162c0 <milliTenthSleepUntil(unsigned int)+0x7c>
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]

c00162ec <milliTenthSleep(unsigned int)>:
c00162ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00162f0:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c00162f5:	01 c2                	add    edx,eax
c00162f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00162fb:	e9 44 ff ff ff       	jmp    c0016244 <milliTenthSleepUntil(unsigned int)>

c0016300 <sleep(unsigned int)>:
c0016300:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001630c:	eb de                	jmp    c00162ec <milliTenthSleep(unsigned int)>
c001630e:	66 90                	xchg   ax,ax

c0016310 <taskReturned>:
c0016310:	83 ec 18             	sub    esp,0x18
c0016313:	68 fc 3f 02 c0       	push   0xc0023ffc
c0016318:	e8 a5 91 ff ff       	call   c000f4c2 <KePanic(char const*)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	6a 02                	push   0x2
c0016325:	e8 9a fe ff ff       	call   c00161c4 <blockTask(TaskState)>
c001632a:	fa                   	cli    
c001632b:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016330:	83 c0 01             	add    eax,0x1
c0016333:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016338:	e8 c7 fd ff ff       	call   c0016104 <schedule()>
c001633d:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016345:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c001634b:	83 c4 10             	add    esp,0x10
c001634e:	85 d2                	test   edx,edx
c0016350:	75 ce                	jne    c0016320 <taskReturned+0x10>
c0016352:	fb                   	sti    
c0016353:	eb cb                	jmp    c0016320 <taskReturned+0x10>
c0016355:	8d 76 00             	lea    esi,[esi+0x0]

c0016358 <Thr::processFromPID(int)>:
c0016358:	57                   	push   edi
c0016359:	56                   	push   esi
c001635a:	53                   	push   ebx
c001635b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001635f:	fa                   	cli    
c0016360:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c0016366:	83 ec 0c             	sub    esp,0xc
c0016369:	68 ec d6 02 c0       	push   0xc002d6ec
c001636e:	83 c1 01             	add    ecx,0x1
c0016371:	89 0d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,ecx
c0016377:	e8 ac aa 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001637c:	83 c4 10             	add    esp,0x10
c001637f:	89 c7                	mov    edi,eax
c0016381:	eb 15                	jmp    c0016398 <Thr::processFromPID(int)+0x40>
c0016383:	90                   	nop
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	68 ec d6 02 c0       	push   0xc002d6ec
c001638c:	e8 97 aa 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	39 f8                	cmp    eax,edi
c0016396:	74 50                	je     c00163e8 <Thr::processFromPID(int)+0x90>
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	68 ec d6 02 c0       	push   0xc002d6ec
c00163a0:	e8 83 aa 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163a5:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c00163ac:	89 c3                	mov    ebx,eax
c00163ae:	e8 7d aa 00 00       	call   c0020e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163b3:	58                   	pop    eax
c00163b4:	5a                   	pop    edx
c00163b5:	53                   	push   ebx
c00163b6:	68 ec d6 02 c0       	push   0xc002d6ec
c00163bb:	e8 2c ab 00 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163c3:	83 c4 10             	add    esp,0x10
c00163c6:	39 30                	cmp    DWORD PTR [eax],esi
c00163c8:	75 ba                	jne    c0016384 <Thr::processFromPID(int)+0x2c>
c00163ca:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00163d2:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c00163d8:	85 c9                	test   ecx,ecx
c00163da:	74 08                	je     c00163e4 <Thr::processFromPID(int)+0x8c>
c00163dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163df:	90                   	nop
c00163e0:	5b                   	pop    ebx
c00163e1:	5e                   	pop    esi
c00163e2:	5f                   	pop    edi
c00163e3:	c3                   	ret    
c00163e4:	fb                   	sti    
c00163e5:	eb f5                	jmp    c00163dc <Thr::processFromPID(int)+0x84>
c00163e7:	90                   	nop
c00163e8:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00163f0:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c00163f6:	31 c0                	xor    eax,eax
c00163f8:	85 d2                	test   edx,edx
c00163fa:	75 e4                	jne    c00163e0 <Thr::processFromPID(int)+0x88>
c00163fc:	fb                   	sti    
c00163fd:	5b                   	pop    ebx
c00163fe:	5e                   	pop    esi
c00163ff:	5f                   	pop    edi
c0016400:	c3                   	ret    
c0016401:	8d 76 00             	lea    esi,[esi+0x0]

c0016404 <unblockTask(ThreadControlBlock*)>:
c0016404:	53                   	push   ebx
c0016405:	83 ec 08             	sub    esp,0x8
c0016408:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001640c:	fa                   	cli    
c001640d:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c0016413:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016416:	83 c2 01             	add    edx,0x1
c0016419:	89 15 d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,edx
c001641f:	85 c0                	test   eax,eax
c0016421:	74 6d                	je     c0016490 <unblockTask(ThreadControlBlock*)+0x8c>
c0016423:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016426:	83 f8 01             	cmp    eax,0x1
c0016429:	74 39                	je     c0016464 <unblockTask(ThreadControlBlock*)+0x60>
c001642b:	83 ec 0c             	sub    esp,0xc
c001642e:	68 ec d6 02 c0       	push   0xc002d6ec
c0016433:	e8 f0 a9 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	85 c0                	test   eax,eax
c001643d:	75 1d                	jne    c001645c <unblockTask(ThreadControlBlock*)+0x58>
c001643f:	eb 63                	jmp    c00164a4 <unblockTask(ThreadControlBlock*)+0xa0>
c0016441:	8d 76 00             	lea    esi,[esi+0x0]
c0016444:	83 ec 08             	sub    esp,0x8
c0016447:	50                   	push   eax
c0016448:	68 ec d6 02 c0       	push   0xc002d6ec
c001644d:	e8 e2 ae 00 00       	call   c0021334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016452:	83 c4 10             	add    esp,0x10
c0016455:	85 c0                	test   eax,eax
c0016457:	74 4b                	je     c00164a4 <unblockTask(ThreadControlBlock*)+0xa0>
c0016459:	8d 76 00             	lea    esi,[esi+0x0]
c001645c:	39 c3                	cmp    ebx,eax
c001645e:	75 e4                	jne    c0016444 <unblockTask(ThreadControlBlock*)+0x40>
c0016460:	eb 12                	jmp    c0016474 <unblockTask(ThreadControlBlock*)+0x70>
c0016462:	66 90                	xchg   ax,ax
c0016464:	83 ec 0c             	sub    esp,0xc
c0016467:	68 92 3f 02 c0       	push   0xc0023f92
c001646c:	e8 dd 0a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016471:	83 c4 10             	add    esp,0x10
c0016474:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001647c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016481:	85 c0                	test   eax,eax
c0016483:	75 03                	jne    c0016488 <unblockTask(ThreadControlBlock*)+0x84>
c0016485:	fb                   	sti    
c0016486:	66 90                	xchg   ax,ax
c0016488:	83 c4 08             	add    esp,0x8
c001648b:	5b                   	pop    ebx
c001648c:	c3                   	ret    
c001648d:	8d 76 00             	lea    esi,[esi+0x0]
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	68 7b 3f 02 c0       	push   0xc0023f7b
c0016498:	e8 b1 0a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001649d:	83 c4 10             	add    esp,0x10
c00164a0:	eb d2                	jmp    c0016474 <unblockTask(ThreadControlBlock*)+0x70>
c00164a2:	66 90                	xchg   ax,ax
c00164a4:	83 ec 08             	sub    esp,0x8
c00164a7:	53                   	push   ebx
c00164a8:	68 ec d6 02 c0       	push   0xc002d6ec
c00164ad:	e8 3a aa 00 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164b2:	83 c4 10             	add    esp,0x10
c00164b5:	eb bd                	jmp    c0016474 <unblockTask(ThreadControlBlock*)+0x70>
c00164b7:	90                   	nop

c00164b8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00164b8:	55                   	push   ebp
c00164b9:	57                   	push   edi
c00164ba:	56                   	push   esi
c00164bb:	53                   	push   ebx
c00164bc:	83 ec 1c             	sub    esp,0x1c
c00164bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00164c3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164c6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00164cc:	85 ed                	test   ebp,ebp
c00164ce:	7e 28                	jle    c00164f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00164d0:	31 f6                	xor    esi,esi
c00164d2:	66 90                	xchg   ax,ax
c00164d4:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00164db:	83 ec 0c             	sub    esp,0xc
c00164de:	83 c6 01             	add    esi,0x1
c00164e1:	57                   	push   edi
c00164e2:	e8 a5 8c ff ff       	call   c000f18c <free>
c00164e7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00164f3:	7f df                	jg     c00164d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00164f5:	8d 76 00             	lea    esi,[esi+0x0]
c00164f8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016502:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016507:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001650a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001650d:	d3 c0                	rol    eax,cl
c001650f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016516:	21 c8                	and    eax,ecx
c0016518:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001651f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016522:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001652a:	89 f7                	mov    edi,esi
c001652c:	0f 85 72 01 00 00    	jne    c00166a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016532:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016538:	85 ed                	test   ebp,ebp
c001653a:	74 1c                	je     c0016558 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	55                   	push   ebp
c0016540:	e8 c7 77 ff ff       	call   c000dd0c <EnvVarContainer::~EnvVarContainer()>
c0016545:	59                   	pop    ecx
c0016546:	5e                   	pop    esi
c0016547:	6a 0c                	push   0xc
c0016549:	55                   	push   ebp
c001654a:	e8 a4 63 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c001654f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016552:	83 c4 10             	add    esp,0x10
c0016555:	89 f7                	mov    edi,esi
c0016557:	90                   	nop
c0016558:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001655e:	85 c0                	test   eax,eax
c0016560:	0f 84 b2 00 00 00    	je     c0016618 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016566:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016569:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001656d:	31 c9                	xor    ecx,ecx
c001656f:	eb 17                	jmp    c0016588 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016571:	8d 76 00             	lea    esi,[esi+0x0]
c0016574:	83 c1 01             	add    ecx,0x1
c0016577:	83 f9 10             	cmp    ecx,0x10
c001657a:	0f 84 98 00 00 00    	je     c0016618 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016580:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016586:	66 90                	xchg   ax,ax
c0016588:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001658f:	d3 fa                	sar    edx,cl
c0016591:	80 e2 01             	and    dl,0x1
c0016594:	74 de                	je     c0016574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016596:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016599:	c1 e2 05             	shl    edx,0x5
c001659c:	29 ca                	sub    edx,ecx
c001659e:	01 d0                	add    eax,edx
c00165a0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00165a6:	83 fd 07             	cmp    ebp,0x7
c00165a9:	75 c9                	jne    c0016574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00165ab:	05 40 02 00 00       	add    eax,0x240
c00165b0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00165b3:	83 fd ff             	cmp    ebp,0xffffffff
c00165b6:	0f 8c f0 00 00 00    	jl     c00166ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00165bc:	0f 84 ae 01 00 00    	je     c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00165c2:	85 ed                	test   ebp,ebp
c00165c4:	0f 84 92 01 00 00    	je     c001675c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00165ca:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00165cc:	75 a6                	jne    c0016574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00165ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00165d2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00165d8:	01 d0                	add    eax,edx
c00165da:	66 90                	xchg   ax,ax
c00165dc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00165e0:	83 ec 0c             	sub    esp,0xc
c00165e3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00165e9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00165f2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00165f9:	50                   	push   eax
c00165fa:	e8 05 fe ff ff       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c00165ff:	83 c4 10             	add    esp,0x10
c0016602:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016605:	89 f7                	mov    edi,esi
c0016607:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001660b:	83 c1 01             	add    ecx,0x1
c001660e:	83 f9 10             	cmp    ecx,0x10
c0016611:	0f 85 69 ff ff ff    	jne    c0016580 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016617:	90                   	nop
c0016618:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001661e:	85 c0                	test   eax,eax
c0016620:	74 62                	je     c0016684 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016622:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016628:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001662e:	74 54                	je     c0016684 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	68 ec d6 02 c0       	push   0xc002d6ec
c0016638:	e8 eb a7 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001663d:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c0016644:	89 c7                	mov    edi,eax
c0016646:	e8 c1 a7 00 00       	call   c0020e0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001664b:	83 c4 10             	add    esp,0x10
c001664e:	84 c0                	test   al,al
c0016650:	0f 84 ce 00 00 00    	je     c0016724 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016656:	66 90                	xchg   ax,ax
c0016658:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001665b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016661:	85 d2                	test   edx,edx
c0016663:	74 0f                	je     c0016674 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016665:	8b 02                	mov    eax,DWORD PTR [edx]
c0016667:	83 ec 0c             	sub    esp,0xc
c001666a:	52                   	push   edx
c001666b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001666e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016671:	83 c4 10             	add    esp,0x10
c0016674:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001667e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016681:	8d 76 00             	lea    esi,[esi+0x0]
c0016684:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001668a:	85 db                	test   ebx,ebx
c001668c:	74 16                	je     c00166a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	53                   	push   ebx
c0016692:	e8 77 c7 ff ff       	call   c0012e0e <VAS::~VAS()>
c0016697:	58                   	pop    eax
c0016698:	5a                   	pop    edx
c0016699:	6a 14                	push   0x14
c001669b:	53                   	push   ebx
c001669c:	e8 52 62 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c00166a1:	83 c4 10             	add    esp,0x10
c00166a4:	83 c4 1c             	add    esp,0x1c
c00166a7:	5b                   	pop    ebx
c00166a8:	5e                   	pop    esi
c00166a9:	5f                   	pop    edi
c00166aa:	5d                   	pop    ebp
c00166ab:	c3                   	ret    
c00166ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00166b0:	83 ec 0c             	sub    esp,0xc
c00166b3:	68 30 40 02 c0       	push   0xc0024030
c00166b8:	e8 05 8e ff ff       	call   c000f4c2 <KePanic(char const*)>
c00166bd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166c0:	83 c4 10             	add    esp,0x10
c00166c3:	89 f7                	mov    edi,esi
c00166c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166c9:	e9 a6 fe ff ff       	jmp    c0016574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166ce:	66 90                	xchg   ax,ax
c00166d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166d6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00166dc:	75 1e                	jne    c00166fc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	68 98 40 02 c0       	push   0xc0024098
c00166e6:	e8 63 08 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00166eb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00166f2:	e8 cd fa ff ff       	call   c00161c4 <blockTask(TaskState)>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	56                   	push   esi
c0016700:	68 ec d6 02 c0       	push   0xc002d6ec
c0016705:	e8 e2 a7 00 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001670a:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c0016711:	e8 12 a7 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016716:	83 c4 10             	add    esp,0x10
c0016719:	39 f8                	cmp    eax,edi
c001671b:	0f 84 37 ff ff ff    	je     c0016658 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016721:	8d 76 00             	lea    esi,[esi+0x0]
c0016724:	83 ec 0c             	sub    esp,0xc
c0016727:	68 ec d6 02 c0       	push   0xc002d6ec
c001672c:	e8 f7 a6 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016731:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c0016738:	89 c6                	mov    esi,eax
c001673a:	e8 f1 a6 00 00       	call   c0020e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001673f:	83 c4 10             	add    esp,0x10
c0016742:	39 f3                	cmp    ebx,esi
c0016744:	74 b6                	je     c00166fc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016746:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016749:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001674c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016752:	75 a8                	jne    c00166fc <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016754:	e9 77 ff ff ff       	jmp    c00166d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016759:	8d 76 00             	lea    esi,[esi+0x0]
c001675c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016760:	83 ec 0c             	sub    esp,0xc
c0016763:	68 64 40 02 c0       	push   0xc0024064
c0016768:	e9 4b ff ff ff       	jmp    c00166b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001676d:	8d 76 00             	lea    esi,[esi+0x0]
c0016770:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016774:	8b 36                	mov    esi,DWORD PTR [esi]
c0016776:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016779:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001677c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016782:	01 d7                	add    edi,edx
c0016784:	89 f8                	mov    eax,edi
c0016786:	e9 51 fe ff ff       	jmp    c00165dc <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001678b:	90                   	nop

c001678c <cleanerTaskFunction(void*)>:
c001678c:	53                   	push   ebx
c001678d:	83 ec 08             	sub    esp,0x8
c0016790:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016798:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001679d:	85 c0                	test   eax,eax
c001679f:	75 03                	jne    c00167a4 <cleanerTaskFunction(void*)+0x18>
c00167a1:	fb                   	sti    
c00167a2:	66 90                	xchg   ax,ax
c00167a4:	fa                   	cli    
c00167a5:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00167aa:	83 c0 01             	add    eax,0x1
c00167ad:	80 3d b4 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6b4,0x0
c00167b4:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00167b9:	0f 85 c9 00 00 00    	jne    c0016888 <cleanerTaskFunction(void*)+0xfc>
c00167bf:	83 ec 0c             	sub    esp,0xc
c00167c2:	6a 02                	push   0x2
c00167c4:	e8 cf f9 ff ff       	call   c0016198 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00167c9:	83 c4 10             	add    esp,0x10
c00167cc:	c6 05 b4 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d6b4,0x0
c00167d3:	fa                   	cli    
c00167d4:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c00167da:	8b 1d cc d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6cc
c00167e0:	83 c1 01             	add    ecx,0x1
c00167e3:	89 0d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,ecx
c00167e9:	83 c3 01             	add    ebx,0x1
c00167ec:	89 1d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,ebx
c00167f2:	fa                   	cli    
c00167f3:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00167f8:	83 c0 01             	add    eax,0x1
c00167fb:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016800:	eb 2a                	jmp    c001682c <cleanerTaskFunction(void*)+0xa0>
c0016802:	66 90                	xchg   ax,ax
c0016804:	83 ec 0c             	sub    esp,0xc
c0016807:	68 d4 d6 02 c0       	push   0xc002d6d4
c001680c:	e8 17 a6 00 00       	call   c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016811:	c7 04 24 d4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6d4
c0016818:	89 c3                	mov    ebx,eax
c001681a:	e8 11 a6 00 00       	call   c0020e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001681f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016822:	e8 91 fc ff ff       	call   c00164b8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016827:	83 c4 10             	add    esp,0x10
c001682a:	66 90                	xchg   ax,ax
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	68 d4 d6 02 c0       	push   0xc002d6d4
c0016834:	e8 d3 a5 00 00       	call   c0020e0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	84 c0                	test   al,al
c001683e:	74 c4                	je     c0016804 <cleanerTaskFunction(void*)+0x78>
c0016840:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016848:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c001684e:	85 d2                	test   edx,edx
c0016850:	75 02                	jne    c0016854 <cleanerTaskFunction(void*)+0xc8>
c0016852:	fb                   	sti    
c0016853:	90                   	nop
c0016854:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0016859:	83 e8 01             	sub    eax,0x1
c001685c:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0016861:	0f 85 29 ff ff ff    	jne    c0016790 <cleanerTaskFunction(void*)+0x4>
c0016867:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c001686c:	85 c0                	test   eax,eax
c001686e:	0f 84 1c ff ff ff    	je     c0016790 <cleanerTaskFunction(void*)+0x4>
c0016874:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c001687e:	e8 81 f8 ff ff       	call   c0016104 <schedule()>
c0016883:	e9 08 ff ff ff       	jmp    c0016790 <cleanerTaskFunction(void*)+0x4>
c0016888:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016890:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016895:	85 c0                	test   eax,eax
c0016897:	0f 85 2f ff ff ff    	jne    c00167cc <cleanerTaskFunction(void*)+0x40>
c001689d:	fb                   	sti    
c001689e:	e9 29 ff ff ff       	jmp    c00167cc <cleanerTaskFunction(void*)+0x40>
c00168a3:	90                   	nop

c00168a4 <terminateTask(int)>:
c00168a4:	83 ec 14             	sub    esp,0x14
c00168a7:	fa                   	cli    
c00168a8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00168ad:	83 c0 01             	add    eax,0x1
c00168b0:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00168b5:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00168ba:	83 c0 01             	add    eax,0x1
c00168bd:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00168c2:	fa                   	cli    
c00168c3:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00168c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168cc:	83 c0 01             	add    eax,0x1
c00168cf:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00168d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00168dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168e1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00168e4:	50                   	push   eax
c00168e5:	68 d4 d6 02 c0       	push   0xc002d6d4
c00168ea:	e8 fd a5 00 00       	call   c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168f4:	83 c4 10             	add    esp,0x10
c00168f7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00168fe:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016903:	85 c0                	test   eax,eax
c0016905:	0f 84 81 00 00 00    	je     c001698c <terminateTask(int)+0xe8>
c001690b:	c6 05 b4 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6b4,0x1
c0016912:	83 ec 0c             	sub    esp,0xc
c0016915:	50                   	push   eax
c0016916:	e8 e9 fa ff ff       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	66 90                	xchg   ax,ax
c0016920:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016928:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001692d:	85 c0                	test   eax,eax
c001692f:	75 03                	jne    c0016934 <terminateTask(int)+0x90>
c0016931:	fb                   	sti    
c0016932:	66 90                	xchg   ax,ax
c0016934:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0016939:	83 e8 01             	sub    eax,0x1
c001693c:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0016941:	75 09                	jne    c001694c <terminateTask(int)+0xa8>
c0016943:	83 3d c8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c8,0x0
c001694a:	75 54                	jne    c00169a0 <terminateTask(int)+0xfc>
c001694c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016954:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c001695a:	85 c9                	test   ecx,ecx
c001695c:	75 06                	jne    c0016964 <terminateTask(int)+0xc0>
c001695e:	66 90                	xchg   ax,ax
c0016960:	fb                   	sti    
c0016961:	8d 76 00             	lea    esi,[esi+0x0]
c0016964:	fa                   	cli    
c0016965:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001696a:	83 c0 01             	add    eax,0x1
c001696d:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016972:	e8 8d f7 ff ff       	call   c0016104 <schedule()>
c0016977:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001697f:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c0016985:	85 d2                	test   edx,edx
c0016987:	75 db                	jne    c0016964 <terminateTask(int)+0xc0>
c0016989:	eb d5                	jmp    c0016960 <terminateTask(int)+0xbc>
c001698b:	90                   	nop
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	68 a9 3f 02 c0       	push   0xc0023fa9
c0016994:	e8 b5 05 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016999:	83 c4 10             	add    esp,0x10
c001699c:	eb 82                	jmp    c0016920 <terminateTask(int)+0x7c>
c001699e:	66 90                	xchg   ax,ax
c00169a0:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00169aa:	e8 55 f7 ff ff       	call   c0016104 <schedule()>
c00169af:	eb 9b                	jmp    c001694c <terminateTask(int)+0xa8>
c00169b1:	8d 76 00             	lea    esi,[esi+0x0]

c00169b4 <Thr::terminateFromIRQ(int)>:
c00169b4:	83 ec 18             	sub    esp,0x18
c00169b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169bb:	50                   	push   eax
c00169bc:	e8 e3 fe ff ff       	call   c00168a4 <terminateTask(int)>
c00169c1:	8d 76 00             	lea    esi,[esi+0x0]

c00169c4 <__static_initialization_and_destruction_0(int, int)>:
c00169c4:	83 ec 0c             	sub    esp,0xc
c00169c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00169cc:	0f 85 8e 00 00 00    	jne    c0016a60 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00169d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00169da:	0f 85 80 00 00 00    	jne    c0016a60 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	68 ec d6 02 c0       	push   0xc002d6ec
c00169e8:	e8 9f a9 00 00       	call   c002138c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	83 ec 04             	sub    esp,0x4
c00169f3:	68 b4 50 02 c0       	push   0xc00250b4
c00169f8:	68 ec d6 02 c0       	push   0xc002d6ec
c00169fd:	68 3c 13 02 c0       	push   0xc002133c
c0016a02:	e8 9c 5e ff ff       	call   c000c8a3 <__cxa_atexit>
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	83 ec 0c             	sub    esp,0xc
c0016a0d:	68 e0 d6 02 c0       	push   0xc002d6e0
c0016a12:	e8 75 a9 00 00       	call   c002138c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	83 ec 04             	sub    esp,0x4
c0016a1d:	68 b4 50 02 c0       	push   0xc00250b4
c0016a22:	68 e0 d6 02 c0       	push   0xc002d6e0
c0016a27:	68 3c 13 02 c0       	push   0xc002133c
c0016a2c:	e8 72 5e ff ff       	call   c000c8a3 <__cxa_atexit>
c0016a31:	83 c4 10             	add    esp,0x10
c0016a34:	83 ec 0c             	sub    esp,0xc
c0016a37:	68 d4 d6 02 c0       	push   0xc002d6d4
c0016a3c:	e8 4b a9 00 00       	call   c002138c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a41:	83 c4 10             	add    esp,0x10
c0016a44:	83 ec 04             	sub    esp,0x4
c0016a47:	68 b4 50 02 c0       	push   0xc00250b4
c0016a4c:	68 d4 d6 02 c0       	push   0xc002d6d4
c0016a51:	68 3c 13 02 c0       	push   0xc002133c
c0016a56:	e8 48 5e ff ff       	call   c000c8a3 <__cxa_atexit>
c0016a5b:	83 c4 10             	add    esp,0x10
c0016a5e:	66 90                	xchg   ax,ax
c0016a60:	90                   	nop
c0016a61:	83 c4 0c             	add    esp,0xc
c0016a64:	c3                   	ret    
c0016a65:	8d 76 00             	lea    esi,[esi+0x0]

c0016a68 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	83 ec 08             	sub    esp,0x8
c0016a6e:	68 ff ff 00 00       	push   0xffff
c0016a73:	6a 01                	push   0x1
c0016a75:	e8 4a ff ff ff       	call   c00169c4 <__static_initialization_and_destruction_0(int, int)>
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	83 c4 0c             	add    esp,0xc
c0016a80:	c3                   	ret    

c0016a81 <Vm::inbv(unsigned short)>:
c0016a81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016a85:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016a8a:	75 06                	jne    c0016a92 <Vm::inbv(unsigned short)+0x11>
c0016a8c:	a0 30 d7 02 c0       	mov    al,ds:0xc002d730
c0016a91:	c3                   	ret    
c0016a92:	ec                   	in     al,dx
c0016a93:	c3                   	ret    

c0016a94 <Vm::outbv(unsigned short, unsigned char)>:
c0016a94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016a98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a9c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016aa1:	75 25                	jne    c0016ac8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016aa3:	8b 0d 30 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d730
c0016aa9:	88 81 40 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28c0],al
c0016aaf:	8d 51 01             	lea    edx,[ecx+0x1]
c0016ab2:	89 15 30 d7 02 c0    	mov    DWORD PTR ds:0xc002d730,edx
c0016ab8:	83 fa 20             	cmp    edx,0x20
c0016abb:	75 0c                	jne    c0016ac9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016abd:	c7 05 30 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x1f
c0016ac7:	c3                   	ret    
c0016ac8:	ee                   	out    dx,al
c0016ac9:	c3                   	ret    

c0016aca <Vm::realToLinear(unsigned short, unsigned short)>:
c0016aca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016acf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ad4:	c1 e0 04             	shl    eax,0x4
c0016ad7:	01 d0                	add    eax,edx
c0016ad9:	c3                   	ret    

c0016ada <Vm::getSegment(unsigned int)>:
c0016ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ade:	c1 e8 10             	shr    eax,0x10
c0016ae1:	c3                   	ret    

c0016ae2 <Vm::getOffset(unsigned int)>:
c0016ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ae6:	c3                   	ret    

c0016ae7 <Vm::mainloop2()>:
c0016ae7:	83 ec 18             	sub    esp,0x18
c0016aea:	fa                   	cli    
c0016aeb:	6a 02                	push   0x2
c0016aed:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016af3:	c6 05 29 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d729,0x1
c0016afa:	e8 99 f6 ff ff       	call   c0016198 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016aff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b04:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016b08:	52                   	push   edx
c0016b09:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016b0d:	52                   	push   edx
c0016b0e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016b12:	52                   	push   edx
c0016b13:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016b17:	50                   	push   eax
c0016b18:	e8 f2 96 fe ff       	call   c000020f <goToVM86>
c0016b1d:	83 c4 2c             	add    esp,0x2c
c0016b20:	c3                   	ret    

c0016b21 <Vm::mainVm8086Loop(void*)>:
c0016b21:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016b28:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016b2f:	75 01                	jne    c0016b32 <Vm::mainVm8086Loop(void*)+0x11>
c0016b31:	fb                   	sti    
c0016b32:	eb b3                	jmp    c0016ae7 <Vm::mainloop2()>

c0016b34 <Vm::mainloop3(unsigned long)>:
c0016b34:	83 ec 18             	sub    esp,0x18
c0016b37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b3b:	fa                   	cli    
c0016b3c:	6a 02                	push   0x2
c0016b3e:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016b44:	c6 05 28 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d728,0x1
c0016b4b:	a3 24 d7 02 c0       	mov    ds:0xc002d724,eax
c0016b50:	e8 43 f6 ff ff       	call   c0016198 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b55:	83 c4 1c             	add    esp,0x1c
c0016b58:	eb 8d                	jmp    c0016ae7 <Vm::mainloop2()>

c0016b5a <Vm::initialise8086()>:
c0016b5a:	83 ec 0c             	sub    esp,0xc
c0016b5d:	68 80 00 00 00       	push   0x80
c0016b62:	6a 00                	push   0x0
c0016b64:	68 21 6b 01 c0       	push   0xc0016b21
c0016b69:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016b6f:	e8 38 f3 ff ff       	call   c0015eac <Process::createThread(void (*)(void*), void*, int)>
c0016b74:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016b7b:	68 10 01 00 00       	push   0x110
c0016b80:	6a 00                	push   0x0
c0016b82:	6a 00                	push   0x0
c0016b84:	a3 2c d7 02 c0       	mov    ds:0xc002d72c,eax
c0016b89:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0016b8e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b94:	e8 d7 c5 ff ff       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016b99:	83 c4 2c             	add    esp,0x2c
c0016b9c:	c3                   	ret    

c0016b9d <Vm::resetConventionalMemory8086()>:
c0016b9d:	c3                   	ret    

c0016b9e <Vm::finish8086()>:
c0016b9e:	53                   	push   ebx
c0016b9f:	83 ec 08             	sub    esp,0x8
c0016ba2:	fa                   	cli    
c0016ba3:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016ba9:	80 3d 28 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d728,0x0
c0016bb0:	75 18                	jne    c0016bca <Vm::finish8086()+0x2c>
c0016bb2:	e8 4d f5 ff ff       	call   c0016104 <schedule()>
c0016bb7:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016bbe:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016bc5:	75 db                	jne    c0016ba2 <Vm::finish8086()+0x4>
c0016bc7:	fb                   	sti    
c0016bc8:	eb d8                	jmp    c0016ba2 <Vm::finish8086()+0x4>
c0016bca:	c6 05 28 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d728,0x0
c0016bd1:	83 ec 0c             	sub    esp,0xc
c0016bd4:	8b 1d 24 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d724
c0016bda:	ff 35 2c d7 02 c0    	push   DWORD PTR ds:0xc002d72c
c0016be0:	e8 1f f8 ff ff       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c0016be5:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016bec:	83 c4 10             	add    esp,0x10
c0016bef:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016bf6:	75 01                	jne    c0016bf9 <Vm::finish8086()+0x5b>
c0016bf8:	fb                   	sti    
c0016bf9:	83 c4 08             	add    esp,0x8
c0016bfc:	89 d8                	mov    eax,ebx
c0016bfe:	5b                   	pop    ebx
c0016bff:	c3                   	ret    

c0016c00 <Vm::getOutput8086(unsigned char*)>:
c0016c00:	57                   	push   edi
c0016c01:	8b 0d 30 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d730
c0016c07:	56                   	push   esi
c0016c08:	be 40 d7 02 c0       	mov    esi,0xc002d740
c0016c0d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c13:	5e                   	pop    esi
c0016c14:	a1 30 d7 02 c0       	mov    eax,ds:0xc002d730
c0016c19:	c7 05 30 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x0
c0016c23:	5f                   	pop    edi
c0016c24:	c3                   	ret    

c0016c25 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016c25:	55                   	push   ebp
c0016c26:	57                   	push   edi
c0016c27:	56                   	push   esi
c0016c28:	53                   	push   ebx
c0016c29:	83 ec 2c             	sub    esp,0x2c
c0016c2c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016c30:	80 3d 20 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d720,0x0
c0016c37:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016c3b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c43:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0016c47:	75 5d                	jne    c0016ca6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016c49:	83 ec 0c             	sub    esp,0xc
c0016c4c:	68 14 01 00 00       	push   0x114
c0016c51:	e8 26 85 ff ff       	call   c000f17c <malloc>
c0016c56:	83 c4 0c             	add    esp,0xc
c0016c59:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016c5f:	68 c0 40 02 c0       	push   0xc00240c0
c0016c64:	50                   	push   eax
c0016c65:	89 c7                	mov    edi,eax
c0016c67:	e8 c0 14 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0016c6c:	58                   	pop    eax
c0016c6d:	5a                   	pop    edx
c0016c6e:	6a 12                	push   0x12
c0016c70:	57                   	push   edi
c0016c71:	e8 d4 14 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016c76:	8b 07                	mov    eax,DWORD PTR [edi]
c0016c78:	59                   	pop    ecx
c0016c79:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016c7d:	51                   	push   ecx
c0016c7e:	6a 00                	push   0x0
c0016c80:	6a 00                	push   0x0
c0016c82:	68 00 00 11 00       	push   0x110000
c0016c87:	57                   	push   edi
c0016c88:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016c8b:	83 c4 14             	add    esp,0x14
c0016c8e:	57                   	push   edi
c0016c8f:	e8 14 15 ff ff       	call   c00081a8 <File::close()>
c0016c94:	8b 07                	mov    eax,DWORD PTR [edi]
c0016c96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016c99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	c6 05 20 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d720,0x1
c0016ca6:	fa                   	cli    
c0016ca7:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016cad:	80 3d 29 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d729,0x0
c0016cb4:	75 18                	jne    c0016cce <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0016cb6:	e8 49 f4 ff ff       	call   c0016104 <schedule()>
c0016cbb:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016cc2:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016cc9:	75 db                	jne    c0016ca6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016ccb:	fb                   	sti    
c0016ccc:	eb d8                	jmp    c0016ca6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016cce:	c7 05 30 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x0
c0016cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cdc:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c0016ce1:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016ce5:	0f b7 f6             	movzx  esi,si
c0016ce8:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016cec:	0f b7 db             	movzx  ebx,bx
c0016cef:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016cf3:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016cf7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016cfb:	50                   	push   eax
c0016cfc:	6a 20                	push   0x20
c0016cfe:	6a 00                	push   0x0
c0016d00:	68 40 d7 02 c0       	push   0xc002d740
c0016d05:	e8 e6 97 fe ff       	call   c00004f0 <memset>
c0016d0a:	5a                   	pop    edx
c0016d0b:	59                   	pop    ecx
c0016d0c:	56                   	push   esi
c0016d0d:	53                   	push   ebx
c0016d0e:	e8 b7 fd ff ff       	call   c0016aca <Vm::realToLinear(unsigned short, unsigned short)>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d1a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016d1e:	89 c7                	mov    edi,eax
c0016d20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d22:	c6 05 29 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d729,0x0
c0016d29:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016d30:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016d37:	75 01                	jne    c0016d3a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016d39:	fb                   	sti    
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	ff 35 2c d7 02 c0    	push   DWORD PTR ds:0xc002d72c
c0016d43:	e8 bc f6 ff ff       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c0016d48:	83 c4 3c             	add    esp,0x3c
c0016d4b:	b0 01                	mov    al,0x1
c0016d4d:	5b                   	pop    ebx
c0016d4e:	5e                   	pop    esi
c0016d4f:	5f                   	pop    edi
c0016d50:	5d                   	pop    ebp
c0016d51:	c3                   	ret    

c0016d52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d52:	55                   	push   ebp
c0016d53:	57                   	push   edi
c0016d54:	56                   	push   esi
c0016d55:	53                   	push   ebx
c0016d56:	83 ec 2c             	sub    esp,0x2c
c0016d59:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d5d:	80 3d 20 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d720,0x0
c0016d64:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d68:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016d6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d70:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016d74:	75 5d                	jne    c0016dd3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016d76:	83 ec 0c             	sub    esp,0xc
c0016d79:	68 14 01 00 00       	push   0x114
c0016d7e:	e8 f9 83 ff ff       	call   c000f17c <malloc>
c0016d83:	83 c4 0c             	add    esp,0xc
c0016d86:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016d8c:	68 c0 40 02 c0       	push   0xc00240c0
c0016d91:	50                   	push   eax
c0016d92:	89 c3                	mov    ebx,eax
c0016d94:	e8 93 13 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0016d99:	58                   	pop    eax
c0016d9a:	5a                   	pop    edx
c0016d9b:	6a 12                	push   0x12
c0016d9d:	53                   	push   ebx
c0016d9e:	e8 a7 13 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016da3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016da5:	59                   	pop    ecx
c0016da6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016daa:	52                   	push   edx
c0016dab:	6a 00                	push   0x0
c0016dad:	6a 00                	push   0x0
c0016daf:	68 00 00 11 00       	push   0x110000
c0016db4:	53                   	push   ebx
c0016db5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016db8:	83 c4 14             	add    esp,0x14
c0016dbb:	53                   	push   ebx
c0016dbc:	e8 e7 13 ff ff       	call   c00081a8 <File::close()>
c0016dc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016dc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	c6 05 20 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d720,0x1
c0016dd3:	50                   	push   eax
c0016dd4:	50                   	push   eax
c0016dd5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016dd9:	68 db 40 02 c0       	push   0xc00240db
c0016dde:	e8 6b 01 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	fa                   	cli    
c0016de7:	8a 1d 29 d7 02 c0    	mov    bl,BYTE PTR ds:0xc002d729
c0016ded:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016df3:	84 db                	test   bl,bl
c0016df5:	75 18                	jne    c0016e0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0016df7:	e8 08 f3 ff ff       	call   c0016104 <schedule()>
c0016dfc:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016e03:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016e0a:	75 da                	jne    c0016de6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016e0c:	fb                   	sti    
c0016e0d:	eb d7                	jmp    c0016de6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016e0f:	c7 05 30 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x0
c0016e19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e1d:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c0016e22:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016e26:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e2a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e2e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e32:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e36:	50                   	push   eax
c0016e37:	6a 20                	push   0x20
c0016e39:	6a 00                	push   0x0
c0016e3b:	68 40 d7 02 c0       	push   0xc002d740
c0016e40:	e8 ab 96 fe ff       	call   c00004f0 <memset>
c0016e45:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016e4c:	e8 2b 83 ff ff       	call   c000f17c <malloc>
c0016e51:	83 c4 0c             	add    esp,0xc
c0016e54:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016e5a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e5e:	89 c5                	mov    ebp,eax
c0016e60:	50                   	push   eax
c0016e61:	e8 c6 12 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0016e66:	83 c4 10             	add    esp,0x10
c0016e69:	85 ed                	test   ebp,ebp
c0016e6b:	75 0a                	jne    c0016e77 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0016e6d:	83 ec 0c             	sub    esp,0xc
c0016e70:	68 fd 40 02 c0       	push   0xc00240fd
c0016e75:	eb 2b                	jmp    c0016ea2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c0016e77:	50                   	push   eax
c0016e78:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016e7c:	50                   	push   eax
c0016e7d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016e81:	50                   	push   eax
c0016e82:	55                   	push   ebp
c0016e83:	e8 c4 15 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0016e88:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016e8c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016e98:	74 28                	je     c0016ec2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0016e9a:	83 ec 0c             	sub    esp,0xc
c0016e9d:	68 11 41 02 c0       	push   0xc0024111
c0016ea2:	e8 1b 86 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0016ea7:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016eae:	83 c4 10             	add    esp,0x10
c0016eb1:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016eb8:	75 01                	jne    c0016ebb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0016eba:	fb                   	sti    
c0016ebb:	31 db                	xor    ebx,ebx
c0016ebd:	e9 92 00 00 00       	jmp    c0016f54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0016ec2:	51                   	push   ecx
c0016ec3:	51                   	push   ecx
c0016ec4:	6a 01                	push   0x1
c0016ec6:	55                   	push   ebp
c0016ec7:	e8 7e 12 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	85 c0                	test   eax,eax
c0016ed1:	74 27                	je     c0016efa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c0016ed3:	83 ec 0c             	sub    esp,0xc
c0016ed6:	68 2a 41 02 c0       	push   0xc002412a
c0016edb:	e8 e2 85 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0016ee0:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016ee7:	83 c4 10             	add    esp,0x10
c0016eea:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016ef1:	75 c8                	jne    c0016ebb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0016ef3:	fb                   	sti    
c0016ef4:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016ef8:	eb 5a                	jmp    c0016f54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0016efa:	50                   	push   eax
c0016efb:	0f b7 ff             	movzx  edi,di
c0016efe:	50                   	push   eax
c0016eff:	0f b7 f6             	movzx  esi,si
c0016f02:	57                   	push   edi
c0016f03:	56                   	push   esi
c0016f04:	e8 c1 fb ff ff       	call   c0016aca <Vm::realToLinear(unsigned short, unsigned short)>
c0016f09:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f0c:	5a                   	pop    edx
c0016f0d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016f11:	56                   	push   esi
c0016f12:	50                   	push   eax
c0016f13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f1b:	55                   	push   ebp
c0016f1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f1f:	83 c4 14             	add    esp,0x14
c0016f22:	55                   	push   ebp
c0016f23:	e8 80 12 ff ff       	call   c00081a8 <File::close()>
c0016f28:	c6 05 29 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d729,0x0
c0016f2f:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016f36:	83 c4 10             	add    esp,0x10
c0016f39:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016f40:	75 01                	jne    c0016f43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c0016f42:	fb                   	sti    
c0016f43:	83 ec 0c             	sub    esp,0xc
c0016f46:	ff 35 2c d7 02 c0    	push   DWORD PTR ds:0xc002d72c
c0016f4c:	e8 b3 f4 ff ff       	call   c0016404 <unblockTask(ThreadControlBlock*)>
c0016f51:	83 c4 10             	add    esp,0x10
c0016f54:	83 c4 2c             	add    esp,0x2c
c0016f57:	88 d8                	mov    al,bl
c0016f59:	5b                   	pop    ebx
c0016f5a:	5e                   	pop    esi
c0016f5b:	5f                   	pop    edi
c0016f5c:	5d                   	pop    ebp
c0016f5d:	c3                   	ret    

c0016f5e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016f5e:	57                   	push   edi
c0016f5f:	56                   	push   esi
c0016f60:	53                   	push   ebx
c0016f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f69:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f6d:	83 e8 06             	sub    eax,0x6
c0016f70:	0f b7 c0             	movzx  eax,ax
c0016f73:	50                   	push   eax
c0016f74:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016f79:	50                   	push   eax
c0016f7a:	e8 4b fb ff ff       	call   c0016aca <Vm::realToLinear(unsigned short, unsigned short)>
c0016f7f:	5a                   	pop    edx
c0016f80:	59                   	pop    ecx
c0016f81:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016f84:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016f87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016f8a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016f90:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016f93:	8d 51 02             	lea    edx,[ecx+0x2]
c0016f96:	66 89 10             	mov    WORD PTR [eax],dx
c0016f99:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016f9d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016fa1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016fa5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016fa8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016fac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fb2:	89 f1                	mov    ecx,esi
c0016fb4:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016fb8:	89 f2                	mov    edx,esi
c0016fba:	0f b6 d6             	movzx  edx,dh
c0016fbd:	0f b6 f1             	movzx  esi,cl
c0016fc0:	74 0a                	je     c0016fcc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016fc2:	c1 e2 08             	shl    edx,0x8
c0016fc5:	09 f2                	or     edx,esi
c0016fc7:	80 ce 02             	or     dh,0x2
c0016fca:	eb 08                	jmp    c0016fd4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016fcc:	c1 e2 08             	shl    edx,0x8
c0016fcf:	09 f2                	or     edx,esi
c0016fd1:	80 e6 fd             	and    dh,0xfd
c0016fd4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016fd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fdd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016fe1:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016fe9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016fec:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ff4:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016ff7:	5b                   	pop    ebx
c0016ff8:	5e                   	pop    esi
c0016ff9:	5f                   	pop    edi
c0016ffa:	c3                   	ret    

c0016ffb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016ffb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017000:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017005:	c1 e0 04             	shl    eax,0x4
c0017008:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001700b:	c3                   	ret    

c001700c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001700c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017011:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017016:	c1 e0 04             	shl    eax,0x4
c0017019:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001701d:	c3                   	ret    

c001701e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001701e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017023:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017028:	c1 e0 04             	shl    eax,0x4
c001702b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001702e:	c3                   	ret    

c001702f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001702f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017034:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017039:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001703d:	c1 e0 04             	shl    eax,0x4
c0017040:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017043:	c3                   	ret    

c0017044 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017044:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017049:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001704e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017052:	c1 e0 04             	shl    eax,0x4
c0017055:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017059:	c3                   	ret    

c001705a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001705a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001705f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017068:	c1 e0 04             	shl    eax,0x4
c001706b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001706e:	c3                   	ret    

c001706f <Vm::faultHandler(regs*)>:
c001706f:	55                   	push   ebp
c0017070:	57                   	push   edi
c0017071:	56                   	push   esi
c0017072:	53                   	push   ebx
c0017073:	83 ec 2c             	sub    esp,0x2c
c0017076:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001707a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001707d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017081:	0f b7 f8             	movzx  edi,ax
c0017084:	0f b7 c0             	movzx  eax,ax
c0017087:	52                   	push   edx
c0017088:	50                   	push   eax
c0017089:	e8 3c fa ff ff       	call   c0016aca <Vm::realToLinear(unsigned short, unsigned short)>
c001708e:	5a                   	pop    edx
c001708f:	59                   	pop    ecx
c0017090:	89 c1                	mov    ecx,eax
c0017092:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017095:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017099:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001709e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170a2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00170a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170a9:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00170ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170ba:	e8 0b fa ff ff       	call   c0016aca <Vm::realToLinear(unsigned short, unsigned short)>
c00170bf:	5e                   	pop    esi
c00170c0:	be 06 00 00 00       	mov    esi,0x6
c00170c5:	5d                   	pop    ebp
c00170c6:	31 ed                	xor    ebp,ebp
c00170c8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00170cd:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00170d0:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00170d6:	0f 84 74 02 00 00    	je     c0017350 <Vm::faultHandler(regs*)+0x2e1>
c00170dc:	0f 87 94 00 00 00    	ja     c0017176 <Vm::faultHandler(regs*)+0x107>
c00170e2:	83 fa 66             	cmp    edx,0x66
c00170e5:	0f 84 e2 01 00 00    	je     c00172cd <Vm::faultHandler(regs*)+0x25e>
c00170eb:	77 47                	ja     c0017134 <Vm::faultHandler(regs*)+0xc5>
c00170ed:	83 fa 36             	cmp    edx,0x36
c00170f0:	0f 84 ca 01 00 00    	je     c00172c0 <Vm::faultHandler(regs*)+0x251>
c00170f6:	77 1a                	ja     c0017112 <Vm::faultHandler(regs*)+0xa3>
c00170f8:	83 fa 26             	cmp    edx,0x26
c00170fb:	0f 84 98 01 00 00    	je     c0017299 <Vm::faultHandler(regs*)+0x22a>
c0017101:	83 fa 2e             	cmp    edx,0x2e
c0017104:	0f 85 27 06 00 00    	jne    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c001710a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001710d:	31 f6                	xor    esi,esi
c001710f:	41                   	inc    ecx
c0017110:	eb bb                	jmp    c00170cd <Vm::faultHandler(regs*)+0x5e>
c0017112:	83 fa 64             	cmp    edx,0x64
c0017115:	0f 84 8b 01 00 00    	je     c00172a6 <Vm::faultHandler(regs*)+0x237>
c001711b:	0f 87 92 01 00 00    	ja     c00172b3 <Vm::faultHandler(regs*)+0x244>
c0017121:	83 fa 3e             	cmp    edx,0x3e
c0017124:	0f 85 07 06 00 00    	jne    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c001712a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001712d:	be 01 00 00 00       	mov    esi,0x1
c0017132:	eb db                	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c0017134:	83 fa 6d             	cmp    edx,0x6d
c0017137:	0f 84 34 03 00 00    	je     c0017471 <Vm::faultHandler(regs*)+0x402>
c001713d:	77 17                	ja     c0017156 <Vm::faultHandler(regs*)+0xe7>
c001713f:	83 fa 67             	cmp    edx,0x67
c0017142:	0f 84 92 01 00 00    	je     c00172da <Vm::faultHandler(regs*)+0x26b>
c0017148:	83 fa 6c             	cmp    edx,0x6c
c001714b:	0f 84 b1 02 00 00    	je     c0017402 <Vm::faultHandler(regs*)+0x393>
c0017151:	e9 db 05 00 00       	jmp    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c0017156:	83 fa 6f             	cmp    edx,0x6f
c0017159:	0f 84 40 04 00 00    	je     c001759f <Vm::faultHandler(regs*)+0x530>
c001715f:	0f 82 a2 03 00 00    	jb     c0017507 <Vm::faultHandler(regs*)+0x498>
c0017165:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001716b:	0f 84 76 01 00 00    	je     c00172e7 <Vm::faultHandler(regs*)+0x278>
c0017171:	e9 bb 05 00 00       	jmp    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c0017176:	81 fa ec 00 00 00    	cmp    edx,0xec
c001717c:	0f 84 57 05 00 00    	je     c00176d9 <Vm::faultHandler(regs*)+0x66a>
c0017182:	0f 87 a9 00 00 00    	ja     c0017231 <Vm::faultHandler(regs*)+0x1c2>
c0017188:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001718e:	0f 84 d6 04 00 00    	je     c001766a <Vm::faultHandler(regs*)+0x5fb>
c0017194:	77 78                	ja     c001720e <Vm::faultHandler(regs*)+0x19f>
c0017196:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001719c:	0f 84 0e 02 00 00    	je     c00173b0 <Vm::faultHandler(regs*)+0x341>
c00171a2:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00171a8:	0f 85 83 05 00 00    	jne    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c00171ae:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00171b2:	89 d1                	mov    ecx,edx
c00171b4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00171b7:	c1 e1 08             	shl    ecx,0x8
c00171ba:	09 ca                	or     edx,ecx
c00171bc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00171bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00171c3:	89 d1                	mov    ecx,edx
c00171c5:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00171c9:	c1 e1 08             	shl    ecx,0x8
c00171cc:	09 ca                	or     edx,ecx
c00171ce:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00171d1:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00171d5:	89 d1                	mov    ecx,edx
c00171d7:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00171db:	c1 e1 08             	shl    ecx,0x8
c00171de:	09 ca                	or     edx,ecx
c00171e0:	81 ca 00 02 02 00    	or     edx,0x20200
c00171e6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00171e9:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00171ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00171f3:	d1 e8                	shr    eax,1
c00171f5:	83 e0 01             	and    eax,0x1
c00171f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00171fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171fe:	83 c0 06             	add    eax,0x6
c0017201:	25 ff ff 00 00       	and    eax,0xffff
c0017206:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017209:	e9 1f 05 00 00       	jmp    c001772d <Vm::faultHandler(regs*)+0x6be>
c001720e:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017214:	0f 84 95 04 00 00    	je     c00176af <Vm::faultHandler(regs*)+0x640>
c001721a:	0f 82 66 04 00 00    	jb     c0017686 <Vm::faultHandler(regs*)+0x617>
c0017220:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017226:	0f 84 9a 04 00 00    	je     c00176c6 <Vm::faultHandler(regs*)+0x657>
c001722c:	e9 00 05 00 00       	jmp    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c0017231:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017237:	0f 84 dd 04 00 00    	je     c001771a <Vm::faultHandler(regs*)+0x6ab>
c001723d:	77 2e                	ja     c001726d <Vm::faultHandler(regs*)+0x1fe>
c001723f:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017245:	0f 84 aa 04 00 00    	je     c00176f5 <Vm::faultHandler(regs*)+0x686>
c001724b:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017251:	0f 85 da 04 00 00    	jne    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c0017257:	50                   	push   eax
c0017258:	50                   	push   eax
c0017259:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001725d:	50                   	push   eax
c001725e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017262:	50                   	push   eax
c0017263:	e8 2c f8 ff ff       	call   c0016a94 <Vm::outbv(unsigned short, unsigned char)>
c0017268:	e9 a5 04 00 00       	jmp    c0017712 <Vm::faultHandler(regs*)+0x6a3>
c001726d:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017273:	0f 84 6d 01 00 00    	je     c00173e6 <Vm::faultHandler(regs*)+0x377>
c0017279:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001727f:	0f 84 6f 01 00 00    	je     c00173f4 <Vm::faultHandler(regs*)+0x385>
c0017285:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001728b:	0f 85 a0 04 00 00    	jne    c0017731 <Vm::faultHandler(regs*)+0x6c2>
c0017291:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017294:	e9 76 fe ff ff       	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c0017299:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001729c:	be 02 00 00 00       	mov    esi,0x2
c00172a1:	e9 69 fe ff ff       	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c00172a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172a9:	be 03 00 00 00       	mov    esi,0x3
c00172ae:	e9 5c fe ff ff       	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c00172b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172b6:	be 04 00 00 00       	mov    esi,0x4
c00172bb:	e9 4f fe ff ff       	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c00172c0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c3:	be 05 00 00 00       	mov    esi,0x5
c00172c8:	e9 42 fe ff ff       	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c00172cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172d0:	bd 01 00 00 00       	mov    ebp,0x1
c00172d5:	e9 35 fe ff ff       	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c00172da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172dd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00172e2:	e9 28 fe ff ff       	jmp    c001710f <Vm::faultHandler(regs*)+0xa0>
c00172e7:	83 e5 01             	and    ebp,0x1
c00172ea:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00172f1:	74 30                	je     c0017323 <Vm::faultHandler(regs*)+0x2b4>
c00172f3:	83 e9 04             	sub    ecx,0x4
c00172f6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00172fc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017302:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017305:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017308:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001730e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017312:	0f 84 12 04 00 00    	je     c001772a <Vm::faultHandler(regs*)+0x6bb>
c0017318:	80 ce 02             	or     dh,0x2
c001731b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001731e:	e9 07 04 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c0017323:	83 e9 02             	sub    ecx,0x2
c0017326:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001732c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001732f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017333:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017339:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001733d:	74 05                	je     c0017344 <Vm::faultHandler(regs*)+0x2d5>
c001733f:	80 ce 02             	or     dh,0x2
c0017342:	eb 03                	jmp    c0017347 <Vm::faultHandler(regs*)+0x2d8>
c0017344:	80 e6 fd             	and    dh,0xfd
c0017347:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001734b:	e9 da 03 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c0017350:	83 e5 01             	and    ebp,0x1
c0017353:	74 2a                	je     c001737f <Vm::faultHandler(regs*)+0x310>
c0017355:	8b 10                	mov    edx,DWORD PTR [eax]
c0017357:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001735d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017363:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017366:	8b 00                	mov    eax,DWORD PTR [eax]
c0017368:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001736e:	c1 e8 09             	shr    eax,0x9
c0017371:	83 e0 01             	and    eax,0x1
c0017374:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017377:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001737a:	83 c0 04             	add    eax,0x4
c001737d:	eb 24                	jmp    c00173a3 <Vm::faultHandler(regs*)+0x334>
c001737f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017382:	81 ca 00 02 02 00    	or     edx,0x20200
c0017388:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001738b:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001738e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017394:	c1 e8 09             	shr    eax,0x9
c0017397:	83 e0 01             	and    eax,0x1
c001739a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001739d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173a0:	83 c0 02             	add    eax,0x2
c00173a3:	25 ff ff 00 00       	and    eax,0xffff
c00173a8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173ab:	e9 7a 03 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c00173b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173b4:	3d ee 00 00 00       	cmp    eax,0xee
c00173b9:	75 10                	jne    c00173cb <Vm::faultHandler(regs*)+0x35c>
c00173bb:	83 ec 0c             	sub    esp,0xc
c00173be:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00173c1:	e8 6e f7 ff ff       	call   c0016b34 <Vm::mainloop3(unsigned long)>
c00173c6:	e9 4a 03 00 00       	jmp    c0017715 <Vm::faultHandler(regs*)+0x6a6>
c00173cb:	83 ec 0c             	sub    esp,0xc
c00173ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00173d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173d6:	51                   	push   ecx
c00173d7:	50                   	push   eax
c00173d8:	53                   	push   ebx
c00173d9:	e8 80 fb ff ff       	call   c0016f5e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00173de:	83 c4 20             	add    esp,0x20
c00173e1:	e9 47 03 00 00       	jmp    c001772d <Vm::faultHandler(regs*)+0x6be>
c00173e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173eb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00173ef:	e9 36 03 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c00173f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173f9:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00173fd:	e9 28 03 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c0017402:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017407:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001740a:	74 2b                	je     c0017437 <Vm::faultHandler(regs*)+0x3c8>
c001740c:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017413:	76 22                	jbe    c0017437 <Vm::faultHandler(regs*)+0x3c8>
c0017415:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017419:	50                   	push   eax
c001741a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001741e:	50                   	push   eax
c001741f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017423:	50                   	push   eax
c0017424:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017428:	50                   	push   eax
c0017429:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001742d:	50                   	push   eax
c001742e:	6a 6c                	push   0x6c
c0017430:	6a 6c                	push   0x6c
c0017432:	e9 c0 01 00 00       	jmp    c00175f7 <Vm::faultHandler(regs*)+0x588>
c0017437:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001743b:	83 ec 0c             	sub    esp,0xc
c001743e:	0f b7 f6             	movzx  esi,si
c0017441:	50                   	push   eax
c0017442:	e8 3a f6 ff ff       	call   c0016a81 <Vm::inbv(unsigned short)>
c0017447:	83 c4 0c             	add    esp,0xc
c001744a:	0f b6 c0             	movzx  eax,al
c001744d:	50                   	push   eax
c001744e:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017452:	50                   	push   eax
c0017453:	56                   	push   esi
c0017454:	e8 d6 fb ff ff       	call   c001702f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017459:	83 c4 10             	add    esp,0x10
c001745c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001745f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017463:	74 03                	je     c0017468 <Vm::faultHandler(regs*)+0x3f9>
c0017465:	48                   	dec    eax
c0017466:	eb 01                	jmp    c0017469 <Vm::faultHandler(regs*)+0x3fa>
c0017468:	40                   	inc    eax
c0017469:	0f b7 c0             	movzx  eax,ax
c001746c:	e9 8e 00 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x490>
c0017471:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017476:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017479:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001747c:	74 29                	je     c00174a7 <Vm::faultHandler(regs*)+0x438>
c001747e:	3d ff ff 00 00       	cmp    eax,0xffff
c0017483:	76 22                	jbe    c00174a7 <Vm::faultHandler(regs*)+0x438>
c0017485:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017489:	50                   	push   eax
c001748a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001748e:	50                   	push   eax
c001748f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017493:	50                   	push   eax
c0017494:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017498:	50                   	push   eax
c0017499:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001749d:	50                   	push   eax
c001749e:	6a 6d                	push   0x6d
c00174a0:	6a 6d                	push   0x6d
c00174a2:	e9 50 01 00 00       	jmp    c00175f7 <Vm::faultHandler(regs*)+0x588>
c00174a7:	83 e5 01             	and    ebp,0x1
c00174aa:	0f b7 c8             	movzx  ecx,ax
c00174ad:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00174b0:	0f b7 f6             	movzx  esi,si
c00174b3:	74 1e                	je     c00174d3 <Vm::faultHandler(regs*)+0x464>
c00174b5:	ed                   	in     eax,dx
c00174b6:	55                   	push   ebp
c00174b7:	50                   	push   eax
c00174b8:	51                   	push   ecx
c00174b9:	56                   	push   esi
c00174ba:	e8 9b fb ff ff       	call   c001705a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00174bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174c2:	83 c4 10             	add    esp,0x10
c00174c5:	8d 50 04             	lea    edx,[eax+0x4]
c00174c8:	83 e8 04             	sub    eax,0x4
c00174cb:	81 e2 ff ff 00 00    	and    edx,0xffff
c00174d1:	eb 20                	jmp    c00174f3 <Vm::faultHandler(regs*)+0x484>
c00174d3:	66 ed                	in     ax,dx
c00174d5:	57                   	push   edi
c00174d6:	0f b7 c0             	movzx  eax,ax
c00174d9:	50                   	push   eax
c00174da:	51                   	push   ecx
c00174db:	56                   	push   esi
c00174dc:	e8 63 fb ff ff       	call   c0017044 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00174e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174e4:	83 c4 10             	add    esp,0x10
c00174e7:	8d 50 02             	lea    edx,[eax+0x2]
c00174ea:	83 e8 02             	sub    eax,0x2
c00174ed:	81 e2 ff ff 00 00    	and    edx,0xffff
c00174f3:	25 ff ff 00 00       	and    eax,0xffff
c00174f8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00174fc:	0f 44 c2             	cmove  eax,edx
c00174ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017502:	e9 23 02 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c0017507:	8d 46 ff             	lea    eax,[esi-0x1]
c001750a:	0f b6 f0             	movzx  esi,al
c001750d:	83 fe 05             	cmp    esi,0x5
c0017510:	77 23                	ja     c0017535 <Vm::faultHandler(regs*)+0x4c6>
c0017512:	ff 24 b5 a0 41 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbe60]
c0017519:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001751e:	eb 15                	jmp    c0017535 <Vm::faultHandler(regs*)+0x4c6>
c0017520:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017524:	eb 0f                	jmp    c0017535 <Vm::faultHandler(regs*)+0x4c6>
c0017526:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001752a:	eb 09                	jmp    c0017535 <Vm::faultHandler(regs*)+0x4c6>
c001752c:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017530:	eb 03                	jmp    c0017535 <Vm::faultHandler(regs*)+0x4c6>
c0017532:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017535:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001753a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001753d:	74 29                	je     c0017568 <Vm::faultHandler(regs*)+0x4f9>
c001753f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017544:	76 22                	jbe    c0017568 <Vm::faultHandler(regs*)+0x4f9>
c0017546:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001754a:	50                   	push   eax
c001754b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001754f:	50                   	push   eax
c0017550:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017554:	50                   	push   eax
c0017555:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017559:	50                   	push   eax
c001755a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001755e:	50                   	push   eax
c001755f:	6a 6e                	push   0x6e
c0017561:	6a 6e                	push   0x6e
c0017563:	e9 8f 00 00 00       	jmp    c00175f7 <Vm::faultHandler(regs*)+0x588>
c0017568:	52                   	push   edx
c0017569:	0f b7 c0             	movzx  eax,ax
c001756c:	52                   	push   edx
c001756d:	50                   	push   eax
c001756e:	57                   	push   edi
c001756f:	e8 87 fa ff ff       	call   c0016ffb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017574:	59                   	pop    ecx
c0017575:	5e                   	pop    esi
c0017576:	0f b6 c0             	movzx  eax,al
c0017579:	50                   	push   eax
c001757a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001757e:	50                   	push   eax
c001757f:	e8 10 f5 ff ff       	call   c0016a94 <Vm::outbv(unsigned short, unsigned char)>
c0017584:	83 c4 10             	add    esp,0x10
c0017587:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001758a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001758e:	74 03                	je     c0017593 <Vm::faultHandler(regs*)+0x524>
c0017590:	48                   	dec    eax
c0017591:	eb 01                	jmp    c0017594 <Vm::faultHandler(regs*)+0x525>
c0017593:	40                   	inc    eax
c0017594:	0f b7 c0             	movzx  eax,ax
c0017597:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001759a:	e9 8b 01 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c001759f:	8d 46 ff             	lea    eax,[esi-0x1]
c00175a2:	0f b6 f0             	movzx  esi,al
c00175a5:	83 fe 05             	cmp    esi,0x5
c00175a8:	77 1e                	ja     c00175c8 <Vm::faultHandler(regs*)+0x559>
c00175aa:	ff 24 b5 b8 41 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbe48]
c00175b1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00175b5:	eb 11                	jmp    c00175c8 <Vm::faultHandler(regs*)+0x559>
c00175b7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00175ba:	eb 0c                	jmp    c00175c8 <Vm::faultHandler(regs*)+0x559>
c00175bc:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00175bf:	eb 07                	jmp    c00175c8 <Vm::faultHandler(regs*)+0x559>
c00175c1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00175c4:	eb 02                	jmp    c00175c8 <Vm::faultHandler(regs*)+0x559>
c00175c6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00175c8:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175cd:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00175d0:	74 37                	je     c0017609 <Vm::faultHandler(regs*)+0x59a>
c00175d2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00175d8:	76 2f                	jbe    c0017609 <Vm::faultHandler(regs*)+0x59a>
c00175da:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175de:	50                   	push   eax
c00175df:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175e3:	50                   	push   eax
c00175e4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175e8:	50                   	push   eax
c00175e9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175ed:	50                   	push   eax
c00175ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175f2:	50                   	push   eax
c00175f3:	6a 6f                	push   0x6f
c00175f5:	6a 6f                	push   0x6f
c00175f7:	68 43 41 02 c0       	push   0xc0024143
c00175fc:	e8 4d f9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017601:	83 c4 20             	add    esp,0x20
c0017604:	e9 86 01 00 00       	jmp    c001778f <Vm::faultHandler(regs*)+0x720>
c0017609:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001760c:	0f b7 d7             	movzx  edx,di
c001760f:	0f b7 c6             	movzx  eax,si
c0017612:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017615:	81 e1 00 04 00 00    	and    ecx,0x400
c001761b:	83 e5 01             	and    ebp,0x1
c001761e:	74 1c                	je     c001763c <Vm::faultHandler(regs*)+0x5cd>
c0017620:	55                   	push   ebp
c0017621:	55                   	push   ebp
c0017622:	50                   	push   eax
c0017623:	52                   	push   edx
c0017624:	e8 f5 f9 ff ff       	call   c001701e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017629:	83 c4 10             	add    esp,0x10
c001762c:	89 fa                	mov    edx,edi
c001762e:	ef                   	out    dx,eax
c001762f:	8d 46 04             	lea    eax,[esi+0x4]
c0017632:	83 ee 04             	sub    esi,0x4
c0017635:	25 ff ff 00 00       	and    eax,0xffff
c001763a:	eb 1b                	jmp    c0017657 <Vm::faultHandler(regs*)+0x5e8>
c001763c:	55                   	push   ebp
c001763d:	55                   	push   ebp
c001763e:	50                   	push   eax
c001763f:	52                   	push   edx
c0017640:	e8 c7 f9 ff ff       	call   c001700c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	89 fa                	mov    edx,edi
c001764a:	66 ef                	out    dx,ax
c001764c:	8d 46 02             	lea    eax,[esi+0x2]
c001764f:	83 ee 02             	sub    esi,0x2
c0017652:	25 ff ff 00 00       	and    eax,0xffff
c0017657:	81 e6 ff ff 00 00    	and    esi,0xffff
c001765d:	85 c9                	test   ecx,ecx
c001765f:	0f 44 f0             	cmove  esi,eax
c0017662:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017665:	e9 c0 00 00 00       	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c001766a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017671:	83 ec 0c             	sub    esp,0xc
c0017674:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017678:	50                   	push   eax
c0017679:	e8 03 f4 ff ff       	call   c0016a81 <Vm::inbv(unsigned short)>
c001767e:	0f b6 c0             	movzx  eax,al
c0017681:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017684:	eb 3a                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x651>
c0017686:	83 e5 01             	and    ebp,0x1
c0017689:	74 07                	je     c0017692 <Vm::faultHandler(regs*)+0x623>
c001768b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001768f:	ed                   	in     eax,dx
c0017690:	eb 14                	jmp    c00176a6 <Vm::faultHandler(regs*)+0x637>
c0017692:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017695:	66 31 f6             	xor    si,si
c0017698:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001769b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001769f:	66 ed                	in     ax,dx
c00176a1:	0f b7 c0             	movzx  eax,ax
c00176a4:	09 f0                	or     eax,esi
c00176a6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00176a9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00176ad:	eb 7e                	jmp    c001772d <Vm::faultHandler(regs*)+0x6be>
c00176af:	52                   	push   edx
c00176b0:	52                   	push   edx
c00176b1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00176b5:	50                   	push   eax
c00176b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176ba:	50                   	push   eax
c00176bb:	e8 d4 f3 ff ff       	call   c0016a94 <Vm::outbv(unsigned short, unsigned char)>
c00176c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00176c4:	eb 4f                	jmp    c0017715 <Vm::faultHandler(regs*)+0x6a6>
c00176c6:	83 e5 01             	and    ebp,0x1
c00176c9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00176cc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176d0:	74 03                	je     c00176d5 <Vm::faultHandler(regs*)+0x666>
c00176d2:	ef                   	out    dx,eax
c00176d3:	eb d4                	jmp    c00176a9 <Vm::faultHandler(regs*)+0x63a>
c00176d5:	66 ef                	out    dx,ax
c00176d7:	eb d0                	jmp    c00176a9 <Vm::faultHandler(regs*)+0x63a>
c00176d9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176dd:	83 ec 0c             	sub    esp,0xc
c00176e0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00176e7:	50                   	push   eax
c00176e8:	e8 94 f3 ff ff       	call   c0016a81 <Vm::inbv(unsigned short)>
c00176ed:	0f b6 c0             	movzx  eax,al
c00176f0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00176f3:	eb 1d                	jmp    c0017712 <Vm::faultHandler(regs*)+0x6a3>
c00176f5:	83 e5 01             	and    ebp,0x1
c00176f8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00176fb:	74 03                	je     c0017700 <Vm::faultHandler(regs*)+0x691>
c00176fd:	ed                   	in     eax,dx
c00176fe:	eb 0d                	jmp    c001770d <Vm::faultHandler(regs*)+0x69e>
c0017700:	66 ed                	in     ax,dx
c0017702:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017705:	0f b7 c0             	movzx  eax,ax
c0017708:	66 31 d2             	xor    dx,dx
c001770b:	09 d0                	or     eax,edx
c001770d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017710:	eb 18                	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c0017712:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	eb 13                	jmp    c001772d <Vm::faultHandler(regs*)+0x6be>
c001771a:	83 e5 01             	and    ebp,0x1
c001771d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017720:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017723:	74 03                	je     c0017728 <Vm::faultHandler(regs*)+0x6b9>
c0017725:	ef                   	out    dx,eax
c0017726:	eb 02                	jmp    c001772a <Vm::faultHandler(regs*)+0x6bb>
c0017728:	66 ef                	out    dx,ax
c001772a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001772d:	b0 01                	mov    al,0x1
c001772f:	eb 60                	jmp    c0017791 <Vm::faultHandler(regs*)+0x722>
c0017731:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017735:	50                   	push   eax
c0017736:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001773a:	50                   	push   eax
c001773b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001773f:	50                   	push   eax
c0017740:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017744:	50                   	push   eax
c0017745:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017749:	50                   	push   eax
c001774a:	52                   	push   edx
c001774b:	52                   	push   edx
c001774c:	68 70 41 02 c0       	push   0xc0024170
c0017751:	e8 f8 f7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017756:	83 c4 20             	add    esp,0x20
c0017759:	83 ec 0c             	sub    esp,0xc
c001775c:	6a 60                	push   0x60
c001775e:	e8 1e f3 ff ff       	call   c0016a81 <Vm::inbv(unsigned short)>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	0f b6 d0             	movzx  edx,al
c0017769:	83 fa 1c             	cmp    edx,0x1c
c001776c:	74 05                	je     c0017773 <Vm::faultHandler(regs*)+0x704>
c001776e:	83 fa 5a             	cmp    edx,0x5a
c0017771:	75 e6                	jne    c0017759 <Vm::faultHandler(regs*)+0x6ea>
c0017773:	0f b6 c0             	movzx  eax,al
c0017776:	83 f8 1c             	cmp    eax,0x1c
c0017779:	74 05                	je     c0017780 <Vm::faultHandler(regs*)+0x711>
c001777b:	83 f8 5a             	cmp    eax,0x5a
c001777e:	75 0f                	jne    c001778f <Vm::faultHandler(regs*)+0x720>
c0017780:	83 ec 0c             	sub    esp,0xc
c0017783:	6a 60                	push   0x60
c0017785:	e8 f7 f2 ff ff       	call   c0016a81 <Vm::inbv(unsigned short)>
c001778a:	83 c4 10             	add    esp,0x10
c001778d:	eb e4                	jmp    c0017773 <Vm::faultHandler(regs*)+0x704>
c001778f:	31 c0                	xor    eax,eax
c0017791:	83 c4 2c             	add    esp,0x2c
c0017794:	5b                   	pop    ebx
c0017795:	5e                   	pop    esi
c0017796:	5f                   	pop    edi
c0017797:	5d                   	pop    ebp
c0017798:	c3                   	ret    
c0017799:	90                   	nop

c001779a <noCopro(unsigned long)>:
c001779a:	c3                   	ret    
c001779b:	90                   	nop

c001779c <CPU::close(int, int, void*)>:
c001779c:	31 c0                	xor    eax,eax
c001779e:	c3                   	ret    

c001779f <x86ReadCMOS(unsigned char)>:
c001779f:	83 ec 14             	sub    esp,0x14
c00177a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177a6:	88 04 24             	mov    BYTE PTR [esp],al
c00177a9:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00177ae:	0f b6 c0             	movzx  eax,al
c00177b1:	85 c0                	test   eax,eax
c00177b3:	74 04                	je     c00177b9 <x86ReadCMOS(unsigned char)+0x1a>
c00177b5:	b2 00                	mov    dl,0x0
c00177b7:	eb 02                	jmp    c00177bb <x86ReadCMOS(unsigned char)+0x1c>
c00177b9:	b2 80                	mov    dl,0x80
c00177bb:	8a 04 24             	mov    al,BYTE PTR [esp]
c00177be:	09 d0                	or     eax,edx
c00177c0:	0f b6 c0             	movzx  eax,al
c00177c3:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00177ca:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00177ce:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00177d2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00177d7:	ee                   	out    dx,al
c00177d8:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00177df:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00177e4:	89 c2                	mov    edx,eax
c00177e6:	ec                   	in     al,dx
c00177e7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00177eb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00177ef:	83 c4 14             	add    esp,0x14
c00177f2:	c3                   	ret    

c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>:
c00177f3:	83 ec 18             	sub    esp,0x18
c00177f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177fe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017802:	88 d0                	mov    al,dl
c0017804:	88 04 24             	mov    BYTE PTR [esp],al
c0017807:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001780c:	0f b6 c0             	movzx  eax,al
c001780f:	85 c0                	test   eax,eax
c0017811:	74 04                	je     c0017817 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0017813:	b2 00                	mov    dl,0x0
c0017815:	eb 02                	jmp    c0017819 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0017817:	b2 80                	mov    dl,0x80
c0017819:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001781d:	09 d0                	or     eax,edx
c001781f:	0f b6 c0             	movzx  eax,al
c0017822:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0017829:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001782d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017831:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017836:	ee                   	out    dx,al
c0017837:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001783b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0017842:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0017846:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001784a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001784f:	ee                   	out    dx,al
c0017850:	90                   	nop
c0017851:	83 c4 18             	add    esp,0x18
c0017854:	c3                   	ret    

c0017855 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0017855:	60                   	pusha  
c0017856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001785a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001785e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017862:	9c                   	pushf  
c0017863:	fa                   	cli    
c0017864:	0f 09                	wbinvd 
c0017866:	0f 30                	wrmsr  
c0017868:	9d                   	popf   
c0017869:	89 c2                	mov    edx,eax
c001786b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001786f:	89 10                	mov    DWORD PTR [eax],edx
c0017871:	61                   	popa   
c0017872:	90                   	nop
c0017873:	c3                   	ret    

c0017874 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0017874:	60                   	pusha  
c0017875:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017879:	89 c1                	mov    ecx,eax
c001787b:	9c                   	pushf  
c001787c:	fa                   	cli    
c001787d:	0f 09                	wbinvd 
c001787f:	31 c0                	xor    eax,eax
c0017881:	31 d2                	xor    edx,edx
c0017883:	0f 32                	rdmsr  
c0017885:	9d                   	popf   
c0017886:	89 c2                	mov    edx,eax
c0017888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001788c:	89 10                	mov    DWORD PTR [eax],edx
c001788e:	61                   	popa   
c001788f:	90                   	nop
c0017890:	c3                   	ret    

c0017891 <AMD_K6_writeback(int, int, int)>:
c0017891:	83 ec 20             	sub    esp,0x20
c0017894:	a1 d4 cd 02 c0       	mov    eax,ds:0xc002cdd4
c0017899:	c1 e8 14             	shr    eax,0x14
c001789c:	c1 e8 02             	shr    eax,0x2
c001789f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178a3:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c00178a8:	0f 85 9e 00 00 00    	jne    c001794c <AMD_K6_writeback(int, int, int)+0xbb>
c00178ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178b6:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c00178bb:	75 19                	jne    c00178d6 <AMD_K6_writeback(int, int, int)+0x45>
c00178bd:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00178c2:	7f 0a                	jg     c00178ce <AMD_K6_writeback(int, int, int)+0x3d>
c00178c4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00178cc:	eb 08                	jmp    c00178d6 <AMD_K6_writeback(int, int, int)+0x45>
c00178ce:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00178d6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00178db:	7c 6e                	jl     c001794b <AMD_K6_writeback(int, int, int)+0xba>
c00178dd:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00178e2:	7e 09                	jle    c00178ed <AMD_K6_writeback(int, int, int)+0x5c>
c00178e4:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00178e9:	74 36                	je     c0017921 <AMD_K6_writeback(int, int, int)+0x90>
c00178eb:	eb 5e                	jmp    c001794b <AMD_K6_writeback(int, int, int)+0xba>
c00178ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c00178f1:	50                   	push   eax
c00178f2:	68 82 00 00 c0       	push   0xc0000082
c00178f7:	e8 78 ff ff ff       	call   c0017874 <AMD_K6_read_msr(unsigned int, REGS*)>
c00178fc:	83 c4 08             	add    esp,0x8
c00178ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017903:	d1 e0                	shl    eax,1
c0017905:	83 e0 7f             	and    eax,0x7f
c0017908:	89 c2                	mov    edx,eax
c001790a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001790e:	50                   	push   eax
c001790f:	6a 00                	push   0x0
c0017911:	52                   	push   edx
c0017912:	68 82 00 00 c0       	push   0xc0000082
c0017917:	e8 39 ff ff ff       	call   c0017855 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001791c:	83 c4 10             	add    esp,0x10
c001791f:	eb 2b                	jmp    c001794c <AMD_K6_writeback(int, int, int)+0xbb>
c0017921:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017925:	50                   	push   eax
c0017926:	68 82 00 00 c0       	push   0xc0000082
c001792b:	e8 44 ff ff ff       	call   c0017874 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017930:	83 c4 08             	add    esp,0x8
c0017933:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017937:	50                   	push   eax
c0017938:	6a 00                	push   0x0
c001793a:	6a 00                	push   0x0
c001793c:	68 82 00 00 c0       	push   0xc0000082
c0017941:	e8 0f ff ff ff       	call   c0017855 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	eb 01                	jmp    c001794c <AMD_K6_writeback(int, int, int)+0xbb>
c001794b:	90                   	nop
c001794c:	90                   	nop
c001794d:	83 c4 20             	add    esp,0x20
c0017950:	c3                   	ret    

c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017951:	56                   	push   esi
c0017952:	53                   	push   ebx
c0017953:	a1 00 5b 02 c0       	mov    eax,ds:0xc0025b00
c0017958:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001795c:	75 32                	jne    c0017990 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001795e:	8b 15 80 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d780
c0017964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017968:	89 10                	mov    DWORD PTR [eax],edx
c001796a:	8b 15 7c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d77c
c0017970:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017974:	89 10                	mov    DWORD PTR [eax],edx
c0017976:	8b 15 78 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d778
c001797c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017980:	89 10                	mov    DWORD PTR [eax],edx
c0017982:	8b 15 74 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d774
c0017988:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001798c:	89 10                	mov    DWORD PTR [eax],edx
c001798e:	eb 5c                	jmp    c00179ec <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0017990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017994:	ba 00 00 00 00       	mov    edx,0x0
c0017999:	89 d1                	mov    ecx,edx
c001799b:	0f a2                	cpuid  
c001799d:	89 c6                	mov    esi,eax
c001799f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a3:	89 30                	mov    DWORD PTR [eax],esi
c00179a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179a9:	89 18                	mov    DWORD PTR [eax],ebx
c00179ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179af:	89 08                	mov    DWORD PTR [eax],ecx
c00179b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179b5:	89 10                	mov    DWORD PTR [eax],edx
c00179b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179bb:	a3 00 5b 02 c0       	mov    ds:0xc0025b00,eax
c00179c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00179c6:	a3 80 d7 02 c0       	mov    ds:0xc002d780,eax
c00179cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00179d1:	a3 7c d7 02 c0       	mov    ds:0xc002d77c,eax
c00179d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179da:	8b 00                	mov    eax,DWORD PTR [eax]
c00179dc:	a3 78 d7 02 c0       	mov    ds:0xc002d778,eax
c00179e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00179e7:	a3 74 d7 02 c0       	mov    ds:0xc002d774,eax
c00179ec:	5b                   	pop    ebx
c00179ed:	5e                   	pop    esi
c00179ee:	c3                   	ret    

c00179ef <cpuidCheckEDX(unsigned int)>:
c00179ef:	83 ec 10             	sub    esp,0x10
c00179f2:	89 e0                	mov    eax,esp
c00179f4:	50                   	push   eax
c00179f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00179f9:	50                   	push   eax
c00179fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00179fe:	50                   	push   eax
c00179ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a03:	50                   	push   eax
c0017a04:	6a 01                	push   0x1
c0017a06:	e8 46 ff ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017a0b:	83 c4 14             	add    esp,0x14
c0017a0e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017a11:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017a15:	0f 95 c0             	setne  al
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	c3                   	ret    

c0017a1c <cpuidCheckECX(unsigned int)>:
c0017a1c:	83 ec 10             	sub    esp,0x10
c0017a1f:	89 e0                	mov    eax,esp
c0017a21:	50                   	push   eax
c0017a22:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a26:	50                   	push   eax
c0017a27:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017a2b:	50                   	push   eax
c0017a2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a30:	50                   	push   eax
c0017a31:	6a 01                	push   0x1
c0017a33:	e8 19 ff ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017a38:	83 c4 14             	add    esp,0x14
c0017a3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a3f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017a43:	0f 95 c0             	setne  al
c0017a46:	83 c4 10             	add    esp,0x10
c0017a49:	c3                   	ret    

c0017a4a <cpuidCheckExtendedEBX(unsigned int)>:
c0017a4a:	83 ec 10             	sub    esp,0x10
c0017a4d:	89 e0                	mov    eax,esp
c0017a4f:	50                   	push   eax
c0017a50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a54:	50                   	push   eax
c0017a55:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017a59:	50                   	push   eax
c0017a5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a5e:	50                   	push   eax
c0017a5f:	6a 07                	push   0x7
c0017a61:	e8 eb fe ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017a66:	83 c4 14             	add    esp,0x14
c0017a69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a6d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017a71:	0f 95 c0             	setne  al
c0017a74:	83 c4 10             	add    esp,0x10
c0017a77:	c3                   	ret    

c0017a78 <cpuidCheckExtendedECX(unsigned int)>:
c0017a78:	83 ec 10             	sub    esp,0x10
c0017a7b:	89 e0                	mov    eax,esp
c0017a7d:	50                   	push   eax
c0017a7e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a82:	50                   	push   eax
c0017a83:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017a87:	50                   	push   eax
c0017a88:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a8c:	50                   	push   eax
c0017a8d:	6a 07                	push   0x7
c0017a8f:	e8 bd fe ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017a94:	83 c4 14             	add    esp,0x14
c0017a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a9b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017a9f:	0f 95 c0             	setne  al
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	c3                   	ret    

c0017aa6 <HalDetectFeatures()>:
c0017aa6:	57                   	push   edi
c0017aa7:	56                   	push   esi
c0017aa8:	53                   	push   ebx
c0017aa9:	81 ec 90 00 00 00    	sub    esp,0x90
c0017aaf:	83 ec 04             	sub    esp,0x4
c0017ab2:	6a 08                	push   0x8
c0017ab4:	6a 00                	push   0x0
c0017ab6:	68 ac d7 02 c0       	push   0xc002d7ac
c0017abb:	e8 30 8a fe ff       	call   c00004f0 <memset>
c0017ac0:	83 c4 10             	add    esp,0x10
c0017ac3:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017ac8:	83 c8 04             	or     eax,0x4
c0017acb:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017ad0:	e8 24 87 fe ff       	call   c00001f9 <detectCPUID>
c0017ad5:	85 c0                	test   eax,eax
c0017ad7:	0f 95 c0             	setne  al
c0017ada:	83 e0 01             	and    eax,0x1
c0017add:	83 e0 01             	and    eax,0x1
c0017ae0:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017ae3:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017ae8:	83 e0 fd             	and    eax,0xfffffffd
c0017aeb:	88 c2                	mov    dl,al
c0017aed:	88 c8                	mov    al,cl
c0017aef:	09 d0                	or     eax,edx
c0017af1:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017af6:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017afb:	83 e0 02             	and    eax,0x2
c0017afe:	0f b6 c0             	movzx  eax,al
c0017b01:	85 c0                	test   eax,eax
c0017b03:	0f 84 7f 02 00 00    	je     c0017d88 <HalDetectFeatures()+0x2e2>
c0017b09:	83 ec 0c             	sub    esp,0xc
c0017b0c:	6a 20                	push   0x20
c0017b0e:	e8 dc fe ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	83 e0 01             	and    eax,0x1
c0017b19:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017b20:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017b25:	83 e0 f7             	and    eax,0xfffffff7
c0017b28:	88 c2                	mov    dl,al
c0017b2a:	88 c8                	mov    al,cl
c0017b2c:	09 d0                	or     eax,edx
c0017b2e:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017b33:	83 ec 0c             	sub    esp,0xc
c0017b36:	68 00 00 00 04       	push   0x4000000
c0017b3b:	e8 af fe ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	89 c1                	mov    ecx,eax
c0017b45:	83 e1 01             	and    ecx,0x1
c0017b48:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017b4d:	83 e0 fe             	and    eax,0xfffffffe
c0017b50:	88 c2                	mov    dl,al
c0017b52:	88 c8                	mov    al,cl
c0017b54:	09 d0                	or     eax,edx
c0017b56:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017b5b:	83 ec 0c             	sub    esp,0xc
c0017b5e:	68 80 00 00 00       	push   0x80
c0017b63:	e8 87 fe ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017b68:	83 c4 10             	add    esp,0x10
c0017b6b:	89 c1                	mov    ecx,eax
c0017b6d:	c1 e1 07             	shl    ecx,0x7
c0017b70:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017b75:	83 e0 7f             	and    eax,0x7f
c0017b78:	88 c2                	mov    dl,al
c0017b7a:	88 c8                	mov    al,cl
c0017b7c:	09 d0                	or     eax,edx
c0017b7e:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017b83:	83 ec 0c             	sub    esp,0xc
c0017b86:	68 00 00 80 00       	push   0x800000
c0017b8b:	e8 5f fe ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	83 e0 01             	and    eax,0x1
c0017b96:	89 c1                	mov    ecx,eax
c0017b98:	c1 e1 05             	shl    ecx,0x5
c0017b9b:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017ba0:	83 e0 df             	and    eax,0xffffffdf
c0017ba3:	88 c2                	mov    dl,al
c0017ba5:	88 c8                	mov    al,cl
c0017ba7:	09 d0                	or     eax,edx
c0017ba9:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017bae:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0017bb3:	83 e0 01             	and    eax,0x1
c0017bb6:	75 0c                	jne    c0017bc4 <HalDetectFeatures()+0x11e>
c0017bb8:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0017bbd:	25 00 04 00 00       	and    eax,0x400
c0017bc2:	74 0f                	je     c0017bd3 <HalDetectFeatures()+0x12d>
c0017bc4:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017bc9:	83 e0 fe             	and    eax,0xfffffffe
c0017bcc:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017bd1:	eb 28                	jmp    c0017bfb <HalDetectFeatures()+0x155>
c0017bd3:	83 ec 0c             	sub    esp,0xc
c0017bd6:	68 00 02 00 00       	push   0x200
c0017bdb:	e8 0f fe ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	89 c1                	mov    ecx,eax
c0017be5:	83 e1 01             	and    ecx,0x1
c0017be8:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017bed:	83 e0 fe             	and    eax,0xfffffffe
c0017bf0:	88 c2                	mov    dl,al
c0017bf2:	88 c8                	mov    al,cl
c0017bf4:	09 d0                	or     eax,edx
c0017bf6:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017bfb:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017c00:	83 e0 01             	and    eax,0x1
c0017c03:	0f b6 c0             	movzx  eax,al
c0017c06:	85 c0                	test   eax,eax
c0017c08:	74 1c                	je     c0017c26 <HalDetectFeatures()+0x180>
c0017c0a:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017c0f:	83 e0 08             	and    eax,0x8
c0017c12:	0f b6 c0             	movzx  eax,al
c0017c15:	85 c0                	test   eax,eax
c0017c17:	75 0d                	jne    c0017c26 <HalDetectFeatures()+0x180>
c0017c19:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017c1e:	83 e0 fe             	and    eax,0xfffffffe
c0017c21:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017c26:	83 ec 0c             	sub    esp,0xc
c0017c29:	68 d0 41 02 c0       	push   0xc00241d0
c0017c2e:	e8 1b f3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017c33:	83 c4 10             	add    esp,0x10
c0017c36:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017c3b:	83 e0 fe             	and    eax,0xfffffffe
c0017c3e:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017c43:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0017c4b:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017c53:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0017c5b:	85 c0                	test   eax,eax
c0017c5d:	0f 84 ab 00 00 00    	je     c0017d0e <HalDetectFeatures()+0x268>
c0017c63:	83 ec 0c             	sub    esp,0xc
c0017c66:	6a 01                	push   0x1
c0017c68:	e8 af fd ff ff       	call   c0017a1c <cpuidCheckECX(unsigned int)>
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	83 e0 01             	and    eax,0x1
c0017c73:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017c76:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017c7b:	83 e0 fd             	and    eax,0xfffffffd
c0017c7e:	88 c2                	mov    dl,al
c0017c80:	88 c8                	mov    al,cl
c0017c82:	09 d0                	or     eax,edx
c0017c84:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017c89:	83 ec 0c             	sub    esp,0xc
c0017c8c:	68 00 02 00 00       	push   0x200
c0017c91:	e8 86 fd ff ff       	call   c0017a1c <cpuidCheckECX(unsigned int)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	83 e0 01             	and    eax,0x1
c0017c9c:	89 c1                	mov    ecx,eax
c0017c9e:	c1 e1 04             	shl    ecx,0x4
c0017ca1:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017ca6:	83 e0 ef             	and    eax,0xffffffef
c0017ca9:	88 c2                	mov    dl,al
c0017cab:	88 c8                	mov    al,cl
c0017cad:	09 d0                	or     eax,edx
c0017caf:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017cb4:	83 ec 0c             	sub    esp,0xc
c0017cb7:	68 00 00 08 00       	push   0x80000
c0017cbc:	e8 5b fd ff ff       	call   c0017a1c <cpuidCheckECX(unsigned int)>
c0017cc1:	83 c4 10             	add    esp,0x10
c0017cc4:	83 e0 01             	and    eax,0x1
c0017cc7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017cce:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017cd3:	83 e0 fb             	and    eax,0xfffffffb
c0017cd6:	88 c2                	mov    dl,al
c0017cd8:	88 c8                	mov    al,cl
c0017cda:	09 d0                	or     eax,edx
c0017cdc:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017ce1:	83 ec 0c             	sub    esp,0xc
c0017ce4:	68 00 00 10 00       	push   0x100000
c0017ce9:	e8 2e fd ff ff       	call   c0017a1c <cpuidCheckECX(unsigned int)>
c0017cee:	83 c4 10             	add    esp,0x10
c0017cf1:	83 e0 01             	and    eax,0x1
c0017cf4:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017cfb:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017d00:	83 e0 f7             	and    eax,0xfffffff7
c0017d03:	88 c2                	mov    dl,al
c0017d05:	88 c8                	mov    al,cl
c0017d07:	09 d0                	or     eax,edx
c0017d09:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017d0e:	83 ec 0c             	sub    esp,0xc
c0017d11:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017d15:	50                   	push   eax
c0017d16:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017d1a:	50                   	push   eax
c0017d1b:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017d1f:	50                   	push   eax
c0017d20:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017d24:	50                   	push   eax
c0017d25:	68 00 00 00 80       	push   0x80000000
c0017d2a:	e8 22 fc ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d2f:	83 c4 20             	add    esp,0x20
c0017d32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d36:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017d3b:	76 4b                	jbe    c0017d88 <HalDetectFeatures()+0x2e2>
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017d44:	50                   	push   eax
c0017d45:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017d49:	50                   	push   eax
c0017d4a:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017d4e:	50                   	push   eax
c0017d4f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017d53:	50                   	push   eax
c0017d54:	68 01 00 00 80       	push   0x80000001
c0017d59:	e8 f3 fb ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d5e:	83 c4 20             	add    esp,0x20
c0017d61:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017d66:	83 e0 bf             	and    eax,0xffffffbf
c0017d69:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017d6e:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017d73:	83 e0 fd             	and    eax,0xfffffffd
c0017d76:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017d7b:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017d80:	83 e0 fe             	and    eax,0xfffffffe
c0017d83:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017d88:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0017d8d:	25 00 04 00 00       	and    eax,0x400
c0017d92:	74 0d                	je     c0017da1 <HalDetectFeatures()+0x2fb>
c0017d94:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017d99:	83 e0 fb             	and    eax,0xfffffffb
c0017d9c:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017da1:	c6 05 a8 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d7a8,0x1
c0017da8:	83 ec 04             	sub    esp,0x4
c0017dab:	6a 0d                	push   0xd
c0017dad:	6a 00                	push   0x0
c0017daf:	68 90 d7 02 c0       	push   0xc002d790
c0017db4:	e8 37 87 fe ff       	call   c00004f0 <memset>
c0017db9:	83 c4 10             	add    esp,0x10
c0017dbc:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017dc1:	83 e0 02             	and    eax,0x2
c0017dc4:	0f b6 c0             	movzx  eax,al
c0017dc7:	85 c0                	test   eax,eax
c0017dc9:	0f 84 16 08 00 00    	je     c00185e5 <HalDetectFeatures()+0xb3f>
c0017dcf:	83 ec 0c             	sub    esp,0xc
c0017dd2:	6a 10                	push   0x10
c0017dd4:	e8 16 fc ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017dd9:	83 c4 10             	add    esp,0x10
c0017ddc:	83 e0 01             	and    eax,0x1
c0017ddf:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017de6:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017deb:	83 e0 f7             	and    eax,0xfffffff7
c0017dee:	88 c2                	mov    dl,al
c0017df0:	88 c8                	mov    al,cl
c0017df2:	09 d0                	or     eax,edx
c0017df4:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017df9:	83 ec 0c             	sub    esp,0xc
c0017dfc:	6a 40                	push   0x40
c0017dfe:	e8 ec fb ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017e03:	83 c4 10             	add    esp,0x10
c0017e06:	83 e0 01             	and    eax,0x1
c0017e09:	89 c1                	mov    ecx,eax
c0017e0b:	c1 e1 04             	shl    ecx,0x4
c0017e0e:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017e13:	83 e0 ef             	and    eax,0xffffffef
c0017e16:	88 c2                	mov    dl,al
c0017e18:	88 c8                	mov    al,cl
c0017e1a:	09 d0                	or     eax,edx
c0017e1c:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017e21:	83 ec 0c             	sub    esp,0xc
c0017e24:	6a 08                	push   0x8
c0017e26:	e8 c4 fb ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017e2b:	83 c4 10             	add    esp,0x10
c0017e2e:	83 e0 01             	and    eax,0x1
c0017e31:	89 c1                	mov    ecx,eax
c0017e33:	c1 e1 05             	shl    ecx,0x5
c0017e36:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017e3b:	83 e0 df             	and    eax,0xffffffdf
c0017e3e:	88 c2                	mov    dl,al
c0017e40:	88 c8                	mov    al,cl
c0017e42:	09 d0                	or     eax,edx
c0017e44:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017e49:	83 ec 0c             	sub    esp,0xc
c0017e4c:	68 00 20 00 00       	push   0x2000
c0017e51:	e8 99 fb ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017e56:	83 c4 10             	add    esp,0x10
c0017e59:	83 e0 01             	and    eax,0x1
c0017e5c:	89 c1                	mov    ecx,eax
c0017e5e:	c1 e1 06             	shl    ecx,0x6
c0017e61:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017e66:	83 e0 bf             	and    eax,0xffffffbf
c0017e69:	88 c2                	mov    dl,al
c0017e6b:	88 c8                	mov    al,cl
c0017e6d:	09 d0                	or     eax,edx
c0017e6f:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017e74:	83 ec 0c             	sub    esp,0xc
c0017e77:	68 00 00 01 00       	push   0x10000
c0017e7c:	e8 6e fb ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017e81:	83 c4 10             	add    esp,0x10
c0017e84:	89 c1                	mov    ecx,eax
c0017e86:	c1 e1 07             	shl    ecx,0x7
c0017e89:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017e8e:	83 e0 7f             	and    eax,0x7f
c0017e91:	88 c2                	mov    dl,al
c0017e93:	88 c8                	mov    al,cl
c0017e95:	09 d0                	or     eax,edx
c0017e97:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017e9c:	83 ec 0c             	sub    esp,0xc
c0017e9f:	6a 01                	push   0x1
c0017ea1:	e8 49 fb ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017ea6:	83 c4 10             	add    esp,0x10
c0017ea9:	83 e0 01             	and    eax,0x1
c0017eac:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017eb3:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0017eb8:	83 e0 f7             	and    eax,0xfffffff7
c0017ebb:	88 c2                	mov    dl,al
c0017ebd:	88 c8                	mov    al,cl
c0017ebf:	09 d0                	or     eax,edx
c0017ec1:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0017ec6:	83 ec 0c             	sub    esp,0xc
c0017ec9:	68 00 08 00 00       	push   0x800
c0017ece:	e8 1c fb ff ff       	call   c00179ef <cpuidCheckEDX(unsigned int)>
c0017ed3:	83 c4 10             	add    esp,0x10
c0017ed6:	89 c1                	mov    ecx,eax
c0017ed8:	83 e1 01             	and    ecx,0x1
c0017edb:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0017ee0:	83 e0 fe             	and    eax,0xfffffffe
c0017ee3:	88 c2                	mov    dl,al
c0017ee5:	88 c8                	mov    al,cl
c0017ee7:	09 d0                	or     eax,edx
c0017ee9:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0017eee:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017ef3:	83 e0 40             	and    eax,0x40
c0017ef6:	0f b6 c0             	movzx  eax,al
c0017ef9:	85 c0                	test   eax,eax
c0017efb:	74 0a                	je     c0017f07 <HalDetectFeatures()+0x461>
c0017efd:	c7 05 88 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d788,0x100
c0017f07:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017f0c:	83 e0 80             	and    eax,0xffffff80
c0017f0f:	0f b6 c0             	movzx  eax,al
c0017f12:	85 c0                	test   eax,eax
c0017f14:	74 0a                	je     c0017f20 <HalDetectFeatures()+0x47a>
c0017f16:	c7 05 84 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x80
c0017f20:	83 ec 0c             	sub    esp,0xc
c0017f23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017f27:	50                   	push   eax
c0017f28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f2c:	50                   	push   eax
c0017f2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f31:	50                   	push   eax
c0017f32:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017f36:	50                   	push   eax
c0017f37:	6a 00                	push   0x0
c0017f39:	e8 13 fa ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f3e:	83 c4 20             	add    esp,0x20
c0017f41:	c7 44 24 48 90 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d790
c0017f49:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017f4d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017f51:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0017f59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f5d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f61:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017f65:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017f69:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017f6d:	89 c6                	mov    esi,eax
c0017f6f:	89 d7                	mov    edi,edx
c0017f71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017f73:	89 c8                	mov    eax,ecx
c0017f75:	89 fa                	mov    edx,edi
c0017f77:	89 f3                	mov    ebx,esi
c0017f79:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017f7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017f81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017f85:	b8 94 d7 02 c0       	mov    eax,0xc002d794
c0017f8a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017f8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f92:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0017f96:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017f9e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0017fa2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0017fa6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017faa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0017fae:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0017fb2:	89 c6                	mov    esi,eax
c0017fb4:	89 d7                	mov    edi,edx
c0017fb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017fb8:	89 c8                	mov    eax,ecx
c0017fba:	89 fa                	mov    edx,edi
c0017fbc:	89 f3                	mov    ebx,esi
c0017fbe:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0017fc2:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0017fc6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017fca:	b8 98 d7 02 c0       	mov    eax,0xc002d798
c0017fcf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017fd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fda:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0017fde:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017fe6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0017fed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0017ff1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017ff5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0017ffc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018000:	89 c6                	mov    esi,eax
c0018002:	89 d7                	mov    edi,edx
c0018004:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018006:	89 c8                	mov    eax,ecx
c0018008:	89 fa                	mov    edx,edi
c001800a:	89 f3                	mov    ebx,esi
c001800c:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018010:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018014:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018018:	83 ec 08             	sub    esp,0x8
c001801b:	68 e2 41 02 c0       	push   0xc00241e2
c0018020:	68 90 d7 02 c0       	push   0xc002d790
c0018025:	e8 56 87 fe ff       	call   c0000780 <strcmp>
c001802a:	83 c4 10             	add    esp,0x10
c001802d:	85 c0                	test   eax,eax
c001802f:	74 19                	je     c001804a <HalDetectFeatures()+0x5a4>
c0018031:	83 ec 08             	sub    esp,0x8
c0018034:	68 ef 41 02 c0       	push   0xc00241ef
c0018039:	68 90 d7 02 c0       	push   0xc002d790
c001803e:	e8 3d 87 fe ff       	call   c0000780 <strcmp>
c0018043:	83 c4 10             	add    esp,0x10
c0018046:	85 c0                	test   eax,eax
c0018048:	75 04                	jne    c001804e <HalDetectFeatures()+0x5a8>
c001804a:	b0 01                	mov    al,0x1
c001804c:	eb 02                	jmp    c0018050 <HalDetectFeatures()+0x5aa>
c001804e:	b0 00                	mov    al,0x0
c0018050:	0f b6 c0             	movzx  eax,al
c0018053:	85 c0                	test   eax,eax
c0018055:	74 0f                	je     c0018066 <HalDetectFeatures()+0x5c0>
c0018057:	c7 05 a4 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x2
c0018061:	e9 0d 03 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018066:	83 ec 08             	sub    esp,0x8
c0018069:	68 fc 41 02 c0       	push   0xc00241fc
c001806e:	68 90 d7 02 c0       	push   0xc002d790
c0018073:	e8 08 87 fe ff       	call   c0000780 <strcmp>
c0018078:	83 c4 10             	add    esp,0x10
c001807b:	85 c0                	test   eax,eax
c001807d:	74 19                	je     c0018098 <HalDetectFeatures()+0x5f2>
c001807f:	83 ec 08             	sub    esp,0x8
c0018082:	68 09 42 02 c0       	push   0xc0024209
c0018087:	68 90 d7 02 c0       	push   0xc002d790
c001808c:	e8 ef 86 fe ff       	call   c0000780 <strcmp>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	85 c0                	test   eax,eax
c0018096:	75 04                	jne    c001809c <HalDetectFeatures()+0x5f6>
c0018098:	b0 01                	mov    al,0x1
c001809a:	eb 02                	jmp    c001809e <HalDetectFeatures()+0x5f8>
c001809c:	b0 00                	mov    al,0x0
c001809e:	0f b6 c0             	movzx  eax,al
c00180a1:	85 c0                	test   eax,eax
c00180a3:	74 0f                	je     c00180b4 <HalDetectFeatures()+0x60e>
c00180a5:	c7 05 a4 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x4
c00180af:	e9 bf 02 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c00180b4:	83 ec 08             	sub    esp,0x8
c00180b7:	68 16 42 02 c0       	push   0xc0024216
c00180bc:	68 90 d7 02 c0       	push   0xc002d790
c00180c1:	e8 ba 86 fe ff       	call   c0000780 <strcmp>
c00180c6:	83 c4 10             	add    esp,0x10
c00180c9:	85 c0                	test   eax,eax
c00180cb:	74 19                	je     c00180e6 <HalDetectFeatures()+0x640>
c00180cd:	83 ec 08             	sub    esp,0x8
c00180d0:	68 23 42 02 c0       	push   0xc0024223
c00180d5:	68 90 d7 02 c0       	push   0xc002d790
c00180da:	e8 a1 86 fe ff       	call   c0000780 <strcmp>
c00180df:	83 c4 10             	add    esp,0x10
c00180e2:	85 c0                	test   eax,eax
c00180e4:	75 04                	jne    c00180ea <HalDetectFeatures()+0x644>
c00180e6:	b0 01                	mov    al,0x1
c00180e8:	eb 02                	jmp    c00180ec <HalDetectFeatures()+0x646>
c00180ea:	b0 00                	mov    al,0x0
c00180ec:	0f b6 c0             	movzx  eax,al
c00180ef:	85 c0                	test   eax,eax
c00180f1:	74 0f                	je     c0018102 <HalDetectFeatures()+0x65c>
c00180f3:	c7 05 a4 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x5
c00180fd:	e9 71 02 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018102:	83 ec 08             	sub    esp,0x8
c0018105:	68 30 42 02 c0       	push   0xc0024230
c001810a:	68 90 d7 02 c0       	push   0xc002d790
c001810f:	e8 6c 86 fe ff       	call   c0000780 <strcmp>
c0018114:	83 c4 10             	add    esp,0x10
c0018117:	85 c0                	test   eax,eax
c0018119:	0f 94 c0             	sete   al
c001811c:	0f b6 c0             	movzx  eax,al
c001811f:	85 c0                	test   eax,eax
c0018121:	74 0f                	je     c0018132 <HalDetectFeatures()+0x68c>
c0018123:	c7 05 a4 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x1
c001812d:	e9 41 02 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018132:	83 ec 08             	sub    esp,0x8
c0018135:	68 3d 42 02 c0       	push   0xc002423d
c001813a:	68 90 d7 02 c0       	push   0xc002d790
c001813f:	e8 3c 86 fe ff       	call   c0000780 <strcmp>
c0018144:	83 c4 10             	add    esp,0x10
c0018147:	85 c0                	test   eax,eax
c0018149:	0f 94 c0             	sete   al
c001814c:	0f b6 c0             	movzx  eax,al
c001814f:	85 c0                	test   eax,eax
c0018151:	74 0f                	je     c0018162 <HalDetectFeatures()+0x6bc>
c0018153:	c7 05 a4 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x3
c001815d:	e9 11 02 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018162:	83 ec 08             	sub    esp,0x8
c0018165:	68 fc 41 02 c0       	push   0xc00241fc
c001816a:	68 90 d7 02 c0       	push   0xc002d790
c001816f:	e8 0c 86 fe ff       	call   c0000780 <strcmp>
c0018174:	83 c4 10             	add    esp,0x10
c0018177:	85 c0                	test   eax,eax
c0018179:	0f 94 c0             	sete   al
c001817c:	0f b6 c0             	movzx  eax,al
c001817f:	85 c0                	test   eax,eax
c0018181:	74 0f                	je     c0018192 <HalDetectFeatures()+0x6ec>
c0018183:	c7 05 a4 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x6
c001818d:	e9 e1 01 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018192:	83 ec 08             	sub    esp,0x8
c0018195:	68 4a 42 02 c0       	push   0xc002424a
c001819a:	68 90 d7 02 c0       	push   0xc002d790
c001819f:	e8 dc 85 fe ff       	call   c0000780 <strcmp>
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	85 c0                	test   eax,eax
c00181a9:	0f 94 c0             	sete   al
c00181ac:	0f b6 c0             	movzx  eax,al
c00181af:	85 c0                	test   eax,eax
c00181b1:	74 0f                	je     c00181c2 <HalDetectFeatures()+0x71c>
c00181b3:	c7 05 a4 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x7
c00181bd:	e9 b1 01 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c00181c2:	83 ec 08             	sub    esp,0x8
c00181c5:	68 57 42 02 c0       	push   0xc0024257
c00181ca:	68 90 d7 02 c0       	push   0xc002d790
c00181cf:	e8 ac 85 fe ff       	call   c0000780 <strcmp>
c00181d4:	83 c4 10             	add    esp,0x10
c00181d7:	85 c0                	test   eax,eax
c00181d9:	0f 94 c0             	sete   al
c00181dc:	0f b6 c0             	movzx  eax,al
c00181df:	85 c0                	test   eax,eax
c00181e1:	74 0f                	je     c00181f2 <HalDetectFeatures()+0x74c>
c00181e3:	c7 05 a4 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x8
c00181ed:	e9 81 01 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c00181f2:	83 ec 08             	sub    esp,0x8
c00181f5:	68 64 42 02 c0       	push   0xc0024264
c00181fa:	68 90 d7 02 c0       	push   0xc002d790
c00181ff:	e8 7c 85 fe ff       	call   c0000780 <strcmp>
c0018204:	83 c4 10             	add    esp,0x10
c0018207:	85 c0                	test   eax,eax
c0018209:	0f 94 c0             	sete   al
c001820c:	0f b6 c0             	movzx  eax,al
c001820f:	85 c0                	test   eax,eax
c0018211:	74 0f                	je     c0018222 <HalDetectFeatures()+0x77c>
c0018213:	c7 05 a4 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x9
c001821d:	e9 51 01 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018222:	83 ec 08             	sub    esp,0x8
c0018225:	68 71 42 02 c0       	push   0xc0024271
c001822a:	68 90 d7 02 c0       	push   0xc002d790
c001822f:	e8 4c 85 fe ff       	call   c0000780 <strcmp>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	85 c0                	test   eax,eax
c0018239:	0f 94 c0             	sete   al
c001823c:	0f b6 c0             	movzx  eax,al
c001823f:	85 c0                	test   eax,eax
c0018241:	74 0f                	je     c0018252 <HalDetectFeatures()+0x7ac>
c0018243:	c7 05 a4 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xa
c001824d:	e9 21 01 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018252:	83 ec 08             	sub    esp,0x8
c0018255:	68 7e 42 02 c0       	push   0xc002427e
c001825a:	68 90 d7 02 c0       	push   0xc002d790
c001825f:	e8 1c 85 fe ff       	call   c0000780 <strcmp>
c0018264:	83 c4 10             	add    esp,0x10
c0018267:	85 c0                	test   eax,eax
c0018269:	0f 94 c0             	sete   al
c001826c:	0f b6 c0             	movzx  eax,al
c001826f:	85 c0                	test   eax,eax
c0018271:	74 0f                	je     c0018282 <HalDetectFeatures()+0x7dc>
c0018273:	c7 05 a4 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xb
c001827d:	e9 f1 00 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018282:	83 ec 08             	sub    esp,0x8
c0018285:	68 8b 42 02 c0       	push   0xc002428b
c001828a:	68 90 d7 02 c0       	push   0xc002d790
c001828f:	e8 ec 84 fe ff       	call   c0000780 <strcmp>
c0018294:	83 c4 10             	add    esp,0x10
c0018297:	85 c0                	test   eax,eax
c0018299:	0f 94 c0             	sete   al
c001829c:	0f b6 c0             	movzx  eax,al
c001829f:	85 c0                	test   eax,eax
c00182a1:	74 0f                	je     c00182b2 <HalDetectFeatures()+0x80c>
c00182a3:	c7 05 a4 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xc
c00182ad:	e9 c1 00 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c00182b2:	83 ec 08             	sub    esp,0x8
c00182b5:	68 98 42 02 c0       	push   0xc0024298
c00182ba:	68 90 d7 02 c0       	push   0xc002d790
c00182bf:	e8 bc 84 fe ff       	call   c0000780 <strcmp>
c00182c4:	83 c4 10             	add    esp,0x10
c00182c7:	85 c0                	test   eax,eax
c00182c9:	0f 94 c0             	sete   al
c00182cc:	0f b6 c0             	movzx  eax,al
c00182cf:	85 c0                	test   eax,eax
c00182d1:	74 0f                	je     c00182e2 <HalDetectFeatures()+0x83c>
c00182d3:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c00182dd:	e9 91 00 00 00       	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c00182e2:	83 ec 08             	sub    esp,0x8
c00182e5:	68 a5 42 02 c0       	push   0xc00242a5
c00182ea:	68 90 d7 02 c0       	push   0xc002d790
c00182ef:	e8 8c 84 fe ff       	call   c0000780 <strcmp>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	85 c0                	test   eax,eax
c00182f9:	0f 94 c0             	sete   al
c00182fc:	0f b6 c0             	movzx  eax,al
c00182ff:	85 c0                	test   eax,eax
c0018301:	74 0c                	je     c001830f <HalDetectFeatures()+0x869>
c0018303:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c001830d:	eb 64                	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c001830f:	83 ec 08             	sub    esp,0x8
c0018312:	68 b2 42 02 c0       	push   0xc00242b2
c0018317:	68 90 d7 02 c0       	push   0xc002d790
c001831c:	e8 5f 84 fe ff       	call   c0000780 <strcmp>
c0018321:	83 c4 10             	add    esp,0x10
c0018324:	85 c0                	test   eax,eax
c0018326:	0f 94 c0             	sete   al
c0018329:	0f b6 c0             	movzx  eax,al
c001832c:	85 c0                	test   eax,eax
c001832e:	74 0c                	je     c001833c <HalDetectFeatures()+0x896>
c0018330:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c001833a:	eb 37                	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c001833c:	83 ec 08             	sub    esp,0x8
c001833f:	68 bf 42 02 c0       	push   0xc00242bf
c0018344:	68 90 d7 02 c0       	push   0xc002d790
c0018349:	e8 32 84 fe ff       	call   c0000780 <strcmp>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	85 c0                	test   eax,eax
c0018353:	0f 94 c0             	sete   al
c0018356:	0f b6 c0             	movzx  eax,al
c0018359:	85 c0                	test   eax,eax
c001835b:	74 0c                	je     c0018369 <HalDetectFeatures()+0x8c3>
c001835d:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c0018367:	eb 0a                	jmp    c0018373 <HalDetectFeatures()+0x8cd>
c0018369:	c7 05 a4 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x0
c0018373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018377:	83 f8 06             	cmp    eax,0x6
c001837a:	0f 86 cc 00 00 00    	jbe    c001844c <HalDetectFeatures()+0x9a6>
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	68 80 00 00 00       	push   0x80
c0018388:	e8 bd f6 ff ff       	call   c0017a4a <cpuidCheckExtendedEBX(unsigned int)>
c001838d:	83 c4 10             	add    esp,0x10
c0018390:	89 c1                	mov    ecx,eax
c0018392:	83 e1 01             	and    ecx,0x1
c0018395:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001839a:	83 e0 fe             	and    eax,0xfffffffe
c001839d:	88 c2                	mov    dl,al
c001839f:	88 c8                	mov    al,cl
c00183a1:	09 d0                	or     eax,edx
c00183a3:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00183a8:	83 ec 0c             	sub    esp,0xc
c00183ab:	68 00 00 10 00       	push   0x100000
c00183b0:	e8 95 f6 ff ff       	call   c0017a4a <cpuidCheckExtendedEBX(unsigned int)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	83 e0 01             	and    eax,0x1
c00183bb:	89 c1                	mov    ecx,eax
c00183bd:	c1 e1 06             	shl    ecx,0x6
c00183c0:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00183c5:	83 e0 bf             	and    eax,0xffffffbf
c00183c8:	88 c2                	mov    dl,al
c00183ca:	88 c8                	mov    al,cl
c00183cc:	09 d0                	or     eax,edx
c00183ce:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00183d3:	83 ec 0c             	sub    esp,0xc
c00183d6:	68 00 00 04 00       	push   0x40000
c00183db:	e8 6a f6 ff ff       	call   c0017a4a <cpuidCheckExtendedEBX(unsigned int)>
c00183e0:	83 c4 10             	add    esp,0x10
c00183e3:	83 e0 01             	and    eax,0x1
c00183e6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00183e9:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00183ee:	83 e0 fd             	and    eax,0xfffffffd
c00183f1:	88 c2                	mov    dl,al
c00183f3:	88 c8                	mov    al,cl
c00183f5:	09 d0                	or     eax,edx
c00183f7:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00183fc:	83 ec 0c             	sub    esp,0xc
c00183ff:	6a 04                	push   0x4
c0018401:	e8 72 f6 ff ff       	call   c0017a78 <cpuidCheckExtendedECX(unsigned int)>
c0018406:	83 c4 10             	add    esp,0x10
c0018409:	83 e0 01             	and    eax,0x1
c001840c:	89 c1                	mov    ecx,eax
c001840e:	c1 e1 05             	shl    ecx,0x5
c0018411:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c0018416:	83 e0 df             	and    eax,0xffffffdf
c0018419:	88 c2                	mov    dl,al
c001841b:	88 c8                	mov    al,cl
c001841d:	09 d0                	or     eax,edx
c001841f:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018424:	83 ec 0c             	sub    esp,0xc
c0018427:	6a 20                	push   0x20
c0018429:	e8 4a f6 ff ff       	call   c0017a78 <cpuidCheckExtendedECX(unsigned int)>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	83 e0 01             	and    eax,0x1
c0018434:	89 c1                	mov    ecx,eax
c0018436:	c1 e1 04             	shl    ecx,0x4
c0018439:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c001843e:	83 e0 ef             	and    eax,0xffffffef
c0018441:	88 c2                	mov    dl,al
c0018443:	88 c8                	mov    al,cl
c0018445:	09 d0                	or     eax,edx
c0018447:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c001844c:	83 ec 0c             	sub    esp,0xc
c001844f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018453:	50                   	push   eax
c0018454:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018458:	50                   	push   eax
c0018459:	8d 44 24 24          	lea    eax,[esp+0x24]
c001845d:	50                   	push   eax
c001845e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018462:	50                   	push   eax
c0018463:	6a 01                	push   0x1
c0018465:	e8 e7 f4 ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001846a:	83 c4 20             	add    esp,0x20
c001846d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018471:	83 e0 0f             	and    eax,0xf
c0018474:	a2 a0 d7 02 c0       	mov    ds:0xc002d7a0,al
c0018479:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001847d:	c1 e8 04             	shr    eax,0x4
c0018480:	83 e0 0f             	and    eax,0xf
c0018483:	a2 9e d7 02 c0       	mov    ds:0xc002d79e,al
c0018488:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001848c:	c1 e8 08             	shr    eax,0x8
c001848f:	83 e0 0f             	and    eax,0xf
c0018492:	a2 9d d7 02 c0       	mov    ds:0xc002d79d,al
c0018497:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001849b:	c1 e8 0c             	shr    eax,0xc
c001849e:	83 e0 03             	and    eax,0x3
c00184a1:	a2 9f d7 02 c0       	mov    ds:0xc002d79f,al
c00184a6:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c00184ab:	0f b6 c0             	movzx  eax,al
c00184ae:	83 f8 06             	cmp    eax,0x6
c00184b1:	74 0d                	je     c00184c0 <HalDetectFeatures()+0xa1a>
c00184b3:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c00184b8:	0f b6 c0             	movzx  eax,al
c00184bb:	83 f8 0f             	cmp    eax,0xf
c00184be:	75 18                	jne    c00184d8 <HalDetectFeatures()+0xa32>
c00184c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184c4:	c1 e8 10             	shr    eax,0x10
c00184c7:	c1 e0 04             	shl    eax,0x4
c00184ca:	88 c2                	mov    dl,al
c00184cc:	a0 9e d7 02 c0       	mov    al,ds:0xc002d79e
c00184d1:	09 d0                	or     eax,edx
c00184d3:	a2 9e d7 02 c0       	mov    ds:0xc002d79e,al
c00184d8:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c00184dd:	0f b6 c0             	movzx  eax,al
c00184e0:	83 f8 0f             	cmp    eax,0xf
c00184e3:	75 15                	jne    c00184fa <HalDetectFeatures()+0xa54>
c00184e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184e9:	c1 e8 14             	shr    eax,0x14
c00184ec:	88 c2                	mov    dl,al
c00184ee:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c00184f3:	01 d0                	add    eax,edx
c00184f5:	a2 9d d7 02 c0       	mov    ds:0xc002d79d,al
c00184fa:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0018502:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001850a:	85 c0                	test   eax,eax
c001850c:	74 2d                	je     c001853b <HalDetectFeatures()+0xa95>
c001850e:	83 ec 0c             	sub    esp,0xc
c0018511:	68 00 00 00 40       	push   0x40000000
c0018516:	e8 01 f5 ff ff       	call   c0017a1c <cpuidCheckECX(unsigned int)>
c001851b:	83 c4 10             	add    esp,0x10
c001851e:	83 e0 01             	and    eax,0x1
c0018521:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018528:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c001852d:	83 e0 fb             	and    eax,0xfffffffb
c0018530:	88 c2                	mov    dl,al
c0018532:	88 c8                	mov    al,cl
c0018534:	09 d0                	or     eax,edx
c0018536:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c001853b:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c0018540:	83 c8 04             	or     eax,0x4
c0018543:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018548:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001854d:	83 c8 08             	or     eax,0x8
c0018550:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018555:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001855a:	83 c8 10             	or     eax,0x10
c001855d:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018562:	83 ec 0c             	sub    esp,0xc
c0018565:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018569:	50                   	push   eax
c001856a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001856e:	50                   	push   eax
c001856f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018573:	50                   	push   eax
c0018574:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018578:	50                   	push   eax
c0018579:	68 00 00 00 80       	push   0x80000000
c001857e:	e8 ce f3 ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018583:	83 c4 20             	add    esp,0x20
c0018586:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001858a:	3d 00 00 00 80       	cmp    eax,0x80000000
c001858f:	0f 86 96 01 00 00    	jbe    c001872b <HalDetectFeatures()+0xc85>
c0018595:	83 ec 0c             	sub    esp,0xc
c0018598:	8d 44 24 14          	lea    eax,[esp+0x14]
c001859c:	50                   	push   eax
c001859d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00185a1:	50                   	push   eax
c00185a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00185a6:	50                   	push   eax
c00185a7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00185ab:	50                   	push   eax
c00185ac:	68 01 00 00 80       	push   0x80000001
c00185b1:	e8 9b f3 ff ff       	call   c0017951 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00185b6:	83 c4 20             	add    esp,0x20
c00185b9:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00185be:	83 e0 7f             	and    eax,0x7f
c00185c1:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00185c6:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00185cb:	83 e0 fb             	and    eax,0xfffffffb
c00185ce:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c00185d3:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00185d8:	83 e0 fd             	and    eax,0xfffffffd
c00185db:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c00185e0:	e9 46 01 00 00       	jmp    c001872b <HalDetectFeatures()+0xc85>
c00185e5:	83 ec 08             	sub    esp,0x8
c00185e8:	68 30 42 02 c0       	push   0xc0024230
c00185ed:	68 90 d7 02 c0       	push   0xc002d790
c00185f2:	e8 59 80 fe ff       	call   c0000650 <strcpy>
c00185f7:	83 c4 10             	add    esp,0x10
c00185fa:	c7 05 a4 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x1
c0018604:	e8 ba 7b fe ff       	call   c00001c3 <is486>
c0018609:	85 c0                	test   eax,eax
c001860b:	0f 95 c0             	setne  al
c001860e:	0f b6 c0             	movzx  eax,al
c0018611:	85 c0                	test   eax,eax
c0018613:	0f 84 8d 00 00 00    	je     c00186a6 <HalDetectFeatures()+0xc00>
c0018619:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001861e:	83 c8 04             	or     eax,0x4
c0018621:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018626:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001862b:	83 c8 08             	or     eax,0x8
c001862e:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018633:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c0018638:	83 c8 10             	or     eax,0x10
c001863b:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018640:	0f 20 c0             	mov    eax,cr0
c0018643:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018647:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001864b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0018652:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018659:	83 e0 04             	and    eax,0x4
c001865c:	74 1e                	je     c001867c <HalDetectFeatures()+0xbd6>
c001865e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018665:	83 e0 10             	and    eax,0x10
c0018668:	75 12                	jne    c001867c <HalDetectFeatures()+0xbd6>
c001866a:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c001866f:	83 e0 f7             	and    eax,0xfffffff7
c0018672:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0018677:	e9 af 00 00 00       	jmp    c001872b <HalDetectFeatures()+0xc85>
c001867c:	e8 1d 7b fe ff       	call   c000019e <hasLegacyFPU>
c0018681:	83 e0 01             	and    eax,0x1
c0018684:	83 e0 01             	and    eax,0x1
c0018687:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001868e:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018693:	83 e0 f7             	and    eax,0xfffffff7
c0018696:	88 c2                	mov    dl,al
c0018698:	88 c8                	mov    al,cl
c001869a:	09 d0                	or     eax,edx
c001869c:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c00186a1:	e9 85 00 00 00       	jmp    c001872b <HalDetectFeatures()+0xc85>
c00186a6:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00186ab:	83 e0 fb             	and    eax,0xfffffffb
c00186ae:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00186b3:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00186b8:	83 e0 f7             	and    eax,0xfffffff7
c00186bb:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00186c0:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00186c5:	83 e0 ef             	and    eax,0xffffffef
c00186c8:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00186cd:	0f 20 c0             	mov    eax,cr0
c00186d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00186d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186d8:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00186df:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00186e6:	83 e0 04             	and    eax,0x4
c00186e9:	74 1b                	je     c0018706 <HalDetectFeatures()+0xc60>
c00186eb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00186f2:	83 e0 10             	and    eax,0x10
c00186f5:	75 0f                	jne    c0018706 <HalDetectFeatures()+0xc60>
c00186f7:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00186fc:	83 e0 f7             	and    eax,0xfffffff7
c00186ff:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0018704:	eb 25                	jmp    c001872b <HalDetectFeatures()+0xc85>
c0018706:	e8 93 7a fe ff       	call   c000019e <hasLegacyFPU>
c001870b:	83 e0 01             	and    eax,0x1
c001870e:	83 e0 01             	and    eax,0x1
c0018711:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018718:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c001871d:	83 e0 f7             	and    eax,0xfffffff7
c0018720:	88 c2                	mov    dl,al
c0018722:	88 c8                	mov    al,cl
c0018724:	09 d0                	or     eax,edx
c0018726:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c001872b:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018730:	83 e0 08             	and    eax,0x8
c0018733:	0f b6 c0             	movzx  eax,al
c0018736:	85 c0                	test   eax,eax
c0018738:	75 25                	jne    c001875f <HalDetectFeatures()+0xcb9>
c001873a:	e8 5f 7a fe ff       	call   c000019e <hasLegacyFPU>
c001873f:	83 e0 01             	and    eax,0x1
c0018742:	83 e0 01             	and    eax,0x1
c0018745:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001874c:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018751:	83 e0 f7             	and    eax,0xfffffff7
c0018754:	88 c2                	mov    dl,al
c0018756:	88 c8                	mov    al,cl
c0018758:	09 d0                	or     eax,edx
c001875a:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c001875f:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018764:	83 e0 08             	and    eax,0x8
c0018767:	0f b6 c0             	movzx  eax,al
c001876a:	85 c0                	test   eax,eax
c001876c:	74 0d                	je     c001877b <HalDetectFeatures()+0xcd5>
c001876e:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018773:	83 c8 10             	or     eax,0x10
c0018776:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c001877b:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018780:	83 e0 10             	and    eax,0x10
c0018783:	0f b6 c0             	movzx  eax,al
c0018786:	85 c0                	test   eax,eax
c0018788:	75 23                	jne    c00187ad <HalDetectFeatures()+0xd07>
c001878a:	e8 a7 7f 00 00       	call   c0020736 <x87Detect>
c001878f:	83 e0 01             	and    eax,0x1
c0018792:	83 e0 01             	and    eax,0x1
c0018795:	89 c1                	mov    ecx,eax
c0018797:	c1 e1 04             	shl    ecx,0x4
c001879a:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c001879f:	83 e0 ef             	and    eax,0xffffffef
c00187a2:	88 c2                	mov    dl,al
c00187a4:	88 c8                	mov    al,cl
c00187a6:	09 d0                	or     eax,edx
c00187a8:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c00187ad:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c00187b2:	83 e0 01             	and    eax,0x1
c00187b5:	0f b6 c0             	movzx  eax,al
c00187b8:	85 c0                	test   eax,eax
c00187ba:	75 2d                	jne    c00187e9 <HalDetectFeatures()+0xd43>
c00187bc:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c00187c1:	83 e0 02             	and    eax,0x2
c00187c4:	0f b6 c0             	movzx  eax,al
c00187c7:	85 c0                	test   eax,eax
c00187c9:	75 1e                	jne    c00187e9 <HalDetectFeatures()+0xd43>
c00187cb:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c00187d0:	83 e0 04             	and    eax,0x4
c00187d3:	0f b6 c0             	movzx  eax,al
c00187d6:	85 c0                	test   eax,eax
c00187d8:	75 0f                	jne    c00187e9 <HalDetectFeatures()+0xd43>
c00187da:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c00187df:	83 e0 08             	and    eax,0x8
c00187e2:	0f b6 c0             	movzx  eax,al
c00187e5:	85 c0                	test   eax,eax
c00187e7:	74 0d                	je     c00187f6 <HalDetectFeatures()+0xd50>
c00187e9:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00187ee:	83 c8 80             	or     eax,0xffffff80
c00187f1:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c00187f6:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00187fb:	83 e0 10             	and    eax,0x10
c00187fe:	0f b6 c0             	movzx  eax,al
c0018801:	85 c0                	test   eax,eax
c0018803:	74 2f                	je     c0018834 <HalDetectFeatures()+0xd8e>
c0018805:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c001880a:	83 e0 80             	and    eax,0xffffff80
c001880d:	0f b6 c0             	movzx  eax,al
c0018810:	85 c0                	test   eax,eax
c0018812:	75 20                	jne    c0018834 <HalDetectFeatures()+0xd8e>
c0018814:	e8 d7 7e 00 00       	call   c00206f0 <sseDetect>
c0018819:	83 e0 01             	and    eax,0x1
c001881c:	89 c1                	mov    ecx,eax
c001881e:	c1 e1 07             	shl    ecx,0x7
c0018821:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018826:	83 e0 7f             	and    eax,0x7f
c0018829:	88 c2                	mov    dl,al
c001882b:	88 c8                	mov    al,cl
c001882d:	09 d0                	or     eax,edx
c001882f:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0018834:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018839:	83 e0 80             	and    eax,0xffffff80
c001883c:	0f b6 c0             	movzx  eax,al
c001883f:	85 c0                	test   eax,eax
c0018841:	74 1c                	je     c001885f <HalDetectFeatures()+0xdb9>
c0018843:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0018848:	83 e0 20             	and    eax,0x20
c001884b:	0f b6 c0             	movzx  eax,al
c001884e:	85 c0                	test   eax,eax
c0018850:	75 0d                	jne    c001885f <HalDetectFeatures()+0xdb9>
c0018852:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0018857:	83 e0 df             	and    eax,0xffffffdf
c001885a:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c001885f:	c6 05 a8 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d7a8,0x0
c0018866:	90                   	nop
c0018867:	81 c4 90 00 00 00    	add    esp,0x90
c001886d:	5b                   	pop    ebx
c001886e:	5e                   	pop    esi
c001886f:	5f                   	pop    edi
c0018870:	c3                   	ret    

c0018871 <HalEnableNMI()>:
c0018871:	c6 05 8c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d78c,0x1
c0018878:	6a 10                	push   0x10
c001887a:	e8 20 ef ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c001887f:	83 c4 04             	add    esp,0x4
c0018882:	90                   	nop
c0018883:	c3                   	ret    

c0018884 <HalDisableNMI()>:
c0018884:	c6 05 8c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d78c,0x0
c001888b:	6a 10                	push   0x10
c001888d:	e8 0d ef ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0018892:	83 c4 04             	add    esp,0x4
c0018895:	90                   	nop
c0018896:	c3                   	ret    

c0018897 <HalGetNMIState()>:
c0018897:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001889c:	c3                   	ret    

c001889d <x86rdmsr(unsigned int)>:
c001889d:	83 ec 1c             	sub    esp,0x1c
c00188a0:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00188a5:	83 e0 08             	and    eax,0x8
c00188a8:	0f b6 c0             	movzx  eax,al
c00188ab:	85 c0                	test   eax,eax
c00188ad:	75 10                	jne    c00188bf <x86rdmsr(unsigned int)+0x22>
c00188af:	83 ec 0c             	sub    esp,0xc
c00188b2:	68 cb 42 02 c0       	push   0xc00242cb
c00188b7:	e8 06 6c ff ff       	call   c000f4c2 <KePanic(char const*)>
c00188bc:	83 c4 10             	add    esp,0x10
c00188bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188c3:	89 c1                	mov    ecx,eax
c00188c5:	0f 32                	rdmsr  
c00188c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00188cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188d7:	83 c4 1c             	add    esp,0x1c
c00188da:	c3                   	ret    

c00188db <x86wrmsr(unsigned int, unsigned long long)>:
c00188db:	83 ec 1c             	sub    esp,0x1c
c00188de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188ee:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00188f3:	83 e0 08             	and    eax,0x8
c00188f6:	0f b6 c0             	movzx  eax,al
c00188f9:	85 c0                	test   eax,eax
c00188fb:	75 10                	jne    c001890d <x86wrmsr(unsigned int, unsigned long long)+0x32>
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	68 d1 42 02 c0       	push   0xc00242d1
c0018905:	e8 b8 6b ff ff       	call   c000f4c2 <KePanic(char const*)>
c001890a:	83 c4 10             	add    esp,0x10
c001890d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018911:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018915:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018919:	0f 30                	wrmsr  
c001891b:	90                   	nop
c001891c:	83 c4 1c             	add    esp,0x1c
c001891f:	c3                   	ret    

c0018920 <HalHandleGeneralProtectionFault(void*, void*)>:
c0018920:	83 ec 0c             	sub    esp,0xc
c0018923:	83 ec 0c             	sub    esp,0xc
c0018926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001892a:	e8 40 e7 ff ff       	call   c001706f <Vm::faultHandler(regs*)>
c001892f:	83 c4 10             	add    esp,0x10
c0018932:	83 c4 0c             	add    esp,0xc
c0018935:	c3                   	ret    

c0018936 <HalFindRSDP()>:
c0018936:	83 ec 1c             	sub    esp,0x1c
c0018939:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001893e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0018943:	7e 0c                	jle    c0018951 <HalFindRSDP()+0x1b>
c0018945:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c001894a:	25 00 04 00 00       	and    eax,0x400
c001894f:	74 0d                	je     c001895e <HalFindRSDP()+0x28>
c0018951:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018956:	83 e0 fb             	and    eax,0xfffffffb
c0018959:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c001895e:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018963:	83 e0 04             	and    eax,0x4
c0018966:	0f b6 c0             	movzx  eax,al
c0018969:	85 c0                	test   eax,eax
c001896b:	75 07                	jne    c0018974 <HalFindRSDP()+0x3e>
c001896d:	b8 00 00 00 00       	mov    eax,0x0
c0018972:	eb 53                	jmp    c00189c7 <HalFindRSDP()+0x91>
c0018974:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001897c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0018984:	77 2f                	ja     c00189b5 <HalFindRSDP()+0x7f>
c0018986:	83 ec 04             	sub    esp,0x4
c0018989:	6a 08                	push   0x8
c001898b:	68 d7 42 02 c0       	push   0xc00242d7
c0018990:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018994:	e8 e7 79 fe ff       	call   c0000380 <memcmp>
c0018999:	83 c4 10             	add    esp,0x10
c001899c:	85 c0                	test   eax,eax
c001899e:	0f 94 c0             	sete   al
c00189a1:	0f b6 c0             	movzx  eax,al
c00189a4:	85 c0                	test   eax,eax
c00189a6:	74 06                	je     c00189ae <HalFindRSDP()+0x78>
c00189a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189ac:	eb 19                	jmp    c00189c7 <HalFindRSDP()+0x91>
c00189ae:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00189b3:	eb c7                	jmp    c001897c <HalFindRSDP()+0x46>
c00189b5:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00189ba:	83 e0 fb             	and    eax,0xfffffffb
c00189bd:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c00189c2:	b8 00 00 00 00       	mov    eax,0x0
c00189c7:	83 c4 1c             	add    esp,0x1c
c00189ca:	c3                   	ret    

c00189cb <HalHandlePageFault(void*, void*)>:
c00189cb:	83 ec 1c             	sub    esp,0x1c
c00189ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189d5:	83 ec 08             	sub    esp,0x8
c00189d8:	50                   	push   eax
c00189d9:	68 1c 45 02 c0       	push   0xc002451c
c00189de:	e8 6b e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00189e3:	83 c4 10             	add    esp,0x10
c00189e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00189ed:	83 ec 08             	sub    esp,0x8
c00189f0:	50                   	push   eax
c00189f1:	68 e0 42 02 c0       	push   0xc00242e0
c00189f6:	e8 53 e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00189fb:	83 c4 10             	add    esp,0x10
c00189fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018a08:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018a0e:	0f 20 d2             	mov    edx,cr2
c0018a11:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018a15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a19:	83 ec 08             	sub    esp,0x8
c0018a1c:	52                   	push   edx
c0018a1d:	50                   	push   eax
c0018a1e:	e8 49 ac ff ff       	call   c001366c <VAS::tryLoadBackOffDisk(unsigned long)>
c0018a23:	83 c4 10             	add    esp,0x10
c0018a26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a31:	83 ec 08             	sub    esp,0x8
c0018a34:	50                   	push   eax
c0018a35:	68 f5 42 02 c0       	push   0xc00242f5
c0018a3a:	e8 0f e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a3f:	83 c4 10             	add    esp,0x10
c0018a42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a49:	83 ec 08             	sub    esp,0x8
c0018a4c:	50                   	push   eax
c0018a4d:	68 0f 43 02 c0       	push   0xc002430f
c0018a52:	e8 f7 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018a5f:	83 ec 08             	sub    esp,0x8
c0018a62:	50                   	push   eax
c0018a63:	68 24 43 02 c0       	push   0xc0024324
c0018a68:	e8 e1 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a6d:	83 c4 10             	add    esp,0x10
c0018a70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018a74:	83 c4 1c             	add    esp,0x1c
c0018a77:	c3                   	ret    

c0018a78 <HalHandleOpcodeFault(void*, void*)>:
c0018a78:	83 ec 1c             	sub    esp,0x1c
c0018a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a83:	a0 a8 d7 02 c0       	mov    al,ds:0xc002d7a8
c0018a88:	0f b6 c0             	movzx  eax,al
c0018a8b:	85 c0                	test   eax,eax
c0018a8d:	74 25                	je     c0018ab4 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0018a8f:	83 ec 0c             	sub    esp,0xc
c0018a92:	68 50 45 02 c0       	push   0xc0024550
c0018a97:	e8 b2 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a9c:	83 c4 10             	add    esp,0x10
c0018a9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018aa3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018aa6:	8d 50 19             	lea    edx,[eax+0x19]
c0018aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018aad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ab0:	b0 01                	mov    al,0x1
c0018ab2:	eb 02                	jmp    c0018ab6 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0018ab4:	b0 00                	mov    al,0x0
c0018ab6:	83 c4 1c             	add    esp,0x1c
c0018ab9:	c3                   	ret    

c0018aba <HalDisplayDebugInfo(void*)>:
c0018aba:	83 ec 2c             	sub    esp,0x2c
c0018abd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ac1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ac5:	0f 20 c0             	mov    eax,cr0
c0018ac8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018acc:	0f 20 d0             	mov    eax,cr2
c0018acf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ad3:	0f 20 d8             	mov    eax,cr3
c0018ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018ada:	0f 20 e0             	mov    eax,cr4
c0018add:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ae5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018ae8:	83 ec 08             	sub    esp,0x8
c0018aeb:	50                   	push   eax
c0018aec:	68 3f 43 02 c0       	push   0xc002433f
c0018af1:	e8 58 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018af6:	83 c4 10             	add    esp,0x10
c0018af9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018afd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018b00:	83 ec 08             	sub    esp,0x8
c0018b03:	50                   	push   eax
c0018b04:	68 30 43 02 c0       	push   0xc0024330
c0018b09:	e8 40 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b0e:	83 c4 10             	add    esp,0x10
c0018b11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b15:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018b18:	83 ec 08             	sub    esp,0x8
c0018b1b:	50                   	push   eax
c0018b1c:	68 3b 43 02 c0       	push   0xc002433b
c0018b21:	e8 28 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b26:	83 c4 10             	add    esp,0x10
c0018b29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b2d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b30:	83 ec 08             	sub    esp,0x8
c0018b33:	50                   	push   eax
c0018b34:	68 4a 43 02 c0       	push   0xc002434a
c0018b39:	e8 10 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b3e:	83 c4 10             	add    esp,0x10
c0018b41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b45:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018b48:	83 ec 08             	sub    esp,0x8
c0018b4b:	50                   	push   eax
c0018b4c:	68 55 43 02 c0       	push   0xc0024355
c0018b51:	e8 f8 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b56:	83 c4 10             	add    esp,0x10
c0018b59:	83 ec 08             	sub    esp,0x8
c0018b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b60:	68 60 43 02 c0       	push   0xc0024360
c0018b65:	e8 e4 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b6a:	83 c4 10             	add    esp,0x10
c0018b6d:	83 ec 08             	sub    esp,0x8
c0018b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018b74:	68 6b 43 02 c0       	push   0xc002436b
c0018b79:	e8 d0 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b7e:	83 c4 10             	add    esp,0x10
c0018b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b85:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018b88:	c1 e0 05             	shl    eax,0x5
c0018b8b:	8d 90 60 58 02 c0    	lea    edx,[eax-0x3ffda7a0]
c0018b91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b95:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018b98:	83 ec 04             	sub    esp,0x4
c0018b9b:	52                   	push   edx
c0018b9c:	50                   	push   eax
c0018b9d:	68 76 43 02 c0       	push   0xc0024376
c0018ba2:	e8 a7 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018ba7:	83 c4 10             	add    esp,0x10
c0018baa:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018baf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bb5:	83 ec 0c             	sub    esp,0xc
c0018bb8:	50                   	push   eax
c0018bb9:	e8 89 8d ff ff       	call   c0011947 <setActiveTerminal(VgaText*)>
c0018bbe:	83 c4 10             	add    esp,0x10
c0018bc1:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018bc6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bcc:	83 ec 08             	sub    esp,0x8
c0018bcf:	68 85 43 02 c0       	push   0xc0024385
c0018bd4:	50                   	push   eax
c0018bd5:	e8 aa 90 ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018bda:	83 c4 10             	add    esp,0x10
c0018bdd:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018be2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018be8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018bec:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018bef:	83 ec 08             	sub    esp,0x8
c0018bf2:	52                   	push   edx
c0018bf3:	50                   	push   eax
c0018bf4:	e8 45 90 ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018bf9:	83 c4 10             	add    esp,0x10
c0018bfc:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018c01:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c07:	83 ec 08             	sub    esp,0x8
c0018c0a:	68 93 43 02 c0       	push   0xc0024393
c0018c0f:	50                   	push   eax
c0018c10:	e8 6f 90 ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018c15:	83 c4 10             	add    esp,0x10
c0018c18:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018c1d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c23:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018c28:	8b 12                	mov    edx,DWORD PTR [edx]
c0018c2a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018c2d:	83 c2 0c             	add    edx,0xc
c0018c30:	83 ec 08             	sub    esp,0x8
c0018c33:	52                   	push   edx
c0018c34:	50                   	push   eax
c0018c35:	e8 4a 90 ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018c3a:	83 c4 10             	add    esp,0x10
c0018c3d:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018c42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c48:	83 ec 08             	sub    esp,0x8
c0018c4b:	68 9c 43 02 c0       	push   0xc002439c
c0018c50:	50                   	push   eax
c0018c51:	e8 2e 90 ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018c56:	83 c4 10             	add    esp,0x10
c0018c59:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018c5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c68:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0018c6b:	83 ec 08             	sub    esp,0x8
c0018c6e:	52                   	push   edx
c0018c6f:	50                   	push   eax
c0018c70:	e8 c9 8f ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018c75:	83 c4 10             	add    esp,0x10
c0018c78:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018c7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c83:	83 ec 08             	sub    esp,0x8
c0018c86:	68 a4 43 02 c0       	push   0xc00243a4
c0018c8b:	50                   	push   eax
c0018c8c:	e8 f3 8f ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018c91:	83 c4 10             	add    esp,0x10
c0018c94:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018c99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ca3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018ca6:	83 ec 08             	sub    esp,0x8
c0018ca9:	52                   	push   edx
c0018caa:	50                   	push   eax
c0018cab:	e8 8e 8f ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018cb0:	83 c4 10             	add    esp,0x10
c0018cb3:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018cb8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018cbe:	83 ec 08             	sub    esp,0x8
c0018cc1:	68 ac 43 02 c0       	push   0xc00243ac
c0018cc6:	50                   	push   eax
c0018cc7:	e8 b8 8f ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018ccc:	83 c4 10             	add    esp,0x10
c0018ccf:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018cd4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018cda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018cde:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018ce1:	83 ec 08             	sub    esp,0x8
c0018ce4:	52                   	push   edx
c0018ce5:	50                   	push   eax
c0018ce6:	e8 53 8f ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018ceb:	83 c4 10             	add    esp,0x10
c0018cee:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018cf3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018cf9:	83 ec 08             	sub    esp,0x8
c0018cfc:	68 b4 43 02 c0       	push   0xc00243b4
c0018d01:	50                   	push   eax
c0018d02:	e8 7d 8f ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018d07:	83 c4 10             	add    esp,0x10
c0018d0a:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d19:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018d1c:	83 ec 08             	sub    esp,0x8
c0018d1f:	52                   	push   edx
c0018d20:	50                   	push   eax
c0018d21:	e8 18 8f ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018d26:	83 c4 10             	add    esp,0x10
c0018d29:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d2e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d34:	83 ec 08             	sub    esp,0x8
c0018d37:	68 bc 43 02 c0       	push   0xc00243bc
c0018d3c:	50                   	push   eax
c0018d3d:	e8 42 8f ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018d42:	83 c4 10             	add    esp,0x10
c0018d45:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d54:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018d57:	83 ec 08             	sub    esp,0x8
c0018d5a:	52                   	push   edx
c0018d5b:	50                   	push   eax
c0018d5c:	e8 dd 8e ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018d61:	83 c4 10             	add    esp,0x10
c0018d64:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d6f:	83 ec 08             	sub    esp,0x8
c0018d72:	68 c4 43 02 c0       	push   0xc00243c4
c0018d77:	50                   	push   eax
c0018d78:	e8 07 8f ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d8f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018d92:	83 ec 08             	sub    esp,0x8
c0018d95:	52                   	push   edx
c0018d96:	50                   	push   eax
c0018d97:	e8 a2 8e ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018da4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018daa:	83 ec 08             	sub    esp,0x8
c0018dad:	68 cc 43 02 c0       	push   0xc00243cc
c0018db2:	50                   	push   eax
c0018db3:	e8 cc 8e ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018db8:	83 c4 10             	add    esp,0x10
c0018dbb:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018dc0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018dc6:	83 ec 08             	sub    esp,0x8
c0018dc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018dcd:	50                   	push   eax
c0018dce:	e8 6b 8e ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018ddb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018de1:	83 ec 08             	sub    esp,0x8
c0018de4:	68 d5 43 02 c0       	push   0xc00243d5
c0018de9:	50                   	push   eax
c0018dea:	e8 95 8e ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018def:	83 c4 10             	add    esp,0x10
c0018df2:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018df7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018dfd:	83 ec 08             	sub    esp,0x8
c0018e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e04:	50                   	push   eax
c0018e05:	e8 34 8e ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018e0a:	83 c4 10             	add    esp,0x10
c0018e0d:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e18:	83 ec 08             	sub    esp,0x8
c0018e1b:	68 dd 43 02 c0       	push   0xc00243dd
c0018e20:	50                   	push   eax
c0018e21:	e8 5e 8e ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0018e26:	83 c4 10             	add    esp,0x10
c0018e29:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e2e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e34:	83 ec 08             	sub    esp,0x8
c0018e37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018e3b:	50                   	push   eax
c0018e3c:	e8 fd 8d ff ff       	call   c0011c3e <VgaText::putx(unsigned int)>
c0018e41:	83 c4 10             	add    esp,0x10
c0018e44:	fa                   	cli    
c0018e45:	f4                   	hlt    
c0018e46:	eb fe                	jmp    c0018e46 <HalDisplayDebugInfo(void*)+0x38c>

c0018e48 <HalReceivedNMI()>:
c0018e48:	83 ec 1c             	sub    esp,0x1c
c0018e4b:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018e52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e56:	89 c2                	mov    edx,eax
c0018e58:	ec                   	in     al,dx
c0018e59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0018e5d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018e61:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018e65:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0018e6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e70:	89 c2                	mov    edx,eax
c0018e72:	ec                   	in     al,dx
c0018e73:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018e77:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018e7b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018e7f:	83 ec 0c             	sub    esp,0xc
c0018e82:	68 e5 43 02 c0       	push   0xc00243e5
c0018e87:	e8 c2 e0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018e8c:	83 c4 10             	add    esp,0x10
c0018e8f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018e94:	83 e0 10             	and    eax,0x10
c0018e97:	74 10                	je     c0018ea9 <HalReceivedNMI()+0x61>
c0018e99:	83 ec 0c             	sub    esp,0xc
c0018e9c:	68 f6 43 02 c0       	push   0xc00243f6
c0018ea1:	e8 1c 66 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0018ea6:	83 c4 10             	add    esp,0x10
c0018ea9:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0018eae:	83 e0 40             	and    eax,0x40
c0018eb1:	74 10                	je     c0018ec3 <HalReceivedNMI()+0x7b>
c0018eb3:	83 ec 0c             	sub    esp,0xc
c0018eb6:	68 03 44 02 c0       	push   0xc0024403
c0018ebb:	e8 02 66 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018ec7:	0f be c0             	movsx  eax,al
c0018eca:	85 c0                	test   eax,eax
c0018ecc:	79 10                	jns    c0018ede <HalReceivedNMI()+0x96>
c0018ece:	83 ec 0c             	sub    esp,0xc
c0018ed1:	68 0d 44 02 c0       	push   0xc002440d
c0018ed6:	e8 e7 65 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0018edb:	83 c4 10             	add    esp,0x10
c0018ede:	90                   	nop
c0018edf:	83 c4 1c             	add    esp,0x1c
c0018ee2:	c3                   	ret    

c0018ee3 <HalSystemIdle()>:
c0018ee3:	56                   	push   esi
c0018ee4:	53                   	push   ebx
c0018ee5:	83 ec 14             	sub    esp,0x14
c0018ee8:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018eed:	83 e0 10             	and    eax,0x10
c0018ef0:	0f b6 c0             	movzx  eax,al
c0018ef3:	85 c0                	test   eax,eax
c0018ef5:	74 43                	je     c0018f3a <HalSystemIdle()+0x57>
c0018ef7:	83 ec 0c             	sub    esp,0xc
c0018efa:	68 e1 00 00 00       	push   0xe1
c0018eff:	e8 99 f9 ff ff       	call   c001889d <x86rdmsr(unsigned int)>
c0018f04:	83 c4 10             	add    esp,0x10
c0018f07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018f0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f13:	83 e0 02             	and    eax,0x2
c0018f16:	89 c3                	mov    ebx,eax
c0018f18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f1c:	83 e0 00             	and    eax,0x0
c0018f1f:	89 c6                	mov    esi,eax
c0018f21:	83 ec 04             	sub    esp,0x4
c0018f24:	56                   	push   esi
c0018f25:	53                   	push   ebx
c0018f26:	68 e1 00 00 00       	push   0xe1
c0018f2b:	e8 ab f9 ff ff       	call   c00188db <x86wrmsr(unsigned int, unsigned long long)>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	e8 5c 72 fe ff       	call   c0000194 <doTPAUSE>
c0018f38:	eb 01                	jmp    c0018f3b <HalSystemIdle()+0x58>
c0018f3a:	f4                   	hlt    
c0018f3b:	90                   	nop
c0018f3c:	83 c4 14             	add    esp,0x14
c0018f3f:	5b                   	pop    ebx
c0018f40:	5e                   	pop    esi
c0018f41:	c3                   	ret    

c0018f42 <i386SaveCoprocessor(void*)>:
c0018f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f46:	83 c0 3f             	add    eax,0x3f
c0018f49:	83 e0 c0             	and    eax,0xffffffc0
c0018f4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f50:	ff 25 70 d7 02 c0    	jmp    DWORD PTR ds:0xc002d770

c0018f56 <i386LoadCoprocessor(void*)>:
c0018f56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f5a:	83 c0 3f             	add    eax,0x3f
c0018f5d:	83 e0 c0             	and    eax,0xffffffc0
c0018f60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f64:	ff 25 6c d7 02 c0    	jmp    DWORD PTR ds:0xc002d76c

c0018f6a <x87EmulHandler(regs*, void*)>:
c0018f6a:	53                   	push   ebx
c0018f6b:	83 ec 08             	sub    esp,0x8
c0018f6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f73:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018f77:	74 10                	je     c0018f89 <x87EmulHandler(regs*, void*)+0x1f>
c0018f79:	83 ec 0c             	sub    esp,0xc
c0018f7c:	68 1a 44 02 c0       	push   0xc002441a
c0018f81:	e8 3c 65 ff ff       	call   c000f4c2 <KePanic(char const*)>
c0018f86:	83 c4 10             	add    esp,0x10
c0018f89:	0f 20 c0             	mov    eax,cr0
c0018f8c:	a8 08                	test   al,0x8
c0018f8e:	74 59                	je     c0018fe9 <x87EmulHandler(regs*, void*)+0x7f>
c0018f90:	0f 06                	clts   
c0018f92:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0018f97:	85 c0                	test   eax,eax
c0018f99:	74 0e                	je     c0018fa9 <x87EmulHandler(regs*, void*)+0x3f>
c0018f9b:	83 ec 0c             	sub    esp,0xc
c0018f9e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018fa1:	e8 9c ff ff ff       	call   c0018f42 <i386SaveCoprocessor(void*)>
c0018fa6:	83 c4 10             	add    esp,0x10
c0018fa9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018faf:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018fb3:	75 12                	jne    c0018fc7 <x87EmulHandler(regs*, void*)+0x5d>
c0018fb5:	83 ec 0c             	sub    esp,0xc
c0018fb8:	68 40 02 00 00       	push   0x240
c0018fbd:	e8 ba 61 ff ff       	call   c000f17c <malloc>
c0018fc2:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018fc5:	eb 10                	jmp    c0018fd7 <x87EmulHandler(regs*, void*)+0x6d>
c0018fc7:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0018fcc:	83 ec 0c             	sub    esp,0xc
c0018fcf:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018fd2:	e8 7f ff ff ff       	call   c0018f56 <i386LoadCoprocessor(void*)>
c0018fd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	a3 68 d7 02 c0       	mov    ds:0xc002d768,eax
c0018fe4:	83 c4 08             	add    esp,0x8
c0018fe7:	5b                   	pop    ebx
c0018fe8:	c3                   	ret    
c0018fe9:	83 ec 0c             	sub    esp,0xc
c0018fec:	68 2e 44 02 c0       	push   0xc002442e
c0018ff1:	e8 58 df fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018ff6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018ffe:	83 c4 18             	add    esp,0x18
c0019001:	5b                   	pop    ebx
c0019002:	e9 ad d9 ff ff       	jmp    c00169b4 <Thr::terminateFromIRQ(int)>

c0019007 <HalInitialiseCoprocessor()>:
c0019007:	83 ec 10             	sub    esp,0x10
c001900a:	6a 00                	push   0x0
c001900c:	68 6a 8f 01 c0       	push   0xc0018f6a
c0019011:	6a 07                	push   0x7
c0019013:	c7 05 68 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d768,0x0
c001901d:	e8 9d 06 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019022:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	a8 80                	test   al,0x80
c001902c:	74 1c                	je     c001904a <HalInitialiseCoprocessor()+0x43>
c001902e:	c7 05 70 d7 02 c0 08 07 02 c0 	mov    DWORD PTR ds:0xc002d770,0xc0020708
c0019038:	c7 05 6c d7 02 c0 10 07 02 c0 	mov    DWORD PTR ds:0xc002d76c,0xc0020710
c0019042:	83 c4 0c             	add    esp,0xc
c0019045:	e9 ce 76 00 00       	jmp    c0020718 <sseInit>
c001904a:	a8 10                	test   al,0x10
c001904c:	74 1c                	je     c001906a <HalInitialiseCoprocessor()+0x63>
c001904e:	c7 05 70 d7 02 c0 57 07 02 c0 	mov    DWORD PTR ds:0xc002d770,0xc0020757
c0019058:	c7 05 6c d7 02 c0 5e 07 02 c0 	mov    DWORD PTR ds:0xc002d76c,0xc002075e
c0019062:	83 c4 0c             	add    esp,0xc
c0019065:	e9 fb 76 00 00       	jmp    c0020765 <x87Init>
c001906a:	c7 05 70 d7 02 c0 9a 77 01 c0 	mov    DWORD PTR ds:0xc002d770,0xc001779a
c0019074:	c7 05 6c d7 02 c0 9a 77 01 c0 	mov    DWORD PTR ds:0xc002d76c,0xc001779a
c001907e:	0f 20 c0             	mov    eax,cr0
c0019081:	83 c8 04             	or     eax,0x4
c0019084:	0f 22 c0             	mov    cr0,eax
c0019087:	83 c4 0c             	add    esp,0xc
c001908a:	c3                   	ret    

c001908b <HalPanic(char const*)>:
c001908b:	53                   	push   ebx
c001908c:	83 ec 10             	sub    esp,0x10
c001908f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019093:	fa                   	cli    
c0019094:	53                   	push   ebx
c0019095:	68 44 44 02 c0       	push   0xc0024444
c001909a:	e8 af de fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001909f:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c00190a4:	83 c4 10             	add    esp,0x10
c00190a7:	85 c0                	test   eax,eax
c00190a9:	74 09                	je     c00190b4 <HalPanic(char const*)+0x29>
c00190ab:	83 ec 0c             	sub    esp,0xc
c00190ae:	53                   	push   ebx
c00190af:	ff d0                	call   eax
c00190b1:	83 c4 10             	add    esp,0x10
c00190b4:	a1 54 ce 02 c0       	mov    eax,ds:0xc002ce54
c00190b9:	85 c0                	test   eax,eax
c00190bb:	0f 84 dc 00 00 00    	je     c001919d <HalPanic(char const*)+0x112>
c00190c1:	52                   	push   edx
c00190c2:	6a 01                	push   0x1
c00190c4:	6a 0f                	push   0xf
c00190c6:	50                   	push   eax
c00190c7:	e8 ba 86 ff ff       	call   c0011786 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00190cc:	59                   	pop    ecx
c00190cd:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00190d3:	e8 ba 88 ff ff       	call   c0011992 <VgaText::clearScreen()>
c00190d8:	58                   	pop    eax
c00190d9:	5a                   	pop    edx
c00190da:	68 a8 34 02 c0       	push   0xc00234a8
c00190df:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00190e5:	e8 d4 86 ff ff       	call   c00117be <VgaText::setTitle(char*)>
c00190ea:	83 c4 0c             	add    esp,0xc
c00190ed:	6a 01                	push   0x1
c00190ef:	6a 0f                	push   0xf
c00190f1:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00190f7:	e8 8a 86 ff ff       	call   c0011786 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00190fc:	59                   	pop    ecx
c00190fd:	58                   	pop    eax
c00190fe:	68 5d 44 02 c0       	push   0xc002445d
c0019103:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019109:	e8 76 8b ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001910e:	83 c4 0c             	add    esp,0xc
c0019111:	6a 0f                	push   0xf
c0019113:	6a 01                	push   0x1
c0019115:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001911b:	e8 66 86 ff ff       	call   c0011786 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019120:	58                   	pop    eax
c0019121:	5a                   	pop    edx
c0019122:	68 66 44 02 c0       	push   0xc0024466
c0019127:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001912d:	e8 52 8b ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0019132:	83 c4 0c             	add    esp,0xc
c0019135:	6a 01                	push   0x1
c0019137:	6a 0f                	push   0xf
c0019139:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001913f:	e8 42 86 ff ff       	call   c0011786 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019144:	59                   	pop    ecx
c0019145:	58                   	pop    eax
c0019146:	68 aa 44 02 c0       	push   0xc00244aa
c001914b:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019151:	e8 2e 8b ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0019156:	58                   	pop    eax
c0019157:	5a                   	pop    edx
c0019158:	68 73 44 02 c0       	push   0xc0024473
c001915d:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019163:	e8 1c 8b ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0019168:	59                   	pop    ecx
c0019169:	58                   	pop    eax
c001916a:	68 ad 44 02 c0       	push   0xc00244ad
c001916f:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019175:	e8 0a 8b ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001917a:	58                   	pop    eax
c001917b:	5a                   	pop    edx
c001917c:	53                   	push   ebx
c001917d:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019183:	e8 fc 8a ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c0019188:	59                   	pop    ecx
c0019189:	5b                   	pop    ebx
c001918a:	68 aa 44 02 c0       	push   0xc00244aa
c001918f:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019195:	e8 ea 8a ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001919a:	83 c4 10             	add    esp,0x10
c001919d:	eb fe                	jmp    c001919d <HalPanic(char const*)+0x112>

c001919f <HalQueryPerformanceCounter()>:
c001919f:	31 c0                	xor    eax,eax
c00191a1:	31 d2                	xor    edx,edx
c00191a3:	f6 05 ae d7 02 c0 08 	test   BYTE PTR ds:0xc002d7ae,0x8
c00191aa:	75 02                	jne    c00191ae <HalQueryPerformanceCounter()+0xf>
c00191ac:	0f 31                	rdtsc  
c00191ae:	c3                   	ret    

c00191af <HalInitialise()>:
c00191af:	53                   	push   ebx
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	c6 05 60 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d760,0x0
c00191ba:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00191bf:	83 e0 fe             	and    eax,0xfffffffe
c00191c2:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c00191c7:	e8 d8 07 00 00       	call   c00199a4 <picOpen()>
c00191cc:	80 3d 60 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d760,0x0
c00191d3:	74 0a                	je     c00191df <HalInitialise()+0x30>
c00191d5:	e8 1a 07 00 00       	call   c00198f4 <picDisable()>
c00191da:	e8 05 6b 00 00       	call   c001fce4 <apicOpen()>
c00191df:	50                   	push   eax
c00191e0:	bb 0f 00 00 00       	mov    ebx,0xf
c00191e5:	6a 00                	push   0x0
c00191e7:	68 28 e2 00 c0       	push   0xc000e228
c00191ec:	6a 00                	push   0x0
c00191ee:	e8 cc 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00191f3:	83 c4 0c             	add    esp,0xc
c00191f6:	6a 00                	push   0x0
c00191f8:	68 28 e2 00 c0       	push   0xc000e228
c00191fd:	6a 01                	push   0x1
c00191ff:	e8 bb 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019204:	83 c4 0c             	add    esp,0xc
c0019207:	6a 00                	push   0x0
c0019209:	68 18 e2 00 c0       	push   0xc000e218
c001920e:	6a 02                	push   0x2
c0019210:	e8 aa 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019215:	83 c4 0c             	add    esp,0xc
c0019218:	6a 00                	push   0x0
c001921a:	68 28 e2 00 c0       	push   0xc000e228
c001921f:	6a 03                	push   0x3
c0019221:	e8 99 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019226:	83 c4 0c             	add    esp,0xc
c0019229:	6a 00                	push   0x0
c001922b:	68 28 e2 00 c0       	push   0xc000e228
c0019230:	6a 04                	push   0x4
c0019232:	e8 88 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019237:	83 c4 0c             	add    esp,0xc
c001923a:	6a 00                	push   0x0
c001923c:	68 28 e2 00 c0       	push   0xc000e228
c0019241:	6a 05                	push   0x5
c0019243:	e8 77 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019248:	83 c4 0c             	add    esp,0xc
c001924b:	6a 00                	push   0x0
c001924d:	68 5c e2 00 c0       	push   0xc000e25c
c0019252:	6a 06                	push   0x6
c0019254:	e8 66 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019259:	83 c4 0c             	add    esp,0xc
c001925c:	6a 00                	push   0x0
c001925e:	68 b0 e2 00 c0       	push   0xc000e2b0
c0019263:	6a 08                	push   0x8
c0019265:	e8 55 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001926a:	83 c4 0c             	add    esp,0xc
c001926d:	6a 00                	push   0x0
c001926f:	68 28 e2 00 c0       	push   0xc000e228
c0019274:	6a 09                	push   0x9
c0019276:	e8 44 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001927b:	83 c4 0c             	add    esp,0xc
c001927e:	6a 00                	push   0x0
c0019280:	68 28 e2 00 c0       	push   0xc000e228
c0019285:	6a 0a                	push   0xa
c0019287:	e8 33 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001928c:	83 c4 0c             	add    esp,0xc
c001928f:	6a 00                	push   0x0
c0019291:	68 28 e2 00 c0       	push   0xc000e228
c0019296:	6a 0b                	push   0xb
c0019298:	e8 22 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001929d:	83 c4 0c             	add    esp,0xc
c00192a0:	6a 00                	push   0x0
c00192a2:	68 60 e1 00 c0       	push   0xc000e160
c00192a7:	6a 0d                	push   0xd
c00192a9:	e8 11 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00192ae:	83 c4 0c             	add    esp,0xc
c00192b1:	6a 00                	push   0x0
c00192b3:	68 b4 e1 00 c0       	push   0xc000e1b4
c00192b8:	6a 0e                	push   0xe
c00192ba:	e8 00 04 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00192bf:	83 c4 10             	add    esp,0x10
c00192c2:	50                   	push   eax
c00192c3:	6a 00                	push   0x0
c00192c5:	68 28 e2 00 c0       	push   0xc000e228
c00192ca:	53                   	push   ebx
c00192cb:	43                   	inc    ebx
c00192cc:	e8 ee 03 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00192d1:	83 c4 10             	add    esp,0x10
c00192d4:	83 fb 1e             	cmp    ebx,0x1e
c00192d7:	75 e9                	jne    c00192c2 <HalInitialise()+0x113>
c00192d9:	50                   	push   eax
c00192da:	6a 00                	push   0x0
c00192dc:	68 03 16 01 c0       	push   0xc0011603
c00192e1:	6a 60                	push   0x60
c00192e3:	e8 d7 03 00 00       	call   c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00192e8:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00192ed:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00192f7:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00192fe:	e8 79 5e ff ff       	call   c000f17c <malloc>
c0019303:	89 04 24             	mov    DWORD PTR [esp],eax
c0019306:	89 c3                	mov    ebx,eax
c0019308:	e8 ff 0d 00 00       	call   c001a10c <RTC::RTC()>
c001930d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0019317:	5a                   	pop    edx
c0019318:	59                   	pop    ecx
c0019319:	53                   	push   ebx
c001931a:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0019320:	e8 6d fd fe ff       	call   c0009092 <Device::addChild(Device*)>
c0019325:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019327:	6a 00                	push   0x0
c0019329:	6a 00                	push   0x0
c001932b:	6a 00                	push   0x0
c001932d:	53                   	push   ebx
c001932e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019331:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0019336:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001933c:	83 c4 28             	add    esp,0x28
c001933f:	5b                   	pop    ebx
c0019340:	c3                   	ret    

c0019341 <HalMakeBeep(int)>:
c0019341:	53                   	push   ebx
c0019342:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019346:	85 db                	test   ebx,ebx
c0019348:	75 07                	jne    c0019351 <HalMakeBeep(int)+0x10>
c001934a:	e4 61                	in     al,0x61
c001934c:	83 e0 fc             	and    eax,0xfffffffc
c001934f:	eb 26                	jmp    c0019377 <HalMakeBeep(int)+0x36>
c0019351:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0019356:	99                   	cdq    
c0019357:	f7 fb                	idiv   ebx
c0019359:	89 c1                	mov    ecx,eax
c001935b:	b0 b6                	mov    al,0xb6
c001935d:	e6 43                	out    0x43,al
c001935f:	88 c8                	mov    al,cl
c0019361:	e6 42                	out    0x42,al
c0019363:	89 c8                	mov    eax,ecx
c0019365:	c1 e8 08             	shr    eax,0x8
c0019368:	e6 42                	out    0x42,al
c001936a:	e4 61                	in     al,0x61
c001936c:	89 c2                	mov    edx,eax
c001936e:	83 ca 03             	or     edx,0x3
c0019371:	38 d0                	cmp    al,dl
c0019373:	74 04                	je     c0019379 <HalMakeBeep(int)+0x38>
c0019375:	88 d0                	mov    al,dl
c0019377:	e6 61                	out    0x61,al
c0019379:	5b                   	pop    ebx
c001937a:	c3                   	ret    

c001937b <HalGetRand()>:
c001937b:	31 c0                	xor    eax,eax
c001937d:	c3                   	ret    

c001937e <HalEndOfInterrupt(int)>:
c001937e:	80 3d 60 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d760,0x0
c0019385:	74 1d                	je     c00193a4 <HalEndOfInterrupt(int)+0x26>
c0019387:	83 ec 18             	sub    esp,0x18
c001938a:	6a 1b                	push   0x1b
c001938c:	e8 0c f5 ff ff       	call   c001889d <x86rdmsr(unsigned int)>
c0019391:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019396:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00193a0:	83 c4 1c             	add    esp,0x1c
c00193a3:	c3                   	ret    
c00193a4:	e9 7f 07 00 00       	jmp    c0019b28 <picEOI(int)>

c00193a9 <HalRestart()>:
c00193a9:	c3                   	ret    

c00193aa <HalShutdown()>:
c00193aa:	c3                   	ret    

c00193ab <HalSleep()>:
c00193ab:	c3                   	ret    

c00193ac <CPU::CPU()>:
c00193ac:	83 ec 0c             	sub    esp,0xc
c00193af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193b3:	83 ec 08             	sub    esp,0x8
c00193b6:	68 1f 42 02 c0       	push   0xc002421f
c00193bb:	50                   	push   eax
c00193bc:	e8 33 fe fe ff       	call   c00091f4 <Device::Device(char const*)>
c00193c1:	83 c4 10             	add    esp,0x10
c00193c4:	ba 7c 45 02 c0       	mov    edx,0xc002457c
c00193c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193cd:	89 10                	mov    DWORD PTR [eax],edx
c00193cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193d3:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00193dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e1:	05 64 01 00 00       	add    eax,0x164
c00193e6:	83 ec 0c             	sub    esp,0xc
c00193e9:	50                   	push   eax
c00193ea:	e8 15 4f ff ff       	call   c000e304 <GDT::GDT()>
c00193ef:	83 c4 10             	add    esp,0x10
c00193f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193f6:	05 68 09 00 00       	add    eax,0x968
c00193fb:	83 ec 0c             	sub    esp,0xc
c00193fe:	50                   	push   eax
c00193ff:	e8 54 51 ff ff       	call   c000e558 <IDT::IDT()>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001940b:	05 68 11 00 00       	add    eax,0x1168
c0019410:	83 ec 0c             	sub    esp,0xc
c0019413:	50                   	push   eax
c0019414:	e8 27 8d ff ff       	call   c0012140 <TSS::TSS()>
c0019419:	83 c4 10             	add    esp,0x10
c001941c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019420:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001942a:	90                   	nop
c001942b:	83 c4 0c             	add    esp,0xc
c001942e:	c3                   	ret    
c001942f:	90                   	nop

c0019430 <CPU::setupSMEP()>:
c0019430:	0f 20 e0             	mov    eax,cr4
c0019433:	0d 00 00 10 00       	or     eax,0x100000
c0019438:	0f 22 e0             	mov    cr4,eax
c001943b:	c3                   	ret    

c001943c <CPU::setupUMIP()>:
c001943c:	0f 20 e0             	mov    eax,cr4
c001943f:	80 cc 08             	or     ah,0x8
c0019442:	0f 22 e0             	mov    cr4,eax
c0019445:	c3                   	ret    

c0019446 <CPU::setupTSC()>:
c0019446:	0f 20 e0             	mov    eax,cr4
c0019449:	83 c8 04             	or     eax,0x4
c001944c:	0f 22 e0             	mov    cr4,eax
c001944f:	c3                   	ret    

c0019450 <CPU::setupLargePages()>:
c0019450:	0f 20 e0             	mov    eax,cr4
c0019453:	83 c8 10             	or     eax,0x10
c0019456:	0f 22 e0             	mov    cr4,eax
c0019459:	c3                   	ret    

c001945a <CPU::setupPAT()>:
c001945a:	f6 05 ac d7 02 c0 08 	test   BYTE PTR ds:0xc002d7ac,0x8
c0019461:	74 28                	je     c001948b <CPU::setupPAT()+0x31>
c0019463:	53                   	push   ebx
c0019464:	83 ec 14             	sub    esp,0x14
c0019467:	68 77 02 00 00       	push   0x277
c001946c:	e8 2c f4 ff ff       	call   c001889d <x86rdmsr(unsigned int)>
c0019471:	83 c4 0c             	add    esp,0xc
c0019474:	83 e2 f8             	and    edx,0xfffffff8
c0019477:	83 ca 01             	or     edx,0x1
c001947a:	52                   	push   edx
c001947b:	50                   	push   eax
c001947c:	68 77 02 00 00       	push   0x277
c0019481:	e8 55 f4 ff ff       	call   c00188db <x86wrmsr(unsigned int, unsigned long long)>
c0019486:	83 c4 18             	add    esp,0x18
c0019489:	5b                   	pop    ebx
c001948a:	c3                   	ret    
c001948b:	c3                   	ret    

c001948c <CPU::setupMTRR()>:
c001948c:	c3                   	ret    
c001948d:	90                   	nop

c001948e <CPU::setupGlobalPages()>:
c001948e:	0f 20 e0             	mov    eax,cr4
c0019491:	0c 80                	or     al,0x80
c0019493:	0f 22 e0             	mov    cr4,eax
c0019496:	c3                   	ret    
c0019497:	90                   	nop

c0019498 <CPU::allowUsermodeDataAccess()>:
c0019498:	f6 05 af d7 02 c0 40 	test   BYTE PTR ds:0xc002d7af,0x40
c001949f:	74 03                	je     c00194a4 <CPU::allowUsermodeDataAccess()+0xc>
c00194a1:	0f 01 cb             	stac   
c00194a4:	c3                   	ret    
c00194a5:	90                   	nop

c00194a6 <CPU::prohibitUsermodeDataAccess()>:
c00194a6:	f6 05 af d7 02 c0 40 	test   BYTE PTR ds:0xc002d7af,0x40
c00194ad:	74 03                	je     c00194b2 <CPU::prohibitUsermodeDataAccess()+0xc>
c00194af:	0f 01 ca             	clac   
c00194b2:	c3                   	ret    
c00194b3:	90                   	nop

c00194b4 <CPU::setupSMAP()>:
c00194b4:	0f 20 e0             	mov    eax,cr4
c00194b7:	0d 00 00 20 00       	or     eax,0x200000
c00194bc:	0f 22 e0             	mov    cr4,eax
c00194bf:	eb e5                	jmp    c00194a6 <CPU::prohibitUsermodeDataAccess()>
c00194c1:	90                   	nop

c00194c2 <CPU::setupFeatures()>:
c00194c2:	53                   	push   ebx
c00194c3:	83 ec 08             	sub    esp,0x8
c00194c6:	f6 05 af d7 02 c0 20 	test   BYTE PTR ds:0xc002d7af,0x20
c00194cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00194d1:	74 18                	je     c00194eb <CPU::setupFeatures()+0x29>
c00194d3:	83 ec 0c             	sub    esp,0xc
c00194d6:	68 b8 44 02 c0       	push   0xc00244b8
c00194db:	e8 6e da fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00194e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194e3:	e8 54 ff ff ff       	call   c001943c <CPU::setupUMIP()>
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	f6 05 ae d7 02 c0 08 	test   BYTE PTR ds:0xc002d7ae,0x8
c00194f2:	74 18                	je     c001950c <CPU::setupFeatures()+0x4a>
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	68 c2 44 02 c0       	push   0xc00244c2
c00194fc:	e8 4d da fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019501:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019504:	e8 3d ff ff ff       	call   c0019446 <CPU::setupTSC()>
c0019509:	83 c4 10             	add    esp,0x10
c001950c:	f6 05 ae d7 02 c0 20 	test   BYTE PTR ds:0xc002d7ae,0x20
c0019513:	74 18                	je     c001952d <CPU::setupFeatures()+0x6b>
c0019515:	83 ec 0c             	sub    esp,0xc
c0019518:	68 cb 44 02 c0       	push   0xc00244cb
c001951d:	e8 2c da fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019522:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019525:	e8 26 ff ff ff       	call   c0019450 <CPU::setupLargePages()>
c001952a:	83 c4 10             	add    esp,0x10
c001952d:	f6 05 ae d7 02 c0 40 	test   BYTE PTR ds:0xc002d7ae,0x40
c0019534:	74 18                	je     c001954e <CPU::setupFeatures()+0x8c>
c0019536:	83 ec 0c             	sub    esp,0xc
c0019539:	68 d4 44 02 c0       	push   0xc00244d4
c001953e:	e8 0b da fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019546:	e8 43 ff ff ff       	call   c001948e <CPU::setupGlobalPages()>
c001954b:	83 c4 10             	add    esp,0x10
c001954e:	f6 05 ae d7 02 c0 80 	test   BYTE PTR ds:0xc002d7ae,0x80
c0019555:	74 18                	je     c001956f <CPU::setupFeatures()+0xad>
c0019557:	83 ec 0c             	sub    esp,0xc
c001955a:	68 e6 44 02 c0       	push   0xc00244e6
c001955f:	e8 ea d9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019564:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019567:	e8 ee fe ff ff       	call   c001945a <CPU::setupPAT()>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	f6 05 b0 d7 02 c0 04 	test   BYTE PTR ds:0xc002d7b0,0x4
c0019576:	74 11                	je     c0019589 <CPU::setupFeatures()+0xc7>
c0019578:	c7 44 24 10 ef 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc00244ef
c0019580:	83 c4 08             	add    esp,0x8
c0019583:	5b                   	pop    ebx
c0019584:	e9 c5 d9 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0019589:	83 c4 08             	add    esp,0x8
c001958c:	5b                   	pop    ebx
c001958d:	c3                   	ret    

c001958e <CPU::open(int, int, void*)>:
c001958e:	55                   	push   ebp
c001958f:	57                   	push   edi
c0019590:	56                   	push   esi
c0019591:	53                   	push   ebx
c0019592:	83 ec 18             	sub    esp,0x18
c0019595:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019599:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001959d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00195a1:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c00195a7:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c00195ad:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c00195b3:	50                   	push   eax
c00195b4:	e8 ad 4d ff ff       	call   c000e366 <GDT::setup()>
c00195b9:	83 c4 0c             	add    esp,0xc
c00195bc:	6a 00                	push   0x0
c00195be:	68 ef be ad de       	push   0xdeadbeef
c00195c3:	55                   	push   ebp
c00195c4:	e8 bb 8b ff ff       	call   c0012184 <TSS::setup(unsigned long, unsigned long)>
c00195c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00195cc:	e8 93 8b ff ff       	call   c0012164 <TSS::flush()>
c00195d1:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c00195d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00195da:	e8 ef 4f ff ff       	call   c000e5ce <IDT::setup()>
c00195df:	b8 00 04 00 00       	mov    eax,0x400
c00195e4:	0f 23 f8             	mov    dr7,eax
c00195e7:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c00195f1:	e8 c6 60 ff ff       	call   c000f6bc <Phys::allocatePage()>
c00195f6:	83 c4 10             	add    esp,0x10
c00195f9:	85 f6                	test   esi,esi
c00195fb:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0019601:	89 38                	mov    DWORD PTR [eax],edi
c0019603:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019609:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001960c:	74 10                	je     c001961e <CPU::open(int, int, void*)+0x90>
c001960e:	50                   	push   eax
c001960f:	50                   	push   eax
c0019610:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019616:	56                   	push   esi
c0019617:	e8 18 95 ff ff       	call   c0012b34 <VAS::setCPUSpecific(unsigned long)>
c001961c:	eb 0d                	jmp    c001962b <CPU::open(int, int, void*)+0x9d>
c001961e:	83 ec 0c             	sub    esp,0xc
c0019621:	68 f9 44 02 c0       	push   0xc00244f9
c0019626:	e8 97 5e ff ff       	call   c000f4c2 <KePanic(char const*)>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	83 ec 0c             	sub    esp,0xc
c0019631:	68 07 45 02 c0       	push   0xc0024507
c0019636:	e8 f8 31 ff ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001963b:	e8 6f fb ff ff       	call   c00191af <HalInitialise()>
c0019640:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0019645:	83 e0 10             	and    eax,0x10
c0019648:	83 f8 01             	cmp    eax,0x1
c001964b:	19 c0                	sbb    eax,eax
c001964d:	83 e0 46             	and    eax,0x46
c0019650:	83 c0 1e             	add    eax,0x1e
c0019653:	89 04 24             	mov    DWORD PTR [esp],eax
c0019656:	e8 d2 10 ff ff       	call   c000a72d <setupTimer(int)>
c001965b:	83 c4 10             	add    esp,0x10
c001965e:	f6 05 c4 cd 02 c0 20 	test   BYTE PTR ds:0xc002cdc4,0x20
c0019665:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001966b:	74 0c                	je     c0019679 <CPU::open(int, int, void*)+0xeb>
c001966d:	83 ec 0c             	sub    esp,0xc
c0019670:	53                   	push   ebx
c0019671:	e8 4c fe ff ff       	call   c00194c2 <CPU::setupFeatures()>
c0019676:	83 c4 10             	add    esp,0x10
c0019679:	83 c4 0c             	add    esp,0xc
c001967c:	31 c0                	xor    eax,eax
c001967e:	5b                   	pop    ebx
c001967f:	5e                   	pop    esi
c0019680:	5f                   	pop    edi
c0019681:	5d                   	pop    ebp
c0019682:	c3                   	ret    

c0019683 <convertLegacyIRQNumber(int)>:
c0019683:	83 ec 0c             	sub    esp,0xc
c0019686:	f6 05 ac d7 02 c0 01 	test   BYTE PTR ds:0xc002d7ac,0x1
c001968d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019691:	74 0c                	je     c001969f <convertLegacyIRQNumber(int)+0x1c>
c0019693:	83 f8 0f             	cmp    eax,0xf
c0019696:	7f 0b                	jg     c00196a3 <convertLegacyIRQNumber(int)+0x20>
c0019698:	0f b6 80 e8 50 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdaf18]
c001969f:	83 c4 0c             	add    esp,0xc
c00196a2:	c3                   	ret    
c00196a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00196a7:	83 ec 0c             	sub    esp,0xc
c00196aa:	68 a0 45 02 c0       	push   0xc00245a0
c00196af:	e8 0e 5e ff ff       	call   c000f4c2 <KePanic(char const*)>
c00196b4:	83 c4 10             	add    esp,0x10
c00196b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196bb:	83 c4 0c             	add    esp,0xc
c00196be:	c3                   	ret    

c00196bf <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c00196bf:	56                   	push   esi
c00196c0:	31 c0                	xor    eax,eax
c00196c2:	53                   	push   ebx
c00196c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00196cf:	89 ca                	mov    edx,ecx
c00196d1:	c1 e2 04             	shl    edx,0x4
c00196d4:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c00196dc:	74 17                	je     c00196f5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c00196de:	83 c0 01             	add    eax,0x1
c00196e1:	83 f8 04             	cmp    eax,0x4
c00196e4:	75 ee                	jne    c00196d4 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c00196e6:	c7 44 24 0c 01 46 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024601
c00196ee:	5b                   	pop    ebx
c00196ef:	5e                   	pop    esi
c00196f0:	e9 cd 5d ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c00196f5:	8d 04 88             	lea    eax,[eax+ecx*4]
c00196f8:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c00196ff:	5b                   	pop    ebx
c0019700:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c0019707:	5e                   	pop    esi
c0019708:	c3                   	ret    

c0019709 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0019709:	55                   	push   ebp
c001970a:	57                   	push   edi
c001970b:	56                   	push   esi
c001970c:	53                   	push   ebx
c001970d:	83 ec 0c             	sub    esp,0xc
c0019710:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019714:	f6 05 ac d7 02 c0 01 	test   BYTE PTR ds:0xc002d7ac,0x1
c001971b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001971f:	8d 6e 20             	lea    ebp,[esi+0x20]
c0019722:	74 57                	je     c001977b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019724:	84 c0                	test   al,al
c0019726:	89 c7                	mov    edi,eax
c0019728:	74 1d                	je     c0019747 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001972a:	83 fe 0f             	cmp    esi,0xf
c001972d:	0f 8f d9 00 00 00    	jg     c001980c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c0019733:	0f b6 b6 e8 50 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdaf18]
c001973a:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c0019742:	d1 ef                	shr    edi,1
c0019744:	83 e7 01             	and    edi,0x1
c0019747:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c001974c:	83 ec 08             	sub    esp,0x8
c001974f:	31 db                	xor    ebx,ebx
c0019751:	50                   	push   eax
c0019752:	68 0e 46 02 c0       	push   0xc002460e
c0019757:	e8 f2 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001975c:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	85 c0                	test   eax,eax
c0019766:	7f 59                	jg     c00197c1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c0019768:	8d 6e 20             	lea    ebp,[esi+0x20]
c001976b:	83 ec 0c             	sub    esp,0xc
c001976e:	68 25 46 02 c0       	push   0xc0024625
c0019773:	e8 4a 5d ff ff       	call   c000f4c2 <KePanic(char const*)>
c0019778:	83 c4 10             	add    esp,0x10
c001977b:	89 e8                	mov    eax,ebp
c001977d:	31 d2                	xor    edx,edx
c001977f:	c1 e0 04             	shl    eax,0x4
c0019782:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c0019789:	85 c9                	test   ecx,ecx
c001978b:	0f 84 92 00 00 00    	je     c0019823 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c0019791:	83 c2 01             	add    edx,0x1
c0019794:	83 fa 04             	cmp    edx,0x4
c0019797:	75 e9                	jne    c0019782 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c0019799:	83 ec 0c             	sub    esp,0xc
c001979c:	68 dc 45 02 c0       	push   0xc00245dc
c00197a1:	e8 1c 5d ff ff       	call   c000f4c2 <KePanic(char const*)>
c00197a6:	83 c4 10             	add    esp,0x10
c00197a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197ae:	83 c4 0c             	add    esp,0xc
c00197b1:	5b                   	pop    ebx
c00197b2:	5e                   	pop    esi
c00197b3:	5f                   	pop    edi
c00197b4:	5d                   	pop    ebp
c00197b5:	c3                   	ret    
c00197b6:	83 c3 01             	add    ebx,0x1
c00197b9:	39 1d 00 e1 02 c0    	cmp    DWORD PTR ds:0xc002e100,ebx
c00197bf:	7e a7                	jle    c0019768 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c00197c1:	8b 2c 9d 20 e1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd1ee0]
c00197c8:	83 ec 08             	sub    esp,0x8
c00197cb:	56                   	push   esi
c00197cc:	55                   	push   ebp
c00197cd:	e8 9e 66 00 00       	call   c001fe70 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00197d2:	83 c4 10             	add    esp,0x10
c00197d5:	84 c0                	test   al,al
c00197d7:	74 dd                	je     c00197b6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c00197d9:	89 f8                	mov    eax,edi
c00197db:	83 ec 04             	sub    esp,0x4
c00197de:	8b 1c 9d 20 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1ee0]
c00197e5:	8d 6e 20             	lea    ebp,[esi+0x20]
c00197e8:	0f b6 f8             	movzx  edi,al
c00197eb:	57                   	push   edi
c00197ec:	89 e8                	mov    eax,ebp
c00197ee:	6a 00                	push   0x0
c00197f0:	0f b6 c0             	movzx  eax,al
c00197f3:	50                   	push   eax
c00197f4:	89 f0                	mov    eax,esi
c00197f6:	6a 00                	push   0x0
c00197f8:	0f b6 c0             	movzx  eax,al
c00197fb:	6a 00                	push   0x0
c00197fd:	50                   	push   eax
c00197fe:	53                   	push   ebx
c00197ff:	e8 d8 67 00 00       	call   c001ffdc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0019804:	83 c4 20             	add    esp,0x20
c0019807:	e9 6f ff ff ff       	jmp    c001977b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001980c:	83 ec 0c             	sub    esp,0xc
c001980f:	31 ff                	xor    edi,edi
c0019811:	68 a0 45 02 c0       	push   0xc00245a0
c0019816:	e8 a7 5c ff ff       	call   c000f4c2 <KePanic(char const*)>
c001981b:	83 c4 10             	add    esp,0x10
c001981e:	e9 24 ff ff ff       	jmp    c0019747 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0019823:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0019826:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001982a:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c0019831:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019835:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c001983c:	83 c4 0c             	add    esp,0xc
c001983f:	89 f0                	mov    eax,esi
c0019841:	5b                   	pop    ebx
c0019842:	5e                   	pop    esi
c0019843:	5f                   	pop    edi
c0019844:	5d                   	pop    ebp
c0019845:	c3                   	ret    

c0019846 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0019846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001984a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001984e:	c1 e0 04             	shl    eax,0x4
c0019851:	8d 50 10             	lea    edx,[eax+0x10]
c0019854:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c001985a:	74 08                	je     c0019864 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001985c:	83 c0 04             	add    eax,0x4
c001985f:	39 d0                	cmp    eax,edx
c0019861:	75 f1                	jne    c0019854 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0019863:	c3                   	ret    
c0019864:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c001986e:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0019878:	eb e2                	jmp    c001985c <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001987a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001987a:	56                   	push   esi
c001987b:	53                   	push   ebx
c001987c:	83 ec 04             	sub    esp,0x4
c001987f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019884:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019888:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001988c:	74 09                	je     c0019897 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001988e:	f6 05 ac d7 02 c0 01 	test   BYTE PTR ds:0xc002d7ac,0x1
c0019895:	75 34                	jne    c00198cb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0019897:	8d 43 20             	lea    eax,[ebx+0x20]
c001989a:	c1 e0 04             	shl    eax,0x4
c001989d:	8d 50 10             	lea    edx,[eax+0x10]
c00198a0:	39 b0 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],esi
c00198a6:	74 0d                	je     c00198b5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00198a8:	83 c0 04             	add    eax,0x4
c00198ab:	39 d0                	cmp    eax,edx
c00198ad:	75 f1                	jne    c00198a0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c00198af:	83 c4 04             	add    esp,0x4
c00198b2:	5b                   	pop    ebx
c00198b3:	5e                   	pop    esi
c00198b4:	c3                   	ret    
c00198b5:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c00198bf:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c00198c9:	eb dd                	jmp    c00198a8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c00198cb:	83 fb 0f             	cmp    ebx,0xf
c00198ce:	7f 09                	jg     c00198d9 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c00198d0:	0f b6 9b e8 50 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdaf18]
c00198d7:	eb be                	jmp    c0019897 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00198d9:	83 ec 0c             	sub    esp,0xc
c00198dc:	68 32 46 02 c0       	push   0xc0024632
c00198e1:	e8 dc 5b ff ff       	call   c000f4c2 <KePanic(char const*)>
c00198e6:	83 c4 10             	add    esp,0x10
c00198e9:	eb ac                	jmp    c0019897 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00198eb:	90                   	nop

c00198ec <picIoWait()>:
c00198ec:	eb 00                	jmp    c00198ee <picIoWait()+0x2>
c00198ee:	eb 00                	jmp    c00198f0 <picIoWait()+0x4>
c00198f0:	90                   	nop
c00198f1:	c3                   	ret    
c00198f2:	66 90                	xchg   ax,ax

c00198f4 <picDisable()>:
c00198f4:	83 ec 10             	sub    esp,0x10
c00198f7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00198fe:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0019903:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019907:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001990c:	ee                   	out    dx,al
c001990d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0019914:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0019919:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001991d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019922:	ee                   	out    dx,al
c0019923:	90                   	nop
c0019924:	83 c4 10             	add    esp,0x10
c0019927:	c3                   	ret    

c0019928 <picGetIRQReg(int)>:
c0019928:	83 ec 10             	sub    esp,0x10
c001992b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001992f:	0f b6 c0             	movzx  eax,al
c0019932:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019939:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001993d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019941:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019946:	ee                   	out    dx,al
c0019947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001994b:	0f b6 c0             	movzx  eax,al
c001994e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019955:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019959:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001995d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019962:	ee                   	out    dx,al
c0019963:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001996a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001996f:	89 c2                	mov    edx,eax
c0019971:	ec                   	in     al,dx
c0019972:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019976:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001997a:	0f b6 c0             	movzx  eax,al
c001997d:	c1 e0 08             	shl    eax,0x8
c0019980:	89 c1                	mov    ecx,eax
c0019982:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0019989:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001998e:	89 c2                	mov    edx,eax
c0019990:	ec                   	in     al,dx
c0019991:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019995:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019999:	0f b6 c0             	movzx  eax,al
c001999c:	09 c8                	or     eax,ecx
c001999e:	83 c4 10             	add    esp,0x10
c00199a1:	c3                   	ret    
c00199a2:	66 90                	xchg   ax,ax

c00199a4 <picOpen()>:
c00199a4:	83 ec 50             	sub    esp,0x50
c00199a7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00199ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00199b3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00199b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199bb:	ee                   	out    dx,al
c00199bc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00199c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00199c8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00199cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00199d0:	ee                   	out    dx,al
c00199d1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00199d9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00199e1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00199e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199ec:	89 c2                	mov    edx,eax
c00199ee:	ec                   	in     al,dx
c00199ef:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00199f3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00199f7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00199fb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0019a02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a06:	89 c2                	mov    edx,eax
c0019a08:	ec                   	in     al,dx
c0019a09:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019a0d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019a11:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019a15:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019a1c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019a21:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019a25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019a29:	ee                   	out    dx,al
c0019a2a:	e8 bd fe ff ff       	call   c00198ec <picIoWait()>
c0019a2f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0019a36:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019a3b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019a3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019a43:	ee                   	out    dx,al
c0019a44:	e8 a3 fe ff ff       	call   c00198ec <picIoWait()>
c0019a49:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019a4d:	0f b6 c0             	movzx  eax,al
c0019a50:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0019a57:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019a5b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019a5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019a63:	ee                   	out    dx,al
c0019a64:	e8 83 fe ff ff       	call   c00198ec <picIoWait()>
c0019a69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019a6d:	0f b6 c0             	movzx  eax,al
c0019a70:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0019a77:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019a7b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019a7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019a83:	ee                   	out    dx,al
c0019a84:	e8 63 fe ff ff       	call   c00198ec <picIoWait()>
c0019a89:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0019a90:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019a95:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0019a99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019a9d:	ee                   	out    dx,al
c0019a9e:	e8 49 fe ff ff       	call   c00198ec <picIoWait()>
c0019aa3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0019aaa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0019aaf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019ab3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019ab7:	ee                   	out    dx,al
c0019ab8:	e8 2f fe ff ff       	call   c00198ec <picIoWait()>
c0019abd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019ac4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019ac9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019acd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019ad1:	ee                   	out    dx,al
c0019ad2:	e8 15 fe ff ff       	call   c00198ec <picIoWait()>
c0019ad7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0019ade:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0019ae3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019ae7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019aeb:	ee                   	out    dx,al
c0019aec:	e8 fb fd ff ff       	call   c00198ec <picIoWait()>
c0019af1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019af6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019afd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019b01:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019b05:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019b09:	ee                   	out    dx,al
c0019b0a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019b0f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019b16:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019b1a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019b1e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019b22:	ee                   	out    dx,al
c0019b23:	90                   	nop
c0019b24:	83 c4 50             	add    esp,0x50
c0019b27:	c3                   	ret    

c0019b28 <picEOI(int)>:
c0019b28:	83 ec 10             	sub    esp,0x10
c0019b2b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019b30:	75 1e                	jne    c0019b50 <picEOI(int)+0x28>
c0019b32:	6a 0b                	push   0xb
c0019b34:	e8 ef fd ff ff       	call   c0019928 <picGetIRQReg(int)>
c0019b39:	83 c4 04             	add    esp,0x4
c0019b3c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019b41:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019b46:	25 80 00 00 00       	and    eax,0x80
c0019b4b:	74 73                	je     c0019bc0 <picEOI(int)+0x98>
c0019b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b50:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019b55:	75 31                	jne    c0019b88 <picEOI(int)+0x60>
c0019b57:	6a 0b                	push   0xb
c0019b59:	e8 ca fd ff ff       	call   c0019928 <picGetIRQReg(int)>
c0019b5e:	83 c4 04             	add    esp,0x4
c0019b61:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0019b66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b6a:	98                   	cwde   
c0019b6b:	85 c0                	test   eax,eax
c0019b6d:	78 19                	js     c0019b88 <picEOI(int)+0x60>
c0019b6f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0019b76:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019b7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019b7f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019b84:	ee                   	out    dx,al
c0019b85:	eb 3d                	jmp    c0019bc4 <picEOI(int)+0x9c>
c0019b87:	90                   	nop
c0019b88:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019b8d:	7e 19                	jle    c0019ba8 <picEOI(int)+0x80>
c0019b8f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019b96:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0019b9b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019b9f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019ba4:	ee                   	out    dx,al
c0019ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019baf:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019bb4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019bb8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019bbd:	ee                   	out    dx,al
c0019bbe:	eb 04                	jmp    c0019bc4 <picEOI(int)+0x9c>
c0019bc0:	90                   	nop
c0019bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc4:	83 c4 10             	add    esp,0x10
c0019bc7:	c3                   	ret    

c0019bc8 <RTC::open(int, int, void*)>:
c0019bc8:	31 c0                	xor    eax,eax
c0019bca:	c3                   	ret    
c0019bcb:	90                   	nop

c0019bcc <RTC::close(int, int, void*)>:
c0019bcc:	31 c0                	xor    eax,eax
c0019bce:	c3                   	ret    
c0019bcf:	90                   	nop

c0019bd0 <RTC::timeInSecondsUTC()>:
c0019bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019bda:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019be0:	c3                   	ret    
c0019be1:	90                   	nop

c0019be2 <RTC::timeInDatetimeUTC()>:
c0019be2:	53                   	push   ebx
c0019be3:	83 ec 14             	sub    esp,0x14
c0019be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019bee:	8b 10                	mov    edx,DWORD PTR [eax]
c0019bf0:	50                   	push   eax
c0019bf1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019bf4:	83 c4 0c             	add    esp,0xc
c0019bf7:	52                   	push   edx
c0019bf8:	50                   	push   eax
c0019bf9:	53                   	push   ebx
c0019bfa:	e8 04 f2 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0019bff:	89 d8                	mov    eax,ebx
c0019c01:	83 c4 14             	add    esp,0x14
c0019c04:	5b                   	pop    ebx
c0019c05:	c2 04 00             	ret    0x4

c0019c08 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019c08:	56                   	push   esi
c0019c09:	53                   	push   ebx
c0019c0a:	83 ec 14             	sub    esp,0x14
c0019c0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019c11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c13:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019c16:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c1a:	52                   	push   edx
c0019c1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c23:	50                   	push   eax
c0019c24:	e8 da f1 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0019c29:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019c2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019c39:	89 f0                	mov    eax,esi
c0019c3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019c3f:	83 c4 20             	add    esp,0x20
c0019c42:	5b                   	pop    ebx
c0019c43:	5e                   	pop    esi
c0019c44:	ff e0                	jmp    eax

c0019c46 <RTC::~RTC()>:
c0019c46:	83 ec 0c             	sub    esp,0xc
c0019c49:	ba 5c 46 02 c0       	mov    edx,0xc002465c
c0019c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c52:	89 10                	mov    DWORD PTR [eax],edx
c0019c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	50                   	push   eax
c0019c5c:	e8 05 ef fe ff       	call   c0008b66 <Clock::~Clock()>
c0019c61:	83 c4 10             	add    esp,0x10
c0019c64:	90                   	nop
c0019c65:	83 c4 0c             	add    esp,0xc
c0019c68:	c3                   	ret    
c0019c69:	90                   	nop

c0019c6a <RTC::~RTC()>:
c0019c6a:	83 ec 0c             	sub    esp,0xc
c0019c6d:	83 ec 0c             	sub    esp,0xc
c0019c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c74:	e8 cd ff ff ff       	call   c0019c46 <RTC::~RTC()>
c0019c79:	83 c4 10             	add    esp,0x10
c0019c7c:	83 ec 08             	sub    esp,0x8
c0019c7f:	68 60 01 00 00       	push   0x160
c0019c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c88:	e8 66 2c ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0019c8d:	83 c4 10             	add    esp,0x10
c0019c90:	83 c4 0c             	add    esp,0xc
c0019c93:	c3                   	ret    

c0019c94 <RTC::get_update_in_progress_flag()>:
c0019c94:	83 ec 18             	sub    esp,0x18
c0019c97:	6a 0a                	push   0xa
c0019c99:	e8 01 db ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019c9e:	83 c4 1c             	add    esp,0x1c
c0019ca1:	0f b6 c0             	movzx  eax,al
c0019ca4:	c1 e8 07             	shr    eax,0x7
c0019ca7:	c3                   	ret    

c0019ca8 <RTC::completeRTCRefresh()>:
c0019ca8:	55                   	push   ebp
c0019ca9:	57                   	push   edi
c0019caa:	56                   	push   esi
c0019cab:	53                   	push   ebx
c0019cac:	83 ec 3c             	sub    esp,0x3c
c0019caf:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019cb5:	83 ec 0c             	sub    esp,0xc
c0019cb8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019cbc:	e8 d3 ff ff ff       	call   c0019c94 <RTC::get_update_in_progress_flag()>
c0019cc1:	83 c4 10             	add    esp,0x10
c0019cc4:	84 c0                	test   al,al
c0019cc6:	74 0e                	je     c0019cd6 <RTC::completeRTCRefresh()+0x2e>
c0019cc8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019cce:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019cd4:	73 df                	jae    c0019cb5 <RTC::completeRTCRefresh()+0xd>
c0019cd6:	83 ec 0c             	sub    esp,0xc
c0019cd9:	6a 00                	push   0x0
c0019cdb:	e8 bf da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019ce0:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019ce7:	89 c7                	mov    edi,eax
c0019ce9:	e8 b1 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019cee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019cf5:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019cf9:	e8 a1 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019cfe:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019d05:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019d09:	e8 91 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019d0e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019d15:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019d19:	e8 81 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019d1e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019d25:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019d29:	e8 71 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019d2e:	0f b6 c0             	movzx  eax,al
c0019d31:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019d35:	83 c4 10             	add    esp,0x10
c0019d38:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019d3e:	83 ec 0c             	sub    esp,0xc
c0019d41:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019d45:	e8 4a ff ff ff       	call   c0019c94 <RTC::get_update_in_progress_flag()>
c0019d4a:	83 c4 10             	add    esp,0x10
c0019d4d:	84 c0                	test   al,al
c0019d4f:	74 0e                	je     c0019d5f <RTC::completeRTCRefresh()+0xb7>
c0019d51:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019d57:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019d5d:	73 df                	jae    c0019d3e <RTC::completeRTCRefresh()+0x96>
c0019d5f:	83 ec 0c             	sub    esp,0xc
c0019d62:	6a 00                	push   0x0
c0019d64:	e8 36 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019d69:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019d70:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019d74:	e8 26 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019d79:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019d80:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019d84:	e8 16 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019d89:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019d90:	88 c3                	mov    bl,al
c0019d92:	e8 08 da ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019d97:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019d9e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019da2:	e8 f8 d9 ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019da7:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019dae:	89 c6                	mov    esi,eax
c0019db0:	e8 ea d9 ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019db5:	89 f9                	mov    ecx,edi
c0019db7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019dbb:	83 c4 10             	add    esp,0x10
c0019dbe:	0f b6 e8             	movzx  ebp,al
c0019dc1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019dc6:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019dca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019dce:	74 27                	je     c0019df7 <RTC::completeRTCRefresh()+0x14f>
c0019dd0:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0019dd4:	89 f0                	mov    eax,esi
c0019dd6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019dda:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019dde:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019de2:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019de6:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019dea:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019dee:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019df2:	e9 41 ff ff ff       	jmp    c0019d38 <RTC::completeRTCRefresh()+0x90>
c0019df7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019dfc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019e00:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e04:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019e08:	75 c6                	jne    c0019dd0 <RTC::completeRTCRefresh()+0x128>
c0019e0a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019e0f:	89 f1                	mov    ecx,esi
c0019e11:	0f b6 fb             	movzx  edi,bl
c0019e14:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019e18:	0f b6 c9             	movzx  ecx,cl
c0019e1b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019e1f:	89 f1                	mov    ecx,esi
c0019e21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e25:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019e29:	0f 94 c2             	sete   dl
c0019e2c:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019e30:	0f 94 c0             	sete   al
c0019e33:	21 d0                	and    eax,edx
c0019e35:	31 d2                	xor    edx,edx
c0019e37:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019e3b:	0f 94 c2             	sete   dl
c0019e3e:	85 c2                	test   edx,eax
c0019e40:	74 8e                	je     c0019dd0 <RTC::completeRTCRefresh()+0x128>
c0019e42:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0019e46:	75 88                	jne    c0019dd0 <RTC::completeRTCRefresh()+0x128>
c0019e48:	83 ec 0c             	sub    esp,0xc
c0019e4b:	6a 0b                	push   0xb
c0019e4d:	e8 4d d9 ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019e52:	83 c4 10             	add    esp,0x10
c0019e55:	a8 04                	test   al,0x4
c0019e57:	75 7a                	jne    c0019ed3 <RTC::completeRTCRefresh()+0x22b>
c0019e59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019e5d:	c1 ef 04             	shr    edi,0x4
c0019e60:	83 e6 0f             	and    esi,0xf
c0019e63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019e67:	c1 ed 04             	shr    ebp,0x4
c0019e6a:	6b ed 0a             	imul   ebp,ebp,0xa
c0019e6d:	c1 ea 04             	shr    edx,0x4
c0019e70:	6b d2 0a             	imul   edx,edx,0xa
c0019e73:	83 e1 0f             	and    ecx,0xf
c0019e76:	01 d1                	add    ecx,edx
c0019e78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019e7c:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0019e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e84:	c1 ea 04             	shr    edx,0x4
c0019e87:	6b d2 0a             	imul   edx,edx,0xa
c0019e8a:	83 e1 0f             	and    ecx,0xf
c0019e8d:	01 d1                	add    ecx,edx
c0019e8f:	89 fa                	mov    edx,edi
c0019e91:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0019e95:	83 e2 07             	and    edx,0x7
c0019e98:	89 d9                	mov    ecx,ebx
c0019e9a:	6b d2 0a             	imul   edx,edx,0xa
c0019e9d:	83 e1 0f             	and    ecx,0xf
c0019ea0:	83 e3 80             	and    ebx,0xffffff80
c0019ea3:	01 d1                	add    ecx,edx
c0019ea5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ea9:	09 cb                	or     ebx,ecx
c0019eab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019eaf:	c1 ea 04             	shr    edx,0x4
c0019eb2:	6b d2 0a             	imul   edx,edx,0xa
c0019eb5:	83 e1 0f             	and    ecx,0xf
c0019eb8:	01 d1                	add    ecx,edx
c0019eba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ebe:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0019ec2:	c1 ea 04             	shr    edx,0x4
c0019ec5:	6b d2 0a             	imul   edx,edx,0xa
c0019ec8:	01 d6                	add    esi,edx
c0019eca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ece:	83 e2 0f             	and    edx,0xf
c0019ed1:	01 d5                	add    ebp,edx
c0019ed3:	a8 02                	test   al,0x2
c0019ed5:	75 15                	jne    c0019eec <RTC::completeRTCRefresh()+0x244>
c0019ed7:	f6 c3 80             	test   bl,0x80
c0019eda:	74 10                	je     c0019eec <RTC::completeRTCRefresh()+0x244>
c0019edc:	83 e3 7f             	and    ebx,0x7f
c0019edf:	b9 18 00 00 00       	mov    ecx,0x18
c0019ee4:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019ee7:	99                   	cdq    
c0019ee8:	f7 f9                	idiv   ecx
c0019eea:	88 d3                	mov    bl,dl
c0019eec:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0019ef2:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0019ef8:	77 06                	ja     c0019f00 <RTC::completeRTCRefresh()+0x258>
c0019efa:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0019f00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f05:	31 c9                	xor    ecx,ecx
c0019f07:	31 d2                	xor    edx,edx
c0019f09:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019f0d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019f11:	89 cd                	mov    ebp,ecx
c0019f13:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0019f17:	c1 e7 10             	shl    edi,0x10
c0019f1a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0019f20:	c1 e0 10             	shl    eax,0x10
c0019f23:	09 c5                	or     ebp,eax
c0019f25:	89 e9                	mov    ecx,ebp
c0019f27:	0f b7 c2             	movzx  eax,dx
c0019f2a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0019f2e:	09 f8                	or     eax,edi
c0019f30:	89 c2                	mov    edx,eax
c0019f32:	50                   	push   eax
c0019f33:	50                   	push   eax
c0019f34:	88 d9                	mov    cl,bl
c0019f36:	51                   	push   ecx
c0019f37:	52                   	push   edx
c0019f38:	e8 18 ed fe ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c0019f3d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019f41:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019f47:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019f4d:	83 c4 4c             	add    esp,0x4c
c0019f50:	5b                   	pop    ebx
c0019f51:	5e                   	pop    esi
c0019f52:	5f                   	pop    edi
c0019f53:	5d                   	pop    ebp
c0019f54:	c3                   	ret    
c0019f55:	90                   	nop

c0019f56 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019f56:	55                   	push   ebp
c0019f57:	57                   	push   edi
c0019f58:	56                   	push   esi
c0019f59:	53                   	push   ebx
c0019f5a:	83 ec 34             	sub    esp,0x34
c0019f5d:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019f61:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0019f65:	6a 00                	push   0x0
c0019f67:	6a 00                	push   0x0
c0019f69:	e8 85 d8 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c0019f6e:	5d                   	pop    ebp
c0019f6f:	89 fb                	mov    ebx,edi
c0019f71:	58                   	pop    eax
c0019f72:	6a 00                	push   0x0
c0019f74:	6a 02                	push   0x2
c0019f76:	e8 78 d8 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c0019f7b:	89 f8                	mov    eax,edi
c0019f7d:	89 f9                	mov    ecx,edi
c0019f7f:	0f b6 c4             	movzx  eax,ah
c0019f82:	31 d2                	xor    edx,edx
c0019f84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f88:	c1 e9 10             	shr    ecx,0x10
c0019f8b:	89 f0                	mov    eax,esi
c0019f8d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019f91:	89 f0                	mov    eax,esi
c0019f93:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0019f97:	0f b6 c4             	movzx  eax,ah
c0019f9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f9e:	89 f0                	mov    eax,esi
c0019fa0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019fa4:	c1 e8 10             	shr    eax,0x10
c0019fa7:	b9 64 00 00 00       	mov    ecx,0x64
c0019fac:	f7 f1                	div    ecx
c0019fae:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0019fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019fb9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019fbd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019fc1:	e8 d9 d7 ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c0019fc6:	83 c4 10             	add    esp,0x10
c0019fc9:	a8 04                	test   al,0x4
c0019fcb:	89 c5                	mov    ebp,eax
c0019fcd:	75 6e                	jne    c001a03d <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019fcf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019fd3:	31 d2                	xor    edx,edx
c0019fd5:	0f b6 c1             	movzx  eax,cl
c0019fd8:	b9 0a 00 00 00       	mov    ecx,0xa
c0019fdd:	f7 f1                	div    ecx
c0019fdf:	c1 e0 04             	shl    eax,0x4
c0019fe2:	09 d0                	or     eax,edx
c0019fe4:	31 d2                	xor    edx,edx
c0019fe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019fef:	f7 f1                	div    ecx
c0019ff1:	c1 e0 04             	shl    eax,0x4
c0019ff4:	09 d0                	or     eax,edx
c0019ff6:	31 d2                	xor    edx,edx
c0019ff8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ffc:	0f b6 c3             	movzx  eax,bl
c0019fff:	f7 f1                	div    ecx
c001a001:	c1 e0 04             	shl    eax,0x4
c001a004:	09 d0                	or     eax,edx
c001a006:	31 d2                	xor    edx,edx
c001a008:	89 c3                	mov    ebx,eax
c001a00a:	89 f0                	mov    eax,esi
c001a00c:	0f b6 c0             	movzx  eax,al
c001a00f:	f7 f1                	div    ecx
c001a011:	c1 e0 04             	shl    eax,0x4
c001a014:	09 d0                	or     eax,edx
c001a016:	31 d2                	xor    edx,edx
c001a018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a01c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a021:	f7 f1                	div    ecx
c001a023:	c1 e0 04             	shl    eax,0x4
c001a026:	09 d0                	or     eax,edx
c001a028:	31 d2                	xor    edx,edx
c001a02a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a02e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a032:	f7 f1                	div    ecx
c001a034:	c1 e0 04             	shl    eax,0x4
c001a037:	09 d0                	or     eax,edx
c001a039:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a03d:	83 e5 02             	and    ebp,0x2
c001a040:	75 1e                	jne    c001a060 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a042:	0f b6 c3             	movzx  eax,bl
c001a045:	83 f8 0b             	cmp    eax,0xb
c001a048:	76 10                	jbe    c001a05a <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001a04a:	8d 53 f4             	lea    edx,[ebx-0xc]
c001a04d:	84 d2                	test   dl,dl
c001a04f:	88 d3                	mov    bl,dl
c001a051:	75 02                	jne    c001a055 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001a053:	b3 0c                	mov    bl,0xc
c001a055:	83 cb 80             	or     ebx,0xffffff80
c001a058:	eb 06                	jmp    c001a060 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a05a:	85 c0                	test   eax,eax
c001a05c:	75 02                	jne    c001a060 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a05e:	b3 0c                	mov    bl,0xc
c001a060:	50                   	push   eax
c001a061:	0f b6 db             	movzx  ebx,bl
c001a064:	50                   	push   eax
c001a065:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001a06a:	52                   	push   edx
c001a06b:	6a 00                	push   0x0
c001a06d:	e8 81 d7 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c001a072:	5a                   	pop    edx
c001a073:	59                   	pop    ecx
c001a074:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a079:	50                   	push   eax
c001a07a:	6a 02                	push   0x2
c001a07c:	e8 72 d7 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c001a081:	5e                   	pop    esi
c001a082:	5f                   	pop    edi
c001a083:	53                   	push   ebx
c001a084:	6a 04                	push   0x4
c001a086:	e8 68 d7 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c001a08b:	5d                   	pop    ebp
c001a08c:	58                   	pop    eax
c001a08d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a092:	52                   	push   edx
c001a093:	6a 07                	push   0x7
c001a095:	e8 59 d7 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c001a09a:	58                   	pop    eax
c001a09b:	5a                   	pop    edx
c001a09c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001a0a1:	50                   	push   eax
c001a0a2:	6a 08                	push   0x8
c001a0a4:	e8 4a d7 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c001a0a9:	59                   	pop    ecx
c001a0aa:	5b                   	pop    ebx
c001a0ab:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001a0b0:	55                   	push   ebp
c001a0b1:	6a 09                	push   0x9
c001a0b3:	e8 3b d7 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c001a0b8:	5e                   	pop    esi
c001a0b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a0bd:	e8 e6 fb ff ff       	call   c0019ca8 <RTC::completeRTCRefresh()>
c001a0c2:	83 c4 3c             	add    esp,0x3c
c001a0c5:	b0 01                	mov    al,0x1
c001a0c7:	5b                   	pop    ebx
c001a0c8:	5e                   	pop    esi
c001a0c9:	5f                   	pop    edi
c001a0ca:	5d                   	pop    ebp
c001a0cb:	c3                   	ret    

c001a0cc <rtcIRQHandler(regs*, void*)>:
c001a0cc:	53                   	push   ebx
c001a0cd:	83 ec 14             	sub    esp,0x14
c001a0d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a0d4:	6a 0c                	push   0xc
c001a0d6:	e8 c4 d6 ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	a8 80                	test   al,0x80
c001a0e0:	74 24                	je     c001a106 <rtcIRQHandler(regs*, void*)+0x3a>
c001a0e2:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a0e9:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a0f0:	66 ff 05 b4 d7 02 c0 	inc    WORD PTR ds:0xc002d7b4
c001a0f7:	75 0d                	jne    c001a106 <rtcIRQHandler(regs*, void*)+0x3a>
c001a0f9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a0fd:	83 c4 08             	add    esp,0x8
c001a100:	5b                   	pop    ebx
c001a101:	e9 a2 fb ff ff       	jmp    c0019ca8 <RTC::completeRTCRefresh()>
c001a106:	83 c4 08             	add    esp,0x8
c001a109:	5b                   	pop    ebx
c001a10a:	c3                   	ret    
c001a10b:	90                   	nop

c001a10c <RTC::RTC()>:
c001a10c:	83 ec 1c             	sub    esp,0x1c
c001a10f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a113:	83 ec 08             	sub    esp,0x8
c001a116:	68 3f 46 02 c0       	push   0xc002463f
c001a11b:	50                   	push   eax
c001a11c:	e8 0f ea fe ff       	call   c0008b30 <Clock::Clock(char const*)>
c001a121:	83 c4 10             	add    esp,0x10
c001a124:	ba 5c 46 02 c0       	mov    edx,0xc002465c
c001a129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a12d:	89 10                	mov    DWORD PTR [eax],edx
c001a12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a133:	83 ec 0c             	sub    esp,0xc
c001a136:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a13a:	6a 01                	push   0x1
c001a13c:	68 cc a0 01 c0       	push   0xc001a0cc
c001a141:	6a 08                	push   0x8
c001a143:	50                   	push   eax
c001a144:	e8 f5 ee fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a149:	83 c4 20             	add    esp,0x20
c001a14c:	89 c2                	mov    edx,eax
c001a14e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a152:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a158:	fa                   	cli    
c001a159:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001a15e:	83 c0 01             	add    eax,0x1
c001a161:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c001a166:	83 ec 0c             	sub    esp,0xc
c001a169:	6a 0b                	push   0xb
c001a16b:	e8 2f d6 ff ff       	call   c001779f <x86ReadCMOS(unsigned char)>
c001a170:	83 c4 10             	add    esp,0x10
c001a173:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a177:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a17b:	83 c8 10             	or     eax,0x10
c001a17e:	0f b6 c0             	movzx  eax,al
c001a181:	83 ec 08             	sub    esp,0x8
c001a184:	50                   	push   eax
c001a185:	6a 0b                	push   0xb
c001a187:	e8 67 d6 ff ff       	call   c00177f3 <x86WriteCMOS(unsigned char, unsigned char)>
c001a18c:	83 c4 10             	add    esp,0x10
c001a18f:	83 ec 0c             	sub    esp,0xc
c001a192:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a196:	e8 0d fb ff ff       	call   c0019ca8 <RTC::completeRTCRefresh()>
c001a19b:	83 c4 10             	add    esp,0x10
c001a19e:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001a1a6:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001a1ab:	85 c0                	test   eax,eax
c001a1ad:	75 01                	jne    c001a1b0 <RTC::RTC()+0xa4>
c001a1af:	fb                   	sti    
c001a1b0:	90                   	nop
c001a1b1:	83 c4 1c             	add    esp,0x1c
c001a1b4:	c3                   	ret    
c001a1b5:	66 90                	xchg   ax,ax
c001a1b7:	90                   	nop

c001a1b8 <HalConsoleScroll(int, int)>:
c001a1b8:	83 ec 10             	sub    esp,0x10
c001a1bb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001a1c3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001a1cb:	90                   	nop
c001a1cc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a1d1:	0f 8f e1 00 00 00    	jg     c001a2b8 <HalConsoleScroll(int, int)+0x100>
c001a1d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a1df:	90                   	nop
c001a1e0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001a1e8:	0f 8f be 00 00 00    	jg     c001a2ac <HalConsoleScroll(int, int)+0xf4>
c001a1ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1f2:	89 d0                	mov    eax,edx
c001a1f4:	c1 e0 02             	shl    eax,0x2
c001a1f7:	01 d0                	add    eax,edx
c001a1f9:	c1 e0 05             	shl    eax,0x5
c001a1fc:	89 c2                	mov    edx,eax
c001a1fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a202:	01 d0                	add    eax,edx
c001a204:	89 c2                	mov    edx,eax
c001a206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a20a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a20d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a211:	89 d0                	mov    eax,edx
c001a213:	c1 e0 02             	shl    eax,0x2
c001a216:	01 d0                	add    eax,edx
c001a218:	c1 e0 05             	shl    eax,0x5
c001a21b:	89 c2                	mov    edx,eax
c001a21d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a221:	01 d0                	add    eax,edx
c001a223:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001a229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a22d:	01 d0                	add    eax,edx
c001a22f:	8a 11                	mov    dl,BYTE PTR [ecx]
c001a231:	88 10                	mov    BYTE PTR [eax],dl
c001a233:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a238:	75 66                	jne    c001a2a0 <HalConsoleScroll(int, int)+0xe8>
c001a23a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a23e:	83 e0 01             	and    eax,0x1
c001a241:	74 39                	je     c001a27c <HalConsoleScroll(int, int)+0xc4>
c001a243:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a247:	83 e0 0f             	and    eax,0xf
c001a24a:	88 c2                	mov    dl,al
c001a24c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a250:	c1 e0 04             	shl    eax,0x4
c001a253:	09 d0                	or     eax,edx
c001a255:	88 c1                	mov    cl,al
c001a257:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a25b:	89 d0                	mov    eax,edx
c001a25d:	c1 e0 02             	shl    eax,0x2
c001a260:	01 d0                	add    eax,edx
c001a262:	c1 e0 05             	shl    eax,0x5
c001a265:	89 c2                	mov    edx,eax
c001a267:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a26b:	01 d0                	add    eax,edx
c001a26d:	89 c2                	mov    edx,eax
c001a26f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a273:	01 d0                	add    eax,edx
c001a275:	88 ca                	mov    dl,cl
c001a277:	88 10                	mov    BYTE PTR [eax],dl
c001a279:	eb 25                	jmp    c001a2a0 <HalConsoleScroll(int, int)+0xe8>
c001a27b:	90                   	nop
c001a27c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a280:	89 d0                	mov    eax,edx
c001a282:	c1 e0 02             	shl    eax,0x2
c001a285:	01 d0                	add    eax,edx
c001a287:	c1 e0 05             	shl    eax,0x5
c001a28a:	89 c2                	mov    edx,eax
c001a28c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a290:	01 d0                	add    eax,edx
c001a292:	89 c2                	mov    edx,eax
c001a294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a298:	01 d0                	add    eax,edx
c001a29a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001a29d:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001a2a5:	e9 36 ff ff ff       	jmp    c001a1e0 <HalConsoleScroll(int, int)+0x28>
c001a2aa:	66 90                	xchg   ax,ax
c001a2ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a2b1:	e9 16 ff ff ff       	jmp    c001a1cc <HalConsoleScroll(int, int)+0x14>
c001a2b6:	66 90                	xchg   ax,ax
c001a2b8:	90                   	nop
c001a2b9:	83 c4 10             	add    esp,0x10
c001a2bc:	c3                   	ret    
c001a2bd:	8d 76 00             	lea    esi,[esi+0x0]

c001a2c0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001a2c0:	83 ec 14             	sub    esp,0x14
c001a2c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2c7:	88 04 24             	mov    BYTE PTR [esp],al
c001a2ca:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a2cd:	0f b6 c0             	movzx  eax,al
c001a2d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2d4:	89 d1                	mov    ecx,edx
c001a2d6:	83 e1 0f             	and    ecx,0xf
c001a2d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a2dd:	c1 e2 04             	shl    edx,0x4
c001a2e0:	0f b6 d2             	movzx  edx,dl
c001a2e3:	09 ca                	or     edx,ecx
c001a2e5:	c1 e2 08             	shl    edx,0x8
c001a2e8:	09 d0                	or     eax,edx
c001a2ea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001a2ef:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001a2f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a2fb:	89 d0                	mov    eax,edx
c001a2fd:	c1 e0 02             	shl    eax,0x2
c001a300:	01 d0                	add    eax,edx
c001a302:	c1 e0 04             	shl    eax,0x4
c001a305:	89 c2                	mov    edx,eax
c001a307:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a30b:	01 d0                	add    eax,edx
c001a30d:	d1 e0                	shl    eax,1
c001a30f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001a313:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a317:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001a31c:	66 89 10             	mov    WORD PTR [eax],dx
c001a31f:	90                   	nop
c001a320:	83 c4 14             	add    esp,0x14
c001a323:	c3                   	ret    

c001a324 <HalConsoleCursorUpdate(int, int)>:
c001a324:	83 ec 20             	sub    esp,0x20
c001a327:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a32b:	89 c2                	mov    edx,eax
c001a32d:	c1 e2 02             	shl    edx,0x2
c001a330:	01 d0                	add    eax,edx
c001a332:	c1 e0 04             	shl    eax,0x4
c001a335:	89 c2                	mov    edx,eax
c001a337:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a33b:	01 d0                	add    eax,edx
c001a33d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001a342:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001a349:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001a34e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a356:	ee                   	out    dx,al
c001a357:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a35c:	0f b6 c0             	movzx  eax,al
c001a35f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001a366:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a36a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a36e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a372:	ee                   	out    dx,al
c001a373:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001a37a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001a37f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a383:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a387:	ee                   	out    dx,al
c001a388:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001a38d:	c1 e8 08             	shr    eax,0x8
c001a390:	0f b6 c0             	movzx  eax,al
c001a393:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001a39a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a39e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a3a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3a6:	ee                   	out    dx,al
c001a3a7:	90                   	nop
c001a3a8:	83 c4 20             	add    esp,0x20
c001a3ab:	c3                   	ret    

c001a3ac <FAT::getName()>:
c001a3ac:	b8 90 46 02 c0       	mov    eax,0xc0024690
c001a3b1:	c3                   	ret    
c001a3b2:	66 90                	xchg   ax,ax

c001a3b4 <FAT::tell(void*, unsigned long long*)>:
c001a3b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a3b9:	75 09                	jne    c001a3c4 <FAT::tell(void*, unsigned long long*)+0x10>
c001a3bb:	b8 04 00 00 00       	mov    eax,0x4
c001a3c0:	c3                   	ret    
c001a3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a3c9:	75 09                	jne    c001a3d4 <FAT::tell(void*, unsigned long long*)+0x20>
c001a3cb:	b8 04 00 00 00       	mov    eax,0x4
c001a3d0:	c3                   	ret    
c001a3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a3db:	ba 00 00 00 00       	mov    edx,0x0
c001a3e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a3e4:	89 01                	mov    DWORD PTR [ecx],eax
c001a3e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a3e9:	b8 00 00 00 00       	mov    eax,0x0
c001a3ee:	c3                   	ret    
c001a3ef:	90                   	nop

c001a3f0 <FAT::stat(void*, unsigned long long*)>:
c001a3f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a3f5:	75 09                	jne    c001a400 <FAT::stat(void*, unsigned long long*)+0x10>
c001a3f7:	b8 04 00 00 00       	mov    eax,0x4
c001a3fc:	c3                   	ret    
c001a3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a400:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a405:	75 09                	jne    c001a410 <FAT::stat(void*, unsigned long long*)+0x20>
c001a407:	b8 04 00 00 00       	mov    eax,0x4
c001a40c:	c3                   	ret    
c001a40d:	8d 76 00             	lea    esi,[esi+0x0]
c001a410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a414:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a417:	ba 00 00 00 00       	mov    edx,0x0
c001a41c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a420:	89 01                	mov    DWORD PTR [ecx],eax
c001a422:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a425:	b8 00 00 00 00       	mov    eax,0x0
c001a42a:	c3                   	ret    
c001a42b:	90                   	nop

c001a42c <FAT::~FAT()>:
c001a42c:	83 ec 0c             	sub    esp,0xc
c001a42f:	ba dc 46 02 c0       	mov    edx,0xc00246dc
c001a434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a438:	89 10                	mov    DWORD PTR [eax],edx
c001a43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a43e:	83 ec 0c             	sub    esp,0xc
c001a441:	50                   	push   eax
c001a442:	e8 33 d9 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001a447:	83 c4 10             	add    esp,0x10
c001a44a:	90                   	nop
c001a44b:	83 c4 0c             	add    esp,0xc
c001a44e:	c3                   	ret    
c001a44f:	90                   	nop

c001a450 <FAT::~FAT()>:
c001a450:	83 ec 0c             	sub    esp,0xc
c001a453:	83 ec 0c             	sub    esp,0xc
c001a456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a45a:	e8 cd ff ff ff       	call   c001a42c <FAT::~FAT()>
c001a45f:	83 c4 10             	add    esp,0x10
c001a462:	83 ec 08             	sub    esp,0x8
c001a465:	6a 08                	push   0x8
c001a467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a46b:	e8 83 24 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c001a470:	83 c4 10             	add    esp,0x10
c001a473:	83 c4 0c             	add    esp,0xc
c001a476:	c3                   	ret    
c001a477:	90                   	nop

c001a478 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a478:	83 ec 1c             	sub    esp,0x1c
c001a47b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a482:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a487:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a48b:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a492:	83 f8 ff             	cmp    eax,0xffffffff
c001a495:	75 35                	jne    c001a4cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a497:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a49b:	88 c2                	mov    dl,al
c001a49d:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a4a2:	01 d0                	add    eax,edx
c001a4a4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a4a8:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a4ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4b2:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a4b9:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a4be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4c2:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001a4c9:	eb 19                	jmp    c001a4e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a4cb:	90                   	nop
c001a4cc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a4d0:	88 c2                	mov    dl,al
c001a4d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4d6:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a4dd:	01 d0                	add    eax,edx
c001a4df:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a4e3:	90                   	nop
c001a4e4:	83 ec 04             	sub    esp,0x4
c001a4e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a4eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a4ef:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a4f3:	50                   	push   eax
c001a4f4:	e8 db ac fe ff       	call   c00051d4 <f_getlabel>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a500:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a505:	75 09                	jne    c001a510 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a507:	b8 00 00 00 00       	mov    eax,0x0
c001a50c:	eb 0a                	jmp    c001a518 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a50e:	66 90                	xchg   ax,ax
c001a510:	b8 01 00 00 00       	mov    eax,0x1
c001a515:	8d 76 00             	lea    esi,[esi+0x0]
c001a518:	83 c4 1c             	add    esp,0x1c
c001a51b:	c3                   	ret    

c001a51c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a51c:	53                   	push   ebx
c001a51d:	83 ec 58             	sub    esp,0x58
c001a520:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a528:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a52c:	b9 00 00 00 00       	mov    ecx,0x0
c001a531:	b8 3c 00 00 00       	mov    eax,0x3c
c001a536:	83 e0 f8             	and    eax,0xfffffff8
c001a539:	89 c3                	mov    ebx,eax
c001a53b:	b8 00 00 00 00       	mov    eax,0x0
c001a540:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001a544:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001a548:	83 c0 08             	add    eax,0x8
c001a54b:	39 d8                	cmp    eax,ebx
c001a54d:	72 f1                	jb     c001a540 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001a54f:	01 c2                	add    edx,eax
c001a551:	89 0a                	mov    DWORD PTR [edx],ecx
c001a553:	83 c2 04             	add    edx,0x4
c001a556:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a55a:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a561:	83 f8 ff             	cmp    eax,0xffffffff
c001a564:	75 36                	jne    c001a59c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001a566:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a56a:	88 c2                	mov    dl,al
c001a56c:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a571:	01 d0                	add    eax,edx
c001a573:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a577:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a57d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a581:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a588:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a58d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a591:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001a598:	eb 1a                	jmp    c001a5b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001a59a:	66 90                	xchg   ax,ax
c001a59c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a5a0:	88 c2                	mov    dl,al
c001a5a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5a6:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a5ad:	01 d0                	add    eax,edx
c001a5af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5b3:	90                   	nop
c001a5b4:	83 ec 08             	sub    esp,0x8
c001a5b7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a5bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5bf:	50                   	push   eax
c001a5c0:	e8 ab 62 fe ff       	call   c0000870 <strcat>
c001a5c5:	83 c4 10             	add    esp,0x10
c001a5c8:	83 ec 0c             	sub    esp,0xc
c001a5cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5cf:	50                   	push   eax
c001a5d0:	e8 53 ad fe ff       	call   c0005328 <f_setlabel>
c001a5d5:	83 c4 10             	add    esp,0x10
c001a5d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a5dc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a5e1:	75 09                	jne    c001a5ec <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001a5e3:	b8 00 00 00 00       	mov    eax,0x0
c001a5e8:	eb 0a                	jmp    c001a5f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001a5ea:	66 90                	xchg   ax,ax
c001a5ec:	b8 01 00 00 00       	mov    eax,0x1
c001a5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a5f4:	83 c4 58             	add    esp,0x58
c001a5f7:	5b                   	pop    ebx
c001a5f8:	c3                   	ret    
c001a5f9:	90                   	nop
c001a5fa:	66 90                	xchg   ax,ax

c001a5fc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a5fc:	83 ec 2c             	sub    esp,0x2c
c001a5ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a607:	83 ec 08             	sub    esp,0x8
c001a60a:	68 b4 46 02 c0       	push   0xc00246b4
c001a60f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a613:	e8 68 61 fe ff       	call   c0000780 <strcmp>
c001a618:	83 c4 10             	add    esp,0x10
c001a61b:	85 c0                	test   eax,eax
c001a61d:	0f 94 c0             	sete   al
c001a620:	0f b6 c0             	movzx  eax,al
c001a623:	85 c0                	test   eax,eax
c001a625:	74 0d                	je     c001a634 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a627:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a62f:	e9 c0 00 00 00       	jmp    c001a6f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a634:	83 ec 08             	sub    esp,0x8
c001a637:	68 a6 46 02 c0       	push   0xc00246a6
c001a63c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a640:	e8 3b 61 fe ff       	call   c0000780 <strcmp>
c001a645:	83 c4 10             	add    esp,0x10
c001a648:	85 c0                	test   eax,eax
c001a64a:	0f 94 c0             	sete   al
c001a64d:	0f b6 c0             	movzx  eax,al
c001a650:	85 c0                	test   eax,eax
c001a652:	74 10                	je     c001a664 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001a654:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a65c:	e9 93 00 00 00       	jmp    c001a6f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a661:	8d 76 00             	lea    esi,[esi+0x0]
c001a664:	83 ec 08             	sub    esp,0x8
c001a667:	68 ac 46 02 c0       	push   0xc00246ac
c001a66c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a670:	e8 0b 61 fe ff       	call   c0000780 <strcmp>
c001a675:	83 c4 10             	add    esp,0x10
c001a678:	85 c0                	test   eax,eax
c001a67a:	0f 94 c0             	sete   al
c001a67d:	0f b6 c0             	movzx  eax,al
c001a680:	85 c0                	test   eax,eax
c001a682:	74 0c                	je     c001a690 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001a684:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a68c:	eb 66                	jmp    c001a6f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a68e:	66 90                	xchg   ax,ax
c001a690:	83 ec 08             	sub    esp,0x8
c001a693:	68 7c 18 02 c0       	push   0xc002187c
c001a698:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a69c:	e8 df 60 fe ff       	call   c0000780 <strcmp>
c001a6a1:	83 c4 10             	add    esp,0x10
c001a6a4:	85 c0                	test   eax,eax
c001a6a6:	0f 94 c0             	sete   al
c001a6a9:	0f b6 c0             	movzx  eax,al
c001a6ac:	85 c0                	test   eax,eax
c001a6ae:	74 0c                	je     c001a6bc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001a6b0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a6b8:	eb 3a                	jmp    c001a6f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a6ba:	66 90                	xchg   ax,ax
c001a6bc:	83 ec 08             	sub    esp,0x8
c001a6bf:	68 b2 46 02 c0       	push   0xc00246b2
c001a6c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6c8:	e8 b3 60 fe ff       	call   c0000780 <strcmp>
c001a6cd:	83 c4 10             	add    esp,0x10
c001a6d0:	85 c0                	test   eax,eax
c001a6d2:	0f 94 c0             	sete   al
c001a6d5:	0f b6 c0             	movzx  eax,al
c001a6d8:	85 c0                	test   eax,eax
c001a6da:	74 0c                	je     c001a6e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001a6dc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a6e4:	eb 0e                	jmp    c001a6f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a6e6:	66 90                	xchg   ax,ax
c001a6e8:	b8 08 00 00 00       	mov    eax,0x8
c001a6ed:	e9 ea 00 00 00       	jmp    c001a7dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a6f2:	66 90                	xchg   ax,ax
c001a6f4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a6fb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a700:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a704:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a70b:	83 f8 ff             	cmp    eax,0xffffffff
c001a70e:	75 34                	jne    c001a744 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001a710:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a714:	88 c2                	mov    dl,al
c001a716:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a71b:	01 d0                	add    eax,edx
c001a71d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a721:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a727:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a72b:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a732:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a737:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a73b:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001a742:	eb 18                	jmp    c001a75c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001a744:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a748:	88 c2                	mov    dl,al
c001a74a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a74e:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a755:	01 d0                	add    eax,edx
c001a757:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a75b:	90                   	nop
c001a75c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a760:	88 04 24             	mov    BYTE PTR [esp],al
c001a763:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a76b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a773:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a778:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a780:	83 ec 0c             	sub    esp,0xc
c001a783:	68 00 20 00 00       	push   0x2000
c001a788:	e8 ef 49 ff ff       	call   c000f17c <malloc>
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a794:	68 00 20 00 00       	push   0x2000
c001a799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a79d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a7a1:	50                   	push   eax
c001a7a2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a7a6:	50                   	push   eax
c001a7a7:	e8 79 ae fe ff       	call   c0005625 <f_mkfs>
c001a7ac:	83 c4 10             	add    esp,0x10
c001a7af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7b8:	75 0a                	jne    c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a7ba:	b8 00 00 00 00       	mov    eax,0x0
c001a7bf:	eb 1b                	jmp    c001a7dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7c4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a7c9:	75 09                	jne    c001a7d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001a7cb:	b8 09 00 00 00       	mov    eax,0x9
c001a7d0:	eb 0a                	jmp    c001a7dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a7d2:	66 90                	xchg   ax,ax
c001a7d4:	b8 01 00 00 00       	mov    eax,0x1
c001a7d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7dc:	83 c4 2c             	add    esp,0x2c
c001a7df:	c3                   	ret    

c001a7e0 <FAT::tryMount(LogicalDisk*, int)>:
c001a7e0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001a7e6:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a7eb:	83 f8 14             	cmp    eax,0x14
c001a7ee:	75 18                	jne    c001a808 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a7f0:	83 ec 0c             	sub    esp,0xc
c001a7f3:	68 b8 46 02 c0       	push   0xc00246b8
c001a7f8:	e8 c5 4c ff ff       	call   c000f4c2 <KePanic(char const*)>
c001a7fd:	83 c4 10             	add    esp,0x10
c001a800:	b0 00                	mov    al,0x0
c001a802:	e9 ed 01 00 00       	jmp    c001a9f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a807:	90                   	nop
c001a808:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a80f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a815:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a81b:	3d 00 02 00 00       	cmp    eax,0x200
c001a820:	74 0a                	je     c001a82c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a822:	b0 00                	mov    al,0x0
c001a824:	e9 cb 01 00 00       	jmp    c001a9f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a829:	8d 76 00             	lea    esi,[esi+0x0]
c001a82c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001a834:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a83b:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a842:	83 f8 ff             	cmp    eax,0xffffffff
c001a845:	74 09                	je     c001a850 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a847:	b0 01                	mov    al,0x1
c001a849:	e9 a6 01 00 00       	jmp    c001a9f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a84e:	66 90                	xchg   ax,ax
c001a850:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001a85a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001a862:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001a869:	88 c2                	mov    dl,al
c001a86b:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a870:	01 d0                	add    eax,edx
c001a872:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001a879:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a87f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a886:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a88d:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a892:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001a899:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	68 34 02 00 00       	push   0x234
c001a8a8:	e8 cf 48 ff ff       	call   c000f17c <malloc>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001a8b7:	83 ec 04             	sub    esp,0x4
c001a8ba:	6a 00                	push   0x0
c001a8bc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a8c3:	50                   	push   eax
c001a8c4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a8cb:	e8 4f 95 fe ff       	call   c0003e1f <f_mount>
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001a8da:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001a8e2:	74 1c                	je     c001a900 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a8e4:	83 ec 0c             	sub    esp,0xc
c001a8e7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a8ee:	e8 a9 48 ff ff       	call   c000f19c <rfree>
c001a8f3:	83 c4 10             	add    esp,0x10
c001a8f6:	b0 00                	mov    al,0x0
c001a8f8:	e9 f7 00 00 00       	jmp    c001a9f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a900:	83 ec 04             	sub    esp,0x4
c001a903:	68 00 01 00 00       	push   0x100
c001a908:	6a 00                	push   0x0
c001a90a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a911:	50                   	push   eax
c001a912:	e8 d9 5b fe ff       	call   c00004f0 <memset>
c001a917:	83 c4 10             	add    esp,0x10
c001a91a:	83 ec 08             	sub    esp,0x8
c001a91d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a924:	50                   	push   eax
c001a925:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a92c:	50                   	push   eax
c001a92d:	e8 3e 5f fe ff       	call   c0000870 <strcat>
c001a932:	83 c4 10             	add    esp,0x10
c001a935:	83 ec 08             	sub    esp,0x8
c001a938:	68 c6 46 02 c0       	push   0xc00246c6
c001a93d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a944:	50                   	push   eax
c001a945:	e8 26 5f fe ff       	call   c0000870 <strcat>
c001a94a:	83 c4 10             	add    esp,0x10
c001a94d:	83 ec 04             	sub    esp,0x4
c001a950:	6a 01                	push   0x1
c001a952:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001a959:	50                   	push   eax
c001a95a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a95e:	50                   	push   eax
c001a95f:	e8 1d 95 fe ff       	call   c0003e81 <f_open>
c001a964:	83 c4 10             	add    esp,0x10
c001a967:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001a96e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001a975:	85 c0                	test   eax,eax
c001a977:	74 0b                	je     c001a984 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a979:	78 31                	js     c001a9ac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a97b:	83 e8 04             	sub    eax,0x4
c001a97e:	83 f8 01             	cmp    eax,0x1
c001a981:	77 29                	ja     c001a9ac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a983:	90                   	nop
c001a984:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a993:	50                   	push   eax
c001a994:	e8 98 9c fe ff       	call   c0004631 <f_close>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	90                   	nop
c001a99d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001a9a5:	85 c0                	test   eax,eax
c001a9a7:	74 43                	je     c001a9ec <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001a9a9:	eb 31                	jmp    c001a9dc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a9ab:	90                   	nop
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a9b6:	e8 e1 47 ff ff       	call   c000f19c <rfree>
c001a9bb:	83 c4 10             	add    esp,0x10
c001a9be:	83 ec 04             	sub    esp,0x4
c001a9c1:	6a 00                	push   0x0
c001a9c3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a9ca:	50                   	push   eax
c001a9cb:	6a 00                	push   0x0
c001a9cd:	e8 4d 94 fe ff       	call   c0003e1f <f_mount>
c001a9d2:	83 c4 10             	add    esp,0x10
c001a9d5:	b0 00                	mov    al,0x0
c001a9d7:	eb 1b                	jmp    c001a9f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9dc:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a9e1:	83 c0 01             	add    eax,0x1
c001a9e4:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c001a9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9ec:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001a9f3:	90                   	nop
c001a9f4:	81 c4 4c 03 00 00    	add    esp,0x34c
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <FAT::allocateSwapfile(char const*, int)>:
c001a9fc:	55                   	push   ebp
c001a9fd:	57                   	push   edi
c001a9fe:	56                   	push   esi
c001a9ff:	53                   	push   ebx
c001aa00:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aa06:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001aa11:	83 ec 0c             	sub    esp,0xc
c001aa14:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001aa1b:	e8 5c 47 ff ff       	call   c000f17c <malloc>
c001aa20:	83 c4 10             	add    esp,0x10
c001aa23:	89 c7                	mov    edi,eax
c001aa25:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001aa2a:	83 ec 04             	sub    esp,0x4
c001aa2d:	50                   	push   eax
c001aa2e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001aa35:	57                   	push   edi
c001aa36:	e8 f1 d6 fe ff       	call   c000812c <File::File(char const*, Process*)>
c001aa3b:	83 c4 10             	add    esp,0x10
c001aa3e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001aa45:	83 ec 04             	sub    esp,0x4
c001aa48:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa4c:	50                   	push   eax
c001aa4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa51:	50                   	push   eax
c001aa52:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa59:	e8 ee d9 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001aa5e:	83 c4 10             	add    esp,0x10
c001aa61:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001aa68:	c1 e0 14             	shl    eax,0x14
c001aa6b:	89 c7                	mov    edi,eax
c001aa6d:	89 c5                	mov    ebp,eax
c001aa6f:	c1 fd 1f             	sar    ebp,0x1f
c001aa72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa7a:	89 f9                	mov    ecx,edi
c001aa7c:	31 c1                	xor    ecx,eax
c001aa7e:	89 cb                	mov    ebx,ecx
c001aa80:	89 e9                	mov    ecx,ebp
c001aa82:	31 d1                	xor    ecx,edx
c001aa84:	89 ce                	mov    esi,ecx
c001aa86:	89 f0                	mov    eax,esi
c001aa88:	09 d8                	or     eax,ebx
c001aa8a:	0f 84 9c 00 00 00    	je     c001ab2c <FAT::allocateSwapfile(char const*, int)+0x130>
c001aa90:	83 ec 0c             	sub    esp,0xc
c001aa93:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa9a:	e8 79 d8 fe ff       	call   c0008318 <File::unlink()>
c001aa9f:	83 c4 10             	add    esp,0x10
c001aaa2:	83 ec 08             	sub    esp,0x8
c001aaa5:	6a 12                	push   0x12
c001aaa7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aaae:	e8 97 d6 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001aab3:	83 c4 10             	add    esp,0x10
c001aab6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aabd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aac3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aaca:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001aad1:	c1 e0 14             	shl    eax,0x14
c001aad4:	83 ec 04             	sub    esp,0x4
c001aad7:	6a 01                	push   0x1
c001aad9:	50                   	push   eax
c001aada:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001aae1:	e8 d2 a9 fe ff       	call   c00054b8 <f_expand>
c001aae6:	83 c4 10             	add    esp,0x10
c001aae9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aaf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaf2:	83 c0 10             	add    eax,0x10
c001aaf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaf7:	83 ec 0c             	sub    esp,0xc
c001aafa:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aafe:	52                   	push   edx
c001aaff:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ab03:	52                   	push   edx
c001ab04:	6a 00                	push   0x0
c001ab06:	68 00 04 00 00       	push   0x400
c001ab0b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ab12:	ff d0                	call   eax
c001ab14:	83 c4 20             	add    esp,0x20
c001ab17:	83 ec 0c             	sub    esp,0xc
c001ab1a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab21:	e8 82 d6 fe ff       	call   c00081a8 <File::close()>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	8d 76 00             	lea    esi,[esi+0x0]
c001ab2c:	83 ec 08             	sub    esp,0x8
c001ab2f:	6a 01                	push   0x1
c001ab31:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab38:	e8 0d d6 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001ab3d:	83 c4 10             	add    esp,0x10
c001ab40:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab49:	83 c0 0c             	add    eax,0xc
c001ab4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ab55:	52                   	push   edx
c001ab56:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ab5a:	52                   	push   edx
c001ab5b:	6a 00                	push   0x0
c001ab5d:	6a 04                	push   0x4
c001ab5f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ab66:	ff d0                	call   eax
c001ab68:	83 c4 20             	add    esp,0x20
c001ab6b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab72:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ab78:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ab7f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ab86:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ab89:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab9a:	e8 09 d6 fe ff       	call   c00081a8 <File::close()>
c001ab9f:	83 c4 10             	add    esp,0x10
c001aba2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001aba9:	ba 00 00 00 00       	mov    edx,0x0
c001abae:	81 c4 3c 04 00 00    	add    esp,0x43c
c001abb4:	5b                   	pop    ebx
c001abb5:	5e                   	pop    esi
c001abb6:	5f                   	pop    edi
c001abb7:	5d                   	pop    ebp
c001abb8:	c3                   	ret    
c001abb9:	90                   	nop
c001abba:	66 90                	xchg   ax,ax

c001abbc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001abbc:	57                   	push   edi
c001abbd:	56                   	push   esi
c001abbe:	53                   	push   ebx
c001abbf:	81 ec 50 02 00 00    	sub    esp,0x250
c001abc5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001abcd:	74 0d                	je     c001abdc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001abcf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001abd7:	75 0f                	jne    c001abe8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001abd9:	8d 76 00             	lea    esi,[esi+0x0]
c001abdc:	b8 04 00 00 00       	mov    eax,0x4
c001abe1:	e9 3a 01 00 00       	jmp    c001ad20 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001abe6:	66 90                	xchg   ax,ax
c001abe8:	83 ec 08             	sub    esp,0x8
c001abeb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001abf2:	50                   	push   eax
c001abf3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001abfa:	e8 fe 9c fe ff       	call   c00048fd <f_readdir>
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ac09:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001ac10:	83 ec 0c             	sub    esp,0xc
c001ac13:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac1a:	83 c0 16             	add    eax,0x16
c001ac1d:	50                   	push   eax
c001ac1e:	e8 5d 59 fe ff       	call   c0000580 <strlen>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	ba 00 00 00 00       	mov    edx,0x0
c001ac2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac2f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ac33:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ac3a:	0f b6 c0             	movzx  eax,al
c001ac3d:	83 e0 10             	and    eax,0x10
c001ac40:	74 0a                	je     c001ac4c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ac42:	b8 02 00 00 00       	mov    eax,0x2
c001ac47:	eb 0b                	jmp    c001ac54 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ac49:	8d 76 00             	lea    esi,[esi+0x0]
c001ac4c:	b8 01 00 00 00       	mov    eax,0x1
c001ac51:	8d 76 00             	lea    esi,[esi+0x0]
c001ac54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac58:	83 ec 08             	sub    esp,0x8
c001ac5b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ac62:	83 c0 16             	add    eax,0x16
c001ac65:	50                   	push   eax
c001ac66:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac6a:	83 c0 10             	add    eax,0x10
c001ac6d:	50                   	push   eax
c001ac6e:	e8 dd 59 fe ff       	call   c0000650 <strcpy>
c001ac73:	83 c4 10             	add    esp,0x10
c001ac76:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ac7d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ac84:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac88:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ac8f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ac96:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ac9d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001aca4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001acab:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001acb2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001acb9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001acc0:	89 c6                	mov    esi,eax
c001acc2:	89 d7                	mov    edi,edx
c001acc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acc6:	89 c8                	mov    eax,ecx
c001acc8:	89 fa                	mov    edx,edi
c001acca:	89 f3                	mov    ebx,esi
c001accc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001acd3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001acda:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ace1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ace8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001acee:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001acf5:	0f be c0             	movsx  eax,al
c001acf8:	85 c0                	test   eax,eax
c001acfa:	75 08                	jne    c001ad04 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001acfc:	b8 07 00 00 00       	mov    eax,0x7
c001ad01:	eb 1d                	jmp    c001ad20 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ad03:	90                   	nop
c001ad04:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ad0b:	85 c0                	test   eax,eax
c001ad0d:	75 09                	jne    c001ad18 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001ad0f:	b8 00 00 00 00       	mov    eax,0x0
c001ad14:	eb 0a                	jmp    c001ad20 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ad16:	66 90                	xchg   ax,ax
c001ad18:	b8 01 00 00 00       	mov    eax,0x1
c001ad1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad20:	81 c4 50 02 00 00    	add    esp,0x250
c001ad26:	5b                   	pop    ebx
c001ad27:	5e                   	pop    esi
c001ad28:	5f                   	pop    edi
c001ad29:	c3                   	ret    
c001ad2a:	66 90                	xchg   ax,ax

c001ad2c <FAT::read(void*, unsigned long, void*, int*)>:
c001ad2c:	83 ec 1c             	sub    esp,0x1c
c001ad2f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad34:	74 0a                	je     c001ad40 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ad36:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ad3b:	75 0b                	jne    c001ad48 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ad3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad40:	b8 04 00 00 00       	mov    eax,0x4
c001ad45:	eb 41                	jmp    c001ad88 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ad47:	90                   	nop
c001ad48:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad4c:	50                   	push   eax
c001ad4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad59:	e8 e6 93 fe ff       	call   c0004144 <f_read>
c001ad5e:	83 c4 10             	add    esp,0x10
c001ad61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad69:	89 c2                	mov    edx,eax
c001ad6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad6f:	89 10                	mov    DWORD PTR [eax],edx
c001ad71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad75:	85 c0                	test   eax,eax
c001ad77:	75 07                	jne    c001ad80 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ad79:	b8 00 00 00 00       	mov    eax,0x0
c001ad7e:	eb 08                	jmp    c001ad88 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ad80:	b8 01 00 00 00       	mov    eax,0x1
c001ad85:	8d 76 00             	lea    esi,[esi+0x0]
c001ad88:	83 c4 1c             	add    esp,0x1c
c001ad8b:	c3                   	ret    

c001ad8c <FAT::write(void*, unsigned long, void*, int*)>:
c001ad8c:	83 ec 1c             	sub    esp,0x1c
c001ad8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad94:	74 0a                	je     c001ada0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ad96:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ad9b:	75 0b                	jne    c001ada8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c001ada0:	b8 04 00 00 00       	mov    eax,0x4
c001ada5:	eb 41                	jmp    c001ade8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ada7:	90                   	nop
c001ada8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001adac:	50                   	push   eax
c001adad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001adb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adb9:	e8 67 95 fe ff       	call   c0004325 <f_write>
c001adbe:	83 c4 10             	add    esp,0x10
c001adc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adc9:	89 c2                	mov    edx,eax
c001adcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adcf:	89 10                	mov    DWORD PTR [eax],edx
c001add1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001add5:	85 c0                	test   eax,eax
c001add7:	75 07                	jne    c001ade0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001add9:	b8 00 00 00 00       	mov    eax,0x0
c001adde:	eb 08                	jmp    c001ade8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ade0:	b8 01 00 00 00       	mov    eax,0x1
c001ade5:	8d 76 00             	lea    esi,[esi+0x0]
c001ade8:	83 c4 1c             	add    esp,0x1c
c001adeb:	c3                   	ret    

c001adec <FAT::close(void*)>:
c001adec:	83 ec 1c             	sub    esp,0x1c
c001adef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001adf4:	75 0a                	jne    c001ae00 <FAT::close(void*)+0x14>
c001adf6:	b8 04 00 00 00       	mov    eax,0x4
c001adfb:	eb 3f                	jmp    c001ae3c <FAT::close(void*)+0x50>
c001adfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ae00:	83 ec 0c             	sub    esp,0xc
c001ae03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae07:	e8 25 98 fe ff       	call   c0004631 <f_close>
c001ae0c:	83 c4 10             	add    esp,0x10
c001ae0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae13:	83 ec 0c             	sub    esp,0xc
c001ae16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae1a:	e8 6d 43 ff ff       	call   c000f18c <free>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae26:	85 c0                	test   eax,eax
c001ae28:	75 0a                	jne    c001ae34 <FAT::close(void*)+0x48>
c001ae2a:	b8 00 00 00 00       	mov    eax,0x0
c001ae2f:	eb 0b                	jmp    c001ae3c <FAT::close(void*)+0x50>
c001ae31:	8d 76 00             	lea    esi,[esi+0x0]
c001ae34:	b8 01 00 00 00       	mov    eax,0x1
c001ae39:	8d 76 00             	lea    esi,[esi+0x0]
c001ae3c:	83 c4 1c             	add    esp,0x1c
c001ae3f:	c3                   	ret    

c001ae40 <FAT::closeDir(void*)>:
c001ae40:	83 ec 1c             	sub    esp,0x1c
c001ae43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae48:	75 0a                	jne    c001ae54 <FAT::closeDir(void*)+0x14>
c001ae4a:	b8 04 00 00 00       	mov    eax,0x4
c001ae4f:	eb 3f                	jmp    c001ae90 <FAT::closeDir(void*)+0x50>
c001ae51:	8d 76 00             	lea    esi,[esi+0x0]
c001ae54:	83 ec 0c             	sub    esp,0xc
c001ae57:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae5b:	e8 7b 9a fe ff       	call   c00048db <f_closedir>
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae67:	83 ec 0c             	sub    esp,0xc
c001ae6a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae6e:	e8 19 43 ff ff       	call   c000f18c <free>
c001ae73:	83 c4 10             	add    esp,0x10
c001ae76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae7a:	85 c0                	test   eax,eax
c001ae7c:	75 0a                	jne    c001ae88 <FAT::closeDir(void*)+0x48>
c001ae7e:	b8 00 00 00 00       	mov    eax,0x0
c001ae83:	eb 0b                	jmp    c001ae90 <FAT::closeDir(void*)+0x50>
c001ae85:	8d 76 00             	lea    esi,[esi+0x0]
c001ae88:	b8 01 00 00 00       	mov    eax,0x1
c001ae8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae90:	83 c4 1c             	add    esp,0x1c
c001ae93:	c3                   	ret    

c001ae94 <FAT::truncate(void*, unsigned long long)>:
c001ae94:	83 ec 2c             	sub    esp,0x2c
c001ae97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aea7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001aeac:	75 0a                	jne    c001aeb8 <FAT::truncate(void*, unsigned long long)+0x24>
c001aeae:	b8 04 00 00 00       	mov    eax,0x4
c001aeb3:	eb 47                	jmp    c001aefc <FAT::truncate(void*, unsigned long long)+0x68>
c001aeb5:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aebc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aebf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aec3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aecf:	83 ec 08             	sub    esp,0x8
c001aed2:	50                   	push   eax
c001aed3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001aed7:	e8 84 97 fe ff       	call   c0004660 <f_lseek>
c001aedc:	83 c4 10             	add    esp,0x10
c001aedf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aee3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aee7:	85 c0                	test   eax,eax
c001aee9:	75 09                	jne    c001aef4 <FAT::truncate(void*, unsigned long long)+0x60>
c001aeeb:	b8 00 00 00 00       	mov    eax,0x0
c001aef0:	eb 0a                	jmp    c001aefc <FAT::truncate(void*, unsigned long long)+0x68>
c001aef2:	66 90                	xchg   ax,ax
c001aef4:	b8 01 00 00 00       	mov    eax,0x1
c001aef9:	8d 76 00             	lea    esi,[esi+0x0]
c001aefc:	83 c4 2c             	add    esp,0x2c
c001aeff:	c3                   	ret    

c001af00 <FAT::seek(void*, unsigned long long)>:
c001af00:	83 ec 2c             	sub    esp,0x2c
c001af03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af13:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001af18:	75 0a                	jne    c001af24 <FAT::seek(void*, unsigned long long)+0x24>
c001af1a:	b8 04 00 00 00       	mov    eax,0x4
c001af1f:	eb 33                	jmp    c001af54 <FAT::seek(void*, unsigned long long)+0x54>
c001af21:	8d 76 00             	lea    esi,[esi+0x0]
c001af24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af28:	83 ec 08             	sub    esp,0x8
c001af2b:	50                   	push   eax
c001af2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001af30:	e8 2b 97 fe ff       	call   c0004660 <f_lseek>
c001af35:	83 c4 10             	add    esp,0x10
c001af38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af40:	85 c0                	test   eax,eax
c001af42:	75 08                	jne    c001af4c <FAT::seek(void*, unsigned long long)+0x4c>
c001af44:	b8 00 00 00 00       	mov    eax,0x0
c001af49:	eb 09                	jmp    c001af54 <FAT::seek(void*, unsigned long long)+0x54>
c001af4b:	90                   	nop
c001af4c:	b8 01 00 00 00       	mov    eax,0x1
c001af51:	8d 76 00             	lea    esi,[esi+0x0]
c001af54:	83 c4 2c             	add    esp,0x2c
c001af57:	c3                   	ret    

c001af58 <fatWrapperReadDisk>:
c001af58:	53                   	push   ebx
c001af59:	83 ec 18             	sub    esp,0x18
c001af5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af69:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001af70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001af74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af78:	ba 00 00 00 00       	mov    edx,0x0
c001af7d:	83 ec 0c             	sub    esp,0xc
c001af80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af84:	53                   	push   ebx
c001af85:	52                   	push   edx
c001af86:	50                   	push   eax
c001af87:	51                   	push   ecx
c001af88:	e8 5b f1 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001af8d:	83 c4 20             	add    esp,0x20
c001af90:	83 c4 18             	add    esp,0x18
c001af93:	5b                   	pop    ebx
c001af94:	c3                   	ret    
c001af95:	8d 76 00             	lea    esi,[esi+0x0]

c001af98 <fatWrapperWriteDisk>:
c001af98:	53                   	push   ebx
c001af99:	83 ec 18             	sub    esp,0x18
c001af9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afa0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afa4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afa9:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001afb0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001afb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afb8:	ba 00 00 00 00       	mov    edx,0x0
c001afbd:	83 ec 0c             	sub    esp,0xc
c001afc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afc4:	53                   	push   ebx
c001afc5:	52                   	push   edx
c001afc6:	50                   	push   eax
c001afc7:	51                   	push   ecx
c001afc8:	e8 87 f1 fe ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c001afcd:	83 c4 20             	add    esp,0x20
c001afd0:	83 c4 18             	add    esp,0x18
c001afd3:	5b                   	pop    ebx
c001afd4:	c3                   	ret    
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]

c001afd8 <fatWrapperIoctl>:
c001afd8:	53                   	push   ebx
c001afd9:	83 ec 28             	sub    esp,0x28
c001afdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afe0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001afe4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afe8:	88 d0                	mov    al,dl
c001afea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001afee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aff3:	83 f8 02             	cmp    eax,0x2
c001aff6:	75 34                	jne    c001b02c <fatWrapperIoctl+0x54>
c001aff8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001affc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b000:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b005:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001b00c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b012:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b018:	89 c2                	mov    edx,eax
c001b01a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b01e:	66 89 10             	mov    WORD PTR [eax],dx
c001b021:	b8 00 00 00 00       	mov    eax,0x0
c001b026:	e9 c5 00 00 00       	jmp    c001b0f0 <fatWrapperIoctl+0x118>
c001b02b:	90                   	nop
c001b02c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b031:	83 f8 01             	cmp    eax,0x1
c001b034:	75 6a                	jne    c001b0a0 <fatWrapperIoctl+0xc8>
c001b036:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b03a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b03e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b043:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001b04a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b050:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b056:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b05c:	89 c8                	mov    eax,ecx
c001b05e:	89 da                	mov    edx,ebx
c001b060:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b064:	c1 e0 0a             	shl    eax,0xa
c001b067:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b06c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001b073:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b079:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b07f:	89 cb                	mov    ebx,ecx
c001b081:	c1 fb 1f             	sar    ebx,0x1f
c001b084:	53                   	push   ebx
c001b085:	51                   	push   ecx
c001b086:	52                   	push   edx
c001b087:	50                   	push   eax
c001b088:	e8 e7 59 00 00       	call   c0020a74 <__udivdi3>
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	89 c2                	mov    edx,eax
c001b092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b096:	89 10                	mov    DWORD PTR [eax],edx
c001b098:	b8 00 00 00 00       	mov    eax,0x0
c001b09d:	eb 51                	jmp    c001b0f0 <fatWrapperIoctl+0x118>
c001b09f:	90                   	nop
c001b0a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b0a5:	85 c0                	test   eax,eax
c001b0a7:	75 07                	jne    c001b0b0 <fatWrapperIoctl+0xd8>
c001b0a9:	b8 00 00 00 00       	mov    eax,0x0
c001b0ae:	eb 40                	jmp    c001b0f0 <fatWrapperIoctl+0x118>
c001b0b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b0b5:	83 f8 03             	cmp    eax,0x3
c001b0b8:	75 1a                	jne    c001b0d4 <fatWrapperIoctl+0xfc>
c001b0ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0c6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b0cc:	b8 00 00 00 00       	mov    eax,0x0
c001b0d1:	eb 1d                	jmp    c001b0f0 <fatWrapperIoctl+0x118>
c001b0d3:	90                   	nop
c001b0d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b0d9:	83 f8 04             	cmp    eax,0x4
c001b0dc:	75 0a                	jne    c001b0e8 <fatWrapperIoctl+0x110>
c001b0de:	b8 00 00 00 00       	mov    eax,0x0
c001b0e3:	eb 0b                	jmp    c001b0f0 <fatWrapperIoctl+0x118>
c001b0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e8:	b8 04 00 00 00       	mov    eax,0x4
c001b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f0:	83 c4 28             	add    esp,0x28
c001b0f3:	5b                   	pop    ebx
c001b0f4:	c3                   	ret    
c001b0f5:	90                   	nop
c001b0f6:	66 90                	xchg   ax,ax

c001b0f8 <FAT::FAT()>:
c001b0f8:	83 ec 1c             	sub    esp,0x1c
c001b0fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0ff:	83 ec 0c             	sub    esp,0xc
c001b102:	50                   	push   eax
c001b103:	e8 4e cc fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b108:	83 c4 10             	add    esp,0x10
c001b10b:	ba dc 46 02 c0       	mov    edx,0xc00246dc
c001b110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b114:	89 10                	mov    DWORD PTR [eax],edx
c001b116:	c7 05 c0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7c0,0x0
c001b120:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b128:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b12d:	7f 19                	jg     c001b148 <FAT::FAT()+0x50>
c001b12f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b133:	c7 04 85 e0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2820],0xffffffff
c001b13e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b143:	eb e3                	jmp    c001b128 <FAT::FAT()+0x30>
c001b145:	8d 76 00             	lea    esi,[esi+0x0]
c001b148:	90                   	nop
c001b149:	83 c4 1c             	add    esp,0x1c
c001b14c:	c3                   	ret    
c001b14d:	90                   	nop
c001b14e:	66 90                	xchg   ax,ax

c001b150 <FAT::fixFilepath(char*)>:
c001b150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b154:	8a 00                	mov    al,BYTE PTR [eax]
c001b156:	0f be c0             	movsx  eax,al
c001b159:	83 f8 40             	cmp    eax,0x40
c001b15c:	7e 2e                	jle    c001b18c <FAT::fixFilepath(char*)+0x3c>
c001b15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b162:	8a 00                	mov    al,BYTE PTR [eax]
c001b164:	83 e8 41             	sub    eax,0x41
c001b167:	88 c2                	mov    dl,al
c001b169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b16d:	88 10                	mov    BYTE PTR [eax],dl
c001b16f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b173:	8a 00                	mov    al,BYTE PTR [eax]
c001b175:	0f be c0             	movsx  eax,al
c001b178:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001b17f:	83 c0 30             	add    eax,0x30
c001b182:	88 c2                	mov    dl,al
c001b184:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b188:	88 10                	mov    BYTE PTR [eax],dl
c001b18a:	66 90                	xchg   ax,ax
c001b18c:	90                   	nop
c001b18d:	c3                   	ret    
c001b18e:	66 90                	xchg   ax,ax

c001b190 <FAT::open(char const*, void**, FileOpenMode)>:
c001b190:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b196:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b19e:	74 0c                	je     c001b1ac <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b1a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b1a8:	75 0e                	jne    c001b1b8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b1aa:	66 90                	xchg   ax,ax
c001b1ac:	b8 04 00 00 00       	mov    eax,0x4
c001b1b1:	e9 46 01 00 00       	jmp    c001b2fc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b1b6:	66 90                	xchg   ax,ax
c001b1b8:	83 ec 08             	sub    esp,0x8
c001b1bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b1c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b1c6:	50                   	push   eax
c001b1c7:	e8 84 54 fe ff       	call   c0000650 <strcpy>
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	83 ec 08             	sub    esp,0x8
c001b1d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1d6:	50                   	push   eax
c001b1d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b1de:	e8 6d ff ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b1e3:	83 c4 10             	add    esp,0x10
c001b1e6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b1ee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b1f5:	83 e0 01             	and    eax,0x1
c001b1f8:	74 12                	je     c001b20c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001b1fa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b201:	83 c8 01             	or     eax,0x1
c001b204:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b20b:	90                   	nop
c001b20c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b213:	83 e0 04             	and    eax,0x4
c001b216:	74 24                	je     c001b23c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001b218:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b21f:	83 c8 30             	or     eax,0x30
c001b222:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b229:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b230:	83 c8 02             	or     eax,0x2
c001b233:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b23a:	66 90                	xchg   ax,ax
c001b23c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b243:	83 e0 02             	and    eax,0x2
c001b246:	74 14                	je     c001b25c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b248:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b24f:	83 c8 02             	or     eax,0x2
c001b252:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b259:	8d 76 00             	lea    esi,[esi+0x0]
c001b25c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b263:	83 e0 08             	and    eax,0x8
c001b266:	74 14                	je     c001b27c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001b268:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b26f:	83 c8 04             	or     eax,0x4
c001b272:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b279:	8d 76 00             	lea    esi,[esi+0x0]
c001b27c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b283:	83 e0 10             	and    eax,0x10
c001b286:	74 14                	je     c001b29c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001b288:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b28f:	83 c8 08             	or     eax,0x8
c001b292:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b299:	8d 76 00             	lea    esi,[esi+0x0]
c001b29c:	83 ec 0c             	sub    esp,0xc
c001b29f:	68 28 02 00 00       	push   0x228
c001b2a4:	e8 d3 3e ff ff       	call   c000f17c <malloc>
c001b2a9:	83 c4 10             	add    esp,0x10
c001b2ac:	89 c2                	mov    edx,eax
c001b2ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2b5:	89 10                	mov    DWORD PTR [eax],edx
c001b2b7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b2bf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2c8:	83 ec 04             	sub    esp,0x4
c001b2cb:	52                   	push   edx
c001b2cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b2d0:	52                   	push   edx
c001b2d1:	50                   	push   eax
c001b2d2:	e8 aa 8b fe ff       	call   c0003e81 <f_open>
c001b2d7:	83 c4 10             	add    esp,0x10
c001b2da:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b2e1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b2e9:	74 09                	je     c001b2f4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001b2eb:	b8 01 00 00 00       	mov    eax,0x1
c001b2f0:	eb 0a                	jmp    c001b2fc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b2f2:	66 90                	xchg   ax,ax
c001b2f4:	b8 00 00 00 00       	mov    eax,0x0
c001b2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b302:	c3                   	ret    
c001b303:	90                   	nop

c001b304 <FAT::openDir(char const*, void**)>:
c001b304:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b30a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b312:	74 0c                	je     c001b320 <FAT::openDir(char const*, void**)+0x1c>
c001b314:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b31c:	75 0e                	jne    c001b32c <FAT::openDir(char const*, void**)+0x28>
c001b31e:	66 90                	xchg   ax,ax
c001b320:	b8 04 00 00 00       	mov    eax,0x4
c001b325:	e9 82 00 00 00       	jmp    c001b3ac <FAT::openDir(char const*, void**)+0xa8>
c001b32a:	66 90                	xchg   ax,ax
c001b32c:	83 ec 08             	sub    esp,0x8
c001b32f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b336:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b33a:	50                   	push   eax
c001b33b:	e8 10 53 fe ff       	call   c0000650 <strcpy>
c001b340:	83 c4 10             	add    esp,0x10
c001b343:	83 ec 08             	sub    esp,0x8
c001b346:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b34a:	50                   	push   eax
c001b34b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b352:	e8 f9 fd ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b357:	83 c4 10             	add    esp,0x10
c001b35a:	83 ec 0c             	sub    esp,0xc
c001b35d:	6a 30                	push   0x30
c001b35f:	e8 18 3e ff ff       	call   c000f17c <malloc>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	89 c2                	mov    edx,eax
c001b369:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b370:	89 10                	mov    DWORD PTR [eax],edx
c001b372:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b379:	8b 00                	mov    eax,DWORD PTR [eax]
c001b37b:	83 ec 08             	sub    esp,0x8
c001b37e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b382:	52                   	push   edx
c001b383:	50                   	push   eax
c001b384:	e8 87 94 fe ff       	call   c0004810 <f_opendir>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b393:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b39b:	74 07                	je     c001b3a4 <FAT::openDir(char const*, void**)+0xa0>
c001b39d:	b8 01 00 00 00       	mov    eax,0x1
c001b3a2:	eb 08                	jmp    c001b3ac <FAT::openDir(char const*, void**)+0xa8>
c001b3a4:	b8 00 00 00 00       	mov    eax,0x0
c001b3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3b2:	c3                   	ret    
c001b3b3:	90                   	nop

c001b3b4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b3b4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b3ba:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b3c2:	75 0c                	jne    c001b3d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b3c4:	b8 04 00 00 00       	mov    eax,0x4
c001b3c9:	e9 d6 00 00 00       	jmp    c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b3ce:	66 90                	xchg   ax,ax
c001b3d0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b3d8:	75 0a                	jne    c001b3e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b3da:	b8 04 00 00 00       	mov    eax,0x4
c001b3df:	e9 c0 00 00 00       	jmp    c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b3e4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b3ec:	75 0a                	jne    c001b3f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b3ee:	b8 04 00 00 00       	mov    eax,0x4
c001b3f3:	e9 ac 00 00 00       	jmp    c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b3f8:	83 ec 08             	sub    esp,0x8
c001b3fb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b402:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b409:	50                   	push   eax
c001b40a:	e8 41 52 fe ff       	call   c0000650 <strcpy>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	83 ec 08             	sub    esp,0x8
c001b415:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b41c:	50                   	push   eax
c001b41d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b424:	e8 27 fd ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	83 ec 08             	sub    esp,0x8
c001b42f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b433:	50                   	push   eax
c001b434:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b43b:	50                   	push   eax
c001b43c:	e8 4e 95 fe ff       	call   c000498f <f_stat>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b44b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b452:	85 c0                	test   eax,eax
c001b454:	74 0a                	je     c001b460 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b456:	83 f8 04             	cmp    eax,0x4
c001b459:	74 39                	je     c001b494 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b45b:	eb 3f                	jmp    c001b49c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001b45d:	8d 76 00             	lea    esi,[esi+0x0]
c001b460:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b464:	0f b6 c0             	movzx  eax,al
c001b467:	83 e0 10             	and    eax,0x10
c001b46a:	0f 95 c2             	setne  dl
c001b46d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b474:	88 10                	mov    BYTE PTR [eax],dl
c001b476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b47a:	ba 00 00 00 00       	mov    edx,0x0
c001b47f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b486:	89 01                	mov    DWORD PTR [ecx],eax
c001b488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b48b:	b8 00 00 00 00       	mov    eax,0x0
c001b490:	eb 12                	jmp    c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b492:	66 90                	xchg   ax,ax
c001b494:	b8 02 00 00 00       	mov    eax,0x2
c001b499:	eb 09                	jmp    c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b49b:	90                   	nop
c001b49c:	b8 01 00 00 00       	mov    eax,0x1
c001b4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4aa:	c3                   	ret    
c001b4ab:	90                   	nop

c001b4ac <FAT::unlink(char const*)>:
c001b4ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4ba:	75 08                	jne    c001b4c4 <FAT::unlink(char const*)+0x18>
c001b4bc:	b8 04 00 00 00       	mov    eax,0x4
c001b4c1:	eb 61                	jmp    c001b524 <FAT::unlink(char const*)+0x78>
c001b4c3:	90                   	nop
c001b4c4:	83 ec 08             	sub    esp,0x8
c001b4c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4d2:	50                   	push   eax
c001b4d3:	e8 78 51 fe ff       	call   c0000650 <strcpy>
c001b4d8:	83 c4 10             	add    esp,0x10
c001b4db:	83 ec 08             	sub    esp,0x8
c001b4de:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4e2:	50                   	push   eax
c001b4e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4ea:	e8 61 fc ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b4ef:	83 c4 10             	add    esp,0x10
c001b4f2:	83 ec 0c             	sub    esp,0xc
c001b4f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4f9:	50                   	push   eax
c001b4fa:	e8 02 97 fe ff       	call   c0004c01 <f_unlink>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b509:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b510:	85 c0                	test   eax,eax
c001b512:	75 08                	jne    c001b51c <FAT::unlink(char const*)+0x70>
c001b514:	b8 00 00 00 00       	mov    eax,0x0
c001b519:	eb 09                	jmp    c001b524 <FAT::unlink(char const*)+0x78>
c001b51b:	90                   	nop
c001b51c:	b8 01 00 00 00       	mov    eax,0x1
c001b521:	8d 76 00             	lea    esi,[esi+0x0]
c001b524:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b52a:	c3                   	ret    
c001b52b:	90                   	nop

c001b52c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b52c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b532:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001b539:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001b540:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b544:	88 d0                	mov    al,dl
c001b546:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b54a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b552:	75 0c                	jne    c001b560 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001b554:	b8 04 00 00 00       	mov    eax,0x4
c001b559:	e9 7e 01 00 00       	jmp    c001b6dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001b55e:	66 90                	xchg   ax,ax
c001b560:	83 ec 08             	sub    esp,0x8
c001b563:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b56a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b56e:	50                   	push   eax
c001b56f:	e8 dc 50 fe ff       	call   c0000650 <strcpy>
c001b574:	83 c4 10             	add    esp,0x10
c001b577:	83 ec 08             	sub    esp,0x8
c001b57a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b57e:	50                   	push   eax
c001b57f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b586:	e8 c5 fb ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b58b:	83 c4 10             	add    esp,0x10
c001b58e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b596:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b59e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5a3:	83 e0 01             	and    eax,0x1
c001b5a6:	74 14                	je     c001b5bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001b5a8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b5af:	83 c8 01             	or     eax,0x1
c001b5b2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5c1:	83 e0 02             	and    eax,0x2
c001b5c4:	74 12                	je     c001b5d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001b5c6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b5cd:	83 c8 20             	or     eax,0x20
c001b5d0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b5d7:	90                   	nop
c001b5d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5dd:	83 e0 04             	and    eax,0x4
c001b5e0:	74 12                	je     c001b5f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001b5e2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b5e9:	83 c8 04             	or     eax,0x4
c001b5ec:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b5f3:	90                   	nop
c001b5f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5f9:	83 e0 08             	and    eax,0x8
c001b5fc:	74 12                	je     c001b610 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b5fe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b605:	83 c8 02             	or     eax,0x2
c001b608:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b60f:	90                   	nop
c001b610:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b615:	83 e0 01             	and    eax,0x1
c001b618:	74 12                	je     c001b62c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001b61a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b621:	83 c8 01             	or     eax,0x1
c001b624:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b62b:	90                   	nop
c001b62c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b631:	83 e0 02             	and    eax,0x2
c001b634:	74 12                	je     c001b648 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001b636:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b63d:	83 c8 20             	or     eax,0x20
c001b640:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b647:	90                   	nop
c001b648:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b64d:	83 e0 04             	and    eax,0x4
c001b650:	74 12                	je     c001b664 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001b652:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b659:	83 c8 04             	or     eax,0x4
c001b65c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b663:	90                   	nop
c001b664:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b669:	83 e0 08             	and    eax,0x8
c001b66c:	74 12                	je     c001b680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001b66e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b675:	83 c8 02             	or     eax,0x2
c001b678:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b67f:	90                   	nop
c001b680:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001b687:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b68e:	09 d0                	or     eax,edx
c001b690:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b697:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b69f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b6a7:	83 ec 04             	sub    esp,0x4
c001b6aa:	52                   	push   edx
c001b6ab:	50                   	push   eax
c001b6ac:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b6b0:	50                   	push   eax
c001b6b1:	e8 be 99 fe ff       	call   c0005074 <f_chmod>
c001b6b6:	83 c4 10             	add    esp,0x10
c001b6b9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b6c0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b6c7:	85 c0                	test   eax,eax
c001b6c9:	75 09                	jne    c001b6d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001b6cb:	b8 00 00 00 00       	mov    eax,0x0
c001b6d0:	eb 0a                	jmp    c001b6dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001b6d2:	66 90                	xchg   ax,ax
c001b6d4:	b8 01 00 00 00       	mov    eax,0x1
c001b6d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6e2:	c3                   	ret    
c001b6e3:	90                   	nop

c001b6e4 <FAT::rename(char const*, char const*)>:
c001b6e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6f2:	74 0c                	je     c001b700 <FAT::rename(char const*, char const*)+0x1c>
c001b6f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6fc:	75 0e                	jne    c001b70c <FAT::rename(char const*, char const*)+0x28>
c001b6fe:	66 90                	xchg   ax,ax
c001b700:	b8 04 00 00 00       	mov    eax,0x4
c001b705:	e9 9e 00 00 00       	jmp    c001b7a8 <FAT::rename(char const*, char const*)+0xc4>
c001b70a:	66 90                	xchg   ax,ax
c001b70c:	83 ec 08             	sub    esp,0x8
c001b70f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b716:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b71d:	50                   	push   eax
c001b71e:	e8 2d 4f fe ff       	call   c0000650 <strcpy>
c001b723:	83 c4 10             	add    esp,0x10
c001b726:	83 ec 08             	sub    esp,0x8
c001b729:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b730:	50                   	push   eax
c001b731:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b738:	e8 13 fa ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b73d:	83 c4 10             	add    esp,0x10
c001b740:	83 ec 08             	sub    esp,0x8
c001b743:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b74a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b74e:	50                   	push   eax
c001b74f:	e8 fc 4e fe ff       	call   c0000650 <strcpy>
c001b754:	83 c4 10             	add    esp,0x10
c001b757:	83 ec 08             	sub    esp,0x8
c001b75a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b75e:	50                   	push   eax
c001b75f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b766:	e8 e5 f9 ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	83 ec 08             	sub    esp,0x8
c001b771:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b775:	50                   	push   eax
c001b776:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b77d:	50                   	push   eax
c001b77e:	e8 39 97 fe ff       	call   c0004ebc <f_rename>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b78d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b794:	85 c0                	test   eax,eax
c001b796:	75 08                	jne    c001b7a0 <FAT::rename(char const*, char const*)+0xbc>
c001b798:	b8 00 00 00 00       	mov    eax,0x0
c001b79d:	eb 09                	jmp    c001b7a8 <FAT::rename(char const*, char const*)+0xc4>
c001b79f:	90                   	nop
c001b7a0:	b8 01 00 00 00       	mov    eax,0x1
c001b7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b7ae:	c3                   	ret    
c001b7af:	90                   	nop

c001b7b0 <FAT::mkdir(char const*)>:
c001b7b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b7be:	75 08                	jne    c001b7c8 <FAT::mkdir(char const*)+0x18>
c001b7c0:	b8 04 00 00 00       	mov    eax,0x4
c001b7c5:	eb 61                	jmp    c001b828 <FAT::mkdir(char const*)+0x78>
c001b7c7:	90                   	nop
c001b7c8:	83 ec 08             	sub    esp,0x8
c001b7cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7d6:	50                   	push   eax
c001b7d7:	e8 74 4e fe ff       	call   c0000650 <strcpy>
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	83 ec 08             	sub    esp,0x8
c001b7e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7e6:	50                   	push   eax
c001b7e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ee:	e8 5d f9 ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b7f3:	83 c4 10             	add    esp,0x10
c001b7f6:	83 ec 0c             	sub    esp,0xc
c001b7f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7fd:	50                   	push   eax
c001b7fe:	e8 1e 95 fe ff       	call   c0004d21 <f_mkdir>
c001b803:	83 c4 10             	add    esp,0x10
c001b806:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b80d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b814:	85 c0                	test   eax,eax
c001b816:	75 08                	jne    c001b820 <FAT::mkdir(char const*)+0x70>
c001b818:	b8 00 00 00 00       	mov    eax,0x0
c001b81d:	eb 09                	jmp    c001b828 <FAT::mkdir(char const*)+0x78>
c001b81f:	90                   	nop
c001b820:	b8 01 00 00 00       	mov    eax,0x1
c001b825:	8d 76 00             	lea    esi,[esi+0x0]
c001b828:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b82e:	c3                   	ret    
c001b82f:	90                   	nop

c001b830 <FAT::exists(char const*)>:
c001b830:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b836:	83 ec 08             	sub    esp,0x8
c001b839:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b840:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b844:	50                   	push   eax
c001b845:	e8 06 4e fe ff       	call   c0000650 <strcpy>
c001b84a:	83 c4 10             	add    esp,0x10
c001b84d:	83 ec 08             	sub    esp,0x8
c001b850:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b854:	50                   	push   eax
c001b855:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b85c:	e8 ef f8 ff ff       	call   c001b150 <FAT::fixFilepath(char*)>
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	83 ec 08             	sub    esp,0x8
c001b867:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001b86e:	50                   	push   eax
c001b86f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b873:	50                   	push   eax
c001b874:	e8 16 91 fe ff       	call   c000498f <f_stat>
c001b879:	83 c4 10             	add    esp,0x10
c001b87c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b883:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b88a:	85 c0                	test   eax,eax
c001b88c:	75 06                	jne    c001b894 <FAT::exists(char const*)+0x64>
c001b88e:	b0 01                	mov    al,0x1
c001b890:	eb 06                	jmp    c001b898 <FAT::exists(char const*)+0x68>
c001b892:	66 90                	xchg   ax,ax
c001b894:	b0 00                	mov    al,0x0
c001b896:	66 90                	xchg   ax,ax
c001b898:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b89e:	c3                   	ret    
c001b89f:	90                   	nop

c001b8a0 <isoReadDiscSectorHelper>:
c001b8a0:	83 ec 2c             	sub    esp,0x2c
c001b8a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b8ab:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b8b0:	83 e8 41             	sub    eax,0x41
c001b8b3:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001b8ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b8be:	ba 00 00 00 00       	mov    edx,0x0
c001b8c3:	83 ec 0c             	sub    esp,0xc
c001b8c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b8ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8ce:	52                   	push   edx
c001b8cf:	50                   	push   eax
c001b8d0:	51                   	push   ecx
c001b8d1:	e8 12 e8 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b8d6:	83 c4 20             	add    esp,0x20
c001b8d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8dd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b8e2:	74 0c                	je     c001b8f0 <isoReadDiscSectorHelper+0x50>
c001b8e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8e8:	c1 e0 0b             	shl    eax,0xb
c001b8eb:	eb 0b                	jmp    c001b8f8 <isoReadDiscSectorHelper+0x58>
c001b8ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b8f0:	b8 00 00 00 00       	mov    eax,0x0
c001b8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8f8:	83 c4 2c             	add    esp,0x2c
c001b8fb:	c3                   	ret    

c001b8fc <iso_kprintf>:
c001b8fc:	83 ec 0c             	sub    esp,0xc
c001b8ff:	83 ec 08             	sub    esp,0x8
c001b902:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b906:	68 81 43 02 c0       	push   0xc0024381
c001b90b:	e8 3e b6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b910:	83 c4 10             	add    esp,0x10
c001b913:	90                   	nop
c001b914:	83 c4 0c             	add    esp,0xc
c001b917:	c3                   	ret    

c001b918 <iso_kprintfd>:
c001b918:	83 ec 0c             	sub    esp,0xc
c001b91b:	83 ec 08             	sub    esp,0x8
c001b91e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b922:	68 e9 24 02 c0       	push   0xc00224e9
c001b927:	e8 22 b6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b92c:	83 c4 10             	add    esp,0x10
c001b92f:	90                   	nop
c001b930:	83 c4 0c             	add    esp,0xc
c001b933:	c3                   	ret    

c001b934 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b934:	b8 08 00 00 00       	mov    eax,0x8
c001b939:	c3                   	ret    

c001b93a <ISO9660::truncate(void*, unsigned long long)>:
c001b93a:	b8 01 00 00 00       	mov    eax,0x1
c001b93f:	c3                   	ret    

c001b940 <ISO9660::getName()>:
c001b940:	b8 40 47 02 c0       	mov    eax,0xc0024740
c001b945:	c3                   	ret    

c001b946 <ISO9660::closeDir(void*)>:
c001b946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b94a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b94c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001b94f:	90                   	nop

c001b950 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b950:	b8 01 00 00 00       	mov    eax,0x1
c001b955:	c3                   	ret    

c001b956 <ISO9660::unlink(char const*)>:
c001b956:	b8 01 00 00 00       	mov    eax,0x1
c001b95b:	c3                   	ret    

c001b95c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b95c:	b8 03 00 00 00       	mov    eax,0x3
c001b961:	c3                   	ret    

c001b962 <ISO9660::rename(char const*, char const*)>:
c001b962:	b8 01 00 00 00       	mov    eax,0x1
c001b967:	c3                   	ret    

c001b968 <ISO9660::mkdir(char const*)>:
c001b968:	b8 01 00 00 00       	mov    eax,0x1
c001b96d:	c3                   	ret    

c001b96e <ISO9660::~ISO9660()>:
c001b96e:	83 ec 0c             	sub    esp,0xc
c001b971:	ba 80 48 02 c0       	mov    edx,0xc0024880
c001b976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97a:	89 10                	mov    DWORD PTR [eax],edx
c001b97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	50                   	push   eax
c001b984:	e8 f1 c3 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001b989:	83 c4 10             	add    esp,0x10
c001b98c:	90                   	nop
c001b98d:	83 c4 0c             	add    esp,0xc
c001b990:	c3                   	ret    
c001b991:	90                   	nop

c001b992 <ISO9660::~ISO9660()>:
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	83 ec 0c             	sub    esp,0xc
c001b998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b99c:	e8 cd ff ff ff       	call   c001b96e <ISO9660::~ISO9660()>
c001b9a1:	83 c4 10             	add    esp,0x10
c001b9a4:	83 ec 08             	sub    esp,0x8
c001b9a7:	6a 08                	push   0x8
c001b9a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ad:	e8 41 0f ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c001b9b2:	83 c4 10             	add    esp,0x10
c001b9b5:	83 c4 0c             	add    esp,0xc
c001b9b8:	c3                   	ret    
c001b9b9:	90                   	nop

c001b9ba <ISO9660::exists(char const*)>:
c001b9ba:	83 ec 18             	sub    esp,0x18
c001b9bd:	68 5b 47 02 c0       	push   0xc002475b
c001b9c2:	e8 fb 3a ff ff       	call   c000f4c2 <KePanic(char const*)>
c001b9c7:	31 c0                	xor    eax,eax
c001b9c9:	83 c4 1c             	add    esp,0x1c
c001b9cc:	c3                   	ret    
c001b9cd:	90                   	nop

c001b9ce <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b9ce:	56                   	push   esi
c001b9cf:	53                   	push   ebx
c001b9d0:	53                   	push   ebx
c001b9d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b9d9:	85 db                	test   ebx,ebx
c001b9db:	0f 84 ca 00 00 00    	je     c001baab <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b9e1:	85 f6                	test   esi,esi
c001b9e3:	0f 84 c2 00 00 00    	je     c001baab <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b9e9:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001b9ee:	b8 03 00 00 00       	mov    eax,0x3
c001b9f3:	0f 85 b7 00 00 00    	jne    c001bab0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b9f9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b9fb:	38 0d c0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8c0,cl
c001ba01:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001ba08:	74 1b                	je     c001ba25 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba0a:	85 c0                	test   eax,eax
c001ba0c:	74 10                	je     c001ba1e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	68 79 47 02 c0       	push   0xc0024779
c001ba16:	e8 a7 3a ff ff       	call   c000f4c2 <KePanic(char const*)>
c001ba1b:	83 c4 10             	add    esp,0x10
c001ba1e:	8a 03                	mov    al,BYTE PTR [ebx]
c001ba20:	a2 c0 d8 02 c0       	mov    ds:0xc002d8c0,al
c001ba25:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ba28:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001ba2f:	85 c0                	test   eax,eax
c001ba31:	74 09                	je     c001ba3c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ba33:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ba3a:	74 48                	je     c001ba84 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ba3c:	83 ec 0c             	sub    esp,0xc
c001ba3f:	68 89 47 02 c0       	push   0xc0024789
c001ba44:	e8 05 b5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ba49:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ba4c:	83 c4 10             	add    esp,0x10
c001ba4f:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001ba56:	85 c0                	test   eax,eax
c001ba58:	74 17                	je     c001ba71 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ba5a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ba61:	83 ec 0c             	sub    esp,0xc
c001ba64:	68 a9 47 02 c0       	push   0xc00247a9
c001ba69:	e8 e0 b4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ba6e:	83 c4 10             	add    esp,0x10
c001ba71:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	50                   	push   eax
c001ba7c:	e8 c6 b1 fe ff       	call   c0006c47 <init_percd>
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	51                   	push   ecx
c001ba85:	83 c3 03             	add    ebx,0x3
c001ba88:	51                   	push   ecx
c001ba89:	6a 00                	push   0x0
c001ba8b:	53                   	push   ebx
c001ba8c:	e8 79 ac fe ff       	call   c000670a <iso_open>
c001ba91:	83 c4 10             	add    esp,0x10
c001ba94:	89 c2                	mov    edx,eax
c001ba96:	b8 01 00 00 00       	mov    eax,0x1
c001ba9b:	83 fa ff             	cmp    edx,0xffffffff
c001ba9e:	74 10                	je     c001bab0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001baa0:	83 c2 32             	add    edx,0x32
c001baa3:	31 c0                	xor    eax,eax
c001baa5:	01 d2                	add    edx,edx
c001baa7:	89 16                	mov    DWORD PTR [esi],edx
c001baa9:	eb 05                	jmp    c001bab0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001baab:	b8 04 00 00 00       	mov    eax,0x4
c001bab0:	5a                   	pop    edx
c001bab1:	5b                   	pop    ebx
c001bab2:	5e                   	pop    esi
c001bab3:	c3                   	ret    

c001bab4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bab4:	53                   	push   ebx
c001bab5:	83 ec 08             	sub    esp,0x8
c001bab8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001babc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bac0:	85 c0                	test   eax,eax
c001bac2:	74 2d                	je     c001baf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001bac4:	85 db                	test   ebx,ebx
c001bac6:	74 29                	je     c001baf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001bac8:	52                   	push   edx
c001bac9:	b9 02 00 00 00       	mov    ecx,0x2
c001bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bad2:	99                   	cdq    
c001bad3:	f7 f9                	idiv   ecx
c001bad5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bad9:	83 e8 32             	sub    eax,0x32
c001badc:	50                   	push   eax
c001badd:	e8 d0 ac fe ff       	call   c00067b2 <iso_read>
c001bae2:	83 c4 10             	add    esp,0x10
c001bae5:	89 03                	mov    DWORD PTR [ebx],eax
c001bae7:	09 d0                	or     eax,edx
c001bae9:	0f 94 c0             	sete   al
c001baec:	0f b6 c0             	movzx  eax,al
c001baef:	eb 05                	jmp    c001baf6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001baf1:	b8 04 00 00 00       	mov    eax,0x4
c001baf6:	83 c4 08             	add    esp,0x8
c001baf9:	5b                   	pop    ebx
c001bafa:	c3                   	ret    
c001bafb:	90                   	nop

c001bafc <ISO9660::seek(void*, unsigned long long)>:
c001bafc:	57                   	push   edi
c001bafd:	b8 04 00 00 00       	mov    eax,0x4
c001bb02:	56                   	push   esi
c001bb03:	51                   	push   ecx
c001bb04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bb0c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bb10:	85 d2                	test   edx,edx
c001bb12:	74 26                	je     c001bb3a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001bb14:	89 d0                	mov    eax,edx
c001bb16:	b9 02 00 00 00       	mov    ecx,0x2
c001bb1b:	6a 00                	push   0x0
c001bb1d:	99                   	cdq    
c001bb1e:	f7 f9                	idiv   ecx
c001bb20:	57                   	push   edi
c001bb21:	56                   	push   esi
c001bb22:	83 e8 32             	sub    eax,0x32
c001bb25:	50                   	push   eax
c001bb26:	e8 9d ad fe ff       	call   c00068c8 <iso_seek>
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	31 f0                	xor    eax,esi
c001bb30:	31 fa                	xor    edx,edi
c001bb32:	09 d0                	or     eax,edx
c001bb34:	0f 95 c0             	setne  al
c001bb37:	0f b6 c0             	movzx  eax,al
c001bb3a:	5a                   	pop    edx
c001bb3b:	5e                   	pop    esi
c001bb3c:	5f                   	pop    edi
c001bb3d:	c3                   	ret    

c001bb3e <ISO9660::tell(void*, unsigned long long*)>:
c001bb3e:	53                   	push   ebx
c001bb3f:	83 ec 08             	sub    esp,0x8
c001bb42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb46:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bb4a:	85 c0                	test   eax,eax
c001bb4c:	74 24                	je     c001bb72 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001bb4e:	85 db                	test   ebx,ebx
c001bb50:	74 20                	je     c001bb72 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001bb52:	b9 02 00 00 00       	mov    ecx,0x2
c001bb57:	99                   	cdq    
c001bb58:	f7 f9                	idiv   ecx
c001bb5a:	83 ec 0c             	sub    esp,0xc
c001bb5d:	83 e8 32             	sub    eax,0x32
c001bb60:	50                   	push   eax
c001bb61:	e8 e6 ad fe ff       	call   c000694c <iso_tell>
c001bb66:	83 c4 10             	add    esp,0x10
c001bb69:	89 03                	mov    DWORD PTR [ebx],eax
c001bb6b:	31 c0                	xor    eax,eax
c001bb6d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001bb70:	eb 05                	jmp    c001bb77 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001bb72:	b8 04 00 00 00       	mov    eax,0x4
c001bb77:	83 c4 08             	add    esp,0x8
c001bb7a:	5b                   	pop    ebx
c001bb7b:	c3                   	ret    

c001bb7c <ISO9660::stat(void*, unsigned long long*)>:
c001bb7c:	56                   	push   esi
c001bb7d:	53                   	push   ebx
c001bb7e:	83 ec 10             	sub    esp,0x10
c001bb81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb89:	68 cd 47 02 c0       	push   0xc00247cd
c001bb8e:	e8 bb b3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bb93:	83 c4 10             	add    esp,0x10
c001bb96:	85 db                	test   ebx,ebx
c001bb98:	74 2a                	je     c001bbc4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001bb9a:	85 f6                	test   esi,esi
c001bb9c:	74 26                	je     c001bbc4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001bb9e:	89 d8                	mov    eax,ebx
c001bba0:	b9 02 00 00 00       	mov    ecx,0x2
c001bba5:	99                   	cdq    
c001bba6:	83 ec 0c             	sub    esp,0xc
c001bba9:	f7 f9                	idiv   ecx
c001bbab:	83 e8 32             	sub    eax,0x32
c001bbae:	50                   	push   eax
c001bbaf:	e8 c9 ad fe ff       	call   c000697d <iso_total>
c001bbb4:	83 c4 10             	add    esp,0x10
c001bbb7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001bbbe:	89 06                	mov    DWORD PTR [esi],eax
c001bbc0:	31 c0                	xor    eax,eax
c001bbc2:	eb 05                	jmp    c001bbc9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001bbc4:	b8 04 00 00 00       	mov    eax,0x4
c001bbc9:	5a                   	pop    edx
c001bbca:	5b                   	pop    ebx
c001bbcb:	5e                   	pop    esi
c001bbcc:	c3                   	ret    
c001bbcd:	90                   	nop

c001bbce <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bbce:	55                   	push   ebp
c001bbcf:	57                   	push   edi
c001bbd0:	56                   	push   esi
c001bbd1:	53                   	push   ebx
c001bbd2:	83 ec 18             	sub    esp,0x18
c001bbd5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bbd9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001bbdd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bbe1:	68 d5 47 02 c0       	push   0xc00247d5
c001bbe6:	e8 63 b3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bbeb:	83 c4 10             	add    esp,0x10
c001bbee:	85 ff                	test   edi,edi
c001bbf0:	0f 94 c0             	sete   al
c001bbf3:	85 f6                	test   esi,esi
c001bbf5:	0f 94 c2             	sete   dl
c001bbf8:	09 d0                	or     eax,edx
c001bbfa:	a8 01                	test   al,0x1
c001bbfc:	0f 85 dd 00 00 00    	jne    c001bcdf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001bc02:	85 db                	test   ebx,ebx
c001bc04:	0f 84 d5 00 00 00    	je     c001bcdf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001bc0a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bc0d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001bc13:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001bc1a:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bc21:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001bc23:	38 0d c0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8c0,cl
c001bc29:	74 1b                	je     c001bc46 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001bc2b:	85 c0                	test   eax,eax
c001bc2d:	74 10                	je     c001bc3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001bc2f:	83 ec 0c             	sub    esp,0xc
c001bc32:	68 79 47 02 c0       	push   0xc0024779
c001bc37:	e8 86 38 ff ff       	call   c000f4c2 <KePanic(char const*)>
c001bc3c:	83 c4 10             	add    esp,0x10
c001bc3f:	8a 03                	mov    al,BYTE PTR [ebx]
c001bc41:	a2 c0 d8 02 c0       	mov    ds:0xc002d8c0,al
c001bc46:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bc49:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bc50:	85 c0                	test   eax,eax
c001bc52:	74 09                	je     c001bc5d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001bc54:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bc5b:	74 51                	je     c001bcae <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001bc5d:	83 ec 0c             	sub    esp,0xc
c001bc60:	68 dd 47 02 c0       	push   0xc00247dd
c001bc65:	e8 e4 b2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bc6a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001bc78:	74 21                	je     c001bc9b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001bc7a:	83 ec 0c             	sub    esp,0xc
c001bc7d:	68 fd 47 02 c0       	push   0xc00247fd
c001bc82:	e8 c7 b2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bc87:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bc8a:	83 c4 10             	add    esp,0x10
c001bc8d:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bc94:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bc9b:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bca2:	83 ec 0c             	sub    esp,0xc
c001bca5:	50                   	push   eax
c001bca6:	e8 9c af fe ff       	call   c0006c47 <init_percd>
c001bcab:	83 c4 10             	add    esp,0x10
c001bcae:	52                   	push   edx
c001bcaf:	83 c3 03             	add    ebx,0x3
c001bcb2:	52                   	push   edx
c001bcb3:	6a 00                	push   0x0
c001bcb5:	53                   	push   ebx
c001bcb6:	e8 4f aa fe ff       	call   c000670a <iso_open>
c001bcbb:	83 c4 10             	add    esp,0x10
c001bcbe:	83 f8 ff             	cmp    eax,0xffffffff
c001bcc1:	89 c5                	mov    ebp,eax
c001bcc3:	75 21                	jne    c001bce6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001bcc5:	50                   	push   eax
c001bcc6:	50                   	push   eax
c001bcc7:	6a 01                	push   0x1
c001bcc9:	53                   	push   ebx
c001bcca:	e8 3b aa fe ff       	call   c000670a <iso_open>
c001bccf:	83 c4 10             	add    esp,0x10
c001bcd2:	ba 02 00 00 00       	mov    edx,0x2
c001bcd7:	40                   	inc    eax
c001bcd8:	74 2b                	je     c001bd05 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001bcda:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001bcdd:	eb 24                	jmp    c001bd03 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001bcdf:	ba 04 00 00 00       	mov    edx,0x4
c001bce4:	eb 1f                	jmp    c001bd05 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001bce6:	83 ec 0c             	sub    esp,0xc
c001bce9:	50                   	push   eax
c001bcea:	e8 8e ac fe ff       	call   c000697d <iso_total>
c001bcef:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001bcf6:	89 07                	mov    DWORD PTR [edi],eax
c001bcf8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bcfb:	e8 94 aa fe ff       	call   c0006794 <iso_close>
c001bd00:	83 c4 10             	add    esp,0x10
c001bd03:	31 d2                	xor    edx,edx
c001bd05:	83 c4 0c             	add    esp,0xc
c001bd08:	89 d0                	mov    eax,edx
c001bd0a:	5b                   	pop    ebx
c001bd0b:	5e                   	pop    esi
c001bd0c:	5f                   	pop    edi
c001bd0d:	5d                   	pop    ebp
c001bd0e:	c3                   	ret    
c001bd0f:	90                   	nop

c001bd10 <ISO9660::close(void*)>:
c001bd10:	83 ec 0c             	sub    esp,0xc
c001bd13:	b8 04 00 00 00       	mov    eax,0x4
c001bd18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd1c:	85 d2                	test   edx,edx
c001bd1e:	74 1b                	je     c001bd3b <ISO9660::close(void*)+0x2b>
c001bd20:	89 d0                	mov    eax,edx
c001bd22:	b9 02 00 00 00       	mov    ecx,0x2
c001bd27:	99                   	cdq    
c001bd28:	83 ec 0c             	sub    esp,0xc
c001bd2b:	f7 f9                	idiv   ecx
c001bd2d:	83 e8 32             	sub    eax,0x32
c001bd30:	50                   	push   eax
c001bd31:	e8 5e aa fe ff       	call   c0006794 <iso_close>
c001bd36:	83 c4 10             	add    esp,0x10
c001bd39:	31 c0                	xor    eax,eax
c001bd3b:	83 c4 0c             	add    esp,0xc
c001bd3e:	c3                   	ret    
c001bd3f:	90                   	nop

c001bd40 <ISO9660::openDir(char const*, void**)>:
c001bd40:	56                   	push   esi
c001bd41:	53                   	push   ebx
c001bd42:	50                   	push   eax
c001bd43:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd47:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bd4b:	85 db                	test   ebx,ebx
c001bd4d:	0f 84 bd 00 00 00    	je     c001be10 <ISO9660::openDir(char const*, void**)+0xd0>
c001bd53:	85 f6                	test   esi,esi
c001bd55:	0f 84 b5 00 00 00    	je     c001be10 <ISO9660::openDir(char const*, void**)+0xd0>
c001bd5b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001bd5d:	38 15 c0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8c0,dl
c001bd63:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bd6a:	74 1b                	je     c001bd87 <ISO9660::openDir(char const*, void**)+0x47>
c001bd6c:	85 c0                	test   eax,eax
c001bd6e:	74 10                	je     c001bd80 <ISO9660::openDir(char const*, void**)+0x40>
c001bd70:	83 ec 0c             	sub    esp,0xc
c001bd73:	68 79 47 02 c0       	push   0xc0024779
c001bd78:	e8 45 37 ff ff       	call   c000f4c2 <KePanic(char const*)>
c001bd7d:	83 c4 10             	add    esp,0x10
c001bd80:	8a 03                	mov    al,BYTE PTR [ebx]
c001bd82:	a2 c0 d8 02 c0       	mov    ds:0xc002d8c0,al
c001bd87:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bd8a:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bd91:	85 c0                	test   eax,eax
c001bd93:	74 10                	je     c001bda5 <ISO9660::openDir(char const*, void**)+0x65>
c001bd95:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bd9c:	74 1a                	je     c001bdb8 <ISO9660::openDir(char const*, void**)+0x78>
c001bd9e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bda5:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bdac:	83 ec 0c             	sub    esp,0xc
c001bdaf:	50                   	push   eax
c001bdb0:	e8 92 ae fe ff       	call   c0006c47 <init_percd>
c001bdb5:	83 c4 10             	add    esp,0x10
c001bdb8:	50                   	push   eax
c001bdb9:	83 c3 03             	add    ebx,0x3
c001bdbc:	50                   	push   eax
c001bdbd:	6a 01                	push   0x1
c001bdbf:	53                   	push   ebx
c001bdc0:	e8 45 a9 fe ff       	call   c000670a <iso_open>
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	83 f8 ff             	cmp    eax,0xffffffff
c001bdcb:	89 c3                	mov    ebx,eax
c001bdcd:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001bdd2:	75 1c                	jne    c001bdf0 <ISO9660::openDir(char const*, void**)+0xb0>
c001bdd4:	53                   	push   ebx
c001bdd5:	53                   	push   ebx
c001bdd6:	68 21 48 02 c0       	push   0xc0024821
c001bddb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001bde1:	e8 9e 5e ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001bde6:	83 c4 10             	add    esp,0x10
c001bde9:	b8 01 00 00 00       	mov    eax,0x1
c001bdee:	eb 25                	jmp    c001be15 <ISO9660::openDir(char const*, void**)+0xd5>
c001bdf0:	51                   	push   ecx
c001bdf1:	01 db                	add    ebx,ebx
c001bdf3:	51                   	push   ecx
c001bdf4:	83 c3 65             	add    ebx,0x65
c001bdf7:	68 34 48 02 c0       	push   0xc0024834
c001bdfc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001be02:	e8 7d 5e ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001be07:	83 c4 10             	add    esp,0x10
c001be0a:	31 c0                	xor    eax,eax
c001be0c:	89 1e                	mov    DWORD PTR [esi],ebx
c001be0e:	eb 05                	jmp    c001be15 <ISO9660::openDir(char const*, void**)+0xd5>
c001be10:	b8 04 00 00 00       	mov    eax,0x4
c001be15:	5a                   	pop    edx
c001be16:	5b                   	pop    ebx
c001be17:	5e                   	pop    esi
c001be18:	c3                   	ret    
c001be19:	90                   	nop

c001be1a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001be1a:	55                   	push   ebp
c001be1b:	57                   	push   edi
c001be1c:	56                   	push   esi
c001be1d:	53                   	push   ebx
c001be1e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be24:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001be2b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001be32:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001be39:	85 db                	test   ebx,ebx
c001be3b:	0f 84 e4 00 00 00    	je     c001bf25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001be41:	85 ed                	test   ebp,ebp
c001be43:	0f 84 dc 00 00 00    	je     c001bf25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001be49:	83 ec 0c             	sub    esp,0xc
c001be4c:	68 47 48 02 c0       	push   0xc0024847
c001be51:	e8 f8 b0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001be56:	89 d8                	mov    eax,ebx
c001be58:	b9 02 00 00 00       	mov    ecx,0x2
c001be5d:	99                   	cdq    
c001be5e:	f7 f9                	idiv   ecx
c001be60:	83 e8 32             	sub    eax,0x32
c001be63:	89 04 24             	mov    DWORD PTR [esp],eax
c001be66:	e8 64 ab fe ff       	call   c00069cf <iso_readdir>
c001be6b:	83 c4 10             	add    esp,0x10
c001be6e:	85 c0                	test   eax,eax
c001be70:	89 c3                	mov    ebx,eax
c001be72:	75 38                	jne    c001beac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001be74:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001be79:	53                   	push   ebx
c001be7a:	53                   	push   ebx
c001be7b:	68 52 48 02 c0       	push   0xc0024852
c001be80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001be86:	e8 f9 5d ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001be8b:	83 c4 0c             	add    esp,0xc
c001be8e:	68 10 01 00 00       	push   0x110
c001be93:	6a 00                	push   0x0
c001be95:	57                   	push   edi
c001be96:	e8 55 46 fe ff       	call   c00004f0 <memset>
c001be9b:	83 c4 10             	add    esp,0x10
c001be9e:	b8 01 00 00 00       	mov    eax,0x1
c001bea3:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001beaa:	eb 7e                	jmp    c001bf2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001beac:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001beb2:	8d 70 08             	lea    esi,[eax+0x8]
c001beb5:	83 ec 0c             	sub    esp,0xc
c001beb8:	56                   	push   esi
c001beb9:	e8 c2 46 fe ff       	call   c0000580 <strlen>
c001bebe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001bec6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001beca:	83 c4 10             	add    esp,0x10
c001becd:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001bed1:	75 0a                	jne    c001bedd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001bed3:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001bed6:	b8 02 00 00 00       	mov    eax,0x2
c001bedb:	74 05                	je     c001bee2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001bedd:	b8 01 00 00 00       	mov    eax,0x1
c001bee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bee6:	50                   	push   eax
c001bee7:	50                   	push   eax
c001bee8:	56                   	push   esi
c001bee9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001beed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bef1:	50                   	push   eax
c001bef2:	e8 59 47 fe ff       	call   c0000650 <strcpy>
c001bef7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001befe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf00:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001bf07:	5a                   	pop    edx
c001bf08:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001bf0d:	59                   	pop    ecx
c001bf0e:	68 65 48 02 c0       	push   0xc0024865
c001bf13:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001bf19:	e8 66 5d ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001bf1e:	83 c4 10             	add    esp,0x10
c001bf21:	31 c0                	xor    eax,eax
c001bf23:	eb 05                	jmp    c001bf2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001bf25:	b8 04 00 00 00       	mov    eax,0x4
c001bf2a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bf30:	5b                   	pop    ebx
c001bf31:	5e                   	pop    esi
c001bf32:	5f                   	pop    edi
c001bf33:	5d                   	pop    ebp
c001bf34:	c3                   	ret    

c001bf35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001bf35:	57                   	push   edi
c001bf36:	56                   	push   esi
c001bf37:	53                   	push   ebx
c001bf38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf3c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bf40:	39 35 c4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8c4,esi
c001bf46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bf4a:	0f be cb             	movsx  ecx,bl
c001bf4d:	75 0b                	jne    c001bf5a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001bf4f:	0f be 05 04 5b 02 c0 	movsx  eax,BYTE PTR ds:0xc0025b04
c001bf56:	39 c8                	cmp    eax,ecx
c001bf58:	74 47                	je     c001bfa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001bf5a:	83 ec 0c             	sub    esp,0xc
c001bf5d:	31 d2                	xor    edx,edx
c001bf5f:	68 e0 d8 02 c0       	push   0xc002d8e0
c001bf64:	6a 01                	push   0x1
c001bf66:	52                   	push   edx
c001bf67:	56                   	push   esi
c001bf68:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001bf6f:	e8 74 e1 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001bf74:	83 c4 20             	add    esp,0x20
c001bf77:	85 c0                	test   eax,eax
c001bf79:	75 0e                	jne    c001bf89 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001bf7b:	89 35 c4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c4,esi
c001bf81:	88 1d 04 5b 02 c0    	mov    BYTE PTR ds:0xc0025b04,bl
c001bf87:	eb 18                	jmp    c001bfa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001bf89:	50                   	push   eax
c001bf8a:	68 00 08 00 00       	push   0x800
c001bf8f:	6a 00                	push   0x0
c001bf91:	57                   	push   edi
c001bf92:	e8 59 45 fe ff       	call   c00004f0 <memset>
c001bf97:	83 c4 10             	add    esp,0x10
c001bf9a:	b8 01 00 00 00       	mov    eax,0x1
c001bf9f:	eb 0e                	jmp    c001bfaf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001bfa1:	be e0 d8 02 c0       	mov    esi,0xc002d8e0
c001bfa6:	b9 00 08 00 00       	mov    ecx,0x800
c001bfab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfad:	31 c0                	xor    eax,eax
c001bfaf:	5b                   	pop    ebx
c001bfb0:	5e                   	pop    esi
c001bfb1:	5f                   	pop    edi
c001bfb2:	c3                   	ret    
c001bfb3:	90                   	nop

c001bfb4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001bfb4:	53                   	push   ebx
c001bfb5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001bfbb:	c7 05 c4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8c4,0xdeadbeef
c001bfc5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001bfcc:	8d 58 41             	lea    ebx,[eax+0x41]
c001bfcf:	0f be db             	movsx  ebx,bl
c001bfd2:	53                   	push   ebx
c001bfd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfd7:	50                   	push   eax
c001bfd8:	6a 10                	push   0x10
c001bfda:	e8 56 ff ff ff       	call   c001bf35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	31 d2                	xor    edx,edx
c001bfe4:	85 c0                	test   eax,eax
c001bfe6:	75 33                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001bfe8:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bfed:	75 2c                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001bfef:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bff4:	75 25                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001bff6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001bffb:	75 1e                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001bffd:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c002:	75 17                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c004:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c009:	75 10                	jne    c001c01b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c00b:	83 ec 0c             	sub    esp,0xc
c001c00e:	53                   	push   ebx
c001c00f:	e8 33 ac fe ff       	call   c0006c47 <init_percd>
c001c014:	83 c4 10             	add    esp,0x10
c001c017:	40                   	inc    eax
c001c018:	0f 95 c2             	setne  dl
c001c01b:	81 c4 08 08 00 00    	add    esp,0x808
c001c021:	88 d0                	mov    al,dl
c001c023:	5b                   	pop    ebx
c001c024:	c3                   	ret    
c001c025:	90                   	nop

c001c026 <ISO9660::ISO9660()>:
c001c026:	83 ec 0c             	sub    esp,0xc
c001c029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02d:	83 ec 0c             	sub    esp,0xc
c001c030:	50                   	push   eax
c001c031:	e8 20 bd fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001c036:	83 c4 10             	add    esp,0x10
c001c039:	ba 80 48 02 c0       	mov    edx,0xc0024880
c001c03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c042:	89 10                	mov    DWORD PTR [eax],edx
c001c044:	e8 10 ad fe ff       	call   c0006d59 <fs_iso9660_init>
c001c049:	90                   	nop
c001c04a:	83 c4 0c             	add    esp,0xc
c001c04d:	c3                   	ret    

c001c04e <SoundCard::beginPlayback()>:
c001c04e:	c7 44 24 04 e4 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc00248e4
c001c056:	e9 67 34 ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c001c05b:	90                   	nop

c001c05c <SoundCard::stopPlayback()>:
c001c05c:	c7 44 24 04 e4 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc00248e4
c001c064:	e9 59 34 ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c001c069:	90                   	nop

c001c06a <SoundCard::SoundCard(char const*)>:
c001c06a:	83 ec 1c             	sub    esp,0x1c
c001c06d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c071:	83 ec 08             	sub    esp,0x8
c001c074:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c078:	50                   	push   eax
c001c079:	e8 76 d1 fe ff       	call   c00091f4 <Device::Device(char const*)>
c001c07e:	83 c4 10             	add    esp,0x10
c001c081:	ba 30 49 02 c0       	mov    edx,0xc0024930
c001c086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c08a:	89 10                	mov    DWORD PTR [eax],edx
c001c08c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c090:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c09b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c0a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0a9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c0b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0b7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c0c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0c5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c0cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c0d7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c0dc:	7f 1a                	jg     c001c0f8 <SoundCard::SoundCard(char const*)+0x8e>
c001c0de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c0e6:	83 c2 54             	add    edx,0x54
c001c0e9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c0f1:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c0f6:	eb df                	jmp    c001c0d7 <SoundCard::SoundCard(char const*)+0x6d>
c001c0f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0fc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c103:	90                   	nop
c001c104:	83 c4 1c             	add    esp,0x1c
c001c107:	c3                   	ret    

c001c108 <SoundCard::~SoundCard()>:
c001c108:	83 ec 0c             	sub    esp,0xc
c001c10b:	ba 30 49 02 c0       	mov    edx,0xc0024930
c001c110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c114:	89 10                	mov    DWORD PTR [eax],edx
c001c116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11a:	83 ec 0c             	sub    esp,0xc
c001c11d:	50                   	push   eax
c001c11e:	e8 71 ce fe ff       	call   c0008f94 <Device::~Device()>
c001c123:	83 c4 10             	add    esp,0x10
c001c126:	90                   	nop
c001c127:	83 c4 0c             	add    esp,0xc
c001c12a:	c3                   	ret    
c001c12b:	90                   	nop

c001c12c <SoundCard::~SoundCard()>:
c001c12c:	83 ec 0c             	sub    esp,0xc
c001c12f:	83 ec 0c             	sub    esp,0xc
c001c132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c136:	e8 cd ff ff ff       	call   c001c108 <SoundCard::~SoundCard()>
c001c13b:	83 c4 10             	add    esp,0x10
c001c13e:	83 ec 08             	sub    esp,0x8
c001c141:	68 e8 01 00 00       	push   0x1e8
c001c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c14a:	e8 a4 07 ff ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c001c14f:	83 c4 10             	add    esp,0x10
c001c152:	83 c4 0c             	add    esp,0xc
c001c155:	c3                   	ret    

c001c156 <SoundCard::configureRates(int, int, int)>:
c001c156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c15a:	31 c0                	xor    eax,eax
c001c15c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c163:	75 20                	jne    c001c185 <SoundCard::configureRates(int, int, int)+0x2f>
c001c165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c169:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c16f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c173:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c17d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c183:	b0 01                	mov    al,0x1
c001c185:	c3                   	ret    

c001c186 <SoundCard::getSamples16(int, short*)>:
c001c186:	55                   	push   ebp
c001c187:	57                   	push   edi
c001c188:	31 ff                	xor    edi,edi
c001c18a:	56                   	push   esi
c001c18b:	53                   	push   ebx
c001c18c:	31 db                	xor    ebx,ebx
c001c18e:	83 ec 10             	sub    esp,0x10
c001c191:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c195:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c199:	8d 04 36             	lea    eax,[esi+esi*1]
c001c19c:	50                   	push   eax
c001c19d:	6a 00                	push   0x0
c001c19f:	55                   	push   ebp
c001c1a0:	e8 4b 43 fe ff       	call   c00004f0 <memset>
c001c1a5:	83 c4 10             	add    esp,0x10
c001c1a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1ac:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001c1b3:	85 c0                	test   eax,eax
c001c1b5:	74 1a                	je     c001c1d1 <SoundCard::getSamples16(int, short*)+0x4b>
c001c1b7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c1bb:	75 14                	jne    c001c1d1 <SoundCard::getSamples16(int, short*)+0x4b>
c001c1bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1c1:	55                   	push   ebp
c001c1c2:	56                   	push   esi
c001c1c3:	50                   	push   eax
c001c1c4:	e8 8f 03 00 00       	call   c001c558 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c1c9:	83 c4 10             	add    esp,0x10
c001c1cc:	39 c3                	cmp    ebx,eax
c001c1ce:	0f 4c d8             	cmovl  ebx,eax
c001c1d1:	47                   	inc    edi
c001c1d2:	83 ff 20             	cmp    edi,0x20
c001c1d5:	75 d1                	jne    c001c1a8 <SoundCard::getSamples16(int, short*)+0x22>
c001c1d7:	83 c4 0c             	add    esp,0xc
c001c1da:	89 d8                	mov    eax,ebx
c001c1dc:	5b                   	pop    ebx
c001c1dd:	5e                   	pop    esi
c001c1de:	5f                   	pop    edi
c001c1df:	5d                   	pop    ebp
c001c1e0:	c3                   	ret    
c001c1e1:	90                   	nop

c001c1e2 <SoundCard::getSamples32(int, int*)>:
c001c1e2:	55                   	push   ebp
c001c1e3:	57                   	push   edi
c001c1e4:	31 ff                	xor    edi,edi
c001c1e6:	56                   	push   esi
c001c1e7:	31 f6                	xor    esi,esi
c001c1e9:	53                   	push   ebx
c001c1ea:	83 ec 10             	sub    esp,0x10
c001c1ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c1f1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c1f5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c1f9:	c1 e0 02             	shl    eax,0x2
c001c1fc:	50                   	push   eax
c001c1fd:	6a 00                	push   0x0
c001c1ff:	55                   	push   ebp
c001c200:	e8 eb 42 fe ff       	call   c00004f0 <memset>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c20f:	85 c0                	test   eax,eax
c001c211:	74 1a                	je     c001c22d <SoundCard::getSamples32(int, int*)+0x4b>
c001c213:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c217:	75 14                	jne    c001c22d <SoundCard::getSamples32(int, int*)+0x4b>
c001c219:	53                   	push   ebx
c001c21a:	55                   	push   ebp
c001c21b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c21f:	50                   	push   eax
c001c220:	e8 03 04 00 00       	call   c001c628 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c225:	83 c4 10             	add    esp,0x10
c001c228:	39 c6                	cmp    esi,eax
c001c22a:	0f 4c f0             	cmovl  esi,eax
c001c22d:	47                   	inc    edi
c001c22e:	83 ff 20             	cmp    edi,0x20
c001c231:	75 d5                	jne    c001c208 <SoundCard::getSamples32(int, int*)+0x26>
c001c233:	85 f6                	test   esi,esi
c001c235:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001c23c:	75 0f                	jne    c001c24d <SoundCard::getSamples32(int, int*)+0x6b>
c001c23e:	85 c0                	test   eax,eax
c001c240:	74 1b                	je     c001c25d <SoundCard::getSamples32(int, int*)+0x7b>
c001c242:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	53                   	push   ebx
c001c248:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c24b:	eb 0d                	jmp    c001c25a <SoundCard::getSamples32(int, int*)+0x78>
c001c24d:	85 c0                	test   eax,eax
c001c24f:	75 0c                	jne    c001c25d <SoundCard::getSamples32(int, int*)+0x7b>
c001c251:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c253:	83 ec 0c             	sub    esp,0xc
c001c256:	53                   	push   ebx
c001c257:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c25a:	83 c4 10             	add    esp,0x10
c001c25d:	83 c4 0c             	add    esp,0xc
c001c260:	89 f0                	mov    eax,esi
c001c262:	5b                   	pop    ebx
c001c263:	5e                   	pop    esi
c001c264:	5f                   	pop    edi
c001c265:	5d                   	pop    ebp
c001c266:	c3                   	ret    
c001c267:	90                   	nop

c001c268 <SoundCard::addChannel(SoundPort*)>:
c001c268:	83 ec 0c             	sub    esp,0xc
c001c26b:	31 c0                	xor    eax,eax
c001c26d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c271:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001c279:	74 1b                	je     c001c296 <SoundCard::addChannel(SoundPort*)+0x2e>
c001c27b:	40                   	inc    eax
c001c27c:	83 f8 20             	cmp    eax,0x20
c001c27f:	75 f0                	jne    c001c271 <SoundCard::addChannel(SoundPort*)+0x9>
c001c281:	83 ec 0c             	sub    esp,0xc
c001c284:	68 09 49 02 c0       	push   0xc0024909
c001c289:	e8 34 32 ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c28e:	83 c4 10             	add    esp,0x10
c001c291:	83 c8 ff             	or     eax,0xffffffff
c001c294:	eb 0b                	jmp    c001c2a1 <SoundCard::addChannel(SoundPort*)+0x39>
c001c296:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c29a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001c2a1:	83 c4 0c             	add    esp,0xc
c001c2a4:	c3                   	ret    
c001c2a5:	90                   	nop

c001c2a6 <SoundCard::removeChannel(int)>:
c001c2a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c2ae:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c2b9:	c3                   	ret    
c001c2ba:	66 90                	xchg   ax,ax

c001c2bc <SoundPort::SoundPort(int, int, int, int)>:
c001c2bc:	83 ec 0c             	sub    esp,0xc
c001c2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ce:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2da:	89 10                	mov    DWORD PTR [eax],edx
c001c2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2ef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c2f2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c2f7:	75 13                	jne    c001c30c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ff:	05 a0 0f 00 00       	add    eax,0xfa0
c001c304:	d1 e0                	shl    eax,1
c001c306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c30a:	66 90                	xchg   ax,ax
c001c30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c310:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c314:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c326:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c329:	c1 e0 02             	shl    eax,0x2
c001c32c:	83 ec 0c             	sub    esp,0xc
c001c32f:	50                   	push   eax
c001c330:	e8 47 2e ff ff       	call   c000f17c <malloc>
c001c335:	83 c4 10             	add    esp,0x10
c001c338:	89 c2                	mov    edx,eax
c001c33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c341:	90                   	nop
c001c342:	83 c4 0c             	add    esp,0xc
c001c345:	c3                   	ret    
c001c346:	66 90                	xchg   ax,ax

c001c348 <SoundPort::~SoundPort()>:
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c352:	85 c0                	test   eax,eax
c001c354:	74 1e                	je     c001c374 <SoundPort::~SoundPort()+0x2c>
c001c356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c35d:	83 ec 0c             	sub    esp,0xc
c001c360:	50                   	push   eax
c001c361:	e8 26 2e ff ff       	call   c000f18c <free>
c001c366:	83 c4 10             	add    esp,0x10
c001c369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c374:	90                   	nop
c001c375:	83 c4 0c             	add    esp,0xc
c001c378:	c3                   	ret    
c001c379:	90                   	nop
c001c37a:	66 90                	xchg   ax,ax

c001c37c <SoundPort::unpause()>:
c001c37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c380:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c384:	c3                   	ret    
c001c385:	90                   	nop
c001c386:	66 90                	xchg   ax,ax

c001c388 <SoundPort::pause()>:
c001c388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c38c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c390:	c3                   	ret    
c001c391:	90                   	nop
c001c392:	66 90                	xchg   ax,ax

c001c394 <SoundPort::getBufferUsed()>:
c001c394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c398:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c39b:	c3                   	ret    

c001c39c <SoundPort::getBufferSize()>:
c001c39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3a0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c3a3:	c3                   	ret    

c001c3a4 <SoundPort::buffer8(signed char*, int)>:
c001c3a4:	55                   	push   ebp
c001c3a5:	57                   	push   edi
c001c3a6:	56                   	push   esi
c001c3a7:	53                   	push   ebx
c001c3a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3ac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c3b0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c3b3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c3b6:	74 70                	je     c001c428 <SoundPort::buffer8(signed char*, int)+0x84>
c001c3b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3bc:	85 c9                	test   ecx,ecx
c001c3be:	7e 68                	jle    c001c428 <SoundPort::buffer8(signed char*, int)+0x84>
c001c3c0:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001c3c4:	8d 48 01             	lea    ecx,[eax+0x1]
c001c3c7:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c3ca:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c3cd:	89 f1                	mov    ecx,esi
c001c3cf:	c1 e1 18             	shl    ecx,0x18
c001c3d2:	29 f1                	sub    ecx,esi
c001c3d4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c3d7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c3da:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c3dd:	74 51                	je     c001c430 <SoundPort::buffer8(signed char*, int)+0x8c>
c001c3df:	31 ff                	xor    edi,edi
c001c3e1:	eb 25                	jmp    c001c408 <SoundPort::buffer8(signed char*, int)+0x64>
c001c3e3:	90                   	nop
c001c3e4:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001c3e9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c3ec:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c3ef:	89 f3                	mov    ebx,esi
c001c3f1:	c1 e3 18             	shl    ebx,0x18
c001c3f4:	29 f3                	sub    ebx,esi
c001c3f6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c3f9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c3fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c3ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c402:	74 1c                	je     c001c420 <SoundPort::buffer8(signed char*, int)+0x7c>
c001c404:	89 c7                	mov    edi,eax
c001c406:	66 90                	xchg   ax,ax
c001c408:	8d 47 01             	lea    eax,[edi+0x1]
c001c40b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c40f:	75 d3                	jne    c001c3e4 <SoundPort::buffer8(signed char*, int)+0x40>
c001c411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c415:	8d 76 00             	lea    esi,[esi+0x0]
c001c418:	5b                   	pop    ebx
c001c419:	5e                   	pop    esi
c001c41a:	5f                   	pop    edi
c001c41b:	5d                   	pop    ebp
c001c41c:	c3                   	ret    
c001c41d:	8d 76 00             	lea    esi,[esi+0x0]
c001c420:	5b                   	pop    ebx
c001c421:	8d 47 02             	lea    eax,[edi+0x2]
c001c424:	5e                   	pop    esi
c001c425:	5f                   	pop    edi
c001c426:	5d                   	pop    ebp
c001c427:	c3                   	ret    
c001c428:	5b                   	pop    ebx
c001c429:	31 c0                	xor    eax,eax
c001c42b:	5e                   	pop    esi
c001c42c:	5f                   	pop    edi
c001c42d:	5d                   	pop    ebp
c001c42e:	c3                   	ret    
c001c42f:	90                   	nop
c001c430:	b8 01 00 00 00       	mov    eax,0x1
c001c435:	eb e1                	jmp    c001c418 <SoundPort::buffer8(signed char*, int)+0x74>
c001c437:	90                   	nop

c001c438 <SoundPort::buffer16(short*, int)>:
c001c438:	55                   	push   ebp
c001c439:	57                   	push   edi
c001c43a:	56                   	push   esi
c001c43b:	53                   	push   ebx
c001c43c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c440:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c444:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c447:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c44a:	74 70                	je     c001c4bc <SoundPort::buffer16(short*, int)+0x84>
c001c44c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c450:	85 c9                	test   ecx,ecx
c001c452:	7e 68                	jle    c001c4bc <SoundPort::buffer16(short*, int)+0x84>
c001c454:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001c458:	8d 48 01             	lea    ecx,[eax+0x1]
c001c45b:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c45e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c461:	89 f1                	mov    ecx,esi
c001c463:	c1 e1 10             	shl    ecx,0x10
c001c466:	29 f1                	sub    ecx,esi
c001c468:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c46b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c46e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c471:	74 51                	je     c001c4c4 <SoundPort::buffer16(short*, int)+0x8c>
c001c473:	31 ff                	xor    edi,edi
c001c475:	eb 25                	jmp    c001c49c <SoundPort::buffer16(short*, int)+0x64>
c001c477:	90                   	nop
c001c478:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001c47d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c480:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c483:	89 f3                	mov    ebx,esi
c001c485:	c1 e3 10             	shl    ebx,0x10
c001c488:	29 f3                	sub    ebx,esi
c001c48a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c48d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c490:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c493:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c496:	74 1c                	je     c001c4b4 <SoundPort::buffer16(short*, int)+0x7c>
c001c498:	89 c7                	mov    edi,eax
c001c49a:	66 90                	xchg   ax,ax
c001c49c:	8d 47 01             	lea    eax,[edi+0x1]
c001c49f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c4a3:	75 d3                	jne    c001c478 <SoundPort::buffer16(short*, int)+0x40>
c001c4a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4ac:	5b                   	pop    ebx
c001c4ad:	5e                   	pop    esi
c001c4ae:	5f                   	pop    edi
c001c4af:	5d                   	pop    ebp
c001c4b0:	c3                   	ret    
c001c4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4b4:	5b                   	pop    ebx
c001c4b5:	8d 47 02             	lea    eax,[edi+0x2]
c001c4b8:	5e                   	pop    esi
c001c4b9:	5f                   	pop    edi
c001c4ba:	5d                   	pop    ebp
c001c4bb:	c3                   	ret    
c001c4bc:	5b                   	pop    ebx
c001c4bd:	31 c0                	xor    eax,eax
c001c4bf:	5e                   	pop    esi
c001c4c0:	5f                   	pop    edi
c001c4c1:	5d                   	pop    ebp
c001c4c2:	c3                   	ret    
c001c4c3:	90                   	nop
c001c4c4:	b8 01 00 00 00       	mov    eax,0x1
c001c4c9:	eb e1                	jmp    c001c4ac <SoundPort::buffer16(short*, int)+0x74>
c001c4cb:	90                   	nop

c001c4cc <SoundPort::buffer32(int*, int)>:
c001c4cc:	55                   	push   ebp
c001c4cd:	57                   	push   edi
c001c4ce:	56                   	push   esi
c001c4cf:	53                   	push   ebx
c001c4d0:	83 ec 04             	sub    esp,0x4
c001c4d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c4df:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c4e2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c4e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4e8:	74 5a                	je     c001c544 <SoundPort::buffer32(int*, int)+0x78>
c001c4ea:	85 c0                	test   eax,eax
c001c4ec:	7e 56                	jle    c001c544 <SoundPort::buffer32(int*, int)+0x78>
c001c4ee:	8d 71 01             	lea    esi,[ecx+0x1]
c001c4f1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c4f4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c4f7:	8b 37                	mov    esi,DWORD PTR [edi]
c001c4f9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c4fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c4ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c502:	74 4c                	je     c001c550 <SoundPort::buffer32(int*, int)+0x84>
c001c504:	31 f6                	xor    esi,esi
c001c506:	eb 1c                	jmp    c001c524 <SoundPort::buffer32(int*, int)+0x58>
c001c508:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c50b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c50e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c511:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c514:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c518:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c51b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c51e:	74 18                	je     c001c538 <SoundPort::buffer32(int*, int)+0x6c>
c001c520:	89 de                	mov    esi,ebx
c001c522:	66 90                	xchg   ax,ax
c001c524:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c527:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001c52a:	75 dc                	jne    c001c508 <SoundPort::buffer32(int*, int)+0x3c>
c001c52c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c52f:	90                   	nop
c001c530:	83 c4 04             	add    esp,0x4
c001c533:	5b                   	pop    ebx
c001c534:	5e                   	pop    esi
c001c535:	5f                   	pop    edi
c001c536:	5d                   	pop    ebp
c001c537:	c3                   	ret    
c001c538:	8d 46 02             	lea    eax,[esi+0x2]
c001c53b:	83 c4 04             	add    esp,0x4
c001c53e:	5b                   	pop    ebx
c001c53f:	5e                   	pop    esi
c001c540:	5f                   	pop    edi
c001c541:	5d                   	pop    ebp
c001c542:	c3                   	ret    
c001c543:	90                   	nop
c001c544:	83 c4 04             	add    esp,0x4
c001c547:	31 c0                	xor    eax,eax
c001c549:	5b                   	pop    ebx
c001c54a:	5e                   	pop    esi
c001c54b:	5f                   	pop    edi
c001c54c:	5d                   	pop    ebp
c001c54d:	c3                   	ret    
c001c54e:	66 90                	xchg   ax,ax
c001c550:	b8 01 00 00 00       	mov    eax,0x1
c001c555:	eb d9                	jmp    c001c530 <SoundPort::buffer32(int*, int)+0x64>
c001c557:	90                   	nop

c001c558 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c558:	55                   	push   ebp
c001c559:	57                   	push   edi
c001c55a:	56                   	push   esi
c001c55b:	53                   	push   ebx
c001c55c:	83 ec 0c             	sub    esp,0xc
c001c55f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c563:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c567:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c56b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c56f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001c575:	39 03                	cmp    DWORD PTR [ebx],eax
c001c577:	74 13                	je     c001c58c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001c579:	83 ec 0c             	sub    esp,0xc
c001c57c:	68 5c 49 02 c0       	push   0xc002495c
c001c581:	e8 3c 2f ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c586:	83 c4 10             	add    esp,0x10
c001c589:	8d 76 00             	lea    esi,[esi+0x0]
c001c58c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001c592:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c595:	74 11                	je     c001c5a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001c597:	83 ec 0c             	sub    esp,0xc
c001c59a:	68 9b 49 02 c0       	push   0xc002499b
c001c59f:	e8 1e 2f ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c5a4:	83 c4 10             	add    esp,0x10
c001c5a7:	90                   	nop
c001c5a8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001c5ae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c5b1:	74 11                	je     c001c5c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001c5b3:	83 ec 0c             	sub    esp,0xc
c001c5b6:	68 9b 49 02 c0       	push   0xc002499b
c001c5bb:	e8 02 2f ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	90                   	nop
c001c5c4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001c5c7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001c5cb:	85 f6                	test   esi,esi
c001c5cd:	7e 2d                	jle    c001c5fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c5cf:	31 c0                	xor    eax,eax
c001c5d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c5d7:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001c5da:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001c5e0:	85 c9                	test   ecx,ecx
c001c5e2:	0f 49 d1             	cmovns edx,ecx
c001c5e5:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001c5e9:	c1 fa 0f             	sar    edx,0xf
c001c5ec:	01 d1                	add    ecx,edx
c001c5ee:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001c5f2:	83 c0 01             	add    eax,0x1
c001c5f5:	39 f0                	cmp    eax,esi
c001c5f7:	75 db                	jne    c001c5d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001c5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c5ff:	83 ec 04             	sub    esp,0x4
c001c602:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c605:	29 f0                	sub    eax,esi
c001c607:	c1 e0 02             	shl    eax,0x2
c001c60a:	50                   	push   eax
c001c60b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001c60e:	50                   	push   eax
c001c60f:	52                   	push   edx
c001c610:	e8 bb 3d fe ff       	call   c00003d0 <memmove>
c001c615:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c618:	29 f0                	sub    eax,esi
c001c61a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001c61d:	83 c4 1c             	add    esp,0x1c
c001c620:	89 f0                	mov    eax,esi
c001c622:	5b                   	pop    ebx
c001c623:	5e                   	pop    esi
c001c624:	5f                   	pop    edi
c001c625:	5d                   	pop    ebp
c001c626:	c3                   	ret    
c001c627:	90                   	nop

c001c628 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c628:	55                   	push   ebp
c001c629:	57                   	push   edi
c001c62a:	56                   	push   esi
c001c62b:	53                   	push   ebx
c001c62c:	83 ec 0c             	sub    esp,0xc
c001c62f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c633:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c637:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c63b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c63f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001c645:	39 03                	cmp    DWORD PTR [ebx],eax
c001c647:	74 13                	je     c001c65c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001c649:	83 ec 0c             	sub    esp,0xc
c001c64c:	68 7c 49 02 c0       	push   0xc002497c
c001c651:	e8 6c 2e ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c656:	83 c4 10             	add    esp,0x10
c001c659:	8d 76 00             	lea    esi,[esi+0x0]
c001c65c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001c662:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c665:	74 11                	je     c001c678 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	68 b7 49 02 c0       	push   0xc00249b7
c001c66f:	e8 4e 2e ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c674:	83 c4 10             	add    esp,0x10
c001c677:	90                   	nop
c001c678:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001c67e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c681:	74 11                	je     c001c694 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001c683:	83 ec 0c             	sub    esp,0xc
c001c686:	68 b7 49 02 c0       	push   0xc00249b7
c001c68b:	e8 32 2e ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	90                   	nop
c001c694:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001c697:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001c69b:	85 ff                	test   edi,edi
c001c69d:	7e 21                	jle    c001c6c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001c69f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c6a6:	31 c0                	xor    eax,eax
c001c6a8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c6ab:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001c6ae:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c6b1:	01 d5                	add    ebp,edx
c001c6b3:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001c6b6:	83 c0 04             	add    eax,0x4
c001c6b9:	39 c1                	cmp    ecx,eax
c001c6bb:	75 eb                	jne    c001c6a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001c6bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c6c3:	83 ec 04             	sub    esp,0x4
c001c6c6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c6c9:	29 f8                	sub    eax,edi
c001c6cb:	c1 e0 02             	shl    eax,0x2
c001c6ce:	50                   	push   eax
c001c6cf:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c6d2:	50                   	push   eax
c001c6d3:	52                   	push   edx
c001c6d4:	e8 f7 3c fe ff       	call   c00003d0 <memmove>
c001c6d9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c6dc:	29 f8                	sub    eax,edi
c001c6de:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001c6e1:	83 c4 1c             	add    esp,0x1c
c001c6e4:	89 f8                	mov    eax,edi
c001c6e6:	5b                   	pop    ebx
c001c6e7:	5e                   	pop    esi
c001c6e8:	5f                   	pop    edi
c001c6e9:	5d                   	pop    ebp
c001c6ea:	c3                   	ret    
c001c6eb:	90                   	nop

c001c6ec <PCI::open(int, int, void*)>:
c001c6ec:	83 ec 18             	sub    esp,0x18
c001c6ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c6fd:	8b 10                	mov    edx,DWORD PTR [eax]
c001c6ff:	50                   	push   eax
c001c700:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c703:	31 c0                	xor    eax,eax
c001c705:	83 c4 1c             	add    esp,0x1c
c001c708:	c3                   	ret    
c001c709:	90                   	nop

c001c70a <PCI::close(int, int, void*)>:
c001c70a:	31 c0                	xor    eax,eax
c001c70c:	c3                   	ret    
c001c70d:	90                   	nop

c001c70e <PCI::PCI()>:
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c715:	83 ec 08             	sub    esp,0x8
c001c718:	68 d3 49 02 c0       	push   0xc00249d3
c001c71d:	50                   	push   eax
c001c71e:	e8 e5 c1 fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001c723:	83 c4 10             	add    esp,0x10
c001c726:	ba e0 4a 02 c0       	mov    edx,0xc0024ae0
c001c72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72f:	89 10                	mov    DWORD PTR [eax],edx
c001c731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c735:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c743:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c752:	0f b6 d0             	movzx  edx,al
c001c755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c759:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c764:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c76a:	0f b6 d0             	movzx  edx,al
c001c76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c771:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c780:	8d 50 01             	lea    edx,[eax+0x1]
c001c783:	88 d1                	mov    cl,dl
c001c785:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c789:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001c78f:	0f b6 d0             	movzx  edx,al
c001c792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c796:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c79a:	83 c9 c0             	or     ecx,0xffffffc0
c001c79d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c7a1:	90                   	nop
c001c7a2:	83 c4 0c             	add    esp,0xc
c001c7a5:	c3                   	ret    

c001c7a6 <PCI::readBAR8(unsigned int, int)>:
c001c7a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7ae:	f6 c2 01             	test   dl,0x1
c001c7b1:	74 07                	je     c001c7ba <PCI::readBAR8(unsigned int, int)+0x14>
c001c7b3:	83 e2 fc             	and    edx,0xfffffffc
c001c7b6:	01 c2                	add    edx,eax
c001c7b8:	ec                   	in     al,dx
c001c7b9:	c3                   	ret    
c001c7ba:	83 e2 f0             	and    edx,0xfffffff0
c001c7bd:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c7c0:	c3                   	ret    
c001c7c1:	90                   	nop

c001c7c2 <PCI::readBAR16(unsigned int, int)>:
c001c7c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7ca:	f6 c2 01             	test   dl,0x1
c001c7cd:	74 08                	je     c001c7d7 <PCI::readBAR16(unsigned int, int)+0x15>
c001c7cf:	83 e2 fc             	and    edx,0xfffffffc
c001c7d2:	01 c2                	add    edx,eax
c001c7d4:	66 ed                	in     ax,dx
c001c7d6:	c3                   	ret    
c001c7d7:	83 e2 f0             	and    edx,0xfffffff0
c001c7da:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c7de:	c3                   	ret    
c001c7df:	90                   	nop

c001c7e0 <PCI::readBAR32(unsigned int, int)>:
c001c7e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7e8:	f6 c2 01             	test   dl,0x1
c001c7eb:	74 07                	je     c001c7f4 <PCI::readBAR32(unsigned int, int)+0x14>
c001c7ed:	83 e2 fc             	and    edx,0xfffffffc
c001c7f0:	01 c2                	add    edx,eax
c001c7f2:	ed                   	in     eax,dx
c001c7f3:	c3                   	ret    
c001c7f4:	83 e2 f0             	and    edx,0xfffffff0
c001c7f7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c7fa:	c3                   	ret    
c001c7fb:	90                   	nop

c001c7fc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c7fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c808:	f6 c2 01             	test   dl,0x1
c001c80b:	74 07                	je     c001c814 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001c80d:	83 e2 fc             	and    edx,0xfffffffc
c001c810:	01 ca                	add    edx,ecx
c001c812:	ee                   	out    dx,al
c001c813:	c3                   	ret    
c001c814:	83 e2 f0             	and    edx,0xfffffff0
c001c817:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001c81a:	c3                   	ret    
c001c81b:	90                   	nop

c001c81c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001c81c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c824:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c828:	f6 c2 01             	test   dl,0x1
c001c82b:	74 08                	je     c001c835 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001c82d:	83 e2 fc             	and    edx,0xfffffffc
c001c830:	01 ca                	add    edx,ecx
c001c832:	66 ef                	out    dx,ax
c001c834:	c3                   	ret    
c001c835:	83 e2 f0             	and    edx,0xfffffff0
c001c838:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001c83c:	c3                   	ret    
c001c83d:	90                   	nop

c001c83e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001c83e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c846:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c84a:	f6 c2 01             	test   dl,0x1
c001c84d:	74 07                	je     c001c856 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001c84f:	83 e2 fc             	and    edx,0xfffffffc
c001c852:	01 ca                	add    edx,ecx
c001c854:	ef                   	out    dx,eax
c001c855:	c3                   	ret    
c001c856:	83 e2 f0             	and    edx,0xfffffff0
c001c859:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001c85c:	c3                   	ret    
c001c85d:	90                   	nop

c001c85e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c85e:	55                   	push   ebp
c001c85f:	57                   	push   edi
c001c860:	56                   	push   esi
c001c861:	53                   	push   ebx
c001c862:	83 ec 0c             	sub    esp,0xc
c001c865:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001c86a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001c86e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c872:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c876:	83 fe 07             	cmp    esi,0x7
c001c879:	76 10                	jbe    c001c88b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001c87b:	83 ec 0c             	sub    esp,0xc
c001c87e:	68 db 49 02 c0       	push   0xc00249db
c001c883:	e8 3a 2c ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c888:	83 c4 10             	add    esp,0x10
c001c88b:	0f b6 db             	movzx  ebx,bl
c001c88e:	83 fb 0f             	cmp    ebx,0xf
c001c891:	76 10                	jbe    c001c8a3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001c893:	83 ec 0c             	sub    esp,0xc
c001c896:	68 0b 4a 02 c0       	push   0xc0024a0b
c001c89b:	e8 22 2c ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c8a0:	83 c4 10             	add    esp,0x10
c001c8a3:	8d 04 36             	lea    eax,[esi+esi*1]
c001c8a6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c8ab:	83 c8 f0             	or     eax,0xfffffff0
c001c8ae:	ee                   	out    dx,al
c001c8af:	ba fa 0c 00 00       	mov    edx,0xcfa
c001c8b4:	89 e8                	mov    eax,ebp
c001c8b6:	ee                   	out    dx,al
c001c8b7:	89 f9                	mov    ecx,edi
c001c8b9:	89 d8                	mov    eax,ebx
c001c8bb:	0f b6 d9             	movzx  ebx,cl
c001c8be:	83 c4 0c             	add    esp,0xc
c001c8c1:	c1 e0 08             	shl    eax,0x8
c001c8c4:	83 e3 fc             	and    ebx,0xfffffffc
c001c8c7:	09 d8                	or     eax,ebx
c001c8c9:	5b                   	pop    ebx
c001c8ca:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001c8cf:	5e                   	pop    esi
c001c8d0:	5f                   	pop    edi
c001c8d1:	5d                   	pop    ebp
c001c8d2:	c3                   	ret    
c001c8d3:	90                   	nop

c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c8d4:	57                   	push   edi
c001c8d5:	56                   	push   esi
c001c8d6:	53                   	push   ebx
c001c8d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c8e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c8e7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001c8ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c8f1:	83 ff 01             	cmp    edi,0x1
c001c8f4:	75 3f                	jne    c001c935 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001c8f6:	89 de                	mov    esi,ebx
c001c8f8:	0f b6 c0             	movzx  eax,al
c001c8fb:	c1 e0 10             	shl    eax,0x10
c001c8fe:	81 e6 fc 00 00 00    	and    esi,0xfc
c001c904:	0f b6 c9             	movzx  ecx,cl
c001c907:	09 f0                	or     eax,esi
c001c909:	c1 e1 08             	shl    ecx,0x8
c001c90c:	0f b6 d2             	movzx  edx,dl
c001c90f:	c1 e2 0b             	shl    edx,0xb
c001c912:	09 c8                	or     eax,ecx
c001c914:	09 d0                	or     eax,edx
c001c916:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c91b:	0d 00 00 00 80       	or     eax,0x80000000
c001c920:	ef                   	out    dx,eax
c001c921:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c926:	ed                   	in     eax,dx
c001c927:	83 e3 02             	and    ebx,0x2
c001c92a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c931:	d3 e8                	shr    eax,cl
c001c933:	eb 44                	jmp    c001c979 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c935:	83 ff 02             	cmp    edi,0x2
c001c938:	75 2d                	jne    c001c967 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001c93a:	83 ec 0c             	sub    esp,0xc
c001c93d:	0f b6 fb             	movzx  edi,bl
c001c940:	57                   	push   edi
c001c941:	0f b6 c9             	movzx  ecx,cl
c001c944:	51                   	push   ecx
c001c945:	0f b6 d2             	movzx  edx,dl
c001c948:	52                   	push   edx
c001c949:	0f b6 c0             	movzx  eax,al
c001c94c:	50                   	push   eax
c001c94d:	56                   	push   esi
c001c94e:	e8 0b ff ff ff       	call   c001c85e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c953:	89 c2                	mov    edx,eax
c001c955:	ed                   	in     eax,dx
c001c956:	83 e3 02             	and    ebx,0x2
c001c959:	83 c4 20             	add    esp,0x20
c001c95c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c963:	d3 e8                	shr    eax,cl
c001c965:	eb 12                	jmp    c001c979 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c967:	83 ec 0c             	sub    esp,0xc
c001c96a:	68 3b 4a 02 c0       	push   0xc0024a3b
c001c96f:	e8 4e 2b ff ff       	call   c000f4c2 <KePanic(char const*)>
c001c974:	83 c4 10             	add    esp,0x10
c001c977:	31 c0                	xor    eax,eax
c001c979:	5b                   	pop    ebx
c001c97a:	5e                   	pop    esi
c001c97b:	5f                   	pop    edi
c001c97c:	c3                   	ret    
c001c97d:	90                   	nop

c001c97e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c97e:	83 ec 18             	sub    esp,0x18
c001c981:	6a 00                	push   0x0
c001c983:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c988:	50                   	push   eax
c001c989:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c98e:	50                   	push   eax
c001c98f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c994:	50                   	push   eax
c001c995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c999:	e8 36 ff ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c99e:	83 c4 2c             	add    esp,0x2c
c001c9a1:	c3                   	ret    

c001c9a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c9a2:	83 ec 18             	sub    esp,0x18
c001c9a5:	6a 0e                	push   0xe
c001c9a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c9ac:	50                   	push   eax
c001c9ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c9b2:	50                   	push   eax
c001c9b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c9b8:	50                   	push   eax
c001c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9bd:	e8 12 ff ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c9c2:	83 c4 2c             	add    esp,0x2c
c001c9c5:	0f b6 c0             	movzx  eax,al
c001c9c8:	c3                   	ret    
c001c9c9:	90                   	nop

c001c9ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c9ca:	55                   	push   ebp
c001c9cb:	57                   	push   edi
c001c9cc:	56                   	push   esi
c001c9cd:	53                   	push   ebx
c001c9ce:	83 ec 18             	sub    esp,0x18
c001c9d1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001c9d6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001c9db:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001c9e0:	6a 0a                	push   0xa
c001c9e2:	56                   	push   esi
c001c9e3:	55                   	push   ebp
c001c9e4:	57                   	push   edi
c001c9e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c9e9:	e8 e6 fe ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c9ee:	83 c4 14             	add    esp,0x14
c001c9f1:	6a 0a                	push   0xa
c001c9f3:	56                   	push   esi
c001c9f4:	55                   	push   ebp
c001c9f5:	57                   	push   edi
c001c9f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c9fa:	89 c3                	mov    ebx,eax
c001c9fc:	0f b6 db             	movzx  ebx,bl
c001c9ff:	e8 d0 fe ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca04:	83 c4 2c             	add    esp,0x2c
c001ca07:	25 00 ff 00 00       	and    eax,0xff00
c001ca0c:	09 d8                	or     eax,ebx
c001ca0e:	5b                   	pop    ebx
c001ca0f:	5e                   	pop    esi
c001ca10:	5f                   	pop    edi
c001ca11:	5d                   	pop    ebp
c001ca12:	c3                   	ret    
c001ca13:	90                   	nop

c001ca14 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ca14:	83 ec 18             	sub    esp,0x18
c001ca17:	6a 08                	push   0x8
c001ca19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca1e:	50                   	push   eax
c001ca1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca24:	50                   	push   eax
c001ca25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca2a:	50                   	push   eax
c001ca2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca2f:	e8 a0 fe ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca34:	83 c4 2c             	add    esp,0x2c
c001ca37:	0f b6 c4             	movzx  eax,ah
c001ca3a:	c3                   	ret    
c001ca3b:	90                   	nop

c001ca3c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ca3c:	83 ec 18             	sub    esp,0x18
c001ca3f:	6a 08                	push   0x8
c001ca41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca46:	50                   	push   eax
c001ca47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca4c:	50                   	push   eax
c001ca4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca52:	50                   	push   eax
c001ca53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca57:	e8 78 fe ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca5c:	83 c4 2c             	add    esp,0x2c
c001ca5f:	c3                   	ret    

c001ca60 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ca60:	83 ec 18             	sub    esp,0x18
c001ca63:	6a 3c                	push   0x3c
c001ca65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca6a:	50                   	push   eax
c001ca6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca70:	50                   	push   eax
c001ca71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca76:	50                   	push   eax
c001ca77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca7b:	e8 54 fe ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca80:	83 c4 2c             	add    esp,0x2c
c001ca83:	c3                   	ret    

c001ca84 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ca84:	83 ec 18             	sub    esp,0x18
c001ca87:	6a 18                	push   0x18
c001ca89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca8e:	50                   	push   eax
c001ca8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca94:	50                   	push   eax
c001ca95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca9a:	50                   	push   eax
c001ca9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca9f:	e8 30 fe ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001caa4:	83 c4 2c             	add    esp,0x2c
c001caa7:	0f b6 c4             	movzx  eax,ah
c001caaa:	c3                   	ret    
c001caab:	90                   	nop

c001caac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001caac:	55                   	push   ebp
c001caad:	57                   	push   edi
c001caae:	56                   	push   esi
c001caaf:	53                   	push   ebx
c001cab0:	83 ec 28             	sub    esp,0x28
c001cab3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cab7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cabc:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cac1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cac6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cacd:	8d 43 12             	lea    eax,[ebx+0x12]
c001cad0:	83 c3 10             	add    ebx,0x10
c001cad3:	0f b6 c0             	movzx  eax,al
c001cad6:	0f b6 db             	movzx  ebx,bl
c001cad9:	50                   	push   eax
c001cada:	51                   	push   ecx
c001cadb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cadf:	57                   	push   edi
c001cae0:	55                   	push   ebp
c001cae1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cae5:	e8 ea fd ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001caea:	83 c4 14             	add    esp,0x14
c001caed:	53                   	push   ebx
c001caee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001caf2:	51                   	push   ecx
c001caf3:	89 c6                	mov    esi,eax
c001caf5:	57                   	push   edi
c001caf6:	55                   	push   ebp
c001caf7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cafb:	c1 e6 10             	shl    esi,0x10
c001cafe:	e8 d1 fd ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb03:	83 c4 3c             	add    esp,0x3c
c001cb06:	5b                   	pop    ebx
c001cb07:	0f b7 c0             	movzx  eax,ax
c001cb0a:	09 f0                	or     eax,esi
c001cb0c:	5e                   	pop    esi
c001cb0d:	5f                   	pop    edi
c001cb0e:	5d                   	pop    ebp
c001cb0f:	c3                   	ret    

c001cb10 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cb10:	55                   	push   ebp
c001cb11:	57                   	push   edi
c001cb12:	56                   	push   esi
c001cb13:	53                   	push   ebx
c001cb14:	83 ec 0c             	sub    esp,0xc
c001cb17:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001cb1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cb23:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001cb27:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001cb2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cb31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb35:	83 f9 01             	cmp    ecx,0x1
c001cb38:	75 5d                	jne    c001cb97 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001cb3a:	0f b6 c8             	movzx  ecx,al
c001cb3d:	89 f0                	mov    eax,esi
c001cb3f:	25 fc 00 00 00       	and    eax,0xfc
c001cb44:	0f b6 d2             	movzx  edx,dl
c001cb47:	c1 e1 10             	shl    ecx,0x10
c001cb4a:	c1 e2 0b             	shl    edx,0xb
c001cb4d:	09 c1                	or     ecx,eax
c001cb4f:	89 f8                	mov    eax,edi
c001cb51:	0f b6 f8             	movzx  edi,al
c001cb54:	c1 e7 08             	shl    edi,0x8
c001cb57:	09 f9                	or     ecx,edi
c001cb59:	09 d1                	or     ecx,edx
c001cb5b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cb60:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cb66:	89 c8                	mov    eax,ecx
c001cb68:	ef                   	out    dx,eax
c001cb69:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cb6e:	ed                   	in     eax,dx
c001cb6f:	83 e6 02             	and    esi,0x2
c001cb72:	0f b7 db             	movzx  ebx,bx
c001cb75:	74 0a                	je     c001cb81 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001cb77:	c1 e3 10             	shl    ebx,0x10
c001cb7a:	0f b7 d0             	movzx  edx,ax
c001cb7d:	09 d3                	or     ebx,edx
c001cb7f:	eb 05                	jmp    c001cb86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001cb81:	66 31 c0             	xor    ax,ax
c001cb84:	09 c3                	or     ebx,eax
c001cb86:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cb8b:	89 c8                	mov    eax,ecx
c001cb8d:	ef                   	out    dx,eax
c001cb8e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cb93:	89 d8                	mov    eax,ebx
c001cb95:	eb 41                	jmp    c001cbd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001cb97:	83 f9 02             	cmp    ecx,0x2
c001cb9a:	75 45                	jne    c001cbe1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001cb9c:	89 f1                	mov    ecx,esi
c001cb9e:	83 ec 0c             	sub    esp,0xc
c001cba1:	0f b6 f1             	movzx  esi,cl
c001cba4:	89 f9                	mov    ecx,edi
c001cba6:	56                   	push   esi
c001cba7:	0f b6 f9             	movzx  edi,cl
c001cbaa:	57                   	push   edi
c001cbab:	0f b6 d2             	movzx  edx,dl
c001cbae:	52                   	push   edx
c001cbaf:	0f b6 c0             	movzx  eax,al
c001cbb2:	50                   	push   eax
c001cbb3:	55                   	push   ebp
c001cbb4:	e8 a5 fc ff ff       	call   c001c85e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbb9:	89 c2                	mov    edx,eax
c001cbbb:	ed                   	in     eax,dx
c001cbbc:	83 c4 20             	add    esp,0x20
c001cbbf:	f6 c2 02             	test   dl,0x2
c001cbc2:	0f b7 db             	movzx  ebx,bx
c001cbc5:	74 0c                	je     c001cbd3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001cbc7:	0f b7 c8             	movzx  ecx,ax
c001cbca:	89 d8                	mov    eax,ebx
c001cbcc:	c1 e0 10             	shl    eax,0x10
c001cbcf:	09 c8                	or     eax,ecx
c001cbd1:	eb 05                	jmp    c001cbd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001cbd3:	66 31 c0             	xor    ax,ax
c001cbd6:	09 d8                	or     eax,ebx
c001cbd8:	ef                   	out    dx,eax
c001cbd9:	83 c4 0c             	add    esp,0xc
c001cbdc:	5b                   	pop    ebx
c001cbdd:	5e                   	pop    esi
c001cbde:	5f                   	pop    edi
c001cbdf:	5d                   	pop    ebp
c001cbe0:	c3                   	ret    
c001cbe1:	c7 44 24 20 3b 4a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024a3b
c001cbe9:	83 c4 0c             	add    esp,0xc
c001cbec:	5b                   	pop    ebx
c001cbed:	5e                   	pop    esi
c001cbee:	5f                   	pop    edi
c001cbef:	5d                   	pop    ebp
c001cbf0:	e9 cd 28 ff ff       	jmp    c000f4c2 <KePanic(char const*)>
c001cbf5:	90                   	nop

c001cbf6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cbf6:	55                   	push   ebp
c001cbf7:	57                   	push   edi
c001cbf8:	56                   	push   esi
c001cbf9:	53                   	push   ebx
c001cbfa:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001cc00:	80 3d ec e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0ec,0x0
c001cc07:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001cc0e:	0f 85 bd 00 00 00    	jne    c001ccd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	68 14 01 00 00       	push   0x114
c001cc1c:	e8 5b 25 ff ff       	call   c000f17c <malloc>
c001cc21:	83 c4 0c             	add    esp,0xc
c001cc24:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c001cc2a:	68 41 4a 02 c0       	push   0xc0024a41
c001cc2f:	50                   	push   eax
c001cc30:	89 c3                	mov    ebx,eax
c001cc32:	e8 f5 b4 fe ff       	call   c000812c <File::File(char const*, Process*)>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	85 db                	test   ebx,ebx
c001cc3c:	0f 84 6b 02 00 00    	je     c001cead <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001cc42:	57                   	push   edi
c001cc43:	57                   	push   edi
c001cc44:	6a 01                	push   0x1
c001cc46:	53                   	push   ebx
c001cc47:	e8 fe b4 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001cc4c:	83 c4 10             	add    esp,0x10
c001cc4f:	85 c0                	test   eax,eax
c001cc51:	0f 85 56 02 00 00    	jne    c001cead <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001cc57:	52                   	push   edx
c001cc58:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001cc5c:	50                   	push   eax
c001cc5d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001cc61:	50                   	push   eax
c001cc62:	53                   	push   ebx
c001cc63:	e8 e4 b7 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001cc68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cc6c:	40                   	inc    eax
c001cc6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc70:	e8 07 25 ff ff       	call   c000f17c <malloc>
c001cc75:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001cc79:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cc7d:	59                   	pop    ecx
c001cc7e:	a3 e8 e0 02 c0       	mov    ds:0xc002e0e8,eax
c001cc83:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cc85:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001cc89:	51                   	push   ecx
c001cc8a:	50                   	push   eax
c001cc8b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cc8f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cc93:	53                   	push   ebx
c001cc94:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cc97:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001cc9b:	83 c4 20             	add    esp,0x20
c001cc9e:	89 c8                	mov    eax,ecx
c001cca0:	99                   	cdq    
c001cca1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001cca5:	0f 85 02 02 00 00    	jne    c001cead <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ccab:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001ccaf:	0f 85 f8 01 00 00    	jne    c001cead <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	53                   	push   ebx
c001ccb9:	e8 ea b4 fe ff       	call   c00081a8 <File::close()>
c001ccbe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	c6 05 ec e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0ec,0x1
c001cccc:	a3 e4 e0 02 c0       	mov    ds:0xc002e0e4,eax
c001ccd1:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001ccd9:	31 c9                	xor    ecx,ecx
c001ccdb:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001cce2:	8b 2d e4 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e0e4
c001cce8:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001ccef:	8b 15 e8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0e8
c001ccf5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001ccfa:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001cd02:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001cd07:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001cd0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cd13:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001cd1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cd1f:	39 cd                	cmp    ebp,ecx
c001cd21:	0f 8e 86 01 00 00    	jle    c001cead <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001cd27:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001cd2a:	d4 40                	aam    0x40
c001cd2c:	d5 39                	aad    0x39
c001cd2e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cd32:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001cd36:	d4 40                	aam    0x40
c001cd38:	d5 39                	aad    0x39
c001cd3a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd3e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001cd42:	d4 40                	aam    0x40
c001cd44:	d5 39                	aad    0x39
c001cd46:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001cd4a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001cd4e:	d4 40                	aam    0x40
c001cd50:	d5 39                	aad    0x39
c001cd52:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd56:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001cd5a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001cd5e:	3c 56                	cmp    al,0x56
c001cd60:	74 47                	je     c001cda9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001cd62:	d4 40                	aam    0x40
c001cd64:	d5 39                	aad    0x39
c001cd66:	8d 58 d0             	lea    ebx,[eax-0x30]
c001cd69:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001cd6d:	0f b6 db             	movzx  ebx,bl
c001cd70:	c1 e3 04             	shl    ebx,0x4
c001cd73:	d4 40                	aam    0x40
c001cd75:	d5 39                	aad    0x39
c001cd77:	83 e8 30             	sub    eax,0x30
c001cd7a:	0f b6 c0             	movzx  eax,al
c001cd7d:	09 c3                	or     ebx,eax
c001cd7f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001cd83:	c1 e3 04             	shl    ebx,0x4
c001cd86:	d4 40                	aam    0x40
c001cd88:	d5 39                	aad    0x39
c001cd8a:	83 e8 30             	sub    eax,0x30
c001cd8d:	0f b6 c0             	movzx  eax,al
c001cd90:	09 c3                	or     ebx,eax
c001cd92:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001cd96:	c1 e3 04             	shl    ebx,0x4
c001cd99:	d4 40                	aam    0x40
c001cd9b:	d5 39                	aad    0x39
c001cd9d:	83 e8 30             	sub    eax,0x30
c001cda0:	0f b6 c0             	movzx  eax,al
c001cda3:	09 c3                	or     ebx,eax
c001cda5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001cda9:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001cdad:	80 fb 58             	cmp    bl,0x58
c001cdb0:	74 49                	je     c001cdfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001cdb2:	88 d8                	mov    al,bl
c001cdb4:	d4 40                	aam    0x40
c001cdb6:	d5 39                	aad    0x39
c001cdb8:	83 e8 30             	sub    eax,0x30
c001cdbb:	0f b6 f8             	movzx  edi,al
c001cdbe:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001cdc2:	c1 e7 04             	shl    edi,0x4
c001cdc5:	d4 40                	aam    0x40
c001cdc7:	d5 39                	aad    0x39
c001cdc9:	83 e8 30             	sub    eax,0x30
c001cdcc:	0f b6 c0             	movzx  eax,al
c001cdcf:	09 c7                	or     edi,eax
c001cdd1:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001cdd5:	c1 e7 04             	shl    edi,0x4
c001cdd8:	d4 40                	aam    0x40
c001cdda:	d5 39                	aad    0x39
c001cddc:	83 e8 30             	sub    eax,0x30
c001cddf:	0f b6 c0             	movzx  eax,al
c001cde2:	09 c7                	or     edi,eax
c001cde4:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001cde8:	c1 e7 04             	shl    edi,0x4
c001cdeb:	d4 40                	aam    0x40
c001cded:	d5 39                	aad    0x39
c001cdef:	83 e8 30             	sub    eax,0x30
c001cdf2:	0f b6 c0             	movzx  eax,al
c001cdf5:	09 c7                	or     edi,eax
c001cdf7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001cdfb:	8d 41 10             	lea    eax,[ecx+0x10]
c001cdfe:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001ce02:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001ce06:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ce0a:	83 f9 0a             	cmp    ecx,0xa
c001ce0d:	74 07                	je     c001ce16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001ce0f:	47                   	inc    edi
c001ce10:	39 c5                	cmp    ebp,eax
c001ce12:	75 16                	jne    c001ce2a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001ce14:	89 e8                	mov    eax,ebp
c001ce16:	83 f9 0a             	cmp    ecx,0xa
c001ce19:	0f 94 c1             	sete   cl
c001ce1c:	0f b6 c9             	movzx  ecx,cl
c001ce1f:	01 c1                	add    ecx,eax
c001ce21:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001ce26:	75 0f                	jne    c001ce37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001ce28:	eb 1c                	jmp    c001ce46 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001ce2a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ce2d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001ce31:	40                   	inc    eax
c001ce32:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001ce35:	eb cb                	jmp    c001ce02 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001ce37:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ce3b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ce40:	0f 85 d9 fe ff ff    	jne    c001cd1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ce46:	80 fb 58             	cmp    bl,0x58
c001ce49:	74 10                	je     c001ce5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001ce4b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ce50:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001ce55:	0f 85 c4 fe ff ff    	jne    c001cd1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ce5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ce63:	83 e8 30             	sub    eax,0x30
c001ce66:	c1 e0 04             	shl    eax,0x4
c001ce69:	83 eb 30             	sub    ebx,0x30
c001ce6c:	09 d8                	or     eax,ebx
c001ce6e:	0f b6 c0             	movzx  eax,al
c001ce71:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ce75:	0f 85 a4 fe ff ff    	jne    c001cd1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ce7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce7f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ce83:	83 e8 30             	sub    eax,0x30
c001ce86:	c1 e0 04             	shl    eax,0x4
c001ce89:	83 eb 30             	sub    ebx,0x30
c001ce8c:	09 d8                	or     eax,ebx
c001ce8e:	0f b6 c0             	movzx  eax,al
c001ce91:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ce95:	0f 85 84 fe ff ff    	jne    c001cd1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ce9b:	50                   	push   eax
c001ce9c:	50                   	push   eax
c001ce9d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001cea1:	50                   	push   eax
c001cea2:	56                   	push   esi
c001cea3:	e8 a8 37 fe ff       	call   c0000650 <strcpy>
c001cea8:	83 c4 10             	add    esp,0x10
c001ceab:	eb 05                	jmp    c001ceb2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001cead:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ceb0:	31 f6                	xor    esi,esi
c001ceb2:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ceb8:	89 f0                	mov    eax,esi
c001ceba:	5b                   	pop    ebx
c001cebb:	5e                   	pop    esi
c001cebc:	5f                   	pop    edi
c001cebd:	5d                   	pop    ebp
c001cebe:	c3                   	ret    
c001cebf:	90                   	nop

c001cec0 <PCI::checkBus(unsigned char)>:
c001cec0:	56                   	push   esi
c001cec1:	53                   	push   ebx
c001cec2:	31 db                	xor    ebx,ebx
c001cec4:	51                   	push   ecx
c001cec5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ceca:	52                   	push   edx
c001cecb:	53                   	push   ebx
c001cecc:	43                   	inc    ebx
c001cecd:	56                   	push   esi
c001cece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced2:	e8 6f 03 00 00       	call   c001d246 <PCI::checkDevice(unsigned char, unsigned char)>
c001ced7:	83 c4 10             	add    esp,0x10
c001ceda:	83 fb 20             	cmp    ebx,0x20
c001cedd:	75 eb                	jne    c001ceca <PCI::checkBus(unsigned char)+0xa>
c001cedf:	58                   	pop    eax
c001cee0:	5b                   	pop    ebx
c001cee1:	5e                   	pop    esi
c001cee2:	c3                   	ret    
c001cee3:	90                   	nop

c001cee4 <PCI::foundDevice(PCIDeviceInfo)>:
c001cee4:	55                   	push   ebp
c001cee5:	57                   	push   edi
c001cee6:	56                   	push   esi
c001cee7:	53                   	push   ebx
c001cee8:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001ceee:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001cef6:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001cefd:	3d ff ff 00 00       	cmp    eax,0xffff
c001cf02:	0f 84 b6 01 00 00    	je     c001d0be <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001cf08:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001cf10:	66 81 fd 06 04       	cmp    bp,0x406
c001cf15:	75 32                	jne    c001cf49 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001cf17:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001cf1f:	50                   	push   eax
c001cf20:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001cf28:	50                   	push   eax
c001cf29:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001cf31:	50                   	push   eax
c001cf32:	53                   	push   ebx
c001cf33:	e8 4c fb ff ff       	call   c001ca84 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001cf38:	59                   	pop    ecx
c001cf39:	5e                   	pop    esi
c001cf3a:	0f b6 c0             	movzx  eax,al
c001cf3d:	50                   	push   eax
c001cf3e:	53                   	push   ebx
c001cf3f:	e8 7c ff ff ff       	call   c001cec0 <PCI::checkBus(unsigned char)>
c001cf44:	e9 15 01 00 00       	jmp    c001d05e <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001cf49:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001cf51:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001cf57:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001cf5e:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001cf65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cf69:	85 c0                	test   eax,eax
c001cf6b:	74 34                	je     c001cfa1 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001cf6d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cf70:	85 d2                	test   edx,edx
c001cf72:	74 29                	je     c001cf9d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001cf74:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001cf7a:	31 cf                	xor    edi,ecx
c001cf7c:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001cf82:	75 19                	jne    c001cf9d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001cf84:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001cf8a:	75 11                	jne    c001cf9d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001cf8c:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001cf93:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001cf97:	0f 84 21 01 00 00    	je     c001d0be <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001cf9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf9f:	eb c8                	jmp    c001cf69 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001cfa1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cfa5:	be 74 4a 02 c0       	mov    esi,0xc0024a74
c001cfaa:	b9 07 00 00 00       	mov    ecx,0x7
c001cfaf:	fc                   	cld    
c001cfb0:	31 d2                	xor    edx,edx
c001cfb2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001cfb4:	b9 12 00 00 00       	mov    ecx,0x12
c001cfb9:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001cfc0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cfc4:	83 ec 0c             	sub    esp,0xc
c001cfc7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cfc9:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001cfd1:	b9 0a 00 00 00       	mov    ecx,0xa
c001cfd6:	f7 f1                	div    ecx
c001cfd8:	83 c0 30             	add    eax,0x30
c001cfdb:	83 c2 30             	add    edx,0x30
c001cfde:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001cfe2:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001cfea:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001cfee:	31 d2                	xor    edx,edx
c001cff0:	f7 f1                	div    ecx
c001cff2:	83 c0 30             	add    eax,0x30
c001cff5:	83 c2 30             	add    edx,0x30
c001cff8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001cffc:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001d000:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d004:	50                   	push   eax
c001d005:	e8 29 f8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d00a:	83 c4 10             	add    esp,0x10
c001d00d:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001d013:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001d01a:	75 47                	jne    c001d063 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001d01c:	83 ec 0c             	sub    esp,0xc
c001d01f:	68 64 01 00 00       	push   0x164
c001d024:	e8 53 21 ff ff       	call   c000f17c <malloc>
c001d029:	89 04 24             	mov    DWORD PTR [esp],eax
c001d02c:	89 c5                	mov    ebp,eax
c001d02e:	e8 35 11 00 00       	call   c001e168 <SATABus::SATABus()>
c001d033:	58                   	pop    eax
c001d034:	5a                   	pop    edx
c001d035:	55                   	push   ebp
c001d036:	53                   	push   ebx
c001d037:	e8 56 c0 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d03c:	83 ec 1c             	sub    esp,0x1c
c001d03f:	b9 09 00 00 00       	mov    ecx,0x9
c001d044:	89 e7                	mov    edi,esp
c001d046:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d048:	55                   	push   ebp
c001d049:	e8 8a bf fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d04e:	83 c4 30             	add    esp,0x30
c001d051:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d054:	6a 00                	push   0x0
c001d056:	6a 00                	push   0x0
c001d058:	6a 00                	push   0x0
c001d05a:	55                   	push   ebp
c001d05b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d05e:	83 c4 10             	add    esp,0x10
c001d061:	eb 5b                	jmp    c001d0be <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d063:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001d069:	75 19                	jne    c001d084 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001d06b:	83 ec 0c             	sub    esp,0xc
c001d06e:	68 70 02 00 00       	push   0x270
c001d073:	e8 04 21 ff ff       	call   c000f17c <malloc>
c001d078:	89 04 24             	mov    DWORD PTR [esp],eax
c001d07b:	89 c5                	mov    ebp,eax
c001d07d:	e8 94 02 00 00       	call   c001d316 <IDE::IDE()>
c001d082:	eb af                	jmp    c001d033 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001d084:	83 ec 0c             	sub    esp,0xc
c001d087:	68 58 01 00 00       	push   0x158
c001d08c:	e8 eb 20 ff ff       	call   c000f17c <malloc>
c001d091:	89 c5                	mov    ebp,eax
c001d093:	58                   	pop    eax
c001d094:	5a                   	pop    edx
c001d095:	68 5a 4a 02 c0       	push   0xc0024a5a
c001d09a:	55                   	push   ebp
c001d09b:	e8 a6 c2 fe ff       	call   c0009346 <DriverlessDevice::DriverlessDevice(char const*)>
c001d0a0:	59                   	pop    ecx
c001d0a1:	5f                   	pop    edi
c001d0a2:	55                   	push   ebp
c001d0a3:	53                   	push   ebx
c001d0a4:	e8 e9 bf fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d0a9:	83 ec 1c             	sub    esp,0x1c
c001d0ac:	b9 09 00 00 00       	mov    ecx,0x9
c001d0b1:	89 e7                	mov    edi,esp
c001d0b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d0b5:	55                   	push   ebp
c001d0b6:	e8 1d bf fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d0bb:	83 c4 30             	add    esp,0x30
c001d0be:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d0c4:	5b                   	pop    ebx
c001d0c5:	5e                   	pop    esi
c001d0c6:	5f                   	pop    edi
c001d0c7:	5d                   	pop    ebp
c001d0c8:	c3                   	ret    
c001d0c9:	90                   	nop

c001d0ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d0ca:	55                   	push   ebp
c001d0cb:	57                   	push   edi
c001d0cc:	56                   	push   esi
c001d0cd:	53                   	push   ebx
c001d0ce:	83 ec 68             	sub    esp,0x68
c001d0d1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d0d8:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d0dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0e0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d0e7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001d0ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d0f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d0f7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001d0fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d100:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001d105:	6a 0c                	push   0xc
c001d107:	57                   	push   edi
c001d108:	53                   	push   ebx
c001d109:	56                   	push   esi
c001d10a:	55                   	push   ebp
c001d10b:	e8 c4 f7 ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d110:	83 c4 20             	add    esp,0x20
c001d113:	57                   	push   edi
c001d114:	53                   	push   ebx
c001d115:	56                   	push   esi
c001d116:	55                   	push   ebp
c001d117:	e8 ae f8 ff ff       	call   c001c9ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d11c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001d121:	57                   	push   edi
c001d122:	53                   	push   ebx
c001d123:	56                   	push   esi
c001d124:	55                   	push   ebp
c001d125:	e8 36 f9 ff ff       	call   c001ca60 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d12a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d12e:	83 c4 14             	add    esp,0x14
c001d131:	6a 3c                	push   0x3c
c001d133:	57                   	push   edi
c001d134:	53                   	push   ebx
c001d135:	56                   	push   esi
c001d136:	55                   	push   ebp
c001d137:	e8 98 f7 ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d13c:	0f b6 c4             	movzx  eax,ah
c001d13f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d143:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d147:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d14b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001d150:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001d156:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001d15c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d160:	83 c4 20             	add    esp,0x20
c001d163:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d168:	74 30                	je     c001d19a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d16a:	31 c0                	xor    eax,eax
c001d16c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d170:	7e 28                	jle    c001d19a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d172:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001d17a:	39 cb                	cmp    ebx,ecx
c001d17c:	75 19                	jne    c001d197 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d17e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001d186:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001d18a:	75 0b                	jne    c001d197 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d18c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001d193:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001d197:	40                   	inc    eax
c001d198:	eb d2                	jmp    c001d16c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001d19a:	31 d2                	xor    edx,edx
c001d19c:	83 ec 0c             	sub    esp,0xc
c001d19f:	57                   	push   edi
c001d1a0:	53                   	push   ebx
c001d1a1:	56                   	push   esi
c001d1a2:	52                   	push   edx
c001d1a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d1a7:	55                   	push   ebp
c001d1a8:	e8 ff f8 ff ff       	call   c001caac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d1b1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d1b5:	42                   	inc    edx
c001d1b6:	83 c4 20             	add    esp,0x20
c001d1b9:	83 fa 06             	cmp    edx,0x6
c001d1bc:	75 de                	jne    c001d19c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001d1be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1c2:	83 ec 0c             	sub    esp,0xc
c001d1c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1c9:	c1 e2 08             	shl    edx,0x8
c001d1cc:	0f b6 c4             	movzx  eax,ah
c001d1cf:	09 d0                	or     eax,edx
c001d1d1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d1d6:	6a 02                	push   0x2
c001d1d8:	57                   	push   edi
c001d1d9:	53                   	push   ebx
c001d1da:	56                   	push   esi
c001d1db:	55                   	push   ebp
c001d1dc:	e8 f3 f6 ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1e1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d1e6:	83 c4 20             	add    esp,0x20
c001d1e9:	57                   	push   edi
c001d1ea:	53                   	push   ebx
c001d1eb:	56                   	push   esi
c001d1ec:	55                   	push   ebp
c001d1ed:	e8 22 f8 ff ff       	call   c001ca14 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d1f2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d1f6:	57                   	push   edi
c001d1f7:	53                   	push   ebx
c001d1f8:	56                   	push   esi
c001d1f9:	55                   	push   ebp
c001d1fa:	e8 7f f7 ff ff       	call   c001c97e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d1ff:	b9 09 00 00 00       	mov    ecx,0x9
c001d204:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d209:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001d20d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d211:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d215:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d219:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d21d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d221:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001d225:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d229:	83 ec 0c             	sub    esp,0xc
c001d22c:	fc                   	cld    
c001d22d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d231:	89 e7                	mov    edi,esp
c001d233:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d235:	55                   	push   ebp
c001d236:	e8 a9 fc ff ff       	call   c001cee4 <PCI::foundDevice(PCIDeviceInfo)>
c001d23b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d241:	5b                   	pop    ebx
c001d242:	5e                   	pop    esi
c001d243:	5f                   	pop    edi
c001d244:	5d                   	pop    ebp
c001d245:	c3                   	ret    

c001d246 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d246:	55                   	push   ebp
c001d247:	57                   	push   edi
c001d248:	56                   	push   esi
c001d249:	53                   	push   ebx
c001d24a:	83 ec 0c             	sub    esp,0xc
c001d24d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d252:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d257:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d25b:	6a 00                	push   0x0
c001d25d:	56                   	push   esi
c001d25e:	57                   	push   edi
c001d25f:	55                   	push   ebp
c001d260:	e8 19 f7 ff ff       	call   c001c97e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d265:	6a 00                	push   0x0
c001d267:	56                   	push   esi
c001d268:	57                   	push   edi
c001d269:	55                   	push   ebp
c001d26a:	e8 5b fe ff ff       	call   c001d0ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d26f:	83 c4 20             	add    esp,0x20
c001d272:	6a 00                	push   0x0
c001d274:	56                   	push   esi
c001d275:	57                   	push   edi
c001d276:	55                   	push   ebp
c001d277:	e8 26 f7 ff ff       	call   c001c9a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d27c:	83 c4 10             	add    esp,0x10
c001d27f:	a8 80                	test   al,0x80
c001d281:	74 2d                	je     c001d2b0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001d283:	bb 01 00 00 00       	mov    ebx,0x1
c001d288:	53                   	push   ebx
c001d289:	56                   	push   esi
c001d28a:	57                   	push   edi
c001d28b:	55                   	push   ebp
c001d28c:	e8 ed f6 ff ff       	call   c001c97e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d291:	83 c4 10             	add    esp,0x10
c001d294:	0f b7 c0             	movzx  eax,ax
c001d297:	3d ff ff 00 00       	cmp    eax,0xffff
c001d29c:	74 0c                	je     c001d2aa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d29e:	53                   	push   ebx
c001d29f:	56                   	push   esi
c001d2a0:	57                   	push   edi
c001d2a1:	55                   	push   ebp
c001d2a2:	e8 23 fe ff ff       	call   c001d0ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d2a7:	83 c4 10             	add    esp,0x10
c001d2aa:	43                   	inc    ebx
c001d2ab:	83 fb 08             	cmp    ebx,0x8
c001d2ae:	75 d8                	jne    c001d288 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d2b0:	83 c4 0c             	add    esp,0xc
c001d2b3:	5b                   	pop    ebx
c001d2b4:	5e                   	pop    esi
c001d2b5:	5f                   	pop    edi
c001d2b6:	5d                   	pop    ebp
c001d2b7:	c3                   	ret    

c001d2b8 <PCI::detect()>:
c001d2b8:	56                   	push   esi
c001d2b9:	53                   	push   ebx
c001d2ba:	53                   	push   ebx
c001d2bb:	31 db                	xor    ebx,ebx
c001d2bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2c1:	6a 00                	push   0x0
c001d2c3:	6a 00                	push   0x0
c001d2c5:	6a 00                	push   0x0
c001d2c7:	56                   	push   esi
c001d2c8:	e8 d5 f6 ff ff       	call   c001c9a2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d2cd:	83 c4 10             	add    esp,0x10
c001d2d0:	a8 80                	test   al,0x80
c001d2d2:	75 21                	jne    c001d2f5 <PCI::detect()+0x3d>
c001d2d4:	51                   	push   ecx
c001d2d5:	51                   	push   ecx
c001d2d6:	6a 00                	push   0x0
c001d2d8:	56                   	push   esi
c001d2d9:	e8 e2 fb ff ff       	call   c001cec0 <PCI::checkBus(unsigned char)>
c001d2de:	83 c4 10             	add    esp,0x10
c001d2e1:	eb 2a                	jmp    c001d30d <PCI::detect()+0x55>
c001d2e3:	52                   	push   edx
c001d2e4:	52                   	push   edx
c001d2e5:	53                   	push   ebx
c001d2e6:	43                   	inc    ebx
c001d2e7:	56                   	push   esi
c001d2e8:	e8 d3 fb ff ff       	call   c001cec0 <PCI::checkBus(unsigned char)>
c001d2ed:	83 c4 10             	add    esp,0x10
c001d2f0:	83 fb 08             	cmp    ebx,0x8
c001d2f3:	74 18                	je     c001d30d <PCI::detect()+0x55>
c001d2f5:	53                   	push   ebx
c001d2f6:	6a 00                	push   0x0
c001d2f8:	6a 00                	push   0x0
c001d2fa:	56                   	push   esi
c001d2fb:	e8 7e f6 ff ff       	call   c001c97e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	0f b7 c0             	movzx  eax,ax
c001d306:	3d ff ff 00 00       	cmp    eax,0xffff
c001d30b:	74 d6                	je     c001d2e3 <PCI::detect()+0x2b>
c001d30d:	58                   	pop    eax
c001d30e:	5b                   	pop    ebx
c001d30f:	5e                   	pop    esi
c001d310:	c3                   	ret    
c001d311:	90                   	nop

c001d312 <IDE::close(int, int, void*)>:
c001d312:	83 c8 ff             	or     eax,0xffffffff
c001d315:	c3                   	ret    

c001d316 <IDE::IDE()>:
c001d316:	83 ec 0c             	sub    esp,0xc
c001d319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31d:	83 ec 08             	sub    esp,0x8
c001d320:	68 04 4b 02 c0       	push   0xc0024b04
c001d325:	50                   	push   eax
c001d326:	e8 c1 c0 fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001d32b:	83 c4 10             	add    esp,0x10
c001d32e:	ba 30 4c 02 c0       	mov    edx,0xc0024c30
c001d333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d337:	89 10                	mov    DWORD PTR [eax],edx
c001d339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d33d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d344:	90                   	nop
c001d345:	83 c4 0c             	add    esp,0xc
c001d348:	c3                   	ret    
c001d349:	90                   	nop

c001d34a <IDE::prepareInterrupt(unsigned char)>:
c001d34a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d34f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d353:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d35b:	c3                   	ret    

c001d35c <selectDrive(unsigned char, unsigned char)>:
c001d35c:	c3                   	ret    
c001d35d:	90                   	nop

c001d35e <IDE::getBase(unsigned char)>:
c001d35e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d367:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d36f:	c3                   	ret    

c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d370:	55                   	push   ebp
c001d371:	57                   	push   edi
c001d372:	56                   	push   esi
c001d373:	53                   	push   ebx
c001d374:	83 ec 1c             	sub    esp,0x1c
c001d377:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d37b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d37f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d383:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d387:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d38a:	80 f9 03             	cmp    cl,0x3
c001d38d:	77 4f                	ja     c001d3de <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001d38f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d393:	0f b6 f2             	movzx  esi,dl
c001d396:	0f b6 db             	movzx  ebx,bl
c001d399:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d39c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d3a1:	80 ca 80             	or     dl,0x80
c001d3a4:	52                   	push   edx
c001d3a5:	6a 0c                	push   0xc
c001d3a7:	56                   	push   esi
c001d3a8:	57                   	push   edi
c001d3a9:	e8 c2 ff ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3ae:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d3b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3b7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d3bb:	ee                   	out    dx,al
c001d3bc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d3c1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d3c5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d3c9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d3d1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d3d5:	83 c4 2c             	add    esp,0x2c
c001d3d8:	5b                   	pop    ebx
c001d3d9:	5e                   	pop    esi
c001d3da:	5f                   	pop    edi
c001d3db:	5d                   	pop    ebp
c001d3dc:	eb 92                	jmp    c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3de:	0f b6 cb             	movzx  ecx,bl
c001d3e1:	83 f9 07             	cmp    ecx,0x7
c001d3e4:	77 12                	ja     c001d3f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001d3e6:	0f b6 d2             	movzx  edx,dl
c001d3e9:	0f b6 db             	movzx  ebx,bl
c001d3ec:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001d3f4:	01 da                	add    edx,ebx
c001d3f6:	eb 2f                	jmp    c001d427 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d3f8:	83 f9 0d             	cmp    ecx,0xd
c001d3fb:	77 13                	ja     c001d410 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001d3fd:	0f b6 d2             	movzx  edx,dl
c001d400:	0f b6 db             	movzx  ebx,bl
c001d403:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d40a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d40e:	eb 17                	jmp    c001d427 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d410:	83 f9 15             	cmp    ecx,0x15
c001d413:	77 13                	ja     c001d428 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001d415:	0f b6 d2             	movzx  edx,dl
c001d418:	0f b6 db             	movzx  ebx,bl
c001d41b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d423:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d427:	ee                   	out    dx,al
c001d428:	83 c4 1c             	add    esp,0x1c
c001d42b:	5b                   	pop    ebx
c001d42c:	5e                   	pop    esi
c001d42d:	5f                   	pop    edi
c001d42e:	5d                   	pop    ebp
c001d42f:	c3                   	ret    

c001d430 <IDE::read(unsigned char, unsigned char)>:
c001d430:	57                   	push   edi
c001d431:	56                   	push   esi
c001d432:	53                   	push   ebx
c001d433:	83 ec 10             	sub    esp,0x10
c001d436:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d43a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d43e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d442:	8d 42 f8             	lea    eax,[edx-0x8]
c001d445:	3c 03                	cmp    al,0x3
c001d447:	77 48                	ja     c001d491 <IDE::read(unsigned char, unsigned char)+0x61>
c001d449:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d44d:	0f b6 f1             	movzx  esi,cl
c001d450:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001d453:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001d458:	0c 80                	or     al,0x80
c001d45a:	50                   	push   eax
c001d45b:	6a 0c                	push   0xc
c001d45d:	56                   	push   esi
c001d45e:	53                   	push   ebx
c001d45f:	e8 0c ff ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d468:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001d46d:	0f b6 d2             	movzx  edx,dl
c001d470:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d474:	ec                   	in     al,dx
c001d475:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d479:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001d47e:	52                   	push   edx
c001d47f:	6a 0c                	push   0xc
c001d481:	56                   	push   esi
c001d482:	53                   	push   ebx
c001d483:	e8 e8 fe ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d488:	83 c4 20             	add    esp,0x20
c001d48b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d48f:	eb 4c                	jmp    c001d4dd <IDE::read(unsigned char, unsigned char)+0xad>
c001d491:	0f b6 f2             	movzx  esi,dl
c001d494:	83 fe 07             	cmp    esi,0x7
c001d497:	77 12                	ja     c001d4ab <IDE::read(unsigned char, unsigned char)+0x7b>
c001d499:	0f b6 c9             	movzx  ecx,cl
c001d49c:	0f b6 d2             	movzx  edx,dl
c001d49f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001d4a7:	01 c2                	add    edx,eax
c001d4a9:	eb 31                	jmp    c001d4dc <IDE::read(unsigned char, unsigned char)+0xac>
c001d4ab:	83 fe 0d             	cmp    esi,0xd
c001d4ae:	77 13                	ja     c001d4c3 <IDE::read(unsigned char, unsigned char)+0x93>
c001d4b0:	0f b6 c9             	movzx  ecx,cl
c001d4b3:	0f b6 d2             	movzx  edx,dl
c001d4b6:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001d4bd:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d4c1:	eb 19                	jmp    c001d4dc <IDE::read(unsigned char, unsigned char)+0xac>
c001d4c3:	31 c0                	xor    eax,eax
c001d4c5:	83 fe 15             	cmp    esi,0x15
c001d4c8:	77 13                	ja     c001d4dd <IDE::read(unsigned char, unsigned char)+0xad>
c001d4ca:	0f b6 c9             	movzx  ecx,cl
c001d4cd:	0f b6 d2             	movzx  edx,dl
c001d4d0:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001d4d8:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d4dc:	ec                   	in     al,dx
c001d4dd:	83 c4 10             	add    esp,0x10
c001d4e0:	5b                   	pop    ebx
c001d4e1:	5e                   	pop    esi
c001d4e2:	5f                   	pop    edi
c001d4e3:	c3                   	ret    

c001d4e4 <IDE::waitInterrupt(unsigned char)>:
c001d4e4:	55                   	push   ebp
c001d4e5:	57                   	push   edi
c001d4e6:	56                   	push   esi
c001d4e7:	53                   	push   ebx
c001d4e8:	31 db                	xor    ebx,ebx
c001d4ea:	83 ec 0c             	sub    esp,0xc
c001d4ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d4f1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d4f6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d4fe:	89 e8                	mov    eax,ebp
c001d500:	84 c0                	test   al,al
c001d502:	75 30                	jne    c001d534 <IDE::waitInterrupt(unsigned char)+0x50>
c001d504:	50                   	push   eax
c001d505:	6a 0c                	push   0xc
c001d507:	56                   	push   esi
c001d508:	57                   	push   edi
c001d509:	e8 22 ff ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001d50e:	83 c4 10             	add    esp,0x10
c001d511:	a8 01                	test   al,0x1
c001d513:	75 27                	jne    c001d53c <IDE::waitInterrupt(unsigned char)+0x58>
c001d515:	f6 c3 04             	test   bl,0x4
c001d518:	75 12                	jne    c001d52c <IDE::waitInterrupt(unsigned char)+0x48>
c001d51a:	83 fb 32             	cmp    ebx,0x32
c001d51d:	7e 0d                	jle    c001d52c <IDE::waitInterrupt(unsigned char)+0x48>
c001d51f:	83 ec 0c             	sub    esp,0xc
c001d522:	6a 64                	push   0x64
c001d524:	e8 c3 8d ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001d529:	83 c4 10             	add    esp,0x10
c001d52c:	83 fb 3c             	cmp    ebx,0x3c
c001d52f:	74 0b                	je     c001d53c <IDE::waitInterrupt(unsigned char)+0x58>
c001d531:	43                   	inc    ebx
c001d532:	eb c2                	jmp    c001d4f6 <IDE::waitInterrupt(unsigned char)+0x12>
c001d534:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d53c:	83 c4 0c             	add    esp,0xc
c001d53f:	89 e8                	mov    eax,ebp
c001d541:	5b                   	pop    ebx
c001d542:	5e                   	pop    esi
c001d543:	5f                   	pop    edi
c001d544:	5d                   	pop    ebp
c001d545:	c3                   	ret    

c001d546 <ideChannel0IRQHandler(regs*, void*)>:
c001d546:	83 ec 10             	sub    esp,0x10
c001d549:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d54d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d554:	6a 07                	push   0x7
c001d556:	6a 00                	push   0x0
c001d558:	50                   	push   eax
c001d559:	e8 d2 fe ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001d55e:	83 c4 1c             	add    esp,0x1c
c001d561:	c3                   	ret    

c001d562 <ideChannel1IRQHandler(regs*, void*)>:
c001d562:	83 ec 10             	sub    esp,0x10
c001d565:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d569:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d570:	6a 07                	push   0x7
c001d572:	6a 01                	push   0x1
c001d574:	50                   	push   eax
c001d575:	e8 b6 fe ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001d57a:	83 c4 1c             	add    esp,0x1c
c001d57d:	c3                   	ret    

c001d57e <IDE::enableIRQs(unsigned char, bool)>:
c001d57e:	57                   	push   edi
c001d57f:	b8 02 00 00 00       	mov    eax,0x2
c001d584:	56                   	push   esi
c001d585:	53                   	push   ebx
c001d586:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d58b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d58f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d593:	74 02                	je     c001d597 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001d595:	31 c0                	xor    eax,eax
c001d597:	0f b6 db             	movzx  ebx,bl
c001d59a:	bf 04 00 00 00       	mov    edi,0x4
c001d59f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001d5a6:	50                   	push   eax
c001d5a7:	6a 0c                	push   0xc
c001d5a9:	53                   	push   ebx
c001d5aa:	56                   	push   esi
c001d5ab:	e8 c0 fd ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5b0:	83 c4 10             	add    esp,0x10
c001d5b3:	50                   	push   eax
c001d5b4:	6a 0c                	push   0xc
c001d5b6:	53                   	push   ebx
c001d5b7:	56                   	push   esi
c001d5b8:	e8 73 fe ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001d5bd:	83 c4 10             	add    esp,0x10
c001d5c0:	4f                   	dec    edi
c001d5c1:	75 f0                	jne    c001d5b3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001d5c3:	5b                   	pop    ebx
c001d5c4:	5e                   	pop    esi
c001d5c5:	5f                   	pop    edi
c001d5c6:	c3                   	ret    
c001d5c7:	90                   	nop

c001d5c8 <IDE::open(int, int, void*)>:
c001d5c8:	55                   	push   ebp
c001d5c9:	57                   	push   edi
c001d5ca:	56                   	push   esi
c001d5cb:	53                   	push   ebx
c001d5cc:	83 ec 1c             	sub    esp,0x1c
c001d5cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5d3:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d5da:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d5e3:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d5ec:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d5f3:	0f 85 80 02 00 00    	jne    c001d879 <IDE::open(int, int, void*)+0x2b1>
c001d5f9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d5ff:	a8 70                	test   al,0x70
c001d601:	75 44                	jne    c001d647 <IDE::open(int, int, void*)+0x7f>
c001d603:	ba 20 84 00 00       	mov    edx,0x8420
c001d608:	0f a3 c2             	bt     edx,eax
c001d60b:	73 3a                	jae    c001d647 <IDE::open(int, int, void*)+0x7f>
c001d60d:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d613:	83 ec 0c             	sub    esp,0xc
c001d616:	83 e0 fc             	and    eax,0xfffffffc
c001d619:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d620:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d626:	83 e0 fc             	and    eax,0xfffffffc
c001d629:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d630:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d636:	83 e0 fc             	and    eax,0xfffffffc
c001d639:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d640:	68 25 23 02 c0       	push   0xc0022325
c001d645:	eb 60                	jmp    c001d6a7 <IDE::open(int, int, void*)+0xdf>
c001d647:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d651:	be 64 00 00 00       	mov    esi,0x64
c001d656:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d660:	57                   	push   edi
c001d661:	57                   	push   edi
c001d662:	68 1c 4b 02 c0       	push   0xc0024b1c
c001d667:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001d66b:	57                   	push   edi
c001d66c:	e8 df 2f fe ff       	call   c0000650 <strcpy>
c001d671:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001d678:	31 d2                	xor    edx,edx
c001d67a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d67d:	89 c8                	mov    eax,ecx
c001d67f:	f7 f6                	div    esi
c001d681:	be 0a 00 00 00       	mov    esi,0xa
c001d686:	31 d2                	xor    edx,edx
c001d688:	83 c0 30             	add    eax,0x30
c001d68b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d68f:	89 c8                	mov    eax,ecx
c001d691:	f7 f6                	div    esi
c001d693:	89 d1                	mov    ecx,edx
c001d695:	31 d2                	xor    edx,edx
c001d697:	f7 f6                	div    esi
c001d699:	83 c1 30             	add    ecx,0x30
c001d69c:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001d6a0:	83 c2 30             	add    edx,0x30
c001d6a3:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001d6a7:	e8 87 f1 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d6ac:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d6b3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d6b8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d6bf:	83 c4 10             	add    esp,0x10
c001d6c2:	89 fa                	mov    edx,edi
c001d6c4:	c1 e1 10             	shl    ecx,0x10
c001d6c7:	c1 e0 0b             	shl    eax,0xb
c001d6ca:	09 c1                	or     ecx,eax
c001d6cc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d6d3:	c1 e0 08             	shl    eax,0x8
c001d6d6:	09 c1                	or     ecx,eax
c001d6d8:	89 c8                	mov    eax,ecx
c001d6da:	0d 08 00 00 80       	or     eax,0x80000008
c001d6df:	ef                   	out    dx,eax
c001d6e0:	be fc 0c 00 00       	mov    esi,0xcfc
c001d6e5:	89 f2                	mov    edx,esi
c001d6e7:	ed                   	in     eax,dx
c001d6e8:	c1 e8 10             	shr    eax,0x10
c001d6eb:	3d ff ff 00 00       	cmp    eax,0xffff
c001d6f0:	0f 84 e1 00 00 00    	je     c001d7d7 <IDE::open(int, int, void*)+0x20f>
c001d6f6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d6fc:	89 fa                	mov    edx,edi
c001d6fe:	89 c8                	mov    eax,ecx
c001d700:	ef                   	out    dx,eax
c001d701:	b0 fe                	mov    al,0xfe
c001d703:	89 f2                	mov    edx,esi
c001d705:	ee                   	out    dx,al
c001d706:	89 c8                	mov    eax,ecx
c001d708:	89 fa                	mov    edx,edi
c001d70a:	ef                   	out    dx,eax
c001d70b:	89 f2                	mov    edx,esi
c001d70d:	ed                   	in     eax,dx
c001d70e:	3c fe                	cmp    al,0xfe
c001d710:	0f 85 83 00 00 00    	jne    c001d799 <IDE::open(int, int, void*)+0x1d1>
c001d716:	83 ec 0c             	sub    esp,0xc
c001d719:	68 5b 23 02 c0       	push   0xc002235b
c001d71e:	e8 10 f1 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d723:	c7 04 24 22 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b22
c001d72a:	e8 1f 98 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d72f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d739:	c7 04 24 ac 25 02 c0 	mov    DWORD PTR [esp],0xc00225ac
c001d740:	e8 ee f0 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d745:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d74c:	89 fa                	mov    edx,edi
c001d74e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d755:	c1 e1 10             	shl    ecx,0x10
c001d758:	c1 e0 08             	shl    eax,0x8
c001d75b:	09 c1                	or     ecx,eax
c001d75d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d764:	c1 e0 0b             	shl    eax,0xb
c001d767:	09 c1                	or     ecx,eax
c001d769:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d76f:	89 c8                	mov    eax,ecx
c001d771:	ef                   	out    dx,eax
c001d772:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001d778:	89 f2                	mov    edx,esi
c001d77a:	89 e8                	mov    eax,ebp
c001d77c:	ee                   	out    dx,al
c001d77d:	89 c8                	mov    eax,ecx
c001d77f:	89 fa                	mov    edx,edi
c001d781:	ef                   	out    dx,eax
c001d782:	89 f2                	mov    edx,esi
c001d784:	ed                   	in     eax,dx
c001d785:	0f b6 c0             	movzx  eax,al
c001d788:	83 c4 10             	add    esp,0x10
c001d78b:	39 e8                	cmp    eax,ebp
c001d78d:	74 58                	je     c001d7e7 <IDE::open(int, int, void*)+0x21f>
c001d78f:	83 ec 0c             	sub    esp,0xc
c001d792:	68 37 4b 02 c0       	push   0xc0024b37
c001d797:	eb 46                	jmp    c001d7df <IDE::open(int, int, void*)+0x217>
c001d799:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001d7a2:	75 29                	jne    c001d7cd <IDE::open(int, int, void*)+0x205>
c001d7a4:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001d7ab:	3d 8a 00 00 00       	cmp    eax,0x8a
c001d7b0:	74 05                	je     c001d7b7 <IDE::open(int, int, void*)+0x1ef>
c001d7b2:	83 c0 80             	add    eax,0xffffff80
c001d7b5:	75 16                	jne    c001d7cd <IDE::open(int, int, void*)+0x205>
c001d7b7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d7be:	83 ec 0c             	sub    esp,0xc
c001d7c1:	68 7e 34 02 c0       	push   0xc002347e
c001d7c6:	e8 68 f0 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d7cb:	eb 17                	jmp    c001d7e4 <IDE::open(int, int, void*)+0x21c>
c001d7cd:	83 ec 0c             	sub    esp,0xc
c001d7d0:	68 3f 4b 02 c0       	push   0xc0024b3f
c001d7d5:	eb 08                	jmp    c001d7df <IDE::open(int, int, void*)+0x217>
c001d7d7:	83 ec 0c             	sub    esp,0xc
c001d7da:	68 70 4b 02 c0       	push   0xc0024b70
c001d7df:	e8 de 1c ff ff       	call   c000f4c2 <KePanic(char const*)>
c001d7e4:	83 c4 10             	add    esp,0x10
c001d7e7:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001d7ee:	0f 84 bf 00 00 00    	je     c001d8b3 <IDE::open(int, int, void*)+0x2eb>
c001d7f4:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001d7fa:	83 ec 0c             	sub    esp,0xc
c001d7fd:	83 e0 fc             	and    eax,0xfffffffc
c001d800:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001d807:	83 c0 08             	add    eax,0x8
c001d80a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001d811:	68 9a 4b 02 c0       	push   0xc0024b9a
c001d816:	e8 33 97 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d81b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d822:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d829:	50                   	push   eax
c001d82a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d831:	50                   	push   eax
c001d832:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d839:	50                   	push   eax
c001d83a:	ff 35 e0 e0 02 c0    	push   DWORD PTR ds:0xc002e0e0
c001d840:	e8 8f f0 ff ff       	call   c001c8d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d845:	83 c4 18             	add    esp,0x18
c001d848:	83 c8 07             	or     eax,0x7
c001d84b:	0f b7 c0             	movzx  eax,ax
c001d84e:	50                   	push   eax
c001d84f:	6a 04                	push   0x4
c001d851:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d858:	50                   	push   eax
c001d859:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d860:	50                   	push   eax
c001d861:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d868:	50                   	push   eax
c001d869:	ff 35 e0 e0 02 c0    	push   DWORD PTR ds:0xc002e0e0
c001d86f:	e8 9c f2 ff ff       	call   c001cb10 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001d874:	83 c4 20             	add    esp,0x20
c001d877:	eb 3a                	jmp    c001d8b3 <IDE::open(int, int, void*)+0x2eb>
c001d879:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d880:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001d886:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d88d:	05 06 02 00 00       	add    eax,0x206
c001d892:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d899:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001d8a0:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d8a7:	05 06 02 00 00       	add    eax,0x206
c001d8ac:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d8b3:	83 ec 0c             	sub    esp,0xc
c001d8b6:	68 03 2b 02 c0       	push   0xc0022b03
c001d8bb:	e8 73 ef fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d8c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001d8c6:	83 c4 10             	add    esp,0x10
c001d8c9:	89 c2                	mov    edx,eax
c001d8cb:	83 e2 0f             	and    edx,0xf
c001d8ce:	83 fa 08             	cmp    edx,0x8
c001d8d1:	75 0a                	jne    c001d8dd <IDE::open(int, int, void*)+0x315>
c001d8d3:	83 e8 02             	sub    eax,0x2
c001d8d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d8dd:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001d8e3:	89 c2                	mov    edx,eax
c001d8e5:	83 e2 0f             	and    edx,0xf
c001d8e8:	83 fa 08             	cmp    edx,0x8
c001d8eb:	75 0a                	jne    c001d8f7 <IDE::open(int, int, void*)+0x32f>
c001d8ed:	83 e8 02             	sub    eax,0x2
c001d8f0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001d8f7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001d8fe:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001d905:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d908:	89 d0                	mov    eax,edx
c001d90a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d90e:	8d 7a 01             	lea    edi,[edx+0x1]
c001d911:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001d915:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001d919:	83 e1 3f             	and    ecx,0x3f
c001d91c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d920:	89 f9                	mov    ecx,edi
c001d922:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001d929:	8d 78 02             	lea    edi,[eax+0x2]
c001d92c:	0f b6 c9             	movzx  ecx,cl
c001d92f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d932:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001d936:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d93a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d93e:	83 e2 3f             	and    edx,0x3f
c001d941:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d945:	89 f9                	mov    ecx,edi
c001d947:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001d94d:	8d 78 03             	lea    edi,[eax+0x3]
c001d950:	0f b6 d1             	movzx  edx,cl
c001d953:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d956:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001d95a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d95e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001d962:	83 e1 3f             	and    ecx,0x3f
c001d965:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d969:	89 fa                	mov    edx,edi
c001d96b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001d971:	8d 78 04             	lea    edi,[eax+0x4]
c001d974:	0f b6 ca             	movzx  ecx,dl
c001d977:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d97a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001d97e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d982:	89 fa                	mov    edx,edi
c001d984:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001d98a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d98e:	83 e2 3f             	and    edx,0x3f
c001d991:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d995:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001d99c:	66 85 f6             	test   si,si
c001d99f:	74 24                	je     c001d9c5 <IDE::open(int, int, void*)+0x3fd>
c001d9a1:	89 f9                	mov    ecx,edi
c001d9a3:	83 c0 05             	add    eax,0x5
c001d9a6:	0f b6 d1             	movzx  edx,cl
c001d9a9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d9ac:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d9b0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001d9b4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001d9ba:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001d9be:	83 e0 3f             	and    eax,0x3f
c001d9c1:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001d9c5:	83 ec 0c             	sub    esp,0xc
c001d9c8:	68 b2 4b 02 c0       	push   0xc0024bb2
c001d9cd:	e8 61 ee fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d9d2:	58                   	pop    eax
c001d9d3:	5a                   	pop    edx
c001d9d4:	6a 00                	push   0x0
c001d9d6:	53                   	push   ebx
c001d9d7:	e8 6e f9 ff ff       	call   c001d34a <IDE::prepareInterrupt(unsigned char)>
c001d9dc:	59                   	pop    ecx
c001d9dd:	5e                   	pop    esi
c001d9de:	6a 01                	push   0x1
c001d9e0:	53                   	push   ebx
c001d9e1:	e8 64 f9 ff ff       	call   c001d34a <IDE::prepareInterrupt(unsigned char)>
c001d9e6:	c7 04 24 01 44 02 c0 	mov    DWORD PTR [esp],0xc0024401
c001d9ed:	e8 41 ee fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001d9f2:	83 c4 0c             	add    esp,0xc
c001d9f5:	6a 00                	push   0x0
c001d9f7:	6a 00                	push   0x0
c001d9f9:	53                   	push   ebx
c001d9fa:	e8 7f fb ff ff       	call   c001d57e <IDE::enableIRQs(unsigned char, bool)>
c001d9ff:	83 c4 0c             	add    esp,0xc
c001da02:	6a 00                	push   0x0
c001da04:	6a 01                	push   0x1
c001da06:	53                   	push   ebx
c001da07:	e8 72 fb ff ff       	call   c001d57e <IDE::enableIRQs(unsigned char, bool)>
c001da0c:	c7 04 24 b4 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bb4
c001da13:	e8 1b ee fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001da18:	83 c4 10             	add    esp,0x10
c001da1b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001da22:	74 3c                	je     c001da60 <IDE::open(int, int, void*)+0x498>
c001da24:	83 ec 0c             	sub    esp,0xc
c001da27:	53                   	push   ebx
c001da28:	6a 01                	push   0x1
c001da2a:	68 46 d5 01 c0       	push   0xc001d546
c001da2f:	6a 0e                	push   0xe
c001da31:	53                   	push   ebx
c001da32:	e8 07 b6 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001da37:	83 c4 14             	add    esp,0x14
c001da3a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001da40:	53                   	push   ebx
c001da41:	6a 01                	push   0x1
c001da43:	68 62 d5 01 c0       	push   0xc001d562
c001da48:	6a 0f                	push   0xf
c001da4a:	53                   	push   ebx
c001da4b:	e8 ee b5 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001da50:	83 c4 14             	add    esp,0x14
c001da53:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001da59:	68 b2 27 02 c0       	push   0xc00227b2
c001da5e:	eb 40                	jmp    c001daa0 <IDE::open(int, int, void*)+0x4d8>
c001da60:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001da6a:	83 ec 0c             	sub    esp,0xc
c001da6d:	53                   	push   ebx
c001da6e:	6a 00                	push   0x0
c001da70:	68 46 d5 01 c0       	push   0xc001d546
c001da75:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001da7b:	53                   	push   ebx
c001da7c:	e8 bd b5 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001da81:	83 c4 14             	add    esp,0x14
c001da84:	53                   	push   ebx
c001da85:	6a 00                	push   0x0
c001da87:	68 62 d5 01 c0       	push   0xc001d562
c001da8c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001da92:	53                   	push   ebx
c001da93:	e8 a6 b5 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001da98:	83 c4 14             	add    esp,0x14
c001da9b:	68 6d 34 02 c0       	push   0xc002346d
c001daa0:	e8 8e ed fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	83 ec 0c             	sub    esp,0xc
c001daab:	68 b6 4b 02 c0       	push   0xc0024bb6
c001dab0:	e8 7e ed fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dab7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daba:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dabd:	c7 04 24 85 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b85
c001dac4:	e8 6a ed fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dac9:	83 c4 0c             	add    esp,0xc
c001dacc:	6a 07                	push   0x7
c001dace:	6a 00                	push   0x0
c001dad0:	53                   	push   ebx
c001dad1:	e8 5a f9 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dad6:	83 c4 0c             	add    esp,0xc
c001dad9:	6a 07                	push   0x7
c001dadb:	6a 01                	push   0x1
c001dadd:	53                   	push   ebx
c001dade:	e8 4d f9 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dae3:	c7 04 24 4c 32 02 c0 	mov    DWORD PTR [esp],0xc002324c
c001daea:	e8 44 ed fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001daef:	83 c4 0c             	add    esp,0xc
c001daf2:	6a 01                	push   0x1
c001daf4:	6a 00                	push   0x0
c001daf6:	53                   	push   ebx
c001daf7:	e8 82 fa ff ff       	call   c001d57e <IDE::enableIRQs(unsigned char, bool)>
c001dafc:	83 c4 0c             	add    esp,0xc
c001daff:	6a 01                	push   0x1
c001db01:	6a 01                	push   0x1
c001db03:	53                   	push   ebx
c001db04:	e8 75 fa ff ff       	call   c001d57e <IDE::enableIRQs(unsigned char, bool)>
c001db09:	c7 04 24 b9 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bb9
c001db10:	e8 1e ed fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001db15:	83 c4 2c             	add    esp,0x2c
c001db18:	31 c0                	xor    eax,eax
c001db1a:	5b                   	pop    ebx
c001db1b:	5e                   	pop    esi
c001db1c:	5f                   	pop    edi
c001db1d:	5d                   	pop    ebp
c001db1e:	c3                   	ret    
c001db1f:	90                   	nop

c001db20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001db20:	55                   	push   ebp
c001db21:	57                   	push   edi
c001db22:	56                   	push   esi
c001db23:	53                   	push   ebx
c001db24:	83 ec 1c             	sub    esp,0x1c
c001db27:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001db2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001db2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001db33:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001db37:	8d 42 f8             	lea    eax,[edx-0x8]
c001db3a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001db3e:	3c 03                	cmp    al,0x3
c001db40:	77 5a                	ja     c001db9c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001db42:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001db46:	0f b6 db             	movzx  ebx,bl
c001db49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001db4d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001db50:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001db55:	0c 80                	or     al,0x80
c001db57:	50                   	push   eax
c001db58:	6a 0c                	push   0xc
c001db5a:	53                   	push   ebx
c001db5b:	56                   	push   esi
c001db5c:	e8 0f f8 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db65:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001db6a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db6e:	0f b6 d2             	movzx  edx,dl
c001db71:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001db75:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001db77:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001db7c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001db80:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001db84:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001db8c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001db90:	83 c4 2c             	add    esp,0x2c
c001db93:	5b                   	pop    ebx
c001db94:	5e                   	pop    esi
c001db95:	5f                   	pop    edi
c001db96:	5d                   	pop    ebp
c001db97:	e9 d4 f7 ff ff       	jmp    c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db9c:	0f b6 c2             	movzx  eax,dl
c001db9f:	83 f8 07             	cmp    eax,0x7
c001dba2:	77 12                	ja     c001dbb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001dba4:	0f b6 db             	movzx  ebx,bl
c001dba7:	0f b6 c2             	movzx  eax,dl
c001dbaa:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001dbb2:	01 c2                	add    edx,eax
c001dbb4:	eb 2f                	jmp    c001dbe5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001dbb6:	83 f8 0d             	cmp    eax,0xd
c001dbb9:	77 13                	ja     c001dbce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001dbbb:	0f b6 db             	movzx  ebx,bl
c001dbbe:	0f b6 d2             	movzx  edx,dl
c001dbc1:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001dbc8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001dbcc:	eb 17                	jmp    c001dbe5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001dbce:	83 f8 15             	cmp    eax,0x15
c001dbd1:	77 14                	ja     c001dbe7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001dbd3:	0f b6 db             	movzx  ebx,bl
c001dbd6:	0f b6 d2             	movzx  edx,dl
c001dbd9:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001dbe1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001dbe5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dbe7:	83 c4 1c             	add    esp,0x1c
c001dbea:	5b                   	pop    ebx
c001dbeb:	5e                   	pop    esi
c001dbec:	5f                   	pop    edi
c001dbed:	5d                   	pop    ebp
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <IDE::detect()>:
c001dbf0:	55                   	push   ebp
c001dbf1:	57                   	push   edi
c001dbf2:	56                   	push   esi
c001dbf3:	53                   	push   ebx
c001dbf4:	81 ec 28 02 00 00    	sub    esp,0x228
c001dbfa:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001dc01:	68 bb 4b 02 c0       	push   0xc0024bbb
c001dc06:	e8 28 ec fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dc0b:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001dc11:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001dc1d:	0f 85 26 04 00 00    	jne    c001e049 <IDE::detect()+0x459>
c001dc23:	83 ec 0c             	sub    esp,0xc
c001dc26:	31 f6                	xor    esi,esi
c001dc28:	68 be 4b 02 c0       	push   0xc0024bbe
c001dc2d:	31 ff                	xor    edi,edi
c001dc2f:	e8 ff eb fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dc34:	83 c4 10             	add    esp,0x10
c001dc37:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001dc3e:	83 ec 0c             	sub    esp,0xc
c001dc41:	68 c1 4b 02 c0       	push   0xc0024bc1
c001dc46:	e8 e8 eb fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dc4b:	83 c4 10             	add    esp,0x10
c001dc4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc55:	83 ec 0c             	sub    esp,0xc
c001dc58:	31 ed                	xor    ebp,ebp
c001dc5a:	68 c4 4b 02 c0       	push   0xc0024bc4
c001dc5f:	e8 cf eb fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dc64:	89 f8                	mov    eax,edi
c001dc66:	c1 e0 06             	shl    eax,0x6
c001dc69:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001dc71:	c7 04 24 c7 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bc7
c001dc78:	e8 b6 eb fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dc7d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dc81:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001dc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc89:	c1 e0 04             	shl    eax,0x4
c001dc8c:	83 c8 a0             	or     eax,0xffffffa0
c001dc8f:	0f b6 c0             	movzx  eax,al
c001dc92:	50                   	push   eax
c001dc93:	6a 06                	push   0x6
c001dc95:	56                   	push   esi
c001dc96:	53                   	push   ebx
c001dc97:	e8 d4 f6 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc9c:	83 c4 1c             	add    esp,0x1c
c001dc9f:	6a 0c                	push   0xc
c001dca1:	56                   	push   esi
c001dca2:	53                   	push   ebx
c001dca3:	e8 88 f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dca8:	83 c4 0c             	add    esp,0xc
c001dcab:	6a 0c                	push   0xc
c001dcad:	56                   	push   esi
c001dcae:	53                   	push   ebx
c001dcaf:	e8 7c f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dcb4:	83 c4 0c             	add    esp,0xc
c001dcb7:	6a 0c                	push   0xc
c001dcb9:	56                   	push   esi
c001dcba:	53                   	push   ebx
c001dcbb:	e8 70 f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dcc0:	83 c4 0c             	add    esp,0xc
c001dcc3:	6a 0c                	push   0xc
c001dcc5:	56                   	push   esi
c001dcc6:	53                   	push   ebx
c001dcc7:	e8 64 f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dccc:	c7 04 24 ca 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bca
c001dcd3:	e8 5b eb fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dcd8:	68 ec 00 00 00       	push   0xec
c001dcdd:	6a 07                	push   0x7
c001dcdf:	56                   	push   esi
c001dce0:	53                   	push   ebx
c001dce1:	e8 8a f6 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dce6:	83 c4 1c             	add    esp,0x1c
c001dce9:	6a 0c                	push   0xc
c001dceb:	56                   	push   esi
c001dcec:	53                   	push   ebx
c001dced:	e8 3e f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dcf2:	83 c4 0c             	add    esp,0xc
c001dcf5:	6a 0c                	push   0xc
c001dcf7:	56                   	push   esi
c001dcf8:	53                   	push   ebx
c001dcf9:	e8 32 f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dcfe:	83 c4 0c             	add    esp,0xc
c001dd01:	6a 0c                	push   0xc
c001dd03:	56                   	push   esi
c001dd04:	53                   	push   ebx
c001dd05:	e8 26 f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dd0a:	83 c4 0c             	add    esp,0xc
c001dd0d:	6a 0c                	push   0xc
c001dd0f:	56                   	push   esi
c001dd10:	53                   	push   ebx
c001dd11:	e8 1a f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dd16:	c7 04 24 cd 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bcd
c001dd1d:	e8 11 eb fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dd22:	83 c4 0c             	add    esp,0xc
c001dd25:	6a 0c                	push   0xc
c001dd27:	56                   	push   esi
c001dd28:	53                   	push   ebx
c001dd29:	e8 02 f7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dd2e:	83 c4 10             	add    esp,0x10
c001dd31:	84 c0                	test   al,al
c001dd33:	75 1f                	jne    c001dd54 <IDE::detect()+0x164>
c001dd35:	83 ec 0c             	sub    esp,0xc
c001dd38:	68 d0 4b 02 c0       	push   0xc0024bd0
c001dd3d:	e8 f1 ea fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dd42:	e9 e0 02 00 00       	jmp    c001e027 <IDE::detect()+0x437>
c001dd47:	a8 80                	test   al,0x80
c001dd49:	74 21                	je     c001dd6c <IDE::detect()+0x17c>
c001dd4b:	45                   	inc    ebp
c001dd4c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001dd52:	7f 1e                	jg     c001dd72 <IDE::detect()+0x182>
c001dd54:	50                   	push   eax
c001dd55:	6a 0c                	push   0xc
c001dd57:	56                   	push   esi
c001dd58:	53                   	push   ebx
c001dd59:	e8 d2 f6 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001dd5e:	83 c4 10             	add    esp,0x10
c001dd61:	a8 01                	test   al,0x1
c001dd63:	74 e2                	je     c001dd47 <IDE::detect()+0x157>
c001dd65:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001dd6a:	eb 22                	jmp    c001dd8e <IDE::detect()+0x19e>
c001dd6c:	a8 08                	test   al,0x8
c001dd6e:	74 db                	je     c001dd4b <IDE::detect()+0x15b>
c001dd70:	eb 17                	jmp    c001dd89 <IDE::detect()+0x199>
c001dd72:	83 ec 0c             	sub    esp,0xc
c001dd75:	6a 32                	push   0x32
c001dd77:	e8 70 85 ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001dd7c:	83 c4 10             	add    esp,0x10
c001dd7f:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001dd85:	75 cd                	jne    c001dd54 <IDE::detect()+0x164>
c001dd87:	eb dc                	jmp    c001dd65 <IDE::detect()+0x175>
c001dd89:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001dd8e:	83 ec 0c             	sub    esp,0xc
c001dd91:	68 d3 4b 02 c0       	push   0xc0024bd3
c001dd96:	e8 98 ea fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dd9b:	83 c4 10             	add    esp,0x10
c001dd9e:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001dda3:	74 57                	je     c001ddfc <IDE::detect()+0x20c>
c001dda5:	50                   	push   eax
c001dda6:	6a 04                	push   0x4
c001dda8:	56                   	push   esi
c001dda9:	53                   	push   ebx
c001ddaa:	e8 81 f6 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001ddaf:	83 c4 0c             	add    esp,0xc
c001ddb2:	6a 05                	push   0x5
c001ddb4:	56                   	push   esi
c001ddb5:	53                   	push   ebx
c001ddb6:	89 c5                	mov    ebp,eax
c001ddb8:	e8 73 f6 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001ddbd:	89 e9                	mov    ecx,ebp
c001ddbf:	83 c4 10             	add    esp,0x10
c001ddc2:	0f b6 e9             	movzx  ebp,cl
c001ddc5:	83 fd 14             	cmp    ebp,0x14
c001ddc8:	75 04                	jne    c001ddce <IDE::detect()+0x1de>
c001ddca:	3c eb                	cmp    al,0xeb
c001ddcc:	74 11                	je     c001dddf <IDE::detect()+0x1ef>
c001ddce:	83 fd 69             	cmp    ebp,0x69
c001ddd1:	0f 85 53 02 00 00    	jne    c001e02a <IDE::detect()+0x43a>
c001ddd7:	3c 96                	cmp    al,0x96
c001ddd9:	0f 85 4b 02 00 00    	jne    c001e02a <IDE::detect()+0x43a>
c001dddf:	68 a1 00 00 00       	push   0xa1
c001dde4:	6a 07                	push   0x7
c001dde6:	56                   	push   esi
c001dde7:	53                   	push   ebx
c001dde8:	e8 83 f5 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dded:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ddf4:	e8 f3 84 ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001ddf9:	83 c4 10             	add    esp,0x10
c001ddfc:	83 ec 0c             	sub    esp,0xc
c001ddff:	89 fd                	mov    ebp,edi
c001de01:	68 d6 4b 02 c0       	push   0xc0024bd6
c001de06:	e8 28 ea fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001de0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001de0f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001de16:	c1 e5 06             	shl    ebp,0x6
c001de19:	52                   	push   edx
c001de1a:	01 dd                	add    ebp,ebx
c001de1c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001de20:	6a 00                	push   0x0
c001de22:	56                   	push   esi
c001de23:	53                   	push   ebx
c001de24:	e8 f7 fc ff ff       	call   c001db20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001de29:	83 c4 14             	add    esp,0x14
c001de2c:	68 da 4b 02 c0       	push   0xc0024bda
c001de31:	e8 fd e9 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001de36:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001de3b:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001de42:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001de49:	89 f0                	mov    eax,esi
c001de4b:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001de51:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de55:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001de5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de5f:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001de66:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001de6e:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001de75:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001de7d:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001de83:	c7 04 24 de 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bde
c001de8a:	e8 a4 e9 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001de8f:	83 c4 10             	add    esp,0x10
c001de92:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001de99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001de9d:	74 09                	je     c001dea8 <IDE::detect()+0x2b8>
c001de9f:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001dea6:	eb 07                	jmp    c001deaf <IDE::detect()+0x2bf>
c001dea8:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001deaf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001deb3:	89 f8                	mov    eax,edi
c001deb5:	83 ec 0c             	sub    esp,0xc
c001deb8:	c1 e0 06             	shl    eax,0x6
c001debb:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001debe:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001dec4:	68 e2 4b 02 c0       	push   0xc0024be2
c001dec9:	e8 65 e9 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dece:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ded2:	89 e8                	mov    eax,ebp
c001ded4:	83 c4 10             	add    esp,0x10
c001ded7:	8d 6a 28             	lea    ebp,[edx+0x28]
c001deda:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001dedd:	83 c2 02             	add    edx,0x2
c001dee0:	83 c0 02             	add    eax,0x2
c001dee3:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001dee9:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001deec:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001def2:	39 d5                	cmp    ebp,edx
c001def4:	75 e4                	jne    c001deda <IDE::detect()+0x2ea>
c001def6:	89 f8                	mov    eax,edi
c001def8:	c1 e0 06             	shl    eax,0x6
c001defb:	01 d8                	add    eax,ebx
c001defd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001df04:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001df0b:	c1 ea 09             	shr    edx,0x9
c001df0e:	83 e2 01             	and    edx,0x1
c001df11:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001df18:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001df1e:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001df22:	74 0c                	je     c001df30 <IDE::detect()+0x340>
c001df24:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001df2d:	0f 95 c2             	setne  dl
c001df30:	89 fd                	mov    ebp,edi
c001df32:	83 ec 0c             	sub    esp,0xc
c001df35:	c1 e5 06             	shl    ebp,0x6
c001df38:	01 dd                	add    ebp,ebx
c001df3a:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001df40:	68 e6 4b 02 c0       	push   0xc0024be6
c001df45:	e8 e9 e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001df4a:	83 c4 10             	add    esp,0x10
c001df4d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001df52:	75 66                	jne    c001dfba <IDE::detect()+0x3ca>
c001df54:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001df5b:	0f 84 b8 00 00 00    	je     c001e019 <IDE::detect()+0x429>
c001df61:	83 ec 0c             	sub    esp,0xc
c001df64:	68 ea 4b 02 c0       	push   0xc0024bea
c001df69:	e8 c5 e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001df6e:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001df75:	e8 02 12 ff ff       	call   c000f17c <malloc>
c001df7a:	89 04 24             	mov    DWORD PTR [esp],eax
c001df7d:	89 c5                	mov    ebp,eax
c001df7f:	e8 44 05 00 00       	call   c001e4c8 <ATA::ATA()>
c001df84:	c7 04 24 ee 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bee
c001df8b:	e8 a3 e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001df90:	59                   	pop    ecx
c001df91:	58                   	pop    eax
c001df92:	55                   	push   ebp
c001df93:	53                   	push   ebx
c001df94:	e8 f9 b0 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001df99:	c7 04 24 f3 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bf3
c001dfa0:	e8 8e e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dfa5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dfa8:	53                   	push   ebx
c001dfa9:	57                   	push   edi
c001dfaa:	6a 00                	push   0x0
c001dfac:	55                   	push   ebp
c001dfad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dfb0:	83 c4 14             	add    esp,0x14
c001dfb3:	68 f8 4b 02 c0       	push   0xc0024bf8
c001dfb8:	eb 57                	jmp    c001e011 <IDE::detect()+0x421>
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	68 fd 4b 02 c0       	push   0xc0024bfd
c001dfc2:	e8 6c e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dfc7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001dfce:	e8 a9 11 ff ff       	call   c000f17c <malloc>
c001dfd3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfd6:	89 c5                	mov    ebp,eax
c001dfd8:	e8 b1 0c 00 00       	call   c001ec8e <ATAPI::ATAPI()>
c001dfdd:	c7 04 24 03 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c03
c001dfe4:	e8 4a e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dfe9:	58                   	pop    eax
c001dfea:	5a                   	pop    edx
c001dfeb:	55                   	push   ebp
c001dfec:	53                   	push   ebx
c001dfed:	e8 a0 b0 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001dff2:	c7 04 24 0a 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c0a
c001dff9:	e8 35 e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001dffe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e001:	53                   	push   ebx
c001e002:	57                   	push   edi
c001e003:	6a 00                	push   0x0
c001e005:	55                   	push   ebp
c001e006:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e009:	83 c4 14             	add    esp,0x14
c001e00c:	68 11 4c 02 c0       	push   0xc0024c11
c001e011:	e8 1d e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001e016:	83 c4 10             	add    esp,0x10
c001e019:	83 ec 0c             	sub    esp,0xc
c001e01c:	47                   	inc    edi
c001e01d:	68 18 4c 02 c0       	push   0xc0024c18
c001e022:	e8 0c e8 fe ff       	call   c000c833 <KeSetBootMessage(char const*)>
c001e027:	83 c4 10             	add    esp,0x10
c001e02a:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001e02e:	74 0c                	je     c001e03c <IDE::detect()+0x44c>
c001e030:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001e037:	e9 19 fc ff ff       	jmp    c001dc55 <IDE::detect()+0x65>
c001e03c:	4e                   	dec    esi
c001e03d:	74 0a                	je     c001e049 <IDE::detect()+0x459>
c001e03f:	be 01 00 00 00       	mov    esi,0x1
c001e044:	e9 f5 fb ff ff       	jmp    c001dc3e <IDE::detect()+0x4e>
c001e049:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e04f:	5b                   	pop    ebx
c001e050:	5e                   	pop    esi
c001e051:	5f                   	pop    edi
c001e052:	5d                   	pop    ebp
c001e053:	c3                   	ret    

c001e054 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e054:	55                   	push   ebp
c001e055:	57                   	push   edi
c001e056:	56                   	push   esi
c001e057:	53                   	push   ebx
c001e058:	83 ec 1c             	sub    esp,0x1c
c001e05b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e05f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e063:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001e067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e06b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e06f:	88 c3                	mov    bl,al
c001e071:	25 ff 00 00 00       	and    eax,0xff
c001e076:	0f 84 88 00 00 00    	je     c001e104 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e07c:	83 ec 0c             	sub    esp,0xc
c001e07f:	89 c7                	mov    edi,eax
c001e081:	68 1c 4c 02 c0       	push   0xc0024c1c
c001e086:	e8 c3 8e fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e08b:	83 c4 10             	add    esp,0x10
c001e08e:	83 ff 01             	cmp    edi,0x1
c001e091:	74 6b                	je     c001e0fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001e093:	83 ff 02             	cmp    edi,0x2
c001e096:	75 58                	jne    c001e0f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001e098:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001e09d:	50                   	push   eax
c001e09e:	6a 01                	push   0x1
c001e0a0:	01 ff                	add    edi,edi
c001e0a2:	09 fe                	or     esi,edi
c001e0a4:	89 f0                	mov    eax,esi
c001e0a6:	0f b6 f0             	movzx  esi,al
c001e0a9:	c1 e6 06             	shl    esi,0x6
c001e0ac:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001e0b4:	50                   	push   eax
c001e0b5:	55                   	push   ebp
c001e0b6:	e8 75 f3 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001e0bb:	83 c4 10             	add    esp,0x10
c001e0be:	a8 01                	test   al,0x1
c001e0c0:	74 02                	je     c001e0c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001e0c2:	b3 07                	mov    bl,0x7
c001e0c4:	a8 02                	test   al,0x2
c001e0c6:	74 02                	je     c001e0ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001e0c8:	b3 03                	mov    bl,0x3
c001e0ca:	a8 04                	test   al,0x4
c001e0cc:	74 02                	je     c001e0d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001e0ce:	b3 14                	mov    bl,0x14
c001e0d0:	a8 08                	test   al,0x8
c001e0d2:	74 02                	je     c001e0d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001e0d4:	b3 03                	mov    bl,0x3
c001e0d6:	a8 10                	test   al,0x10
c001e0d8:	74 02                	je     c001e0dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001e0da:	b3 15                	mov    bl,0x15
c001e0dc:	a8 20                	test   al,0x20
c001e0de:	74 02                	je     c001e0e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001e0e0:	b3 03                	mov    bl,0x3
c001e0e2:	a8 40                	test   al,0x40
c001e0e4:	74 02                	je     c001e0e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e0e6:	b3 16                	mov    bl,0x16
c001e0e8:	a8 80                	test   al,0x80
c001e0ea:	74 18                	je     c001e104 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e0ec:	b3 0d                	mov    bl,0xd
c001e0ee:	eb 14                	jmp    c001e104 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e0f0:	83 ff 03             	cmp    edi,0x3
c001e0f3:	74 0d                	je     c001e102 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001e0f5:	83 ff 04             	cmp    edi,0x4
c001e0f8:	75 0a                	jne    c001e104 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e0fa:	b3 08                	mov    bl,0x8
c001e0fc:	eb 06                	jmp    c001e104 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e0fe:	b3 13                	mov    bl,0x13
c001e100:	eb 02                	jmp    c001e104 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e102:	b3 17                	mov    bl,0x17
c001e104:	83 c4 1c             	add    esp,0x1c
c001e107:	88 d8                	mov    al,bl
c001e109:	5b                   	pop    ebx
c001e10a:	5e                   	pop    esi
c001e10b:	5f                   	pop    edi
c001e10c:	5d                   	pop    ebp
c001e10d:	c3                   	ret    

c001e10e <IDE::polling(unsigned char, unsigned int)>:
c001e10e:	57                   	push   edi
c001e10f:	56                   	push   esi
c001e110:	53                   	push   ebx
c001e111:	bb 04 00 00 00       	mov    ebx,0x4
c001e116:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e11a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e11f:	52                   	push   edx
c001e120:	6a 0c                	push   0xc
c001e122:	56                   	push   esi
c001e123:	57                   	push   edi
c001e124:	e8 07 f3 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001e129:	83 c4 10             	add    esp,0x10
c001e12c:	4b                   	dec    ebx
c001e12d:	75 f0                	jne    c001e11f <IDE::polling(unsigned char, unsigned int)+0x11>
c001e12f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e134:	50                   	push   eax
c001e135:	6a 0c                	push   0xc
c001e137:	56                   	push   esi
c001e138:	57                   	push   edi
c001e139:	e8 f2 f2 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001e13e:	83 c4 10             	add    esp,0x10
c001e141:	a8 01                	test   al,0x1
c001e143:	75 17                	jne    c001e15c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e145:	a8 20                	test   al,0x20
c001e147:	75 0f                	jne    c001e158 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e149:	4b                   	dec    ebx
c001e14a:	74 10                	je     c001e15c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e14c:	a8 80                	test   al,0x80
c001e14e:	75 e4                	jne    c001e134 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e150:	a8 08                	test   al,0x8
c001e152:	74 e0                	je     c001e134 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e154:	31 c0                	xor    eax,eax
c001e156:	eb 06                	jmp    c001e15e <IDE::polling(unsigned char, unsigned int)+0x50>
c001e158:	b0 01                	mov    al,0x1
c001e15a:	eb 02                	jmp    c001e15e <IDE::polling(unsigned char, unsigned int)+0x50>
c001e15c:	b0 02                	mov    al,0x2
c001e15e:	5b                   	pop    ebx
c001e15f:	5e                   	pop    esi
c001e160:	5f                   	pop    edi
c001e161:	c3                   	ret    

c001e162 <SATABus::close(int, int, void*)>:
c001e162:	31 c0                	xor    eax,eax
c001e164:	c3                   	ret    
c001e165:	90                   	nop

c001e166 <SATABus::detect()>:
c001e166:	c3                   	ret    
c001e167:	90                   	nop

c001e168 <SATABus::SATABus()>:
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16f:	83 ec 08             	sub    esp,0x8
c001e172:	68 54 4c 02 c0       	push   0xc0024c54
c001e177:	50                   	push   eax
c001e178:	e8 6f b2 fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001e17d:	83 c4 10             	add    esp,0x10
c001e180:	ba 80 4c 02 c0       	mov    edx,0xc0024c80
c001e185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e189:	89 10                	mov    DWORD PTR [eax],edx
c001e18b:	83 ec 0c             	sub    esp,0xc
c001e18e:	6a 50                	push   0x50
c001e190:	e8 05 16 ff ff       	call   c000f79a <Phys::allocateContiguousPages(int)>
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	89 c2                	mov    edx,eax
c001e19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e19e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e1a4:	83 ec 0c             	sub    esp,0xc
c001e1a7:	6a 50                	push   0x50
c001e1a9:	e8 ef 46 ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c001e1ae:	83 c4 10             	add    esp,0x10
c001e1b1:	89 c2                	mov    edx,eax
c001e1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e1bd:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c001e1c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1c6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e1cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1d0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	6a 03                	push   0x3
c001e1db:	6a 50                	push   0x50
c001e1dd:	51                   	push   ecx
c001e1de:	52                   	push   edx
c001e1df:	50                   	push   eax
c001e1e0:	e8 8b 4f ff ff       	call   c0013170 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e1e5:	83 c4 20             	add    esp,0x20
c001e1e8:	90                   	nop
c001e1e9:	83 c4 0c             	add    esp,0xc
c001e1ec:	c3                   	ret    
c001e1ed:	90                   	nop

c001e1ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e1ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1f2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e1f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e1f8:	09 c2                	or     edx,eax
c001e1fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e204:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e206:	31 c0                	xor    eax,eax
c001e208:	c1 e9 08             	shr    ecx,0x8
c001e20b:	83 e1 0f             	and    ecx,0xf
c001e20e:	39 c8                	cmp    eax,ecx
c001e210:	74 0a                	je     c001e21c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e212:	f6 c2 01             	test   dl,0x1
c001e215:	74 08                	je     c001e21f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e217:	d1 ea                	shr    edx,1
c001e219:	40                   	inc    eax
c001e21a:	eb f2                	jmp    c001e20e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e21c:	83 c8 ff             	or     eax,0xffffffff
c001e21f:	c3                   	ret    

c001e220 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e220:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e224:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e227:	89 c2                	mov    edx,eax
c001e229:	c1 ea 08             	shr    edx,0x8
c001e22c:	83 e2 0f             	and    edx,0xf
c001e22f:	4a                   	dec    edx
c001e230:	75 32                	jne    c001e264 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e232:	83 e0 0f             	and    eax,0xf
c001e235:	83 f8 03             	cmp    eax,0x3
c001e238:	75 2a                	jne    c001e264 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e23a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e23d:	b8 02 00 00 00       	mov    eax,0x2
c001e242:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e248:	74 1c                	je     c001e266 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e24a:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e250:	b8 04 00 00 00       	mov    eax,0x4
c001e255:	74 0f                	je     c001e266 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e257:	31 c0                	xor    eax,eax
c001e259:	83 fa 03             	cmp    edx,0x3
c001e25c:	0f 94 c0             	sete   al
c001e25f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e263:	c3                   	ret    
c001e264:	31 c0                	xor    eax,eax
c001e266:	c3                   	ret    
c001e267:	90                   	nop

c001e268 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e26c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e26f:	0f ba e2 0f          	bt     edx,0xf
c001e273:	72 f7                	jb     c001e26c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e275:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e278:	83 ca 10             	or     edx,0x10
c001e27b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e27e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e281:	83 ca 01             	or     edx,0x1
c001e284:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e287:	c3                   	ret    

c001e288 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e28c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e28f:	83 e2 fe             	and    edx,0xfffffffe
c001e292:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e295:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e298:	83 e2 ef             	and    edx,0xffffffef
c001e29b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e29e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2a1:	0f ba e2 0e          	bt     edx,0xe
c001e2a5:	72 f7                	jb     c001e29e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e2a7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2aa:	0f ba e2 0f          	bt     edx,0xf
c001e2ae:	72 ee                	jb     c001e29e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e2b0:	c3                   	ret    
c001e2b1:	90                   	nop

c001e2b2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e2b2:	55                   	push   ebp
c001e2b3:	57                   	push   edi
c001e2b4:	56                   	push   esi
c001e2b5:	53                   	push   ebx
c001e2b6:	83 ec 1c             	sub    esp,0x1c
c001e2b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e2c1:	53                   	push   ebx
c001e2c2:	57                   	push   edi
c001e2c3:	e8 c0 ff ff ff       	call   c001e288 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e2c8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001e2cc:	83 ec 0c             	sub    esp,0xc
c001e2cf:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001e2d5:	c1 e5 0a             	shl    ebp,0xa
c001e2d8:	01 e8                	add    eax,ebp
c001e2da:	89 03                	mov    DWORD PTR [ebx],eax
c001e2dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2de:	68 00 04 00 00       	push   0x400
c001e2e3:	6a 00                	push   0x0
c001e2e5:	50                   	push   eax
c001e2e6:	e8 05 22 fe ff       	call   c00004f0 <memset>
c001e2eb:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001e2f1:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001e2f5:	83 c4 1c             	add    esp,0x1c
c001e2f8:	01 e8                	add    eax,ebp
c001e2fa:	89 03                	mov    DWORD PTR [ebx],eax
c001e2fc:	c1 e6 08             	shl    esi,0x8
c001e2ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e306:	81 c6 00 80 00 00    	add    esi,0x8000
c001e30c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001e312:	01 f0                	add    eax,esi
c001e314:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e317:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e31a:	68 00 01 00 00       	push   0x100
c001e31f:	6a 00                	push   0x0
c001e321:	50                   	push   eax
c001e322:	e8 c9 21 fe ff       	call   c00004f0 <memset>
c001e327:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001e32d:	31 d2                	xor    edx,edx
c001e32f:	01 f0                	add    eax,esi
c001e331:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e334:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e33b:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001e341:	01 ee                	add    esi,ebp
c001e343:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	c1 e5 0d             	shl    ebp,0xd
c001e34d:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001e353:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001e359:	83 c6 20             	add    esi,0x20
c001e35c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e360:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001e366:	01 e8                	add    eax,ebp
c001e368:	01 d0                	add    eax,edx
c001e36a:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001e36d:	52                   	push   edx
c001e36e:	68 00 01 00 00       	push   0x100
c001e373:	6a 00                	push   0x0
c001e375:	50                   	push   eax
c001e376:	e8 75 21 fe ff       	call   c00004f0 <memset>
c001e37b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001e381:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001e388:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e38c:	83 c4 10             	add    esp,0x10
c001e38f:	01 e8                	add    eax,ebp
c001e391:	01 d0                	add    eax,edx
c001e393:	81 c2 00 01 00 00    	add    edx,0x100
c001e399:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001e39c:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001e3a2:	75 af                	jne    c001e353 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001e3a4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e3ab:	50                   	push   eax
c001e3ac:	50                   	push   eax
c001e3ad:	53                   	push   ebx
c001e3ae:	57                   	push   edi
c001e3af:	e8 b4 fe ff ff       	call   c001e268 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e3b4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e3bb:	83 c4 2c             	add    esp,0x2c
c001e3be:	5b                   	pop    ebx
c001e3bf:	5e                   	pop    esi
c001e3c0:	5f                   	pop    edi
c001e3c1:	5d                   	pop    ebp
c001e3c2:	c3                   	ret    
c001e3c3:	90                   	nop

c001e3c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e3c4:	55                   	push   ebp
c001e3c5:	57                   	push   edi
c001e3c6:	56                   	push   esi
c001e3c7:	53                   	push   ebx
c001e3c8:	31 db                	xor    ebx,ebx
c001e3ca:	83 ec 0c             	sub    esp,0xc
c001e3cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e3d5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e3d8:	f7 c7 01 00 00 00    	test   edi,0x1
c001e3de:	74 7a                	je     c001e45a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e3e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e3e4:	89 d8                	mov    eax,ebx
c001e3e6:	c1 e0 07             	shl    eax,0x7
c001e3e9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e3f0:	55                   	push   ebp
c001e3f1:	56                   	push   esi
c001e3f2:	e8 29 fe ff ff       	call   c001e220 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e3f7:	5a                   	pop    edx
c001e3f8:	59                   	pop    ecx
c001e3f9:	83 f8 01             	cmp    eax,0x1
c001e3fc:	75 21                	jne    c001e41f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e3fe:	50                   	push   eax
c001e3ff:	53                   	push   ebx
c001e400:	55                   	push   ebp
c001e401:	56                   	push   esi
c001e402:	e8 ab fe ff ff       	call   c001e2b2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e407:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e40e:	e8 69 0d ff ff       	call   c000f17c <malloc>
c001e413:	89 04 24             	mov    DWORD PTR [esp],eax
c001e416:	89 c5                	mov    ebp,eax
c001e418:	e8 37 0f 00 00       	call   c001f354 <SATA::SATA()>
c001e41d:	eb 24                	jmp    c001e443 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e41f:	83 f8 04             	cmp    eax,0x4
c001e422:	75 36                	jne    c001e45a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e424:	51                   	push   ecx
c001e425:	53                   	push   ebx
c001e426:	55                   	push   ebp
c001e427:	56                   	push   esi
c001e428:	e8 85 fe ff ff       	call   c001e2b2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e42d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e434:	e8 43 0d ff ff       	call   c000f17c <malloc>
c001e439:	89 04 24             	mov    DWORD PTR [esp],eax
c001e43c:	89 c5                	mov    ebp,eax
c001e43e:	e8 a7 12 00 00       	call   c001f6ea <SATAPI::SATAPI()>
c001e443:	58                   	pop    eax
c001e444:	5a                   	pop    edx
c001e445:	55                   	push   ebp
c001e446:	56                   	push   esi
c001e447:	e8 46 ac fe ff       	call   c0009092 <Device::addChild(Device*)>
c001e44c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e44f:	56                   	push   esi
c001e450:	6a 00                	push   0x0
c001e452:	53                   	push   ebx
c001e453:	55                   	push   ebp
c001e454:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e457:	83 c4 20             	add    esp,0x20
c001e45a:	d1 ef                	shr    edi,1
c001e45c:	43                   	inc    ebx
c001e45d:	83 fb 20             	cmp    ebx,0x20
c001e460:	0f 85 72 ff ff ff    	jne    c001e3d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e466:	83 c4 0c             	add    esp,0xc
c001e469:	5b                   	pop    ebx
c001e46a:	5e                   	pop    esi
c001e46b:	5f                   	pop    edi
c001e46c:	5d                   	pop    ebp
c001e46d:	c3                   	ret    

c001e46e <SATABus::open(int, int, void*)>:
c001e46e:	53                   	push   ebx
c001e46f:	83 ec 08             	sub    esp,0x8
c001e472:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e476:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001e47c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e482:	e8 dd 79 ff ff       	call   c0015e64 <KeDisablePreemption()>
c001e487:	52                   	push   edx
c001e488:	52                   	push   edx
c001e489:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001e48f:	53                   	push   ebx
c001e490:	e8 2f ff ff ff       	call   c001e3c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e495:	e8 f2 79 ff ff       	call   c0015e8c <KeRestorePreemption()>
c001e49a:	83 c4 18             	add    esp,0x18
c001e49d:	31 c0                	xor    eax,eax
c001e49f:	5b                   	pop    ebx
c001e4a0:	c3                   	ret    
c001e4a1:	90                   	nop

c001e4a2 <ATA::close(int, int, void*)>:
c001e4a2:	83 ec 0c             	sub    esp,0xc
c001e4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4af:	85 c0                	test   eax,eax
c001e4b1:	74 0c                	je     c001e4bf <ATA::close(int, int, void*)+0x1d>
c001e4b3:	8b 10                	mov    edx,DWORD PTR [eax]
c001e4b5:	83 ec 0c             	sub    esp,0xc
c001e4b8:	50                   	push   eax
c001e4b9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e4bc:	83 c4 10             	add    esp,0x10
c001e4bf:	31 c0                	xor    eax,eax
c001e4c1:	83 c4 0c             	add    esp,0xc
c001e4c4:	c3                   	ret    
c001e4c5:	90                   	nop

c001e4c6 <ATA::powerSaving(PowerSavingLevel)>:
c001e4c6:	c3                   	ret    
c001e4c7:	90                   	nop

c001e4c8 <ATA::ATA()>:
c001e4c8:	83 ec 0c             	sub    esp,0xc
c001e4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cf:	83 ec 04             	sub    esp,0x4
c001e4d2:	68 00 02 00 00       	push   0x200
c001e4d7:	68 01 4e 02 c0       	push   0xc0024e01
c001e4dc:	50                   	push   eax
c001e4dd:	e8 94 af fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e4e2:	83 c4 10             	add    esp,0x10
c001e4e5:	ba 68 4d 02 c0       	mov    edx,0xc0024d68
c001e4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ee:	89 10                	mov    DWORD PTR [eax],edx
c001e4f0:	90                   	nop
c001e4f1:	83 c4 0c             	add    esp,0xc
c001e4f4:	c3                   	ret    
c001e4f5:	90                   	nop

c001e4f6 <ATA::flush(bool)>:
c001e4f6:	53                   	push   ebx
c001e4f7:	83 ec 08             	sub    esp,0x8
c001e4fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001e4ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e503:	83 f8 01             	cmp    eax,0x1
c001e506:	19 c0                	sbb    eax,eax
c001e508:	83 e0 fd             	and    eax,0xfffffffd
c001e50b:	05 ea 00 00 00       	add    eax,0xea
c001e510:	50                   	push   eax
c001e511:	6a 07                	push   0x7
c001e513:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e51a:	50                   	push   eax
c001e51b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e521:	e8 4a ee ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e526:	83 c4 0c             	add    esp,0xc
c001e529:	6a 00                	push   0x0
c001e52b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e532:	50                   	push   eax
c001e533:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e539:	e8 d0 fb ff ff       	call   c001e10e <IDE::polling(unsigned char, unsigned int)>
c001e53e:	83 c4 18             	add    esp,0x18
c001e541:	5b                   	pop    ebx
c001e542:	c3                   	ret    
c001e543:	90                   	nop

c001e544 <ATA::readyForCommand()>:
c001e544:	56                   	push   esi
c001e545:	53                   	push   ebx
c001e546:	53                   	push   ebx
c001e547:	31 db                	xor    ebx,ebx
c001e549:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e54d:	51                   	push   ecx
c001e54e:	6a 0c                	push   0xc
c001e550:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e557:	50                   	push   eax
c001e558:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e55e:	e8 cd ee ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001e563:	83 c4 10             	add    esp,0x10
c001e566:	a8 88                	test   al,0x88
c001e568:	74 1f                	je     c001e589 <ATA::readyForCommand()+0x45>
c001e56a:	43                   	inc    ebx
c001e56b:	83 fb 63             	cmp    ebx,0x63
c001e56e:	7e dd                	jle    c001e54d <ATA::readyForCommand()+0x9>
c001e570:	83 ec 0c             	sub    esp,0xc
c001e573:	6a 0a                	push   0xa
c001e575:	e8 72 7d ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001e57a:	83 c4 10             	add    esp,0x10
c001e57d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e583:	75 c8                	jne    c001e54d <ATA::readyForCommand()+0x9>
c001e585:	31 c0                	xor    eax,eax
c001e587:	eb 02                	jmp    c001e58b <ATA::readyForCommand()+0x47>
c001e589:	b0 01                	mov    al,0x1
c001e58b:	5a                   	pop    edx
c001e58c:	5b                   	pop    ebx
c001e58d:	5e                   	pop    esi
c001e58e:	c3                   	ret    
c001e58f:	90                   	nop

c001e590 <ATA::access(unsigned long long, int, void*, bool)>:
c001e590:	55                   	push   ebp
c001e591:	57                   	push   edi
c001e592:	56                   	push   esi
c001e593:	53                   	push   ebx
c001e594:	83 ec 2c             	sub    esp,0x2c
c001e597:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e59b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e59f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e5a3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e5a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e5af:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e5b3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e5b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e5bd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e5c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e5c7:	c1 e0 06             	shl    eax,0x6
c001e5ca:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e5d2:	74 5b                	je     c001e62f <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001e5d4:	89 fa                	mov    edx,edi
c001e5d6:	89 f0                	mov    eax,esi
c001e5d8:	c1 ea 1c             	shr    edx,0x1c
c001e5db:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001e5df:	89 d1                	mov    ecx,edx
c001e5e1:	09 c1                	or     ecx,eax
c001e5e3:	74 25                	je     c001e60a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001e5e5:	31 ed                	xor    ebp,ebp
c001e5e7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e5ee:	89 fa                	mov    edx,edi
c001e5f0:	89 f0                	mov    eax,esi
c001e5f2:	0f ad d0             	shrd   eax,edx,cl
c001e5f5:	d3 ea                	shr    edx,cl
c001e5f7:	f6 c1 20             	test   cl,0x20
c001e5fa:	74 02                	je     c001e5fe <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001e5fc:	89 d0                	mov    eax,edx
c001e5fe:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e602:	45                   	inc    ebp
c001e603:	83 fd 06             	cmp    ebp,0x6
c001e606:	75 df                	jne    c001e5e7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001e608:	eb 71                	jmp    c001e67b <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001e60a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e60f:	89 f0                	mov    eax,esi
c001e611:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e618:	0f ac f8 10          	shrd   eax,edi,0x10
c001e61c:	bf 01 00 00 00       	mov    edi,0x1
c001e621:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e625:	c1 ee 18             	shr    esi,0x18
c001e628:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e62d:	eb 53                	jmp    c001e682 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001e62f:	6a 00                	push   0x0
c001e631:	6a 3f                	push   0x3f
c001e633:	57                   	push   edi
c001e634:	56                   	push   esi
c001e635:	e8 3a 25 00 00       	call   c0020b74 <__umoddi3>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	40                   	inc    eax
c001e63e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e642:	6a 00                	push   0x0
c001e644:	68 f0 03 00 00       	push   0x3f0
c001e649:	57                   	push   edi
c001e64a:	56                   	push   esi
c001e64b:	e8 24 24 00 00       	call   c0020a74 <__udivdi3>
c001e650:	83 c4 10             	add    esp,0x10
c001e653:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e658:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e65f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e664:	6a 00                	push   0x0
c001e666:	6a 3f                	push   0x3f
c001e668:	57                   	push   edi
c001e669:	31 ff                	xor    edi,edi
c001e66b:	56                   	push   esi
c001e66c:	e8 03 24 00 00       	call   c0020a74 <__udivdi3>
c001e671:	83 c4 10             	add    esp,0x10
c001e674:	83 e0 0f             	and    eax,0xf
c001e677:	89 c6                	mov    esi,eax
c001e679:	eb 07                	jmp    c001e682 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001e67b:	31 f6                	xor    esi,esi
c001e67d:	bf 02 00 00 00       	mov    edi,0x2
c001e682:	55                   	push   ebp
c001e683:	6a 00                	push   0x0
c001e685:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e68c:	50                   	push   eax
c001e68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e691:	e8 e8 ee ff ff       	call   c001d57e <IDE::enableIRQs(unsigned char, bool)>
c001e696:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e699:	e8 a6 fe ff ff       	call   c001e544 <ATA::readyForCommand()>
c001e69e:	83 c4 10             	add    esp,0x10
c001e6a1:	84 c0                	test   al,al
c001e6a3:	75 0a                	jne    c001e6af <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001e6a5:	be 01 00 00 00       	mov    esi,0x1
c001e6aa:	e9 df 02 00 00       	jmp    c001e98e <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001e6af:	fa                   	cli    
c001e6b0:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001e6b6:	f7 c7 03 00 00 00    	test   edi,0x3
c001e6bc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e6c2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e6c8:	75 0a                	jne    c001e6d4 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001e6ca:	c1 e0 04             	shl    eax,0x4
c001e6cd:	09 c6                	or     esi,eax
c001e6cf:	83 ce a0             	or     esi,0xffffffa0
c001e6d2:	eb 08                	jmp    c001e6dc <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001e6d4:	c1 e0 04             	shl    eax,0x4
c001e6d7:	09 c6                	or     esi,eax
c001e6d9:	83 ce e0             	or     esi,0xffffffe0
c001e6dc:	89 f0                	mov    eax,esi
c001e6de:	0f b6 d2             	movzx  edx,dl
c001e6e1:	0f b6 f0             	movzx  esi,al
c001e6e4:	56                   	push   esi
c001e6e5:	6a 06                	push   0x6
c001e6e7:	52                   	push   edx
c001e6e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6ee:	e8 7d ec ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6f3:	83 c4 10             	add    esp,0x10
c001e6f6:	6a 00                	push   0x0
c001e6f8:	6a 01                	push   0x1
c001e6fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e701:	50                   	push   eax
c001e702:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e708:	e8 63 ec ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e70d:	89 f8                	mov    eax,edi
c001e70f:	83 c4 10             	add    esp,0x10
c001e712:	0f b6 f0             	movzx  esi,al
c001e715:	83 fe 02             	cmp    esi,0x2
c001e718:	75 6e                	jne    c001e788 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e71a:	6a 00                	push   0x0
c001e71c:	6a 08                	push   0x8
c001e71e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e725:	50                   	push   eax
c001e726:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e72c:	e8 3f ec ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e731:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e736:	50                   	push   eax
c001e737:	6a 09                	push   0x9
c001e739:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e740:	50                   	push   eax
c001e741:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e747:	e8 24 ec ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e74c:	83 c4 20             	add    esp,0x20
c001e74f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e754:	50                   	push   eax
c001e755:	6a 0a                	push   0xa
c001e757:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e75e:	50                   	push   eax
c001e75f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e765:	e8 06 ec ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e76a:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e76f:	50                   	push   eax
c001e770:	6a 0b                	push   0xb
c001e772:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e779:	50                   	push   eax
c001e77a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e780:	e8 eb eb ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e785:	83 c4 20             	add    esp,0x20
c001e788:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e78d:	50                   	push   eax
c001e78e:	6a 02                	push   0x2
c001e790:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e797:	50                   	push   eax
c001e798:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e79e:	e8 cd eb ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7a3:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e7a8:	50                   	push   eax
c001e7a9:	6a 03                	push   0x3
c001e7ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7b2:	50                   	push   eax
c001e7b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7b9:	e8 b2 eb ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7be:	83 c4 20             	add    esp,0x20
c001e7c1:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e7c6:	50                   	push   eax
c001e7c7:	6a 04                	push   0x4
c001e7c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7d0:	50                   	push   eax
c001e7d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7d7:	e8 94 eb ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7dc:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7e1:	50                   	push   eax
c001e7e2:	6a 05                	push   0x5
c001e7e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7eb:	50                   	push   eax
c001e7ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7f2:	e8 79 eb ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f7:	83 c4 20             	add    esp,0x20
c001e7fa:	83 fe 02             	cmp    esi,0x2
c001e7fd:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001e802:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001e807:	85 c9                	test   ecx,ecx
c001e809:	74 07                	je     c001e812 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e80b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e810:	75 45                	jne    c001e857 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001e812:	89 f8                	mov    eax,edi
c001e814:	0f b6 f8             	movzx  edi,al
c001e817:	31 c0                	xor    eax,eax
c001e819:	4f                   	dec    edi
c001e81a:	0f 94 c0             	sete   al
c001e81d:	89 c6                	mov    esi,eax
c001e81f:	75 0c                	jne    c001e82d <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001e821:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e826:	b8 30 00 00 00       	mov    eax,0x30
c001e82b:	75 2f                	jne    c001e85c <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001e82d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e831:	83 f2 01             	xor    edx,0x1
c001e834:	85 c9                	test   ecx,ecx
c001e836:	74 09                	je     c001e841 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001e838:	84 d2                	test   dl,dl
c001e83a:	b8 24 00 00 00       	mov    eax,0x24
c001e83f:	75 1b                	jne    c001e85c <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001e841:	85 f6                	test   esi,esi
c001e843:	0f 84 5c fe ff ff    	je     c001e6a5 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001e849:	84 d2                	test   dl,dl
c001e84b:	b8 20 00 00 00       	mov    eax,0x20
c001e850:	75 0a                	jne    c001e85c <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001e852:	e9 4e fe ff ff       	jmp    c001e6a5 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001e857:	b8 34 00 00 00       	mov    eax,0x34
c001e85c:	50                   	push   eax
c001e85d:	6a 07                	push   0x7
c001e85f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e866:	50                   	push   eax
c001e867:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e86d:	e8 fe ea ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e872:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001e879:	83 c4 10             	add    esp,0x10
c001e87c:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001e883:	75 01                	jne    c001e886 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001e885:	fb                   	sti    
c001e886:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e88a:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001e88f:	85 f6                	test   esi,esi
c001e891:	0f 84 dd 00 00 00    	je     c001e974 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e897:	57                   	push   edi
c001e898:	6a 01                	push   0x1
c001e89a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8a1:	50                   	push   eax
c001e8a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8a8:	e8 61 f8 ff ff       	call   c001e10e <IDE::polling(unsigned char, unsigned int)>
c001e8ad:	83 c4 10             	add    esp,0x10
c001e8b0:	0f b6 c0             	movzx  eax,al
c001e8b3:	85 c0                	test   eax,eax
c001e8b5:	74 23                	je     c001e8da <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001e8b7:	50                   	push   eax
c001e8b8:	89 c6                	mov    esi,eax
c001e8ba:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e8c1:	50                   	push   eax
c001e8c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8c9:	50                   	push   eax
c001e8ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8d0:	e8 7f f7 ff ff       	call   c001e054 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e8d5:	e9 b1 00 00 00       	jmp    c001e98b <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001e8da:	85 ed                	test   ebp,ebp
c001e8dc:	74 49                	je     c001e927 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001e8de:	fa                   	cli    
c001e8df:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001e8e5:	31 ff                	xor    edi,edi
c001e8e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e8eb:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001e8ef:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001e8f4:	51                   	push   ecx
c001e8f5:	51                   	push   ecx
c001e8f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8fd:	50                   	push   eax
c001e8fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e904:	e8 55 ea ff ff       	call   c001d35e <IDE::getBase(unsigned char)>
c001e909:	89 c2                	mov    edx,eax
c001e90b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001e910:	66 ef                	out    dx,ax
c001e912:	47                   	inc    edi
c001e913:	83 c4 10             	add    esp,0x10
c001e916:	81 ff 00 01 00 00    	cmp    edi,0x100
c001e91c:	75 c9                	jne    c001e8e7 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001e91e:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001e925:	eb 35                	jmp    c001e95c <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001e927:	fa                   	cli    
c001e928:	52                   	push   edx
c001e929:	52                   	push   edx
c001e92a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e931:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001e937:	50                   	push   eax
c001e938:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e93e:	e8 1b ea ff ff       	call   c001d35e <IDE::getBase(unsigned char)>
c001e943:	b9 00 01 00 00       	mov    ecx,0x100
c001e948:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e94c:	89 c2                	mov    edx,eax
c001e94e:	fc                   	cld    
c001e94f:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e952:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001e963:	75 01                	jne    c001e966 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001e965:	fb                   	sti    
c001e966:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e96e:	4e                   	dec    esi
c001e96f:	e9 1b ff ff ff       	jmp    c001e88f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001e974:	31 f6                	xor    esi,esi
c001e976:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e97b:	74 11                	je     c001e98e <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001e97d:	50                   	push   eax
c001e97e:	50                   	push   eax
c001e97f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001e984:	50                   	push   eax
c001e985:	53                   	push   ebx
c001e986:	e8 6b fb ff ff       	call   c001e4f6 <ATA::flush(bool)>
c001e98b:	83 c4 10             	add    esp,0x10
c001e98e:	83 c4 2c             	add    esp,0x2c
c001e991:	89 f0                	mov    eax,esi
c001e993:	5b                   	pop    ebx
c001e994:	5e                   	pop    esi
c001e995:	5f                   	pop    edi
c001e996:	5d                   	pop    ebp
c001e997:	c3                   	ret    

c001e998 <ATA::read(unsigned long long, int, void*)>:
c001e998:	57                   	push   edi
c001e999:	b8 04 00 00 00       	mov    eax,0x4
c001e99e:	56                   	push   esi
c001e99f:	53                   	push   ebx
c001e9a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e9a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9ac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e9b0:	8d 7a ff             	lea    edi,[edx-0x1]
c001e9b3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e9b9:	77 25                	ja     c001e9e0 <ATA::read(unsigned long long, int, void*)+0x48>
c001e9bb:	85 f6                	test   esi,esi
c001e9bd:	b8 06 00 00 00       	mov    eax,0x6
c001e9c2:	74 1c                	je     c001e9e0 <ATA::read(unsigned long long, int, void*)+0x48>
c001e9c4:	50                   	push   eax
c001e9c5:	50                   	push   eax
c001e9c6:	6a 00                	push   0x0
c001e9c8:	56                   	push   esi
c001e9c9:	52                   	push   edx
c001e9ca:	53                   	push   ebx
c001e9cb:	51                   	push   ecx
c001e9cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e9d0:	e8 bb fb ff ff       	call   c001e590 <ATA::access(unsigned long long, int, void*, bool)>
c001e9d5:	83 c4 20             	add    esp,0x20
c001e9d8:	85 c0                	test   eax,eax
c001e9da:	0f 95 c0             	setne  al
c001e9dd:	0f b6 c0             	movzx  eax,al
c001e9e0:	5b                   	pop    ebx
c001e9e1:	5e                   	pop    esi
c001e9e2:	5f                   	pop    edi
c001e9e3:	c3                   	ret    

c001e9e4 <ATA::write(unsigned long long, int, void*)>:
c001e9e4:	57                   	push   edi
c001e9e5:	b8 04 00 00 00       	mov    eax,0x4
c001e9ea:	56                   	push   esi
c001e9eb:	53                   	push   ebx
c001e9ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e9f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9f8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e9fc:	8d 7a ff             	lea    edi,[edx-0x1]
c001e9ff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ea05:	77 25                	ja     c001ea2c <ATA::write(unsigned long long, int, void*)+0x48>
c001ea07:	85 f6                	test   esi,esi
c001ea09:	b8 06 00 00 00       	mov    eax,0x6
c001ea0e:	74 1c                	je     c001ea2c <ATA::write(unsigned long long, int, void*)+0x48>
c001ea10:	50                   	push   eax
c001ea11:	50                   	push   eax
c001ea12:	6a 01                	push   0x1
c001ea14:	56                   	push   esi
c001ea15:	52                   	push   edx
c001ea16:	53                   	push   ebx
c001ea17:	51                   	push   ecx
c001ea18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea1c:	e8 6f fb ff ff       	call   c001e590 <ATA::access(unsigned long long, int, void*, bool)>
c001ea21:	83 c4 20             	add    esp,0x20
c001ea24:	85 c0                	test   eax,eax
c001ea26:	0f 95 c0             	setne  al
c001ea29:	0f b6 c0             	movzx  eax,al
c001ea2c:	5b                   	pop    ebx
c001ea2d:	5e                   	pop    esi
c001ea2e:	5f                   	pop    edi
c001ea2f:	c3                   	ret    

c001ea30 <ATA::detectCHS()>:
c001ea30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea34:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea3a:	c1 e0 06             	shl    eax,0x6
c001ea3d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ea43:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ea4d:	c7 44 24 04 a4 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024ca4
c001ea55:	e9 68 0a ff ff       	jmp    c000f4c2 <KePanic(char const*)>

c001ea5a <ATA::open(int, int, void*)>:
c001ea5a:	53                   	push   ebx
c001ea5b:	83 ec 08             	sub    esp,0x8
c001ea5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea6a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ea70:	c1 e0 06             	shl    eax,0x6
c001ea73:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ea79:	01 d0                	add    eax,edx
c001ea7b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ea82:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ea88:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ea8f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ea99:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eaa0:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eaa6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eaad:	75 0c                	jne    c001eabb <ATA::open(int, int, void*)+0x61>
c001eaaf:	83 ec 0c             	sub    esp,0xc
c001eab2:	53                   	push   ebx
c001eab3:	e8 78 ff ff ff       	call   c001ea30 <ATA::detectCHS()>
c001eab8:	83 c4 10             	add    esp,0x10
c001eabb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eac1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eac7:	c1 e0 06             	shl    eax,0x6
c001eaca:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ead1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eadb:	d1 e8                	shr    eax,1
c001eadd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eae3:	6a 04                	push   0x4
c001eae5:	6a 0c                	push   0xc
c001eae7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eaee:	50                   	push   eax
c001eaef:	52                   	push   edx
c001eaf0:	e8 7b e8 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaf5:	90                   	nop
c001eaf6:	90                   	nop
c001eaf7:	6a 00                	push   0x0
c001eaf9:	6a 0c                	push   0xc
c001eafb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb02:	50                   	push   eax
c001eb03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb09:	e8 62 e8 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb0e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb14:	83 c4 20             	add    esp,0x20
c001eb17:	c1 e0 06             	shl    eax,0x6
c001eb1a:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001eb20:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001eb27:	0f 84 00 01 00 00    	je     c001ec2d <ATA::open(int, int, void*)+0x1d3>
c001eb2d:	83 ec 0c             	sub    esp,0xc
c001eb30:	6a 08                	push   0x8
c001eb32:	e8 63 0c ff ff       	call   c000f79a <Phys::allocateContiguousPages(int)>
c001eb37:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001eb3d:	c7 04 24 b6 4c 02 c0 	mov    DWORD PTR [esp],0xc0024cb6
c001eb44:	e8 05 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eb49:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001eb50:	e8 48 3d ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c001eb55:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001eb5b:	6a 03                	push   0x3
c001eb5d:	50                   	push   eax
c001eb5e:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001eb64:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001eb6a:	e8 07 44 ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c001eb6f:	83 c4 20             	add    esp,0x20
c001eb72:	e8 45 0b ff ff       	call   c000f6bc <Phys::allocatePage()>
c001eb77:	83 ec 0c             	sub    esp,0xc
c001eb7a:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001eb80:	6a 01                	push   0x1
c001eb82:	e8 16 3d ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c001eb87:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001eb8d:	6a 03                	push   0x3
c001eb8f:	50                   	push   eax
c001eb90:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001eb96:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001eb9c:	e8 d5 43 ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c001eba1:	83 c4 14             	add    esp,0x14
c001eba4:	68 ef 4c 02 c0       	push   0xc0024cef
c001eba9:	e8 a0 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ebae:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001ebb5:	50                   	push   eax
c001ebb6:	6a 12                	push   0x12
c001ebb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebbf:	50                   	push   eax
c001ebc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebc6:	e8 a5 e7 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebcb:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001ebd1:	83 c4 20             	add    esp,0x20
c001ebd4:	0f b6 c4             	movzx  eax,ah
c001ebd7:	50                   	push   eax
c001ebd8:	6a 13                	push   0x13
c001ebda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebe1:	50                   	push   eax
c001ebe2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebe8:	e8 83 e7 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebed:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001ebf4:	50                   	push   eax
c001ebf5:	6a 14                	push   0x14
c001ebf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebfe:	50                   	push   eax
c001ebff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec05:	e8 66 e7 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec0a:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001ec11:	83 c4 20             	add    esp,0x20
c001ec14:	50                   	push   eax
c001ec15:	6a 15                	push   0x15
c001ec17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec1e:	50                   	push   eax
c001ec1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec25:	e8 46 e7 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec2a:	83 c4 10             	add    esp,0x10
c001ec2d:	83 ec 0c             	sub    esp,0xc
c001ec30:	53                   	push   ebx
c001ec31:	e8 a8 a8 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001ec36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec39:	e8 40 b7 fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001ec3e:	83 c4 18             	add    esp,0x18
c001ec41:	31 c0                	xor    eax,eax
c001ec43:	5b                   	pop    ebx
c001ec44:	c3                   	ret    

c001ec45 <combineCharAndColour(char, unsigned char)>:
c001ec45:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec4a:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ec50:	c1 e0 08             	shl    eax,0x8
c001ec53:	09 d0                	or     eax,edx
c001ec55:	c3                   	ret    

c001ec56 <combineColours(unsigned char, unsigned char)>:
c001ec56:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec5b:	c1 e0 04             	shl    eax,0x4
c001ec5e:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001ec62:	c3                   	ret    
c001ec63:	90                   	nop

c001ec64 <ATAPI::write(unsigned long long, int, void*)>:
c001ec64:	b8 03 00 00 00       	mov    eax,0x3
c001ec69:	c3                   	ret    

c001ec6a <ATAPI::close(int, int, void*)>:
c001ec6a:	83 ec 0c             	sub    esp,0xc
c001ec6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec77:	85 c0                	test   eax,eax
c001ec79:	74 0c                	je     c001ec87 <ATAPI::close(int, int, void*)+0x1d>
c001ec7b:	8b 10                	mov    edx,DWORD PTR [eax]
c001ec7d:	83 ec 0c             	sub    esp,0xc
c001ec80:	50                   	push   eax
c001ec81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ec84:	83 c4 10             	add    esp,0x10
c001ec87:	31 c0                	xor    eax,eax
c001ec89:	83 c4 0c             	add    esp,0xc
c001ec8c:	c3                   	ret    
c001ec8d:	90                   	nop

c001ec8e <ATAPI::ATAPI()>:
c001ec8e:	83 ec 0c             	sub    esp,0xc
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	83 ec 04             	sub    esp,0x4
c001ec98:	68 00 08 00 00       	push   0x800
c001ec9d:	68 a1 4e 02 c0       	push   0xc0024ea1
c001eca2:	50                   	push   eax
c001eca3:	e8 ce a7 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eca8:	83 c4 10             	add    esp,0x10
c001ecab:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c001ecb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb4:	89 10                	mov    DWORD PTR [eax],edx
c001ecb6:	90                   	nop
c001ecb7:	83 c4 0c             	add    esp,0xc
c001ecba:	c3                   	ret    
c001ecbb:	90                   	nop

c001ecbc <ATAPI::readyForCommand()>:
c001ecbc:	56                   	push   esi
c001ecbd:	53                   	push   ebx
c001ecbe:	53                   	push   ebx
c001ecbf:	31 db                	xor    ebx,ebx
c001ecc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ecc5:	51                   	push   ecx
c001ecc6:	6a 0c                	push   0xc
c001ecc8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eccf:	50                   	push   eax
c001ecd0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ecd6:	e8 55 e7 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	a8 88                	test   al,0x88
c001ece0:	74 25                	je     c001ed07 <ATAPI::readyForCommand()+0x4b>
c001ece2:	43                   	inc    ebx
c001ece3:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001ece9:	7e da                	jle    c001ecc5 <ATAPI::readyForCommand()+0x9>
c001eceb:	83 ec 0c             	sub    esp,0xc
c001ecee:	68 5e 01 00 00       	push   0x15e
c001ecf3:	e8 f4 75 ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001ed01:	75 c2                	jne    c001ecc5 <ATAPI::readyForCommand()+0x9>
c001ed03:	31 c0                	xor    eax,eax
c001ed05:	eb 02                	jmp    c001ed09 <ATAPI::readyForCommand()+0x4d>
c001ed07:	b0 01                	mov    al,0x1
c001ed09:	5a                   	pop    edx
c001ed0a:	5b                   	pop    ebx
c001ed0b:	5e                   	pop    esi
c001ed0c:	c3                   	ret    
c001ed0d:	90                   	nop

c001ed0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ed0e:	55                   	push   ebp
c001ed0f:	57                   	push   edi
c001ed10:	56                   	push   esi
c001ed11:	53                   	push   ebx
c001ed12:	83 ec 20             	sub    esp,0x20
c001ed15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ed19:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ed1d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ed21:	6a 01                	push   0x1
c001ed23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed2a:	50                   	push   eax
c001ed2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed31:	e8 48 e8 ff ff       	call   c001d57e <IDE::enableIRQs(unsigned char, bool)>
c001ed36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed3d:	59                   	pop    ecx
c001ed3e:	5e                   	pop    esi
c001ed3f:	50                   	push   eax
c001ed40:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed46:	e8 ff e5 ff ff       	call   c001d34a <IDE::prepareInterrupt(unsigned char)>
c001ed4b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ed4e:	e8 69 ff ff ff       	call   c001ecbc <ATAPI::readyForCommand()>
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	84 c0                	test   al,al
c001ed58:	75 0a                	jne    c001ed64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001ed5a:	bb 01 00 00 00       	mov    ebx,0x1
c001ed5f:	e9 5f 02 00 00       	jmp    c001efc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed64:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001ed6a:	c1 e0 04             	shl    eax,0x4
c001ed6d:	0f b6 c0             	movzx  eax,al
c001ed70:	50                   	push   eax
c001ed71:	6a 06                	push   0x6
c001ed73:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed7a:	50                   	push   eax
c001ed7b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed81:	e8 ea e5 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed86:	6a 00                	push   0x0
c001ed88:	6a 01                	push   0x1
c001ed8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed91:	50                   	push   eax
c001ed92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed98:	e8 d3 e5 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed9d:	83 c4 20             	add    esp,0x20
c001eda0:	0f b6 c3             	movzx  eax,bl
c001eda3:	50                   	push   eax
c001eda4:	0f b6 df             	movzx  ebx,bh
c001eda7:	6a 04                	push   0x4
c001eda9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edb0:	50                   	push   eax
c001edb1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edb7:	e8 b4 e5 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edbc:	53                   	push   ebx
c001edbd:	6a 05                	push   0x5
c001edbf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edc6:	50                   	push   eax
c001edc7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edcd:	e8 9e e5 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edd2:	83 c4 20             	add    esp,0x20
c001edd5:	68 a0 00 00 00       	push   0xa0
c001edda:	6a 07                	push   0x7
c001eddc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ede3:	50                   	push   eax
c001ede4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edea:	e8 81 e5 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edef:	83 c4 0c             	add    esp,0xc
c001edf2:	6a 01                	push   0x1
c001edf4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edfb:	50                   	push   eax
c001edfc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee02:	e8 07 f3 ff ff       	call   c001e10e <IDE::polling(unsigned char, unsigned int)>
c001ee07:	83 c4 10             	add    esp,0x10
c001ee0a:	0f b6 d8             	movzx  ebx,al
c001ee0d:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001ee13:	85 db                	test   ebx,ebx
c001ee15:	74 20                	je     c001ee37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001ee17:	53                   	push   ebx
c001ee18:	0f b6 c0             	movzx  eax,al
c001ee1b:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001ee22:	52                   	push   edx
c001ee23:	50                   	push   eax
c001ee24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee2a:	e8 25 f2 ff ff       	call   c001e054 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ee2f:	83 c4 10             	add    esp,0x10
c001ee32:	e9 8c 01 00 00       	jmp    c001efc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ee37:	52                   	push   edx
c001ee38:	0f b6 c0             	movzx  eax,al
c001ee3b:	52                   	push   edx
c001ee3c:	50                   	push   eax
c001ee3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee43:	e8 16 e5 ff ff       	call   c001d35e <IDE::getBase(unsigned char)>
c001ee48:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ee4c:	b9 06 00 00 00       	mov    ecx,0x6
c001ee51:	89 c2                	mov    edx,eax
c001ee53:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ee56:	89 e8                	mov    eax,ebp
c001ee58:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ee5c:	83 c4 10             	add    esp,0x10
c001ee5f:	0f b6 c0             	movzx  eax,al
c001ee62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee66:	85 db                	test   ebx,ebx
c001ee68:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee6e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee75:	0f 84 eb 00 00 00    	je     c001ef66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ee7b:	55                   	push   ebp
c001ee7c:	55                   	push   ebp
c001ee7d:	52                   	push   edx
c001ee7e:	50                   	push   eax
c001ee7f:	e8 60 e6 ff ff       	call   c001d4e4 <IDE::waitInterrupt(unsigned char)>
c001ee84:	83 c4 10             	add    esp,0x10
c001ee87:	84 c0                	test   al,al
c001ee89:	0f 84 cb fe ff ff    	je     c001ed5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001ee8f:	56                   	push   esi
c001ee90:	56                   	push   esi
c001ee91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee98:	50                   	push   eax
c001ee99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee9f:	e8 a6 e4 ff ff       	call   c001d34a <IDE::prepareInterrupt(unsigned char)>
c001eea4:	83 c4 0c             	add    esp,0xc
c001eea7:	6a 04                	push   0x4
c001eea9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eeb0:	50                   	push   eax
c001eeb1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eeb7:	e8 74 e5 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001eebc:	83 c4 0c             	add    esp,0xc
c001eebf:	6a 05                	push   0x5
c001eec1:	89 c6                	mov    esi,eax
c001eec3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eeca:	50                   	push   eax
c001eecb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eed1:	e8 5a e5 ff ff       	call   c001d430 <IDE::read(unsigned char, unsigned char)>
c001eed6:	83 c4 10             	add    esp,0x10
c001eed9:	0f b6 e8             	movzx  ebp,al
c001eedc:	89 f0                	mov    eax,esi
c001eede:	c1 e5 08             	shl    ebp,0x8
c001eee1:	0f b6 f0             	movzx  esi,al
c001eee4:	09 f5                	or     ebp,esi
c001eee6:	31 f6                	xor    esi,esi
c001eee8:	d1 fd                	sar    ebp,1
c001eeea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001eeef:	74 5c                	je     c001ef4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001eef1:	39 ee                	cmp    esi,ebp
c001eef3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eef9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ef00:	75 0d                	jne    c001ef0f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001ef02:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001ef05:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001ef09:	4b                   	dec    ebx
c001ef0a:	e9 57 ff ff ff       	jmp    c001ee66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001ef0f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ef13:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001ef17:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001ef1c:	51                   	push   ecx
c001ef1d:	51                   	push   ecx
c001ef1e:	52                   	push   edx
c001ef1f:	50                   	push   eax
c001ef20:	e8 39 e4 ff ff       	call   c001d35e <IDE::getBase(unsigned char)>
c001ef25:	89 c2                	mov    edx,eax
c001ef27:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001ef2c:	66 ef                	out    dx,ax
c001ef2e:	46                   	inc    esi
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	eb bd                	jmp    c001eef1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001ef34:	51                   	push   ecx
c001ef35:	51                   	push   ecx
c001ef36:	52                   	push   edx
c001ef37:	50                   	push   eax
c001ef38:	e8 21 e4 ff ff       	call   c001d35e <IDE::getBase(unsigned char)>
c001ef3d:	89 c2                	mov    edx,eax
c001ef3f:	66 ed                	in     ax,dx
c001ef41:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ef45:	83 c4 10             	add    esp,0x10
c001ef48:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001ef4c:	46                   	inc    esi
c001ef4d:	39 ee                	cmp    esi,ebp
c001ef4f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ef55:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ef5c:	75 d6                	jne    c001ef34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001ef5e:	01 f6                	add    esi,esi
c001ef60:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001ef64:	eb a3                	jmp    c001ef09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001ef66:	51                   	push   ecx
c001ef67:	51                   	push   ecx
c001ef68:	52                   	push   edx
c001ef69:	50                   	push   eax
c001ef6a:	e8 75 e5 ff ff       	call   c001d4e4 <IDE::waitInterrupt(unsigned char)>
c001ef6f:	83 c4 10             	add    esp,0x10
c001ef72:	84 c0                	test   al,al
c001ef74:	0f 84 e0 fd ff ff    	je     c001ed5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001ef7a:	52                   	push   edx
c001ef7b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef80:	52                   	push   edx
c001ef81:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef88:	50                   	push   eax
c001ef89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef8f:	e8 b6 e3 ff ff       	call   c001d34a <IDE::prepareInterrupt(unsigned char)>
c001ef94:	83 c4 10             	add    esp,0x10
c001ef97:	50                   	push   eax
c001ef98:	50                   	push   eax
c001ef99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001efa0:	50                   	push   eax
c001efa1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001efa7:	e8 b2 e3 ff ff       	call   c001d35e <IDE::getBase(unsigned char)>
c001efac:	8d 50 07             	lea    edx,[eax+0x7]
c001efaf:	ec                   	in     al,dx
c001efb0:	83 c4 10             	add    esp,0x10
c001efb3:	a8 88                	test   al,0x88
c001efb5:	74 0a                	je     c001efc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001efb7:	4b                   	dec    ebx
c001efb8:	75 dd                	jne    c001ef97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001efba:	bb 02 00 00 00       	mov    ebx,0x2
c001efbf:	eb 02                	jmp    c001efc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001efc1:	31 db                	xor    ebx,ebx
c001efc3:	83 c4 1c             	add    esp,0x1c
c001efc6:	89 d8                	mov    eax,ebx
c001efc8:	5b                   	pop    ebx
c001efc9:	5e                   	pop    esi
c001efca:	5f                   	pop    edi
c001efcb:	5d                   	pop    ebp
c001efcc:	c3                   	ret    
c001efcd:	90                   	nop

c001efce <ATAPI::diskRemoved()>:
c001efce:	53                   	push   ebx
c001efcf:	83 ec 14             	sub    esp,0x14
c001efd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001efd6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001efdd:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001efe3:	e8 86 b0 fe ff       	call   c000a06e <LogicalDisk::unmount()>
c001efe8:	58                   	pop    eax
c001efe9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001efef:	e8 2c ba fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001eff4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001effa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001effe:	83 c4 18             	add    esp,0x18
c001f001:	5b                   	pop    ebx
c001f002:	e9 09 ba fe ff       	jmp    c000aa10 <VCache::invalidateReadBuffer()>
c001f007:	90                   	nop

c001f008 <ATAPI::eject()>:
c001f008:	57                   	push   edi
c001f009:	b9 03 00 00 00       	mov    ecx,0x3
c001f00e:	53                   	push   ebx
c001f00f:	83 ec 14             	sub    esp,0x14
c001f012:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f016:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f01a:	fc                   	cld    
c001f01b:	31 c0                	xor    eax,eax
c001f01d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f01f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f024:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f029:	50                   	push   eax
c001f02a:	50                   	push   eax
c001f02b:	6a 00                	push   0x0
c001f02d:	6a 00                	push   0x0
c001f02f:	6a 00                	push   0x0
c001f031:	6a 02                	push   0x2
c001f033:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f037:	50                   	push   eax
c001f038:	53                   	push   ebx
c001f039:	e8 d0 fc ff ff       	call   c001ed0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f03e:	83 c4 14             	add    esp,0x14
c001f041:	53                   	push   ebx
c001f042:	e8 87 ff ff ff       	call   c001efce <ATAPI::diskRemoved()>
c001f047:	83 c4 24             	add    esp,0x24
c001f04a:	31 c0                	xor    eax,eax
c001f04c:	5b                   	pop    ebx
c001f04d:	5f                   	pop    edi
c001f04e:	c3                   	ret    
c001f04f:	90                   	nop

c001f050 <ATAPI::diskInserted()>:
c001f050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f054:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f05b:	c3                   	ret    

c001f05c <ATAPI::detectMedia()>:
c001f05c:	56                   	push   esi
c001f05d:	53                   	push   ebx
c001f05e:	83 ec 28             	sub    esp,0x28
c001f061:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f065:	6a 0c                	push   0xc
c001f067:	6a 00                	push   0x0
c001f069:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f06d:	56                   	push   esi
c001f06e:	e8 7d 14 fe ff       	call   c00004f0 <memset>
c001f073:	58                   	pop    eax
c001f074:	5a                   	pop    edx
c001f075:	6a 00                	push   0x0
c001f077:	6a 00                	push   0x0
c001f079:	6a 00                	push   0x0
c001f07b:	6a 00                	push   0x0
c001f07d:	56                   	push   esi
c001f07e:	53                   	push   ebx
c001f07f:	e8 8a fc ff ff       	call   c001ed0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f084:	83 c4 1c             	add    esp,0x1c
c001f087:	6a 0c                	push   0xc
c001f089:	6a 00                	push   0x0
c001f08b:	56                   	push   esi
c001f08c:	e8 5f 14 fe ff       	call   c00004f0 <memset>
c001f091:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f096:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f09b:	59                   	pop    ecx
c001f09c:	58                   	pop    eax
c001f09d:	6a 01                	push   0x1
c001f09f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f0a3:	50                   	push   eax
c001f0a4:	6a 00                	push   0x0
c001f0a6:	6a 12                	push   0x12
c001f0a8:	56                   	push   esi
c001f0a9:	53                   	push   ebx
c001f0aa:	e8 5f fc ff ff       	call   c001ed0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f0af:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f0b3:	83 c4 20             	add    esp,0x20
c001f0b6:	83 e0 7f             	and    eax,0x7f
c001f0b9:	83 f8 70             	cmp    eax,0x70
c001f0bc:	74 15                	je     c001f0d3 <ATAPI::detectMedia()+0x77>
c001f0be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f0c5:	75 0c                	jne    c001f0d3 <ATAPI::detectMedia()+0x77>
c001f0c7:	83 ec 0c             	sub    esp,0xc
c001f0ca:	53                   	push   ebx
c001f0cb:	e8 80 ff ff ff       	call   c001f050 <ATAPI::diskInserted()>
c001f0d0:	83 c4 10             	add    esp,0x10
c001f0d3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f0d7:	83 e0 0f             	and    eax,0xf
c001f0da:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f0df:	0f b6 c0             	movzx  eax,al
c001f0e2:	75 19                	jne    c001f0fd <ATAPI::detectMedia()+0xa1>
c001f0e4:	83 f8 02             	cmp    eax,0x2
c001f0e7:	75 14                	jne    c001f0fd <ATAPI::detectMedia()+0xa1>
c001f0e9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f0f0:	74 24                	je     c001f116 <ATAPI::detectMedia()+0xba>
c001f0f2:	83 ec 0c             	sub    esp,0xc
c001f0f5:	53                   	push   ebx
c001f0f6:	e8 d3 fe ff ff       	call   c001efce <ATAPI::diskRemoved()>
c001f0fb:	eb 16                	jmp    c001f113 <ATAPI::detectMedia()+0xb7>
c001f0fd:	85 c0                	test   eax,eax
c001f0ff:	75 15                	jne    c001f116 <ATAPI::detectMedia()+0xba>
c001f101:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f108:	75 0c                	jne    c001f116 <ATAPI::detectMedia()+0xba>
c001f10a:	83 ec 0c             	sub    esp,0xc
c001f10d:	53                   	push   ebx
c001f10e:	e8 3d ff ff ff       	call   c001f050 <ATAPI::diskInserted()>
c001f113:	83 c4 10             	add    esp,0x10
c001f116:	83 c4 24             	add    esp,0x24
c001f119:	5b                   	pop    ebx
c001f11a:	5e                   	pop    esi
c001f11b:	c3                   	ret    

c001f11c <ATAPI::open(int, int, void*)>:
c001f11c:	56                   	push   esi
c001f11d:	53                   	push   ebx
c001f11e:	50                   	push   eax
c001f11f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f123:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f127:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f12b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f131:	c1 e0 06             	shl    eax,0x6
c001f134:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f13a:	01 d0                	add    eax,edx
c001f13c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f143:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f149:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f150:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f15a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f161:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f167:	6a 04                	push   0x4
c001f169:	6a 0c                	push   0xc
c001f16b:	51                   	push   ecx
c001f16c:	52                   	push   edx
c001f16d:	e8 fe e1 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f172:	90                   	nop
c001f173:	90                   	nop
c001f174:	6a 00                	push   0x0
c001f176:	6a 0c                	push   0xc
c001f178:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f17f:	50                   	push   eax
c001f180:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f186:	e8 e5 e1 ff ff       	call   c001d370 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f18b:	83 c4 14             	add    esp,0x14
c001f18e:	68 78 01 00 00       	push   0x178
c001f193:	e8 e4 ff fe ff       	call   c000f17c <malloc>
c001f198:	83 c4 0c             	add    esp,0xc
c001f19b:	6a 00                	push   0x0
c001f19d:	68 ff ff ff 7f       	push   0x7fffffff
c001f1a2:	6a 00                	push   0x0
c001f1a4:	6a 00                	push   0x0
c001f1a6:	53                   	push   ebx
c001f1a7:	68 53 4f 02 c0       	push   0xc0024f53
c001f1ac:	89 c6                	mov    esi,eax
c001f1ae:	50                   	push   eax
c001f1af:	e8 f8 ac fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f1b4:	83 c4 14             	add    esp,0x14
c001f1b7:	56                   	push   esi
c001f1b8:	e8 af ad fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001f1bd:	5a                   	pop    edx
c001f1be:	59                   	pop    ecx
c001f1bf:	0f be c0             	movsx  eax,al
c001f1c2:	50                   	push   eax
c001f1c3:	68 98 4d 02 c0       	push   0xc0024d98
c001f1c8:	e8 81 7d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f1cd:	58                   	pop    eax
c001f1ce:	5a                   	pop    edx
c001f1cf:	56                   	push   esi
c001f1d0:	53                   	push   ebx
c001f1d1:	e8 bc 9e fe ff       	call   c0009092 <Device::addChild(Device*)>
c001f1d6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f1dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1df:	e8 fa a2 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001f1e4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f1eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1ee:	e8 69 fe ff ff       	call   c001f05c <ATAPI::detectMedia()>
c001f1f3:	83 c4 14             	add    esp,0x14
c001f1f6:	31 c0                	xor    eax,eax
c001f1f8:	5b                   	pop    ebx
c001f1f9:	5e                   	pop    esi
c001f1fa:	c3                   	ret    
c001f1fb:	90                   	nop

c001f1fc <ATAPI::read(unsigned long long, int, void*)>:
c001f1fc:	55                   	push   ebp
c001f1fd:	57                   	push   edi
c001f1fe:	56                   	push   esi
c001f1ff:	53                   	push   ebx
c001f200:	83 ec 1c             	sub    esp,0x1c
c001f203:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f207:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f20b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f20f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f216:	74 3c                	je     c001f254 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001f218:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f21c:	b9 03 00 00 00       	mov    ecx,0x3
c001f221:	fc                   	cld    
c001f222:	31 c0                	xor    eax,eax
c001f224:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f226:	89 e8                	mov    eax,ebp
c001f228:	0f ce                	bswap  esi
c001f22a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f22e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f233:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001f237:	50                   	push   eax
c001f238:	50                   	push   eax
c001f239:	55                   	push   ebp
c001f23a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f23e:	c1 e5 0b             	shl    ebp,0xb
c001f241:	6a 00                	push   0x0
c001f243:	55                   	push   ebp
c001f244:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f248:	50                   	push   eax
c001f249:	53                   	push   ebx
c001f24a:	e8 bf fa ff ff       	call   c001ed0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f24f:	83 c4 20             	add    esp,0x20
c001f252:	eb 1a                	jmp    c001f26e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001f254:	83 ec 0c             	sub    esp,0xc
c001f257:	53                   	push   ebx
c001f258:	e8 ff fd ff ff       	call   c001f05c <ATAPI::detectMedia()>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f267:	75 af                	jne    c001f218 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f269:	b8 02 00 00 00       	mov    eax,0x2
c001f26e:	83 c4 1c             	add    esp,0x1c
c001f271:	5b                   	pop    ebx
c001f272:	5e                   	pop    esi
c001f273:	5f                   	pop    edi
c001f274:	5d                   	pop    ebp
c001f275:	c3                   	ret    

c001f276 <SATA::close(int, int, void*)>:
c001f276:	83 ec 0c             	sub    esp,0xc
c001f279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f283:	85 c0                	test   eax,eax
c001f285:	74 0c                	je     c001f293 <SATA::close(int, int, void*)+0x1d>
c001f287:	8b 10                	mov    edx,DWORD PTR [eax]
c001f289:	83 ec 0c             	sub    esp,0xc
c001f28c:	50                   	push   eax
c001f28d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f290:	83 c4 10             	add    esp,0x10
c001f293:	31 c0                	xor    eax,eax
c001f295:	83 c4 0c             	add    esp,0xc
c001f298:	c3                   	ret    
c001f299:	90                   	nop

c001f29a <SATA::powerSaving(PowerSavingLevel)>:
c001f29a:	c3                   	ret    
c001f29b:	90                   	nop

c001f29c <SATA::open(int, int, void*)>:
c001f29c:	56                   	push   esi
c001f29d:	53                   	push   ebx
c001f29e:	83 ec 10             	sub    esp,0x10
c001f2a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f2a5:	68 e0 4d 02 c0       	push   0xc0024de0
c001f2aa:	e8 9f 7c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f2af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f2b3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f2bd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f2c7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f2cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f2d1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f2db:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f2e2:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f2e8:	e8 cf 03 ff ff       	call   c000f6bc <Phys::allocatePage()>
c001f2ed:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f2f3:	89 c6                	mov    esi,eax
c001f2f5:	e8 c2 03 ff ff       	call   c000f6bc <Phys::allocatePage()>
c001f2fa:	81 c6 00 10 00 00    	add    esi,0x1000
c001f300:	83 c4 10             	add    esp,0x10
c001f303:	39 c6                	cmp    esi,eax
c001f305:	74 10                	je     c001f317 <SATA::open(int, int, void*)+0x7b>
c001f307:	83 ec 0c             	sub    esp,0xc
c001f30a:	68 ec 4d 02 c0       	push   0xc0024dec
c001f30f:	e8 ae 01 ff ff       	call   c000f4c2 <KePanic(char const*)>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	83 ec 0c             	sub    esp,0xc
c001f31a:	6a 02                	push   0x2
c001f31c:	e8 7c 35 ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c001f321:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f327:	6a 03                	push   0x3
c001f329:	50                   	push   eax
c001f32a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f330:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001f336:	e8 3b 3c ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f33b:	83 c4 14             	add    esp,0x14
c001f33e:	53                   	push   ebx
c001f33f:	e8 9a a1 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001f344:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f347:	e8 32 b0 fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001f34c:	83 c4 14             	add    esp,0x14
c001f34f:	31 c0                	xor    eax,eax
c001f351:	5b                   	pop    ebx
c001f352:	5e                   	pop    esi
c001f353:	c3                   	ret    

c001f354 <SATA::SATA()>:
c001f354:	83 ec 0c             	sub    esp,0xc
c001f357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35b:	83 ec 04             	sub    esp,0x4
c001f35e:	68 00 02 00 00       	push   0x200
c001f363:	68 00 4e 02 c0       	push   0xc0024e00
c001f368:	50                   	push   eax
c001f369:	e8 08 a1 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f36e:	83 c4 10             	add    esp,0x10
c001f371:	ba 70 4e 02 c0       	mov    edx,0xc0024e70
c001f376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f37a:	89 10                	mov    DWORD PTR [eax],edx
c001f37c:	90                   	nop
c001f37d:	83 c4 0c             	add    esp,0xc
c001f380:	c3                   	ret    
c001f381:	90                   	nop

c001f382 <SATA::access(unsigned long long, int, void*, bool)>:
c001f382:	55                   	push   ebp
c001f383:	57                   	push   edi
c001f384:	56                   	push   esi
c001f385:	53                   	push   ebx
c001f386:	83 ec 2c             	sub    esp,0x2c
c001f389:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f38d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f391:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f39d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f3a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f3a5:	fa                   	cli    
c001f3a6:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001f3ac:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f3b1:	7e 10                	jle    c001f3c3 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001f3b3:	83 ec 0c             	sub    esp,0xc
c001f3b6:	68 10 4e 02 c0       	push   0xc0024e10
c001f3bb:	e8 02 01 ff ff       	call   c000f4c2 <KePanic(char const*)>
c001f3c0:	83 c4 10             	add    esp,0x10
c001f3c3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f3c9:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001f3cf:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f3d5:	89 e8                	mov    eax,ebp
c001f3d7:	c1 e0 07             	shl    eax,0x7
c001f3da:	01 d0                	add    eax,edx
c001f3dc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f3e6:	8d 45 02             	lea    eax,[ebp+0x2]
c001f3e9:	51                   	push   ecx
c001f3ea:	c1 e0 07             	shl    eax,0x7
c001f3ed:	51                   	push   ecx
c001f3ee:	01 d0                	add    eax,edx
c001f3f0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001f3f4:	50                   	push   eax
c001f3f5:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f3fb:	e8 ee ed ff ff       	call   c001e1ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f400:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f404:	83 c4 10             	add    esp,0x10
c001f407:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001f40c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f410:	0f 84 a6 01 00 00    	je     c001f5bc <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001f416:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f41a:	c1 e0 09             	shl    eax,0x9
c001f41d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f426:	74 0e                	je     c001f436 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001f428:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f42e:	89 c1                	mov    ecx,eax
c001f430:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f434:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f436:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f43a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f440:	8d 45 02             	lea    eax,[ebp+0x2]
c001f443:	c1 e0 07             	shl    eax,0x7
c001f446:	01 d0                	add    eax,edx
c001f448:	8b 00                	mov    eax,DWORD PTR [eax]
c001f44a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f450:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f456:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f45a:	c1 e1 05             	shl    ecx,0x5
c001f45d:	01 c8                	add    eax,ecx
c001f45f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f463:	83 e1 01             	and    ecx,0x1
c001f466:	89 ce                	mov    esi,ecx
c001f468:	8a 08                	mov    cl,BYTE PTR [eax]
c001f46a:	c1 e6 06             	shl    esi,0x6
c001f46d:	83 e1 bf             	and    ecx,0xffffffbf
c001f470:	09 f1                	or     ecx,esi
c001f472:	88 08                	mov    BYTE PTR [eax],cl
c001f474:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f476:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f47c:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f482:	89 08                	mov    DWORD PTR [eax],ecx
c001f484:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f48a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f490:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f496:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f499:	50                   	push   eax
c001f49a:	68 90 00 00 00       	push   0x90
c001f49f:	6a 00                	push   0x0
c001f4a1:	56                   	push   esi
c001f4a2:	e8 49 10 fe ff       	call   c00004f0 <memset>
c001f4a7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f4ad:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f4b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4b7:	83 c4 10             	add    esp,0x10
c001f4ba:	48                   	dec    eax
c001f4bb:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f4c0:	89 c1                	mov    ecx,eax
c001f4c2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f4c8:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f4cd:	09 c8                	or     eax,ecx
c001f4cf:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f4d5:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001f4db:	83 c8 80             	or     eax,0xffffff80
c001f4de:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001f4e4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4eb:	25 00 7f 00 00       	and    eax,0x7f00
c001f4f0:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f4f5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f4fa:	66 89 06             	mov    WORD PTR [esi],ax
c001f4fd:	b0 35                	mov    al,0x35
c001f4ff:	75 02                	jne    c001f503 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001f501:	b0 25                	mov    al,0x25
c001f503:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f506:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f50a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f50e:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001f512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f516:	c1 e8 10             	shr    eax,0x10
c001f519:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f51c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f520:	c1 e8 18             	shr    eax,0x18
c001f523:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f526:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f52a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f52d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f531:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f534:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f538:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f53c:	89 ee                	mov    esi,ebp
c001f53e:	31 c0                	xor    eax,eax
c001f540:	c1 e6 07             	shl    esi,0x7
c001f543:	01 d6                	add    esi,edx
c001f545:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f54b:	80 e1 88             	and    cl,0x88
c001f54e:	74 0a                	je     c001f55a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001f550:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f555:	74 0a                	je     c001f561 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f557:	40                   	inc    eax
c001f558:	eb eb                	jmp    c001f545 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001f55a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f55f:	75 0a                	jne    c001f56b <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001f561:	83 ec 0c             	sub    esp,0xc
c001f564:	68 49 4e 02 c0       	push   0xc0024e49
c001f569:	eb 34                	jmp    c001f59f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001f56b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f56f:	c1 e5 07             	shl    ebp,0x7
c001f572:	b8 01 00 00 00       	mov    eax,0x1
c001f577:	01 ea                	add    edx,ebp
c001f579:	d3 e0                	shl    eax,cl
c001f57b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f581:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f587:	85 c8                	test   eax,ecx
c001f589:	74 25                	je     c001f5b0 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001f58b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f591:	0f ba e1 1e          	bt     ecx,0x1e
c001f595:	73 ea                	jae    c001f581 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001f597:	83 ec 0c             	sub    esp,0xc
c001f59a:	68 57 4e 02 c0       	push   0xc0024e57
c001f59f:	e8 aa 79 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f5a4:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001f5ab:	83 c4 10             	add    esp,0x10
c001f5ae:	eb 13                	jmp    c001f5c3 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001f5b0:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f5b6:	0f ba e0 1e          	bt     eax,0x1e
c001f5ba:	73 18                	jae    c001f5d4 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001f5bc:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001f5c3:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001f5ca:	75 01                	jne    c001f5cd <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001f5cc:	fb                   	sti    
c001f5cd:	b8 01 00 00 00       	mov    eax,0x1
c001f5d2:	eb 2c                	jmp    c001f600 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001f5d4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f5d9:	75 10                	jne    c001f5eb <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001f5db:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f5e1:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f5e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f5eb:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001f5f2:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001f5f7:	85 c0                	test   eax,eax
c001f5f9:	75 03                	jne    c001f5fe <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001f5fb:	fb                   	sti    
c001f5fc:	eb 02                	jmp    c001f600 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001f5fe:	31 c0                	xor    eax,eax
c001f600:	83 c4 2c             	add    esp,0x2c
c001f603:	5b                   	pop    ebx
c001f604:	5e                   	pop    esi
c001f605:	5f                   	pop    edi
c001f606:	5d                   	pop    ebp
c001f607:	c3                   	ret    

c001f608 <SATA::read(unsigned long long, int, void*)>:
c001f608:	57                   	push   edi
c001f609:	b8 04 00 00 00       	mov    eax,0x4
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f614:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f618:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f61c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f620:	8d 7a ff             	lea    edi,[edx-0x1]
c001f623:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f629:	77 25                	ja     c001f650 <SATA::read(unsigned long long, int, void*)+0x48>
c001f62b:	85 f6                	test   esi,esi
c001f62d:	b8 06 00 00 00       	mov    eax,0x6
c001f632:	74 1c                	je     c001f650 <SATA::read(unsigned long long, int, void*)+0x48>
c001f634:	50                   	push   eax
c001f635:	50                   	push   eax
c001f636:	6a 00                	push   0x0
c001f638:	56                   	push   esi
c001f639:	52                   	push   edx
c001f63a:	53                   	push   ebx
c001f63b:	51                   	push   ecx
c001f63c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f640:	e8 3d fd ff ff       	call   c001f382 <SATA::access(unsigned long long, int, void*, bool)>
c001f645:	83 c4 20             	add    esp,0x20
c001f648:	85 c0                	test   eax,eax
c001f64a:	0f 95 c0             	setne  al
c001f64d:	0f b6 c0             	movzx  eax,al
c001f650:	5b                   	pop    ebx
c001f651:	5e                   	pop    esi
c001f652:	5f                   	pop    edi
c001f653:	c3                   	ret    

c001f654 <SATA::write(unsigned long long, int, void*)>:
c001f654:	55                   	push   ebp
c001f655:	b8 04 00 00 00       	mov    eax,0x4
c001f65a:	57                   	push   edi
c001f65b:	56                   	push   esi
c001f65c:	53                   	push   ebx
c001f65d:	83 ec 0c             	sub    esp,0xc
c001f660:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f664:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f668:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f66c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f670:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f673:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f679:	77 3d                	ja     c001f6b8 <SATA::write(unsigned long long, int, void*)+0x64>
c001f67b:	85 ed                	test   ebp,ebp
c001f67d:	b8 06 00 00 00       	mov    eax,0x6
c001f682:	74 34                	je     c001f6b8 <SATA::write(unsigned long long, int, void*)+0x64>
c001f684:	c1 e3 09             	shl    ebx,0x9
c001f687:	01 eb                	add    ebx,ebp
c001f689:	50                   	push   eax
c001f68a:	89 d6                	mov    esi,edx
c001f68c:	50                   	push   eax
c001f68d:	83 c6 01             	add    esi,0x1
c001f690:	6a 01                	push   0x1
c001f692:	89 cf                	mov    edi,ecx
c001f694:	55                   	push   ebp
c001f695:	83 d7 00             	adc    edi,0x0
c001f698:	6a 01                	push   0x1
c001f69a:	81 c5 00 02 00 00    	add    ebp,0x200
c001f6a0:	51                   	push   ecx
c001f6a1:	52                   	push   edx
c001f6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f6a6:	e8 d7 fc ff ff       	call   c001f382 <SATA::access(unsigned long long, int, void*, bool)>
c001f6ab:	83 c4 20             	add    esp,0x20
c001f6ae:	39 dd                	cmp    ebp,ebx
c001f6b0:	89 f2                	mov    edx,esi
c001f6b2:	89 f9                	mov    ecx,edi
c001f6b4:	75 d3                	jne    c001f689 <SATA::write(unsigned long long, int, void*)+0x35>
c001f6b6:	31 c0                	xor    eax,eax
c001f6b8:	83 c4 0c             	add    esp,0xc
c001f6bb:	5b                   	pop    ebx
c001f6bc:	5e                   	pop    esi
c001f6bd:	5f                   	pop    edi
c001f6be:	5d                   	pop    ebp
c001f6bf:	c3                   	ret    

c001f6c0 <SATAPI::write(unsigned long long, int, void*)>:
c001f6c0:	b8 03 00 00 00       	mov    eax,0x3
c001f6c5:	c3                   	ret    

c001f6c6 <SATAPI::close(int, int, void*)>:
c001f6c6:	83 ec 0c             	sub    esp,0xc
c001f6c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f6d3:	85 c0                	test   eax,eax
c001f6d5:	74 0c                	je     c001f6e3 <SATAPI::close(int, int, void*)+0x1d>
c001f6d7:	8b 10                	mov    edx,DWORD PTR [eax]
c001f6d9:	83 ec 0c             	sub    esp,0xc
c001f6dc:	50                   	push   eax
c001f6dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f6e0:	83 c4 10             	add    esp,0x10
c001f6e3:	31 c0                	xor    eax,eax
c001f6e5:	83 c4 0c             	add    esp,0xc
c001f6e8:	c3                   	ret    
c001f6e9:	90                   	nop

c001f6ea <SATAPI::SATAPI()>:
c001f6ea:	83 ec 0c             	sub    esp,0xc
c001f6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f1:	83 ec 04             	sub    esp,0x4
c001f6f4:	68 00 08 00 00       	push   0x800
c001f6f9:	68 a0 4e 02 c0       	push   0xc0024ea0
c001f6fe:	50                   	push   eax
c001f6ff:	e8 72 9d fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f704:	83 c4 10             	add    esp,0x10
c001f707:	ba 94 4f 02 c0       	mov    edx,0xc0024f94
c001f70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f710:	89 10                	mov    DWORD PTR [eax],edx
c001f712:	90                   	nop
c001f713:	83 c4 0c             	add    esp,0xc
c001f716:	c3                   	ret    
c001f717:	90                   	nop

c001f718 <SATAPI::diskRemoved()>:
c001f718:	c3                   	ret    
c001f719:	90                   	nop

c001f71a <SATAPI::diskInserted()>:
c001f71a:	83 ec 18             	sub    esp,0x18
c001f71d:	68 ac 4e 02 c0       	push   0xc0024eac
c001f722:	e8 27 78 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f72b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001f732:	83 c4 1c             	add    esp,0x1c
c001f735:	c3                   	ret    

c001f736 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f736:	55                   	push   ebp
c001f737:	57                   	push   edi
c001f738:	56                   	push   esi
c001f739:	53                   	push   ebx
c001f73a:	83 ec 34             	sub    esp,0x34
c001f73d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f741:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f745:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f749:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f74d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f751:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f757:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f75d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f761:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f767:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f76b:	83 c0 02             	add    eax,0x2
c001f76e:	c1 e0 07             	shl    eax,0x7
c001f771:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f775:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f779:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f77d:	c1 e0 07             	shl    eax,0x7
c001f780:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f784:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f788:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f792:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f796:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f79c:	e8 4d ea ff ff       	call   c001e1ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f7a1:	83 c4 10             	add    esp,0x10
c001f7a4:	89 c2                	mov    edx,eax
c001f7a6:	b8 01 00 00 00       	mov    eax,0x1
c001f7ab:	83 fa ff             	cmp    edx,0xffffffff
c001f7ae:	0f 84 5f 02 00 00    	je     c001fa13 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001f7b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7bc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f7c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7c4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f7ca:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f7d0:	89 d1                	mov    ecx,edx
c001f7d2:	c1 e1 05             	shl    ecx,0x5
c001f7d5:	01 c8                	add    eax,ecx
c001f7d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f7d9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f7df:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f7e5:	89 08                	mov    DWORD PTR [eax],ecx
c001f7e7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f7ed:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f7f3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f7f9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f7fc:	50                   	push   eax
c001f7fd:	68 90 00 00 00       	push   0x90
c001f802:	6a 00                	push   0x0
c001f804:	53                   	push   ebx
c001f805:	e8 e6 0c fe ff       	call   c00004f0 <memset>
c001f80a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f80d:	b9 0c 00 00 00       	mov    ecx,0xc
c001f812:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f816:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f818:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001f81e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f822:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f826:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f82c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f830:	48                   	dec    eax
c001f831:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f836:	89 c1                	mov    ecx,eax
c001f838:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f83e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f843:	09 c8                	or     eax,ecx
c001f845:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f84b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001f851:	83 c8 80             	or     eax,0xffffff80
c001f854:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001f85a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f85d:	25 00 7f 00 00       	and    eax,0x7f00
c001f862:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f867:	66 89 03             	mov    WORD PTR [ebx],ax
c001f86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f86e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001f872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f876:	c1 e8 10             	shr    eax,0x10
c001f879:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f87c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f880:	c1 e8 18             	shr    eax,0x18
c001f883:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001f886:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f88a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f88d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f891:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f894:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f898:	83 c4 10             	add    esp,0x10
c001f89b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f89f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f8a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8a7:	31 c0                	xor    eax,eax
c001f8a9:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001f8af:	80 e1 88             	and    cl,0x88
c001f8b2:	74 0a                	je     c001f8be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001f8b4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f8b9:	74 0a                	je     c001f8c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001f8bb:	40                   	inc    eax
c001f8bc:	eb eb                	jmp    c001f8a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001f8be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f8c3:	75 43                	jne    c001f908 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001f8c5:	83 ec 0c             	sub    esp,0xc
c001f8c8:	68 c4 4e 02 c0       	push   0xc0024ec4
c001f8cd:	e8 7c 76 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f8d2:	58                   	pop    eax
c001f8d3:	5a                   	pop    edx
c001f8d4:	68 d9 4e 02 c0       	push   0xc0024ed9
c001f8d9:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001f8df:	e8 a0 23 ff ff       	call   c0011c84 <VgaText::puts(char const*)>
c001f8e4:	59                   	pop    ecx
c001f8e5:	5b                   	pop    ebx
c001f8e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f8ea:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f8f0:	e8 93 e9 ff ff       	call   c001e288 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f8f5:	5e                   	pop    esi
c001f8f6:	5f                   	pop    edi
c001f8f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f8fb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f901:	e8 62 e9 ff ff       	call   c001e268 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f906:	eb 48                	jmp    c001f950 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001f908:	b8 01 00 00 00       	mov    eax,0x1
c001f90d:	88 d1                	mov    cl,dl
c001f90f:	d3 e0                	shl    eax,cl
c001f911:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001f916:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001f91c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f920:	89 c7                	mov    edi,eax
c001f922:	c1 e3 07             	shl    ebx,0x7
c001f925:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001f929:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001f92f:	85 c7                	test   edi,eax
c001f931:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001f937:	0f 84 a3 00 00 00    	je     c001f9e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001f93d:	0f ba e0 1e          	bt     eax,0x1e
c001f941:	73 1a                	jae    c001f95d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001f943:	83 ec 0c             	sub    esp,0xc
c001f946:	68 eb 4e 02 c0       	push   0xc0024eeb
c001f94b:	e8 fe 75 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	b8 01 00 00 00       	mov    eax,0x1
c001f958:	e9 b6 00 00 00       	jmp    c001fa13 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001f95d:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001f963:	83 f8 0d             	cmp    eax,0xd
c001f966:	77 0a                	ja     c001f972 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	68 c8 00 00 00       	push   0xc8
c001f970:	eb 28                	jmp    c001f99a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001f972:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001f978:	83 f8 0d             	cmp    eax,0xd
c001f97b:	77 0a                	ja     c001f987 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001f97d:	83 ec 0c             	sub    esp,0xc
c001f980:	68 58 02 00 00       	push   0x258
c001f985:	eb 13                	jmp    c001f99a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001f987:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001f98d:	83 f8 06             	cmp    eax,0x6
c001f990:	77 10                	ja     c001f9a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001f992:	83 ec 0c             	sub    esp,0xc
c001f995:	68 dc 05 00 00       	push   0x5dc
c001f99a:	e8 4d 69 ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001f99f:	83 c4 10             	add    esp,0x10
c001f9a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f9a6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001f9a9:	75 06                	jne    c001f9b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001f9ab:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001f9af:	74 15                	je     c001f9c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001f9b1:	83 fe 06             	cmp    esi,0x6
c001f9b4:	77 10                	ja     c001f9c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001f9b6:	83 ec 0c             	sub    esp,0xc
c001f9b9:	68 c4 09 00 00       	push   0x9c4
c001f9be:	e8 29 69 ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001f9c3:	83 c4 10             	add    esp,0x10
c001f9c6:	46                   	inc    esi
c001f9c7:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001f9cd:	0f 85 56 ff ff ff    	jne    c001f929 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001f9d3:	83 ec 0c             	sub    esp,0xc
c001f9d6:	68 fe 4e 02 c0       	push   0xc0024efe
c001f9db:	e9 6b ff ff ff       	jmp    c001f94b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001f9e0:	0f ba e0 1e          	bt     eax,0x1e
c001f9e4:	73 0d                	jae    c001f9f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001f9e6:	83 ec 0c             	sub    esp,0xc
c001f9e9:	68 12 4f 02 c0       	push   0xc0024f12
c001f9ee:	e9 58 ff ff ff       	jmp    c001f94b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001f9f3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f9f8:	74 17                	je     c001fa11 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001f9fa:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f9ff:	74 10                	je     c001fa11 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001fa01:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001fa07:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fa0b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001fa0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fa11:	31 c0                	xor    eax,eax
c001fa13:	83 c4 2c             	add    esp,0x2c
c001fa16:	5b                   	pop    ebx
c001fa17:	5e                   	pop    esi
c001fa18:	5f                   	pop    edi
c001fa19:	5d                   	pop    ebp
c001fa1a:	c3                   	ret    
c001fa1b:	90                   	nop

c001fa1c <SATAPI::eject()>:
c001fa1c:	57                   	push   edi
c001fa1d:	b9 03 00 00 00       	mov    ecx,0x3
c001fa22:	83 ec 18             	sub    esp,0x18
c001fa25:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa29:	fc                   	cld    
c001fa2a:	31 c0                	xor    eax,eax
c001fa2c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa2e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fa33:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fa38:	50                   	push   eax
c001fa39:	6a 00                	push   0x0
c001fa3b:	6a 00                	push   0x0
c001fa3d:	6a 00                	push   0x0
c001fa3f:	6a 00                	push   0x0
c001fa41:	6a 02                	push   0x2
c001fa43:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa47:	50                   	push   eax
c001fa48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fa4c:	e8 e5 fc ff ff       	call   c001f736 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa51:	83 c4 38             	add    esp,0x38
c001fa54:	31 c0                	xor    eax,eax
c001fa56:	5f                   	pop    edi
c001fa57:	c3                   	ret    

c001fa58 <SATAPI::detectMedia()>:
c001fa58:	53                   	push   ebx
c001fa59:	83 ec 14             	sub    esp,0x14
c001fa5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fa60:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fa66:	e8 b5 af fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001fa6b:	59                   	pop    ecx
c001fa6c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fa72:	e8 99 af fe ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c001fa77:	c7 04 24 27 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f27
c001fa7e:	e8 cb 74 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fa83:	83 c4 10             	add    esp,0x10
c001fa86:	31 c0                	xor    eax,eax
c001fa88:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001fa8f:	85 d2                	test   edx,edx
c001fa91:	74 0f                	je     c001faa2 <SATAPI::detectMedia()+0x4a>
c001fa93:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001fa99:	75 07                	jne    c001faa2 <SATAPI::detectMedia()+0x4a>
c001fa9b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001faa2:	40                   	inc    eax
c001faa3:	83 f8 1a             	cmp    eax,0x1a
c001faa6:	75 e0                	jne    c001fa88 <SATAPI::detectMedia()+0x30>
c001faa8:	83 c4 08             	add    esp,0x8
c001faab:	5b                   	pop    ebx
c001faac:	c3                   	ret    
c001faad:	90                   	nop

c001faae <SATAPI::open(int, int, void*)>:
c001faae:	56                   	push   esi
c001faaf:	53                   	push   ebx
c001fab0:	51                   	push   ecx
c001fab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fab5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fab9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001fac3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001fac9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001facd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fad7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fae1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fae8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001faee:	e8 c9 fb fe ff       	call   c000f6bc <Phys::allocatePage()>
c001faf3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001faf9:	89 c6                	mov    esi,eax
c001fafb:	e8 bc fb fe ff       	call   c000f6bc <Phys::allocatePage()>
c001fb00:	81 c6 00 10 00 00    	add    esi,0x1000
c001fb06:	39 c6                	cmp    esi,eax
c001fb08:	74 10                	je     c001fb1a <SATAPI::open(int, int, void*)+0x6c>
c001fb0a:	83 ec 0c             	sub    esp,0xc
c001fb0d:	68 3c 4f 02 c0       	push   0xc0024f3c
c001fb12:	e8 ab f9 fe ff       	call   c000f4c2 <KePanic(char const*)>
c001fb17:	83 c4 10             	add    esp,0x10
c001fb1a:	83 ec 0c             	sub    esp,0xc
c001fb1d:	6a 02                	push   0x2
c001fb1f:	e8 79 2d ff ff       	call   c001289d <Virt::allocateKernelVirtualPages(int)>
c001fb24:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fb2a:	6a 03                	push   0x3
c001fb2c:	50                   	push   eax
c001fb2d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fb33:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001fb39:	e8 38 34 ff ff       	call   c0012f76 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fb3e:	83 c4 14             	add    esp,0x14
c001fb41:	68 78 01 00 00       	push   0x178
c001fb46:	e8 31 f6 fe ff       	call   c000f17c <malloc>
c001fb4b:	83 c4 0c             	add    esp,0xc
c001fb4e:	6a 00                	push   0x0
c001fb50:	68 ff ff ff 7f       	push   0x7fffffff
c001fb55:	6a 00                	push   0x0
c001fb57:	6a 00                	push   0x0
c001fb59:	53                   	push   ebx
c001fb5a:	68 52 4f 02 c0       	push   0xc0024f52
c001fb5f:	89 c6                	mov    esi,eax
c001fb61:	50                   	push   eax
c001fb62:	e8 45 a3 fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fb67:	83 c4 14             	add    esp,0x14
c001fb6a:	56                   	push   esi
c001fb6b:	e8 fc a3 fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001fb70:	5a                   	pop    edx
c001fb71:	59                   	pop    ecx
c001fb72:	0f be c0             	movsx  eax,al
c001fb75:	50                   	push   eax
c001fb76:	68 98 4d 02 c0       	push   0xc0024d98
c001fb7b:	e8 ce 73 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fb80:	58                   	pop    eax
c001fb81:	5a                   	pop    edx
c001fb82:	56                   	push   esi
c001fb83:	53                   	push   ebx
c001fb84:	e8 09 95 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001fb89:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001fb8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb92:	e8 47 99 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001fb97:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001fb9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fba1:	e8 b2 fe ff ff       	call   c001fa58 <SATAPI::detectMedia()>
c001fba6:	83 c4 14             	add    esp,0x14
c001fba9:	31 c0                	xor    eax,eax
c001fbab:	5b                   	pop    ebx
c001fbac:	5e                   	pop    esi
c001fbad:	c3                   	ret    

c001fbae <SATAPI::read(unsigned long long, int, void*)>:
c001fbae:	55                   	push   ebp
c001fbaf:	57                   	push   edi
c001fbb0:	56                   	push   esi
c001fbb1:	53                   	push   ebx
c001fbb2:	83 ec 3c             	sub    esp,0x3c
c001fbb5:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001fbb9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fbbd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001fbc1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001fbc5:	83 fd 04             	cmp    ebp,0x4
c001fbc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fbcc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fbd0:	7e 10                	jle    c001fbe2 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001fbd2:	83 ec 0c             	sub    esp,0xc
c001fbd5:	68 60 4f 02 c0       	push   0xc0024f60
c001fbda:	e8 e3 f8 fe ff       	call   c000f4c2 <KePanic(char const*)>
c001fbdf:	83 c4 10             	add    esp,0x10
c001fbe2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbe8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fbee:	51                   	push   ecx
c001fbef:	50                   	push   eax
c001fbf0:	83 c0 02             	add    eax,0x2
c001fbf3:	c1 e0 07             	shl    eax,0x7
c001fbf6:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001fbfc:	50                   	push   eax
c001fbfd:	52                   	push   edx
c001fbfe:	e8 af e6 ff ff       	call   c001e2b2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fc03:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001fc07:	b9 03 00 00 00       	mov    ecx,0x3
c001fc0c:	fc                   	cld    
c001fc0d:	31 c0                	xor    eax,eax
c001fc0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fc11:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001fc16:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001fc1b:	83 c4 0c             	add    esp,0xc
c001fc1e:	6a 00                	push   0x0
c001fc20:	6a 00                	push   0x0
c001fc22:	6a 00                	push   0x0
c001fc24:	6a 00                	push   0x0
c001fc26:	6a 02                	push   0x2
c001fc28:	8d 44 24 30          	lea    eax,[esp+0x30]
c001fc2c:	50                   	push   eax
c001fc2d:	53                   	push   ebx
c001fc2e:	e8 03 fb ff ff       	call   c001f736 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fc33:	83 c4 20             	add    esp,0x20
c001fc36:	85 c0                	test   eax,eax
c001fc38:	89 c6                	mov    esi,eax
c001fc3a:	75 46                	jne    c001fc82 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001fc3c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001fc40:	b9 03 00 00 00       	mov    ecx,0x3
c001fc45:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fc47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc4b:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001fc50:	0f c8                	bswap  eax
c001fc52:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001fc56:	89 e8                	mov    eax,ebp
c001fc58:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001fc5c:	50                   	push   eax
c001fc5d:	55                   	push   ebp
c001fc5e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001fc62:	c1 e5 0b             	shl    ebp,0xb
c001fc65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc6d:	55                   	push   ebp
c001fc6e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001fc72:	50                   	push   eax
c001fc73:	53                   	push   ebx
c001fc74:	e8 bd fa ff ff       	call   c001f736 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fc79:	83 c4 20             	add    esp,0x20
c001fc7c:	85 c0                	test   eax,eax
c001fc7e:	89 c6                	mov    esi,eax
c001fc80:	74 0c                	je     c001fc8e <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001fc82:	83 ec 0c             	sub    esp,0xc
c001fc85:	53                   	push   ebx
c001fc86:	e8 cd fd ff ff       	call   c001fa58 <SATAPI::detectMedia()>
c001fc8b:	83 c4 10             	add    esp,0x10
c001fc8e:	83 c4 3c             	add    esp,0x3c
c001fc91:	89 f0                	mov    eax,esi
c001fc93:	5b                   	pop    ebx
c001fc94:	5e                   	pop    esi
c001fc95:	5f                   	pop    edi
c001fc96:	5d                   	pop    ebp
c001fc97:	c3                   	ret    

c001fc98 <IOAPIC::close(int, int, void*)>:
c001fc98:	b8 00 00 00 00       	mov    eax,0x0
c001fc9d:	c3                   	ret    

c001fc9e <apicGetBase()>:
c001fc9e:	55                   	push   ebp
c001fc9f:	89 e5                	mov    ebp,esp
c001fca1:	83 ec 08             	sub    esp,0x8
c001fca4:	83 ec 0c             	sub    esp,0xc
c001fca7:	68 c4 4f 02 c0       	push   0xc0024fc4
c001fcac:	e8 11 f8 fe ff       	call   c000f4c2 <KePanic(char const*)>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	b8 00 00 00 00       	mov    eax,0x0
c001fcb9:	c9                   	leave  
c001fcba:	c3                   	ret    
c001fcbb:	90                   	nop

c001fcbc <IOAPIC::IOAPIC()>:
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc3:	83 ec 08             	sub    esp,0x8
c001fcc6:	68 d3 4f 02 c0       	push   0xc0024fd3
c001fccb:	50                   	push   eax
c001fccc:	e8 23 95 fe ff       	call   c00091f4 <Device::Device(char const*)>
c001fcd1:	83 c4 10             	add    esp,0x10
c001fcd4:	ba f4 4f 02 c0       	mov    edx,0xc0024ff4
c001fcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdd:	89 10                	mov    DWORD PTR [eax],edx
c001fcdf:	90                   	nop
c001fce0:	83 c4 0c             	add    esp,0xc
c001fce3:	c3                   	ret    

c001fce4 <apicOpen()>:
c001fce4:	55                   	push   ebp
c001fce5:	89 e5                	mov    ebp,esp
c001fce7:	53                   	push   ebx
c001fce8:	83 ec 34             	sub    esp,0x34
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	68 db 4f 02 c0       	push   0xc0024fdb
c001fcf3:	e8 56 72 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fcf8:	83 c4 10             	add    esp,0x10
c001fcfb:	a0 40 e1 02 c0       	mov    al,ds:0xc002e140
c001fd00:	83 f0 01             	xor    eax,0x1
c001fd03:	0f b6 c0             	movzx  eax,al
c001fd06:	85 c0                	test   eax,eax
c001fd08:	0f 84 a3 00 00 00    	je     c001fdb1 <apicOpen()+0xcd>
c001fd0e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001fd12:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001fd17:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001fd1b:	0f b6 c0             	movzx  eax,al
c001fd1e:	39 c2                	cmp    edx,eax
c001fd20:	0f 83 84 00 00 00    	jae    c001fdaa <apicOpen()+0xc6>
c001fd26:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001fd2d:	83 ec 0c             	sub    esp,0xc
c001fd30:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001fd33:	e8 44 f4 fe ff       	call   c000f17c <malloc>
c001fd38:	83 c4 10             	add    esp,0x10
c001fd3b:	89 c3                	mov    ebx,eax
c001fd3d:	83 ec 0c             	sub    esp,0xc
c001fd40:	53                   	push   ebx
c001fd41:	e8 76 ff ff ff       	call   c001fcbc <IOAPIC::IOAPIC()>
c001fd46:	83 c4 10             	add    esp,0x10
c001fd49:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001fd4c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001fd50:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001fd53:	89 14 85 20 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ee0],edx
c001fd5a:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c001fd5f:	83 c0 01             	add    eax,0x1
c001fd62:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c001fd67:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001fd6c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001fd72:	83 ec 08             	sub    esp,0x8
c001fd75:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001fd78:	50                   	push   eax
c001fd79:	e8 14 93 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001fd7e:	83 c4 10             	add    esp,0x10
c001fd81:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001fd84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd86:	83 c0 08             	add    eax,0x8
c001fd89:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd8b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001fd8f:	6a 00                	push   0x0
c001fd91:	6a 00                	push   0x0
c001fd93:	52                   	push   edx
c001fd94:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001fd97:	ff d0                	call   eax
c001fd99:	83 c4 10             	add    esp,0x10
c001fd9c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001fd9f:	83 c0 01             	add    eax,0x1
c001fda2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001fda5:	e9 68 ff ff ff       	jmp    c001fd12 <apicOpen()+0x2e>
c001fdaa:	c6 05 40 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e140,0x1
c001fdb1:	e8 e8 fe ff ff       	call   c001fc9e <apicGetBase()>
c001fdb6:	05 f0 00 00 00       	add    eax,0xf0
c001fdbb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fdbe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001fdc1:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001fdc6:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001fdcd:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001fdd4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001fdd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001fdda:	89 10                	mov    DWORD PTR [eax],edx
c001fddc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001fde3:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001fde8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001fdeb:	7d 7c                	jge    c001fe69 <apicOpen()+0x185>
c001fded:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fdf0:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001fdf7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001fdfa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fdfd:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001fe04:	c1 e8 08             	shr    eax,0x8
c001fe07:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001fe0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fe0e:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001fe15:	c1 e8 18             	shr    eax,0x18
c001fe18:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001fe1b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001fe1f:	3d ff 00 00 00       	cmp    eax,0xff
c001fe24:	75 3a                	jne    c001fe60 <apicOpen()+0x17c>
c001fe26:	e8 73 fe ff ff       	call   c001fc9e <apicGetBase()>
c001fe2b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001fe2f:	83 fa 01             	cmp    edx,0x1
c001fe32:	75 07                	jne    c001fe3b <apicOpen()+0x157>
c001fe34:	ba 60 03 00 00       	mov    edx,0x360
c001fe39:	eb 05                	jmp    c001fe40 <apicOpen()+0x15c>
c001fe3b:	ba 50 03 00 00       	mov    edx,0x350
c001fe40:	01 d0                	add    eax,edx
c001fe42:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001fe45:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001fe48:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe4a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001fe4d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001fe54:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001fe58:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001fe5b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001fe5e:	89 10                	mov    DWORD PTR [eax],edx
c001fe60:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001fe64:	e9 7a ff ff ff       	jmp    c001fde3 <apicOpen()+0xff>
c001fe69:	90                   	nop
c001fe6a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001fe6d:	c9                   	leave  
c001fe6e:	c3                   	ret    
c001fe6f:	90                   	nop

c001fe70 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001fe70:	55                   	push   ebp
c001fe71:	89 e5                	mov    ebp,esp
c001fe73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fe7c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001fe7f:	72 1d                	jb     c001fe9e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001fe81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe84:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001fe8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe8d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001fe93:	01 d0                	add    eax,edx
c001fe95:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001fe98:	73 04                	jae    c001fe9e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001fe9a:	b0 01                	mov    al,0x1
c001fe9c:	eb 02                	jmp    c001fea0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001fe9e:	b0 00                	mov    al,0x0
c001fea0:	5d                   	pop    ebp
c001fea1:	c3                   	ret    

c001fea2 <IOAPIC::read(int)>:
c001fea2:	55                   	push   ebp
c001fea3:	89 e5                	mov    ebp,esp
c001fea5:	83 ec 10             	sub    esp,0x10
c001fea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001feab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001feb1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001feb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001feb7:	0f b6 d0             	movzx  edx,al
c001feba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001febd:	89 10                	mov    DWORD PTR [eax],edx
c001febf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fec2:	83 c0 10             	add    eax,0x10
c001fec5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec7:	c9                   	leave  
c001fec8:	c3                   	ret    
c001fec9:	90                   	nop

c001feca <IOAPIC::open(int, int, void*)>:
c001feca:	55                   	push   ebp
c001fecb:	89 e5                	mov    ebp,esp
c001fecd:	57                   	push   edi
c001fece:	56                   	push   esi
c001fecf:	53                   	push   ebx
c001fed0:	83 ec 04             	sub    esp,0x4
c001fed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fed6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001fed9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fedf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fee2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fee8:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c001feef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fef2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fefb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ff01:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c001ff08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff0b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ff11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff14:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ff1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff1d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ff23:	0f b6 f0             	movzx  esi,al
c001ff26:	89 d0                	mov    eax,edx
c001ff28:	ba 00 00 00 00       	mov    edx,0x0
c001ff2d:	89 c7                	mov    edi,eax
c001ff2f:	83 e7 ff             	and    edi,0xffffffff
c001ff32:	89 f9                	mov    ecx,edi
c001ff34:	0f b6 da             	movzx  ebx,dl
c001ff37:	89 c8                	mov    eax,ecx
c001ff39:	89 da                	mov    edx,ebx
c001ff3b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ff3e:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ff41:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ff45:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ff49:	83 e0 00             	and    eax,0x0
c001ff4c:	09 d0                	or     eax,edx
c001ff4e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ff52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff55:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ff5b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff5e:	88 d1                	mov    cl,dl
c001ff60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ff63:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ff69:	0f b6 d0             	movzx  edx,al
c001ff6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff6f:	83 c2 08             	add    edx,0x8
c001ff72:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ff76:	0f b6 c9             	movzx  ecx,cl
c001ff79:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ff7f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ff83:	6a 01                	push   0x1
c001ff85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ff88:	e8 15 ff ff ff       	call   c001fea2 <IOAPIC::read(int)>
c001ff8d:	83 c4 08             	add    esp,0x8
c001ff90:	c1 f8 10             	sar    eax,0x10
c001ff93:	0f b6 c0             	movzx  eax,al
c001ff96:	8d 50 01             	lea    edx,[eax+0x1]
c001ff99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff9c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ffa2:	b8 00 00 00 00       	mov    eax,0x0
c001ffa7:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ffaa:	5b                   	pop    ebx
c001ffab:	5e                   	pop    esi
c001ffac:	5f                   	pop    edi
c001ffad:	5d                   	pop    ebp
c001ffae:	c3                   	ret    
c001ffaf:	90                   	nop

c001ffb0 <IOAPIC::write(int, int)>:
c001ffb0:	55                   	push   ebp
c001ffb1:	89 e5                	mov    ebp,esp
c001ffb3:	83 ec 10             	sub    esp,0x10
c001ffb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffb9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ffbf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ffc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffc5:	0f b6 d0             	movzx  edx,al
c001ffc8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffcb:	89 10                	mov    DWORD PTR [eax],edx
c001ffcd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ffd0:	8d 50 10             	lea    edx,[eax+0x10]
c001ffd3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ffd6:	89 02                	mov    DWORD PTR [edx],eax
c001ffd8:	90                   	nop
c001ffd9:	c9                   	leave  
c001ffda:	c3                   	ret    
c001ffdb:	90                   	nop

c001ffdc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ffdc:	55                   	push   ebp
c001ffdd:	89 e5                	mov    ebp,esp
c001ffdf:	53                   	push   ebx
c001ffe0:	83 ec 2c             	sub    esp,0x2c
c001ffe3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffe6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ffe9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ffec:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ffef:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fff2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001fff5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001fff8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001fffb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fffe:	88 d8                	mov    al,bl
c0020000:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020003:	88 c8                	mov    al,cl
c0020005:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020008:	88 d0                	mov    al,dl
c002000a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002000d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020011:	83 c0 08             	add    eax,0x8
c0020014:	d1 e0                	shl    eax,1
c0020016:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020019:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002001d:	83 c0 08             	add    eax,0x8
c0020020:	d1 e0                	shl    eax,1
c0020022:	83 c0 01             	add    eax,0x1
c0020025:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020028:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002002b:	50                   	push   eax
c002002c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002002f:	e8 6e fe ff ff       	call   c001fea2 <IOAPIC::read(int)>
c0020034:	83 c4 08             	add    esp,0x8
c0020037:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002003a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020041:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020044:	c1 e0 18             	shl    eax,0x18
c0020047:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002004a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002004d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020050:	52                   	push   edx
c0020051:	50                   	push   eax
c0020052:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020055:	e8 56 ff ff ff       	call   c001ffb0 <IOAPIC::write(int, int)>
c002005a:	83 c4 0c             	add    esp,0xc
c002005d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020060:	50                   	push   eax
c0020061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020064:	e8 39 fe ff ff       	call   c001fea2 <IOAPIC::read(int)>
c0020069:	83 c4 08             	add    esp,0x8
c002006c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002006f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020076:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002007d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020084:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020088:	85 c0                	test   eax,eax
c002008a:	74 09                	je     c0020095 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002008c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020093:	eb 07                	jmp    c002009c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020095:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002009c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c00200a0:	85 c0                	test   eax,eax
c00200a2:	74 09                	je     c00200ad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c00200a4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00200ab:	eb 07                	jmp    c00200b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c00200ad:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00200b4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00200bb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00200bf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00200c2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00200c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00200c8:	52                   	push   edx
c00200c9:	50                   	push   eax
c00200ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200cd:	e8 de fe ff ff       	call   c001ffb0 <IOAPIC::write(int, int)>
c00200d2:	83 c4 0c             	add    esp,0xc
c00200d5:	90                   	nop
c00200d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00200d9:	c9                   	leave  
c00200da:	c3                   	ret    
c00200db:	90                   	nop

c00200dc <APICTimer::close(int, int, void*)>:
c00200dc:	b8 00 00 00 00       	mov    eax,0x0
c00200e1:	c3                   	ret    
c00200e2:	66 90                	xchg   ax,ax

c00200e4 <apicTimerHandler(regs*, void*)>:
c00200e4:	83 ec 0c             	sub    esp,0xc
c00200e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00200eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00200ed:	b8 10 27 00 00       	mov    eax,0x2710
c00200f2:	ba 00 00 00 00       	mov    edx,0x0
c00200f7:	f7 f1                	div    ecx
c00200f9:	83 ec 0c             	sub    esp,0xc
c00200fc:	50                   	push   eax
c00200fd:	e8 66 a6 fe ff       	call   c000a768 <timerHandler(unsigned int)>
c0020102:	83 c4 10             	add    esp,0x10
c0020105:	90                   	nop
c0020106:	83 c4 0c             	add    esp,0xc
c0020109:	c3                   	ret    
c002010a:	66 90                	xchg   ax,ax

c002010c <APICTimer::open(int, int, void*)>:
c002010c:	83 ec 0c             	sub    esp,0xc
c002010f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020113:	8b 00                	mov    eax,DWORD PTR [eax]
c0020115:	83 c0 24             	add    eax,0x24
c0020118:	8b 00                	mov    eax,DWORD PTR [eax]
c002011a:	83 ec 08             	sub    esp,0x8
c002011d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020121:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020125:	ff d0                	call   eax
c0020127:	83 c4 10             	add    esp,0x10
c002012a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020132:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020140:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020146:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002014a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	51                   	push   ecx
c0020154:	6a 01                	push   0x1
c0020156:	68 e4 00 02 c0       	push   0xc00200e4
c002015b:	52                   	push   edx
c002015c:	50                   	push   eax
c002015d:	e8 dc 8e fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020162:	83 c4 20             	add    esp,0x20
c0020165:	89 c2                	mov    edx,eax
c0020167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020171:	b8 00 00 00 00       	mov    eax,0x0
c0020176:	83 c4 0c             	add    esp,0xc
c0020179:	c3                   	ret    
c002017a:	66 90                	xchg   ax,ax

c002017c <APICTimer::write(int)>:
c002017c:	83 ec 0c             	sub    esp,0xc
c002017f:	83 ec 0c             	sub    esp,0xc
c0020182:	68 18 50 02 c0       	push   0xc0025018
c0020187:	e8 36 f3 fe ff       	call   c000f4c2 <KePanic(char const*)>
c002018c:	83 c4 10             	add    esp,0x10
c002018f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020193:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020197:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002019d:	90                   	nop
c002019e:	83 c4 0c             	add    esp,0xc
c00201a1:	c3                   	ret    
c00201a2:	66 90                	xchg   ax,ax

c00201a4 <APICTimer::APICTimer()>:
c00201a4:	83 ec 0c             	sub    esp,0xc
c00201a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ab:	83 ec 08             	sub    esp,0x8
c00201ae:	68 28 50 02 c0       	push   0xc0025028
c00201b3:	50                   	push   eax
c00201b4:	e8 e3 a4 fe ff       	call   c000a69c <Timer::Timer(char const*)>
c00201b9:	83 c4 10             	add    esp,0x10
c00201bc:	ba 3c 50 02 c0       	mov    edx,0xc002503c
c00201c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c5:	89 10                	mov    DWORD PTR [eax],edx
c00201c7:	90                   	nop
c00201c8:	83 c4 0c             	add    esp,0xc
c00201cb:	c3                   	ret    

c00201cc <PIT::write(int)>:
c00201cc:	83 ec 10             	sub    esp,0x10
c00201cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00201d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00201dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00201e1:	a3 44 e1 02 c0       	mov    ds:0xc002e144,eax
c00201e6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00201eb:	89 c2                	mov    edx,eax
c00201ed:	c1 fa 1f             	sar    edx,0x1f
c00201f0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00201f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201f8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00201ff:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020204:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020208:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002020d:	ee                   	out    dx,al
c002020e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020212:	0f b6 c0             	movzx  eax,al
c0020215:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002021c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020220:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020224:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020229:	ee                   	out    dx,al
c002022a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002022e:	c1 f8 08             	sar    eax,0x8
c0020231:	0f b6 c0             	movzx  eax,al
c0020234:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002023b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002023f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020243:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020248:	ee                   	out    dx,al
c0020249:	90                   	nop
c002024a:	83 c4 10             	add    esp,0x10
c002024d:	c3                   	ret    
c002024e:	66 90                	xchg   ax,ax

c0020250 <pitHandler(regs*, void*)>:
c0020250:	83 ec 0c             	sub    esp,0xc
c0020253:	8b 0d 44 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e144
c0020259:	b8 10 27 00 00       	mov    eax,0x2710
c002025e:	89 c2                	mov    edx,eax
c0020260:	c1 fa 1f             	sar    edx,0x1f
c0020263:	f7 f9                	idiv   ecx
c0020265:	83 ec 0c             	sub    esp,0xc
c0020268:	50                   	push   eax
c0020269:	e8 fa a4 fe ff       	call   c000a768 <timerHandler(unsigned int)>
c002026e:	83 c4 10             	add    esp,0x10
c0020271:	90                   	nop
c0020272:	83 c4 0c             	add    esp,0xc
c0020275:	c3                   	ret    
c0020276:	66 90                	xchg   ax,ax

c0020278 <PIT::open(int, int, void*)>:
c0020278:	83 ec 0c             	sub    esp,0xc
c002027b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020281:	83 c0 24             	add    eax,0x24
c0020284:	8b 00                	mov    eax,DWORD PTR [eax]
c0020286:	83 ec 08             	sub    esp,0x8
c0020289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020291:	ff d0                	call   eax
c0020293:	83 c4 10             	add    esp,0x10
c0020296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029a:	83 ec 0c             	sub    esp,0xc
c002029d:	6a 00                	push   0x0
c002029f:	6a 01                	push   0x1
c00202a1:	68 50 02 02 c0       	push   0xc0020250
c00202a6:	6a 00                	push   0x0
c00202a8:	50                   	push   eax
c00202a9:	e8 90 8d fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00202ae:	83 c4 20             	add    esp,0x20
c00202b1:	89 c2                	mov    edx,eax
c00202b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00202bd:	b8 00 00 00 00       	mov    eax,0x0
c00202c2:	83 c4 0c             	add    esp,0xc
c00202c5:	c3                   	ret    
c00202c6:	66 90                	xchg   ax,ax

c00202c8 <PIT::close(int, int, void*)>:
c00202c8:	83 ec 0c             	sub    esp,0xc
c00202cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202cf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00202d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202dd:	6a 01                	push   0x1
c00202df:	68 50 02 02 c0       	push   0xc0020250
c00202e4:	6a 00                	push   0x0
c00202e6:	50                   	push   eax
c00202e7:	e8 88 8d fe ff       	call   c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00202ec:	83 c4 10             	add    esp,0x10
c00202ef:	b8 00 00 00 00       	mov    eax,0x0
c00202f4:	83 c4 0c             	add    esp,0xc
c00202f7:	c3                   	ret    

c00202f8 <PIT::PIT()>:
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ff:	83 ec 08             	sub    esp,0x8
c0020302:	68 64 50 02 c0       	push   0xc0025064
c0020307:	50                   	push   eax
c0020308:	e8 8f a3 fe ff       	call   c000a69c <Timer::Timer(char const*)>
c002030d:	83 c4 10             	add    esp,0x10
c0020310:	ba 8c 50 02 c0       	mov    edx,0xc002508c
c0020315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020319:	89 10                	mov    DWORD PTR [eax],edx
c002031b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002031f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020325:	0f b6 d0             	movzx  edx,al
c0020328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020337:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002033d:	0f b6 d0             	movzx  edx,al
c0020340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020344:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020353:	8d 50 01             	lea    edx,[eax+0x1]
c0020356:	88 d1                	mov    cl,dl
c0020358:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002035c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0020362:	0f b6 d0             	movzx  edx,al
c0020365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020369:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002036d:	83 e1 3f             	and    ecx,0x3f
c0020370:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020374:	90                   	nop
c0020375:	83 c4 0c             	add    esp,0xc
c0020378:	c3                   	ret    
c0020379:	66 90                	xchg   ax,ax
c002037b:	66 90                	xchg   ax,ax
c002037d:	66 90                	xchg   ax,ax
c002037f:	90                   	nop

c0020380 <avxDetect>:
c0020380:	b8 01 00 00 00       	mov    eax,0x1
c0020385:	0f a2                	cpuid  
c0020387:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002038d:	74 15                	je     c00203a4 <avxDetect.noAVX>
c002038f:	b8 01 00 00 00       	mov    eax,0x1
c0020394:	0f a2                	cpuid  
c0020396:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002039c:	74 06                	je     c00203a4 <avxDetect.noAVX>
c002039e:	b8 01 00 00 00       	mov    eax,0x1
c00203a3:	c3                   	ret    

c00203a4 <avxDetect.noAVX>:
c00203a4:	b8 00 00 00 00       	mov    eax,0x0
c00203a9:	c3                   	ret    

c00203aa <avxSave>:
c00203aa:	53                   	push   ebx
c00203ab:	52                   	push   edx
c00203ac:	31 c0                	xor    eax,eax
c00203ae:	48                   	dec    eax
c00203af:	89 c2                	mov    edx,eax
c00203b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00203b5:	0f ae 23             	xsave  [ebx]
c00203b8:	5a                   	pop    edx
c00203b9:	5b                   	pop    ebx
c00203ba:	c3                   	ret    

c00203bb <avxLoad>:
c00203bb:	53                   	push   ebx
c00203bc:	52                   	push   edx
c00203bd:	31 c0                	xor    eax,eax
c00203bf:	48                   	dec    eax
c00203c0:	89 c2                	mov    edx,eax
c00203c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00203c6:	0f ae 2b             	xrstor [ebx]
c00203c9:	5a                   	pop    edx
c00203ca:	5b                   	pop    ebx
c00203cb:	c3                   	ret    

c00203cc <avxInit>:
c00203cc:	e8 47 03 00 00       	call   c0020718 <sseInit>
c00203d1:	50                   	push   eax
c00203d2:	51                   	push   ecx
c00203d3:	0f 20 e0             	mov    eax,cr4
c00203d6:	0d 00 00 04 00       	or     eax,0x40000
c00203db:	0f 22 e0             	mov    cr4,eax
c00203de:	31 c9                	xor    ecx,ecx
c00203e0:	0f 01 d0             	xgetbv 
c00203e3:	0d 07 00 00 00       	or     eax,0x7
c00203e8:	0f 01 d1             	xsetbv 
c00203eb:	59                   	pop    ecx
c00203ec:	58                   	pop    eax
c00203ed:	c3                   	ret    

c00203ee <avxClose>:
c00203ee:	c3                   	ret    
c00203ef:	90                   	nop

c00203f0 <isr0>:
c00203f0:	fa                   	cli    
c00203f1:	68 00 00 00 00       	push   0x0
c00203f6:	68 00 00 00 00       	push   0x0
c00203fb:	e9 56 01 00 00       	jmp    c0020556 <int_common_stub>

c0020400 <isr1>:
c0020400:	fa                   	cli    
c0020401:	6a 00                	push   0x0
c0020403:	6a 01                	push   0x1
c0020405:	e9 4c 01 00 00       	jmp    c0020556 <int_common_stub>

c002040a <isr2>:
c002040a:	fa                   	cli    
c002040b:	6a 00                	push   0x0
c002040d:	6a 02                	push   0x2
c002040f:	e9 42 01 00 00       	jmp    c0020556 <int_common_stub>

c0020414 <isr3>:
c0020414:	fa                   	cli    
c0020415:	6a 00                	push   0x0
c0020417:	6a 03                	push   0x3
c0020419:	e9 38 01 00 00       	jmp    c0020556 <int_common_stub>

c002041e <isr4>:
c002041e:	fa                   	cli    
c002041f:	6a 00                	push   0x0
c0020421:	6a 04                	push   0x4
c0020423:	e9 2e 01 00 00       	jmp    c0020556 <int_common_stub>

c0020428 <isr5>:
c0020428:	fa                   	cli    
c0020429:	6a 00                	push   0x0
c002042b:	6a 05                	push   0x5
c002042d:	e9 24 01 00 00       	jmp    c0020556 <int_common_stub>

c0020432 <isr6>:
c0020432:	fa                   	cli    
c0020433:	6a 00                	push   0x0
c0020435:	6a 06                	push   0x6
c0020437:	e9 1a 01 00 00       	jmp    c0020556 <int_common_stub>

c002043c <isr7>:
c002043c:	fa                   	cli    
c002043d:	6a 00                	push   0x0
c002043f:	6a 07                	push   0x7
c0020441:	e9 10 01 00 00       	jmp    c0020556 <int_common_stub>

c0020446 <isr8>:
c0020446:	fa                   	cli    
c0020447:	6a 08                	push   0x8
c0020449:	e9 08 01 00 00       	jmp    c0020556 <int_common_stub>

c002044e <isr9>:
c002044e:	fa                   	cli    
c002044f:	6a 00                	push   0x0
c0020451:	6a 09                	push   0x9
c0020453:	e9 fe 00 00 00       	jmp    c0020556 <int_common_stub>

c0020458 <isr10>:
c0020458:	fa                   	cli    
c0020459:	6a 0a                	push   0xa
c002045b:	e9 f6 00 00 00       	jmp    c0020556 <int_common_stub>

c0020460 <isr11>:
c0020460:	fa                   	cli    
c0020461:	6a 0b                	push   0xb
c0020463:	e9 ee 00 00 00       	jmp    c0020556 <int_common_stub>

c0020468 <isr12>:
c0020468:	fa                   	cli    
c0020469:	6a 0c                	push   0xc
c002046b:	e9 e6 00 00 00       	jmp    c0020556 <int_common_stub>

c0020470 <isr13>:
c0020470:	fa                   	cli    
c0020471:	6a 0d                	push   0xd
c0020473:	53                   	push   ebx
c0020474:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020478:	81 fb 46 06 02 c0    	cmp    ebx,0xc0020646
c002047e:	5b                   	pop    ebx
c002047f:	0f 84 c3 01 00 00    	je     c0020648 <finishSignal2>
c0020485:	e9 cc 00 00 00       	jmp    c0020556 <int_common_stub>

c002048a <isr14>:
c002048a:	fa                   	cli    
c002048b:	6a 0e                	push   0xe
c002048d:	e9 c4 00 00 00       	jmp    c0020556 <int_common_stub>

c0020492 <isr15>:
c0020492:	fa                   	cli    
c0020493:	6a 00                	push   0x0
c0020495:	6a 0f                	push   0xf
c0020497:	e9 ba 00 00 00       	jmp    c0020556 <int_common_stub>

c002049c <isr16>:
c002049c:	fa                   	cli    
c002049d:	6a 00                	push   0x0
c002049f:	6a 10                	push   0x10
c00204a1:	e9 b0 00 00 00       	jmp    c0020556 <int_common_stub>

c00204a6 <isr17>:
c00204a6:	fa                   	cli    
c00204a7:	6a 00                	push   0x0
c00204a9:	6a 11                	push   0x11
c00204ab:	e9 a6 00 00 00       	jmp    c0020556 <int_common_stub>

c00204b0 <isr18>:
c00204b0:	fa                   	cli    
c00204b1:	6a 00                	push   0x0
c00204b3:	6a 12                	push   0x12
c00204b5:	e9 9c 00 00 00       	jmp    c0020556 <int_common_stub>

c00204ba <irq3>:
c00204ba:	fa                   	cli    
c00204bb:	6a 00                	push   0x0
c00204bd:	6a 23                	push   0x23
c00204bf:	e9 92 00 00 00       	jmp    c0020556 <int_common_stub>

c00204c4 <irq4>:
c00204c4:	fa                   	cli    
c00204c5:	6a 00                	push   0x0
c00204c7:	6a 24                	push   0x24
c00204c9:	e9 88 00 00 00       	jmp    c0020556 <int_common_stub>

c00204ce <irq5>:
c00204ce:	fa                   	cli    
c00204cf:	6a 00                	push   0x0
c00204d1:	6a 25                	push   0x25
c00204d3:	e9 7e 00 00 00       	jmp    c0020556 <int_common_stub>

c00204d8 <irq6>:
c00204d8:	fa                   	cli    
c00204d9:	6a 00                	push   0x0
c00204db:	6a 26                	push   0x26
c00204dd:	e9 74 00 00 00       	jmp    c0020556 <int_common_stub>

c00204e2 <irq7>:
c00204e2:	fa                   	cli    
c00204e3:	6a 00                	push   0x0
c00204e5:	6a 27                	push   0x27
c00204e7:	e9 6a 00 00 00       	jmp    c0020556 <int_common_stub>

c00204ec <irq8>:
c00204ec:	fa                   	cli    
c00204ed:	6a 00                	push   0x0
c00204ef:	6a 28                	push   0x28
c00204f1:	e9 60 00 00 00       	jmp    c0020556 <int_common_stub>

c00204f6 <irq9>:
c00204f6:	fa                   	cli    
c00204f7:	6a 00                	push   0x0
c00204f9:	6a 29                	push   0x29
c00204fb:	e9 56 00 00 00       	jmp    c0020556 <int_common_stub>

c0020500 <irq10>:
c0020500:	fa                   	cli    
c0020501:	6a 00                	push   0x0
c0020503:	6a 2a                	push   0x2a
c0020505:	e9 4c 00 00 00       	jmp    c0020556 <int_common_stub>

c002050a <irq11>:
c002050a:	fa                   	cli    
c002050b:	6a 00                	push   0x0
c002050d:	6a 2b                	push   0x2b
c002050f:	e9 42 00 00 00       	jmp    c0020556 <int_common_stub>

c0020514 <irq12>:
c0020514:	fa                   	cli    
c0020515:	6a 00                	push   0x0
c0020517:	6a 2c                	push   0x2c
c0020519:	e9 38 00 00 00       	jmp    c0020556 <int_common_stub>

c002051e <irq13>:
c002051e:	fa                   	cli    
c002051f:	6a 00                	push   0x0
c0020521:	6a 2d                	push   0x2d
c0020523:	e9 2e 00 00 00       	jmp    c0020556 <int_common_stub>

c0020528 <irq14>:
c0020528:	fa                   	cli    
c0020529:	6a 00                	push   0x0
c002052b:	6a 2e                	push   0x2e
c002052d:	e9 24 00 00 00       	jmp    c0020556 <int_common_stub>

c0020532 <irq15>:
c0020532:	fa                   	cli    
c0020533:	6a 00                	push   0x0
c0020535:	6a 2f                	push   0x2f
c0020537:	e9 1a 00 00 00       	jmp    c0020556 <int_common_stub>

c002053c <irq1>:
c002053c:	fa                   	cli    
c002053d:	6a 00                	push   0x0
c002053f:	6a 21                	push   0x21
c0020541:	eb 13                	jmp    c0020556 <int_common_stub>

c0020543 <irq2>:
c0020543:	fa                   	cli    
c0020544:	6a 00                	push   0x0
c0020546:	6a 22                	push   0x22
c0020548:	eb 0c                	jmp    c0020556 <int_common_stub>

c002054a <isr96>:
c002054a:	6a 00                	push   0x0
c002054c:	6a 60                	push   0x60
c002054e:	fb                   	sti    
c002054f:	eb 37                	jmp    c0020588 <syscall_common_stub>

c0020551 <irq0>:
c0020551:	fa                   	cli    
c0020552:	6a 00                	push   0x0
c0020554:	6a 20                	push   0x20

c0020556 <int_common_stub>:
c0020556:	60                   	pusha  
c0020557:	1e                   	push   ds
c0020558:	06                   	push   es
c0020559:	0f a0                	push   fs
c002055b:	0f a8                	push   gs
c002055d:	66 b8 10 00          	mov    ax,0x10
c0020561:	66 8e d8             	mov    ds,ax
c0020564:	66 8e c0             	mov    es,ax
c0020567:	66 8e e0             	mov    fs,ax
c002056a:	66 8e e8             	mov    gs,ax
c002056d:	54                   	push   esp
c002056e:	fc                   	cld    
c002056f:	e8 6c da fe ff       	call   c000dfe0 <int_handler>
c0020574:	81 c4 04 00 00 00    	add    esp,0x4
c002057a:	0f a9                	pop    gs
c002057c:	0f a1                	pop    fs
c002057e:	07                   	pop    es
c002057f:	1f                   	pop    ds
c0020580:	61                   	popa   
c0020581:	81 c4 08 00 00 00    	add    esp,0x8
c0020587:	cf                   	iret   

c0020588 <syscall_common_stub>:
c0020588:	60                   	pusha  
c0020589:	1e                   	push   ds
c002058a:	06                   	push   es
c002058b:	0f a0                	push   fs
c002058d:	0f a8                	push   gs
c002058f:	66 b8 10 00          	mov    ax,0x10
c0020593:	66 8e d8             	mov    ds,ax
c0020596:	66 8e c0             	mov    es,ax
c0020599:	66 8e e0             	mov    fs,ax
c002059c:	66 8e e8             	mov    gs,ax
c002059f:	54                   	push   esp
c00205a0:	fc                   	cld    
c00205a1:	e8 3a da fe ff       	call   c000dfe0 <int_handler>
c00205a6:	81 c4 04 00 00 00    	add    esp,0x4
c00205ac:	0f a9                	pop    gs
c00205ae:	0f a1                	pop    fs
c00205b0:	07                   	pop    es
c00205b1:	1f                   	pop    ds
c00205b2:	e8 bd 01 ff ff       	call   c0010774 <KiCheckSignalZ>
c00205b7:	3d 00 00 00 00       	cmp    eax,0x0
c00205bc:	0f 84 c0 00 00 00    	je     c0020682 <skipSignals>
c00205c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00205c7:	61                   	popa   
c00205c8:	53                   	push   ebx
c00205c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00205cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00205d2:	5b                   	pop    ebx
c00205d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00205d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00205db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00205de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00205e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00205e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00205e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00205ea:	81 c4 08 00 00 00    	add    esp,0x8
c00205f0:	5e                   	pop    esi
c00205f1:	5b                   	pop    ebx
c00205f2:	59                   	pop    ecx
c00205f3:	5a                   	pop    edx
c00205f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00205f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00205fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00205fd:	52                   	push   edx
c00205fe:	51                   	push   ecx
c00205ff:	53                   	push   ebx
c0020600:	56                   	push   esi
c0020601:	81 ec 08 00 00 00    	sub    esp,0x8
c0020607:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002060a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002060d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0020610:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020613:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020616:	60                   	pusha  
c0020617:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002061d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0020620:	89 e3                	mov    ebx,esp
c0020622:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0020625:	52                   	push   edx
c0020626:	68 46 06 02 c0       	push   0xc0020646
c002062b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002062e:	89 dc                	mov    esp,ebx
c0020630:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0020633:	68 23 00 00 00       	push   0x23
c0020638:	51                   	push   ecx
c0020639:	68 02 02 00 00       	push   0x202
c002063e:	68 1b 00 00 00       	push   0x1b
c0020643:	ff 36                	push   DWORD PTR [esi]
c0020645:	cf                   	iret   

c0020646 <finishSignal>:
c0020646:	cd 0f                	int    0xf

c0020648 <finishSignal2>:
c0020648:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002064e:	e8 9e 01 ff ff       	call   c00107f1 <KiFinishSignalZ>
c0020653:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0020659:	68 23 00 00 00       	push   0x23
c002065e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0020661:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0020664:	68 1b 00 00 00       	push   0x1b
c0020669:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002066c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002066f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0020672:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0020675:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020678:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002067b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002067e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0020681:	cf                   	iret   

c0020682 <skipSignals>:
c0020682:	61                   	popa   
c0020683:	81 c4 08 00 00 00    	add    esp,0x8
c0020689:	cf                   	iret   
c002068a:	90                   	nop
c002068b:	90                   	nop

c002068c <irq16>:
c002068c:	fa                   	cli    
c002068d:	6a 00                	push   0x0
c002068f:	6a 30                	push   0x30
c0020691:	e9 c0 fe ff ff       	jmp    c0020556 <int_common_stub>

c0020696 <irq17>:
c0020696:	fa                   	cli    
c0020697:	6a 00                	push   0x0
c0020699:	6a 31                	push   0x31
c002069b:	e9 b6 fe ff ff       	jmp    c0020556 <int_common_stub>

c00206a0 <irq18>:
c00206a0:	fa                   	cli    
c00206a1:	6a 00                	push   0x0
c00206a3:	6a 32                	push   0x32
c00206a5:	e9 ac fe ff ff       	jmp    c0020556 <int_common_stub>

c00206aa <irq19>:
c00206aa:	fa                   	cli    
c00206ab:	6a 00                	push   0x0
c00206ad:	6a 33                	push   0x33
c00206af:	e9 a2 fe ff ff       	jmp    c0020556 <int_common_stub>

c00206b4 <irq20>:
c00206b4:	fa                   	cli    
c00206b5:	6a 00                	push   0x0
c00206b7:	6a 34                	push   0x34
c00206b9:	e9 98 fe ff ff       	jmp    c0020556 <int_common_stub>

c00206be <irq21>:
c00206be:	fa                   	cli    
c00206bf:	6a 00                	push   0x0
c00206c1:	6a 35                	push   0x35
c00206c3:	e9 8e fe ff ff       	jmp    c0020556 <int_common_stub>

c00206c8 <irq22>:
c00206c8:	fa                   	cli    
c00206c9:	6a 00                	push   0x0
c00206cb:	6a 36                	push   0x36
c00206cd:	e9 84 fe ff ff       	jmp    c0020556 <int_common_stub>

c00206d2 <irq23>:
c00206d2:	fa                   	cli    
c00206d3:	6a 00                	push   0x0
c00206d5:	6a 37                	push   0x37
c00206d7:	e9 7a fe ff ff       	jmp    c0020556 <int_common_stub>
c00206dc:	66 90                	xchg   ax,ax
c00206de:	66 90                	xchg   ax,ax

c00206e0 <i386GetRDRAND>:
c00206e0:	b9 64 00 00 00       	mov    ecx,0x64

c00206e5 <retry>:
c00206e5:	0f c7 f0             	rdrand eax
c00206e8:	72 05                	jb     c00206ef <retry.done>
c00206ea:	e2 f9                	loop   c00206e5 <retry>

c00206ec <retry.fail>:
c00206ec:	31 c0                	xor    eax,eax
c00206ee:	c3                   	ret    

c00206ef <retry.done>:
c00206ef:	c3                   	ret    

c00206f0 <sseDetect>:
c00206f0:	b8 01 00 00 00       	mov    eax,0x1
c00206f5:	0f a2                	cpuid  
c00206f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00206fd:	74 06                	je     c0020705 <sseDetect.noSSE>
c00206ff:	b8 01 00 00 00       	mov    eax,0x1
c0020704:	c3                   	ret    

c0020705 <sseDetect.noSSE>:
c0020705:	31 c0                	xor    eax,eax
c0020707:	c3                   	ret    

c0020708 <sseSave>:
c0020708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002070c:	0f ae 00             	fxsave [eax]
c002070f:	c3                   	ret    

c0020710 <sseLoad>:
c0020710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020714:	0f ae 08             	fxrstor [eax]
c0020717:	c3                   	ret    

c0020718 <sseInit>:
c0020718:	e8 48 00 00 00       	call   c0020765 <x87Init>
c002071d:	0f 20 e0             	mov    eax,cr4
c0020720:	66 0d 00 06          	or     ax,0x600
c0020724:	0f 22 e0             	mov    cr4,eax
c0020727:	c3                   	ret    

c0020728 <sseClose>:
c0020728:	c3                   	ret    
c0020729:	66 90                	xchg   ax,ax
c002072b:	66 90                	xchg   ax,ax
c002072d:	66 90                	xchg   ax,ax
c002072f:	90                   	nop

c0020730 <value_37F>:
c0020730:	7f 03                	jg     c0020735 <value_37A+0x1>

c0020732 <value_37E>:
c0020732:	7e 03                	jle    c0020737 <x87Detect+0x1>

c0020734 <value_37A>:
c0020734:	7a 03                	jp     c0020739 <x87Detect+0x3>

c0020736 <x87Detect>:
c0020736:	53                   	push   ebx
c0020737:	51                   	push   ecx
c0020738:	52                   	push   edx
c0020739:	b8 01 00 00 00       	mov    eax,0x1
c002073e:	0f a2                	cpuid  
c0020740:	f7 c2 01 00 00 00    	test   edx,0x1
c0020746:	74 06                	je     c002074e <x87Detect.nox87>
c0020748:	b8 01 00 00 00       	mov    eax,0x1
c002074d:	c3                   	ret    

c002074e <x87Detect.nox87>:
c002074e:	b8 00 00 00 00       	mov    eax,0x0
c0020753:	5a                   	pop    edx
c0020754:	59                   	pop    ecx
c0020755:	5b                   	pop    ebx
c0020756:	c3                   	ret    

c0020757 <x87Save>:
c0020757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002075b:	dd 30                	fnsave [eax]
c002075d:	c3                   	ret    

c002075e <x87Load>:
c002075e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020762:	dd 20                	frstor [eax]
c0020764:	c3                   	ret    

c0020765 <x87Init>:
c0020765:	0f 20 c0             	mov    eax,cr0
c0020768:	66 25 fb ff          	and    ax,0xfffb
c002076c:	66 0d 22 00          	or     ax,0x22
c0020770:	0f 22 c0             	mov    cr0,eax
c0020773:	db e3                	fninit 
c0020775:	0f 06                	clts   
c0020777:	d9 2d 34 07 02 c0    	fldcw  WORD PTR ds:0xc0020734
c002077d:	c3                   	ret    

c002077e <x87Close>:
c002077e:	c3                   	ret    
c002077f:	90                   	nop

c0020780 <__do_global_ctors_aux>:
c0020780:	a1 34 17 02 c0       	mov    eax,ds:0xc0021734
c0020785:	83 f8 ff             	cmp    eax,0xffffffff
c0020788:	74 1a                	je     c00207a4 <__do_global_ctors_aux+0x24>
c002078a:	55                   	push   ebp
c002078b:	89 e5                	mov    ebp,esp
c002078d:	53                   	push   ebx
c002078e:	52                   	push   edx
c002078f:	bb 34 17 02 c0       	mov    ebx,0xc0021734
c0020794:	ff d0                	call   eax
c0020796:	83 eb 04             	sub    ebx,0x4
c0020799:	8b 03                	mov    eax,DWORD PTR [ebx]
c002079b:	83 f8 ff             	cmp    eax,0xffffffff
c002079e:	75 f4                	jne    c0020794 <__do_global_ctors_aux+0x14>
c00207a0:	58                   	pop    eax
c00207a1:	5b                   	pop    ebx
c00207a2:	5d                   	pop    ebp
c00207a3:	c3                   	ret    
c00207a4:	c3                   	ret    
c00207a5:	66 90                	xchg   ax,ax
c00207a7:	90                   	nop

c00207a8 <__divdi3>:
c00207a8:	55                   	push   ebp
c00207a9:	57                   	push   edi
c00207aa:	56                   	push   esi
c00207ab:	53                   	push   ebx
c00207ac:	83 ec 1c             	sub    esp,0x1c
c00207af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00207b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00207b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00207ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00207be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00207c6:	85 db                	test   ebx,ebx
c00207c8:	0f 88 8e 00 00 00    	js     c002085c <__divdi3+0xb4>
c00207ce:	89 dd                	mov    ebp,ebx
c00207d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00207d8:	89 d3                	mov    ebx,edx
c00207da:	85 d2                	test   edx,edx
c00207dc:	79 0d                	jns    c00207eb <__divdi3+0x43>
c00207de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00207e2:	f7 d8                	neg    eax
c00207e4:	83 d2 00             	adc    edx,0x0
c00207e7:	f7 da                	neg    edx
c00207e9:	89 d3                	mov    ebx,edx
c00207eb:	89 c7                	mov    edi,eax
c00207ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00207f0:	85 db                	test   ebx,ebx
c00207f2:	75 48                	jne    c002083c <__divdi3+0x94>
c00207f4:	39 ef                	cmp    edi,ebp
c00207f6:	76 24                	jbe    c002081c <__divdi3+0x74>
c00207f8:	89 ea                	mov    edx,ebp
c00207fa:	f7 f7                	div    edi
c00207fc:	89 c1                	mov    ecx,eax
c00207fe:	31 f6                	xor    esi,esi
c0020800:	89 c8                	mov    eax,ecx
c0020802:	89 f2                	mov    edx,esi
c0020804:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020808:	85 c9                	test   ecx,ecx
c002080a:	74 07                	je     c0020813 <__divdi3+0x6b>
c002080c:	f7 d8                	neg    eax
c002080e:	83 d2 00             	adc    edx,0x0
c0020811:	f7 da                	neg    edx
c0020813:	83 c4 1c             	add    esp,0x1c
c0020816:	5b                   	pop    ebx
c0020817:	5e                   	pop    esi
c0020818:	5f                   	pop    edi
c0020819:	5d                   	pop    ebp
c002081a:	c3                   	ret    
c002081b:	90                   	nop
c002081c:	85 ff                	test   edi,edi
c002081e:	75 0b                	jne    c002082b <__divdi3+0x83>
c0020820:	b8 01 00 00 00       	mov    eax,0x1
c0020825:	31 d2                	xor    edx,edx
c0020827:	f7 f3                	div    ebx
c0020829:	89 c7                	mov    edi,eax
c002082b:	31 d2                	xor    edx,edx
c002082d:	89 e8                	mov    eax,ebp
c002082f:	f7 f7                	div    edi
c0020831:	89 c6                	mov    esi,eax
c0020833:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020836:	f7 f7                	div    edi
c0020838:	89 c1                	mov    ecx,eax
c002083a:	eb c4                	jmp    c0020800 <__divdi3+0x58>
c002083c:	39 eb                	cmp    ebx,ebp
c002083e:	77 3c                	ja     c002087c <__divdi3+0xd4>
c0020840:	0f bd f3             	bsr    esi,ebx
c0020843:	83 f6 1f             	xor    esi,0x1f
c0020846:	75 40                	jne    c0020888 <__divdi3+0xe0>
c0020848:	39 eb                	cmp    ebx,ebp
c002084a:	72 09                	jb     c0020855 <__divdi3+0xad>
c002084c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002084f:	0f 87 97 00 00 00    	ja     c00208ec <__divdi3+0x144>
c0020855:	b9 01 00 00 00       	mov    ecx,0x1
c002085a:	eb a4                	jmp    c0020800 <__divdi3+0x58>
c002085c:	f7 d9                	neg    ecx
c002085e:	83 d3 00             	adc    ebx,0x0
c0020861:	f7 db                	neg    ebx
c0020863:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020866:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002086a:	89 dd                	mov    ebp,ebx
c002086c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020874:	e9 5f ff ff ff       	jmp    c00207d8 <__divdi3+0x30>
c0020879:	8d 76 00             	lea    esi,[esi+0x0]
c002087c:	31 f6                	xor    esi,esi
c002087e:	31 c9                	xor    ecx,ecx
c0020880:	e9 7b ff ff ff       	jmp    c0020800 <__divdi3+0x58>
c0020885:	8d 76 00             	lea    esi,[esi+0x0]
c0020888:	b8 20 00 00 00       	mov    eax,0x20
c002088d:	29 f0                	sub    eax,esi
c002088f:	89 f1                	mov    ecx,esi
c0020891:	d3 e3                	shl    ebx,cl
c0020893:	89 fa                	mov    edx,edi
c0020895:	88 c1                	mov    cl,al
c0020897:	d3 ea                	shr    edx,cl
c0020899:	09 da                	or     edx,ebx
c002089b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002089f:	89 f1                	mov    ecx,esi
c00208a1:	d3 e7                	shl    edi,cl
c00208a3:	89 eb                	mov    ebx,ebp
c00208a5:	88 c1                	mov    cl,al
c00208a7:	d3 eb                	shr    ebx,cl
c00208a9:	89 f1                	mov    ecx,esi
c00208ab:	d3 e5                	shl    ebp,cl
c00208ad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00208b0:	88 c1                	mov    cl,al
c00208b2:	d3 ea                	shr    edx,cl
c00208b4:	09 d5                	or     ebp,edx
c00208b6:	89 e8                	mov    eax,ebp
c00208b8:	89 da                	mov    edx,ebx
c00208ba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00208be:	89 d3                	mov    ebx,edx
c00208c0:	89 c5                	mov    ebp,eax
c00208c2:	f7 e7                	mul    edi
c00208c4:	39 d3                	cmp    ebx,edx
c00208c6:	72 18                	jb     c00208e0 <__divdi3+0x138>
c00208c8:	74 0a                	je     c00208d4 <__divdi3+0x12c>
c00208ca:	89 e9                	mov    ecx,ebp
c00208cc:	31 f6                	xor    esi,esi
c00208ce:	e9 2d ff ff ff       	jmp    c0020800 <__divdi3+0x58>
c00208d3:	90                   	nop
c00208d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00208d7:	89 f1                	mov    ecx,esi
c00208d9:	d3 e7                	shl    edi,cl
c00208db:	39 c7                	cmp    edi,eax
c00208dd:	73 eb                	jae    c00208ca <__divdi3+0x122>
c00208df:	90                   	nop
c00208e0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00208e3:	31 f6                	xor    esi,esi
c00208e5:	e9 16 ff ff ff       	jmp    c0020800 <__divdi3+0x58>
c00208ea:	66 90                	xchg   ax,ax
c00208ec:	31 c9                	xor    ecx,ecx
c00208ee:	e9 0d ff ff ff       	jmp    c0020800 <__divdi3+0x58>
c00208f3:	90                   	nop

c00208f4 <__moddi3>:
c00208f4:	55                   	push   ebp
c00208f5:	57                   	push   edi
c00208f6:	56                   	push   esi
c00208f7:	53                   	push   ebx
c00208f8:	83 ec 2c             	sub    esp,0x2c
c00208fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00208ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020903:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020907:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002090b:	85 db                	test   ebx,ebx
c002090d:	0f 88 85 00 00 00    	js     c0020998 <__moddi3+0xa4>
c0020913:	89 de                	mov    esi,ebx
c0020915:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002091d:	89 d7                	mov    edi,edx
c002091f:	85 d2                	test   edx,edx
c0020921:	79 09                	jns    c002092c <__moddi3+0x38>
c0020923:	f7 d8                	neg    eax
c0020925:	83 d2 00             	adc    edx,0x0
c0020928:	f7 da                	neg    edx
c002092a:	89 d7                	mov    edi,edx
c002092c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020930:	89 cd                	mov    ebp,ecx
c0020932:	85 ff                	test   edi,edi
c0020934:	75 52                	jne    c0020988 <__moddi3+0x94>
c0020936:	89 c3                	mov    ebx,eax
c0020938:	39 f0                	cmp    eax,esi
c002093a:	76 24                	jbe    c0020960 <__moddi3+0x6c>
c002093c:	89 c8                	mov    eax,ecx
c002093e:	89 f2                	mov    edx,esi
c0020940:	f7 f3                	div    ebx
c0020942:	89 d6                	mov    esi,edx
c0020944:	89 f0                	mov    eax,esi
c0020946:	31 d2                	xor    edx,edx
c0020948:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002094c:	85 c9                	test   ecx,ecx
c002094e:	74 07                	je     c0020957 <__moddi3+0x63>
c0020950:	f7 d8                	neg    eax
c0020952:	83 d2 00             	adc    edx,0x0
c0020955:	f7 da                	neg    edx
c0020957:	83 c4 2c             	add    esp,0x2c
c002095a:	5b                   	pop    ebx
c002095b:	5e                   	pop    esi
c002095c:	5f                   	pop    edi
c002095d:	5d                   	pop    ebp
c002095e:	c3                   	ret    
c002095f:	90                   	nop
c0020960:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020964:	85 db                	test   ebx,ebx
c0020966:	75 0d                	jne    c0020975 <__moddi3+0x81>
c0020968:	b8 01 00 00 00       	mov    eax,0x1
c002096d:	31 d2                	xor    edx,edx
c002096f:	f7 f7                	div    edi
c0020971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020975:	89 f0                	mov    eax,esi
c0020977:	31 d2                	xor    edx,edx
c0020979:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002097d:	f7 f7                	div    edi
c002097f:	89 e8                	mov    eax,ebp
c0020981:	f7 f7                	div    edi
c0020983:	89 d6                	mov    esi,edx
c0020985:	eb bd                	jmp    c0020944 <__moddi3+0x50>
c0020987:	90                   	nop
c0020988:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002098c:	39 f7                	cmp    edi,esi
c002098e:	76 20                	jbe    c00209b0 <__moddi3+0xbc>
c0020990:	89 c8                	mov    eax,ecx
c0020992:	89 f2                	mov    edx,esi
c0020994:	eb b2                	jmp    c0020948 <__moddi3+0x54>
c0020996:	66 90                	xchg   ax,ax
c0020998:	f7 d9                	neg    ecx
c002099a:	83 d3 00             	adc    ebx,0x0
c002099d:	f7 db                	neg    ebx
c002099f:	89 de                	mov    esi,ebx
c00209a1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00209a9:	e9 6f ff ff ff       	jmp    c002091d <__moddi3+0x29>
c00209ae:	66 90                	xchg   ax,ax
c00209b0:	0f bd c7             	bsr    eax,edi
c00209b3:	83 f0 1f             	xor    eax,0x1f
c00209b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209ba:	75 24                	jne    c00209e0 <__moddi3+0xec>
c00209bc:	39 f7                	cmp    edi,esi
c00209be:	72 06                	jb     c00209c6 <__moddi3+0xd2>
c00209c0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00209c4:	77 0c                	ja     c00209d2 <__moddi3+0xde>
c00209c6:	89 e9                	mov    ecx,ebp
c00209c8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00209cc:	19 fe                	sbb    esi,edi
c00209ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00209d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209d6:	89 f2                	mov    edx,esi
c00209d8:	e9 6b ff ff ff       	jmp    c0020948 <__moddi3+0x54>
c00209dd:	8d 76 00             	lea    esi,[esi+0x0]
c00209e0:	b8 20 00 00 00       	mov    eax,0x20
c00209e5:	89 c2                	mov    edx,eax
c00209e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00209eb:	29 da                	sub    edx,ebx
c00209ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00209f1:	88 d9                	mov    cl,bl
c00209f3:	d3 e7                	shl    edi,cl
c00209f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209f9:	88 d1                	mov    cl,dl
c00209fb:	d3 e8                	shr    eax,cl
c00209fd:	09 c7                	or     edi,eax
c00209ff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020a03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020a07:	89 d8                	mov    eax,ebx
c0020a09:	88 d9                	mov    cl,bl
c0020a0b:	d3 e7                	shl    edi,cl
c0020a0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020a11:	89 f3                	mov    ebx,esi
c0020a13:	88 d1                	mov    cl,dl
c0020a15:	d3 eb                	shr    ebx,cl
c0020a17:	89 c7                	mov    edi,eax
c0020a19:	88 c1                	mov    cl,al
c0020a1b:	d3 e6                	shl    esi,cl
c0020a1d:	89 e8                	mov    eax,ebp
c0020a1f:	88 d1                	mov    cl,dl
c0020a21:	d3 e8                	shr    eax,cl
c0020a23:	09 f0                	or     eax,esi
c0020a25:	89 f9                	mov    ecx,edi
c0020a27:	d3 e5                	shl    ebp,cl
c0020a29:	89 da                	mov    edx,ebx
c0020a2b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020a2f:	89 d3                	mov    ebx,edx
c0020a31:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020a35:	89 c6                	mov    esi,eax
c0020a37:	89 d1                	mov    ecx,edx
c0020a39:	39 d3                	cmp    ebx,edx
c0020a3b:	72 27                	jb     c0020a64 <__moddi3+0x170>
c0020a3d:	74 21                	je     c0020a60 <__moddi3+0x16c>
c0020a3f:	29 f5                	sub    ebp,esi
c0020a41:	19 cb                	sbb    ebx,ecx
c0020a43:	89 de                	mov    esi,ebx
c0020a45:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020a49:	d3 e6                	shl    esi,cl
c0020a4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020a4f:	89 f9                	mov    ecx,edi
c0020a51:	d3 ed                	shr    ebp,cl
c0020a53:	09 ee                	or     esi,ebp
c0020a55:	89 f0                	mov    eax,esi
c0020a57:	d3 eb                	shr    ebx,cl
c0020a59:	89 da                	mov    edx,ebx
c0020a5b:	e9 e8 fe ff ff       	jmp    c0020948 <__moddi3+0x54>
c0020a60:	39 c5                	cmp    ebp,eax
c0020a62:	73 db                	jae    c0020a3f <__moddi3+0x14b>
c0020a64:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020a68:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020a6c:	89 d1                	mov    ecx,edx
c0020a6e:	89 c6                	mov    esi,eax
c0020a70:	eb cd                	jmp    c0020a3f <__moddi3+0x14b>
c0020a72:	66 90                	xchg   ax,ax

c0020a74 <__udivdi3>:
c0020a74:	55                   	push   ebp
c0020a75:	57                   	push   edi
c0020a76:	56                   	push   esi
c0020a77:	53                   	push   ebx
c0020a78:	83 ec 1c             	sub    esp,0x1c
c0020a7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020a7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020a83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020a87:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020a8b:	85 d2                	test   edx,edx
c0020a8d:	75 41                	jne    c0020ad0 <__udivdi3+0x5c>
c0020a8f:	39 f7                	cmp    edi,esi
c0020a91:	76 15                	jbe    c0020aa8 <__udivdi3+0x34>
c0020a93:	89 e8                	mov    eax,ebp
c0020a95:	89 f2                	mov    edx,esi
c0020a97:	f7 f7                	div    edi
c0020a99:	31 db                	xor    ebx,ebx
c0020a9b:	89 da                	mov    edx,ebx
c0020a9d:	83 c4 1c             	add    esp,0x1c
c0020aa0:	5b                   	pop    ebx
c0020aa1:	5e                   	pop    esi
c0020aa2:	5f                   	pop    edi
c0020aa3:	5d                   	pop    ebp
c0020aa4:	c3                   	ret    
c0020aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0020aa8:	89 f9                	mov    ecx,edi
c0020aaa:	85 ff                	test   edi,edi
c0020aac:	75 0b                	jne    c0020ab9 <__udivdi3+0x45>
c0020aae:	b8 01 00 00 00       	mov    eax,0x1
c0020ab3:	31 d2                	xor    edx,edx
c0020ab5:	f7 f7                	div    edi
c0020ab7:	89 c1                	mov    ecx,eax
c0020ab9:	31 d2                	xor    edx,edx
c0020abb:	89 f0                	mov    eax,esi
c0020abd:	f7 f1                	div    ecx
c0020abf:	89 c3                	mov    ebx,eax
c0020ac1:	89 e8                	mov    eax,ebp
c0020ac3:	f7 f1                	div    ecx
c0020ac5:	89 da                	mov    edx,ebx
c0020ac7:	83 c4 1c             	add    esp,0x1c
c0020aca:	5b                   	pop    ebx
c0020acb:	5e                   	pop    esi
c0020acc:	5f                   	pop    edi
c0020acd:	5d                   	pop    ebp
c0020ace:	c3                   	ret    
c0020acf:	90                   	nop
c0020ad0:	39 f2                	cmp    edx,esi
c0020ad2:	77 1c                	ja     c0020af0 <__udivdi3+0x7c>
c0020ad4:	0f bd da             	bsr    ebx,edx
c0020ad7:	83 f3 1f             	xor    ebx,0x1f
c0020ada:	75 24                	jne    c0020b00 <__udivdi3+0x8c>
c0020adc:	39 f2                	cmp    edx,esi
c0020ade:	72 08                	jb     c0020ae8 <__udivdi3+0x74>
c0020ae0:	39 ef                	cmp    edi,ebp
c0020ae2:	0f 87 84 00 00 00    	ja     c0020b6c <__udivdi3+0xf8>
c0020ae8:	b8 01 00 00 00       	mov    eax,0x1
c0020aed:	eb ac                	jmp    c0020a9b <__udivdi3+0x27>
c0020aef:	90                   	nop
c0020af0:	31 db                	xor    ebx,ebx
c0020af2:	31 c0                	xor    eax,eax
c0020af4:	89 da                	mov    edx,ebx
c0020af6:	83 c4 1c             	add    esp,0x1c
c0020af9:	5b                   	pop    ebx
c0020afa:	5e                   	pop    esi
c0020afb:	5f                   	pop    edi
c0020afc:	5d                   	pop    ebp
c0020afd:	c3                   	ret    
c0020afe:	66 90                	xchg   ax,ax
c0020b00:	b8 20 00 00 00       	mov    eax,0x20
c0020b05:	29 d8                	sub    eax,ebx
c0020b07:	88 d9                	mov    cl,bl
c0020b09:	d3 e2                	shl    edx,cl
c0020b0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b0f:	89 fa                	mov    edx,edi
c0020b11:	88 c1                	mov    cl,al
c0020b13:	d3 ea                	shr    edx,cl
c0020b15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020b19:	09 d1                	or     ecx,edx
c0020b1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020b1f:	88 d9                	mov    cl,bl
c0020b21:	d3 e7                	shl    edi,cl
c0020b23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020b27:	89 f7                	mov    edi,esi
c0020b29:	88 c1                	mov    cl,al
c0020b2b:	d3 ef                	shr    edi,cl
c0020b2d:	88 d9                	mov    cl,bl
c0020b2f:	d3 e6                	shl    esi,cl
c0020b31:	89 ea                	mov    edx,ebp
c0020b33:	88 c1                	mov    cl,al
c0020b35:	d3 ea                	shr    edx,cl
c0020b37:	09 d6                	or     esi,edx
c0020b39:	89 f0                	mov    eax,esi
c0020b3b:	89 fa                	mov    edx,edi
c0020b3d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020b41:	89 d7                	mov    edi,edx
c0020b43:	89 c6                	mov    esi,eax
c0020b45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020b49:	39 d7                	cmp    edi,edx
c0020b4b:	72 13                	jb     c0020b60 <__udivdi3+0xec>
c0020b4d:	74 09                	je     c0020b58 <__udivdi3+0xe4>
c0020b4f:	89 f0                	mov    eax,esi
c0020b51:	31 db                	xor    ebx,ebx
c0020b53:	e9 43 ff ff ff       	jmp    c0020a9b <__udivdi3+0x27>
c0020b58:	88 d9                	mov    cl,bl
c0020b5a:	d3 e5                	shl    ebp,cl
c0020b5c:	39 c5                	cmp    ebp,eax
c0020b5e:	73 ef                	jae    c0020b4f <__udivdi3+0xdb>
c0020b60:	8d 46 ff             	lea    eax,[esi-0x1]
c0020b63:	31 db                	xor    ebx,ebx
c0020b65:	e9 31 ff ff ff       	jmp    c0020a9b <__udivdi3+0x27>
c0020b6a:	66 90                	xchg   ax,ax
c0020b6c:	31 c0                	xor    eax,eax
c0020b6e:	e9 28 ff ff ff       	jmp    c0020a9b <__udivdi3+0x27>
c0020b73:	90                   	nop

c0020b74 <__umoddi3>:
c0020b74:	55                   	push   ebp
c0020b75:	57                   	push   edi
c0020b76:	56                   	push   esi
c0020b77:	53                   	push   ebx
c0020b78:	83 ec 1c             	sub    esp,0x1c
c0020b7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020b7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020b83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020b87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020b8b:	89 da                	mov    edx,ebx
c0020b8d:	85 c0                	test   eax,eax
c0020b8f:	75 37                	jne    c0020bc8 <__umoddi3+0x54>
c0020b91:	39 df                	cmp    edi,ebx
c0020b93:	76 13                	jbe    c0020ba8 <__umoddi3+0x34>
c0020b95:	89 f0                	mov    eax,esi
c0020b97:	f7 f7                	div    edi
c0020b99:	89 d0                	mov    eax,edx
c0020b9b:	31 d2                	xor    edx,edx
c0020b9d:	83 c4 1c             	add    esp,0x1c
c0020ba0:	5b                   	pop    ebx
c0020ba1:	5e                   	pop    esi
c0020ba2:	5f                   	pop    edi
c0020ba3:	5d                   	pop    ebp
c0020ba4:	c3                   	ret    
c0020ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ba8:	89 fd                	mov    ebp,edi
c0020baa:	85 ff                	test   edi,edi
c0020bac:	75 0b                	jne    c0020bb9 <__umoddi3+0x45>
c0020bae:	b8 01 00 00 00       	mov    eax,0x1
c0020bb3:	31 d2                	xor    edx,edx
c0020bb5:	f7 f7                	div    edi
c0020bb7:	89 c5                	mov    ebp,eax
c0020bb9:	89 d8                	mov    eax,ebx
c0020bbb:	31 d2                	xor    edx,edx
c0020bbd:	f7 f5                	div    ebp
c0020bbf:	89 f0                	mov    eax,esi
c0020bc1:	f7 f5                	div    ebp
c0020bc3:	89 d0                	mov    eax,edx
c0020bc5:	eb d4                	jmp    c0020b9b <__umoddi3+0x27>
c0020bc7:	90                   	nop
c0020bc8:	89 f1                	mov    ecx,esi
c0020bca:	39 d8                	cmp    eax,ebx
c0020bcc:	76 0a                	jbe    c0020bd8 <__umoddi3+0x64>
c0020bce:	89 f0                	mov    eax,esi
c0020bd0:	83 c4 1c             	add    esp,0x1c
c0020bd3:	5b                   	pop    ebx
c0020bd4:	5e                   	pop    esi
c0020bd5:	5f                   	pop    edi
c0020bd6:	5d                   	pop    ebp
c0020bd7:	c3                   	ret    
c0020bd8:	0f bd e8             	bsr    ebp,eax
c0020bdb:	83 f5 1f             	xor    ebp,0x1f
c0020bde:	75 1c                	jne    c0020bfc <__umoddi3+0x88>
c0020be0:	39 d8                	cmp    eax,ebx
c0020be2:	72 04                	jb     c0020be8 <__umoddi3+0x74>
c0020be4:	39 f7                	cmp    edi,esi
c0020be6:	77 08                	ja     c0020bf0 <__umoddi3+0x7c>
c0020be8:	89 da                	mov    edx,ebx
c0020bea:	29 fe                	sub    esi,edi
c0020bec:	19 c2                	sbb    edx,eax
c0020bee:	89 f1                	mov    ecx,esi
c0020bf0:	89 c8                	mov    eax,ecx
c0020bf2:	83 c4 1c             	add    esp,0x1c
c0020bf5:	5b                   	pop    ebx
c0020bf6:	5e                   	pop    esi
c0020bf7:	5f                   	pop    edi
c0020bf8:	5d                   	pop    ebp
c0020bf9:	c3                   	ret    
c0020bfa:	66 90                	xchg   ax,ax
c0020bfc:	ba 20 00 00 00       	mov    edx,0x20
c0020c01:	29 ea                	sub    edx,ebp
c0020c03:	89 e9                	mov    ecx,ebp
c0020c05:	d3 e0                	shl    eax,cl
c0020c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c0b:	89 f8                	mov    eax,edi
c0020c0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020c11:	88 d1                	mov    cl,dl
c0020c13:	d3 e8                	shr    eax,cl
c0020c15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c19:	09 c1                	or     ecx,eax
c0020c1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020c1f:	89 e9                	mov    ecx,ebp
c0020c21:	d3 e7                	shl    edi,cl
c0020c23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020c27:	89 d8                	mov    eax,ebx
c0020c29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c2d:	88 d1                	mov    cl,dl
c0020c2f:	d3 e8                	shr    eax,cl
c0020c31:	89 c7                	mov    edi,eax
c0020c33:	89 e9                	mov    ecx,ebp
c0020c35:	d3 e3                	shl    ebx,cl
c0020c37:	89 f0                	mov    eax,esi
c0020c39:	88 d1                	mov    cl,dl
c0020c3b:	d3 e8                	shr    eax,cl
c0020c3d:	09 d8                	or     eax,ebx
c0020c3f:	89 e9                	mov    ecx,ebp
c0020c41:	d3 e6                	shl    esi,cl
c0020c43:	89 f3                	mov    ebx,esi
c0020c45:	89 fa                	mov    edx,edi
c0020c47:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020c4b:	89 d1                	mov    ecx,edx
c0020c4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020c51:	89 c6                	mov    esi,eax
c0020c53:	89 d7                	mov    edi,edx
c0020c55:	39 d1                	cmp    ecx,edx
c0020c57:	72 27                	jb     c0020c80 <__umoddi3+0x10c>
c0020c59:	74 21                	je     c0020c7c <__umoddi3+0x108>
c0020c5b:	89 ca                	mov    edx,ecx
c0020c5d:	29 f3                	sub    ebx,esi
c0020c5f:	19 fa                	sbb    edx,edi
c0020c61:	89 d0                	mov    eax,edx
c0020c63:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020c67:	d3 e0                	shl    eax,cl
c0020c69:	89 e9                	mov    ecx,ebp
c0020c6b:	d3 eb                	shr    ebx,cl
c0020c6d:	09 d8                	or     eax,ebx
c0020c6f:	d3 ea                	shr    edx,cl
c0020c71:	83 c4 1c             	add    esp,0x1c
c0020c74:	5b                   	pop    ebx
c0020c75:	5e                   	pop    esi
c0020c76:	5f                   	pop    edi
c0020c77:	5d                   	pop    ebp
c0020c78:	c3                   	ret    
c0020c79:	8d 76 00             	lea    esi,[esi+0x0]
c0020c7c:	39 c3                	cmp    ebx,eax
c0020c7e:	73 db                	jae    c0020c5b <__umoddi3+0xe7>
c0020c80:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020c84:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020c88:	89 d7                	mov    edi,edx
c0020c8a:	89 c6                	mov    esi,eax
c0020c8c:	eb cd                	jmp    c0020c5b <__umoddi3+0xe7>

Disassembly of section .init:

c0020c8e <_init>:
c0020c8e:	55                   	push   ebp
c0020c8f:	89 e5                	mov    ebp,esp
c0020c91:	e8 5e f4 fd ff       	call   c00000f4 <frame_dummy>
c0020c96:	e8 e5 fa ff ff       	call   c0020780 <__do_global_ctors_aux>
c0020c9b:	5d                   	pop    ebp
c0020c9c:	c3                   	ret    

Disassembly of section .fini:

c0020c9d <_fini>:
c0020c9d:	55                   	push   ebp
c0020c9e:	89 e5                	mov    ebp,esp
c0020ca0:	e8 df f3 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020ca5:	5d                   	pop    ebp
c0020ca6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020ca8 <DriverlessDevice::~DriverlessDevice()>:
c0020ca8:	ba 60 26 02 c0       	mov    edx,0xc0022660
c0020cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cb1:	89 10                	mov    DWORD PTR [eax],edx
c0020cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cb7:	50                   	push   eax
c0020cb8:	e8 d7 82 fe ff       	call   c0008f94 <Device::~Device()>
c0020cbd:	83 c4 04             	add    esp,0x4
c0020cc0:	90                   	nop
c0020cc1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0020cc2 <DriverlessDevice::~DriverlessDevice()>:
c0020cc2:	83 ec 0c             	sub    esp,0xc
c0020cc5:	83 ec 0c             	sub    esp,0xc
c0020cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ccc:	e8 d7 ff ff ff       	call   c0020ca8 <DriverlessDevice::~DriverlessDevice()>
c0020cd1:	83 c4 10             	add    esp,0x10
c0020cd4:	83 ec 08             	sub    esp,0x8
c0020cd7:	68 58 01 00 00       	push   0x158
c0020cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ce0:	e8 0e bc fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0020ce5:	83 c4 10             	add    esp,0x10
c0020ce8:	83 c4 0c             	add    esp,0xc
c0020ceb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0020cec <LinkedList<Device>::addElement(Device*)>:
c0020cec:	83 ec 0c             	sub    esp,0xc
c0020cef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020cf4:	75 10                	jne    c0020d06 <LinkedList<Device>::addElement(Device*)+0x1a>
c0020cf6:	83 ec 0c             	sub    esp,0xc
c0020cf9:	68 f4 25 02 c0       	push   0xc00225f4
c0020cfe:	e8 bf e7 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020d03:	83 c4 10             	add    esp,0x10
c0020d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d0c:	85 c0                	test   eax,eax
c0020d0e:	74 3a                	je     c0020d4a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020d17:	85 c0                	test   eax,eax
c0020d19:	74 2f                	je     c0020d4a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020d22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d26:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0020d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020d3e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020d48:	eb 68                	jmp    c0020db2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d50:	85 c0                	test   eax,eax
c0020d52:	75 4e                	jne    c0020da2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020d5b:	85 c0                	test   eax,eax
c0020d5d:	75 43                	jne    c0020da2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d67:	89 10                	mov    DWORD PTR [eax],edx
c0020d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020d7b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020d8c:	85 c0                	test   eax,eax
c0020d8e:	74 22                	je     c0020db2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020d90:	83 ec 0c             	sub    esp,0xc
c0020d93:	68 16 26 02 c0       	push   0xc0022616
c0020d98:	e8 25 e7 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020d9d:	83 c4 10             	add    esp,0x10
c0020da0:	eb 10                	jmp    c0020db2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020da2:	83 ec 0c             	sub    esp,0xc
c0020da5:	68 20 26 02 c0       	push   0xc0022620
c0020daa:	e8 13 e7 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020daf:	83 c4 10             	add    esp,0x10
c0020db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020db9:	8d 50 01             	lea    edx,[eax+0x1]
c0020dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020dc3:	90                   	nop
c0020dc4:	83 c4 0c             	add    esp,0xc
c0020dc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020dc8 <LinkedList<Device>::LinkedList()>:
c0020dc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020dcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020dd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ddd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020de1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020dec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020df6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020dfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020e08:	90                   	nop
c0020e09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0020e0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0020e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e12:	85 c0                	test   eax,eax
c0020e14:	75 0e                	jne    c0020e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e1d:	85 c0                	test   eax,eax
c0020e1f:	75 03                	jne    c0020e24 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020e21:	b0 01                	mov    al,0x1
c0020e23:	c3                   	ret    
c0020e24:	b0 00                	mov    al,0x0
c0020e26:	90                   	nop
c0020e27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020e28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020e30:	83 ec 0c             	sub    esp,0xc
c0020e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e37:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e39:	85 c0                	test   eax,eax
c0020e3b:	75 17                	jne    c0020e54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0020e3d:	83 ec 0c             	sub    esp,0xc
c0020e40:	68 90 28 02 c0       	push   0xc0022890
c0020e45:	e8 78 e6 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020e4a:	83 c4 10             	add    esp,0x10
c0020e4d:	e9 96 00 00 00       	jmp    c0020ee8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0020e52:	66 90                	xchg   ax,ax
c0020e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020e5e:	85 c0                	test   eax,eax
c0020e60:	0f 95 c0             	setne  al
c0020e63:	0f b6 c0             	movzx  eax,al
c0020e66:	85 c0                	test   eax,eax
c0020e68:	74 12                	je     c0020e7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0020e6a:	83 ec 0c             	sub    esp,0xc
c0020e6d:	68 db 28 02 c0       	push   0xc00228db
c0020e72:	e8 4b e6 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020e77:	83 c4 10             	add    esp,0x10
c0020e7a:	66 90                	xchg   ax,ax
c0020e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020e85:	85 c0                	test   eax,eax
c0020e87:	0f 94 c0             	sete   al
c0020e8a:	0f b6 c0             	movzx  eax,al
c0020e8d:	85 c0                	test   eax,eax
c0020e8f:	74 33                	je     c0020ec4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0020e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020ead:	83 f8 01             	cmp    eax,0x1
c0020eb0:	74 22                	je     c0020ed4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020eb2:	83 ec 0c             	sub    esp,0xc
c0020eb5:	68 b4 28 02 c0       	push   0xc00228b4
c0020eba:	e8 03 e6 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020ebf:	83 c4 10             	add    esp,0x10
c0020ec2:	eb 10                	jmp    c0020ed4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ec8:	8b 00                	mov    eax,DWORD PTR [eax]
c0020eca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ed1:	89 10                	mov    DWORD PTR [eax],edx
c0020ed3:	90                   	nop
c0020ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ed8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020edb:	8d 50 ff             	lea    edx,[eax-0x1]
c0020ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ee2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ee8:	83 c4 0c             	add    esp,0xc
c0020eeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0020eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0020eec:	83 ec 0c             	sub    esp,0xc
c0020eef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ef4:	75 12                	jne    c0020f08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0020ef6:	83 ec 0c             	sub    esp,0xc
c0020ef9:	68 f4 25 02 c0       	push   0xc00225f4
c0020efe:	e8 bf e5 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020f03:	83 c4 10             	add    esp,0x10
c0020f06:	66 90                	xchg   ax,ax
c0020f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f0e:	85 c0                	test   eax,eax
c0020f10:	74 36                	je     c0020f48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f19:	85 c0                	test   eax,eax
c0020f1b:	74 2b                	je     c0020f48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f28:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020f44:	eb 6a                	jmp    c0020fb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020f46:	66 90                	xchg   ax,ax
c0020f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f4e:	85 c0                	test   eax,eax
c0020f50:	75 4e                	jne    c0020fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0020f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f59:	85 c0                	test   eax,eax
c0020f5b:	75 43                	jne    c0020fa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0020f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f65:	89 10                	mov    DWORD PTR [eax],edx
c0020f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020f87:	85 c0                	test   eax,eax
c0020f89:	74 25                	je     c0020fb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020f8b:	83 ec 0c             	sub    esp,0xc
c0020f8e:	68 16 26 02 c0       	push   0xc0022616
c0020f93:	e8 2a e5 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020f98:	83 c4 10             	add    esp,0x10
c0020f9b:	eb 13                	jmp    c0020fb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	68 20 26 02 c0       	push   0xc0022620
c0020fa8:	e8 15 e5 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0020fad:	83 c4 10             	add    esp,0x10
c0020fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020fb7:	8d 50 01             	lea    edx,[eax+0x1]
c0020fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020fc1:	90                   	nop
c0020fc2:	83 c4 0c             	add    esp,0xc
c0020fc5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020fc8 <ACPI::~ACPI()>:
c0020fc8:	83 ec 0c             	sub    esp,0xc
c0020fcb:	ba 8c 2c 02 c0       	mov    edx,0xc0022c8c
c0020fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fd4:	89 10                	mov    DWORD PTR [eax],edx
c0020fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fda:	83 ec 0c             	sub    esp,0xc
c0020fdd:	50                   	push   eax
c0020fde:	e8 b1 7f fe ff       	call   c0008f94 <Device::~Device()>
c0020fe3:	83 c4 10             	add    esp,0x10
c0020fe6:	90                   	nop
c0020fe7:	83 c4 0c             	add    esp,0xc
c0020fea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0020fec <ACPI::~ACPI()>:
c0020fec:	83 ec 0c             	sub    esp,0xc
c0020fef:	83 ec 0c             	sub    esp,0xc
c0020ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ff6:	e8 cd ff ff ff       	call   c0020fc8 <ACPI::~ACPI()>
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	83 ec 08             	sub    esp,0x8
c0021001:	68 64 12 00 00       	push   0x1264
c0021006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002100a:	e8 e4 b8 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c002100f:	83 c4 10             	add    esp,0x10
c0021012:	83 c4 0c             	add    esp,0xc
c0021015:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021018 <LinkedList<Device>::~LinkedList()>:
c0021018:	90                   	nop
c0021019:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002101c <LinkedList<Device>::isEmpty()>:
c002101c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021020:	8b 00                	mov    eax,DWORD PTR [eax]
c0021022:	85 c0                	test   eax,eax
c0021024:	75 0e                	jne    c0021034 <LinkedList<Device>::isEmpty()+0x18>
c0021026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002102a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002102d:	85 c0                	test   eax,eax
c002102f:	75 03                	jne    c0021034 <LinkedList<Device>::isEmpty()+0x18>
c0021031:	b0 01                	mov    al,0x1
c0021033:	c3                   	ret    
c0021034:	b0 00                	mov    al,0x0
c0021036:	90                   	nop
c0021037:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021038 <LinkedList<Device>::getFirstElement()>:
c0021038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002103c:	8b 00                	mov    eax,DWORD PTR [eax]
c002103e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021040 <LinkedList<Device>::removeFirst()>:
c0021040:	83 ec 0c             	sub    esp,0xc
c0021043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021047:	8b 00                	mov    eax,DWORD PTR [eax]
c0021049:	85 c0                	test   eax,eax
c002104b:	75 17                	jne    c0021064 <LinkedList<Device>::removeFirst()+0x24>
c002104d:	83 ec 0c             	sub    esp,0xc
c0021050:	68 90 28 02 c0       	push   0xc0022890
c0021055:	e8 68 e4 fe ff       	call   c000f4c2 <KePanic(char const*)>
c002105a:	83 c4 10             	add    esp,0x10
c002105d:	e9 92 00 00 00       	jmp    c00210f4 <LinkedList<Device>::removeFirst()+0xb4>
c0021062:	66 90                	xchg   ax,ax
c0021064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002106b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021071:	85 c0                	test   eax,eax
c0021073:	74 13                	je     c0021088 <LinkedList<Device>::removeFirst()+0x48>
c0021075:	83 ec 0c             	sub    esp,0xc
c0021078:	68 db 28 02 c0       	push   0xc00228db
c002107d:	e8 40 e4 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0021082:	83 c4 10             	add    esp,0x10
c0021085:	8d 76 00             	lea    esi,[esi+0x0]
c0021088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002108c:	8b 00                	mov    eax,DWORD PTR [eax]
c002108e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021094:	85 c0                	test   eax,eax
c0021096:	75 34                	jne    c00210cc <LinkedList<Device>::removeFirst()+0x8c>
c0021098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002109c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210b4:	83 f8 01             	cmp    eax,0x1
c00210b7:	74 27                	je     c00210e0 <LinkedList<Device>::removeFirst()+0xa0>
c00210b9:	83 ec 0c             	sub    esp,0xc
c00210bc:	68 b4 28 02 c0       	push   0xc00228b4
c00210c1:	e8 fc e3 fe ff       	call   c000f4c2 <KePanic(char const*)>
c00210c6:	83 c4 10             	add    esp,0x10
c00210c9:	eb 15                	jmp    c00210e0 <LinkedList<Device>::removeFirst()+0xa0>
c00210cb:	90                   	nop
c00210cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00210d2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00210d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210dc:	89 10                	mov    DWORD PTR [eax],edx
c00210de:	66 90                	xchg   ax,ax
c00210e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210e7:	8d 50 ff             	lea    edx,[eax-0x1]
c00210ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00210f1:	8d 76 00             	lea    esi,[esi+0x0]
c00210f4:	83 c4 0c             	add    esp,0xc
c00210f7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00210f8 <Computer::~Computer()>:
c00210f8:	83 ec 0c             	sub    esp,0xc
c00210fb:	ba 3c 2f 02 c0       	mov    edx,0xc0022f3c
c0021100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021104:	89 10                	mov    DWORD PTR [eax],edx
c0021106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002110a:	83 ec 0c             	sub    esp,0xc
c002110d:	50                   	push   eax
c002110e:	e8 81 7e fe ff       	call   c0008f94 <Device::~Device()>
c0021113:	83 c4 10             	add    esp,0x10
c0021116:	90                   	nop
c0021117:	83 c4 0c             	add    esp,0xc
c002111a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002111c <Computer::~Computer()>:
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	83 ec 0c             	sub    esp,0xc
c0021122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021126:	e8 cd ff ff ff       	call   c00210f8 <Computer::~Computer()>
c002112b:	83 c4 10             	add    esp,0x10
c002112e:	83 ec 08             	sub    esp,0x8
c0021131:	68 6c 01 00 00       	push   0x16c
c0021136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002113a:	e8 b4 b7 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c002113f:	83 c4 10             	add    esp,0x10
c0021142:	83 c4 0c             	add    esp,0xc
c0021145:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021146 <idleCommon()>:
c0021146:	83 ec 0c             	sub    esp,0xc
c0021149:	fa                   	cli    
c002114a:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0021150:	e8 af 4f ff ff       	call   c0016104 <schedule()>
c0021155:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c002115c:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0021163:	75 01                	jne    c0021166 <idleCommon()+0x20>
c0021165:	fb                   	sti    
c0021166:	83 c4 0c             	add    esp,0xc
c0021169:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002116a <LinkedList<UnixFile>::~LinkedList()>:
c002116a:	90                   	nop
c002116b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002116c <LinkedList<UnixFile>::LinkedList()>:
c002116c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021170:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002117a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021185:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002118c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021190:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002119a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211ac:	90                   	nop
c00211ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00211ae <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00211ae:	83 ec 0c             	sub    esp,0xc
c00211b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00211b6:	75 10                	jne    c00211c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00211b8:	83 ec 0c             	sub    esp,0xc
c00211bb:	68 f4 25 02 c0       	push   0xc00225f4
c00211c0:	e8 fd e2 fe ff       	call   c000f4c2 <KePanic(char const*)>
c00211c5:	83 c4 10             	add    esp,0x10
c00211c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ce:	85 c0                	test   eax,eax
c00211d0:	74 34                	je     c0021206 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211d9:	85 c0                	test   eax,eax
c00211db:	74 29                	je     c0021206 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021204:	eb 65                	jmp    c002126b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002120a:	8b 00                	mov    eax,DWORD PTR [eax]
c002120c:	85 c0                	test   eax,eax
c002120e:	75 4b                	jne    c002125b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021217:	85 c0                	test   eax,eax
c0021219:	75 40                	jne    c002125b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002121b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002121f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021223:	89 10                	mov    DWORD PTR [eax],edx
c0021225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021229:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002122d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021237:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002123e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021245:	85 c0                	test   eax,eax
c0021247:	74 22                	je     c002126b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021249:	83 ec 0c             	sub    esp,0xc
c002124c:	68 16 26 02 c0       	push   0xc0022616
c0021251:	e8 6c e2 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0021256:	83 c4 10             	add    esp,0x10
c0021259:	eb 10                	jmp    c002126b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002125b:	83 ec 0c             	sub    esp,0xc
c002125e:	68 20 26 02 c0       	push   0xc0022620
c0021263:	e8 5a e2 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0021268:	83 c4 10             	add    esp,0x10
c002126b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002126f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021272:	8d 50 01             	lea    edx,[eax+0x1]
c0021275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021279:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002127c:	90                   	nop
c002127d:	83 c4 0c             	add    esp,0xc
c0021280:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021282 <LinkedList<UnixFile>::getFirstElement()>:
c0021282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021286:	8b 00                	mov    eax,DWORD PTR [eax]
c0021288:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002128a <LinkedList<UnixFile>::removeFirst()>:
c002128a:	83 ec 0c             	sub    esp,0xc
c002128d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021291:	8b 00                	mov    eax,DWORD PTR [eax]
c0021293:	85 c0                	test   eax,eax
c0021295:	75 12                	jne    c00212a9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021297:	83 ec 0c             	sub    esp,0xc
c002129a:	68 90 28 02 c0       	push   0xc0022890
c002129f:	e8 1e e2 fe ff       	call   c000f4c2 <KePanic(char const*)>
c00212a4:	83 c4 10             	add    esp,0x10
c00212a7:	eb 7e                	jmp    c0021327 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00212a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212b3:	85 c0                	test   eax,eax
c00212b5:	74 10                	je     c00212c7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00212b7:	83 ec 0c             	sub    esp,0xc
c00212ba:	68 db 28 02 c0       	push   0xc00228db
c00212bf:	e8 fe e1 fe ff       	call   c000f4c2 <KePanic(char const*)>
c00212c4:	83 c4 10             	add    esp,0x10
c00212c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00212cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212d0:	85 c0                	test   eax,eax
c00212d2:	75 33                	jne    c0021307 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00212d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212f0:	83 f8 01             	cmp    eax,0x1
c00212f3:	74 21                	je     c0021316 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00212f5:	83 ec 0c             	sub    esp,0xc
c00212f8:	68 b4 28 02 c0       	push   0xc00228b4
c00212fd:	e8 c0 e1 fe ff       	call   c000f4c2 <KePanic(char const*)>
c0021302:	83 c4 10             	add    esp,0x10
c0021305:	eb 0f                	jmp    c0021316 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002130b:	8b 00                	mov    eax,DWORD PTR [eax]
c002130d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021314:	89 10                	mov    DWORD PTR [eax],edx
c0021316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002131d:	8d 50 ff             	lea    edx,[eax-0x1]
c0021320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021324:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021327:	83 c4 0c             	add    esp,0xc
c002132a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002132c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002132c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021330:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021333:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021338:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002133b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002133c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002133c:	90                   	nop
c002133d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021340 <ThreadControlBlock::ThreadControlBlock()>:
c0021340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021344:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002134b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002134f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002135a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021365:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002136c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021370:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021377:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002137b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002137f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021383:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021387:	90                   	nop
c0021388:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002138c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002138c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021390:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002139a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00213ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00213cc:	90                   	nop
c00213cd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00213ce <CPU::~CPU()>:
c00213ce:	83 ec 0c             	sub    esp,0xc
c00213d1:	ba 7c 45 02 c0       	mov    edx,0xc002457c
c00213d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213da:	89 10                	mov    DWORD PTR [eax],edx
c00213dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	50                   	push   eax
c00213e4:	e8 ab 7b fe ff       	call   c0008f94 <Device::~Device()>
c00213e9:	83 c4 10             	add    esp,0x10
c00213ec:	90                   	nop
c00213ed:	83 c4 0c             	add    esp,0xc
c00213f0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00213f2 <CPU::~CPU()>:
c00213f2:	83 ec 0c             	sub    esp,0xc
c00213f5:	83 ec 0c             	sub    esp,0xc
c00213f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213fc:	e8 cd ff ff ff       	call   c00213ce <CPU::~CPU()>
c0021401:	83 c4 10             	add    esp,0x10
c0021404:	83 ec 08             	sub    esp,0x8
c0021407:	68 78 11 00 00       	push   0x1178
c002140c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021410:	e8 de b4 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0021415:	83 c4 10             	add    esp,0x10
c0021418:	83 c4 0c             	add    esp,0xc
c002141b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002141c <PCI::~PCI()>:
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	ba e0 4a 02 c0       	mov    edx,0xc0024ae0
c0021424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021428:	89 10                	mov    DWORD PTR [eax],edx
c002142a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142e:	83 ec 0c             	sub    esp,0xc
c0021431:	50                   	push   eax
c0021432:	e8 09 75 fe ff       	call   c0008940 <Bus::~Bus()>
c0021437:	83 c4 10             	add    esp,0x10
c002143a:	90                   	nop
c002143b:	83 c4 0c             	add    esp,0xc
c002143e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021440 <PCI::~PCI()>:
c0021440:	83 ec 0c             	sub    esp,0xc
c0021443:	83 ec 0c             	sub    esp,0xc
c0021446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002144a:	e8 cd ff ff ff       	call   c002141c <PCI::~PCI()>
c002144f:	83 c4 10             	add    esp,0x10
c0021452:	83 ec 08             	sub    esp,0x8
c0021455:	68 5c 01 00 00       	push   0x15c
c002145a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002145e:	e8 90 b4 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0021463:	83 c4 10             	add    esp,0x10
c0021466:	83 c4 0c             	add    esp,0xc
c0021469:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002146a <IDE::~IDE()>:
c002146a:	83 ec 0c             	sub    esp,0xc
c002146d:	ba 30 4c 02 c0       	mov    edx,0xc0024c30
c0021472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021476:	89 10                	mov    DWORD PTR [eax],edx
c0021478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147c:	83 ec 0c             	sub    esp,0xc
c002147f:	50                   	push   eax
c0021480:	e8 9f 7f fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	90                   	nop
c0021489:	83 c4 0c             	add    esp,0xc
c002148c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002148e <IDE::~IDE()>:
c002148e:	83 ec 0c             	sub    esp,0xc
c0021491:	83 ec 0c             	sub    esp,0xc
c0021494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021498:	e8 cd ff ff ff       	call   c002146a <IDE::~IDE()>
c002149d:	83 c4 10             	add    esp,0x10
c00214a0:	83 ec 08             	sub    esp,0x8
c00214a3:	68 70 02 00 00       	push   0x270
c00214a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214ac:	e8 42 b4 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c00214b1:	83 c4 10             	add    esp,0x10
c00214b4:	83 c4 0c             	add    esp,0xc
c00214b7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00214b8 <SATABus::~SATABus()>:
c00214b8:	83 ec 0c             	sub    esp,0xc
c00214bb:	ba 80 4c 02 c0       	mov    edx,0xc0024c80
c00214c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c4:	89 10                	mov    DWORD PTR [eax],edx
c00214c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ca:	83 ec 0c             	sub    esp,0xc
c00214cd:	50                   	push   eax
c00214ce:	e8 51 7f fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c00214d3:	83 c4 10             	add    esp,0x10
c00214d6:	90                   	nop
c00214d7:	83 c4 0c             	add    esp,0xc
c00214da:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00214dc <SATABus::~SATABus()>:
c00214dc:	83 ec 0c             	sub    esp,0xc
c00214df:	83 ec 0c             	sub    esp,0xc
c00214e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214e6:	e8 cd ff ff ff       	call   c00214b8 <SATABus::~SATABus()>
c00214eb:	83 c4 10             	add    esp,0x10
c00214ee:	83 ec 08             	sub    esp,0x8
c00214f1:	68 64 01 00 00       	push   0x164
c00214f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214fa:	e8 f4 b3 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c00214ff:	83 c4 10             	add    esp,0x10
c0021502:	83 c4 0c             	add    esp,0xc
c0021505:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021506 <ATA::~ATA()>:
c0021506:	83 ec 0c             	sub    esp,0xc
c0021509:	ba 68 4d 02 c0       	mov    edx,0xc0024d68
c002150e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021512:	89 10                	mov    DWORD PTR [eax],edx
c0021514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021518:	83 ec 0c             	sub    esp,0xc
c002151b:	50                   	push   eax
c002151c:	e8 e5 7f fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0021521:	83 c4 10             	add    esp,0x10
c0021524:	90                   	nop
c0021525:	83 c4 0c             	add    esp,0xc
c0021528:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002152a <ATA::~ATA()>:
c002152a:	83 ec 0c             	sub    esp,0xc
c002152d:	83 ec 0c             	sub    esp,0xc
c0021530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021534:	e8 cd ff ff ff       	call   c0021506 <ATA::~ATA()>
c0021539:	83 c4 10             	add    esp,0x10
c002153c:	83 ec 08             	sub    esp,0x8
c002153f:	68 8c 01 00 00       	push   0x18c
c0021544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021548:	e8 a6 b3 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c002154d:	83 c4 10             	add    esp,0x10
c0021550:	83 c4 0c             	add    esp,0xc
c0021553:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021554 <ATAPI::~ATAPI()>:
c0021554:	83 ec 0c             	sub    esp,0xc
c0021557:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c002155c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021560:	89 10                	mov    DWORD PTR [eax],edx
c0021562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021566:	83 ec 0c             	sub    esp,0xc
c0021569:	50                   	push   eax
c002156a:	e8 97 7f fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c002156f:	83 c4 10             	add    esp,0x10
c0021572:	90                   	nop
c0021573:	83 c4 0c             	add    esp,0xc
c0021576:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021578 <ATAPI::~ATAPI()>:
c0021578:	83 ec 0c             	sub    esp,0xc
c002157b:	83 ec 0c             	sub    esp,0xc
c002157e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021582:	e8 cd ff ff ff       	call   c0021554 <ATAPI::~ATAPI()>
c0021587:	83 c4 10             	add    esp,0x10
c002158a:	83 ec 08             	sub    esp,0x8
c002158d:	68 84 01 00 00       	push   0x184
c0021592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021596:	e8 58 b3 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c002159b:	83 c4 10             	add    esp,0x10
c002159e:	83 c4 0c             	add    esp,0xc
c00215a1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00215a2 <SATA::~SATA()>:
c00215a2:	83 ec 0c             	sub    esp,0xc
c00215a5:	ba 70 4e 02 c0       	mov    edx,0xc0024e70
c00215aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ae:	89 10                	mov    DWORD PTR [eax],edx
c00215b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b4:	83 ec 0c             	sub    esp,0xc
c00215b7:	50                   	push   eax
c00215b8:	e8 49 7f fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c00215bd:	83 c4 10             	add    esp,0x10
c00215c0:	90                   	nop
c00215c1:	83 c4 0c             	add    esp,0xc
c00215c4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00215c6 <SATA::~SATA()>:
c00215c6:	83 ec 0c             	sub    esp,0xc
c00215c9:	83 ec 0c             	sub    esp,0xc
c00215cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215d0:	e8 cd ff ff ff       	call   c00215a2 <SATA::~SATA()>
c00215d5:	83 c4 10             	add    esp,0x10
c00215d8:	83 ec 08             	sub    esp,0x8
c00215db:	68 7c 01 00 00       	push   0x17c
c00215e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215e4:	e8 0a b3 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c00215e9:	83 c4 10             	add    esp,0x10
c00215ec:	83 c4 0c             	add    esp,0xc
c00215ef:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00215f0 <SATAPI::~SATAPI()>:
c00215f0:	83 ec 0c             	sub    esp,0xc
c00215f3:	ba 94 4f 02 c0       	mov    edx,0xc0024f94
c00215f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fc:	89 10                	mov    DWORD PTR [eax],edx
c00215fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021602:	83 ec 0c             	sub    esp,0xc
c0021605:	50                   	push   eax
c0021606:	e8 fb 7e fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c002160b:	83 c4 10             	add    esp,0x10
c002160e:	90                   	nop
c002160f:	83 c4 0c             	add    esp,0xc
c0021612:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021614 <SATAPI::~SATAPI()>:
c0021614:	83 ec 0c             	sub    esp,0xc
c0021617:	83 ec 0c             	sub    esp,0xc
c002161a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002161e:	e8 cd ff ff ff       	call   c00215f0 <SATAPI::~SATAPI()>
c0021623:	83 c4 10             	add    esp,0x10
c0021626:	83 ec 08             	sub    esp,0x8
c0021629:	68 84 01 00 00       	push   0x184
c002162e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021632:	e8 bc b2 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0021637:	83 c4 10             	add    esp,0x10
c002163a:	83 c4 0c             	add    esp,0xc
c002163d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002163e <IOAPIC::~IOAPIC()>:
c002163e:	83 ec 0c             	sub    esp,0xc
c0021641:	ba f4 4f 02 c0       	mov    edx,0xc0024ff4
c0021646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164a:	89 10                	mov    DWORD PTR [eax],edx
c002164c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021650:	83 ec 0c             	sub    esp,0xc
c0021653:	50                   	push   eax
c0021654:	e8 3b 79 fe ff       	call   c0008f94 <Device::~Device()>
c0021659:	83 c4 10             	add    esp,0x10
c002165c:	90                   	nop
c002165d:	83 c4 0c             	add    esp,0xc
c0021660:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021662 <IOAPIC::~IOAPIC()>:
c0021662:	83 ec 0c             	sub    esp,0xc
c0021665:	83 ec 0c             	sub    esp,0xc
c0021668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002166c:	e8 cd ff ff ff       	call   c002163e <IOAPIC::~IOAPIC()>
c0021671:	83 c4 10             	add    esp,0x10
c0021674:	83 ec 08             	sub    esp,0x8
c0021677:	68 68 01 00 00       	push   0x168
c002167c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021680:	e8 6e b2 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0021685:	83 c4 10             	add    esp,0x10
c0021688:	83 c4 0c             	add    esp,0xc
c002168b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002168c <APICTimer::~APICTimer()>:
c002168c:	83 ec 0c             	sub    esp,0xc
c002168f:	ba 3c 50 02 c0       	mov    edx,0xc002503c
c0021694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021698:	89 10                	mov    DWORD PTR [eax],edx
c002169a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002169e:	83 ec 0c             	sub    esp,0xc
c00216a1:	50                   	push   eax
c00216a2:	e8 2d 90 fe ff       	call   c000a6d4 <Timer::~Timer()>
c00216a7:	83 c4 10             	add    esp,0x10
c00216aa:	90                   	nop
c00216ab:	83 c4 0c             	add    esp,0xc
c00216ae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00216b0 <APICTimer::~APICTimer()>:
c00216b0:	83 ec 0c             	sub    esp,0xc
c00216b3:	83 ec 0c             	sub    esp,0xc
c00216b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ba:	e8 cd ff ff ff       	call   c002168c <APICTimer::~APICTimer()>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	83 ec 08             	sub    esp,0x8
c00216c5:	68 60 01 00 00       	push   0x160
c00216ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ce:	e8 20 b2 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c00216d3:	83 c4 10             	add    esp,0x10
c00216d6:	83 c4 0c             	add    esp,0xc
c00216d9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00216dc <PIT::~PIT()>:
c00216dc:	83 ec 0c             	sub    esp,0xc
c00216df:	ba 8c 50 02 c0       	mov    edx,0xc002508c
c00216e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e8:	89 10                	mov    DWORD PTR [eax],edx
c00216ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ee:	83 ec 0c             	sub    esp,0xc
c00216f1:	50                   	push   eax
c00216f2:	e8 dd 8f fe ff       	call   c000a6d4 <Timer::~Timer()>
c00216f7:	83 c4 10             	add    esp,0x10
c00216fa:	90                   	nop
c00216fb:	83 c4 0c             	add    esp,0xc
c00216fe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021700 <PIT::~PIT()>:
c0021700:	83 ec 0c             	sub    esp,0xc
c0021703:	83 ec 0c             	sub    esp,0xc
c0021706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002170a:	e8 cd ff ff ff       	call   c00216dc <PIT::~PIT()>
c002170f:	83 c4 10             	add    esp,0x10
c0021712:	83 ec 08             	sub    esp,0x8
c0021715:	68 5c 01 00 00       	push   0x15c
c002171a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002171e:	e8 d0 b1 fe ff       	call   c000c8f3 <operator delete(void*, unsigned long)>
c0021723:	83 c4 10             	add    esp,0x10
c0021726:	83 c4 0c             	add    esp,0xc
c0021729:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be 1f 33 02 c0       	mov    esi,0xc002331f
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 3b 33 02 c0       	mov    esi,0xc002333b
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
