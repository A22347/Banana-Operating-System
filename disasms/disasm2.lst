
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 af eb 00 00       	call   c000ebcf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 52 02 c0       	mov    eax,0xc0025208
c0000025:	3d 08 52 02 c0       	cmp    eax,0xc0025208
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 52 02 c0       	push   0xc0025208
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 52 02 c0       	mov    eax,0xc0025208
c0000051:	2d 08 52 02 c0       	sub    eax,0xc0025208
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 52 02 c0       	push   0xc0025208
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 90 0d 02 c0       	mov    ebx,0xc0020d90
c0000097:	81 eb 8c 0d 02 c0    	sub    ebx,0xc0020d8c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 8c 0d 02 c0       	mov    esi,0xc0020d8c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 52 02 c0       	push   0xc0025208
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 08 52 02 c0       	push   0xc0025208
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 b7 4c 01 00       	call   c0014f64 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 30 01 00       	call   c00132cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 95 4c 01 00       	call   c0014f64 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 a2 51 01 00       	call   c0015490 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 55 56 01 00       	call   c001594c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 62 e4 00 00       	jmp    c000e7e1 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 0d 02 c0 02 	test   BYTE PTR [edx-0x3ffdf260],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 0d 02 c0 01 	test   BYTE PTR [edx-0x3ffdf260],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 0d 02 c0 08 	test   BYTE PTR [edx-0x3ffdf260],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 0d 02 c0 08 	test   BYTE PTR [edx-0x3ffdf260],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 0d 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf260],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 0d 02 c0 01 	test   BYTE PTR [edx-0x3ffdf260],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000e2a:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e8e:	e8 8b da 00 00       	call   c000e91e <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 98 d9 00 00       	call   c000e8c0 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 73 d8 00 00       	call   c000e88a <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 6e d8 00 00       	call   c000e8c0 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 64 d7 00 00       	call   c000e88a <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 7f d6 00 00       	call   c000e88a <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 69 d6 00 00       	call   c000e88a <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c0001313:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000136a:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c00013b3:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013ce:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c0001488:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c000148e:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001495:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000155b:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001561:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c0001568:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 71 02 c0       	mov    edx,0xc0027100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c00016b6:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 a4 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf15c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 e5 85 01 00       	jmp    c001a5a0 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 0f 86 01 00       	jmp    c001a5e0 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 30 86 01 00       	jmp    c001a620 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 00 10 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf000]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 00 10 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf000]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba a4 3d 02 c0       	mov    edx,0xc0023da4
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 c2 0e 02 c0       	mov    eax,0xc0020ec2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 80 0f 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf080]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 cb 0e 02 c0       	mov    eax,0xc0020ecb
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 00 10 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf000]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 50 0f 02 c0       	mov    eax,0xc0020f50
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 40 0f 02 c0       	mov    ebx,0xc0020f40
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 20 0f 02 c0       	mov    eax,0xc0020f20
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 30 0f 02 c0       	mov    eax,0xc0020f30
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba d2 0e 02 c0       	mov    edx,0xc0020ed2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba de 0e 02 c0       	mov    edx,0xc0020ede
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba f2 0e 02 c0       	mov    edx,0xc0020ef2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 5d 8b 00 00       	call   c000e9a0 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 55 8b 00 00       	call   c000e9b0 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 20 13 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021320
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 20 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021320
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 20 11 02 c0       	mov    eax,0xc0021120
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 60 10 02 c0       	mov    eax,0xc0021060
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 20 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdefe0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 20 14 02 c0       	push   0xc0021420
c0006327:	e8 18 4c 01 00       	call   c001af44 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 2e 14 02 c0       	push   0xc002142e
c000635f:	e8 e0 4b 01 00       	call   c001af44 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 49 4b 01 00       	call   c001aee8 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 70 02 c0       	mov    eax,0xc0027080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 70 02 c0       	mov    eax,0xc0027020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 3d 14 02 c0       	push   0xc002143d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c000675b:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006765:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c000677d:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067f6:	8b 9d 4c 75 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd8ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c000688d:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068ef:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c000692c:	05 40 75 02 c0       	add    eax,0xc0027540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069ec:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 40 14 02 c0       	push   0xc0021440
c0006a0f:	e8 30 45 01 00       	call   c001af44 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 3e 45 01 00       	call   c001af60 <iso_kprintfd>
c0006a22:	c7 04 24 45 14 02 c0 	mov    DWORD PTR [esp],0xc0021445
c0006a29:	e8 16 45 01 00       	call   c001af44 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a35:	e8 26 45 01 00       	call   c001af60 <iso_kprintfd>
c0006a3a:	c7 04 24 4b 14 02 c0 	mov    DWORD PTR [esp],0xc002144b
c0006a41:	e8 fe 44 01 00       	call   c001af44 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a4d:	e8 0e 45 01 00       	call   c001af60 <iso_kprintfd>
c0006a52:	c7 04 24 51 14 02 c0 	mov    DWORD PTR [esp],0xc0021451
c0006a59:	e8 e6 44 01 00       	call   c001af44 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a65:	e8 f6 44 01 00       	call   c001af60 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006acb:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 75 02 c0    	lea    ebp,[edi-0x3ffd8aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 75 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd8aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 3d 14 02 c0       	push   0xc002143d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006c0a:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006c10:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 75 02 c0    	lea    eax,[edi-0x3ffd8ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 5a 14 02 c0       	push   0xc002145a
c0006c32:	e8 0d 43 01 00       	call   c001af44 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c67:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 65 14 02 c0       	push   0xc0021465
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 6c 14 02 c0       	push   0xc002146c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006d05:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d28:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 73 14 02 c0       	push   0xc0021473
c0006d49:	e8 f6 41 01 00       	call   c001af44 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 7e 14 02 c0       	push   0xc002147e
c0006d64:	e8 db 41 01 00       	call   c001af44 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 75 02 c0       	push   0xc0027540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 0d 7c 00 00       	call   c000e9a0 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d9f:	e8 fc 7b 00 00       	call   c000e9a0 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 e7 7b 00 00       	call   c000e9a0 <malloc>
c0006db9:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 ce 7b 00 00       	call   c000e9a0 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006dff:	e8 ac 7b 00 00       	call   c000e9b0 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 9e 7b 00 00       	call   c000e9b0 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 84 7b 00 00       	call   c000e9b0 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 6f 7b 00 00       	call   c000e9b0 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 90 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb70]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 e0 15 02 c0       	push   0xc00215e0
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 f4 15 02 c0       	push   0xc00215f4
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 fe 15 02 c0       	push   0xc00215fe
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 08 16 02 c0       	push   0xc0021608
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 4c 17 02 c0       	push   0xc002174c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 12 16 02 c0       	push   0xc0021612
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 6c 17 02 c0       	push   0xc002176c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 27 16 02 c0       	push   0xc0021627
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 41 16 02 c0       	push   0xc0021641
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 c0 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb840]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 94 17 02 c0       	push   0xc0021794
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 4c 17 02 c0       	push   0xc002174c
c00071bc:	e8 25 7b 00 00       	call   c000ece6 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 dc 17 02 c0       	push   0xc00217dc
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 dc 17 02 c0       	push   0xc00217dc
c00071eb:	e8 f6 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 4c 16 02 c0       	push   0xc002164c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 4c 16 02 c0       	push   0xc002164c
c0007217:	e8 ca 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 69 16 02 c0       	push   0xc0021669
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 69 16 02 c0       	push   0xc0021669
c0007243:	e8 9e 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 fc 17 02 c0       	push   0xc00217fc
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 fc 17 02 c0       	push   0xc00217fc
c000726f:	e8 72 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 20 18 02 c0       	push   0xc0021820
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 20 18 02 c0       	push   0xc0021820
c000729b:	e8 46 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 85 16 02 c0       	push   0xc0021685
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 85 16 02 c0       	push   0xc0021685
c00072c7:	e8 1a 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 a1 16 02 c0       	push   0xc00216a1
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 a1 16 02 c0       	push   0xc00216a1
c00072f3:	e8 ee 79 00 00       	call   c000ece6 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 40 18 02 c0       	push   0xc0021840
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 40 18 02 c0       	push   0xc0021840
c000731f:	e8 c2 79 00 00       	call   c000ece6 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 64 18 02 c0       	push   0xc0021864
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 64 18 02 c0       	push   0xc0021864
c000734b:	e8 96 79 00 00       	call   c000ece6 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 ee 75 00 00       	call   c000e9a0 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00073bb:	68 83 18 02 c0       	push   0xc0021883
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 a1 18 02 c0       	push   0xc00218a1
c00073d7:	e8 0a 79 00 00       	call   c000ece6 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 bb 18 02 c0       	push   0xc00218bb
c00073f8:	e8 e9 78 00 00       	call   c000ece6 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 d5 18 02 c0       	push   0xc00218d5
c000743f:	e8 a2 78 00 00       	call   c000ece6 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 ef 18 02 c0       	push   0xc00218ef
c000746f:	e8 72 78 00 00       	call   c000ece6 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 74 62 00 00       	call   c000d735 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 f9 81 00 00       	call   c000f6d4 <KeRand()>
c00074db:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 09 19 02 c0       	push   0xc0021909
c0007510:	e8 d1 77 00 00       	call   c000ece6 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c000755b:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 83 02 c0       	push   0xc0028300
c00075d0:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075da:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 2e 4f 00 00       	call   c000c525 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 9d 73 00 00       	call   c000e9a0 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000760c:	68 83 18 02 c0       	push   0xc0021883
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 12 19 02 c0       	push   0xc0021912
c0007628:	e8 b9 76 00 00       	call   c000ece6 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 2f 19 02 c0       	push   0xc002192f
c0007659:	e8 88 76 00 00       	call   c000ece6 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 4c 19 02 c0       	push   0xc002194c
c0007693:	e8 4e 76 00 00       	call   c000ece6 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007776:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 0e 72 00 00       	call   c000e9a0 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000779b:	68 83 18 02 c0       	push   0xc0021883
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 67 19 02 c0       	push   0xc0021967
c00077b7:	e8 2a 75 00 00       	call   c000ece6 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 82 19 02 c0       	push   0xc0021982
c00077ea:	e8 f7 74 00 00       	call   c000ece6 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 e7 70 00 00       	call   c000e9a0 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 5d 6f 00 00       	call   c000e9a0 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 9d 19 02 c0       	mov    esi,0xc002199d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 74 1a 02 c0       	mov    edx,0xc0021a74
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 5d a1 00 00       	call   c0011e32 <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 aa 49 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 0f a1 00 00       	call   c0011e32 <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 5c 49 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 08 1a 02 c0       	mov    edx,0xc0021a08
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 08 1a 02 c0       	mov    edx,0xc0021a08
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 06 49 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 c0 6b 00 00       	call   c000e9a0 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 58 29 01 00       	call   c001a740 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 ac 6b 00 00       	call   c000e9a0 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 72 38 01 00       	call   c001b66e <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 46 36 02 c0       	push   0xc0023646
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 a6 19 02 c0       	push   0xc00219a6
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 c1 19 02 c0       	push   0xc00219c1
c0008018:	e8 c9 6c 00 00       	call   c000ece6 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 04 9c 00 00       	call   c0011c4c <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 74 1a 02 c0       	mov    edx,0xc0021a74
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 e7 19 02 c0       	push   0xc00219e7
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 d6 1e 00 00       	call   c0009ffa <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 d1 1a 00 00       	call   c0009ffa <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 2e 64 00 00       	call   c000e9a0 <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 2e 96 00 00       	call   c0011c4c <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 2e 19 00 00       	call   c0009ffa <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 ac 08 00 00       	call   c00091c8 <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba ac 1a 02 c0       	mov    edx,0xc0021aac
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba ac 1a 02 c0       	mov    edx,0xc0021aac
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 0d 06 00 00       	call   c0008f68 <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 24 3d 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000899c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	83 ec 0c             	sub    esp,0xc
c00089ac:	50                   	push   eax
c00089ad:	e8 76 cf 00 00       	call   c0015928 <milliTenthSleep(unsigned int)>
c00089b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089b9:	e8 cb ff 00 00       	call   c0018989 <HalMakeBeep(int)>
c00089be:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c6:	83 c4 1c             	add    esp,0x1c
c00089c9:	e9 22 ce 00 00       	jmp    c00157f0 <blockTask(TaskState)>

c00089ce <KeBeep(int, int, bool)>:
c00089ce:	56                   	push   esi
c00089cf:	53                   	push   ebx
c00089d0:	83 ec 10             	sub    esp,0x10
c00089d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089df:	e8 a5 ff 00 00       	call   c0018989 <HalMakeBeep(int)>
c00089e4:	89 f0                	mov    eax,esi
c00089e6:	83 c4 10             	add    esp,0x10
c00089e9:	84 c0                	test   al,al
c00089eb:	74 1e                	je     c0008a0b <KeBeep(int, int, bool)+0x3d>
c00089ed:	6b db 0a             	imul   ebx,ebx,0xa
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 2f cf 00 00       	call   c0015928 <milliTenthSleep(unsigned int)>
c00089f9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	e9 7e ff 00 00       	jmp    c0018989 <HalMakeBeep(int)>
c0008a0b:	68 e6 00 00 00       	push   0xe6
c0008a10:	53                   	push   ebx
c0008a11:	68 8e 89 00 c0       	push   0xc000898e
c0008a16:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0008a1c:	e8 c3 ca 00 00       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c0008a21:	83 c4 14             	add    esp,0x14
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	c3                   	ret    
c0008a27:	90                   	nop

c0008a28 <KeLoadClockSettings()>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a31:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a36:	68 d0 1a 02 c0       	push   0xc0021ad0
c0008a3b:	e8 c0 3c 00 00       	call   c000c700 <CmOpen(char const*)>
c0008a40:	59                   	pop    ecx
c0008a41:	5e                   	pop    esi
c0008a42:	89 c3                	mov    ebx,eax
c0008a44:	68 f5 1a 02 c0       	push   0xc0021af5
c0008a49:	50                   	push   eax
c0008a4a:	e8 ac 48 00 00       	call   c000d2fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a4f:	5f                   	pop    edi
c0008a50:	5a                   	pop    edx
c0008a51:	89 c6                	mov    esi,eax
c0008a53:	50                   	push   eax
c0008a54:	68 0a 1b 02 c0       	push   0xc0021b0a
c0008a59:	e8 f0 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	85 f6                	test   esi,esi
c0008a63:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a67:	7e 0c                	jle    c0008a75 <KeLoadClockSettings()+0x4d>
c0008a69:	52                   	push   edx
c0008a6a:	57                   	push   edi
c0008a6b:	56                   	push   esi
c0008a6c:	53                   	push   ebx
c0008a6d:	e8 fe 3d 00 00       	call   c000c870 <CmGetString(Reghive_Tag*, int, char*)>
c0008a72:	83 c4 10             	add    esp,0x10
c0008a75:	83 ec 0c             	sub    esp,0xc
c0008a78:	53                   	push   ebx
c0008a79:	e8 a0 3d 00 00       	call   c000c81e <CmClose(Reghive_Tag*)>
c0008a7e:	83 c4 0c             	add    esp,0xc
c0008a81:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a86:	50                   	push   eax
c0008a87:	57                   	push   edi
c0008a88:	68 18 1b 02 c0       	push   0xc0021b18
c0008a8d:	e8 bc e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a92:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa0:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa3:	a8 fd                	test   al,0xfd
c0008aa5:	75 51                	jne    c0008af8 <KeLoadClockSettings()+0xd0>
c0008aa7:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008aac:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab1:	83 fb 2e             	cmp    ebx,0x2e
c0008ab4:	75 07                	jne    c0008abd <KeLoadClockSettings()+0x95>
c0008ab6:	83 fa 35             	cmp    edx,0x35
c0008ab9:	b0 01                	mov    al,0x1
c0008abb:	74 0f                	je     c0008acc <KeLoadClockSettings()+0xa4>
c0008abd:	31 c0                	xor    eax,eax
c0008abf:	83 fa 2e             	cmp    edx,0x2e
c0008ac2:	75 08                	jne    c0008acc <KeLoadClockSettings()+0xa4>
c0008ac4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008ac9:	0f 94 c0             	sete   al
c0008acc:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ad6:	83 e8 30             	sub    eax,0x30
c0008ad9:	6b f0 0a             	imul   esi,eax,0xa
c0008adc:	83 fa 2e             	cmp    edx,0x2e
c0008adf:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008ae3:	0f 44 c3             	cmove  eax,ebx
c0008ae6:	80 f9 2d             	cmp    cl,0x2d
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	75 19                	jne    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af0:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af6:	eb 11                	jmp    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af8:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008aff:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b09:	50                   	push   eax
c0008b0a:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b11:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b14:	50                   	push   eax
c0008b15:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1b:	68 2f 1b 02 c0       	push   0xc0021b2f
c0008b20:	e8 29 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b25:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2b:	5b                   	pop    ebx
c0008b2c:	5e                   	pop    esi
c0008b2d:	5f                   	pop    edi
c0008b2e:	c3                   	ret    
c0008b2f:	90                   	nop

c0008b30 <Clock::Clock(char const*)>:
c0008b30:	83 ec 0c             	sub    esp,0xc
c0008b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b37:	83 ec 08             	sub    esp,0x8
c0008b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b3e:	50                   	push   eax
c0008b3f:	e8 84 06 00 00       	call   c00091c8 <Device::Device(char const*)>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c0008b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b50:	89 10                	mov    DWORD PTR [eax],edx
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b60:	90                   	nop
c0008b61:	83 c4 0c             	add    esp,0xc
c0008b64:	c3                   	ret    
c0008b65:	90                   	nop

c0008b66 <Clock::~Clock()>:
c0008b66:	83 ec 0c             	sub    esp,0xc
c0008b69:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c0008b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b72:	89 10                	mov    DWORD PTR [eax],edx
c0008b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	50                   	push   eax
c0008b7c:	e8 e7 03 00 00       	call   c0008f68 <Device::~Device()>
c0008b81:	83 c4 10             	add    esp,0x10
c0008b84:	90                   	nop
c0008b85:	83 c4 0c             	add    esp,0xc
c0008b88:	c3                   	ret    
c0008b89:	90                   	nop

c0008b8a <Clock::~Clock()>:
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b94:	e8 cd ff ff ff       	call   c0008b66 <Clock::~Clock()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	83 ec 08             	sub    esp,0x8
c0008b9f:	68 58 01 00 00       	push   0x158
c0008ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ba8:	e8 fe 3a 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 c4 0c             	add    esp,0xc
c0008bb3:	c3                   	ret    

c0008bb4 <Clock::timeInSecondsLocal()>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 14             	sub    esp,0x14
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bbe:	50                   	push   eax
c0008bbf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc2:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bc9:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bcf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd5:	89 cb                	mov    ebx,ecx
c0008bd7:	c1 fb 1f             	sar    ebx,0x1f
c0008bda:	01 c8                	add    eax,ecx
c0008bdc:	11 da                	adc    edx,ebx
c0008bde:	83 c4 10             	add    esp,0x10
c0008be1:	31 c9                	xor    ecx,ecx
c0008be3:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bea:	74 05                	je     c0008bf1 <Clock::timeInSecondsLocal()+0x3d>
c0008bec:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf1:	31 db                	xor    ebx,ebx
c0008bf3:	01 c8                	add    eax,ecx
c0008bf5:	11 da                	adc    edx,ebx
c0008bf7:	83 c4 08             	add    esp,0x8
c0008bfa:	5b                   	pop    ebx
c0008bfb:	c3                   	ret    

c0008bfc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfc:	57                   	push   edi
c0008bfd:	56                   	push   esi
c0008bfe:	53                   	push   ebx
c0008bff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c10:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c17:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c23:	99                   	cdq    
c0008c24:	29 c6                	sub    esi,eax
c0008c26:	19 d7                	sbb    edi,edx
c0008c28:	89 f0                	mov    eax,esi
c0008c2a:	31 f6                	xor    esi,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c35:	74 05                	je     c0008c3c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c37:	be 08 07 00 00       	mov    esi,0x708
c0008c3c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c40:	31 ff                	xor    edi,edi
c0008c42:	29 f0                	sub    eax,esi
c0008c44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c48:	19 fa                	sbb    edx,edi
c0008c4a:	89 d8                	mov    eax,ebx
c0008c4c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	ff e0                	jmp    eax

c0008c55 <KeDatetimeToSeconds(datetime_t)>:
c0008c55:	55                   	push   ebp
c0008c56:	57                   	push   edi
c0008c57:	56                   	push   esi
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 0c             	sub    esp,0xc
c0008c5c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c64:	89 f7                	mov    edi,esi
c0008c66:	89 f0                	mov    eax,esi
c0008c68:	0f b6 cf             	movzx  ecx,bh
c0008c6b:	0f b6 c4             	movzx  eax,ah
c0008c6e:	c1 ef 10             	shr    edi,0x10
c0008c71:	89 da                	mov    edx,ebx
c0008c73:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c76:	89 f9                	mov    ecx,edi
c0008c78:	0f b6 f9             	movzx  edi,cl
c0008c7b:	89 f1                	mov    ecx,esi
c0008c7d:	6b c0 3c             	imul   eax,eax,0x3c
c0008c80:	0f b6 f1             	movzx  esi,cl
c0008c83:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c89:	0f b6 db             	movzx  ebx,bl
c0008c8c:	c1 ea 10             	shr    edx,0x10
c0008c8f:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c95:	01 f8                	add    eax,edi
c0008c97:	01 f0                	add    eax,esi
c0008c99:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9c:	c1 f8 1f             	sar    eax,0x1f
c0008c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca3:	89 e8                	mov    eax,ebp
c0008ca5:	0f b6 c0             	movzx  eax,al
c0008ca8:	8b 0c 85 80 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde480]
c0008caf:	83 f8 01             	cmp    eax,0x1
c0008cb2:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008cb6:	0f b7 da             	movzx  ebx,dx
c0008cb9:	76 27                	jbe    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cbb:	80 e2 03             	and    dl,0x3
c0008cbe:	75 22                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cc0:	31 d2                	xor    edx,edx
c0008cc2:	be 64 00 00 00       	mov    esi,0x64
c0008cc7:	89 d8                	mov    eax,ebx
c0008cc9:	f7 f6                	div    esi
c0008ccb:	85 d2                	test   edx,edx
c0008ccd:	75 12                	jne    c0008ce1 <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008ccf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd5:	be 90 01 00 00       	mov    esi,0x190
c0008cda:	99                   	cdq    
c0008cdb:	f7 fe                	idiv   esi
c0008cdd:	85 d2                	test   edx,edx
c0008cdf:	75 01                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ce1:	41                   	inc    ecx
c0008ce2:	83 fb 46             	cmp    ebx,0x46
c0008ce5:	76 48                	jbe    c0008d2f <KeDatetimeToSeconds(datetime_t)+0xda>
c0008ce7:	be 46 00 00 00       	mov    esi,0x46
c0008cec:	bf 64 00 00 00       	mov    edi,0x64
c0008cf1:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf6:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfc:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d01:	75 23                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d03:	89 f0                	mov    eax,esi
c0008d05:	99                   	cdq    
c0008d06:	f7 ff                	idiv   edi
c0008d08:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d0d:	85 d2                	test   edx,edx
c0008d0f:	75 15                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d11:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d17:	99                   	cdq    
c0008d18:	f7 fd                	idiv   ebp
c0008d1a:	83 fa 01             	cmp    edx,0x1
c0008d1d:	19 c0                	sbb    eax,eax
c0008d1f:	f7 d0                	not    eax
c0008d21:	05 6e 01 00 00       	add    eax,0x16e
c0008d26:	46                   	inc    esi
c0008d27:	01 c1                	add    ecx,eax
c0008d29:	39 de                	cmp    esi,ebx
c0008d2b:	7c c9                	jl     c0008cf6 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d2d:	eb 34                	jmp    c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d2f:	74 32                	je     c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d31:	b8 45 00 00 00       	mov    eax,0x45
c0008d36:	89 c2                	mov    edx,eax
c0008d38:	83 e2 03             	and    edx,0x3
c0008d3b:	39 d8                	cmp    eax,ebx
c0008d3d:	7e 0f                	jle    c0008d4e <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d3f:	83 fa 01             	cmp    edx,0x1
c0008d42:	19 d2                	sbb    edx,edx
c0008d44:	48                   	dec    eax
c0008d45:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d4c:	eb e8                	jmp    c0008d36 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d4e:	85 d2                	test   edx,edx
c0008d50:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d55:	75 0a                	jne    c0008d61 <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d57:	83 fb 01             	cmp    ebx,0x1
c0008d5a:	19 c0                	sbb    eax,eax
c0008d5c:	05 6e 01 00 00       	add    eax,0x16e
c0008d61:	29 c1                	sub    ecx,eax
c0008d63:	b8 80 51 01 00       	mov    eax,0x15180
c0008d68:	f7 e9                	imul   ecx
c0008d6a:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d6d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d71:	83 c4 0c             	add    esp,0xc
c0008d74:	5b                   	pop    ebx
c0008d75:	5e                   	pop    esi
c0008d76:	5f                   	pop    edi
c0008d77:	5d                   	pop    ebp
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d7a:	57                   	push   edi
c0008d7b:	56                   	push   esi
c0008d7c:	53                   	push   ebx
c0008d7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d81:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d83:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d8e:	e8 c2 fe ff ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c0008d93:	59                   	pop    ecx
c0008d94:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008d9b:	5b                   	pop    ebx
c0008d9c:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008da2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008da8:	89 cb                	mov    ebx,ecx
c0008daa:	c1 fb 1f             	sar    ebx,0x1f
c0008dad:	29 c8                	sub    eax,ecx
c0008daf:	19 da                	sbb    edx,ebx
c0008db1:	31 c9                	xor    ecx,ecx
c0008db3:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008dba:	74 05                	je     c0008dc1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008dbc:	b9 08 07 00 00       	mov    ecx,0x708
c0008dc1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008dc5:	31 db                	xor    ebx,ebx
c0008dc7:	29 c8                	sub    eax,ecx
c0008dc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008dcd:	19 da                	sbb    edx,ebx
c0008dcf:	89 f8                	mov    eax,edi
c0008dd1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008dd5:	5b                   	pop    ebx
c0008dd6:	5e                   	pop    esi
c0008dd7:	5f                   	pop    edi
c0008dd8:	ff e0                	jmp    eax

c0008dda <KeSecondsToDatetime(unsigned long long)>:
c0008dda:	55                   	push   ebp
c0008ddb:	57                   	push   edi
c0008ddc:	56                   	push   esi
c0008ddd:	53                   	push   ebx
c0008dde:	83 ec 1c             	sub    esp,0x1c
c0008de1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008de5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008de9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008ded:	6a 00                	push   0x0
c0008def:	68 80 51 01 00       	push   0x15180
c0008df4:	55                   	push   ebp
c0008df5:	57                   	push   edi
c0008df6:	e8 c9 72 01 00       	call   c00200c4 <__udivdi3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e02:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e08:	6a 00                	push   0x0
c0008e0a:	68 80 51 01 00       	push   0x15180
c0008e0f:	55                   	push   ebp
c0008e10:	57                   	push   edi
c0008e11:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e16:	e8 a9 73 01 00       	call   c00201c4 <__umoddi3>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	99                   	cdq    
c0008e1f:	f7 ff                	idiv   edi
c0008e21:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e26:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e29:	89 d0                	mov    eax,edx
c0008e2b:	99                   	cdq    
c0008e2c:	f7 ff                	idiv   edi
c0008e2e:	85 db                	test   ebx,ebx
c0008e30:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e33:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e36:	79 11                	jns    c0008e49 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e3c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e42:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e47:	eb 07                	jmp    c0008e50 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e49:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e4e:	89 d8                	mov    eax,ebx
c0008e50:	99                   	cdq    
c0008e51:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e56:	f7 f9                	idiv   ecx
c0008e58:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e5d:	31 d2                	xor    edx,edx
c0008e5f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e68:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e70:	01 c3                	add    ebx,eax
c0008e72:	89 d8                	mov    eax,ebx
c0008e74:	f7 f1                	div    ecx
c0008e76:	31 d2                	xor    edx,edx
c0008e78:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e7b:	89 d8                	mov    eax,ebx
c0008e7d:	f7 f7                	div    edi
c0008e7f:	31 d2                	xor    edx,edx
c0008e81:	29 c1                	sub    ecx,eax
c0008e83:	89 d8                	mov    eax,ebx
c0008e85:	f7 f5                	div    ebp
c0008e87:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e8c:	31 d2                	xor    edx,edx
c0008e8e:	29 c1                	sub    ecx,eax
c0008e90:	89 c8                	mov    eax,ecx
c0008e92:	f7 f5                	div    ebp
c0008e94:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e99:	31 d2                	xor    edx,edx
c0008e9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e9f:	89 c8                	mov    eax,ecx
c0008ea1:	f7 f5                	div    ebp
c0008ea3:	31 d2                	xor    edx,edx
c0008ea5:	01 c3                	add    ebx,eax
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	f7 f7                	div    edi
c0008eab:	bf 99 00 00 00       	mov    edi,0x99
c0008eb0:	31 d2                	xor    edx,edx
c0008eb2:	29 c3                	sub    ebx,eax
c0008eb4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008ebc:	29 c3                	sub    ebx,eax
c0008ebe:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ec1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ec4:	83 c1 02             	add    ecx,0x2
c0008ec7:	89 c8                	mov    eax,ecx
c0008ec9:	bb 05 00 00 00       	mov    ebx,0x5
c0008ece:	f7 f7                	div    edi
c0008ed0:	31 d2                	xor    edx,edx
c0008ed2:	89 c7                	mov    edi,eax
c0008ed4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eda:	83 c0 02             	add    eax,0x2
c0008edd:	f7 f3                	div    ebx
c0008edf:	89 eb                	mov    ebx,ebp
c0008ee1:	29 c3                	sub    ebx,eax
c0008ee3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ee9:	88 1e                	mov    BYTE PTR [esi],bl
c0008eeb:	19 c0                	sbb    eax,eax
c0008eed:	31 d2                	xor    edx,edx
c0008eef:	83 e0 0c             	and    eax,0xc
c0008ef2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ef6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008efe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008f02:	83 f9 01             	cmp    ecx,0x1
c0008f05:	0f 96 c2             	setbe  dl
c0008f08:	41                   	inc    ecx
c0008f09:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008f0c:	01 d0                	add    eax,edx
c0008f0e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f12:	83 c4 1c             	add    esp,0x1c
c0008f15:	89 f0                	mov    eax,esi
c0008f17:	5b                   	pop    ebx
c0008f18:	5e                   	pop    esi
c0008f19:	5f                   	pop    edi
c0008f1a:	5d                   	pop    ebp
c0008f1b:	c2 04 00             	ret    0x4

c0008f1e <Clock::timeInDatetimeLocal()>:
c0008f1e:	53                   	push   ebx
c0008f1f:	83 ec 14             	sub    esp,0x14
c0008f22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f2a:	e8 85 fc ff ff       	call   c0008bb4 <Clock::timeInSecondsLocal()>
c0008f2f:	83 c4 0c             	add    esp,0xc
c0008f32:	52                   	push   edx
c0008f33:	50                   	push   eax
c0008f34:	53                   	push   ebx
c0008f35:	e8 a0 fe ff ff       	call   c0008dda <KeSecondsToDatetime(unsigned long long)>
c0008f3a:	89 d8                	mov    eax,ebx
c0008f3c:	83 c4 14             	add    esp,0x14
c0008f3f:	5b                   	pop    ebx
c0008f40:	c2 04 00             	ret    0x4
c0008f43:	90                   	nop

c0008f44 <Device::hibernate()>:
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop

c0008f46 <Device::wake()>:
c0008f46:	c3                   	ret    
c0008f47:	90                   	nop

c0008f48 <Device::detect()>:
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop

c0008f4a <Device::disableLegacy()>:
c0008f4a:	c3                   	ret    
c0008f4b:	90                   	nop

c0008f4c <Device::powerSaving(PowerSavingLevel)>:
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop

c0008f4e <DriverlessDevice::close(int, int, void*)>:
c0008f4e:	31 c0                	xor    eax,eax
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop

c0008f52 <DriverlessDevice::detect()>:
c0008f52:	c3                   	ret    
c0008f53:	90                   	nop

c0008f54 <DriverlessDevice::open(int, int, void*)>:
c0008f54:	83 ec 18             	sub    esp,0x18
c0008f57:	68 b0 1b 02 c0       	push   0xc0021bb0
c0008f5c:	e8 85 5d 00 00       	call   c000ece6 <KePanic(char const*)>
c0008f61:	83 c8 ff             	or     eax,0xffffffff
c0008f64:	83 c4 1c             	add    esp,0x1c
c0008f67:	c3                   	ret    

c0008f68 <Device::~Device()>:
c0008f68:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c0008f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f71:	89 10                	mov    DWORD PTR [eax],edx
c0008f73:	90                   	nop
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::~Device()>:
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 e6 ff ff ff       	call   c0008f68 <Device::~Device()>
c0008f82:	83 c4 04             	add    esp,0x4
c0008f85:	83 ec 08             	sub    esp,0x8
c0008f88:	68 58 01 00 00       	push   0x158
c0008f8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f91:	e8 15 37 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	83 c4 0c             	add    esp,0xc
c0008f9c:	c3                   	ret    
c0008f9d:	90                   	nop

c0008f9e <Device::findAndLoadDriver()>:
c0008f9e:	c7 44 24 04 ce 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bce
c0008fa6:	e9 a3 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008fab:	90                   	nop

c0008fac <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fac:	57                   	push   edi
c0008fad:	b9 09 00 00 00       	mov    ecx,0x9
c0008fb2:	56                   	push   esi
c0008fb3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fb7:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fbb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fc5:	81 c7 18 01 00 00    	add    edi,0x118
c0008fcb:	fc                   	cld    
c0008fcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fce:	5e                   	pop    esi
c0008fcf:	5f                   	pop    edi
c0008fd0:	c3                   	ret    
c0008fd1:	90                   	nop

c0008fd2 <Device::preOpenACPI(void*, char*, char*)>:
c0008fd2:	57                   	push   edi
c0008fd3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fd8:	56                   	push   esi
c0008fd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fe1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fe5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fef:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008ff5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ffd:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009003:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009007:	b9 0e 00 00 00       	mov    ecx,0xe
c000900c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000900e:	5e                   	pop    esi
c000900f:	5f                   	pop    edi
c0009010:	c3                   	ret    
c0009011:	90                   	nop

c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009012:	53                   	push   ebx
c0009013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009017:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000901b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000901f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009023:	0f b6 c0             	movzx  eax,al
c0009026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000902e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009032:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009036:	5b                   	pop    ebx
c0009037:	e9 15 fd 00 00       	jmp    c0018d51 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000903c <Device::getParent()>:
c000903c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009040:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009046:	c3                   	ret    
c0009047:	90                   	nop

c0009048 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000904c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009050:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009055:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009059:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000905d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009061:	e9 5c fe 00 00       	jmp    c0018ec2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009066 <Device::addChild(Device*)>:
c0009066:	53                   	push   ebx
c0009067:	83 ec 08             	sub    esp,0x8
c000906a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000906e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009072:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009078:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000907e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009080:	85 d2                	test   edx,edx
c0009082:	74 04                	je     c0009088 <Device::addChild(Device*)+0x22>
c0009084:	89 d3                	mov    ebx,edx
c0009086:	eb f6                	jmp    c000907e <Device::addChild(Device*)+0x18>
c0009088:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000908b:	83 ec 0c             	sub    esp,0xc
c000908e:	6a 08                	push   0x8
c0009090:	e8 0b 59 00 00       	call   c000e9a0 <malloc>
c0009095:	89 03                	mov    DWORD PTR [ebx],eax
c0009097:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000909d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090a4:	83 c4 18             	add    esp,0x18
c00090a7:	5b                   	pop    ebx
c00090a8:	c3                   	ret    
c00090a9:	90                   	nop

c00090aa <Device::removeAllChildren()>:
c00090aa:	56                   	push   esi
c00090ab:	53                   	push   ebx
c00090ac:	52                   	push   edx
c00090ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090b1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090ba:	74 17                	je     c00090d3 <Device::removeAllChildren()+0x29>
c00090bc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090bf:	85 c0                	test   eax,eax
c00090c1:	74 0c                	je     c00090cf <Device::removeAllChildren()+0x25>
c00090c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00090c5:	83 ec 0c             	sub    esp,0xc
c00090c8:	50                   	push   eax
c00090c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090cc:	83 c4 10             	add    esp,0x10
c00090cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090d1:	eb e4                	jmp    c00090b7 <Device::removeAllChildren()+0xd>
c00090d3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090df:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090ec:	58                   	pop    eax
c00090ed:	5b                   	pop    ebx
c00090ee:	5e                   	pop    esi
c00090ef:	c3                   	ret    

c00090f0 <Device::hibernateAll()>:
c00090f0:	53                   	push   ebx
c00090f1:	83 ec 14             	sub    esp,0x14
c00090f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090fa:	53                   	push   ebx
c00090fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009104:	83 c4 10             	add    esp,0x10
c0009107:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000910a:	74 0f                	je     c000911b <Device::hibernateAll()+0x2b>
c000910c:	83 ec 0c             	sub    esp,0xc
c000910f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009112:	e8 d9 ff ff ff       	call   c00090f0 <Device::hibernateAll()>
c0009117:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009119:	eb e9                	jmp    c0009104 <Device::hibernateAll()+0x14>
c000911b:	83 c4 08             	add    esp,0x8
c000911e:	5b                   	pop    ebx
c000911f:	c3                   	ret    

c0009120 <Device::wakeAll()>:
c0009120:	53                   	push   ebx
c0009121:	83 ec 14             	sub    esp,0x14
c0009124:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009128:	8b 03                	mov    eax,DWORD PTR [ebx]
c000912a:	53                   	push   ebx
c000912b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000912e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000913a:	74 0f                	je     c000914b <Device::wakeAll()+0x2b>
c000913c:	83 ec 0c             	sub    esp,0xc
c000913f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009142:	e8 d9 ff ff ff       	call   c0009120 <Device::wakeAll()>
c0009147:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009149:	eb e9                	jmp    c0009134 <Device::wakeAll()+0x14>
c000914b:	83 c4 08             	add    esp,0x8
c000914e:	5b                   	pop    ebx
c000914f:	c3                   	ret    

c0009150 <Device::detectAll()>:
c0009150:	53                   	push   ebx
c0009151:	83 ec 14             	sub    esp,0x14
c0009154:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009158:	8b 03                	mov    eax,DWORD PTR [ebx]
c000915a:	53                   	push   ebx
c000915b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000915e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000916a:	74 0f                	je     c000917b <Device::detectAll()+0x2b>
c000916c:	83 ec 0c             	sub    esp,0xc
c000916f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009172:	e8 d9 ff ff ff       	call   c0009150 <Device::detectAll()>
c0009177:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009179:	eb e9                	jmp    c0009164 <Device::detectAll()+0x14>
c000917b:	83 c4 08             	add    esp,0x8
c000917e:	5b                   	pop    ebx
c000917f:	c3                   	ret    

c0009180 <Device::disableLegacyAll()>:
c0009180:	c3                   	ret    
c0009181:	90                   	nop

c0009182 <Device::loadDriversForAll()>:
c0009182:	c3                   	ret    
c0009183:	90                   	nop

c0009184 <Device::powerSavingAll(PowerSavingLevel)>:
c0009184:	56                   	push   esi
c0009185:	53                   	push   ebx
c0009186:	83 ec 0c             	sub    esp,0xc
c0009189:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000918d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009191:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009193:	56                   	push   esi
c0009194:	53                   	push   ebx
c0009195:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009198:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000919e:	83 c4 10             	add    esp,0x10
c00091a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091a4:	74 0f                	je     c00091b5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091a6:	52                   	push   edx
c00091a7:	52                   	push   edx
c00091a8:	56                   	push   esi
c00091a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091ac:	e8 d3 ff ff ff       	call   c0009184 <Device::powerSavingAll(PowerSavingLevel)>
c00091b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091b3:	eb e9                	jmp    c000919e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091b5:	58                   	pop    eax
c00091b6:	5b                   	pop    ebx
c00091b7:	5e                   	pop    esi
c00091b8:	c3                   	ret    
c00091b9:	90                   	nop

c00091ba <Device::setName(char const*)>:
c00091ba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091c2:	e9 89 74 ff ff       	jmp    c0000650 <strcpy>
c00091c7:	90                   	nop

c00091c8 <Device::Device(char const*)>:
c00091c8:	83 ec 1c             	sub    esp,0x1c
c00091cb:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c00091d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d4:	89 10                	mov    DWORD PTR [eax],edx
c00091d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091da:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091f6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009204:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000920e:	83 ec 08             	sub    esp,0x8
c0009211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009219:	e8 9c ff ff ff       	call   c00091ba <Device::setName(char const*)>
c000921e:	83 c4 10             	add    esp,0x10
c0009221:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009229:	83 ec 0c             	sub    esp,0xc
c000922c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009230:	e8 6b 57 00 00       	call   c000e9a0 <malloc>
c0009235:	83 c4 10             	add    esp,0x10
c0009238:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009245:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009249:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000924f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009253:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009259:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000925f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009263:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009269:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009274:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000927b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009298:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00092a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b4:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092be:	90                   	nop
c00092bf:	83 c4 1c             	add    esp,0x1c
c00092c2:	c3                   	ret    
c00092c3:	90                   	nop

c00092c4 <Device::getName()>:
c00092c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092c8:	05 d0 00 00 00       	add    eax,0xd0
c00092cd:	c3                   	ret    

c00092ce <Device::closeAll()>:
c00092ce:	53                   	push   ebx
c00092cf:	83 ec 08             	sub    esp,0x8
c00092d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092d6:	53                   	push   ebx
c00092d7:	e8 e8 ff ff ff       	call   c00092c4 <Device::getName()>
c00092dc:	52                   	push   edx
c00092dd:	50                   	push   eax
c00092de:	68 08 1c 02 c0       	push   0xc0021c08
c00092e3:	e8 66 dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00092e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092ea:	6a 00                	push   0x0
c00092ec:	6a 00                	push   0x0
c00092ee:	6a 00                	push   0x0
c00092f0:	53                   	push   ebx
c00092f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092fa:	83 c4 20             	add    esp,0x20
c00092fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009300:	74 12                	je     c0009314 <Device::closeAll()+0x46>
c0009302:	83 ec 0c             	sub    esp,0xc
c0009305:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009308:	e8 c1 ff ff ff       	call   c00092ce <Device::closeAll()>
c000930d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000930f:	83 c4 10             	add    esp,0x10
c0009312:	eb e9                	jmp    c00092fd <Device::closeAll()+0x2f>
c0009314:	83 c4 08             	add    esp,0x8
c0009317:	5b                   	pop    ebx
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <DriverlessDevice::DriverlessDevice(char const*)>:
c000931a:	83 ec 0c             	sub    esp,0xc
c000931d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009321:	83 ec 08             	sub    esp,0x8
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	50                   	push   eax
c0009329:	e8 9a fe ff ff       	call   c00091c8 <Device::Device(char const*)>
c000932e:	83 c4 10             	add    esp,0x10
c0009331:	ba 80 1c 02 c0       	mov    edx,0xc0021c80
c0009336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000933a:	89 10                	mov    DWORD PTR [eax],edx
c000933c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009340:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000934a:	90                   	nop
c000934b:	83 c4 0c             	add    esp,0xc
c000934e:	c3                   	ret    
c000934f:	90                   	nop

c0009350 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009350:	57                   	push   edi
c0009351:	56                   	push   esi
c0009352:	53                   	push   ebx
c0009353:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009357:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000935b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000935f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009365:	75 0c                	jne    c0009373 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009367:	52                   	push   edx
c0009368:	52                   	push   edx
c0009369:	53                   	push   ebx
c000936a:	56                   	push   esi
c000936b:	e8 cc 6f 01 00       	call   c002033c <LinkedList<Device>::addElement(Device*)>
c0009370:	83 c4 10             	add    esp,0x10
c0009373:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009379:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000937c:	74 12                	je     c0009390 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000937e:	50                   	push   eax
c000937f:	57                   	push   edi
c0009380:	56                   	push   esi
c0009381:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009384:	e8 c7 ff ff ff       	call   c0009350 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009389:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	eb e9                	jmp    c0009379 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009390:	5b                   	pop    ebx
c0009391:	5e                   	pop    esi
c0009392:	5f                   	pop    edi
c0009393:	c3                   	ret    

c0009394 <getDevicesOfType(DeviceType)>:
c0009394:	53                   	push   ebx
c0009395:	83 ec 14             	sub    esp,0x14
c0009398:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000939c:	53                   	push   ebx
c000939d:	e8 76 70 01 00       	call   c0020418 <LinkedList<Device>::LinkedList()>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093a9:	53                   	push   ebx
c00093aa:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093b0:	e8 9b ff ff ff       	call   c0009350 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b5:	83 c4 18             	add    esp,0x18
c00093b8:	89 d8                	mov    eax,ebx
c00093ba:	5b                   	pop    ebx
c00093bb:	c2 04 00             	ret    0x4
c00093be:	66 90                	xchg   ax,ax

c00093c0 <HardDiskController::HardDiskController(char const*)>:
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c7:	83 ec 08             	sub    esp,0x8
c00093ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ce:	50                   	push   eax
c00093cf:	e8 f4 fd ff ff       	call   c00091c8 <Device::Device(char const*)>
c00093d4:	83 c4 10             	add    esp,0x10
c00093d7:	ba ac 1c 02 c0       	mov    edx,0xc0021cac
c00093dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093f0:	90                   	nop
c00093f1:	83 c4 0c             	add    esp,0xc
c00093f4:	c3                   	ret    
c00093f5:	90                   	nop
c00093f6:	66 90                	xchg   ax,ax

c00093f8 <HardDiskController::~HardDiskController()>:
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	ba ac 1c 02 c0       	mov    edx,0xc0021cac
c0009400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009404:	89 10                	mov    DWORD PTR [eax],edx
c0009406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940a:	83 ec 0c             	sub    esp,0xc
c000940d:	50                   	push   eax
c000940e:	e8 55 fb ff ff       	call   c0008f68 <Device::~Device()>
c0009413:	83 c4 10             	add    esp,0x10
c0009416:	90                   	nop
c0009417:	83 c4 0c             	add    esp,0xc
c000941a:	c3                   	ret    
c000941b:	90                   	nop

c000941c <HardDiskController::~HardDiskController()>:
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	83 ec 0c             	sub    esp,0xc
c0009422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009426:	e8 cd ff ff ff       	call   c00093f8 <HardDiskController::~HardDiskController()>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	68 58 01 00 00       	push   0x158
c0009436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943a:	e8 6c 32 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c000943f:	83 c4 10             	add    esp,0x10
c0009442:	83 c4 0c             	add    esp,0xc
c0009445:	c3                   	ret    

c0009446 <PhysicalDisk::eject()>:
c0009446:	83 c8 ff             	or     eax,0xffffffff
c0009449:	c3                   	ret    

c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000944a:	83 ec 0c             	sub    esp,0xc
c000944d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009451:	83 ec 08             	sub    esp,0x8
c0009454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009458:	50                   	push   eax
c0009459:	e8 6a fd ff ff       	call   c00091c8 <Device::Device(char const*)>
c000945e:	83 c4 10             	add    esp,0x10
c0009461:	ba d8 1c 02 c0       	mov    edx,0xc0021cd8
c0009466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946a:	89 10                	mov    DWORD PTR [eax],edx
c000946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009470:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009486:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009494:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009498:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000949e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094ac:	90                   	nop
c00094ad:	83 c4 0c             	add    esp,0xc
c00094b0:	c3                   	ret    
c00094b1:	90                   	nop

c00094b2 <PhysicalDisk::startCache()>:
c00094b2:	56                   	push   esi
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 10             	sub    esp,0x10
c00094b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094bb:	6a 44                	push   0x44
c00094bd:	e8 de 54 00 00       	call   c000e9a0 <malloc>
c00094c2:	89 c6                	mov    esi,eax
c00094c4:	58                   	pop    eax
c00094c5:	5a                   	pop    edx
c00094c6:	53                   	push   ebx
c00094c7:	56                   	push   esi
c00094c8:	e8 1f 14 00 00       	call   c000a8ec <VCache::VCache(PhysicalDisk*)>
c00094cd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094d3:	83 c4 14             	add    esp,0x14
c00094d6:	5b                   	pop    ebx
c00094d7:	5e                   	pop    esi
c00094d8:	c3                   	ret    
c00094d9:	90                   	nop

c00094da <PhysicalDisk::~PhysicalDisk()>:
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	ba d8 1c 02 c0       	mov    edx,0xc0021cd8
c00094e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094e6:	89 10                	mov    DWORD PTR [eax],edx
c00094e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ec:	83 ec 0c             	sub    esp,0xc
c00094ef:	50                   	push   eax
c00094f0:	e8 73 fa ff ff       	call   c0008f68 <Device::~Device()>
c00094f5:	83 c4 10             	add    esp,0x10
c00094f8:	90                   	nop
c00094f9:	83 c4 0c             	add    esp,0xc
c00094fc:	c3                   	ret    
c00094fd:	90                   	nop

c00094fe <PhysicalDisk::~PhysicalDisk()>:
c00094fe:	83 ec 0c             	sub    esp,0xc
c0009501:	83 ec 0c             	sub    esp,0xc
c0009504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009508:	e8 cd ff ff ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c000950d:	83 c4 10             	add    esp,0x10
c0009510:	83 ec 08             	sub    esp,0x8
c0009513:	68 6c 01 00 00       	push   0x16c
c0009518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000951c:	e8 8a 31 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	83 c4 0c             	add    esp,0xc
c0009527:	c3                   	ret    

c0009528 <startGUI(void*)>:
c0009528:	55                   	push   ebp
c0009529:	89 e5                	mov    ebp,esp
c000952b:	53                   	push   ebx
c000952c:	83 ec 04             	sub    esp,0x4
c000952f:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009537:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000953c:	85 c0                	test   eax,eax
c000953e:	75 01                	jne    c0009541 <startGUI(void*)+0x19>
c0009540:	fb                   	sti    
c0009541:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009547:	83 ec 08             	sub    esp,0x8
c000954a:	6a 01                	push   0x1
c000954c:	68 08 1d 02 c0       	push   0xc0021d08
c0009551:	e8 ec b6 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c0009556:	83 c4 10             	add    esp,0x10
c0009559:	83 ec 08             	sub    esp,0x8
c000955c:	53                   	push   ebx
c000955d:	50                   	push   eax
c000955e:	e8 40 b9 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c0009563:	83 c4 10             	add    esp,0x10
c0009566:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000956c:	83 ec 08             	sub    esp,0x8
c000956f:	6a 01                	push   0x1
c0009571:	68 22 1d 02 c0       	push   0xc0021d22
c0009576:	e8 c7 b6 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c000957b:	83 c4 10             	add    esp,0x10
c000957e:	83 ec 08             	sub    esp,0x8
c0009581:	53                   	push   ebx
c0009582:	50                   	push   eax
c0009583:	e8 1b b9 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c0009588:	83 c4 10             	add    esp,0x10
c000958b:	eb fe                	jmp    c000958b <startGUI(void*)+0x63>

c000958d <startGUIVESA(void*)>:
c000958d:	55                   	push   ebp
c000958e:	89 e5                	mov    ebp,esp
c0009590:	53                   	push   ebx
c0009591:	83 ec 04             	sub    esp,0x4
c0009594:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000959c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00095a1:	85 c0                	test   eax,eax
c00095a3:	75 01                	jne    c00095a6 <startGUIVESA(void*)+0x19>
c00095a5:	fb                   	sti    
c00095a6:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095ac:	83 ec 08             	sub    esp,0x8
c00095af:	6a 01                	push   0x1
c00095b1:	68 40 1d 02 c0       	push   0xc0021d40
c00095b6:	e8 87 b6 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c00095bb:	83 c4 10             	add    esp,0x10
c00095be:	83 ec 08             	sub    esp,0x8
c00095c1:	53                   	push   ebx
c00095c2:	50                   	push   eax
c00095c3:	e8 db b8 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c00095c8:	83 c4 10             	add    esp,0x10
c00095cb:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095d1:	83 ec 08             	sub    esp,0x8
c00095d4:	6a 01                	push   0x1
c00095d6:	68 22 1d 02 c0       	push   0xc0021d22
c00095db:	e8 62 b6 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c00095e0:	83 c4 10             	add    esp,0x10
c00095e3:	83 ec 08             	sub    esp,0x8
c00095e6:	53                   	push   ebx
c00095e7:	50                   	push   eax
c00095e8:	e8 b6 b8 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c00095ed:	83 c4 10             	add    esp,0x10
c00095f0:	eb fe                	jmp    c00095f0 <startGUIVESA(void*)+0x63>

c00095f2 <sendKeyToTerminal(unsigned char)>:
c00095f2:	55                   	push   ebp
c00095f3:	89 e5                	mov    ebp,esp
c00095f5:	83 ec 28             	sub    esp,0x28
c00095f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095fe:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0009603:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009607:	83 ec 08             	sub    esp,0x8
c000960a:	52                   	push   edx
c000960b:	50                   	push   eax
c000960c:	e8 cd 81 00 00       	call   c00117de <VgaText::receiveKey(unsigned char)>
c0009611:	83 c4 10             	add    esp,0x10
c0009614:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009618:	83 f8 0a             	cmp    eax,0xa
c000961b:	74 16                	je     c0009633 <sendKeyToTerminal(unsigned char)+0x41>
c000961d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009621:	83 f8 03             	cmp    eax,0x3
c0009624:	74 0d                	je     c0009633 <sendKeyToTerminal(unsigned char)+0x41>
c0009626:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000962a:	83 f8 1c             	cmp    eax,0x1c
c000962d:	0f 85 92 00 00 00    	jne    c00096c5 <sendKeyToTerminal(unsigned char)+0xd3>
c0009633:	fa                   	cli    
c0009634:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009639:	83 c0 01             	add    eax,0x1
c000963c:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009641:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009646:	83 c0 01             	add    eax,0x1
c0009649:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000964e:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c0009653:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009656:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c0009660:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009664:	74 1f                	je     c0009685 <sendKeyToTerminal(unsigned char)+0x93>
c0009666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009669:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000966c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000966f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009672:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009675:	83 ec 0c             	sub    esp,0xc
c0009678:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000967b:	e8 c0 c3 00 00       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	eb db                	jmp    c0009660 <sendKeyToTerminal(unsigned char)+0x6e>
c0009685:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000968a:	83 e8 01             	sub    eax,0x1
c000968d:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0009692:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009697:	85 c0                	test   eax,eax
c0009699:	75 18                	jne    c00096b3 <sendKeyToTerminal(unsigned char)+0xc1>
c000969b:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00096a0:	85 c0                	test   eax,eax
c00096a2:	74 0f                	je     c00096b3 <sendKeyToTerminal(unsigned char)+0xc1>
c00096a4:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00096ae:	e8 7d c0 00 00       	call   c0015730 <schedule()>
c00096b3:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00096bb:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00096c0:	85 c0                	test   eax,eax
c00096c2:	75 01                	jne    c00096c5 <sendKeyToTerminal(unsigned char)+0xd3>
c00096c4:	fb                   	sti    
c00096c5:	90                   	nop
c00096c6:	c9                   	leave  
c00096c7:	c3                   	ret    

c00096c8 <sendKeyboardToken(KeyboardToken)>:
c00096c8:	55                   	push   ebp
c00096c9:	89 e5                	mov    ebp,esp
c00096cb:	83 ec 18             	sub    esp,0x18
c00096ce:	e8 3d 5f 00 00       	call   c000f610 <KeUserIOReceived()>
c00096d3:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096d9:	0f b7 c0             	movzx  eax,ax
c00096dc:	83 f2 01             	xor    edx,0x1
c00096df:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c00096e5:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c00096ea:	85 c0                	test   eax,eax
c00096ec:	74 24                	je     c0009712 <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ee:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c00096f4:	83 ec 04             	sub    esp,0x4
c00096f7:	68 40 a3 02 c0       	push   0xc002a340
c00096fc:	83 ec 08             	sub    esp,0x8
c00096ff:	89 e0                	mov    eax,esp
c0009701:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009704:	89 08                	mov    DWORD PTR [eax],ecx
c0009706:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009709:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000970d:	ff d2                	call   edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009716:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009719:	0f b6 c0             	movzx  eax,al
c000971c:	85 c0                	test   eax,eax
c000971e:	0f 84 da 00 00 00    	je     c00097fe <sendKeyboardToken(KeyboardToken)+0x136>
c0009724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009727:	0f b7 c0             	movzx  eax,ax
c000972a:	3d 18 03 00 00       	cmp    eax,0x318
c000972f:	75 06                	jne    c0009737 <sendKeyboardToken(KeyboardToken)+0x6f>
c0009731:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000973a:	0f b7 c0             	movzx  eax,ax
c000973d:	3d 19 03 00 00       	cmp    eax,0x319
c0009742:	75 06                	jne    c000974a <sendKeyboardToken(KeyboardToken)+0x82>
c0009744:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000974a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000974d:	0f b7 c0             	movzx  eax,ax
c0009750:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009755:	75 06                	jne    c000975d <sendKeyboardToken(KeyboardToken)+0x95>
c0009757:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000975d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009760:	0f b7 c0             	movzx  eax,ax
c0009763:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009768:	75 06                	jne    c0009770 <sendKeyboardToken(KeyboardToken)+0xa8>
c000976a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0009770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009773:	0f b7 c0             	movzx  eax,ax
c0009776:	3d 1c 03 00 00       	cmp    eax,0x31c
c000977b:	75 06                	jne    c0009783 <sendKeyboardToken(KeyboardToken)+0xbb>
c000977d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0009783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009786:	0f b7 c0             	movzx  eax,ax
c0009789:	3d 1d 03 00 00       	cmp    eax,0x31d
c000978e:	75 06                	jne    c0009796 <sendKeyboardToken(KeyboardToken)+0xce>
c0009790:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009799:	0f b7 c0             	movzx  eax,ax
c000979c:	3d 1e 03 00 00       	cmp    eax,0x31e
c00097a1:	75 06                	jne    c00097a9 <sendKeyboardToken(KeyboardToken)+0xe1>
c00097a3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ac:	0f b7 c0             	movzx  eax,ax
c00097af:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097b4:	75 06                	jne    c00097bc <sendKeyboardToken(KeyboardToken)+0xf4>
c00097b6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097bf:	0f b7 c0             	movzx  eax,ax
c00097c2:	3d 20 03 00 00       	cmp    eax,0x320
c00097c7:	75 06                	jne    c00097cf <sendKeyboardToken(KeyboardToken)+0x107>
c00097c9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d2:	0f b7 c0             	movzx  eax,ax
c00097d5:	3d 21 03 00 00       	cmp    eax,0x321
c00097da:	75 06                	jne    c00097e2 <sendKeyboardToken(KeyboardToken)+0x11a>
c00097dc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e5:	0f b7 c0             	movzx  eax,ax
c00097e8:	3d 22 03 00 00       	cmp    eax,0x322
c00097ed:	0f 85 f1 00 00 00    	jne    c00098e4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097f3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097f9:	e9 e6 00 00 00       	jmp    c00098e4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009801:	0f b7 c0             	movzx  eax,ax
c0009804:	3d 18 03 00 00       	cmp    eax,0x318
c0009809:	75 0a                	jne    c0009815 <sendKeyboardToken(KeyboardToken)+0x14d>
c000980b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0009811:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009818:	0f b7 c0             	movzx  eax,ax
c000981b:	3d 19 03 00 00       	cmp    eax,0x319
c0009820:	75 0a                	jne    c000982c <sendKeyboardToken(KeyboardToken)+0x164>
c0009822:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009828:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000982c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982f:	0f b7 c0             	movzx  eax,ax
c0009832:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009837:	75 0a                	jne    c0009843 <sendKeyboardToken(KeyboardToken)+0x17b>
c0009839:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000983f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009846:	0f b7 c0             	movzx  eax,ax
c0009849:	3d 1b 03 00 00       	cmp    eax,0x31b
c000984e:	75 0a                	jne    c000985a <sendKeyboardToken(KeyboardToken)+0x192>
c0009850:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009856:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000985a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985d:	0f b7 c0             	movzx  eax,ax
c0009860:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009865:	75 0a                	jne    c0009871 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009867:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000986d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009874:	0f b7 c0             	movzx  eax,ax
c0009877:	3d 1d 03 00 00       	cmp    eax,0x31d
c000987c:	75 0a                	jne    c0009888 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000987e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009884:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000988b:	0f b7 c0             	movzx  eax,ax
c000988e:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009893:	75 0a                	jne    c000989f <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009895:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000989b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a2:	0f b7 c0             	movzx  eax,ax
c00098a5:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098aa:	75 0a                	jne    c00098b6 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098ac:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b9:	0f b7 c0             	movzx  eax,ax
c00098bc:	3d 20 03 00 00       	cmp    eax,0x320
c00098c1:	75 0a                	jne    c00098cd <sendKeyboardToken(KeyboardToken)+0x205>
c00098c3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	0f b7 c0             	movzx  eax,ax
c00098d3:	3d 21 03 00 00       	cmp    eax,0x321
c00098d8:	75 0a                	jne    c00098e4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098da:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e7:	0f b7 c0             	movzx  eax,ax
c00098ea:	3d 00 02 00 00       	cmp    eax,0x200
c00098ef:	75 2f                	jne    c0009920 <sendKeyboardToken(KeyboardToken)+0x258>
c00098f1:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c00098f6:	83 f0 01             	xor    eax,0x1
c00098f9:	0f b6 c0             	movzx  eax,al
c00098fc:	85 c0                	test   eax,eax
c00098fe:	74 20                	je     c0009920 <sendKeyboardToken(KeyboardToken)+0x258>
c0009900:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009905:	6a 01                	push   0x1
c0009907:	6a 00                	push   0x0
c0009909:	68 28 95 00 c0       	push   0xc0009528
c000990e:	50                   	push   eax
c000990f:	e8 d0 bb 00 00       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c0009914:	83 c4 10             	add    esp,0x10
c0009917:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000991e:	eb 3a                	jmp    c000995a <sendKeyboardToken(KeyboardToken)+0x292>
c0009920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009923:	0f b7 c0             	movzx  eax,ax
c0009926:	3d 01 02 00 00       	cmp    eax,0x201
c000992b:	75 2d                	jne    c000995a <sendKeyboardToken(KeyboardToken)+0x292>
c000992d:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c0009932:	83 f0 01             	xor    eax,0x1
c0009935:	0f b6 c0             	movzx  eax,al
c0009938:	85 c0                	test   eax,eax
c000993a:	74 1e                	je     c000995a <sendKeyboardToken(KeyboardToken)+0x292>
c000993c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009941:	6a 01                	push   0x1
c0009943:	6a 00                	push   0x0
c0009945:	68 8d 95 00 c0       	push   0xc000958d
c000994a:	50                   	push   eax
c000994b:	e8 94 bb 00 00       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c0009950:	83 c4 10             	add    esp,0x10
c0009953:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000995a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000995d:	0f b7 c0             	movzx  eax,ax
c0009960:	3d 25 03 00 00       	cmp    eax,0x325
c0009965:	75 06                	jne    c000996d <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009967:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000996d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009970:	0f b7 c0             	movzx  eax,ax
c0009973:	3d 24 03 00 00       	cmp    eax,0x324
c0009978:	75 06                	jne    c0009980 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000997a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009983:	0f b7 c0             	movzx  eax,ax
c0009986:	3d 23 03 00 00       	cmp    eax,0x323
c000998b:	75 06                	jne    c0009993 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000998d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0009993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009996:	0f b7 c0             	movzx  eax,ax
c0009999:	3d 26 03 00 00       	cmp    eax,0x326
c000999e:	75 06                	jne    c00099a6 <sendKeyboardToken(KeyboardToken)+0x2de>
c00099a0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a9:	0f b7 c0             	movzx  eax,ax
c00099ac:	3d 27 03 00 00       	cmp    eax,0x327
c00099b1:	75 06                	jne    c00099b9 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099b3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099bc:	0f b7 c0             	movzx  eax,ax
c00099bf:	3d 22 03 00 00       	cmp    eax,0x322
c00099c4:	75 06                	jne    c00099cc <sendKeyboardToken(KeyboardToken)+0x304>
c00099c6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099cc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099d0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099d3:	83 f0 01             	xor    eax,0x1
c00099d6:	0f b6 c0             	movzx  eax,al
c00099d9:	85 c0                	test   eax,eax
c00099db:	74 7c                	je     c0009a59 <sendKeyboardToken(KeyboardToken)+0x391>
c00099dd:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c00099e2:	0f b6 c0             	movzx  eax,al
c00099e5:	85 c0                	test   eax,eax
c00099e7:	74 43                	je     c0009a2c <sendKeyboardToken(KeyboardToken)+0x364>
c00099e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099ed:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099f1:	85 c0                	test   eax,eax
c00099f3:	74 2b                	je     c0009a20 <sendKeyboardToken(KeyboardToken)+0x358>
c00099f5:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c00099fb:	89 d0                	mov    eax,edx
c00099fd:	c1 e0 02             	shl    eax,0x2
c0009a00:	01 d0                	add    eax,edx
c0009a02:	d1 e0                	shl    eax,1
c0009a04:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a0c:	0f b7 c0             	movzx  eax,ax
c0009a0f:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a12:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a17:	01 d0                	add    eax,edx
c0009a19:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a1e:	eb 71                	jmp    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a20:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a2a:	eb 65                	jmp    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a2c:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a31:	85 c0                	test   eax,eax
c0009a33:	74 18                	je     c0009a4d <sendKeyboardToken(KeyboardToken)+0x385>
c0009a35:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a3a:	0f b6 c0             	movzx  eax,al
c0009a3d:	83 ec 0c             	sub    esp,0xc
c0009a40:	50                   	push   eax
c0009a41:	e8 ac fb ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a4d:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a57:	eb 38                	jmp    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a5c:	0f b7 c0             	movzx  eax,ax
c0009a5f:	3d 01 01 00 00       	cmp    eax,0x101
c0009a64:	75 2b                	jne    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a66:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a6b:	85 c0                	test   eax,eax
c0009a6d:	74 18                	je     c0009a87 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a6f:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a74:	0f b6 c0             	movzx  eax,al
c0009a77:	83 ec 0c             	sub    esp,0xc
c0009a7a:	50                   	push   eax
c0009a7b:	e8 72 fb ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009a80:	83 c4 10             	add    esp,0x10
c0009a83:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a87:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a91:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a94:	83 f0 01             	xor    eax,0x1
c0009a97:	0f b6 c0             	movzx  eax,al
c0009a9a:	85 c0                	test   eax,eax
c0009a9c:	74 5a                	je     c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a9e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009aa1:	83 f0 01             	xor    eax,0x1
c0009aa4:	0f b6 c0             	movzx  eax,al
c0009aa7:	85 c0                	test   eax,eax
c0009aa9:	74 4d                	je     c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aab:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009ab0:	83 f0 01             	xor    eax,0x1
c0009ab3:	0f b6 c0             	movzx  eax,al
c0009ab6:	85 c0                	test   eax,eax
c0009ab8:	74 3e                	je     c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abd:	0f b7 c0             	movzx  eax,ax
c0009ac0:	83 f8 1f             	cmp    eax,0x1f
c0009ac3:	76 0b                	jbe    c0009ad0 <sendKeyboardToken(KeyboardToken)+0x408>
c0009ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac8:	0f b7 c0             	movzx  eax,ax
c0009acb:	83 f8 7e             	cmp    eax,0x7e
c0009ace:	76 16                	jbe    c0009ae6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad3:	0f b7 c0             	movzx  eax,ax
c0009ad6:	83 f8 0a             	cmp    eax,0xa
c0009ad9:	74 0b                	je     c0009ae6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ade:	0f b7 c0             	movzx  eax,ax
c0009ae1:	83 f8 08             	cmp    eax,0x8
c0009ae4:	75 12                	jne    c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae9:	0f b6 c0             	movzx  eax,al
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 fd fa ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009afb:	83 f0 01             	xor    eax,0x1
c0009afe:	0f b6 c0             	movzx  eax,al
c0009b01:	85 c0                	test   eax,eax
c0009b03:	74 5d                	je     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b05:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b08:	83 f0 01             	xor    eax,0x1
c0009b0b:	0f b6 c0             	movzx  eax,al
c0009b0e:	85 c0                	test   eax,eax
c0009b10:	74 50                	je     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b12:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b17:	0f b6 c0             	movzx  eax,al
c0009b1a:	85 c0                	test   eax,eax
c0009b1c:	74 44                	je     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b21:	0f b7 c0             	movzx  eax,ax
c0009b24:	83 f8 3f             	cmp    eax,0x3f
c0009b27:	76 39                	jbe    c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b2c:	0f b7 c0             	movzx  eax,ax
c0009b2f:	83 f8 7f             	cmp    eax,0x7f
c0009b32:	77 2e                	ja     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b37:	88 c2                	mov    dl,al
c0009b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b3c:	0f b7 c0             	movzx  eax,ax
c0009b3f:	83 f8 5f             	cmp    eax,0x5f
c0009b42:	76 04                	jbe    c0009b48 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b44:	b0 20                	mov    al,0x20
c0009b46:	eb 02                	jmp    c0009b4a <sendKeyboardToken(KeyboardToken)+0x482>
c0009b48:	b0 00                	mov    al,0x0
c0009b4a:	89 d1                	mov    ecx,edx
c0009b4c:	29 c1                	sub    ecx,eax
c0009b4e:	89 c8                	mov    eax,ecx
c0009b50:	83 e8 40             	sub    eax,0x40
c0009b53:	0f b6 c0             	movzx  eax,al
c0009b56:	83 ec 0c             	sub    esp,0xc
c0009b59:	50                   	push   eax
c0009b5a:	e8 93 fa ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009b5f:	83 c4 10             	add    esp,0x10
c0009b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b65:	0f b7 c0             	movzx  eax,ax
c0009b68:	3d 00 03 00 00       	cmp    eax,0x300
c0009b6d:	75 12                	jne    c0009b81 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b6f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b72:	83 f0 01             	xor    eax,0x1
c0009b75:	0f b6 c0             	movzx  eax,al
c0009b78:	85 c0                	test   eax,eax
c0009b7a:	74 05                	je     c0009b81 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b7c:	e8 ba 73 00 00       	call   c0010f3b <doTerminalCycle()>
c0009b81:	90                   	nop
c0009b82:	c9                   	leave  
c0009b83:	c3                   	ret    

c0009b84 <clearInternalKeybuffer(VgaText*)>:
c0009b84:	55                   	push   ebp
c0009b85:	89 e5                	mov    ebp,esp
c0009b87:	83 ec 08             	sub    esp,0x8
c0009b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b8d:	05 02 01 00 00       	add    eax,0x102
c0009b92:	83 ec 0c             	sub    esp,0xc
c0009b95:	50                   	push   eax
c0009b96:	e8 e5 69 ff ff       	call   c0000580 <strlen>
c0009b9b:	83 c4 10             	add    esp,0x10
c0009b9e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ba1:	81 c2 02 01 00 00    	add    edx,0x102
c0009ba7:	83 ec 04             	sub    esp,0x4
c0009baa:	50                   	push   eax
c0009bab:	6a 00                	push   0x0
c0009bad:	52                   	push   edx
c0009bae:	e8 3d 69 ff ff       	call   c00004f0 <memset>
c0009bb3:	83 c4 10             	add    esp,0x10
c0009bb6:	90                   	nop
c0009bb7:	c9                   	leave  
c0009bb8:	c3                   	ret    

c0009bb9 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009bb9:	55                   	push   ebp
c0009bba:	89 e5                	mov    ebp,esp
c0009bbc:	83 ec 18             	sub    esp,0x18
c0009bbf:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bc4:	85 c0                	test   eax,eax
c0009bc6:	74 2a                	je     c0009bf2 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bc8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bce:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c0009bd4:	83 ec 04             	sub    esp,0x4
c0009bd7:	68 40 a3 02 c0       	push   0xc002a340
c0009bdc:	83 ec 08             	sub    esp,0x8
c0009bdf:	89 e0                	mov    eax,esp
c0009be1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009be4:	89 08                	mov    DWORD PTR [eax],ecx
c0009be6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009be9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009bed:	ff d2                	call   edx
c0009bef:	83 c4 10             	add    esp,0x10
c0009bf2:	fb                   	sti    
c0009bf3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bfa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bfe:	0f 84 08 01 00 00    	je     c0009d0c <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c07:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c0d:	0f be c0             	movsx  eax,al
c0009c10:	85 c0                	test   eax,eax
c0009c12:	75 27                	jne    c0009c3b <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c14:	fa                   	cli    
c0009c15:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c1a:	83 c0 01             	add    eax,0x1
c0009c1d:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009c22:	e8 09 bb 00 00       	call   c0015730 <schedule()>
c0009c27:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009c2f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c34:	85 c0                	test   eax,eax
c0009c36:	75 cc                	jne    c0009c04 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c38:	fb                   	sti    
c0009c39:	eb c9                	jmp    c0009c04 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c3e:	8d 50 01             	lea    edx,[eax+0x1]
c0009c41:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c44:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c47:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c4d:	88 10                	mov    BYTE PTR [eax],dl
c0009c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c52:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c58:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c5b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c5f:	83 f8 03             	cmp    eax,0x3
c0009c62:	75 1e                	jne    c0009c82 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c64:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c6b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c6e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c74:	83 ec 08             	sub    esp,0x8
c0009c77:	6a 02                	push   0x2
c0009c79:	50                   	push   eax
c0009c7a:	e8 a5 61 00 00       	call   c000fe24 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c7f:	83 c4 10             	add    esp,0x10
c0009c82:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c86:	83 f8 1c             	cmp    eax,0x1c
c0009c89:	75 1e                	jne    c0009ca9 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009c8b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c95:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c9b:	83 ec 08             	sub    esp,0x8
c0009c9e:	6a 09                	push   0x9
c0009ca0:	50                   	push   eax
c0009ca1:	e8 7e 61 00 00       	call   c000fe24 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009ca6:	83 c4 10             	add    esp,0x10
c0009ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cac:	05 02 01 00 00       	add    eax,0x102
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 c6 68 ff ff       	call   c0000580 <strlen>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc0:	81 c2 02 01 00 00    	add    edx,0x102
c0009cc6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cc9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ccc:	81 c2 02 01 00 00    	add    edx,0x102
c0009cd2:	83 ec 04             	sub    esp,0x4
c0009cd5:	50                   	push   eax
c0009cd6:	51                   	push   ecx
c0009cd7:	52                   	push   edx
c0009cd8:	e8 f3 66 ff ff       	call   c00003d0 <memmove>
c0009cdd:	83 c4 10             	add    esp,0x10
c0009ce0:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ce4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009ce8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cec:	83 f8 0a             	cmp    eax,0xa
c0009cef:	74 16                	je     c0009d07 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009cf1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf5:	83 f8 03             	cmp    eax,0x3
c0009cf8:	74 0d                	je     c0009d07 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009cfa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfe:	83 f8 1c             	cmp    eax,0x1c
c0009d01:	0f 85 f3 fe ff ff    	jne    c0009bfa <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d0a:	eb 03                	jmp    c0009d0f <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d0f:	c9                   	leave  
c0009d10:	c3                   	ret    
c0009d11:	90                   	nop

c0009d12 <Keyboard::Keyboard(char const*)>:
c0009d12:	83 ec 0c             	sub    esp,0xc
c0009d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d19:	83 ec 08             	sub    esp,0x8
c0009d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d20:	50                   	push   eax
c0009d21:	e8 a2 f4 ff ff       	call   c00091c8 <Device::Device(char const*)>
c0009d26:	83 c4 10             	add    esp,0x10
c0009d29:	ba 64 1d 02 c0       	mov    edx,0xc0021d64
c0009d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d32:	89 10                	mov    DWORD PTR [eax],edx
c0009d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d38:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d42:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d49:	90                   	nop
c0009d4a:	83 c4 0c             	add    esp,0xc
c0009d4d:	c3                   	ret    

c0009d4e <Keyboard::~Keyboard()>:
c0009d4e:	83 ec 0c             	sub    esp,0xc
c0009d51:	ba 64 1d 02 c0       	mov    edx,0xc0021d64
c0009d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5a:	89 10                	mov    DWORD PTR [eax],edx
c0009d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d60:	83 ec 0c             	sub    esp,0xc
c0009d63:	50                   	push   eax
c0009d64:	e8 ff f1 ff ff       	call   c0008f68 <Device::~Device()>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	90                   	nop
c0009d6d:	83 c4 0c             	add    esp,0xc
c0009d70:	c3                   	ret    
c0009d71:	90                   	nop

c0009d72 <Keyboard::~Keyboard()>:
c0009d72:	83 ec 0c             	sub    esp,0xc
c0009d75:	83 ec 0c             	sub    esp,0xc
c0009d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d7c:	e8 cd ff ff ff       	call   c0009d4e <Keyboard::~Keyboard()>
c0009d81:	83 c4 10             	add    esp,0x10
c0009d84:	83 ec 08             	sub    esp,0x8
c0009d87:	68 5c 01 00 00       	push   0x15c
c0009d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d90:	e8 16 29 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	83 c4 0c             	add    esp,0xc
c0009d9b:	c3                   	ret    

c0009d9c <LogicalDisk::close(int, int, void*)>:
c0009d9c:	83 c8 ff             	or     eax,0xffffffff
c0009d9f:	c3                   	ret    

c0009da0 <LogicalDisk::~LogicalDisk()>:
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	ba dc 1d 02 c0       	mov    edx,0xc0021ddc
c0009da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dac:	89 10                	mov    DWORD PTR [eax],edx
c0009dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db2:	83 ec 0c             	sub    esp,0xc
c0009db5:	50                   	push   eax
c0009db6:	e8 ad f1 ff ff       	call   c0008f68 <Device::~Device()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	90                   	nop
c0009dbf:	83 c4 0c             	add    esp,0xc
c0009dc2:	c3                   	ret    
c0009dc3:	90                   	nop

c0009dc4 <LogicalDisk::~LogicalDisk()>:
c0009dc4:	83 ec 0c             	sub    esp,0xc
c0009dc7:	83 ec 0c             	sub    esp,0xc
c0009dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dce:	e8 cd ff ff ff       	call   c0009da0 <LogicalDisk::~LogicalDisk()>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	83 ec 08             	sub    esp,0x8
c0009dd9:	68 78 01 00 00       	push   0x178
c0009dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de2:	e8 c4 28 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	83 c4 0c             	add    esp,0xc
c0009ded:	c3                   	ret    

c0009dee <LogicalDisk::open(int, int, void*)>:
c0009dee:	83 ec 18             	sub    esp,0x18
c0009df1:	68 90 1d 02 c0       	push   0xc0021d90
c0009df6:	e8 eb 4e 00 00       	call   c000ece6 <KePanic(char const*)>
c0009dfb:	83 c8 ff             	or     eax,0xffffffff
c0009dfe:	83 c4 1c             	add    esp,0x1c
c0009e01:	c3                   	ret    

c0009e02 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e02:	53                   	push   ebx
c0009e03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e0f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e15:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e1b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e21:	77 10                	ja     c0009e33 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e23:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e29:	89 d3                	mov    ebx,edx
c0009e2b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e31:	72 05                	jb     c0009e38 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e33:	83 c8 ff             	or     eax,0xffffffff
c0009e36:	89 c2                	mov    edx,eax
c0009e38:	5b                   	pop    ebx
c0009e39:	c3                   	ret    

c0009e3a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e3a:	56                   	push   esi
c0009e3b:	83 c8 ff             	or     eax,0xffffffff
c0009e3e:	53                   	push   ebx
c0009e3f:	89 c2                	mov    edx,eax
c0009e41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e45:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e4d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e53:	77 27                	ja     c0009e7c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e55:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e5b:	89 d8                	mov    eax,ebx
c0009e5d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e68:	89 c2                	mov    edx,eax
c0009e6a:	73 10                	jae    c0009e7c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e6c:	89 c8                	mov    eax,ecx
c0009e6e:	89 da                	mov    edx,ebx
c0009e70:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e76:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e7c:	5b                   	pop    ebx
c0009e7d:	5e                   	pop    esi
c0009e7e:	c3                   	ret    
c0009e7f:	90                   	nop

c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e80:	83 ec 1c             	sub    esp,0x1c
c0009e83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea6:	83 ec 08             	sub    esp,0x8
c0009ea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ead:	50                   	push   eax
c0009eae:	e8 15 f3 ff ff       	call   c00091c8 <Device::Device(char const*)>
c0009eb3:	83 c4 10             	add    esp,0x10
c0009eb6:	ba dc 1d 02 c0       	mov    edx,0xc0021ddc
c0009ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ebf:	89 10                	mov    DWORD PTR [eax],edx
c0009ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009edb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009ef0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009ef4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009efc:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f02:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f08:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f13:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f19:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f27:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f31:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f3b:	90                   	nop
c0009f3c:	83 c4 1c             	add    esp,0x1c
c0009f3f:	c3                   	ret    

c0009f40 <LogicalDisk::assignDriveLetter()>:
c0009f40:	55                   	push   ebp
c0009f41:	57                   	push   edi
c0009f42:	56                   	push   esi
c0009f43:	53                   	push   ebx
c0009f44:	83 ec 14             	sub    esp,0x14
c0009f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f4b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f51:	b0 41                	mov    al,0x41
c0009f53:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f59:	84 d2                	test   dl,dl
c0009f5b:	75 02                	jne    c0009f5f <LogicalDisk::assignDriveLetter()+0x1f>
c0009f5d:	b0 43                	mov    al,0x43
c0009f5f:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f65:	0f b6 ca             	movzx  ecx,dl
c0009f68:	0f be e8             	movsx  ebp,al
c0009f6b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f6f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f73:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009f79:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f7d:	3c 43                	cmp    al,0x43
c0009f7f:	75 10                	jne    c0009f91 <LogicalDisk::assignDriveLetter()+0x51>
c0009f81:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f88:	75 5a                	jne    c0009fe4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f8a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009f8f:	75 53                	jne    c0009fe4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f91:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009f94:	ba 01 00 00 00       	mov    edx,0x1
c0009f99:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f9c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009f9f:	d3 e2                	shl    edx,cl
c0009fa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa5:	89 d7                	mov    edi,edx
c0009fa7:	89 d6                	mov    esi,edx
c0009fa9:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fad:	c1 ff 1f             	sar    edi,0x1f
c0009fb0:	21 f9                	and    ecx,edi
c0009fb2:	09 d1                	or     ecx,edx
c0009fb4:	75 2e                	jne    c0009fe4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fba:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fbe:	09 f2                	or     edx,esi
c0009fc0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fc3:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009fc9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fcd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fd3:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c0009fda:	09 fa                	or     edx,edi
c0009fdc:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c0009fe2:	eb 0d                	jmp    c0009ff1 <LogicalDisk::assignDriveLetter()+0xb1>
c0009fe4:	8d 50 01             	lea    edx,[eax+0x1]
c0009fe7:	45                   	inc    ebp
c0009fe8:	80 fa 5b             	cmp    dl,0x5b
c0009feb:	88 d0                	mov    al,dl
c0009fed:	75 8e                	jne    c0009f7d <LogicalDisk::assignDriveLetter()+0x3d>
c0009fef:	31 c0                	xor    eax,eax
c0009ff1:	83 c4 14             	add    esp,0x14
c0009ff4:	5b                   	pop    ebx
c0009ff5:	5e                   	pop    esi
c0009ff6:	5f                   	pop    edi
c0009ff7:	5d                   	pop    ebp
c0009ff8:	c3                   	ret    
c0009ff9:	90                   	nop

c0009ffa <LogicalDisk::mount()>:
c0009ffa:	56                   	push   esi
c0009ffb:	53                   	push   ebx
c0009ffc:	53                   	push   ebx
c0009ffd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a001:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a007:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a011:	85 db                	test   ebx,ebx
c000a013:	74 27                	je     c000a03c <LogicalDisk::mount()+0x42>
c000a015:	51                   	push   ecx
c000a016:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a01d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a01f:	83 e8 41             	sub    eax,0x41
c000a022:	50                   	push   eax
c000a023:	56                   	push   esi
c000a024:	53                   	push   ebx
c000a025:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a028:	83 c4 10             	add    esp,0x10
c000a02b:	84 c0                	test   al,al
c000a02d:	74 08                	je     c000a037 <LogicalDisk::mount()+0x3d>
c000a02f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a035:	eb 07                	jmp    c000a03e <LogicalDisk::mount()+0x44>
c000a037:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a03a:	eb d5                	jmp    c000a011 <LogicalDisk::mount()+0x17>
c000a03c:	31 c0                	xor    eax,eax
c000a03e:	5a                   	pop    edx
c000a03f:	5b                   	pop    ebx
c000a040:	5e                   	pop    esi
c000a041:	c3                   	ret    

c000a042 <LogicalDisk::unmount()>:
c000a042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a046:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a050:	c3                   	ret    
c000a051:	90                   	nop

c000a052 <LogicalDisk::eject()>:
c000a052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a056:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a05c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a05e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a062:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a065:	90                   	nop

c000a066 <LogicalDisk::unassignDriveLetter()>:
c000a066:	57                   	push   edi
c000a067:	56                   	push   esi
c000a068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a06c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a073:	85 c9                	test   ecx,ecx
c000a075:	75 0f                	jne    c000a086 <LogicalDisk::unassignDriveLetter()+0x20>
c000a077:	c7 44 24 0c b4 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021db4
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	e9 60 4c 00 00       	jmp    c000ece6 <KePanic(char const*)>
c000a086:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a08d:	83 e9 41             	sub    ecx,0x41
c000a090:	b8 01 00 00 00       	mov    eax,0x1
c000a095:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a0a0:	d3 e0                	shl    eax,cl
c000a0a2:	89 c7                	mov    edi,eax
c000a0a4:	f7 d0                	not    eax
c000a0a6:	c1 ff 1f             	sar    edi,0x1f
c000a0a9:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0af:	89 fe                	mov    esi,edi
c000a0b1:	f7 d6                	not    esi
c000a0b3:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0b9:	5e                   	pop    esi
c000a0ba:	5f                   	pop    edi
c000a0bb:	c3                   	ret    

c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0bc:	57                   	push   edi
c000a0bd:	56                   	push   esi
c000a0be:	53                   	push   ebx
c000a0bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0c7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0cf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0d5:	77 41                	ja     c000a118 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0d7:	99                   	cdq    
c000a0d8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0de:	01 c8                	add    eax,ecx
c000a0e0:	11 da                	adc    edx,ebx
c000a0e2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0e8:	19 d7                	sbb    edi,edx
c000a0ea:	72 33                	jb     c000a11f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a0ec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a0f2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a0f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0fc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a100:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a106:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a10c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a110:	5b                   	pop    ebx
c000a111:	5e                   	pop    esi
c000a112:	5f                   	pop    edi
c000a113:	e9 1e 0b 00 00       	jmp    c000ac36 <VCache::read(unsigned long long, int, void*)>
c000a118:	b8 05 00 00 00       	mov    eax,0x5
c000a11d:	eb 05                	jmp    c000a124 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a11f:	b8 07 00 00 00       	mov    eax,0x7
c000a124:	5b                   	pop    ebx
c000a125:	5e                   	pop    esi
c000a126:	5f                   	pop    edi
c000a127:	c3                   	ret    

c000a128 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a128:	57                   	push   edi
c000a129:	56                   	push   esi
c000a12a:	53                   	push   ebx
c000a12b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a12f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a133:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a13b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a141:	77 41                	ja     c000a184 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a143:	99                   	cdq    
c000a144:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a14a:	01 c8                	add    eax,ecx
c000a14c:	11 da                	adc    edx,ebx
c000a14e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a154:	19 d7                	sbb    edi,edx
c000a156:	72 33                	jb     c000a18b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a158:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a15e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a164:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a168:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a16c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a172:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a178:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a17c:	5b                   	pop    ebx
c000a17d:	5e                   	pop    esi
c000a17e:	5f                   	pop    edi
c000a17f:	e9 b4 09 00 00       	jmp    c000ab38 <VCache::write(unsigned long long, int, void*)>
c000a184:	b8 05 00 00 00       	mov    eax,0x5
c000a189:	eb 05                	jmp    c000a190 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a18b:	b8 07 00 00 00       	mov    eax,0x7
c000a190:	5b                   	pop    ebx
c000a191:	5e                   	pop    esi
c000a192:	5f                   	pop    edi
c000a193:	c3                   	ret    

c000a194 <Mouse::Mouse(char const*)>:
c000a194:	83 ec 0c             	sub    esp,0xc
c000a197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a19b:	83 ec 08             	sub    esp,0x8
c000a19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1a2:	50                   	push   eax
c000a1a3:	e8 20 f0 ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	ba 08 1e 02 c0       	mov    edx,0xc0021e08
c000a1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b4:	89 10                	mov    DWORD PTR [eax],edx
c000a1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ba:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1c4:	90                   	nop
c000a1c5:	83 c4 0c             	add    esp,0xc
c000a1c8:	c3                   	ret    
c000a1c9:	90                   	nop
c000a1ca:	66 90                	xchg   ax,ax

c000a1cc <Mouse::~Mouse()>:
c000a1cc:	83 ec 0c             	sub    esp,0xc
c000a1cf:	ba 08 1e 02 c0       	mov    edx,0xc0021e08
c000a1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d8:	89 10                	mov    DWORD PTR [eax],edx
c000a1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1de:	83 ec 0c             	sub    esp,0xc
c000a1e1:	50                   	push   eax
c000a1e2:	e8 81 ed ff ff       	call   c0008f68 <Device::~Device()>
c000a1e7:	83 c4 10             	add    esp,0x10
c000a1ea:	90                   	nop
c000a1eb:	83 c4 0c             	add    esp,0xc
c000a1ee:	c3                   	ret    
c000a1ef:	90                   	nop

c000a1f0 <Mouse::~Mouse()>:
c000a1f0:	83 ec 0c             	sub    esp,0xc
c000a1f3:	83 ec 0c             	sub    esp,0xc
c000a1f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1fa:	e8 cd ff ff ff       	call   c000a1cc <Mouse::~Mouse()>
c000a1ff:	83 c4 10             	add    esp,0x10
c000a202:	83 ec 08             	sub    esp,0x8
c000a205:	68 58 01 00 00       	push   0x158
c000a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20e:	e8 98 24 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	83 c4 0c             	add    esp,0xc
c000a219:	c3                   	ret    

c000a21a <NIC::getMAC()>:
c000a21a:	31 c0                	xor    eax,eax
c000a21c:	31 d2                	xor    edx,edx
c000a21e:	c3                   	ret    
c000a21f:	90                   	nop

c000a220 <NIC::write(int, unsigned char*, int*)>:
c000a220:	b8 01 00 00 00       	mov    eax,0x1
c000a225:	c3                   	ret    

c000a226 <NIC::NIC(char const*)>:
c000a226:	83 ec 0c             	sub    esp,0xc
c000a229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a22d:	83 ec 08             	sub    esp,0x8
c000a230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a234:	50                   	push   eax
c000a235:	e8 8e ef ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	ba 34 1e 02 c0       	mov    edx,0xc0021e34
c000a242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a246:	89 10                	mov    DWORD PTR [eax],edx
c000a248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a24c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a256:	90                   	nop
c000a257:	83 c4 0c             	add    esp,0xc
c000a25a:	c3                   	ret    
c000a25b:	90                   	nop

c000a25c <NIC::~NIC()>:
c000a25c:	83 ec 0c             	sub    esp,0xc
c000a25f:	ba 34 1e 02 c0       	mov    edx,0xc0021e34
c000a264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a268:	89 10                	mov    DWORD PTR [eax],edx
c000a26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26e:	83 ec 0c             	sub    esp,0xc
c000a271:	50                   	push   eax
c000a272:	e8 f1 ec ff ff       	call   c0008f68 <Device::~Device()>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	90                   	nop
c000a27b:	83 c4 0c             	add    esp,0xc
c000a27e:	c3                   	ret    
c000a27f:	90                   	nop

c000a280 <NIC::~NIC()>:
c000a280:	83 ec 0c             	sub    esp,0xc
c000a283:	83 ec 0c             	sub    esp,0xc
c000a286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28a:	e8 cd ff ff ff       	call   c000a25c <NIC::~NIC()>
c000a28f:	83 c4 10             	add    esp,0x10
c000a292:	83 ec 08             	sub    esp,0x8
c000a295:	68 58 01 00 00       	push   0x158
c000a29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29e:	e8 08 24 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	83 c4 0c             	add    esp,0xc
c000a2a9:	c3                   	ret    

c000a2aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2aa:	55                   	push   ebp
c000a2ab:	57                   	push   edi
c000a2ac:	56                   	push   esi
c000a2ad:	53                   	push   ebx
c000a2ae:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2b4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2bb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2c2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2c9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2d8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2df:	e8 e0 ef ff ff       	call   c00092c4 <Device::getName()>
c000a2e4:	5a                   	pop    edx
c000a2e5:	59                   	pop    ecx
c000a2e6:	50                   	push   eax
c000a2e7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2eb:	55                   	push   ebp
c000a2ec:	e8 5f 63 ff ff       	call   c0000650 <strcpy>
c000a2f1:	5b                   	pop    ebx
c000a2f2:	58                   	pop    eax
c000a2f3:	68 60 1e 02 c0       	push   0xc0021e60
c000a2f8:	55                   	push   ebp
c000a2f9:	e8 72 65 ff ff       	call   c0000870 <strcat>
c000a2fe:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a305:	e8 96 46 00 00       	call   c000e9a0 <malloc>
c000a30a:	83 c4 0c             	add    esp,0xc
c000a30d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a311:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a315:	89 c3                	mov    ebx,eax
c000a317:	57                   	push   edi
c000a318:	56                   	push   esi
c000a319:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a320:	55                   	push   ebp
c000a321:	50                   	push   eax
c000a322:	e8 59 fb ff ff       	call   c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a327:	83 c4 14             	add    esp,0x14
c000a32a:	53                   	push   ebx
c000a32b:	e8 10 fc ff ff       	call   c0009f40 <LogicalDisk::assignDriveLetter()>
c000a330:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a333:	e8 c2 fc ff ff       	call   c0009ffa <LogicalDisk::mount()>
c000a338:	58                   	pop    eax
c000a339:	5a                   	pop    edx
c000a33a:	53                   	push   ebx
c000a33b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a342:	e8 1f ed ff ff       	call   c0009066 <Device::addChild(Device*)>
c000a347:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a34d:	5b                   	pop    ebx
c000a34e:	5e                   	pop    esi
c000a34f:	5f                   	pop    edi
c000a350:	5d                   	pop    ebp
c000a351:	c3                   	ret    

c000a352 <createPartitionsForDisk(PhysicalDisk*)>:
c000a352:	55                   	push   ebp
c000a353:	57                   	push   edi
c000a354:	56                   	push   esi
c000a355:	53                   	push   ebx
c000a356:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a35c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a363:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a369:	3d 00 02 00 00       	cmp    eax,0x200
c000a36e:	74 27                	je     c000a397 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a370:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a376:	83 ec 10             	sub    esp,0x10
c000a379:	99                   	cdq    
c000a37a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a380:	52                   	push   edx
c000a381:	50                   	push   eax
c000a382:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a386:	c1 e6 0a             	shl    esi,0xa
c000a389:	89 fd                	mov    ebp,edi
c000a38b:	55                   	push   ebp
c000a38c:	56                   	push   esi
c000a38d:	e8 32 5d 01 00       	call   c00200c4 <__udivdi3>
c000a392:	e9 b9 00 00 00       	jmp    c000a450 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a397:	83 ec 0c             	sub    esp,0xc
c000a39a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a39c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3a0:	56                   	push   esi
c000a3a1:	6a 01                	push   0x1
c000a3a3:	6a 00                	push   0x0
c000a3a5:	6a 00                	push   0x0
c000a3a7:	53                   	push   ebx
c000a3a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3ab:	83 c4 20             	add    esp,0x20
c000a3ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3b6:	75 0a                	jne    c000a3c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3c0:	74 2c                	je     c000a3ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3c8:	83 ec 10             	sub    esp,0x10
c000a3cb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3d1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3d7:	89 f7                	mov    edi,esi
c000a3d9:	c1 ff 1f             	sar    edi,0x1f
c000a3dc:	57                   	push   edi
c000a3dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3e1:	56                   	push   esi
c000a3e2:	c1 e0 0a             	shl    eax,0xa
c000a3e5:	52                   	push   edx
c000a3e6:	50                   	push   eax
c000a3e7:	e8 d8 5c 01 00       	call   c00200c4 <__udivdi3>
c000a3ec:	eb 62                	jmp    c000a450 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a3f5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a3fc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a403:	89 cf                	mov    edi,ecx
c000a405:	83 e2 7f             	and    edx,0x7f
c000a408:	83 e7 7f             	and    edi,0x7f
c000a40b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a40e:	83 e0 7f             	and    eax,0x7f
c000a411:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a414:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a41b:	83 e0 7f             	and    eax,0x7f
c000a41e:	01 d0                	add    eax,edx
c000a420:	84 c0                	test   al,al
c000a422:	89 c5                	mov    ebp,eax
c000a424:	74 41                	je     c000a467 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a426:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a42c:	83 ec 10             	sub    esp,0x10
c000a42f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a435:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a43b:	89 f7                	mov    edi,esi
c000a43d:	c1 ff 1f             	sar    edi,0x1f
c000a440:	57                   	push   edi
c000a441:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a445:	56                   	push   esi
c000a446:	c1 e0 0a             	shl    eax,0xa
c000a449:	52                   	push   edx
c000a44a:	50                   	push   eax
c000a44b:	e8 74 5c 01 00       	call   c00200c4 <__udivdi3>
c000a450:	83 c4 14             	add    esp,0x14
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	6a 00                	push   0x0
c000a457:	6a 00                	push   0x0
c000a459:	53                   	push   ebx
c000a45a:	e8 4b fe ff ff       	call   c000a2aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a45f:	83 c4 20             	add    esp,0x20
c000a462:	e9 73 01 00 00       	jmp    c000a5da <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a467:	89 f0                	mov    eax,esi
c000a469:	31 c9                	xor    ecx,ecx
c000a46b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a472:	75 02                	jne    c000a476 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a474:	89 cd                	mov    ebp,ecx
c000a476:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a47e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a485:	83 c0 10             	add    eax,0x10
c000a488:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a490:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a497:	c1 e2 08             	shl    edx,0x8
c000a49a:	c1 e6 10             	shl    esi,0x10
c000a49d:	09 f2                	or     edx,esi
c000a49f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4a6:	09 f2                	or     edx,esi
c000a4a8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4af:	c1 e6 18             	shl    esi,0x18
c000a4b2:	09 f2                	or     edx,esi
c000a4b4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4bb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4bf:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4c6:	c1 e6 10             	shl    esi,0x10
c000a4c9:	c1 e2 08             	shl    edx,0x8
c000a4cc:	09 f2                	or     edx,esi
c000a4ce:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4d5:	09 f2                	or     edx,esi
c000a4d7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4de:	c1 e6 18             	shl    esi,0x18
c000a4e1:	09 f2                	or     edx,esi
c000a4e3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4e7:	41                   	inc    ecx
c000a4e8:	83 f9 04             	cmp    ecx,0x4
c000a4eb:	0f 85 7a ff ff ff    	jne    c000a46b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4f5:	83 f0 01             	xor    eax,0x1
c000a4f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a4fc:	75 4f                	jne    c000a54d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a4fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a502:	83 f0 01             	xor    eax,0x1
c000a505:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a509:	75 42                	jne    c000a54d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a50b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a511:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a519:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a51f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a527:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a52d:	89 f7                	mov    edi,esi
c000a52f:	c1 ff 1f             	sar    edi,0x1f
c000a532:	57                   	push   edi
c000a533:	56                   	push   esi
c000a534:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a538:	52                   	push   edx
c000a539:	c1 e0 0a             	shl    eax,0xa
c000a53c:	50                   	push   eax
c000a53d:	e8 82 5b 01 00       	call   c00200c4 <__udivdi3>
c000a542:	83 c4 10             	add    esp,0x10
c000a545:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a549:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a54d:	89 e8                	mov    eax,ebp
c000a54f:	0f b6 e8             	movzx  ebp,al
c000a552:	85 ed                	test   ebp,ebp
c000a554:	74 50                	je     c000a5a6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a55a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a55e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a562:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a566:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a56a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a56e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a572:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a576:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a57a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a57e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a586:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a58a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a58e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a592:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a596:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a59a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a59e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5a2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5a6:	31 ed                	xor    ebp,ebp
c000a5a8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5ac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5b0:	89 f8                	mov    eax,edi
c000a5b2:	09 f0                	or     eax,esi
c000a5b4:	74 1e                	je     c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5be:	89 d1                	mov    ecx,edx
c000a5c0:	09 c1                	or     ecx,eax
c000a5c2:	74 10                	je     c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5c4:	83 ec 0c             	sub    esp,0xc
c000a5c7:	57                   	push   edi
c000a5c8:	56                   	push   esi
c000a5c9:	52                   	push   edx
c000a5ca:	50                   	push   eax
c000a5cb:	53                   	push   ebx
c000a5cc:	e8 d9 fc ff ff       	call   c000a2aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5d1:	83 c4 20             	add    esp,0x20
c000a5d4:	45                   	inc    ebp
c000a5d5:	83 fd 04             	cmp    ebp,0x4
c000a5d8:	75 ce                	jne    c000a5a8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5da:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5e0:	5b                   	pop    ebx
c000a5e1:	5e                   	pop    esi
c000a5e2:	5f                   	pop    edi
c000a5e3:	5d                   	pop    ebp
c000a5e4:	c3                   	ret    
c000a5e5:	66 90                	xchg   ax,ax
c000a5e7:	90                   	nop

c000a5e8 <Serial::Serial(char const*)>:
c000a5e8:	83 ec 0c             	sub    esp,0xc
c000a5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5ef:	83 ec 08             	sub    esp,0x8
c000a5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5f6:	50                   	push   eax
c000a5f7:	e8 cc eb ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a5fc:	83 c4 10             	add    esp,0x10
c000a5ff:	ba 74 1e 02 c0       	mov    edx,0xc0021e74
c000a604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a608:	89 10                	mov    DWORD PTR [eax],edx
c000a60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a60e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a618:	90                   	nop
c000a619:	83 c4 0c             	add    esp,0xc
c000a61c:	c3                   	ret    
c000a61d:	90                   	nop
c000a61e:	66 90                	xchg   ax,ax

c000a620 <Serial::~Serial()>:
c000a620:	83 ec 0c             	sub    esp,0xc
c000a623:	ba 74 1e 02 c0       	mov    edx,0xc0021e74
c000a628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62c:	89 10                	mov    DWORD PTR [eax],edx
c000a62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a632:	83 ec 0c             	sub    esp,0xc
c000a635:	50                   	push   eax
c000a636:	e8 2d e9 ff ff       	call   c0008f68 <Device::~Device()>
c000a63b:	83 c4 10             	add    esp,0x10
c000a63e:	90                   	nop
c000a63f:	83 c4 0c             	add    esp,0xc
c000a642:	c3                   	ret    
c000a643:	90                   	nop

c000a644 <Serial::~Serial()>:
c000a644:	83 ec 0c             	sub    esp,0xc
c000a647:	83 ec 0c             	sub    esp,0xc
c000a64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64e:	e8 cd ff ff ff       	call   c000a620 <Serial::~Serial()>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	68 58 01 00 00       	push   0x158
c000a65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a662:	e8 44 20 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	83 c4 0c             	add    esp,0xc
c000a66d:	c3                   	ret    
c000a66e:	66 90                	xchg   ax,ax

c000a670 <Timer::Timer(char const*)>:
c000a670:	83 ec 0c             	sub    esp,0xc
c000a673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a677:	83 ec 08             	sub    esp,0x8
c000a67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67e:	50                   	push   eax
c000a67f:	e8 44 eb ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a684:	83 c4 10             	add    esp,0x10
c000a687:	ba d8 1f 02 c0       	mov    edx,0xc0021fd8
c000a68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a690:	89 10                	mov    DWORD PTR [eax],edx
c000a692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a696:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6a0:	90                   	nop
c000a6a1:	83 c4 0c             	add    esp,0xc
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop
c000a6a6:	66 90                	xchg   ax,ax

c000a6a8 <Timer::~Timer()>:
c000a6a8:	83 ec 0c             	sub    esp,0xc
c000a6ab:	ba d8 1f 02 c0       	mov    edx,0xc0021fd8
c000a6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b4:	89 10                	mov    DWORD PTR [eax],edx
c000a6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ba:	83 ec 0c             	sub    esp,0xc
c000a6bd:	50                   	push   eax
c000a6be:	e8 a5 e8 ff ff       	call   c0008f68 <Device::~Device()>
c000a6c3:	83 c4 10             	add    esp,0x10
c000a6c6:	90                   	nop
c000a6c7:	83 c4 0c             	add    esp,0xc
c000a6ca:	c3                   	ret    
c000a6cb:	90                   	nop

c000a6cc <Timer::~Timer()>:
c000a6cc:	83 ec 0c             	sub    esp,0xc
c000a6cf:	83 ec 0c             	sub    esp,0xc
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	e8 cd ff ff ff       	call   c000a6a8 <Timer::~Timer()>
c000a6db:	83 c4 10             	add    esp,0x10
c000a6de:	83 ec 08             	sub    esp,0x8
c000a6e1:	68 5c 01 00 00       	push   0x15c
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 bc 1f 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 c4 0c             	add    esp,0xc
c000a6f5:	c3                   	ret    

c000a6f6 <Timer::read()>:
c000a6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a700:	c3                   	ret    

c000a701 <setupTimer(int)>:
c000a701:	53                   	push   ebx
c000a702:	83 ec 14             	sub    esp,0x14
c000a705:	68 5c 01 00 00       	push   0x15c
c000a70a:	e8 91 42 00 00       	call   c000e9a0 <malloc>
c000a70f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a712:	89 c3                	mov    ebx,eax
c000a714:	e8 27 52 01 00       	call   c001f940 <PIT::PIT()>
c000a719:	58                   	pop    eax
c000a71a:	5a                   	pop    edx
c000a71b:	53                   	push   ebx
c000a71c:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a722:	e8 3f e9 ff ff       	call   c0009066 <Device::addChild(Device*)>
c000a727:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a729:	6a 00                	push   0x0
c000a72b:	6a 00                	push   0x0
c000a72d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a731:	53                   	push   ebx
c000a732:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a735:	83 c4 28             	add    esp,0x28
c000a738:	89 d8                	mov    eax,ebx
c000a73a:	5b                   	pop    ebx
c000a73b:	c3                   	ret    

c000a73c <timerHandler(unsigned int)>:
c000a73c:	57                   	push   edi
c000a73d:	56                   	push   esi
c000a73e:	53                   	push   ebx
c000a73f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a743:	51                   	push   ecx
c000a744:	51                   	push   ecx
c000a745:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a74b:	68 03 1f 02 c0       	push   0xc0021f03
c000a750:	e8 f9 c7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a755:	c7 04 24 1d 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f1d
c000a75c:	e8 ed c7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	01 35 ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,esi
c000a76a:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a771:	75 11                	jne    c000a784 <timerHandler(unsigned int)+0x48>
c000a773:	c7 44 24 10 2d 1f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021f2d
c000a77b:	5b                   	pop    ebx
c000a77c:	5e                   	pop    esi
c000a77d:	5f                   	pop    edi
c000a77e:	e9 cb c7 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000a783:	90                   	nop
c000a784:	fa                   	cli    
c000a785:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000a78a:	52                   	push   edx
c000a78b:	52                   	push   edx
c000a78c:	40                   	inc    eax
c000a78d:	50                   	push   eax
c000a78e:	68 41 1f 02 c0       	push   0xc0021f41
c000a793:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000a798:	e8 b1 c7 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a79d:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a7a4:	e8 b3 5c 01 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	84 c0                	test   al,al
c000a7ae:	0f 85 a0 00 00 00    	jne    c000a854 <timerHandler(unsigned int)+0x118>
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7bc:	e8 b7 5c 01 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7c1:	83 c4 10             	add    esp,0x10
c000a7c4:	89 c7                	mov    edi,eax
c000a7c6:	66 90                	xchg   ax,ax
c000a7c8:	83 ec 0c             	sub    esp,0xc
c000a7cb:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7d0:	e8 a3 5c 01 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7d5:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a7dc:	89 c3                	mov    ebx,eax
c000a7de:	e8 9d 5c 01 00       	call   c0020480 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7e6:	83 c4 10             	add    esp,0x10
c000a7e9:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7ef:	77 23                	ja     c000a814 <timerHandler(unsigned int)+0xd8>
c000a7f1:	83 ec 0c             	sub    esp,0xc
c000a7f4:	53                   	push   ebx
c000a7f5:	e8 46 b2 00 00       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c000a7fa:	83 c4 10             	add    esp,0x10
c000a7fd:	39 df                	cmp    edi,ebx
c000a7ff:	75 27                	jne    c000a828 <timerHandler(unsigned int)+0xec>
c000a801:	83 ec 0c             	sub    esp,0xc
c000a804:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a809:	e8 6a 5c 01 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a80e:	89 c7                	mov    edi,eax
c000a810:	eb 12                	jmp    c000a824 <timerHandler(unsigned int)+0xe8>
c000a812:	66 90                	xchg   ax,ax
c000a814:	50                   	push   eax
c000a815:	50                   	push   eax
c000a816:	53                   	push   ebx
c000a817:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a81c:	e8 1b 5d 01 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a821:	8d 76 00             	lea    esi,[esi+0x0]
c000a824:	83 c4 10             	add    esp,0x10
c000a827:	90                   	nop
c000a828:	83 ec 0c             	sub    esp,0xc
c000a82b:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a830:	e8 27 5c 01 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a835:	83 c4 10             	add    esp,0x10
c000a838:	84 c0                	test   al,al
c000a83a:	75 18                	jne    c000a854 <timerHandler(unsigned int)+0x118>
c000a83c:	83 ec 0c             	sub    esp,0xc
c000a83f:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a844:	e8 2f 5c 01 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	39 f8                	cmp    eax,edi
c000a84e:	0f 85 74 ff ff ff    	jne    c000a7c8 <timerHandler(unsigned int)+0x8c>
c000a854:	57                   	push   edi
c000a855:	57                   	push   edi
c000a856:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a85c:	68 5d 1f 02 c0       	push   0xc0021f5d
c000a861:	e8 e8 c6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a866:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a872:	85 c0                	test   eax,eax
c000a874:	74 4a                	je     c000a8c0 <timerHandler(unsigned int)+0x184>
c000a876:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a87d:	74 41                	je     c000a8c0 <timerHandler(unsigned int)+0x184>
c000a87f:	29 f0                	sub    eax,esi
c000a881:	8b 0d ec a7 02 c0    	mov    ecx,DWORD PTR ds:0xc002a7ec
c000a887:	89 42 34             	mov    DWORD PTR [edx+0x34],eax
c000a88a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a88f:	39 48 34             	cmp    DWORD PTR [eax+0x34],ecx
c000a892:	77 2c                	ja     c000a8c0 <timerHandler(unsigned int)+0x184>
c000a894:	52                   	push   edx
c000a895:	52                   	push   edx
c000a896:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a89c:	68 79 1f 02 c0       	push   0xc0021f79
c000a8a1:	e8 a8 c6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a8a6:	e8 85 ae 00 00       	call   c0015730 <schedule()>
c000a8ab:	59                   	pop    ecx
c000a8ac:	5b                   	pop    ebx
c000a8ad:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a8b3:	68 95 1f 02 c0       	push   0xc0021f95
c000a8b8:	e8 91 c6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a8bd:	83 c4 10             	add    esp,0x10
c000a8c0:	50                   	push   eax
c000a8c1:	50                   	push   eax
c000a8c2:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a8c8:	68 b1 1f 02 c0       	push   0xc0021fb1
c000a8cd:	e8 7c c6 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a8d2:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000a8d9:	83 c4 10             	add    esp,0x10
c000a8dc:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000a8e3:	75 03                	jne    c000a8e8 <timerHandler(unsigned int)+0x1ac>
c000a8e5:	fb                   	sti    
c000a8e6:	66 90                	xchg   ax,ax
c000a8e8:	5b                   	pop    ebx
c000a8e9:	5e                   	pop    esi
c000a8ea:	5f                   	pop    edi
c000a8eb:	c3                   	ret    

c000a8ec <VCache::VCache(PhysicalDisk*)>:
c000a8ec:	53                   	push   ebx
c000a8ed:	83 ec 18             	sub    esp,0x18
c000a8f0:	ba 48 20 02 c0       	mov    edx,0xc0022048
c000a8f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f9:	89 10                	mov    DWORD PTR [eax],edx
c000a8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ff:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a915:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a91c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a927:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a92e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a939:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a944:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a94c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a953:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a966:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a96a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a96e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a976:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a97d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a985:	83 ec 0c             	sub    esp,0xc
c000a988:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a98c:	e8 0f 40 00 00       	call   c000e9a0 <malloc>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 c3                	mov    ebx,eax
c000a996:	83 ec 0c             	sub    esp,0xc
c000a999:	53                   	push   ebx
c000a99a:	e8 2d 43 00 00       	call   c000eccc <Mutex::Mutex()>
c000a99f:	83 c4 10             	add    esp,0x10
c000a9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a9a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a9b1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9b8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a9bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9c3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9d4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9e0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9e4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9e7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9fc:	05 00 01 00 00       	add    eax,0x100
c000aa01:	c1 e0 04             	shl    eax,0x4
c000aa04:	83 ec 0c             	sub    esp,0xc
c000aa07:	50                   	push   eax
c000aa08:	e8 93 3f 00 00       	call   c000e9a0 <malloc>
c000aa0d:	83 c4 10             	add    esp,0x10
c000aa10:	89 c2                	mov    edx,eax
c000aa12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa16:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000aa19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa1d:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000aa24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa28:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000aa2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa30:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa36:	89 d0                	mov    eax,edx
c000aa38:	c1 e0 02             	shl    eax,0x2
c000aa3b:	01 d0                	add    eax,edx
c000aa3d:	c1 e0 04             	shl    eax,0x4
c000aa40:	83 ec 0c             	sub    esp,0xc
c000aa43:	50                   	push   eax
c000aa44:	e8 57 3f 00 00       	call   c000e9a0 <malloc>
c000aa49:	83 c4 10             	add    esp,0x10
c000aa4c:	89 c2                	mov    edx,eax
c000aa4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa52:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa55:	90                   	nop
c000aa56:	83 c4 18             	add    esp,0x18
c000aa59:	5b                   	pop    ebx
c000aa5a:	c3                   	ret    
c000aa5b:	90                   	nop

c000aa5c <VCache::invalidateReadBuffer()>:
c000aa5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa60:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa66:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa6a:	c3                   	ret    
c000aa6b:	90                   	nop

c000aa6c <VCache::writeWriteBuffer()>:
c000aa6c:	53                   	push   ebx
c000aa6d:	83 ec 08             	sub    esp,0x8
c000aa70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa74:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa78:	74 1e                	je     c000aa98 <VCache::writeWriteBuffer()+0x2c>
c000aa7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa7d:	83 ec 0c             	sub    esp,0xc
c000aa80:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa82:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa85:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa88:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa8b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa8e:	50                   	push   eax
c000aa8f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa92:	83 c4 20             	add    esp,0x20
c000aa95:	8d 76 00             	lea    esi,[esi+0x0]
c000aa98:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa9f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aaa6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aaaa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aab1:	83 c4 08             	add    esp,0x8
c000aab4:	5b                   	pop    ebx
c000aab5:	c3                   	ret    
c000aab6:	66 90                	xchg   ax,ax

c000aab8 <VCache::~VCache()>:
c000aab8:	83 ec 0c             	sub    esp,0xc
c000aabb:	ba 48 20 02 c0       	mov    edx,0xc0022048
c000aac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac4:	89 10                	mov    DWORD PTR [eax],edx
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aacd:	0f b6 c0             	movzx  eax,al
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 10                	je     c000aae4 <VCache::~VCache()+0x2c>
c000aad4:	83 ec 0c             	sub    esp,0xc
c000aad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aadb:	e8 8c ff ff ff       	call   c000aa6c <VCache::writeWriteBuffer()>
c000aae0:	83 c4 10             	add    esp,0x10
c000aae3:	90                   	nop
c000aae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aaeb:	83 ec 0c             	sub    esp,0xc
c000aaee:	50                   	push   eax
c000aaef:	e8 bc 3e 00 00       	call   c000e9b0 <free>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aafe:	83 ec 0c             	sub    esp,0xc
c000ab01:	50                   	push   eax
c000ab02:	e8 a9 3e 00 00       	call   c000e9b0 <free>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	90                   	nop
c000ab0b:	83 c4 0c             	add    esp,0xc
c000ab0e:	c3                   	ret    
c000ab0f:	90                   	nop

c000ab10 <VCache::~VCache()>:
c000ab10:	83 ec 0c             	sub    esp,0xc
c000ab13:	83 ec 0c             	sub    esp,0xc
c000ab16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab1a:	e8 99 ff ff ff       	call   c000aab8 <VCache::~VCache()>
c000ab1f:	83 c4 10             	add    esp,0x10
c000ab22:	83 ec 08             	sub    esp,0x8
c000ab25:	6a 44                	push   0x44
c000ab27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2b:	e8 7b 1b 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	83 c4 0c             	add    esp,0xc
c000ab36:	c3                   	ret    
c000ab37:	90                   	nop

c000ab38 <VCache::write(unsigned long long, int, void*)>:
c000ab38:	55                   	push   ebp
c000ab39:	57                   	push   edi
c000ab3a:	56                   	push   esi
c000ab3b:	53                   	push   ebx
c000ab3c:	83 ec 1c             	sub    esp,0x1c
c000ab3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab43:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab47:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab4b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ab4f:	e8 48 a9 00 00       	call   c001549c <KeDisablePreemption()>
c000ab54:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab58:	74 0e                	je     c000ab68 <VCache::write(unsigned long long, int, void*)+0x30>
c000ab5a:	83 ec 0c             	sub    esp,0xc
c000ab5d:	53                   	push   ebx
c000ab5e:	e8 f9 fe ff ff       	call   c000aa5c <VCache::invalidateReadBuffer()>
c000ab63:	83 c4 10             	add    esp,0x10
c000ab66:	66 90                	xchg   ax,ax
c000ab68:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab6c:	74 5e                	je     c000abcc <VCache::write(unsigned long long, int, void*)+0x94>
c000ab6e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab75:	99                   	cdq    
c000ab76:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab79:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab7c:	89 c1                	mov    ecx,eax
c000ab7e:	31 f1                	xor    ecx,esi
c000ab80:	89 d0                	mov    eax,edx
c000ab82:	31 f8                	xor    eax,edi
c000ab84:	09 c1                	or     ecx,eax
c000ab86:	75 38                	jne    c000abc0 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab88:	83 fd 01             	cmp    ebp,0x1
c000ab8b:	75 33                	jne    c000abc0 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab90:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab94:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab98:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab9e:	0f af f9             	imul   edi,ecx
c000aba1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000aba4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aba6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000aba9:	40                   	inc    eax
c000abaa:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000abad:	83 f8 50             	cmp    eax,0x50
c000abb0:	75 72                	jne    c000ac24 <VCache::write(unsigned long long, int, void*)+0xec>
c000abb2:	83 ec 0c             	sub    esp,0xc
c000abb5:	53                   	push   ebx
c000abb6:	e8 b1 fe ff ff       	call   c000aa6c <VCache::writeWriteBuffer()>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	eb 64                	jmp    c000ac24 <VCache::write(unsigned long long, int, void*)+0xec>
c000abc0:	83 ec 0c             	sub    esp,0xc
c000abc3:	53                   	push   ebx
c000abc4:	e8 a3 fe ff ff       	call   c000aa6c <VCache::writeWriteBuffer()>
c000abc9:	83 c4 10             	add    esp,0x10
c000abcc:	83 fd 4f             	cmp    ebp,0x4f
c000abcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000abd2:	7f 20                	jg     c000abf4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000abd4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000abd7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abdb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abde:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abe1:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000abe4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abe8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abf0:	eb 32                	jmp    c000ac24 <VCache::write(unsigned long long, int, void*)+0xec>
c000abf2:	66 90                	xchg   ax,ax
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abf9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abfd:	55                   	push   ebp
c000abfe:	57                   	push   edi
c000abff:	56                   	push   esi
c000ac00:	50                   	push   eax
c000ac01:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac04:	83 c4 20             	add    esp,0x20
c000ac07:	89 c3                	mov    ebx,eax
c000ac09:	e8 b6 a8 00 00       	call   c00154c4 <KeRestorePreemption()>
c000ac0e:	85 db                	test   ebx,ebx
c000ac10:	74 1a                	je     c000ac2c <VCache::write(unsigned long long, int, void*)+0xf4>
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	68 00 20 02 c0       	push   0xc0022000
c000ac1a:	e8 2f c3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ac1f:	83 c4 10             	add    esp,0x10
c000ac22:	eb 08                	jmp    c000ac2c <VCache::write(unsigned long long, int, void*)+0xf4>
c000ac24:	e8 9b a8 00 00       	call   c00154c4 <KeRestorePreemption()>
c000ac29:	31 db                	xor    ebx,ebx
c000ac2b:	90                   	nop
c000ac2c:	83 c4 1c             	add    esp,0x1c
c000ac2f:	89 d8                	mov    eax,ebx
c000ac31:	5b                   	pop    ebx
c000ac32:	5e                   	pop    esi
c000ac33:	5f                   	pop    edi
c000ac34:	5d                   	pop    ebp
c000ac35:	c3                   	ret    

c000ac36 <VCache::read(unsigned long long, int, void*)>:
c000ac36:	55                   	push   ebp
c000ac37:	57                   	push   edi
c000ac38:	56                   	push   esi
c000ac39:	53                   	push   ebx
c000ac3a:	83 ec 1c             	sub    esp,0x1c
c000ac3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac45:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ac49:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ac4d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ac51:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac58:	e8 3f a8 00 00       	call   c001549c <KeDisablePreemption()>
c000ac5d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac61:	74 0d                	je     c000ac70 <VCache::read(unsigned long long, int, void*)+0x3a>
c000ac63:	83 ec 0c             	sub    esp,0xc
c000ac66:	53                   	push   ebx
c000ac67:	e8 00 fe ff ff       	call   c000aa6c <VCache::writeWriteBuffer()>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 fe 01             	cmp    esi,0x1
c000ac73:	0f 85 a7 00 00 00    	jne    c000ad20 <VCache::read(unsigned long long, int, void*)+0xea>
c000ac79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac7c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac83:	0f 85 97 00 00 00    	jne    c000ad20 <VCache::read(unsigned long long, int, void*)+0xea>
c000ac89:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ac8c:	89 d1                	mov    ecx,edx
c000ac8e:	f7 d9                	neg    ecx
c000ac90:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac94:	89 cf                	mov    edi,ecx
c000ac96:	23 0c 24             	and    ecx,DWORD PTR [esp]
c000ac99:	c1 ff 1f             	sar    edi,0x1f
c000ac9c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000aca0:	89 ce                	mov    esi,ecx
c000aca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aca6:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000acaa:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000acae:	89 cf                	mov    edi,ecx
c000acb0:	74 0a                	je     c000acbc <VCache::read(unsigned long long, int, void*)+0x86>
c000acb2:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000acb5:	75 05                	jne    c000acbc <VCache::read(unsigned long long, int, void*)+0x86>
c000acb7:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000acba:	74 3c                	je     c000acf8 <VCache::read(unsigned long long, int, void*)+0xc2>
c000acbc:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000acbf:	83 ec 0c             	sub    esp,0xc
c000acc2:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000acc6:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c000acc9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000accb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acce:	52                   	push   edx
c000accf:	57                   	push   edi
c000acd0:	56                   	push   esi
c000acd1:	50                   	push   eax
c000acd2:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acd5:	83 c4 20             	add    esp,0x20
c000acd8:	85 c0                	test   eax,eax
c000acda:	89 c6                	mov    esi,eax
c000acdc:	74 1a                	je     c000acf8 <VCache::read(unsigned long long, int, void*)+0xc2>
c000acde:	83 ec 0c             	sub    esp,0xc
c000ace1:	68 18 20 02 c0       	push   0xc0022018
c000ace6:	e8 63 c2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000aceb:	e8 d4 a7 00 00       	call   c00154c4 <KeRestorePreemption()>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	eb 53                	jmp    c000ad48 <VCache::read(unsigned long long, int, void*)+0x112>
c000acf5:	8d 76 00             	lea    esi,[esi+0x0]
c000acf8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acfb:	89 ef                	mov    edi,ebp
c000acfd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ad03:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad06:	8d 70 ff             	lea    esi,[eax-0x1]
c000ad09:	23 34 24             	and    esi,DWORD PTR [esp]
c000ad0c:	0f af f1             	imul   esi,ecx
c000ad0f:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ad12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad14:	e8 ab a7 00 00       	call   c00154c4 <KeRestorePreemption()>
c000ad19:	31 f6                	xor    esi,esi
c000ad1b:	eb 2b                	jmp    c000ad48 <VCache::read(unsigned long long, int, void*)+0x112>
c000ad1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad20:	83 ec 0c             	sub    esp,0xc
c000ad23:	53                   	push   ebx
c000ad24:	e8 33 fd ff ff       	call   c000aa5c <VCache::invalidateReadBuffer()>
c000ad29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ad2c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad2e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ad31:	56                   	push   esi
c000ad32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad3a:	50                   	push   eax
c000ad3b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ad3e:	83 c4 20             	add    esp,0x20
c000ad41:	89 c6                	mov    esi,eax
c000ad43:	e8 7c a7 00 00       	call   c00154c4 <KeRestorePreemption()>
c000ad48:	83 c4 1c             	add    esp,0x1c
c000ad4b:	89 f0                	mov    eax,esi
c000ad4d:	5b                   	pop    ebx
c000ad4e:	5e                   	pop    esi
c000ad4f:	5f                   	pop    edi
c000ad50:	5d                   	pop    ebp
c000ad51:	c3                   	ret    

c000ad52 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad52:	55                   	push   ebp
c000ad53:	57                   	push   edi
c000ad54:	56                   	push   esi
c000ad55:	53                   	push   ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad61:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad65:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad71:	01 df                	add    edi,ebx
c000ad73:	39 fb                	cmp    ebx,edi
c000ad75:	7d 1f                	jge    c000ad96 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad77:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad7b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad7f:	7d 12                	jge    c000ad93 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad81:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad87:	53                   	push   ebx
c000ad88:	55                   	push   ebp
c000ad89:	45                   	inc    ebp
c000ad8a:	56                   	push   esi
c000ad8b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad8e:	83 c4 10             	add    esp,0x10
c000ad91:	eb e8                	jmp    c000ad7b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad93:	43                   	inc    ebx
c000ad94:	eb dd                	jmp    c000ad73 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad96:	83 c4 1c             	add    esp,0x1c
c000ad99:	5b                   	pop    ebx
c000ad9a:	5e                   	pop    esi
c000ad9b:	5f                   	pop    edi
c000ad9c:	5d                   	pop    ebp
c000ad9d:	c3                   	ret    

c000ad9e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad9e:	55                   	push   ebp
c000ad9f:	57                   	push   edi
c000ada0:	31 ff                	xor    edi,edi
c000ada2:	56                   	push   esi
c000ada3:	53                   	push   ebx
c000ada4:	83 ec 1c             	sub    esp,0x1c
c000ada7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000adab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000adaf:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000adb6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000adbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000adc3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000adc7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000adca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000adce:	01 f9                	add    ecx,edi
c000add0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000add4:	7d 2f                	jge    c000ae05 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000add6:	31 f6                	xor    esi,esi
c000add8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000addc:	01 f2                	add    edx,esi
c000adde:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ade2:	7d 1a                	jge    c000adfe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ade4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ade7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000adea:	46                   	inc    esi
c000adeb:	51                   	push   ecx
c000adec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000adf0:	52                   	push   edx
c000adf1:	55                   	push   ebp
c000adf2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adfc:	eb da                	jmp    c000add8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adfe:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ae02:	47                   	inc    edi
c000ae03:	eb c5                	jmp    c000adca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ae05:	83 c4 1c             	add    esp,0x1c
c000ae08:	5b                   	pop    ebx
c000ae09:	5e                   	pop    esi
c000ae0a:	5f                   	pop    edi
c000ae0b:	5d                   	pop    ebp
c000ae0c:	c3                   	ret    
c000ae0d:	90                   	nop

c000ae0e <Video::blit(unsigned int*, int, int, int, int)>:
c000ae0e:	55                   	push   ebp
c000ae0f:	ba 00 00 00 00       	mov    edx,0x0
c000ae14:	57                   	push   edi
c000ae15:	56                   	push   esi
c000ae16:	53                   	push   ebx
c000ae17:	83 ec 1c             	sub    esp,0x1c
c000ae1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae1e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ae22:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae26:	85 c0                	test   eax,eax
c000ae28:	0f 49 d0             	cmovns edx,eax
c000ae2b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ae32:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ae36:	89 eb                	mov    ebx,ebp
c000ae38:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ae3c:	01 ea                	add    edx,ebp
c000ae3e:	39 da                	cmp    edx,ebx
c000ae40:	7e 54                	jle    c000ae96 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ae42:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae48:	7c 4c                	jl     c000ae96 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ae4a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ae4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae52:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae56:	01 c1                	add    ecx,eax
c000ae58:	39 f9                	cmp    ecx,edi
c000ae5a:	7e 2f                	jle    c000ae8b <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ae5c:	83 c2 04             	add    edx,0x4
c000ae5f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae65:	7c 21                	jl     c000ae88 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ae67:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ae6b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae6d:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ae70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ae74:	55                   	push   ebp
c000ae75:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae79:	56                   	push   esi
c000ae7a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae7d:	83 c4 10             	add    esp,0x10
c000ae80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae88:	47                   	inc    edi
c000ae89:	eb c7                	jmp    c000ae52 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ae8b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ae8f:	43                   	inc    ebx
c000ae90:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ae94:	eb a2                	jmp    c000ae38 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ae96:	83 c4 1c             	add    esp,0x1c
c000ae99:	5b                   	pop    ebx
c000ae9a:	5e                   	pop    esi
c000ae9b:	5f                   	pop    edi
c000ae9c:	5d                   	pop    ebp
c000ae9d:	c3                   	ret    

c000ae9e <Video::clearScreen(unsigned int)>:
c000ae9e:	57                   	push   edi
c000ae9f:	56                   	push   esi
c000aea0:	53                   	push   ebx
c000aea1:	31 db                	xor    ebx,ebx
c000aea3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aea7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000aead:	7e 1f                	jle    c000aece <Video::clearScreen(unsigned int)+0x30>
c000aeaf:	31 ff                	xor    edi,edi
c000aeb1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000aeb7:	7e 12                	jle    c000aecb <Video::clearScreen(unsigned int)+0x2d>
c000aeb9:	8b 06                	mov    eax,DWORD PTR [esi]
c000aebb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebf:	53                   	push   ebx
c000aec0:	57                   	push   edi
c000aec1:	47                   	inc    edi
c000aec2:	56                   	push   esi
c000aec3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000aec6:	83 c4 10             	add    esp,0x10
c000aec9:	eb e6                	jmp    c000aeb1 <Video::clearScreen(unsigned int)+0x13>
c000aecb:	43                   	inc    ebx
c000aecc:	eb d9                	jmp    c000aea7 <Video::clearScreen(unsigned int)+0x9>
c000aece:	5b                   	pop    ebx
c000aecf:	5e                   	pop    esi
c000aed0:	5f                   	pop    edi
c000aed1:	c3                   	ret    

c000aed2 <Video::putpixel(int, int, unsigned int)>:
c000aed2:	c7 44 24 04 50 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022050
c000aeda:	e9 07 3e 00 00       	jmp    c000ece6 <KePanic(char const*)>
c000aedf:	90                   	nop

c000aee0 <Video::readPixelApprox(int, int)>:
c000aee0:	83 ec 18             	sub    esp,0x18
c000aee3:	68 71 20 02 c0       	push   0xc0022071
c000aee8:	e8 f9 3d 00 00       	call   c000ece6 <KePanic(char const*)>
c000aeed:	31 c0                	xor    eax,eax
c000aeef:	83 c4 1c             	add    esp,0x1c
c000aef2:	c3                   	ret    
c000aef3:	90                   	nop

c000aef4 <Video::Video(char const*)>:
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefb:	83 ec 08             	sub    esp,0x8
c000aefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af02:	50                   	push   eax
c000af03:	e8 c0 e2 ff ff       	call   c00091c8 <Device::Device(char const*)>
c000af08:	83 c4 10             	add    esp,0x10
c000af0b:	ba 14 21 02 c0       	mov    edx,0xc0022114
c000af10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af14:	89 10                	mov    DWORD PTR [eax],edx
c000af16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000af24:	90                   	nop
c000af25:	83 c4 0c             	add    esp,0xc
c000af28:	c3                   	ret    
c000af29:	90                   	nop

c000af2a <Video::~Video()>:
c000af2a:	83 ec 0c             	sub    esp,0xc
c000af2d:	ba 14 21 02 c0       	mov    edx,0xc0022114
c000af32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af36:	89 10                	mov    DWORD PTR [eax],edx
c000af38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3c:	83 ec 0c             	sub    esp,0xc
c000af3f:	50                   	push   eax
c000af40:	e8 23 e0 ff ff       	call   c0008f68 <Device::~Device()>
c000af45:	83 c4 10             	add    esp,0x10
c000af48:	90                   	nop
c000af49:	83 c4 0c             	add    esp,0xc
c000af4c:	c3                   	ret    
c000af4d:	90                   	nop

c000af4e <Video::~Video()>:
c000af4e:	83 ec 0c             	sub    esp,0xc
c000af51:	83 ec 0c             	sub    esp,0xc
c000af54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af58:	e8 cd ff ff ff       	call   c000af2a <Video::~Video()>
c000af5d:	83 c4 10             	add    esp,0x10
c000af60:	83 ec 08             	sub    esp,0x8
c000af63:	68 64 01 00 00       	push   0x164
c000af68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af6c:	e8 3a 17 00 00       	call   c000c6ab <operator delete(void*, unsigned long)>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	83 c4 0c             	add    esp,0xc
c000af77:	c3                   	ret    

c000af78 <Video::isMonochrome()>:
c000af78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af7c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af82:	c3                   	ret    
c000af83:	90                   	nop

c000af84 <Video::getWidth()>:
c000af84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af8e:	c3                   	ret    
c000af8f:	90                   	nop

c000af90 <Video::getHeight()>:
c000af90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af94:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af9a:	c3                   	ret    
c000af9b:	90                   	nop

c000af9c <Video::drawCursor(int, int, unsigned int*, int)>:
c000af9c:	55                   	push   ebp
c000af9d:	57                   	push   edi
c000af9e:	56                   	push   esi
c000af9f:	53                   	push   ebx
c000afa0:	83 ec 2c             	sub    esp,0x2c
c000afa3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000afa7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000afab:	83 f8 01             	cmp    eax,0x1
c000afae:	19 c9                	sbb    ecx,ecx
c000afb0:	31 db                	xor    ebx,ebx
c000afb2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afb6:	89 ce                	mov    esi,ecx
c000afb8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000afc0:	f7 d6                	not    esi
c000afc2:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000afc8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000afcc:	01 d8                	add    eax,ebx
c000afce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afd2:	57                   	push   edi
c000afd3:	e8 b8 ff ff ff       	call   c000af90 <Video::getHeight()>
c000afd8:	59                   	pop    ecx
c000afd9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000afdd:	7e 70                	jle    c000b04f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000afdf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afe3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000afe7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000afea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000afee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000aff2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000aff9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000affd:	89 e8                	mov    eax,ebp
c000afff:	83 c0 20             	add    eax,0x20
c000b002:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b006:	57                   	push   edi
c000b007:	e8 78 ff ff ff       	call   c000af84 <Video::getWidth()>
c000b00c:	5a                   	pop    edx
c000b00d:	39 c5                	cmp    ebp,eax
c000b00f:	7d 34                	jge    c000b045 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000b011:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b016:	74 05                	je     c000b01d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b018:	8b 07                	mov    eax,DWORD PTR [edi]
c000b01a:	56                   	push   esi
c000b01b:	eb 0d                	jmp    c000b02a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b01d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b022:	74 12                	je     c000b036 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b024:	8b 07                	mov    eax,DWORD PTR [edi]
c000b026:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b02a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b02e:	55                   	push   ebp
c000b02f:	57                   	push   edi
c000b030:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b03a:	45                   	inc    ebp
c000b03b:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b03f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000b043:	75 c1                	jne    c000b006 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b045:	43                   	inc    ebx
c000b046:	83 fb 20             	cmp    ebx,0x20
c000b049:	0f 85 79 ff ff ff    	jne    c000afc8 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b04f:	83 c4 2c             	add    esp,0x2c
c000b052:	5b                   	pop    ebx
c000b053:	5e                   	pop    esi
c000b054:	5f                   	pop    edi
c000b055:	5d                   	pop    ebp
c000b056:	c3                   	ret    
c000b057:	90                   	nop

c000b058 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b058:	55                   	push   ebp
c000b059:	57                   	push   edi
c000b05a:	56                   	push   esi
c000b05b:	53                   	push   ebx
c000b05c:	83 ec 48             	sub    esp,0x48
c000b05f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b063:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b067:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b06b:	c1 e0 08             	shl    eax,0x8
c000b06e:	01 d0                	add    eax,edx
c000b070:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b074:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b078:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b07c:	c1 e0 08             	shl    eax,0x8
c000b07f:	01 d0                	add    eax,edx
c000b081:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b089:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b08e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b092:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b096:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b09d:	50                   	push   eax
c000b09e:	e8 fd 38 00 00       	call   c000e9a0 <malloc>
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	85 c0                	test   eax,eax
c000b0a8:	89 c5                	mov    ebp,eax
c000b0aa:	75 10                	jne    c000b0bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	68 9c 20 02 c0       	push   0xc002209c
c000b0b4:	e8 2d 3c 00 00       	call   c000ece6 <KePanic(char const*)>
c000b0b9:	83 c4 10             	add    esp,0x10
c000b0bc:	52                   	push   edx
c000b0bd:	bf 12 00 00 00       	mov    edi,0x12
c000b0c2:	52                   	push   edx
c000b0c3:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b0c7:	50                   	push   eax
c000b0c8:	68 ac 20 02 c0       	push   0xc00220ac
c000b0cd:	e8 7c be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0d2:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b0d5:	83 e0 20             	and    eax,0x20
c000b0d8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b0dc:	85 c0                	test   eax,eax
c000b0de:	59                   	pop    ecx
c000b0df:	0f 94 c0             	sete   al
c000b0e2:	0f b6 c0             	movzx  eax,al
c000b0e5:	5e                   	pop    esi
c000b0e6:	50                   	push   eax
c000b0e7:	68 b6 20 02 c0       	push   0xc00220b6
c000b0ec:	e8 5d be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0f1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b0f5:	83 c4 10             	add    esp,0x10
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	89 c2                	mov    edx,eax
c000b0fc:	74 11                	je     c000b10f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b0fe:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b102:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b106:	c1 ff 03             	sar    edi,0x3
c000b109:	0f af f9             	imul   edi,ecx
c000b10c:	83 c7 12             	add    edi,0x12
c000b10f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b114:	74 07                	je     c000b11d <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b116:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b11b:	75 12                	jne    c000b12f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b11d:	83 ec 0c             	sub    esp,0xc
c000b120:	68 c4 20 02 c0       	push   0xc00220c4
c000b125:	e8 24 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b12a:	e9 aa 02 00 00       	jmp    c000b3d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b12f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b133:	83 f9 02             	cmp    ecx,0x2
c000b136:	74 0e                	je     c000b146 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b138:	83 f9 0a             	cmp    ecx,0xa
c000b13b:	0f 84 d1 00 00 00    	je     c000b212 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b141:	e9 7e 02 00 00       	jmp    c000b3c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b146:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b14b:	75 0e                	jne    c000b15b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b14d:	84 d2                	test   dl,dl
c000b14f:	75 0a                	jne    c000b15b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b151:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b154:	83 e8 18             	sub    eax,0x18
c000b157:	a8 f7                	test   al,0xf7
c000b159:	74 0d                	je     c000b168 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b15b:	83 ec 0c             	sub    esp,0xc
c000b15e:	68 d9 20 02 c0       	push   0xc00220d9
c000b163:	e9 64 02 00 00       	jmp    c000b3cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b168:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b170:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b175:	31 c0                	xor    eax,eax
c000b177:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b17b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b183:	89 c6                	mov    esi,eax
c000b185:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b18a:	75 15                	jne    c000b1a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b18c:	99                   	cdq    
c000b18d:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b191:	85 d2                	test   edx,edx
c000b193:	75 0c                	jne    c000b1a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b195:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b199:	29 c6                	sub    esi,eax
c000b19b:	4e                   	dec    esi
c000b19c:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b1a1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b1a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b1ad:	75 0c                	jne    c000b1bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b1af:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b1b4:	c1 e2 18             	shl    edx,0x18
c000b1b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b1bb:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b1c0:	8d 46 01             	lea    eax,[esi+0x1]
c000b1c3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b1c7:	c1 e1 10             	shl    ecx,0x10
c000b1ca:	89 ca                	mov    edx,ecx
c000b1cc:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b1d1:	c1 e1 08             	shl    ecx,0x8
c000b1d4:	09 d1                	or     ecx,edx
c000b1d6:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b1da:	09 d1                	or     ecx,edx
c000b1dc:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b1e0:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b1e4:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b1e8:	c1 fa 03             	sar    edx,0x3
c000b1eb:	01 d7                	add    edi,edx
c000b1ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f1:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b1f5:	7e 04                	jle    c000b1fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b1f7:	89 c6                	mov    esi,eax
c000b1f9:	eb 8a                	jmp    c000b185 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b1fb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b1ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b203:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b207:	0f 8f 6e ff ff ff    	jg     c000b17b <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b20d:	e9 ce 01 00 00       	jmp    c000b3e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b212:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b217:	75 0e                	jne    c000b227 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b219:	85 c0                	test   eax,eax
c000b21b:	75 0a                	jne    c000b227 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b21d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b220:	83 e8 18             	sub    eax,0x18
c000b223:	a8 f7                	test   al,0xf7
c000b225:	74 0d                	je     c000b234 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b227:	83 ec 0c             	sub    esp,0xc
c000b22a:	68 e7 20 02 c0       	push   0xc00220e7
c000b22f:	e9 98 01 00 00       	jmp    c000b3cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b234:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b23c:	31 c9                	xor    ecx,ecx
c000b23e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b246:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b24a:	0f 8d 90 01 00 00    	jge    c000b3e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b250:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b254:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b258:	0f 8e 82 01 00 00    	jle    c000b3e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b25e:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b262:	8d 77 01             	lea    esi,[edi+0x1]
c000b265:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b269:	83 fa 7f             	cmp    edx,0x7f
c000b26c:	89 d0                	mov    eax,edx
c000b26e:	0f 8e a3 00 00 00    	jle    c000b317 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b274:	83 e0 7f             	and    eax,0x7f
c000b277:	31 d2                	xor    edx,edx
c000b279:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b27d:	40                   	inc    eax
c000b27e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b282:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b286:	75 08                	jne    c000b290 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b288:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b28d:	c1 e2 18             	shl    edx,0x18
c000b290:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b295:	c1 e0 10             	shl    eax,0x10
c000b298:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b29c:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b2a1:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b2a5:	c1 e0 08             	shl    eax,0x8
c000b2a8:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b2ac:	09 f8                	or     eax,edi
c000b2ae:	31 ff                	xor    edi,edi
c000b2b0:	09 d0                	or     eax,edx
c000b2b2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b2b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b2bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2bf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b2c4:	75 1d                	jne    c000b2e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b2c6:	89 c8                	mov    eax,ecx
c000b2c8:	99                   	cdq    
c000b2c9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2cd:	85 d2                	test   edx,edx
c000b2cf:	75 12                	jne    c000b2e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b2d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2d5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b2d9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b2dd:	49                   	dec    ecx
c000b2de:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b2e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2e7:	8d 51 01             	lea    edx,[ecx+0x1]
c000b2ea:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b2ee:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b2f2:	8d 47 01             	lea    eax,[edi+0x1]
c000b2f5:	7e 06                	jle    c000b2fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b2f7:	89 c7                	mov    edi,eax
c000b2f9:	89 d1                	mov    ecx,edx
c000b2fb:	eb c2                	jmp    c000b2bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b2fd:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b301:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b305:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b309:	c1 f8 03             	sar    eax,0x3
c000b30c:	01 c6                	add    esi,eax
c000b30e:	89 d1                	mov    ecx,edx
c000b310:	89 f7                	mov    edi,esi
c000b312:	e9 2f ff ff ff       	jmp    c000b246 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b317:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b31f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b323:	40                   	inc    eax
c000b324:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b328:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b32d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b331:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b336:	75 1d                	jne    c000b355 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b338:	89 c8                	mov    eax,ecx
c000b33a:	99                   	cdq    
c000b33b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b33f:	85 d2                	test   edx,edx
c000b341:	75 12                	jne    c000b355 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b343:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b347:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b34b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b34f:	49                   	dec    ecx
c000b350:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b355:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b359:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b361:	75 0c                	jne    c000b36f <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b363:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b368:	c1 e7 18             	shl    edi,0x18
c000b36b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b36f:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b374:	8d 51 01             	lea    edx,[ecx+0x1]
c000b377:	c1 e0 10             	shl    eax,0x10
c000b37a:	89 c7                	mov    edi,eax
c000b37c:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b381:	c1 e0 08             	shl    eax,0x8
c000b384:	09 f8                	or     eax,edi
c000b386:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b38a:	09 f8                	or     eax,edi
c000b38c:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b390:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b394:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b398:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b39c:	c1 f8 03             	sar    eax,0x3
c000b39f:	01 c6                	add    esi,eax
c000b3a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3a5:	40                   	inc    eax
c000b3a6:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b3aa:	7e 0b                	jle    c000b3b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b3ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3b0:	89 d1                	mov    ecx,edx
c000b3b2:	e9 7a ff ff ff       	jmp    c000b331 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b3b7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b3bb:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b3bf:	e9 4a ff ff ff       	jmp    c000b30e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b3c4:	50                   	push   eax
c000b3c5:	50                   	push   eax
c000b3c6:	51                   	push   ecx
c000b3c7:	68 f6 20 02 c0       	push   0xc00220f6
c000b3cc:	e8 7d bb ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b3d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b3d4:	e8 d7 35 00 00       	call   c000e9b0 <free>
c000b3d9:	83 c4 10             	add    esp,0x10
c000b3dc:	31 ed                	xor    ebp,ebp
c000b3de:	eb 14                	jmp    c000b3f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b3e0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b3e4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b3e8:	89 18                	mov    DWORD PTR [eax],ebx
c000b3ea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b3ee:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b3f2:	89 18                	mov    DWORD PTR [eax],ebx
c000b3f4:	83 c4 3c             	add    esp,0x3c
c000b3f7:	89 e8                	mov    eax,ebp
c000b3f9:	5b                   	pop    ebx
c000b3fa:	5e                   	pop    esi
c000b3fb:	5f                   	pop    edi
c000b3fc:	5d                   	pop    ebp
c000b3fd:	c3                   	ret    

c000b3fe <Video::putTGA(int, int, unsigned char*, int)>:
c000b3fe:	55                   	push   ebp
c000b3ff:	57                   	push   edi
c000b400:	56                   	push   esi
c000b401:	53                   	push   ebx
c000b402:	83 ec 28             	sub    esp,0x28
c000b405:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b409:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b40d:	50                   	push   eax
c000b40e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b412:	50                   	push   eax
c000b413:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b417:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b41b:	55                   	push   ebp
c000b41c:	e8 37 fc ff ff       	call   c000b058 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b421:	83 c4 20             	add    esp,0x20
c000b424:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b428:	85 c0                	test   eax,eax
c000b42a:	74 3b                	je     c000b467 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b42c:	89 c6                	mov    esi,eax
c000b42e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b432:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b436:	39 d8                	cmp    eax,ebx
c000b438:	7e 2d                	jle    c000b467 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b43a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b43e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b442:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b446:	39 f8                	cmp    eax,edi
c000b448:	7e 1a                	jle    c000b464 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b44a:	83 c6 04             	add    esi,0x4
c000b44d:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b450:	85 c0                	test   eax,eax
c000b452:	79 0d                	jns    c000b461 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b454:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b457:	50                   	push   eax
c000b458:	53                   	push   ebx
c000b459:	57                   	push   edi
c000b45a:	55                   	push   ebp
c000b45b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b45e:	83 c4 10             	add    esp,0x10
c000b461:	47                   	inc    edi
c000b462:	eb da                	jmp    c000b43e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b464:	43                   	inc    ebx
c000b465:	eb c7                	jmp    c000b42e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b467:	83 c4 1c             	add    esp,0x1c
c000b46a:	5b                   	pop    ebx
c000b46b:	5e                   	pop    esi
c000b46c:	5f                   	pop    edi
c000b46d:	5d                   	pop    ebp
c000b46e:	c3                   	ret    
c000b46f:	90                   	nop

c000b470 <ACPI::close(int, int, void*)>:
c000b470:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b475:	c3                   	ret    
c000b476:	66 90                	xchg   ax,ax

c000b478 <loadACPITables(unsigned char*)>:
c000b478:	57                   	push   edi
c000b479:	56                   	push   esi
c000b47a:	53                   	push   ebx
c000b47b:	83 ec 60             	sub    esp,0x60
c000b47e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b483:	0f 84 43 02 00 00    	je     c000b6cc <loadACPITables(unsigned char*)+0x254>
c000b489:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b48e:	0f b6 c0             	movzx  eax,al
c000b491:	85 c0                	test   eax,eax
c000b493:	74 7b                	je     c000b510 <loadACPITables(unsigned char*)+0x98>
c000b495:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b499:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b49d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b4a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4a4:	83 e8 24             	sub    eax,0x24
c000b4a7:	c1 e8 03             	shr    eax,0x3
c000b4aa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b4ae:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b4b6:	66 90                	xchg   ax,ax
c000b4b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b4bc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b4c0:	0f 8d ba 00 00 00    	jge    c000b580 <loadACPITables(unsigned char*)+0x108>
c000b4c6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4ca:	83 c0 24             	add    eax,0x24
c000b4cd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b4d1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b4d5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4d9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b4dd:	c1 e0 03             	shl    eax,0x3
c000b4e0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b4e4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4e8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b4eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4ed:	89 c1                	mov    ecx,eax
c000b4ef:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b4f4:	8d 50 01             	lea    edx,[eax+0x1]
c000b4f7:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b4fd:	89 ca                	mov    edx,ecx
c000b4ff:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b506:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b50b:	eb ab                	jmp    c000b4b8 <loadACPITables(unsigned char*)+0x40>
c000b50d:	8d 76 00             	lea    esi,[esi+0x0]
c000b510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b514:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b518:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b51c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b51f:	83 e8 24             	sub    eax,0x24
c000b522:	c1 e8 02             	shr    eax,0x2
c000b525:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b529:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b531:	8d 76 00             	lea    esi,[esi+0x0]
c000b534:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b538:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b53c:	7d 42                	jge    c000b580 <loadACPITables(unsigned char*)+0x108>
c000b53e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b542:	83 c0 24             	add    eax,0x24
c000b545:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b549:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b54d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b551:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b555:	c1 e0 02             	shl    eax,0x2
c000b558:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b55c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b560:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b562:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b567:	8d 50 01             	lea    edx,[eax+0x1]
c000b56a:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b570:	89 ca                	mov    edx,ecx
c000b572:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b579:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b57e:	eb b4                	jmp    c000b534 <loadACPITables(unsigned char*)+0xbc>
c000b580:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b588:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b58d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b591:	0f 8d 39 01 00 00    	jge    c000b6d0 <loadACPITables(unsigned char*)+0x258>
c000b597:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b59b:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b5a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b5a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5b2:	25 ff 0f 00 00       	and    eax,0xfff
c000b5b7:	89 c6                	mov    esi,eax
c000b5b9:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b5bf:	83 ec 0c             	sub    esp,0xc
c000b5c2:	6a 01                	push   0x1
c000b5c4:	e8 12 6b 00 00       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c000b5c9:	83 c4 10             	add    esp,0x10
c000b5cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b5d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b5d6:	83 ec 0c             	sub    esp,0xc
c000b5d9:	6a 01                	push   0x1
c000b5db:	6a 01                	push   0x1
c000b5dd:	50                   	push   eax
c000b5de:	52                   	push   edx
c000b5df:	53                   	push   ebx
c000b5e0:	e8 c9 73 00 00       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b5e5:	83 c4 20             	add    esp,0x20
c000b5e8:	09 f0                	or     eax,esi
c000b5ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b5ee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b5f2:	c1 e0 03             	shl    eax,0x3
c000b5f5:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b5fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b602:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b606:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b60e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b612:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b616:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b61a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b61e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b622:	89 c6                	mov    esi,eax
c000b624:	89 d7                	mov    edi,edx
c000b626:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b628:	89 c8                	mov    eax,ecx
c000b62a:	89 fa                	mov    edx,edi
c000b62c:	89 f3                	mov    ebx,esi
c000b62e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b632:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b636:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b63a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b641:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b645:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b649:	05 00 10 00 00       	add    eax,0x1000
c000b64e:	c1 e8 0c             	shr    eax,0xc
c000b651:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b65d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b661:	25 ff 0f 00 00       	and    eax,0xfff
c000b666:	89 c6                	mov    esi,eax
c000b668:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b66e:	83 ec 0c             	sub    esp,0xc
c000b671:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b675:	e8 61 6a 00 00       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c000b67a:	83 c4 10             	add    esp,0x10
c000b67d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b681:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b687:	83 ec 0c             	sub    esp,0xc
c000b68a:	6a 01                	push   0x1
c000b68c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b690:	50                   	push   eax
c000b691:	52                   	push   edx
c000b692:	53                   	push   ebx
c000b693:	e8 16 73 00 00       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b698:	83 c4 20             	add    esp,0x20
c000b69b:	09 f0                	or     eax,esi
c000b69d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b6a5:	83 ec 0c             	sub    esp,0xc
c000b6a8:	50                   	push   eax
c000b6a9:	e8 2b 6d 00 00       	call   c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b6ae:	83 c4 10             	add    esp,0x10
c000b6b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b6b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6b9:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b6c0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b6c5:	e9 be fe ff ff       	jmp    c000b588 <loadACPITables(unsigned char*)+0x110>
c000b6ca:	66 90                	xchg   ax,ax
c000b6cc:	90                   	nop
c000b6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b6d0:	83 c4 60             	add    esp,0x60
c000b6d3:	5b                   	pop    ebx
c000b6d4:	5e                   	pop    esi
c000b6d5:	5f                   	pop    edi
c000b6d6:	c3                   	ret    
c000b6d7:	90                   	nop

c000b6d8 <findRSDT(unsigned char*)>:
c000b6d8:	57                   	push   edi
c000b6d9:	56                   	push   esi
c000b6da:	53                   	push   ebx
c000b6db:	83 ec 50             	sub    esp,0x50
c000b6de:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b6e3:	85 c0                	test   eax,eax
c000b6e5:	75 0d                	jne    c000b6f4 <findRSDT(unsigned char*)+0x1c>
c000b6e7:	b8 00 00 00 00       	mov    eax,0x0
c000b6ec:	e9 2b 01 00 00       	jmp    c000b81c <findRSDT(unsigned char*)+0x144>
c000b6f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6f4:	89 e0                	mov    eax,esp
c000b6f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b6fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b702:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b70a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b70e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b712:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b716:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b71a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b71e:	89 c6                	mov    esi,eax
c000b720:	89 d7                	mov    edi,edx
c000b722:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b724:	89 c8                	mov    eax,ecx
c000b726:	89 fa                	mov    edx,edi
c000b728:	89 f3                	mov    ebx,esi
c000b72a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b72e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b732:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b736:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b73a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b73e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b746:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b74a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b74e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b756:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b75a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b75e:	25 ff 0f 00 00       	and    eax,0xfff
c000b763:	89 c6                	mov    esi,eax
c000b765:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b76b:	83 ec 0c             	sub    esp,0xc
c000b76e:	6a 02                	push   0x2
c000b770:	e8 66 69 00 00       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c000b775:	83 c4 10             	add    esp,0x10
c000b778:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b77c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b782:	83 ec 0c             	sub    esp,0xc
c000b785:	6a 01                	push   0x1
c000b787:	6a 02                	push   0x2
c000b789:	50                   	push   eax
c000b78a:	52                   	push   edx
c000b78b:	53                   	push   ebx
c000b78c:	e8 1d 72 00 00       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b791:	83 c4 20             	add    esp,0x20
c000b794:	09 f0                	or     eax,esi
c000b796:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b79a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b79e:	25 ff 0f 00 00       	and    eax,0xfff
c000b7a3:	89 c6                	mov    esi,eax
c000b7a5:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b7ab:	83 ec 0c             	sub    esp,0xc
c000b7ae:	6a 02                	push   0x2
c000b7b0:	e8 26 69 00 00       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c000b7b5:	83 c4 10             	add    esp,0x10
c000b7b8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b7bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b7c2:	83 ec 0c             	sub    esp,0xc
c000b7c5:	6a 01                	push   0x1
c000b7c7:	6a 02                	push   0x2
c000b7c9:	50                   	push   eax
c000b7ca:	52                   	push   edx
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 dd 71 00 00       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	09 f0                	or     eax,esi
c000b7d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b7da:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7df:	85 c0                	test   eax,eax
c000b7e1:	75 11                	jne    c000b7f4 <findRSDT(unsigned char*)+0x11c>
c000b7e3:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b7ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b7ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7f2:	eb 24                	jmp    c000b818 <findRSDT(unsigned char*)+0x140>
c000b7f4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7f9:	83 f8 02             	cmp    eax,0x2
c000b7fc:	75 12                	jne    c000b810 <findRSDT(unsigned char*)+0x138>
c000b7fe:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b805:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b809:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b80d:	eb 09                	jmp    c000b818 <findRSDT(unsigned char*)+0x140>
c000b80f:	90                   	nop
c000b810:	b8 00 00 00 00       	mov    eax,0x0
c000b815:	eb 05                	jmp    c000b81c <findRSDT(unsigned char*)+0x144>
c000b817:	90                   	nop
c000b818:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b81c:	83 c4 50             	add    esp,0x50
c000b81f:	5b                   	pop    ebx
c000b820:	5e                   	pop    esi
c000b821:	5f                   	pop    edi
c000b822:	c3                   	ret    
c000b823:	90                   	nop

c000b824 <findDataTable(unsigned char*, char*)>:
c000b824:	83 ec 1c             	sub    esp,0x1c
c000b827:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b82c:	75 0a                	jne    c000b838 <findDataTable(unsigned char*, char*)+0x14>
c000b82e:	b8 00 00 00 00       	mov    eax,0x0
c000b833:	eb 5f                	jmp    c000b894 <findDataTable(unsigned char*, char*)+0x70>
c000b835:	8d 76 00             	lea    esi,[esi+0x0]
c000b838:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b840:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b845:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b849:	7d 41                	jge    c000b88c <findDataTable(unsigned char*, char*)+0x68>
c000b84b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b84f:	c1 e0 03             	shl    eax,0x3
c000b852:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b857:	83 ec 04             	sub    esp,0x4
c000b85a:	6a 04                	push   0x4
c000b85c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b860:	50                   	push   eax
c000b861:	e8 1a 4b ff ff       	call   c0000380 <memcmp>
c000b866:	83 c4 10             	add    esp,0x10
c000b869:	85 c0                	test   eax,eax
c000b86b:	0f 94 c0             	sete   al
c000b86e:	0f b6 c0             	movzx  eax,al
c000b871:	85 c0                	test   eax,eax
c000b873:	74 0f                	je     c000b884 <findDataTable(unsigned char*, char*)+0x60>
c000b875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b879:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b880:	eb 12                	jmp    c000b894 <findDataTable(unsigned char*, char*)+0x70>
c000b882:	66 90                	xchg   ax,ax
c000b884:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b889:	eb b5                	jmp    c000b840 <findDataTable(unsigned char*, char*)+0x1c>
c000b88b:	90                   	nop
c000b88c:	b8 00 00 00 00       	mov    eax,0x0
c000b891:	8d 76 00             	lea    esi,[esi+0x0]
c000b894:	83 c4 1c             	add    esp,0x1c
c000b897:	c3                   	ret    

c000b898 <scanMADT()>:
c000b898:	53                   	push   ebx
c000b899:	83 ec 38             	sub    esp,0x38
c000b89c:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000b8a6:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000b8b0:	e8 c9 c6 00 00       	call   c0017f7e <HalFindRSDP()>
c000b8b5:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000b8ba:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b8bf:	85 c0                	test   eax,eax
c000b8c1:	0f 84 11 04 00 00    	je     c000bcd8 <scanMADT()+0x440>
c000b8c7:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b8cc:	83 ec 0c             	sub    esp,0xc
c000b8cf:	50                   	push   eax
c000b8d0:	e8 03 fe ff ff       	call   c000b6d8 <findRSDT(unsigned char*)>
c000b8d5:	83 c4 10             	add    esp,0x10
c000b8d8:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000b8dd:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b8e2:	85 c0                	test   eax,eax
c000b8e4:	0f 84 f2 03 00 00    	je     c000bcdc <scanMADT()+0x444>
c000b8ea:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b8ef:	83 ec 0c             	sub    esp,0xc
c000b8f2:	50                   	push   eax
c000b8f3:	e8 80 fb ff ff       	call   c000b478 <loadACPITables(unsigned char*)>
c000b8f8:	83 c4 10             	add    esp,0x10
c000b8fb:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b900:	83 ec 08             	sub    esp,0x8
c000b903:	68 58 21 02 c0       	push   0xc0022158
c000b908:	50                   	push   eax
c000b909:	e8 16 ff ff ff       	call   c000b824 <findDataTable(unsigned char*, char*)>
c000b90e:	83 c4 10             	add    esp,0x10
c000b911:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b915:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b91a:	0f 84 c0 03 00 00    	je     c000bce0 <scanMADT()+0x448>
c000b920:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b928:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b92c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b92f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b933:	0f 87 af 03 00 00    	ja     c000bce8 <scanMADT()+0x450>
c000b939:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b941:	0f 87 a1 03 00 00    	ja     c000bce8 <scanMADT()+0x450>
c000b947:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b94b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b94f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b953:	8d 50 01             	lea    edx,[eax+0x1]
c000b956:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b95a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b95e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b962:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b96a:	8d 50 01             	lea    edx,[eax+0x1]
c000b96d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b971:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b975:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b979:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b97d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b982:	83 f8 02             	cmp    eax,0x2
c000b985:	0f 86 59 03 00 00    	jbe    c000bce4 <scanMADT()+0x44c>
c000b98b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b990:	85 c0                	test   eax,eax
c000b992:	75 58                	jne    c000b9ec <scanMADT()+0x154>
c000b994:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b998:	8d 50 01             	lea    edx,[eax+0x1]
c000b99b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b99f:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b9a5:	0f b6 d2             	movzx  edx,dl
c000b9a8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9ac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9b0:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000b9b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ba:	8d 50 01             	lea    edx,[eax+0x1]
c000b9bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c1:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b9c7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b9ca:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000b9d0:	0f b6 d2             	movzx  edx,dl
c000b9d3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9d7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9db:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000b9e1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b9e6:	e9 d9 02 00 00       	jmp    c000bcc4 <scanMADT()+0x42c>
c000b9eb:	90                   	nop
c000b9ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b9f1:	83 f8 01             	cmp    eax,0x1
c000b9f4:	0f 85 1a 01 00 00    	jne    c000bb14 <scanMADT()+0x27c>
c000b9fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9fe:	8d 50 01             	lea    edx,[eax+0x1]
c000ba01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba05:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000ba0b:	0f b6 d2             	movzx  edx,dl
c000ba0e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ba12:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ba16:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000ba1c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ba21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba29:	01 d0                	add    eax,edx
c000ba2b:	83 c0 2c             	add    eax,0x2c
c000ba2e:	8a 00                	mov    al,BYTE PTR [eax]
c000ba30:	0f b6 d0             	movzx  edx,al
c000ba33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba37:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba3e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba42:	0f b6 c0             	movzx  eax,al
c000ba45:	c1 e0 08             	shl    eax,0x8
c000ba48:	89 d1                	mov    ecx,edx
c000ba4a:	09 c1                	or     ecx,eax
c000ba4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba50:	8d 50 02             	lea    edx,[eax+0x2]
c000ba53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba57:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba5b:	0f b6 c0             	movzx  eax,al
c000ba5e:	c1 e0 10             	shl    eax,0x10
c000ba61:	09 c1                	or     ecx,eax
c000ba63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba67:	8d 50 03             	lea    edx,[eax+0x3]
c000ba6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba72:	0f b6 c0             	movzx  eax,al
c000ba75:	c1 e0 18             	shl    eax,0x18
c000ba78:	09 c1                	or     ecx,eax
c000ba7a:	89 ca                	mov    edx,ecx
c000ba7c:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000ba81:	0f b6 c0             	movzx  eax,al
c000ba84:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000ba8b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba98:	01 d0                	add    eax,edx
c000ba9a:	83 c0 2c             	add    eax,0x2c
c000ba9d:	8a 00                	mov    al,BYTE PTR [eax]
c000ba9f:	0f b6 d0             	movzx  edx,al
c000baa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baa6:	8d 48 01             	lea    ecx,[eax+0x1]
c000baa9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000baad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bab1:	0f b6 c0             	movzx  eax,al
c000bab4:	c1 e0 08             	shl    eax,0x8
c000bab7:	89 d1                	mov    ecx,edx
c000bab9:	09 c1                	or     ecx,eax
c000babb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000babf:	8d 50 02             	lea    edx,[eax+0x2]
c000bac2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bac6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000baca:	0f b6 c0             	movzx  eax,al
c000bacd:	c1 e0 10             	shl    eax,0x10
c000bad0:	09 c1                	or     ecx,eax
c000bad2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad6:	8d 50 03             	lea    edx,[eax+0x3]
c000bad9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000badd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bae1:	0f b6 c0             	movzx  eax,al
c000bae4:	c1 e0 18             	shl    eax,0x18
c000bae7:	09 c1                	or     ecx,eax
c000bae9:	89 ca                	mov    edx,ecx
c000baeb:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000baf0:	0f b6 c0             	movzx  eax,al
c000baf3:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000bafa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000baff:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bb04:	83 c0 01             	add    eax,0x1
c000bb07:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000bb0c:	e9 b3 01 00 00       	jmp    c000bcc4 <scanMADT()+0x42c>
c000bb11:	8d 76 00             	lea    esi,[esi+0x0]
c000bb14:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb19:	83 f8 02             	cmp    eax,0x2
c000bb1c:	0f 85 ea 00 00 00    	jne    c000bc0c <scanMADT()+0x374>
c000bb22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb26:	8d 50 01             	lea    edx,[eax+0x1]
c000bb29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb31:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb35:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bb39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb3d:	8d 50 01             	lea    edx,[eax+0x1]
c000bb40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb48:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb4c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bb50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb58:	01 d0                	add    eax,edx
c000bb5a:	83 c0 2c             	add    eax,0x2c
c000bb5d:	8a 00                	mov    al,BYTE PTR [eax]
c000bb5f:	0f b6 d0             	movzx  edx,al
c000bb62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb66:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb6d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb71:	0f b6 c0             	movzx  eax,al
c000bb74:	c1 e0 08             	shl    eax,0x8
c000bb77:	89 d1                	mov    ecx,edx
c000bb79:	09 c1                	or     ecx,eax
c000bb7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb7f:	8d 50 02             	lea    edx,[eax+0x2]
c000bb82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb8a:	0f b6 c0             	movzx  eax,al
c000bb8d:	c1 e0 10             	shl    eax,0x10
c000bb90:	09 c1                	or     ecx,eax
c000bb92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb96:	8d 50 03             	lea    edx,[eax+0x3]
c000bb99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bba1:	0f b6 c0             	movzx  eax,al
c000bba4:	c1 e0 18             	shl    eax,0x18
c000bba7:	09 c8                	or     eax,ecx
c000bba9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bbb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbba:	01 d0                	add    eax,edx
c000bbbc:	83 c0 2c             	add    eax,0x2c
c000bbbf:	8a 00                	mov    al,BYTE PTR [eax]
c000bbc1:	0f b6 d0             	movzx  edx,al
c000bbc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbc8:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbcf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbd3:	0f b6 c0             	movzx  eax,al
c000bbd6:	c1 e0 08             	shl    eax,0x8
c000bbd9:	09 d0                	or     eax,edx
c000bbdb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bbe0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bbe5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bbea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bbee:	88 90 e8 47 02 c0    	mov    BYTE PTR [eax-0x3ffdb818],dl
c000bbf4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bbf9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bbfe:	66 89 94 00 c0 aa 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd5540],dx
c000bc06:	e9 b9 00 00 00       	jmp    c000bcc4 <scanMADT()+0x42c>
c000bc0b:	90                   	nop
c000bc0c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc11:	83 f8 04             	cmp    eax,0x4
c000bc14:	0f 85 9a 00 00 00    	jne    c000bcb4 <scanMADT()+0x41c>
c000bc1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc1e:	8d 50 01             	lea    edx,[eax+0x1]
c000bc21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc29:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc2d:	0f b6 c0             	movzx  eax,al
c000bc30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc3c:	01 d0                	add    eax,edx
c000bc3e:	83 c0 2c             	add    eax,0x2c
c000bc41:	8a 00                	mov    al,BYTE PTR [eax]
c000bc43:	0f b6 d0             	movzx  edx,al
c000bc46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc4a:	8d 48 01             	lea    ecx,[eax+0x1]
c000bc4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc51:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc55:	0f b6 c0             	movzx  eax,al
c000bc58:	c1 e0 08             	shl    eax,0x8
c000bc5b:	09 d0                	or     eax,edx
c000bc5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc61:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc6a:	8d 50 01             	lea    edx,[eax+0x1]
c000bc6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc75:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc79:	0f b6 c0             	movzx  eax,al
c000bc7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc84:	c1 e0 08             	shl    eax,0x8
c000bc87:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc8b:	89 c1                	mov    ecx,eax
c000bc8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc91:	c1 e0 18             	shl    eax,0x18
c000bc94:	89 c3                	mov    ebx,eax
c000bc96:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bc9b:	8d 50 01             	lea    edx,[eax+0x1]
c000bc9e:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000bca4:	09 d9                	or     ecx,ebx
c000bca6:	89 ca                	mov    edx,ecx
c000bca8:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000bcaf:	eb 13                	jmp    c000bcc4 <scanMADT()+0x42c>
c000bcb1:	8d 76 00             	lea    esi,[esi+0x0]
c000bcb4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bcb9:	83 f8 05             	cmp    eax,0x5
c000bcbc:	75 06                	jne    c000bcc4 <scanMADT()+0x42c>
c000bcbe:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bcc3:	90                   	nop
c000bcc4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bcc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bccd:	01 d0                	add    eax,edx
c000bccf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcd3:	e9 50 fc ff ff       	jmp    c000b928 <scanMADT()+0x90>
c000bcd8:	90                   	nop
c000bcd9:	eb 0d                	jmp    c000bce8 <scanMADT()+0x450>
c000bcdb:	90                   	nop
c000bcdc:	90                   	nop
c000bcdd:	eb 09                	jmp    c000bce8 <scanMADT()+0x450>
c000bcdf:	90                   	nop
c000bce0:	90                   	nop
c000bce1:	eb 05                	jmp    c000bce8 <scanMADT()+0x450>
c000bce3:	90                   	nop
c000bce4:	90                   	nop
c000bce5:	8d 76 00             	lea    esi,[esi+0x0]
c000bce8:	83 c4 38             	add    esp,0x38
c000bceb:	5b                   	pop    ebx
c000bcec:	c3                   	ret    
c000bced:	90                   	nop
c000bcee:	66 90                	xchg   ax,ax

c000bcf0 <ACPI::ACPI()>:
c000bcf0:	83 ec 0c             	sub    esp,0xc
c000bcf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf7:	83 ec 08             	sub    esp,0x8
c000bcfa:	68 5d 21 02 c0       	push   0xc002215d
c000bcff:	50                   	push   eax
c000bd00:	e8 c3 d4 ff ff       	call   c00091c8 <Device::Device(char const*)>
c000bd05:	83 c4 10             	add    esp,0x10
c000bd08:	ba 58 23 02 c0       	mov    edx,0xc0022358
c000bd0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd11:	89 10                	mov    DWORD PTR [eax],edx
c000bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd17:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd22:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd30:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bd3a:	e8 59 fb ff ff       	call   c000b898 <scanMADT()>
c000bd3f:	90                   	nop
c000bd40:	83 c4 0c             	add    esp,0xc
c000bd43:	c3                   	ret    

c000bd44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bd44:	83 ec 2c             	sub    esp,0x2c
c000bd47:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bd4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd4f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000bd53:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000bd57:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd5c:	88 c8                	mov    al,cl
c000bd5e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd6f:	90                   	nop
c000bd70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd74:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd7a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd7e:	0f 8d b0 00 00 00    	jge    c000be34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd8c:	83 c2 2a             	add    edx,0x2a
c000bd8f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd93:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd98:	0f b7 c0             	movzx  eax,ax
c000bd9b:	39 c2                	cmp    edx,eax
c000bd9d:	0f 85 85 00 00 00    	jne    c000be28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bda3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bda7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdab:	83 c2 2a             	add    edx,0x2a
c000bdae:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bdb2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bdb7:	0f b6 c0             	movzx  eax,al
c000bdba:	39 c2                	cmp    edx,eax
c000bdbc:	75 6a                	jne    c000be28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bdbe:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bdc3:	85 c0                	test   eax,eax
c000bdc5:	74 3d                	je     c000be04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bdc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdcf:	83 c2 2a             	add    edx,0x2a
c000bdd2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bdd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bddd:	39 c2                	cmp    edx,eax
c000bddf:	74 13                	je     c000bdf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bde1:	83 ec 0c             	sub    esp,0xc
c000bde4:	68 d8 22 02 c0       	push   0xc00222d8
c000bde9:	e8 f8 2e 00 00       	call   c000ece6 <KePanic(char const*)>
c000bdee:	83 c4 10             	add    esp,0x10
c000bdf1:	8d 76 00             	lea    esi,[esi+0x0]
c000bdf4:	83 ec 0c             	sub    esp,0xc
c000bdf7:	68 62 21 02 c0       	push   0xc0022162
c000bdfc:	e8 e5 2e 00 00       	call   c000ece6 <KePanic(char const*)>
c000be01:	83 c4 10             	add    esp,0x10
c000be04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000be08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be10:	83 c2 2a             	add    edx,0x2a
c000be13:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000be17:	8b 02                	mov    eax,DWORD PTR [edx]
c000be19:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000be1c:	89 01                	mov    DWORD PTR [ecx],eax
c000be1e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000be21:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000be26:	66 90                	xchg   ax,ax
c000be28:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000be2d:	e9 3e ff ff ff       	jmp    c000bd70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000be32:	66 90                	xchg   ax,ax
c000be34:	90                   	nop
c000be35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be39:	83 c4 2c             	add    esp,0x2c
c000be3c:	c2 04 00             	ret    0x4
c000be3f:	90                   	nop

c000be40 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000be40:	83 ec 1c             	sub    esp,0x1c
c000be43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be47:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000be4b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000be4f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000be54:	88 c8                	mov    al,cl
c000be56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000be5a:	88 d0                	mov    al,dl
c000be5c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be64:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6e:	83 c2 2a             	add    edx,0x2a
c000be71:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000be75:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000be79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be7d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be87:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be8e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000be93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be97:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be9d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000bea1:	83 c0 01             	add    eax,0x1
c000bea4:	88 c1                	mov    cl,al
c000bea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beaa:	83 c2 2a             	add    edx,0x2a
c000bead:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000beb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beb5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bebf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bec2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bec6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000beca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bece:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bed4:	8d 50 01             	lea    edx,[eax+0x1]
c000bed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bedb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000bee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bee5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000beeb:	3d 00 02 00 00       	cmp    eax,0x200
c000bef0:	75 12                	jne    c000bf04 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	68 71 21 02 c0       	push   0xc0022171
c000befa:	e8 e7 2d 00 00       	call   c000ece6 <KePanic(char const*)>
c000beff:	83 c4 10             	add    esp,0x10
c000bf02:	66 90                	xchg   ax,ax
c000bf04:	90                   	nop
c000bf05:	83 c4 1c             	add    esp,0x1c
c000bf08:	c3                   	ret    
c000bf09:	90                   	nop
c000bf0a:	66 90                	xchg   ax,ax

c000bf0c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bf0c:	b8 00 00 00 00       	mov    eax,0x0
c000bf11:	c3                   	ret    
c000bf12:	66 90                	xchg   ax,ax

c000bf14 <ACPI::detectPCI()>:
c000bf14:	53                   	push   ebx
c000bf15:	83 ec 28             	sub    esp,0x28
c000bf18:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bf1d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bf22:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000bf27:	83 ec 08             	sub    esp,0x8
c000bf2a:	68 8e 21 02 c0       	push   0xc002218e
c000bf2f:	50                   	push   eax
c000bf30:	e8 ef f8 ff ff       	call   c000b824 <findDataTable(unsigned char*, char*)>
c000bf35:	83 c4 10             	add    esp,0x10
c000bf38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf3c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bf41:	74 0d                	je     c000bf50 <ACPI::detectPCI()+0x3c>
c000bf43:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf48:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf50:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bf58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf5c:	8a 00                	mov    al,BYTE PTR [eax]
c000bf5e:	0f b6 c0             	movzx  eax,al
c000bf61:	83 f8 01             	cmp    eax,0x1
c000bf64:	75 0e                	jne    c000bf74 <ACPI::detectPCI()+0x60>
c000bf66:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf6b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf70:	eb 2e                	jmp    c000bfa0 <ACPI::detectPCI()+0x8c>
c000bf72:	66 90                	xchg   ax,ax
c000bf74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf78:	8a 00                	mov    al,BYTE PTR [eax]
c000bf7a:	0f b6 c0             	movzx  eax,al
c000bf7d:	83 f8 02             	cmp    eax,0x2
c000bf80:	75 1e                	jne    c000bfa0 <ACPI::detectPCI()+0x8c>
c000bf82:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf87:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf8c:	85 c0                	test   eax,eax
c000bf8e:	74 10                	je     c000bfa0 <ACPI::detectPCI()+0x8c>
c000bf90:	83 ec 0c             	sub    esp,0xc
c000bf93:	68 08 23 02 c0       	push   0xc0022308
c000bf98:	e8 49 2d 00 00       	call   c000ece6 <KePanic(char const*)>
c000bf9d:	83 c4 10             	add    esp,0x10
c000bfa0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bfa4:	83 f0 01             	xor    eax,0x1
c000bfa7:	0f b6 c0             	movzx  eax,al
c000bfaa:	85 c0                	test   eax,eax
c000bfac:	74 46                	je     c000bff4 <ACPI::detectPCI()+0xe0>
c000bfae:	e8 7d 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bfb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bfbc:	75 0e                	jne    c000bfcc <ACPI::detectPCI()+0xb8>
c000bfbe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bfc3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bfc8:	eb 2a                	jmp    c000bff4 <ACPI::detectPCI()+0xe0>
c000bfca:	66 90                	xchg   ax,ax
c000bfcc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bfd1:	75 21                	jne    c000bff4 <ACPI::detectPCI()+0xe0>
c000bfd3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bfd8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bfdd:	85 c0                	test   eax,eax
c000bfdf:	74 13                	je     c000bff4 <ACPI::detectPCI()+0xe0>
c000bfe1:	83 ec 0c             	sub    esp,0xc
c000bfe4:	68 08 23 02 c0       	push   0xc0022308
c000bfe9:	e8 f8 2c 00 00       	call   c000ece6 <KePanic(char const*)>
c000bfee:	83 c4 10             	add    esp,0x10
c000bff1:	8d 76 00             	lea    esi,[esi+0x0]
c000bff4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bff9:	85 c0                	test   eax,eax
c000bffb:	0f 84 87 00 00 00    	je     c000c088 <ACPI::detectPCI()+0x174>
c000c001:	83 ec 0c             	sub    esp,0xc
c000c004:	68 93 21 02 c0       	push   0xc0022193
c000c009:	e8 dd 05 00 00       	call   c000c5eb <KeSetBootMessage(char const*)>
c000c00e:	83 c4 10             	add    esp,0x10
c000c011:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c019:	83 ec 0c             	sub    esp,0xc
c000c01c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c020:	e8 7b 29 00 00       	call   c000e9a0 <malloc>
c000c025:	83 c4 10             	add    esp,0x10
c000c028:	89 c3                	mov    ebx,eax
c000c02a:	83 ec 0c             	sub    esp,0xc
c000c02d:	53                   	push   ebx
c000c02e:	e8 23 fd 00 00       	call   c001bd56 <PCI::PCI()>
c000c033:	83 c4 10             	add    esp,0x10
c000c036:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c03a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c03e:	83 ec 08             	sub    esp,0x8
c000c041:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c045:	50                   	push   eax
c000c046:	e8 1b d0 ff ff       	call   c0009066 <Device::addChild(Device*)>
c000c04b:	83 c4 10             	add    esp,0x10
c000c04e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c052:	8b 00                	mov    eax,DWORD PTR [eax]
c000c054:	83 c0 08             	add    eax,0x8
c000c057:	8b 00                	mov    eax,DWORD PTR [eax]
c000c059:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c05e:	85 d2                	test   edx,edx
c000c060:	74 0a                	je     c000c06c <ACPI::detectPCI()+0x158>
c000c062:	ba 01 00 00 00       	mov    edx,0x1
c000c067:	eb 0b                	jmp    c000c074 <ACPI::detectPCI()+0x160>
c000c069:	8d 76 00             	lea    esi,[esi+0x0]
c000c06c:	ba 02 00 00 00       	mov    edx,0x2
c000c071:	8d 76 00             	lea    esi,[esi+0x0]
c000c074:	6a 00                	push   0x0
c000c076:	6a 00                	push   0x0
c000c078:	52                   	push   edx
c000c079:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c07d:	ff d0                	call   eax
c000c07f:	83 c4 10             	add    esp,0x10
c000c082:	e9 91 00 00 00       	jmp    c000c118 <ACPI::detectPCI()+0x204>
c000c087:	90                   	nop
c000c088:	83 ec 0c             	sub    esp,0xc
c000c08b:	68 ab 21 02 c0       	push   0xc00221ab
c000c090:	e8 56 05 00 00       	call   c000c5eb <KeSetBootMessage(char const*)>
c000c095:	83 c4 10             	add    esp,0x10
c000c098:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c09f:	83 ec 0c             	sub    esp,0xc
c000c0a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c0a6:	e8 f5 28 00 00       	call   c000e9a0 <malloc>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 c3                	mov    ebx,eax
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	53                   	push   ebx
c000c0b4:	e8 a5 08 01 00       	call   c001c95e <IDE::IDE()>
c000c0b9:	83 c4 10             	add    esp,0x10
c000c0bc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c0c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0c4:	83 ec 08             	sub    esp,0x8
c000c0c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c0cb:	50                   	push   eax
c000c0cc:	e8 95 cf ff ff       	call   c0009066 <Device::addChild(Device*)>
c000c0d1:	83 c4 10             	add    esp,0x10
c000c0d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0d8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c0e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0e6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c0ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0f3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c100:	8b 00                	mov    eax,DWORD PTR [eax]
c000c102:	83 c0 08             	add    eax,0x8
c000c105:	8b 00                	mov    eax,DWORD PTR [eax]
c000c107:	6a 00                	push   0x0
c000c109:	6a 00                	push   0x0
c000c10b:	6a 00                	push   0x0
c000c10d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c111:	ff d0                	call   eax
c000c113:	83 c4 10             	add    esp,0x10
c000c116:	66 90                	xchg   ax,ax
c000c118:	90                   	nop
c000c119:	83 c4 28             	add    esp,0x28
c000c11c:	5b                   	pop    ebx
c000c11d:	c3                   	ret    
c000c11e:	66 90                	xchg   ax,ax

c000c120 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c120:	83 ec 0c             	sub    esp,0xc
c000c123:	83 ec 0c             	sub    esp,0xc
c000c126:	68 c0 21 02 c0       	push   0xc00221c0
c000c12b:	e8 b6 2b 00 00       	call   c000ece6 <KePanic(char const*)>
c000c130:	83 c4 10             	add    esp,0x10
c000c133:	90                   	nop
c000c134:	83 c4 0c             	add    esp,0xc
c000c137:	c3                   	ret    

c000c138 <ACPI::open(int, int, void*)>:
c000c138:	55                   	push   ebp
c000c139:	89 e5                	mov    ebp,esp
c000c13b:	53                   	push   ebx
c000c13c:	81 ec 74 01 00 00    	sub    esp,0x174
c000c142:	83 ec 0c             	sub    esp,0xc
c000c145:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c148:	e8 c7 fd ff ff       	call   c000bf14 <ACPI::detectPCI()>
c000c14d:	83 c4 10             	add    esp,0x10
c000c150:	83 ec 0c             	sub    esp,0xc
c000c153:	68 30 23 02 c0       	push   0xc0022330
c000c158:	e8 8e 04 00 00       	call   c000c5eb <KeSetBootMessage(char const*)>
c000c15d:	83 c4 10             	add    esp,0x10
c000c160:	b8 4c 05 00 00       	mov    eax,0x54c
c000c165:	8a 00                	mov    al,BYTE PTR [eax]
c000c167:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c16a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c16e:	83 f8 01             	cmp    eax,0x1
c000c171:	75 15                	jne    c000c188 <ACPI::open(int, int, void*)+0x50>
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	68 d1 21 02 c0       	push   0xc00221d1
c000c17b:	e8 40 80 00 00       	call   c00141c0 <Thr::loadKernelSymbolTable(char const*)>
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	eb 33                	jmp    c000c1b8 <ACPI::open(int, int, void*)+0x80>
c000c185:	8d 76 00             	lea    esi,[esi+0x0]
c000c188:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c18c:	3d bb 00 00 00       	cmp    eax,0xbb
c000c191:	75 15                	jne    c000c1a8 <ACPI::open(int, int, void*)+0x70>
c000c193:	83 ec 0c             	sub    esp,0xc
c000c196:	68 ef 21 02 c0       	push   0xc00221ef
c000c19b:	e8 20 80 00 00       	call   c00141c0 <Thr::loadKernelSymbolTable(char const*)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb 13                	jmp    c000c1b8 <ACPI::open(int, int, void*)+0x80>
c000c1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1a8:	83 ec 0c             	sub    esp,0xc
c000c1ab:	68 0d 22 02 c0       	push   0xc002220d
c000c1b0:	e8 31 2b 00 00       	call   c000ece6 <KePanic(char const*)>
c000c1b5:	83 c4 10             	add    esp,0x10
c000c1b8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c1bc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c1c3:	83 ec 0c             	sub    esp,0xc
c000c1c6:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c1c9:	e8 d2 27 00 00       	call   c000e9a0 <malloc>
c000c1ce:	83 c4 10             	add    esp,0x10
c000c1d1:	89 c3                	mov    ebx,eax
c000c1d3:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c1d8:	83 ec 04             	sub    esp,0x4
c000c1db:	50                   	push   eax
c000c1dc:	68 27 22 02 c0       	push   0xc0022227
c000c1e1:	53                   	push   ebx
c000c1e2:	e8 45 bf ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c1ed:	83 ec 08             	sub    esp,0x8
c000c1f0:	6a 01                	push   0x1
c000c1f2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1f5:	e8 50 bf ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c1fa:	83 c4 10             	add    esp,0x10
c000c1fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c200:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c204:	75 12                	jne    c000c218 <ACPI::open(int, int, void*)+0xe0>
c000c206:	83 ec 0c             	sub    esp,0xc
c000c209:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c20c:	e8 97 bf ff ff       	call   c00081a8 <File::close()>
c000c211:	83 c4 10             	add    esp,0x10
c000c214:	eb 06                	jmp    c000c21c <ACPI::open(int, int, void*)+0xe4>
c000c216:	66 90                	xchg   ax,ax
c000c218:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c21c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c220:	74 16                	je     c000c238 <ACPI::open(int, int, void*)+0x100>
c000c222:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c225:	8b 00                	mov    eax,DWORD PTR [eax]
c000c227:	83 c0 08             	add    eax,0x8
c000c22a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c22c:	83 ec 0c             	sub    esp,0xc
c000c22f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c232:	ff d0                	call   eax
c000c234:	83 c4 10             	add    esp,0x10
c000c237:	90                   	nop
c000c238:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c23b:	83 f0 01             	xor    eax,0x1
c000c23e:	0f b6 c0             	movzx  eax,al
c000c241:	85 c0                	test   eax,eax
c000c243:	74 27                	je     c000c26c <ACPI::open(int, int, void*)+0x134>
c000c245:	83 ec 0c             	sub    esp,0xc
c000c248:	68 45 22 02 c0       	push   0xc0022245
c000c24d:	e8 99 03 00 00       	call   c000c5eb <KeSetBootMessage(char const*)>
c000c252:	83 c4 10             	add    esp,0x10
c000c255:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c262:	e8 99 60 00 00       	call   c0012300 <Virt::setupPageSwapping(int)>
c000c267:	83 c4 10             	add    esp,0x10
c000c26a:	66 90                	xchg   ax,ax
c000c26c:	83 ec 0c             	sub    esp,0xc
c000c26f:	68 60 22 02 c0       	push   0xc0022260
c000c274:	e8 72 03 00 00       	call   c000c5eb <KeSetBootMessage(char const*)>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c27f:	83 ec 08             	sub    esp,0x8
c000c282:	6a 13                	push   0x13
c000c284:	50                   	push   eax
c000c285:	e8 0a d1 ff ff       	call   c0009394 <getDevicesOfType(DeviceType)>
c000c28a:	83 c4 0c             	add    esp,0xc
c000c28d:	8d 76 00             	lea    esi,[esi+0x0]
c000c290:	83 ec 0c             	sub    esp,0xc
c000c293:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c296:	50                   	push   eax
c000c297:	e8 d0 43 01 00       	call   c002066c <LinkedList<Device>::isEmpty()>
c000c29c:	83 c4 10             	add    esp,0x10
c000c29f:	83 f0 01             	xor    eax,0x1
c000c2a2:	0f b6 c0             	movzx  eax,al
c000c2a5:	85 c0                	test   eax,eax
c000c2a7:	0f 84 1f 01 00 00    	je     c000c3cc <ACPI::open(int, int, void*)+0x294>
c000c2ad:	83 ec 0c             	sub    esp,0xc
c000c2b0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c2b3:	50                   	push   eax
c000c2b4:	e8 cf 43 01 00       	call   c0020688 <LinkedList<Device>::getFirstElement()>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c2bf:	83 ec 0c             	sub    esp,0xc
c000c2c2:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c2c5:	50                   	push   eax
c000c2c6:	e8 c5 43 01 00       	call   c0020690 <LinkedList<Device>::removeFirst()>
c000c2cb:	83 c4 10             	add    esp,0x10
c000c2ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c2d1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c2d4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c2d7:	b8 24 00 00 00       	mov    eax,0x24
c000c2dc:	83 e0 fc             	and    eax,0xfffffffc
c000c2df:	89 c3                	mov    ebx,eax
c000c2e1:	b8 00 00 00 00       	mov    eax,0x0
c000c2e6:	66 90                	xchg   ax,ax
c000c2e8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c2ef:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c2f6:	83 c0 04             	add    eax,0x4
c000c2f9:	39 d8                	cmp    eax,ebx
c000c2fb:	72 eb                	jb     c000c2e8 <ACPI::open(int, int, void*)+0x1b0>
c000c2fd:	83 ec 08             	sub    esp,0x8
c000c300:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c306:	50                   	push   eax
c000c307:	83 ec 24             	sub    esp,0x24
c000c30a:	89 e1                	mov    ecx,esp
c000c30c:	b8 24 00 00 00       	mov    eax,0x24
c000c311:	83 e0 fc             	and    eax,0xfffffffc
c000c314:	89 c3                	mov    ebx,eax
c000c316:	b8 00 00 00 00       	mov    eax,0x0
c000c31b:	90                   	nop
c000c31c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c323:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c326:	83 c0 04             	add    eax,0x4
c000c329:	39 d8                	cmp    eax,ebx
c000c32b:	72 ef                	jb     c000c31c <ACPI::open(int, int, void*)+0x1e4>
c000c32d:	e8 0c ff 00 00       	call   c001c23e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c332:	83 c4 30             	add    esp,0x30
c000c335:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c338:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c33c:	0f 84 4e ff ff ff    	je     c000c290 <ACPI::open(int, int, void*)+0x158>
c000c342:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c349:	83 ec 0c             	sub    esp,0xc
c000c34c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c34f:	e8 4c 26 00 00       	call   c000e9a0 <malloc>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 c3                	mov    ebx,eax
c000c359:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c35e:	83 ec 04             	sub    esp,0x4
c000c361:	50                   	push   eax
c000c362:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c365:	53                   	push   ebx
c000c366:	e8 c1 bd ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c36b:	83 c4 10             	add    esp,0x10
c000c36e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c371:	83 ec 0c             	sub    esp,0xc
c000c374:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c377:	e8 92 c0 ff ff       	call   c000840e <File::exists()>
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	0f b6 c0             	movzx  eax,al
c000c382:	85 c0                	test   eax,eax
c000c384:	74 22                	je     c000c3a8 <ACPI::open(int, int, void*)+0x270>
c000c386:	83 ec 08             	sub    esp,0x8
c000c389:	6a 01                	push   0x1
c000c38b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c38e:	e8 af 88 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c000c393:	83 c4 10             	add    esp,0x10
c000c396:	83 ec 08             	sub    esp,0x8
c000c399:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c39c:	50                   	push   eax
c000c39d:	e8 01 8b 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c000c3a2:	83 c4 10             	add    esp,0x10
c000c3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c3a8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c3ac:	0f 84 de fe ff ff    	je     c000c290 <ACPI::open(int, int, void*)+0x158>
c000c3b2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3b7:	83 c0 08             	add    eax,0x8
c000c3ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3bc:	83 ec 0c             	sub    esp,0xc
c000c3bf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c3c2:	ff d0                	call   eax
c000c3c4:	83 c4 10             	add    esp,0x10
c000c3c7:	e9 c4 fe ff ff       	jmp    c000c290 <ACPI::open(int, int, void*)+0x158>
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c3d2:	50                   	push   eax
c000c3d3:	e8 90 42 01 00       	call   c0020668 <LinkedList<Device>::~LinkedList()>
c000c3d8:	83 c4 10             	add    esp,0x10
c000c3db:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c3e1:	83 ec 08             	sub    esp,0x8
c000c3e4:	6a 01                	push   0x1
c000c3e6:	68 7a 22 02 c0       	push   0xc002227a
c000c3eb:	e8 52 88 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c000c3f0:	83 c4 10             	add    esp,0x10
c000c3f3:	83 ec 08             	sub    esp,0x8
c000c3f6:	53                   	push   ebx
c000c3f7:	50                   	push   eax
c000c3f8:	e8 a6 8a 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c000c3fd:	83 c4 10             	add    esp,0x10
c000c400:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c405:	85 c0                	test   eax,eax
c000c407:	0f 84 ef 00 00 00    	je     c000c4fc <ACPI::open(int, int, void*)+0x3c4>
c000c40d:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c412:	85 c0                	test   eax,eax
c000c414:	0f 84 e2 00 00 00    	je     c000c4fc <ACPI::open(int, int, void*)+0x3c4>
c000c41a:	83 ec 0c             	sub    esp,0xc
c000c41d:	68 97 22 02 c0       	push   0xc0022297
c000c422:	e8 c4 01 00 00       	call   c000c5eb <KeSetBootMessage(char const*)>
c000c427:	83 c4 10             	add    esp,0x10
c000c42a:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c431:	83 ec 0c             	sub    esp,0xc
c000c434:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c437:	e8 64 25 00 00       	call   c000e9a0 <malloc>
c000c43c:	83 c4 10             	add    esp,0x10
c000c43f:	89 c3                	mov    ebx,eax
c000c441:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c446:	83 ec 04             	sub    esp,0x4
c000c449:	50                   	push   eax
c000c44a:	68 b4 22 02 c0       	push   0xc00222b4
c000c44f:	53                   	push   ebx
c000c450:	e8 d7 bc ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c455:	83 c4 10             	add    esp,0x10
c000c458:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c45b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c45f:	74 1b                	je     c000c47c <ACPI::open(int, int, void*)+0x344>
c000c461:	83 ec 0c             	sub    esp,0xc
c000c464:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c467:	e8 a2 bf ff ff       	call   c000840e <File::exists()>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	0f b6 c0             	movzx  eax,al
c000c472:	85 c0                	test   eax,eax
c000c474:	74 06                	je     c000c47c <ACPI::open(int, int, void*)+0x344>
c000c476:	b0 01                	mov    al,0x1
c000c478:	eb 06                	jmp    c000c480 <ACPI::open(int, int, void*)+0x348>
c000c47a:	66 90                	xchg   ax,ax
c000c47c:	b0 00                	mov    al,0x0
c000c47e:	66 90                	xchg   ax,ax
c000c480:	0f b6 c0             	movzx  eax,al
c000c483:	85 c0                	test   eax,eax
c000c485:	74 21                	je     c000c4a8 <ACPI::open(int, int, void*)+0x370>
c000c487:	83 ec 08             	sub    esp,0x8
c000c48a:	6a 01                	push   0x1
c000c48c:	68 b4 22 02 c0       	push   0xc00222b4
c000c491:	e8 ac 87 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c000c496:	83 c4 10             	add    esp,0x10
c000c499:	83 ec 08             	sub    esp,0x8
c000c49c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c49f:	50                   	push   eax
c000c4a0:	e8 fe 89 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c000c4a5:	83 c4 10             	add    esp,0x10
c000c4a8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c4ac:	74 1e                	je     c000c4cc <ACPI::open(int, int, void*)+0x394>
c000c4ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c4b2:	74 18                	je     c000c4cc <ACPI::open(int, int, void*)+0x394>
c000c4b4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c4b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4b9:	83 c0 08             	add    eax,0x8
c000c4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4be:	83 ec 0c             	sub    esp,0xc
c000c4c1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c4c4:	ff d0                	call   eax
c000c4c6:	83 c4 10             	add    esp,0x10
c000c4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000c4cc:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c4d1:	83 ec 08             	sub    esp,0x8
c000c4d4:	68 d1 22 02 c0       	push   0xc00222d1
c000c4d9:	50                   	push   eax
c000c4da:	e8 45 f3 ff ff       	call   c000b824 <findDataTable(unsigned char*, char*)>
c000c4df:	83 c4 10             	add    esp,0x10
c000c4e2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c4e5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c4e9:	74 11                	je     c000c4fc <ACPI::open(int, int, void*)+0x3c4>
c000c4eb:	83 ec 08             	sub    esp,0x8
c000c4ee:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c4f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c4f4:	e8 27 fc ff ff       	call   c000c120 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	b8 00 00 00 00       	mov    eax,0x0
c000c501:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c504:	c9                   	leave  
c000c505:	c3                   	ret    

c000c506 <KeInitialiseAtexit()>:
c000c506:	83 ec 10             	sub    esp,0x10
c000c509:	6a 60                	push   0x60
c000c50b:	6a 00                	push   0x0
c000c50d:	68 00 ad 02 c0       	push   0xc002ad00
c000c512:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c51c:	e8 cf 3f ff ff       	call   c00004f0 <memset>
c000c521:	83 c4 1c             	add    esp,0x1c
c000c524:	c3                   	ret    

c000c525 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c525:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c52a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c52e:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c535:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c539:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c540:	40                   	inc    eax
c000c541:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c546:	83 f8 17             	cmp    eax,0x17
c000c549:	7e 0d                	jle    c000c558 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c54b:	c7 44 24 04 7c 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc002237c
c000c553:	e9 8e 27 00 00       	jmp    c000ece6 <KePanic(char const*)>
c000c558:	c3                   	ret    

c000c559 <KeExecuteAtexit()>:
c000c559:	53                   	push   ebx
c000c55a:	31 db                	xor    ebx,ebx
c000c55c:	83 ec 08             	sub    esp,0x8
c000c55f:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c565:	7e 50                	jle    c000c5b7 <KeExecuteAtexit()+0x5e>
c000c567:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c56e:	85 c0                	test   eax,eax
c000c570:	74 42                	je     c000c5b4 <KeExecuteAtexit()+0x5b>
c000c572:	51                   	push   ecx
c000c573:	50                   	push   eax
c000c574:	53                   	push   ebx
c000c575:	68 95 23 02 c0       	push   0xc0022395
c000c57a:	e8 cf a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c57f:	58                   	pop    eax
c000c580:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c587:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c58e:	c7 04 24 b7 23 02 c0 	mov    DWORD PTR [esp],0xc00223b7
c000c595:	e8 b4 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c59a:	c7 04 24 8f 27 02 c0 	mov    DWORD PTR [esp],0xc002278f
c000c5a1:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c5ac:	e8 9d a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c5b1:	83 c4 10             	add    esp,0x10
c000c5b4:	43                   	inc    ebx
c000c5b5:	eb a8                	jmp    c000c55f <KeExecuteAtexit()+0x6>
c000c5b7:	83 c4 08             	add    esp,0x8
c000c5ba:	5b                   	pop    ebx
c000c5bb:	c3                   	ret    

c000c5bc <KeDisplaySplashScreen()>:
c000c5bc:	53                   	push   ebx
c000c5bd:	bb 01 00 00 00       	mov    ebx,0x1
c000c5c2:	83 ec 08             	sub    esp,0x8
c000c5c5:	43                   	inc    ebx
c000c5c6:	0f be 83 ba 23 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffddc46]
c000c5cd:	85 c0                	test   eax,eax
c000c5cf:	74 15                	je     c000c5e6 <KeDisplaySplashScreen()+0x2a>
c000c5d1:	83 ec 0c             	sub    esp,0xc
c000c5d4:	6a 01                	push   0x1
c000c5d6:	53                   	push   ebx
c000c5d7:	6a 00                	push   0x0
c000c5d9:	6a 0f                	push   0xf
c000c5db:	50                   	push   eax
c000c5dc:	e8 27 d3 00 00       	call   c0019908 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c5e1:	83 c4 20             	add    esp,0x20
c000c5e4:	eb df                	jmp    c000c5c5 <KeDisplaySplashScreen()+0x9>
c000c5e6:	83 c4 08             	add    esp,0x8
c000c5e9:	5b                   	pop    ebx
c000c5ea:	c3                   	ret    

c000c5eb <KeSetBootMessage(char const*)>:
c000c5eb:	57                   	push   edi
c000c5ec:	56                   	push   esi
c000c5ed:	53                   	push   ebx
c000c5ee:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c5f4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c5fb:	68 9e 00 00 00       	push   0x9e
c000c600:	6a 00                	push   0x0
c000c602:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c606:	56                   	push   esi
c000c607:	e8 e4 3e ff ff       	call   c00004f0 <memset>
c000c60c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c60f:	e8 6c 3f ff ff       	call   c0000580 <strlen>
c000c614:	ba 50 00 00 00       	mov    edx,0x50
c000c619:	83 c4 10             	add    esp,0x10
c000c61c:	31 c9                	xor    ecx,ecx
c000c61e:	29 c2                	sub    edx,eax
c000c620:	83 e2 fe             	and    edx,0xfffffffe
c000c623:	01 f2                	add    edx,esi
c000c625:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c62a:	84 c0                	test   al,al
c000c62c:	74 0a                	je     c000c638 <KeSetBootMessage(char const*)+0x4d>
c000c62e:	80 cc 07             	or     ah,0x7
c000c631:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c635:	41                   	inc    ecx
c000c636:	eb ed                	jmp    c000c625 <KeSetBootMessage(char const*)+0x3a>
c000c638:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c63d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c642:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c644:	50                   	push   eax
c000c645:	50                   	push   eax
c000c646:	53                   	push   ebx
c000c647:	68 cf 23 02 c0       	push   0xc00223cf
c000c64c:	e8 fd a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c651:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c657:	5b                   	pop    ebx
c000c658:	5e                   	pop    esi
c000c659:	5f                   	pop    edi
c000c65a:	c3                   	ret    

c000c65b <__cxa_atexit>:
c000c65b:	31 c0                	xor    eax,eax
c000c65d:	c3                   	ret    

c000c65e <__cxa_finalize>:
c000c65e:	c3                   	ret    

c000c65f <__stack_chk_fail>:
c000c65f:	55                   	push   ebp
c000c660:	89 e5                	mov    ebp,esp
c000c662:	83 ec 10             	sub    esp,0x10
c000c665:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c668:	68 dd 23 02 c0       	push   0xc00223dd
c000c66d:	e8 dc a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c672:	58                   	pop    eax
c000c673:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c676:	5a                   	pop    edx
c000c677:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c67a:	68 dd 23 02 c0       	push   0xc00223dd
c000c67f:	e8 ca a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c684:	c7 04 24 e5 23 02 c0 	mov    DWORD PTR [esp],0xc00223e5
c000c68b:	e8 56 26 00 00       	call   c000ece6 <KePanic(char const*)>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	c9                   	leave  
c000c694:	c3                   	ret    

c000c695 <__cxa_pure_virtual>:
c000c695:	83 ec 18             	sub    esp,0x18
c000c698:	68 fd 23 02 c0       	push   0xc00223fd
c000c69d:	e8 44 26 00 00       	call   c000ece6 <KePanic(char const*)>
c000c6a2:	83 c4 1c             	add    esp,0x1c
c000c6a5:	c3                   	ret    

c000c6a6 <operator new[](unsigned long)>:
c000c6a6:	e9 f5 22 00 00       	jmp    c000e9a0 <malloc>

c000c6ab <operator delete(void*, unsigned long)>:
c000c6ab:	e9 10 23 00 00       	jmp    c000e9c0 <rfree>

c000c6b0 <operator delete[](void*)>:
c000c6b0:	e9 0b 23 00 00       	jmp    c000e9c0 <rfree>

c000c6b5 <operator delete[](void*, unsigned long)>:
c000c6b5:	e9 06 23 00 00       	jmp    c000e9c0 <rfree>
c000c6ba:	66 90                	xchg   ax,ax

c000c6bc <CUnlockScheduler>:
c000c6bc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000c6c4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c6c9:	85 c0                	test   eax,eax
c000c6cb:	75 03                	jne    c000c6d0 <CUnlockScheduler+0x14>
c000c6cd:	fb                   	sti    
c000c6ce:	66 90                	xchg   ax,ax
c000c6d0:	90                   	nop
c000c6d1:	c3                   	ret    
c000c6d2:	66 90                	xchg   ax,ax

c000c6d4 <CLockScheduler>:
c000c6d4:	fa                   	cli    
c000c6d5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c6da:	83 c0 01             	add    eax,0x1
c000c6dd:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000c6e2:	90                   	nop
c000c6e3:	c3                   	ret    

c000c6e4 <CPrintf>:
c000c6e4:	83 ec 0c             	sub    esp,0xc
c000c6e7:	83 ec 08             	sub    esp,0x8
c000c6ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6ee:	68 10 24 02 c0       	push   0xc0022410
c000c6f3:	e8 56 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6f8:	83 c4 10             	add    esp,0x10
c000c6fb:	90                   	nop
c000c6fc:	83 c4 0c             	add    esp,0xc
c000c6ff:	c3                   	ret    

c000c700 <CmOpen(char const*)>:
c000c700:	57                   	push   edi
c000c701:	56                   	push   esi
c000c702:	53                   	push   ebx
c000c703:	83 ec 1c             	sub    esp,0x1c
c000c706:	6a 30                	push   0x30
c000c708:	e8 93 22 00 00       	call   c000e9a0 <malloc>
c000c70d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c714:	89 c3                	mov    ebx,eax
c000c716:	e8 85 22 00 00       	call   c000e9a0 <malloc>
c000c71b:	83 c4 0c             	add    esp,0xc
c000c71e:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000c724:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c728:	89 c6                	mov    esi,eax
c000c72a:	50                   	push   eax
c000c72b:	e8 fc b9 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c730:	83 c4 0c             	add    esp,0xc
c000c733:	89 33                	mov    DWORD PTR [ebx],esi
c000c735:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c739:	50                   	push   eax
c000c73a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c73e:	50                   	push   eax
c000c73f:	56                   	push   esi
c000c740:	e8 07 bd ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000c745:	5a                   	pop    edx
c000c746:	59                   	pop    ecx
c000c747:	6a 01                	push   0x1
c000c749:	ff 33                	push   DWORD PTR [ebx]
c000c74b:	e8 fa b9 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c750:	5e                   	pop    esi
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	e8 46 22 00 00       	call   c000e9a0 <malloc>
c000c75a:	5a                   	pop    edx
c000c75b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c75f:	89 c7                	mov    edi,eax
c000c761:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c763:	8b 10                	mov    edx,DWORD PTR [eax]
c000c765:	56                   	push   esi
c000c766:	57                   	push   edi
c000c767:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c76b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c76f:	50                   	push   eax
c000c770:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c773:	83 c4 14             	add    esp,0x14
c000c776:	ff 33                	push   DWORD PTR [ebx]
c000c778:	e8 2b ba ff ff       	call   c00081a8 <File::close()>
c000c77d:	59                   	pop    ecx
c000c77e:	58                   	pop    eax
c000c77f:	6a 13                	push   0x13
c000c781:	ff 33                	push   DWORD PTR [ebx]
c000c783:	e8 c2 b9 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c788:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c78a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c78c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c78f:	57                   	push   edi
c000c790:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c794:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c798:	50                   	push   eax
c000c799:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c79c:	83 c4 14             	add    esp,0x14
c000c79f:	57                   	push   edi
c000c7a0:	e8 0b 22 00 00       	call   c000e9b0 <free>
c000c7a5:	83 c4 10             	add    esp,0x10
c000c7a8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ab:	75 10                	jne    c000c7bd <CmOpen(char const*)+0xbd>
c000c7ad:	83 ec 0c             	sub    esp,0xc
c000c7b0:	68 13 24 02 c0       	push   0xc0022413
c000c7b5:	e8 2c 25 00 00       	call   c000ece6 <KePanic(char const*)>
c000c7ba:	83 c4 10             	add    esp,0x10
c000c7bd:	50                   	push   eax
c000c7be:	6a 00                	push   0x0
c000c7c0:	6a 00                	push   0x0
c000c7c2:	ff 33                	push   DWORD PTR [ebx]
c000c7c4:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c7c7:	e8 3c ba ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c7cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7d0:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7d3:	57                   	push   edi
c000c7d4:	6a 00                	push   0x0
c000c7d6:	6a 2b                	push   0x2b
c000c7d8:	50                   	push   eax
c000c7d9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c7dc:	83 c4 1c             	add    esp,0x1c
c000c7df:	6a 00                	push   0x0
c000c7e1:	6a 00                	push   0x0
c000c7e3:	ff 33                	push   DWORD PTR [ebx]
c000c7e5:	e8 1e ba ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c7ea:	83 c4 0c             	add    esp,0xc
c000c7ed:	6a 08                	push   0x8
c000c7ef:	68 24 24 02 c0       	push   0xc0022424
c000c7f4:	57                   	push   edi
c000c7f5:	e8 86 3b ff ff       	call   c0000380 <memcmp>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	85 c0                	test   eax,eax
c000c7ff:	74 10                	je     c000c811 <CmOpen(char const*)+0x111>
c000c801:	83 ec 0c             	sub    esp,0xc
c000c804:	68 2d 24 02 c0       	push   0xc002242d
c000c809:	e8 d8 24 00 00       	call   c000ece6 <KePanic(char const*)>
c000c80e:	83 c4 10             	add    esp,0x10
c000c811:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c815:	83 c4 10             	add    esp,0x10
c000c818:	89 d8                	mov    eax,ebx
c000c81a:	5b                   	pop    ebx
c000c81b:	5e                   	pop    esi
c000c81c:	5f                   	pop    edi
c000c81d:	c3                   	ret    

c000c81e <CmClose(Reghive_Tag*)>:
c000c81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c822:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c826:	74 0b                	je     c000c833 <CmClose(Reghive_Tag*)+0x15>
c000c828:	8b 00                	mov    eax,DWORD PTR [eax]
c000c82a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c82e:	e9 75 b9 ff ff       	jmp    c00081a8 <File::close()>
c000c833:	c3                   	ret    

c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c834:	53                   	push   ebx
c000c835:	83 ec 18             	sub    esp,0x18
c000c838:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c83c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c840:	74 29                	je     c000c86b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c842:	50                   	push   eax
c000c843:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c848:	99                   	cdq    
c000c849:	52                   	push   edx
c000c84a:	50                   	push   eax
c000c84b:	ff 33                	push   DWORD PTR [ebx]
c000c84d:	e8 b6 b9 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c852:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c854:	5a                   	pop    edx
c000c855:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c859:	8b 10                	mov    edx,DWORD PTR [eax]
c000c85b:	51                   	push   ecx
c000c85c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c860:	6a 00                	push   0x0
c000c862:	6a 2b                	push   0x2b
c000c864:	50                   	push   eax
c000c865:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c868:	83 c4 20             	add    esp,0x20
c000c86b:	83 c4 18             	add    esp,0x18
c000c86e:	5b                   	pop    ebx
c000c86f:	c3                   	ret    

c000c870 <CmGetString(Reghive_Tag*, int, char*)>:
c000c870:	55                   	push   ebp
c000c871:	57                   	push   edi
c000c872:	56                   	push   esi
c000c873:	53                   	push   ebx
c000c874:	31 db                	xor    ebx,ebx
c000c876:	83 ec 70             	sub    esp,0x70
c000c879:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c87d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c884:	50                   	push   eax
c000c885:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c88c:	55                   	push   ebp
c000c88d:	e8 a2 ff ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c89a:	c1 e0 08             	shl    eax,0x8
c000c89d:	89 c2                	mov    edx,eax
c000c89f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c8a4:	09 d0                	or     eax,edx
c000c8a6:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c8ab:	c1 e0 08             	shl    eax,0x8
c000c8ae:	09 d0                	or     eax,edx
c000c8b0:	74 25                	je     c000c8d7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c8b2:	52                   	push   edx
c000c8b3:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c8b7:	52                   	push   edx
c000c8b8:	6b fb 0d             	imul   edi,ebx,0xd
c000c8bb:	50                   	push   eax
c000c8bc:	55                   	push   ebp
c000c8bd:	e8 72 ff ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8c2:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c8c6:	b9 27 00 00 00       	mov    ecx,0x27
c000c8cb:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c8d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	83 c3 03             	add    ebx,0x3
c000c8da:	83 fb 15             	cmp    ebx,0x15
c000c8dd:	75 b6                	jne    c000c895 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c8df:	83 c4 6c             	add    esp,0x6c
c000c8e2:	5b                   	pop    ebx
c000c8e3:	5e                   	pop    esi
c000c8e4:	5f                   	pop    edi
c000c8e5:	5d                   	pop    ebp
c000c8e6:	c3                   	ret    

c000c8e7 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c8e7:	83 ec 40             	sub    esp,0x40
c000c8ea:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8ee:	50                   	push   eax
c000c8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8f7:	e8 38 ff ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8fc:	83 c4 10             	add    esp,0x10
c000c8ff:	83 c8 ff             	or     eax,0xffffffff
c000c902:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c907:	75 19                	jne    c000c922 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c909:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c90e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c913:	c1 e0 08             	shl    eax,0x8
c000c916:	09 c2                	or     edx,eax
c000c918:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c91d:	c1 e0 10             	shl    eax,0x10
c000c920:	09 d0                	or     eax,edx
c000c922:	83 c4 3c             	add    esp,0x3c
c000c925:	c3                   	ret    

c000c926 <CmGetNext(Reghive_Tag*, int)>:
c000c926:	83 ec 40             	sub    esp,0x40
c000c929:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c92d:	50                   	push   eax
c000c92e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c932:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c936:	e8 f9 fe ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c93b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c940:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c945:	c1 e0 08             	shl    eax,0x8
c000c948:	09 c2                	or     edx,eax
c000c94a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c94f:	83 c4 4c             	add    esp,0x4c
c000c952:	c1 e0 10             	shl    eax,0x10
c000c955:	09 d0                	or     eax,edx
c000c957:	c3                   	ret    

c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c958:	53                   	push   ebx
c000c959:	83 ec 18             	sub    esp,0x18
c000c95c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c960:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c964:	74 29                	je     c000c98f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c966:	50                   	push   eax
c000c967:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c96c:	99                   	cdq    
c000c96d:	52                   	push   edx
c000c96e:	50                   	push   eax
c000c96f:	ff 33                	push   DWORD PTR [ebx]
c000c971:	e8 92 b8 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c976:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c978:	5a                   	pop    edx
c000c979:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c97d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c97f:	51                   	push   ecx
c000c980:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c984:	6a 00                	push   0x0
c000c986:	6a 2b                	push   0x2b
c000c988:	50                   	push   eax
c000c989:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c98c:	83 c4 20             	add    esp,0x20
c000c98f:	83 c4 18             	add    esp,0x18
c000c992:	5b                   	pop    ebx
c000c993:	c3                   	ret    

c000c994 <CmFreeExtent(Reghive_Tag*, int)>:
c000c994:	53                   	push   ebx
c000c995:	83 ec 3c             	sub    esp,0x3c
c000c998:	6a 2b                	push   0x2b
c000c99a:	6a 00                	push   0x0
c000c99c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c9a0:	53                   	push   ebx
c000c9a1:	e8 4a 3b ff ff       	call   c00004f0 <memset>
c000c9a6:	83 c4 0c             	add    esp,0xc
c000c9a9:	53                   	push   ebx
c000c9aa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9b2:	e8 a1 ff ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c9b7:	83 c4 48             	add    esp,0x48
c000c9ba:	5b                   	pop    ebx
c000c9bb:	c3                   	ret    

c000c9bc <CmUpdateHeader(Reghive_Tag*)>:
c000c9bc:	83 ec 0c             	sub    esp,0xc
c000c9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c9c7:	74 10                	je     c000c9d9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c9c9:	52                   	push   edx
c000c9ca:	8d 50 05             	lea    edx,[eax+0x5]
c000c9cd:	52                   	push   edx
c000c9ce:	6a 00                	push   0x0
c000c9d0:	50                   	push   eax
c000c9d1:	e8 82 ff ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c9d6:	83 c4 10             	add    esp,0x10
c000c9d9:	83 c4 0c             	add    esp,0xc
c000c9dc:	c3                   	ret    

c000c9dd <CmExpand(Reghive_Tag*, int)>:
c000c9dd:	55                   	push   ebp
c000c9de:	57                   	push   edi
c000c9df:	83 cf ff             	or     edi,0xffffffff
c000c9e2:	56                   	push   esi
c000c9e3:	53                   	push   ebx
c000c9e4:	83 ec 3c             	sub    esp,0x3c
c000c9e7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000c9eb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000c9ef:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9f3:	74 59                	je     c000ca4e <CmExpand(Reghive_Tag*, int)+0x71>
c000c9f5:	50                   	push   eax
c000c9f6:	31 d2                	xor    edx,edx
c000c9f8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000c9fc:	31 ff                	xor    edi,edi
c000c9fe:	52                   	push   edx
c000c9ff:	50                   	push   eax
c000ca00:	ff 33                	push   DWORD PTR [ebx]
c000ca02:	e8 01 b8 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ca07:	83 c4 0c             	add    esp,0xc
c000ca0a:	6a 2b                	push   0x2b
c000ca0c:	6a 00                	push   0x0
c000ca0e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000ca12:	55                   	push   ebp
c000ca13:	e8 d8 3a ff ff       	call   c00004f0 <memset>
c000ca18:	83 c4 10             	add    esp,0x10
c000ca1b:	39 f7                	cmp    edi,esi
c000ca1d:	7d 1b                	jge    c000ca3a <CmExpand(Reghive_Tag*, int)+0x5d>
c000ca1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca21:	83 ec 0c             	sub    esp,0xc
c000ca24:	47                   	inc    edi
c000ca25:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000ca29:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca2b:	51                   	push   ecx
c000ca2c:	55                   	push   ebp
c000ca2d:	6a 00                	push   0x0
c000ca2f:	6a 2b                	push   0x2b
c000ca31:	50                   	push   eax
c000ca32:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca35:	83 c4 20             	add    esp,0x20
c000ca38:	eb e1                	jmp    c000ca1b <CmExpand(Reghive_Tag*, int)+0x3e>
c000ca3a:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000ca3d:	83 ec 0c             	sub    esp,0xc
c000ca40:	01 fe                	add    esi,edi
c000ca42:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000ca45:	53                   	push   ebx
c000ca46:	e8 71 ff ff ff       	call   c000c9bc <CmUpdateHeader(Reghive_Tag*)>
c000ca4b:	83 c4 10             	add    esp,0x10
c000ca4e:	83 c4 3c             	add    esp,0x3c
c000ca51:	89 f8                	mov    eax,edi
c000ca53:	5b                   	pop    ebx
c000ca54:	5e                   	pop    esi
c000ca55:	5f                   	pop    edi
c000ca56:	5d                   	pop    ebp
c000ca57:	c3                   	ret    

c000ca58 <CmFindUnusedExtent(Reghive_Tag*)>:
c000ca58:	55                   	push   ebp
c000ca59:	57                   	push   edi
c000ca5a:	56                   	push   esi
c000ca5b:	53                   	push   ebx
c000ca5c:	83 cb ff             	or     ebx,0xffffffff
c000ca5f:	83 ec 1c             	sub    esp,0x1c
c000ca62:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca66:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ca6a:	74 68                	je     c000cad4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca6c:	51                   	push   ecx
c000ca6d:	be 2b 00 00 00       	mov    esi,0x2b
c000ca72:	6a 00                	push   0x0
c000ca74:	31 ff                	xor    edi,edi
c000ca76:	6a 00                	push   0x0
c000ca78:	31 db                	xor    ebx,ebx
c000ca7a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca7d:	e8 86 b7 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ca82:	83 c4 10             	add    esp,0x10
c000ca85:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ca88:	76 3b                	jbe    c000cac5 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ca8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca94:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca96:	51                   	push   ecx
c000ca97:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ca9b:	51                   	push   ecx
c000ca9c:	6a 00                	push   0x0
c000ca9e:	6a 01                	push   0x1
c000caa0:	50                   	push   eax
c000caa1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caa4:	83 c4 20             	add    esp,0x20
c000caa7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000caac:	74 26                	je     c000cad4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000caae:	52                   	push   edx
c000caaf:	43                   	inc    ebx
c000cab0:	57                   	push   edi
c000cab1:	56                   	push   esi
c000cab2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cab5:	e8 4e b7 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000caba:	83 c6 2b             	add    esi,0x2b
c000cabd:	83 d7 00             	adc    edi,0x0
c000cac0:	83 c4 10             	add    esp,0x10
c000cac3:	eb c0                	jmp    c000ca85 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cac5:	50                   	push   eax
c000cac6:	50                   	push   eax
c000cac7:	6a 40                	push   0x40
c000cac9:	55                   	push   ebp
c000caca:	e8 0e ff ff ff       	call   c000c9dd <CmExpand(Reghive_Tag*, int)>
c000cacf:	83 c4 10             	add    esp,0x10
c000cad2:	89 c3                	mov    ebx,eax
c000cad4:	83 c4 1c             	add    esp,0x1c
c000cad7:	89 d8                	mov    eax,ebx
c000cad9:	5b                   	pop    ebx
c000cada:	5e                   	pop    esi
c000cadb:	5f                   	pop    edi
c000cadc:	5d                   	pop    ebp
c000cadd:	c3                   	ret    

c000cade <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cade:	55                   	push   ebp
c000cadf:	57                   	push   edi
c000cae0:	56                   	push   esi
c000cae1:	53                   	push   ebx
c000cae2:	81 ec 88 00 00 00    	sub    esp,0x88
c000cae8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000caef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000caf6:	e8 5d ff ff ff       	call   c000ca58 <CmFindUnusedExtent(Reghive_Tag*)>
c000cafb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000caff:	83 c4 0c             	add    esp,0xc
c000cb02:	6a 2b                	push   0x2b
c000cb04:	6a 00                	push   0x0
c000cb06:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cb0a:	55                   	push   ebp
c000cb0b:	e8 e0 39 ff ff       	call   c00004f0 <memset>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 db                	test   ebx,ebx
c000cb15:	74 12                	je     c000cb29 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cb17:	51                   	push   ecx
c000cb18:	55                   	push   ebp
c000cb19:	53                   	push   ebx
c000cb1a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb21:	e8 0e fd ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb26:	83 c4 10             	add    esp,0x10
c000cb29:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cb2d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cb34:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cb39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb3b:	85 db                	test   ebx,ebx
c000cb3d:	74 49                	je     c000cb88 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cb3f:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cb44:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cb49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb4d:	c1 e0 08             	shl    eax,0x8
c000cb50:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cb56:	09 c8                	or     eax,ecx
c000cb58:	74 11                	je     c000cb6b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cb5a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cb5e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cb62:	c1 e8 10             	shr    eax,0x10
c000cb65:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cb69:	eb 0f                	jmp    c000cb7a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cb6b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb70:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb75:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb7a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cb7e:	c1 ea 08             	shr    edx,0x8
c000cb81:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cb86:	eb 0f                	jmp    c000cb97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cb88:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb8d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb92:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb97:	52                   	push   edx
c000cb98:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cb9c:	50                   	push   eax
c000cb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cba1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cba8:	e8 ab fd ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cbad:	83 c4 10             	add    esp,0x10
c000cbb0:	85 db                	test   ebx,ebx
c000cbb2:	74 12                	je     c000cbc6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cbb4:	50                   	push   eax
c000cbb5:	55                   	push   ebp
c000cbb6:	53                   	push   ebx
c000cbb7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbbe:	e8 95 fd ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cbc3:	83 c4 10             	add    esp,0x10
c000cbc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbca:	83 c4 7c             	add    esp,0x7c
c000cbcd:	5b                   	pop    ebx
c000cbce:	5e                   	pop    esi
c000cbcf:	5f                   	pop    edi
c000cbd0:	5d                   	pop    ebp
c000cbd1:	c3                   	ret    

c000cbd2 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cbd2:	55                   	push   ebp
c000cbd3:	57                   	push   edi
c000cbd4:	56                   	push   esi
c000cbd5:	53                   	push   ebx
c000cbd6:	bb 27 00 00 00       	mov    ebx,0x27
c000cbdb:	81 ec 88 00 00 00    	sub    esp,0x88
c000cbe1:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cbe8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cbef:	e8 8c 39 ff ff       	call   c0000580 <strlen>
c000cbf4:	8d 48 26             	lea    ecx,[eax+0x26]
c000cbf7:	89 c8                	mov    eax,ecx
c000cbf9:	99                   	cdq    
c000cbfa:	f7 fb                	idiv   ebx
c000cbfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cc09:	7e 10                	jle    c000cc1b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cc0b:	83 ec 0c             	sub    esp,0xc
c000cc0e:	68 3e 24 02 c0       	push   0xc002243e
c000cc13:	e8 ce 20 00 00       	call   c000ece6 <KePanic(char const*)>
c000cc18:	83 c4 10             	add    esp,0x10
c000cc1b:	53                   	push   ebx
c000cc1c:	31 ed                	xor    ebp,ebp
c000cc1e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cc22:	53                   	push   ebx
c000cc23:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc2a:	57                   	push   edi
c000cc2b:	e8 04 fc ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc30:	83 c4 10             	add    esp,0x10
c000cc33:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cc37:	89 f0                	mov    eax,esi
c000cc39:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cc3d:	c1 e0 08             	shl    eax,0x8
c000cc40:	09 c6                	or     esi,eax
c000cc42:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cc46:	c1 e6 08             	shl    esi,0x8
c000cc49:	09 c6                	or     esi,eax
c000cc4b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cc4f:	7e 72                	jle    c000ccc3 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cc51:	85 f6                	test   esi,esi
c000cc53:	75 25                	jne    c000cc7a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cc55:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cc5a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cc5e:	50                   	push   eax
c000cc5f:	6a 00                	push   0x0
c000cc61:	6a 00                	push   0x0
c000cc63:	57                   	push   edi
c000cc64:	e8 75 fe ff ff       	call   c000cade <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cc69:	83 c4 10             	add    esp,0x10
c000cc6c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cc6f:	89 c6                	mov    esi,eax
c000cc71:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cc74:	c1 f8 10             	sar    eax,0x10
c000cc77:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cc7a:	51                   	push   ecx
c000cc7b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc7f:	52                   	push   edx
c000cc80:	56                   	push   esi
c000cc81:	57                   	push   edi
c000cc82:	e8 ad fb ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc87:	83 c4 0c             	add    esp,0xc
c000cc8a:	6a 27                	push   0x27
c000cc8c:	6a 00                	push   0x0
c000cc8e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc92:	51                   	push   ecx
c000cc93:	e8 58 38 ff ff       	call   c00004f0 <memset>
c000cc98:	6b c5 27             	imul   eax,ebp,0x27
c000cc9b:	83 c4 0c             	add    esp,0xc
c000cc9e:	6a 27                	push   0x27
c000cca0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cca7:	50                   	push   eax
c000cca8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ccac:	51                   	push   ecx
c000ccad:	e8 de 39 ff ff       	call   c0000690 <strncpy>
c000ccb2:	83 c4 0c             	add    esp,0xc
c000ccb5:	8d 54 24 49          	lea    edx,[esp+0x49]
c000ccb9:	52                   	push   edx
c000ccba:	56                   	push   esi
c000ccbb:	57                   	push   edi
c000ccbc:	e8 97 fc ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccc1:	eb 19                	jmp    c000ccdc <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000ccc3:	85 f6                	test   esi,esi
c000ccc5:	74 18                	je     c000ccdf <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000ccc7:	52                   	push   edx
c000ccc8:	52                   	push   edx
c000ccc9:	56                   	push   esi
c000ccca:	57                   	push   edi
c000cccb:	e8 c4 fc ff ff       	call   c000c994 <CmFreeExtent(Reghive_Tag*, int)>
c000ccd0:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000ccd4:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000ccd8:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	45                   	inc    ebp
c000cce0:	83 c3 03             	add    ebx,0x3
c000cce3:	83 fd 07             	cmp    ebp,0x7
c000cce6:	0f 85 47 ff ff ff    	jne    c000cc33 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000ccec:	50                   	push   eax
c000cced:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000ccf1:	50                   	push   eax
c000ccf2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ccf9:	57                   	push   edi
c000ccfa:	e8 59 fc ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccff:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cd05:	5b                   	pop    ebx
c000cd06:	5e                   	pop    esi
c000cd07:	5f                   	pop    edi
c000cd08:	5d                   	pop    ebp
c000cd09:	c3                   	ret    

c000cd0a <CmGetMatch(char*, char*, bool, bool*)>:
c000cd0a:	56                   	push   esi
c000cd0b:	53                   	push   ebx
c000cd0c:	50                   	push   eax
c000cd0d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd12:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd16:	74 25                	je     c000cd3d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cd18:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd1b:	31 db                	xor    ebx,ebx
c000cd1d:	50                   	push   eax
c000cd1e:	50                   	push   eax
c000cd1f:	8d 04 9d 00 48 02 c0 	lea    eax,[ebx*4-0x3ffdb800]
c000cd26:	50                   	push   eax
c000cd27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2b:	e8 50 3a ff ff       	call   c0000780 <strcmp>
c000cd30:	83 c4 10             	add    esp,0x10
c000cd33:	85 c0                	test   eax,eax
c000cd35:	74 2e                	je     c000cd65 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd37:	43                   	inc    ebx
c000cd38:	83 fb 3f             	cmp    ebx,0x3f
c000cd3b:	75 e0                	jne    c000cd1d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cd3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd40:	31 db                	xor    ebx,ebx
c000cd42:	51                   	push   ecx
c000cd43:	51                   	push   ecx
c000cd44:	8d 04 9d 00 48 02 c0 	lea    eax,[ebx*4-0x3ffdb800]
c000cd4b:	50                   	push   eax
c000cd4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cd50:	e8 2b 3a ff ff       	call   c0000780 <strcmp>
c000cd55:	83 c4 10             	add    esp,0x10
c000cd58:	85 c0                	test   eax,eax
c000cd5a:	74 09                	je     c000cd65 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd5c:	43                   	inc    ebx
c000cd5d:	83 fb 3f             	cmp    ebx,0x3f
c000cd60:	75 e0                	jne    c000cd42 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cd62:	83 cb ff             	or     ebx,0xffffffff
c000cd65:	5a                   	pop    edx
c000cd66:	89 d8                	mov    eax,ebx
c000cd68:	5b                   	pop    ebx
c000cd69:	5e                   	pop    esi
c000cd6a:	c3                   	ret    

c000cd6b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cd6b:	55                   	push   ebp
c000cd6c:	31 c0                	xor    eax,eax
c000cd6e:	57                   	push   edi
c000cd6f:	56                   	push   esi
c000cd70:	53                   	push   ebx
c000cd71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd79:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cd7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd81:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cd83:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cd86:	83 fd 1f             	cmp    ebp,0x1f
c000cd89:	7f 0b                	jg     c000cd96 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cd8b:	0f b6 c2             	movzx  eax,dl
c000cd8e:	d3 e0                	shl    eax,cl
c000cd90:	09 07                	or     DWORD PTR [edi],eax
c000cd92:	b0 01                	mov    al,0x1
c000cd94:	01 33                	add    DWORD PTR [ebx],esi
c000cd96:	5b                   	pop    ebx
c000cd97:	5e                   	pop    esi
c000cd98:	5f                   	pop    edi
c000cd99:	5d                   	pop    ebp
c000cd9a:	c3                   	ret    

c000cd9b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cd9b:	57                   	push   edi
c000cd9c:	56                   	push   esi
c000cd9d:	53                   	push   ebx
c000cd9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cda2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cda6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cdaa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cdae:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cdb0:	7c 17                	jl     c000cdc9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cdb2:	8b 17                	mov    edx,DWORD PTR [edi]
c000cdb4:	b8 01 00 00 00       	mov    eax,0x1
c000cdb9:	d3 e0                	shl    eax,cl
c000cdbb:	48                   	dec    eax
c000cdbc:	21 d0                	and    eax,edx
c000cdbe:	d3 ea                	shr    edx,cl
c000cdc0:	89 17                	mov    DWORD PTR [edi],edx
c000cdc2:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cdc4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cdc7:	eb 05                	jmp    c000cdce <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cdc9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cdcc:	31 c0                	xor    eax,eax
c000cdce:	5b                   	pop    ebx
c000cdcf:	5e                   	pop    esi
c000cdd0:	5f                   	pop    edi
c000cdd1:	c3                   	ret    

c000cdd2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cdd2:	83 ec 40             	sub    esp,0x40
c000cdd5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cdd9:	50                   	push   eax
c000cdda:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cdde:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cde2:	e8 4d fa ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cde7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cdeb:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cdef:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cdf3:	89 10                	mov    DWORD PTR [eax],edx
c000cdf5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cdf8:	83 c4 4c             	add    esp,0x4c
c000cdfb:	c3                   	ret    

c000cdfc <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cdfc:	55                   	push   ebp
c000cdfd:	57                   	push   edi
c000cdfe:	56                   	push   esi
c000cdff:	53                   	push   ebx
c000ce00:	83 ec 40             	sub    esp,0x40
c000ce03:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000ce07:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000ce0b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000ce0f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce13:	53                   	push   ebx
c000ce14:	56                   	push   esi
c000ce15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce19:	e8 16 fa ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce1e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000ce22:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000ce26:	83 c4 0c             	add    esp,0xc
c000ce29:	53                   	push   ebx
c000ce2a:	56                   	push   esi
c000ce2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce2f:	e8 24 fb ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce34:	83 c4 4c             	add    esp,0x4c
c000ce37:	5b                   	pop    ebx
c000ce38:	5e                   	pop    esi
c000ce39:	5f                   	pop    edi
c000ce3a:	5d                   	pop    ebp
c000ce3b:	c3                   	ret    

c000ce3c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000ce3c:	55                   	push   ebp
c000ce3d:	57                   	push   edi
c000ce3e:	56                   	push   esi
c000ce3f:	31 f6                	xor    esi,esi
c000ce41:	53                   	push   ebx
c000ce42:	31 db                	xor    ebx,ebx
c000ce44:	83 ec 40             	sub    esp,0x40
c000ce47:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ce4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ce57:	6a 12                	push   0x12
c000ce59:	68 ee 00 00 00       	push   0xee
c000ce5e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce62:	e8 89 36 ff ff       	call   c00004f0 <memset>
c000ce67:	83 c4 10             	add    esp,0x10
c000ce6a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ce6e:	6a 08                	push   0x8
c000ce70:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce74:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ce78:	50                   	push   eax
c000ce79:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce7d:	55                   	push   ebp
c000ce7e:	57                   	push   edi
c000ce7f:	e8 e7 fe ff ff       	call   c000cd6b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ce8b:	50                   	push   eax
c000ce8c:	6a 06                	push   0x6
c000ce8e:	55                   	push   ebp
c000ce8f:	57                   	push   edi
c000ce90:	e8 06 ff ff ff       	call   c000cd9b <CmGetShift(unsigned int*, int*, int, bool*)>
c000ce95:	83 c4 10             	add    esp,0x10
c000ce98:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ce9d:	74 07                	je     c000cea6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000ce9f:	46                   	inc    esi
c000cea0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000cea4:	eb e1                	jmp    c000ce87 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000cea6:	43                   	inc    ebx
c000cea7:	83 fb 12             	cmp    ebx,0x12
c000ceaa:	75 c2                	jne    c000ce6e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000ceac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ceb0:	31 f6                	xor    esi,esi
c000ceb2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ceb5:	50                   	push   eax
c000ceb6:	50                   	push   eax
c000ceb7:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000cebc:	46                   	inc    esi
c000cebd:	8d 04 85 00 48 02 c0 	lea    eax,[eax*4-0x3ffdb800]
c000cec4:	50                   	push   eax
c000cec5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cec9:	e8 a2 39 ff ff       	call   c0000870 <strcat>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	83 fe 18             	cmp    esi,0x18
c000ced4:	75 df                	jne    c000ceb5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000ced6:	83 c4 3c             	add    esp,0x3c
c000ced9:	31 c0                	xor    eax,eax
c000cedb:	5b                   	pop    ebx
c000cedc:	5e                   	pop    esi
c000cedd:	5f                   	pop    edi
c000cede:	5d                   	pop    ebp
c000cedf:	c3                   	ret    

c000cee0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000cee0:	83 ec 40             	sub    esp,0x40
c000cee3:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cee7:	50                   	push   eax
c000cee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ceec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cef0:	e8 3f f9 ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cef5:	58                   	pop    eax
c000cef6:	5a                   	pop    edx
c000cef7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000cefb:	8d 44 24 15          	lea    eax,[esp+0x15]
c000ceff:	50                   	push   eax
c000cf00:	e8 37 ff ff ff       	call   c000ce3c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cf05:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cf0a:	83 c4 4c             	add    esp,0x4c
c000cf0d:	c3                   	ret    

c000cf0e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cf0e:	55                   	push   ebp
c000cf0f:	57                   	push   edi
c000cf10:	56                   	push   esi
c000cf11:	53                   	push   ebx
c000cf12:	31 db                	xor    ebx,ebx
c000cf14:	83 ec 70             	sub    esp,0x70
c000cf17:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cf1e:	6a 30                	push   0x30
c000cf20:	6a 00                	push   0x0
c000cf22:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cf26:	56                   	push   esi
c000cf27:	e8 c4 35 ff ff       	call   c00004f0 <memset>
c000cf2c:	83 c4 10             	add    esp,0x10
c000cf2f:	83 ec 0c             	sub    esp,0xc
c000cf32:	57                   	push   edi
c000cf33:	e8 48 36 ff ff       	call   c0000580 <strlen>
c000cf38:	83 c4 10             	add    esp,0x10
c000cf3b:	39 d8                	cmp    eax,ebx
c000cf3d:	76 16                	jbe    c000cf55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cf3f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cf43:	83 ec 0c             	sub    esp,0xc
c000cf46:	50                   	push   eax
c000cf47:	e8 14 3a ff ff       	call   c0000960 <toupper>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cf52:	43                   	inc    ebx
c000cf53:	eb da                	jmp    c000cf2f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cf55:	52                   	push   edx
c000cf56:	31 db                	xor    ebx,ebx
c000cf58:	6a 18                	push   0x18
c000cf5a:	31 ff                	xor    edi,edi
c000cf5c:	6a 3f                	push   0x3f
c000cf5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf62:	50                   	push   eax
c000cf63:	e8 88 35 ff ff       	call   c00004f0 <memset>
c000cf68:	83 c4 10             	add    esp,0x10
c000cf6b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000cf6f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cf73:	84 c0                	test   al,al
c000cf75:	0f 84 af 00 00 00    	je     c000d02a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cf7b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cf7f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf82:	83 ec 0c             	sub    esp,0xc
c000cf85:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000cf8a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cf8e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000cf92:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000cf97:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cf9b:	56                   	push   esi
c000cf9c:	e8 df 35 ff ff       	call   c0000580 <strlen>
c000cfa1:	83 c4 10             	add    esp,0x10
c000cfa4:	85 c0                	test   eax,eax
c000cfa6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cfaa:	74 0b                	je     c000cfb7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cfac:	50                   	push   eax
c000cfad:	6a 01                	push   0x1
c000cfaf:	56                   	push   esi
c000cfb0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cfb4:	50                   	push   eax
c000cfb5:	eb 0a                	jmp    c000cfc1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cfb7:	50                   	push   eax
c000cfb8:	6a 00                	push   0x0
c000cfba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cfbe:	50                   	push   eax
c000cfbf:	6a 00                	push   0x0
c000cfc1:	e8 44 fd ff ff       	call   c000cd0a <CmGetMatch(char*, char*, bool, bool*)>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	83 f8 ff             	cmp    eax,0xffffffff
c000cfcc:	75 1a                	jne    c000cfe8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cfce:	83 ec 0c             	sub    esp,0xc
c000cfd1:	68 53 24 02 c0       	push   0xc0022453
c000cfd6:	e8 0b 1d 00 00       	call   c000ece6 <KePanic(char const*)>
c000cfdb:	83 c4 10             	add    esp,0x10
c000cfde:	b8 02 00 00 00       	mov    eax,0x2
c000cfe3:	e9 bb 00 00 00       	jmp    c000d0a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfe8:	83 ff 18             	cmp    edi,0x18
c000cfeb:	75 1a                	jne    c000d007 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000cfed:	83 ec 0c             	sub    esp,0xc
c000cff0:	68 68 24 02 c0       	push   0xc0022468
c000cff5:	e8 ec 1c 00 00       	call   c000ece6 <KePanic(char const*)>
c000cffa:	83 c4 10             	add    esp,0x10
c000cffd:	b8 01 00 00 00       	mov    eax,0x1
c000d002:	e9 9c 00 00 00       	jmp    c000d0a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d007:	47                   	inc    edi
c000d008:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d00d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d011:	0f 45 dd             	cmovne ebx,ebp
c000d014:	83 ec 0c             	sub    esp,0xc
c000d017:	56                   	push   esi
c000d018:	e8 63 35 ff ff       	call   c0000580 <strlen>
c000d01d:	83 c4 10             	add    esp,0x10
c000d020:	85 c0                	test   eax,eax
c000d022:	74 06                	je     c000d02a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000d024:	43                   	inc    ebx
c000d025:	e9 41 ff ff ff       	jmp    c000cf6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d02a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d032:	31 db                	xor    ebx,ebx
c000d034:	31 ff                	xor    edi,edi
c000d036:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d03e:	50                   	push   eax
c000d03f:	6a 12                	push   0x12
c000d041:	68 ee 00 00 00       	push   0xee
c000d046:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d04d:	e8 9e 34 ff ff       	call   c00004f0 <memset>
c000d052:	83 c4 10             	add    esp,0x10
c000d055:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d059:	83 fb 17             	cmp    ebx,0x17
c000d05c:	7e 26                	jle    c000d084 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d05e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d062:	50                   	push   eax
c000d063:	6a 08                	push   0x8
c000d065:	55                   	push   ebp
c000d066:	56                   	push   esi
c000d067:	e8 2f fd ff ff       	call   c000cd9b <CmGetShift(unsigned int*, int*, int, bool*)>
c000d06c:	83 c4 10             	add    esp,0x10
c000d06f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d074:	74 26                	je     c000d09c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d076:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d07d:	4b                   	dec    ebx
c000d07e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d081:	47                   	inc    edi
c000d082:	eb 1c                	jmp    c000d0a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d084:	6a 06                	push   0x6
c000d086:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d08b:	50                   	push   eax
c000d08c:	55                   	push   ebp
c000d08d:	56                   	push   esi
c000d08e:	e8 d8 fc ff ff       	call   c000cd6b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d093:	83 c4 10             	add    esp,0x10
c000d096:	84 c0                	test   al,al
c000d098:	75 06                	jne    c000d0a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d09a:	eb c2                	jmp    c000d05e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d09c:	31 c0                	xor    eax,eax
c000d09e:	eb 03                	jmp    c000d0a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d0a0:	43                   	inc    ebx
c000d0a1:	eb b2                	jmp    c000d055 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d0a3:	83 c4 6c             	add    esp,0x6c
c000d0a6:	5b                   	pop    ebx
c000d0a7:	5e                   	pop    esi
c000d0a8:	5f                   	pop    edi
c000d0a9:	5d                   	pop    ebp
c000d0aa:	c3                   	ret    

c000d0ab <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d0ab:	53                   	push   ebx
c000d0ac:	83 ec 3c             	sub    esp,0x3c
c000d0af:	6a 2b                	push   0x2b
c000d0b1:	6a 00                	push   0x0
c000d0b3:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d0b7:	53                   	push   ebx
c000d0b8:	e8 33 34 ff ff       	call   c00004f0 <memset>
c000d0bd:	58                   	pop    eax
c000d0be:	5a                   	pop    edx
c000d0bf:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d0c3:	50                   	push   eax
c000d0c4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d0c8:	e8 41 fe ff ff       	call   c000cf0e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d0cd:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d0d2:	83 c4 0c             	add    esp,0xc
c000d0d5:	6a 15                	push   0x15
c000d0d7:	6a 00                	push   0x0
c000d0d9:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d0dd:	50                   	push   eax
c000d0de:	e8 0d 34 ff ff       	call   c00004f0 <memset>
c000d0e3:	53                   	push   ebx
c000d0e4:	6a 00                	push   0x0
c000d0e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0ee:	e8 eb f9 ff ff       	call   c000cade <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d0f3:	83 c4 58             	add    esp,0x58
c000d0f6:	5b                   	pop    ebx
c000d0f7:	c3                   	ret    

c000d0f8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d0f8:	56                   	push   esi
c000d0f9:	53                   	push   ebx
c000d0fa:	83 ec 48             	sub    esp,0x48
c000d0fd:	6a 12                	push   0x12
c000d0ff:	68 ff 00 00 00       	push   0xff
c000d104:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d108:	56                   	push   esi
c000d109:	e8 e2 33 ff ff       	call   c00004f0 <memset>
c000d10e:	5a                   	pop    edx
c000d10f:	59                   	pop    ecx
c000d110:	56                   	push   esi
c000d111:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d115:	e8 f4 fd ff ff       	call   c000cf0e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d11a:	83 c4 10             	add    esp,0x10
c000d11d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d121:	85 db                	test   ebx,ebx
c000d123:	74 42                	je     c000d167 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d125:	50                   	push   eax
c000d126:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d12a:	50                   	push   eax
c000d12b:	53                   	push   ebx
c000d12c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d130:	e8 ff f6 ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d135:	83 c4 0c             	add    esp,0xc
c000d138:	6a 12                	push   0x12
c000d13a:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d13e:	50                   	push   eax
c000d13f:	56                   	push   esi
c000d140:	e8 3b 32 ff ff       	call   c0000380 <memcmp>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	85 c0                	test   eax,eax
c000d14a:	74 1e                	je     c000d16a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d14c:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d151:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d156:	c1 e3 08             	shl    ebx,0x8
c000d159:	09 d8                	or     eax,ebx
c000d15b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d160:	c1 e3 10             	shl    ebx,0x10
c000d163:	09 c3                	or     ebx,eax
c000d165:	eb ba                	jmp    c000d121 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d167:	83 cb ff             	or     ebx,0xffffffff
c000d16a:	83 c4 44             	add    esp,0x44
c000d16d:	89 d8                	mov    eax,ebx
c000d16f:	5b                   	pop    ebx
c000d170:	5e                   	pop    esi
c000d171:	c3                   	ret    

c000d172 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d172:	57                   	push   edi
c000d173:	56                   	push   esi
c000d174:	53                   	push   ebx
c000d175:	83 ec 34             	sub    esp,0x34
c000d178:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d17c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d180:	6a 2b                	push   0x2b
c000d182:	6a 00                	push   0x0
c000d184:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d188:	53                   	push   ebx
c000d189:	e8 62 33 ff ff       	call   c00004f0 <memset>
c000d18e:	58                   	pop    eax
c000d18f:	5a                   	pop    edx
c000d190:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d194:	50                   	push   eax
c000d195:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d199:	e8 70 fd ff ff       	call   c000cf0e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d19e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d1a2:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d1a6:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d1aa:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d1ae:	53                   	push   ebx
c000d1af:	6a 00                	push   0x0
c000d1b1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d1b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d1b9:	e8 20 f9 ff ff       	call   c000cade <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1be:	83 c4 50             	add    esp,0x50
c000d1c1:	5b                   	pop    ebx
c000d1c2:	5e                   	pop    esi
c000d1c3:	5f                   	pop    edi
c000d1c4:	c3                   	ret    

c000d1c5 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d1c5:	55                   	push   ebp
c000d1c6:	57                   	push   edi
c000d1c7:	56                   	push   esi
c000d1c8:	53                   	push   ebx
c000d1c9:	83 ec 40             	sub    esp,0x40
c000d1cc:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d1d0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d1d4:	6a 2b                	push   0x2b
c000d1d6:	6a 00                	push   0x0
c000d1d8:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d1dc:	56                   	push   esi
c000d1dd:	e8 0e 33 ff ff       	call   c00004f0 <memset>
c000d1e2:	5f                   	pop    edi
c000d1e3:	89 ef                	mov    edi,ebp
c000d1e5:	58                   	pop    eax
c000d1e6:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1ea:	50                   	push   eax
c000d1eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d1ef:	e8 1a fd ff ff       	call   c000cf0e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1f4:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d1f9:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d1fe:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d203:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d208:	83 c4 10             	add    esp,0x10
c000d20b:	85 ed                	test   ebp,ebp
c000d20d:	74 14                	je     c000d223 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d20f:	51                   	push   ecx
c000d210:	51                   	push   ecx
c000d211:	57                   	push   edi
c000d212:	53                   	push   ebx
c000d213:	e8 0e f7 ff ff       	call   c000c926 <CmGetNext(Reghive_Tag*, int)>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	85 c0                	test   eax,eax
c000d21d:	74 04                	je     c000d223 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d21f:	89 c7                	mov    edi,eax
c000d221:	eb e8                	jmp    c000d20b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d223:	56                   	push   esi
c000d224:	6a 00                	push   0x0
c000d226:	57                   	push   edi
c000d227:	53                   	push   ebx
c000d228:	e8 b1 f8 ff ff       	call   c000cade <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d22d:	83 c4 0c             	add    esp,0xc
c000d230:	56                   	push   esi
c000d231:	50                   	push   eax
c000d232:	89 c7                	mov    edi,eax
c000d234:	53                   	push   ebx
c000d235:	e8 fa f5 ff ff       	call   c000c834 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d23a:	58                   	pop    eax
c000d23b:	5a                   	pop    edx
c000d23c:	6a 6c                	push   0x6c
c000d23e:	6a 00                	push   0x0
c000d240:	6a 00                	push   0x0
c000d242:	68 79 24 02 c0       	push   0xc0022479
c000d247:	57                   	push   edi
c000d248:	53                   	push   ebx
c000d249:	e8 24 ff ff ff       	call   c000d172 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d24e:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d252:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d256:	c1 e8 10             	shr    eax,0x10
c000d259:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d25d:	83 c4 1c             	add    esp,0x1c
c000d260:	56                   	push   esi
c000d261:	57                   	push   edi
c000d262:	53                   	push   ebx
c000d263:	e8 f0 f6 ff ff       	call   c000c958 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d268:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d26d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d272:	c1 e0 08             	shl    eax,0x8
c000d275:	09 c2                	or     edx,eax
c000d277:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d27c:	83 c4 4c             	add    esp,0x4c
c000d27f:	5b                   	pop    ebx
c000d280:	5e                   	pop    esi
c000d281:	c1 e0 10             	shl    eax,0x10
c000d284:	09 d0                	or     eax,edx
c000d286:	5f                   	pop    edi
c000d287:	5d                   	pop    ebp
c000d288:	c3                   	ret    

c000d289 <zStrtok(char*, char const*)>:
c000d289:	55                   	push   ebp
c000d28a:	57                   	push   edi
c000d28b:	56                   	push   esi
c000d28c:	53                   	push   ebx
c000d28d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d295:	85 db                	test   ebx,ebx
c000d297:	74 2f                	je     c000d2c8 <zStrtok(char*, char const*)+0x3f>
c000d299:	85 c0                	test   eax,eax
c000d29b:	75 09                	jne    c000d2a6 <zStrtok(char*, char const*)+0x1d>
c000d29d:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d2a2:	85 c0                	test   eax,eax
c000d2a4:	74 50                	je     c000d2f6 <zStrtok(char*, char const*)+0x6d>
c000d2a6:	31 c9                	xor    ecx,ecx
c000d2a8:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d2ac:	74 03                	je     c000d2b1 <zStrtok(char*, char const*)+0x28>
c000d2ae:	41                   	inc    ecx
c000d2af:	eb f7                	jmp    c000d2a8 <zStrtok(char*, char const*)+0x1f>
c000d2b1:	31 d2                	xor    edx,edx
c000d2b3:	39 ca                	cmp    edx,ecx
c000d2b5:	74 15                	je     c000d2cc <zStrtok(char*, char const*)+0x43>
c000d2b7:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d2bb:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d2be:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d2c1:	39 ee                	cmp    esi,ebp
c000d2c3:	74 13                	je     c000d2d8 <zStrtok(char*, char const*)+0x4f>
c000d2c5:	42                   	inc    edx
c000d2c6:	eb eb                	jmp    c000d2b3 <zStrtok(char*, char const*)+0x2a>
c000d2c8:	31 c0                	xor    eax,eax
c000d2ca:	eb 2a                	jmp    c000d2f6 <zStrtok(char*, char const*)+0x6d>
c000d2cc:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d2d6:	eb 1e                	jmp    c000d2f6 <zStrtok(char*, char const*)+0x6d>
c000d2d8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d2db:	39 ce                	cmp    esi,ecx
c000d2dd:	75 0a                	jne    c000d2e9 <zStrtok(char*, char const*)+0x60>
c000d2df:	40                   	inc    eax
c000d2e0:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d2e5:	89 d8                	mov    eax,ebx
c000d2e7:	eb 0d                	jmp    c000d2f6 <zStrtok(char*, char const*)+0x6d>
c000d2e9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d2ec:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d2f0:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d2f6:	5b                   	pop    ebx
c000d2f7:	5e                   	pop    esi
c000d2f8:	5f                   	pop    edi
c000d2f9:	5d                   	pop    ebp
c000d2fa:	c3                   	ret    

c000d2fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d2fb:	57                   	push   edi
c000d2fc:	56                   	push   esi
c000d2fd:	53                   	push   ebx
c000d2fe:	81 ec 08 01 00 00    	sub    esp,0x108
c000d304:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d30b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d312:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d316:	53                   	push   ebx
c000d317:	e8 34 33 ff ff       	call   c0000650 <strcpy>
c000d31c:	59                   	pop    ecx
c000d31d:	5e                   	pop    esi
c000d31e:	68 46 36 02 c0       	push   0xc0023646
c000d323:	53                   	push   ebx
c000d324:	bb 01 00 00 00       	mov    ebx,0x1
c000d329:	e8 5b ff ff ff       	call   c000d289 <zStrtok(char*, char const*)>
c000d32e:	83 c4 10             	add    esp,0x10
c000d331:	85 c0                	test   eax,eax
c000d333:	74 3b                	je     c000d370 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d335:	52                   	push   edx
c000d336:	50                   	push   eax
c000d337:	6a 01                	push   0x1
c000d339:	57                   	push   edi
c000d33a:	e8 b9 fd ff ff       	call   c000d0f8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d33f:	59                   	pop    ecx
c000d340:	5e                   	pop    esi
c000d341:	89 c3                	mov    ebx,eax
c000d343:	68 46 36 02 c0       	push   0xc0023646
c000d348:	6a 00                	push   0x0
c000d34a:	e8 3a ff ff ff       	call   c000d289 <zStrtok(char*, char const*)>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	85 c0                	test   eax,eax
c000d354:	89 c6                	mov    esi,eax
c000d356:	74 18                	je     c000d370 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d358:	52                   	push   edx
c000d359:	52                   	push   edx
c000d35a:	53                   	push   ebx
c000d35b:	57                   	push   edi
c000d35c:	e8 86 f5 ff ff       	call   c000c8e7 <CmEnterDirectory(Reghive_Tag*, int)>
c000d361:	83 c4 10             	add    esp,0x10
c000d364:	83 f8 ff             	cmp    eax,0xffffffff
c000d367:	89 c3                	mov    ebx,eax
c000d369:	74 05                	je     c000d370 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d36b:	50                   	push   eax
c000d36c:	56                   	push   esi
c000d36d:	53                   	push   ebx
c000d36e:	eb c9                	jmp    c000d339 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d370:	81 c4 00 01 00 00    	add    esp,0x100
c000d376:	89 d8                	mov    eax,ebx
c000d378:	5b                   	pop    ebx
c000d379:	5e                   	pop    esi
c000d37a:	5f                   	pop    edi
c000d37b:	c3                   	ret    

c000d37c <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d37c:	55                   	push   ebp
c000d37d:	57                   	push   edi
c000d37e:	56                   	push   esi
c000d37f:	53                   	push   ebx
c000d380:	83 ec 5c             	sub    esp,0x5c
c000d383:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d387:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d38b:	85 db                	test   ebx,ebx
c000d38d:	0f 8e 84 00 00 00    	jle    c000d417 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d393:	57                   	push   edi
c000d394:	31 ed                	xor    ebp,ebp
c000d396:	6a 32                	push   0x32
c000d398:	6a 00                	push   0x0
c000d39a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d39e:	57                   	push   edi
c000d39f:	e8 4c 31 ff ff       	call   c00004f0 <memset>
c000d3a4:	83 c4 0c             	add    esp,0xc
c000d3a7:	57                   	push   edi
c000d3a8:	53                   	push   ebx
c000d3a9:	56                   	push   esi
c000d3aa:	e8 31 fb ff ff       	call   c000cee0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d3af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d3b3:	83 c4 10             	add    esp,0x10
c000d3b6:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d3ba:	7d 13                	jge    c000d3cf <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d3bc:	83 ec 0c             	sub    esp,0xc
c000d3bf:	45                   	inc    ebp
c000d3c0:	68 54 3b 02 c0       	push   0xc0023b54
c000d3c5:	e8 84 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	eb e7                	jmp    c000d3b6 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d3cf:	51                   	push   ecx
c000d3d0:	57                   	push   edi
c000d3d1:	53                   	push   ebx
c000d3d2:	68 7f 24 02 c0       	push   0xc002247f
c000d3d7:	e8 72 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d3dc:	83 c4 10             	add    esp,0x10
c000d3df:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d3e4:	75 1e                	jne    c000d404 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d3e6:	52                   	push   edx
c000d3e7:	52                   	push   edx
c000d3e8:	53                   	push   ebx
c000d3e9:	56                   	push   esi
c000d3ea:	e8 f8 f4 ff ff       	call   c000c8e7 <CmEnterDirectory(Reghive_Tag*, int)>
c000d3ef:	83 c4 0c             	add    esp,0xc
c000d3f2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d3f6:	8d 51 04             	lea    edx,[ecx+0x4]
c000d3f9:	52                   	push   edx
c000d3fa:	50                   	push   eax
c000d3fb:	56                   	push   esi
c000d3fc:	e8 7b ff ff ff       	call   c000d37c <CmDisplayTree(Reghive_Tag*, int, int)>
c000d401:	83 c4 10             	add    esp,0x10
c000d404:	50                   	push   eax
c000d405:	50                   	push   eax
c000d406:	53                   	push   ebx
c000d407:	56                   	push   esi
c000d408:	e8 19 f5 ff ff       	call   c000c926 <CmGetNext(Reghive_Tag*, int)>
c000d40d:	83 c4 10             	add    esp,0x10
c000d410:	89 c3                	mov    ebx,eax
c000d412:	e9 74 ff ff ff       	jmp    c000d38b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d417:	83 c4 5c             	add    esp,0x5c
c000d41a:	5b                   	pop    ebx
c000d41b:	5e                   	pop    esi
c000d41c:	5f                   	pop    edi
c000d41d:	5d                   	pop    ebp
c000d41e:	c3                   	ret    

c000d41f <CmSplitFinalSlashInPlace(char*)>:
c000d41f:	53                   	push   ebx
c000d420:	83 ec 14             	sub    esp,0x14
c000d423:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d427:	53                   	push   ebx
c000d428:	e8 53 31 ff ff       	call   c0000580 <strlen>
c000d42d:	83 c4 10             	add    esp,0x10
c000d430:	48                   	dec    eax
c000d431:	85 c0                	test   eax,eax
c000d433:	74 15                	je     c000d44a <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d435:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d439:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d43c:	75 09                	jne    c000d447 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d43e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d441:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d445:	eb 05                	jmp    c000d44c <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d447:	48                   	dec    eax
c000d448:	eb e7                	jmp    c000d431 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d44a:	31 c0                	xor    eax,eax
c000d44c:	83 c4 08             	add    esp,0x8
c000d44f:	5b                   	pop    ebx
c000d450:	c3                   	ret    
c000d451:	66 90                	xchg   ax,ax
c000d453:	90                   	nop

c000d454 <Krnl::handlePowerButton()>:
c000d454:	83 ec 0c             	sub    esp,0xc
c000d457:	e8 bf 21 00 00       	call   c000f61b <KeHandlePowerButton()>
c000d45c:	90                   	nop
c000d45d:	83 c4 0c             	add    esp,0xc
c000d460:	c3                   	ret    
c000d461:	8d 76 00             	lea    esi,[esi+0x0]

c000d464 <Krnl::handleSleepButton()>:
c000d464:	83 ec 0c             	sub    esp,0xc
c000d467:	e8 c7 21 00 00       	call   c000f633 <KeHandleSleepButton()>
c000d46c:	90                   	nop
c000d46d:	83 c4 0c             	add    esp,0xc
c000d470:	c3                   	ret    
c000d471:	90                   	nop

c000d472 <Computer::close(int, int, void*)>:
c000d472:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d477:	c3                   	ret    

c000d478 <Computer::open(int, int, void*)>:
c000d478:	56                   	push   esi
c000d479:	53                   	push   ebx
c000d47a:	83 ec 04             	sub    esp,0x4
c000d47d:	f6 05 90 cd 02 c0 04 	test   BYTE PTR ds:0xc002cd90,0x4
c000d484:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d488:	0f 94 05 e0 4e 02 c0 	sete   BYTE PTR ds:0xc0024ee0
c000d48f:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d495:	74 10                	je     c000d4a7 <Computer::open(int, int, void*)+0x2f>
c000d497:	83 ec 0c             	sub    esp,0xc
c000d49a:	68 8c 24 02 c0       	push   0xc002248c
c000d49f:	e8 42 18 00 00       	call   c000ece6 <KePanic(char const*)>
c000d4a4:	83 c4 10             	add    esp,0x10
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	68 44 25 02 c0       	push   0xc0022544
c000d4af:	e8 37 f1 ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d4b4:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d4bb:	e8 e0 14 00 00       	call   c000e9a0 <malloc>
c000d4c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4c3:	89 c6                	mov    esi,eax
c000d4c5:	e8 26 e8 ff ff       	call   c000bcf0 <ACPI::ACPI()>
c000d4ca:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d4d0:	58                   	pop    eax
c000d4d1:	5a                   	pop    edx
c000d4d2:	56                   	push   esi
c000d4d3:	53                   	push   ebx
c000d4d4:	e8 8d bb ff ff       	call   c0009066 <Device::addChild(Device*)>
c000d4d9:	c7 04 24 5c 25 02 c0 	mov    DWORD PTR [esp],0xc002255c
c000d4e0:	e8 06 f1 ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d4e5:	e8 cf a9 00 00       	call   c0017eb9 <HalEnableNMI()>
c000d4ea:	e8 ff 9b 00 00       	call   c00170ee <HalDetectFeatures()>
c000d4ef:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d4f6:	e8 a5 14 00 00       	call   c000e9a0 <malloc>
c000d4fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4fe:	89 c6                	mov    esi,eax
c000d500:	e8 ef b4 00 00       	call   c00189f4 <CPU::CPU()>
c000d505:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d50b:	59                   	pop    ecx
c000d50c:	58                   	pop    eax
c000d50d:	56                   	push   esi
c000d50e:	53                   	push   ebx
c000d50f:	e8 52 bb ff ff       	call   c0009066 <Device::addChild(Device*)>
c000d514:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d518:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d51e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d520:	51                   	push   ecx
c000d521:	6a 00                	push   0x0
c000d523:	6a 00                	push   0x0
c000d525:	50                   	push   eax
c000d526:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d529:	83 c4 14             	add    esp,0x14
c000d52c:	68 b8 24 02 c0       	push   0xc00224b8
c000d531:	e8 b5 f0 ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d536:	e8 14 b1 00 00       	call   c001864f <HalInitialiseCoprocessor()>
c000d53b:	c7 04 24 76 25 02 c0 	mov    DWORD PTR [esp],0xc0022576
c000d542:	e8 a4 f0 ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d547:	c7 04 24 5e d5 00 c0 	mov    DWORD PTR [esp],0xc000d55e
c000d54e:	e8 b9 80 00 00       	call   c001560c <setupMultitasking(void (*)())>
c000d553:	83 c4 14             	add    esp,0x14
c000d556:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d55b:	5b                   	pop    ebx
c000d55c:	5e                   	pop    esi
c000d55d:	c3                   	ret    

c000d55e <KeFirstTask()>:
c000d55e:	53                   	push   ebx
c000d55f:	83 ec 14             	sub    esp,0x14
c000d562:	fb                   	sti    
c000d563:	68 91 25 02 c0       	push   0xc0022591
c000d568:	e8 7e f0 ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d56d:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d574:	e8 27 14 00 00       	call   c000e9a0 <malloc>
c000d579:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d580:	89 c3                	mov    ebx,eax
c000d582:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000d587:	50                   	push   eax
c000d588:	68 aa 25 02 c0       	push   0xc00225aa
c000d58d:	6a 01                	push   0x1
c000d58f:	53                   	push   ebx
c000d590:	e8 27 7d 00 00       	call   c00152bc <Process::Process(bool, char const*, Process*, char**)>
c000d595:	83 c4 20             	add    esp,0x20
c000d598:	68 ff 00 00 00       	push   0xff
c000d59d:	6a 00                	push   0x0
c000d59f:	68 cd e2 00 c0       	push   0xc000e2cd
c000d5a4:	53                   	push   ebx
c000d5a5:	e8 3a 7f 00 00       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c000d5aa:	8b 15 d8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d8
c000d5b0:	6a 7a                	push   0x7a
c000d5b2:	6a 00                	push   0x0
c000d5b4:	68 c8 5d 01 c0       	push   0xc0015dc8
c000d5b9:	52                   	push   edx
c000d5ba:	e8 25 7f 00 00       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c000d5bf:	83 c4 14             	add    esp,0x14
c000d5c2:	68 dc 24 02 c0       	push   0xc00224dc
c000d5c7:	a3 90 d6 02 c0       	mov    ds:0xc002d690,eax
c000d5cc:	e8 1a f0 ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d5d1:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d5d8:	e8 60 21 00 00       	call   c000f73d <KeInitRand()>
c000d5dd:	e8 c0 8b 00 00       	call   c00161a2 <Vm::initialise8086()>
c000d5e2:	e8 ef a7 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d5e7:	c7 04 24 60 22 02 c0 	mov    DWORD PTR [esp],0xc0022260
c000d5ee:	e8 f8 ef ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d5f3:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d5f8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d5fe:	8b 10                	mov    edx,DWORD PTR [eax]
c000d600:	6a 00                	push   0x0
c000d602:	6a 00                	push   0x0
c000d604:	6a 00                	push   0x0
c000d606:	50                   	push   eax
c000d607:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d60a:	83 c4 14             	add    esp,0x14
c000d60d:	68 dc 24 02 c0       	push   0xc00224dc
c000d612:	e8 d4 ef ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d617:	e8 9f 9f ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d61c:	e8 f5 05 00 00       	call   c000dc16 <KeLoadSystemEnv()>
c000d621:	e8 25 20 00 00       	call   c000f64b <KeSetupPowerManager()>
c000d626:	c7 04 24 00 25 02 c0 	mov    DWORD PTR [esp],0xc0022500
c000d62d:	e8 b9 ef ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d632:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d637:	59                   	pop    ecx
c000d638:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d63e:	53                   	push   ebx
c000d63f:	e8 3e bb ff ff       	call   c0009182 <Device::loadDriversForAll()>
c000d644:	c7 04 24 b7 25 02 c0 	mov    DWORD PTR [esp],0xc00225b7
c000d64b:	e8 9b ef ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c000d650:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d656:	58                   	pop    eax
c000d657:	5a                   	pop    edx
c000d658:	6a 01                	push   0x1
c000d65a:	68 c8 25 02 c0       	push   0xc00225c8
c000d65f:	e8 de 75 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c000d664:	59                   	pop    ecx
c000d665:	5a                   	pop    edx
c000d666:	53                   	push   ebx
c000d667:	50                   	push   eax
c000d668:	e8 36 78 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c000d66d:	83 c4 10             	add    esp,0x10
c000d670:	83 ec 0c             	sub    esp,0xc
c000d673:	6a 02                	push   0x2
c000d675:	e8 76 81 00 00       	call   c00157f0 <blockTask(TaskState)>
c000d67a:	83 c4 10             	add    esp,0x10
c000d67d:	eb f1                	jmp    c000d670 <KeFirstTask()+0x112>
c000d67f:	90                   	nop

c000d680 <Computer::Computer()>:
c000d680:	83 ec 0c             	sub    esp,0xc
c000d683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d687:	83 ec 08             	sub    esp,0x8
c000d68a:	68 e4 25 02 c0       	push   0xc00225e4
c000d68f:	50                   	push   eax
c000d690:	e8 33 bb ff ff       	call   c00091c8 <Device::Device(char const*)>
c000d695:	83 c4 10             	add    esp,0x10
c000d698:	ba f8 25 02 c0       	mov    edx,0xc00225f8
c000d69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a1:	89 10                	mov    DWORD PTR [eax],edx
c000d6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d6bf:	90                   	nop
c000d6c0:	83 c4 0c             	add    esp,0xc
c000d6c3:	c3                   	ret    

c000d6c4 <KePrepareShutdown()>:
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	e8 8d ee ff ff       	call   c000c559 <KeExecuteAtexit()>
c000d6cc:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d6d1:	83 ec 0c             	sub    esp,0xc
c000d6d4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d6da:	50                   	push   eax
c000d6db:	e8 ee bb ff ff       	call   c00092ce <Device::closeAll()>
c000d6e0:	83 c4 1c             	add    esp,0x1c
c000d6e3:	c3                   	ret    

c000d6e4 <KeShutdown()>:
c000d6e4:	83 ec 0c             	sub    esp,0xc
c000d6e7:	e8 d8 ff ff ff       	call   c000d6c4 <KePrepareShutdown()>
c000d6ec:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d6f1:	85 c0                	test   eax,eax
c000d6f3:	74 02                	je     c000d6f7 <KeShutdown()+0x13>
c000d6f5:	ff d0                	call   eax
c000d6f7:	83 ec 0c             	sub    esp,0xc
c000d6fa:	68 20 25 02 c0       	push   0xc0022520
c000d6ff:	e8 e2 15 00 00       	call   c000ece6 <KePanic(char const*)>
c000d704:	83 c4 1c             	add    esp,0x1c
c000d707:	c3                   	ret    

c000d708 <KeSleep()>:
c000d708:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d70d:	85 c0                	test   eax,eax
c000d70f:	74 02                	je     c000d713 <KeSleep()+0xb>
c000d711:	ff e0                	jmp    eax
c000d713:	c3                   	ret    

c000d714 <KeRestart()>:
c000d714:	83 ec 0c             	sub    esp,0xc
c000d717:	e8 a8 ff ff ff       	call   c000d6c4 <KePrepareShutdown()>
c000d71c:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000d721:	85 c0                	test   eax,eax
c000d723:	74 02                	je     c000d727 <KeRestart()+0x13>
c000d725:	ff d0                	call   eax
c000d727:	e4 64                	in     al,0x64
c000d729:	a8 02                	test   al,0x2
c000d72b:	75 fa                	jne    c000d727 <KeRestart()+0x13>
c000d72d:	b0 fe                	mov    al,0xfe
c000d72f:	e6 64                	out    0x64,al
c000d731:	83 c4 0c             	add    esp,0xc
c000d734:	c3                   	ret    

c000d735 <KeCalculateCRC32(unsigned char*, int)>:
c000d735:	53                   	push   ebx
c000d736:	83 c8 ff             	or     eax,0xffffffff
c000d739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d73d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d741:	01 cb                	add    ebx,ecx
c000d743:	39 d9                	cmp    ecx,ebx
c000d745:	74 15                	je     c000d75c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d747:	41                   	inc    ecx
c000d748:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d74b:	31 c2                	xor    edx,eax
c000d74d:	c1 e8 08             	shr    eax,0x8
c000d750:	0f b6 d2             	movzx  edx,dl
c000d753:	33 04 95 00 49 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdb700]
c000d75a:	eb e7                	jmp    c000d743 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d75c:	5b                   	pop    ebx
c000d75d:	f7 d0                	not    eax
c000d75f:	c3                   	ret    

c000d760 <EnvVarContainer::getEnv(char const*)>:
c000d760:	57                   	push   edi
c000d761:	56                   	push   esi
c000d762:	53                   	push   ebx
c000d763:	31 db                	xor    ebx,ebx
c000d765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d769:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d76b:	7e 2b                	jle    c000d798 <EnvVarContainer::getEnv(char const*)+0x38>
c000d76d:	50                   	push   eax
c000d76e:	50                   	push   eax
c000d76f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d772:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d779:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d77c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d780:	e8 fb 2f ff ff       	call   c0000780 <strcmp>
c000d785:	83 c4 10             	add    esp,0x10
c000d788:	85 c0                	test   eax,eax
c000d78a:	75 09                	jne    c000d795 <EnvVarContainer::getEnv(char const*)+0x35>
c000d78c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d78f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d793:	eb 05                	jmp    c000d79a <EnvVarContainer::getEnv(char const*)+0x3a>
c000d795:	43                   	inc    ebx
c000d796:	eb d1                	jmp    c000d769 <EnvVarContainer::getEnv(char const*)+0x9>
c000d798:	31 c0                	xor    eax,eax
c000d79a:	5b                   	pop    ebx
c000d79b:	5e                   	pop    esi
c000d79c:	5f                   	pop    edi
c000d79d:	c3                   	ret    

c000d79e <EnvVarContainer::setEnv(char const*, char const*)>:
c000d79e:	55                   	push   ebp
c000d79f:	57                   	push   edi
c000d7a0:	56                   	push   esi
c000d7a1:	53                   	push   ebx
c000d7a2:	83 ec 28             	sub    esp,0x28
c000d7a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d7a9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d7ad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d7b1:	56                   	push   esi
c000d7b2:	e8 c9 2d ff ff       	call   c0000580 <strlen>
c000d7b7:	40                   	inc    eax
c000d7b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7bb:	e8 e0 11 00 00       	call   c000e9a0 <malloc>
c000d7c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d7c7:	e8 b4 2d ff ff       	call   c0000580 <strlen>
c000d7cc:	40                   	inc    eax
c000d7cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7d0:	e8 cb 11 00 00       	call   c000e9a0 <malloc>
c000d7d5:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7dc:	e8 9f 2d ff ff       	call   c0000580 <strlen>
c000d7e1:	83 c4 0c             	add    esp,0xc
c000d7e4:	40                   	inc    eax
c000d7e5:	50                   	push   eax
c000d7e6:	6a 00                	push   0x0
c000d7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7ec:	e8 ff 2c ff ff       	call   c00004f0 <memset>
c000d7f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7f4:	e8 87 2d ff ff       	call   c0000580 <strlen>
c000d7f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d7fd:	8d 48 01             	lea    ecx,[eax+0x1]
c000d800:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d802:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d805:	89 de                	mov    esi,ebx
c000d807:	e8 74 2d ff ff       	call   c0000580 <strlen>
c000d80c:	83 c4 0c             	add    esp,0xc
c000d80f:	40                   	inc    eax
c000d810:	50                   	push   eax
c000d811:	6a 00                	push   0x0
c000d813:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d817:	e8 d4 2c ff ff       	call   c00004f0 <memset>
c000d81c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d81f:	e8 5c 2d ff ff       	call   c0000580 <strlen>
c000d824:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d828:	8d 48 01             	lea    ecx,[eax+0x1]
c000d82b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d82d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d830:	40                   	inc    eax
c000d831:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d834:	c1 e0 03             	shl    eax,0x3
c000d837:	5a                   	pop    edx
c000d838:	59                   	pop    ecx
c000d839:	50                   	push   eax
c000d83a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d83d:	e8 4a 11 00 00       	call   c000e98c <realloc>
c000d842:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d845:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d849:	b9 08 00 00 00       	mov    ecx,0x8
c000d84e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d851:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d857:	83 c4 2c             	add    esp,0x2c
c000d85a:	5b                   	pop    ebx
c000d85b:	5e                   	pop    esi
c000d85c:	5f                   	pop    edi
c000d85d:	5d                   	pop    ebp
c000d85e:	c3                   	ret    
c000d85f:	90                   	nop

c000d860 <EnvVarContainer::deleteEnv(char const*)>:
c000d860:	c3                   	ret    
c000d861:	90                   	nop

c000d862 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d862:	55                   	push   ebp
c000d863:	57                   	push   edi
c000d864:	56                   	push   esi
c000d865:	53                   	push   ebx
c000d866:	81 ec 38 01 00 00    	sub    esp,0x138
c000d86c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d873:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d87a:	68 14 01 00 00       	push   0x114
c000d87f:	e8 1c 11 00 00       	call   c000e9a0 <malloc>
c000d884:	83 c4 0c             	add    esp,0xc
c000d887:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d88a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d891:	89 c3                	mov    ebx,eax
c000d893:	50                   	push   eax
c000d894:	e8 93 a8 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000d899:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d89c:	e8 6d ab ff ff       	call   c000840e <File::exists()>
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	84 c0                	test   al,al
c000d8a6:	75 31                	jne    c000d8d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d8a8:	50                   	push   eax
c000d8a9:	50                   	push   eax
c000d8aa:	6a 12                	push   0x12
c000d8ac:	53                   	push   ebx
c000d8ad:	e8 98 a8 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d8b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d8b7:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8ba:	e8 c1 2c ff ff       	call   c0000580 <strlen>
c000d8bf:	5a                   	pop    edx
c000d8c0:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d8c4:	52                   	push   edx
c000d8c5:	31 d2                	xor    edx,edx
c000d8c7:	56                   	push   esi
c000d8c8:	52                   	push   edx
c000d8c9:	50                   	push   eax
c000d8ca:	53                   	push   ebx
c000d8cb:	ff d7                	call   edi
c000d8cd:	83 c4 14             	add    esp,0x14
c000d8d0:	53                   	push   ebx
c000d8d1:	e8 d2 a8 ff ff       	call   c00081a8 <File::close()>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	56                   	push   esi
c000d8da:	31 f6                	xor    esi,esi
c000d8dc:	68 00 01 00 00       	push   0x100
c000d8e1:	6a 00                	push   0x0
c000d8e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8e7:	50                   	push   eax
c000d8e8:	e8 03 2c ff ff       	call   c00004f0 <memset>
c000d8ed:	5f                   	pop    edi
c000d8ee:	58                   	pop    eax
c000d8ef:	6a 01                	push   0x1
c000d8f1:	53                   	push   ebx
c000d8f2:	e8 53 a8 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d8f7:	83 c4 10             	add    esp,0x10
c000d8fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d902:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d90a:	83 ec 0c             	sub    esp,0xc
c000d90d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d911:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d913:	52                   	push   edx
c000d914:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000d918:	51                   	push   ecx
c000d919:	6a 00                	push   0x0
c000d91b:	6a 01                	push   0x1
c000d91d:	53                   	push   ebx
c000d91e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d921:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d926:	83 c4 20             	add    esp,0x20
c000d929:	85 c0                	test   eax,eax
c000d92b:	89 c1                	mov    ecx,eax
c000d92d:	0f 84 36 01 00 00    	je     c000da69 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d933:	83 f8 0d             	cmp    eax,0xd
c000d936:	0f 84 22 01 00 00    	je     c000da5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d93c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d941:	0f 84 f0 00 00 00    	je     c000da37 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d947:	83 f8 0a             	cmp    eax,0xa
c000d94a:	74 13                	je     c000d95f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d94c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d951:	74 0c                	je     c000d95f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d953:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d959:	0f 8e f6 00 00 00    	jle    c000da55 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d95f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d963:	83 ec 0c             	sub    esp,0xc
c000d966:	8d 78 01             	lea    edi,[eax+0x1]
c000d969:	57                   	push   edi
c000d96a:	e8 31 10 00 00       	call   c000e9a0 <malloc>
c000d96f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d973:	8d 56 04             	lea    edx,[esi+0x4]
c000d976:	89 14 24             	mov    DWORD PTR [esp],edx
c000d979:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d981:	e8 1a 10 00 00       	call   c000e9a0 <malloc>
c000d986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d98a:	83 c4 0c             	add    esp,0xc
c000d98d:	57                   	push   edi
c000d98e:	6a 00                	push   0x0
c000d990:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d994:	e8 57 2b ff ff       	call   c00004f0 <memset>
c000d999:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d99d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d9a1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9a7:	83 c4 0c             	add    esp,0xc
c000d9aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9ae:	52                   	push   edx
c000d9af:	6a 00                	push   0x0
c000d9b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9b5:	e8 36 2b ff ff       	call   c00004f0 <memset>
c000d9ba:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d9be:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d9c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9c5:	e8 b6 2b ff ff       	call   c0000580 <strlen>
c000d9ca:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d9ce:	89 c1                	mov    ecx,eax
c000d9d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d9d5:	83 c4 10             	add    esp,0x10
c000d9d8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d9db:	40                   	inc    eax
c000d9dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d9df:	85 d2                	test   edx,edx
c000d9e1:	75 0c                	jne    c000d9ef <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d9e3:	83 ec 0c             	sub    esp,0xc
c000d9e6:	6a 08                	push   0x8
c000d9e8:	e8 b3 0f 00 00       	call   c000e9a0 <malloc>
c000d9ed:	eb 0c                	jmp    c000d9fb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000d9ef:	51                   	push   ecx
c000d9f0:	51                   	push   ecx
c000d9f1:	c1 e0 03             	shl    eax,0x3
c000d9f4:	50                   	push   eax
c000d9f5:	52                   	push   edx
c000d9f6:	e8 91 0f 00 00       	call   c000e98c <realloc>
c000d9fb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d9fe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da01:	83 c4 10             	add    esp,0x10
c000da04:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000da07:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da0b:	b9 08 00 00 00       	mov    ecx,0x8
c000da10:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da16:	50                   	push   eax
c000da17:	31 f6                	xor    esi,esi
c000da19:	68 00 01 00 00       	push   0x100
c000da1e:	6a 00                	push   0x0
c000da20:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da24:	50                   	push   eax
c000da25:	e8 c6 2a ff ff       	call   c00004f0 <memset>
c000da2a:	83 c4 10             	add    esp,0x10
c000da2d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da35:	eb 27                	jmp    c000da5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da37:	83 f8 3d             	cmp    eax,0x3d
c000da3a:	74 1e                	je     c000da5a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000da3c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000da42:	7f 07                	jg     c000da4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000da44:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000da48:	46                   	inc    esi
c000da49:	eb 13                	jmp    c000da5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da4b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000da53:	eb 09                	jmp    c000da5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da55:	83 f8 3d             	cmp    eax,0x3d
c000da58:	75 ea                	jne    c000da44 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000da5a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000da5e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000da63:	0f 85 99 fe ff ff    	jne    c000d902 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000da69:	83 ec 0c             	sub    esp,0xc
c000da6c:	53                   	push   ebx
c000da6d:	e8 36 a7 ff ff       	call   c00081a8 <File::close()>
c000da72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da7a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000da80:	5b                   	pop    ebx
c000da81:	5e                   	pop    esi
c000da82:	5f                   	pop    edi
c000da83:	5d                   	pop    ebp
c000da84:	c3                   	ret    
c000da85:	90                   	nop

c000da86 <EnvVarContainer::__loadSystem()>:
c000da86:	83 ec 10             	sub    esp,0x10
c000da89:	68 00 4d 02 c0       	push   0xc0024d00
c000da8e:	68 1c 26 02 c0       	push   0xc002261c
c000da93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da97:	e8 c6 fd ff ff       	call   c000d862 <EnvVarContainer::loadFrom(char const*, char const*)>
c000da9c:	83 c4 1c             	add    esp,0x1c
c000da9f:	c3                   	ret    

c000daa0 <EnvVarContainer::__loadUser()>:
c000daa0:	c3                   	ret    
c000daa1:	90                   	nop

c000daa2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000daa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000daac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dab0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dab4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dabb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dac2:	90                   	nop
c000dac3:	c3                   	ret    

c000dac4 <EnvVarContainer::~EnvVarContainer()>:
c000dac4:	83 ec 0c             	sub    esp,0xc
c000dac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dacb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dace:	85 c0                	test   eax,eax
c000dad0:	74 1d                	je     c000daef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad6:	8b 00                	mov    eax,DWORD PTR [eax]
c000dad8:	85 c0                	test   eax,eax
c000dada:	74 13                	je     c000daef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae3:	83 ec 0c             	sub    esp,0xc
c000dae6:	50                   	push   eax
c000dae7:	e8 c4 0e 00 00       	call   c000e9b0 <free>
c000daec:	83 c4 10             	add    esp,0x10
c000daef:	90                   	nop
c000daf0:	83 c4 0c             	add    esp,0xc
c000daf3:	c3                   	ret    

c000daf4 <KeGetEnv(Process*, char const*)>:
c000daf4:	53                   	push   ebx
c000daf5:	83 ec 08             	sub    esp,0x8
c000daf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafc:	39 05 d8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d8,eax
c000db02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db06:	74 04                	je     c000db0c <KeGetEnv(Process*, char const*)+0x18>
c000db08:	85 c0                	test   eax,eax
c000db0a:	75 0b                	jne    c000db17 <KeGetEnv(Process*, char const*)+0x23>
c000db0c:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000db11:	85 c0                	test   eax,eax
c000db13:	75 19                	jne    c000db2e <KeGetEnv(Process*, char const*)+0x3a>
c000db15:	eb 27                	jmp    c000db3e <KeGetEnv(Process*, char const*)+0x4a>
c000db17:	52                   	push   edx
c000db18:	52                   	push   edx
c000db19:	53                   	push   ebx
c000db1a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000db20:	e8 3b fc ff ff       	call   c000d760 <EnvVarContainer::getEnv(char const*)>
c000db25:	83 c4 10             	add    esp,0x10
c000db28:	85 c0                	test   eax,eax
c000db2a:	75 28                	jne    c000db54 <KeGetEnv(Process*, char const*)+0x60>
c000db2c:	eb de                	jmp    c000db0c <KeGetEnv(Process*, char const*)+0x18>
c000db2e:	52                   	push   edx
c000db2f:	52                   	push   edx
c000db30:	53                   	push   ebx
c000db31:	50                   	push   eax
c000db32:	e8 29 fc ff ff       	call   c000d760 <EnvVarContainer::getEnv(char const*)>
c000db37:	83 c4 10             	add    esp,0x10
c000db3a:	85 c0                	test   eax,eax
c000db3c:	75 16                	jne    c000db54 <KeGetEnv(Process*, char const*)+0x60>
c000db3e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db42:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000db47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db4b:	83 c4 08             	add    esp,0x8
c000db4e:	5b                   	pop    ebx
c000db4f:	e9 0c fc ff ff       	jmp    c000d760 <EnvVarContainer::getEnv(char const*)>
c000db54:	83 c4 08             	add    esp,0x8
c000db57:	5b                   	pop    ebx
c000db58:	c3                   	ret    

c000db59 <KeSetEnvSystem(char const*, char const*)>:
c000db59:	83 ec 10             	sub    esp,0x10
c000db5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db64:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000db6a:	e8 2f fc ff ff       	call   c000d79e <EnvVarContainer::setEnv(char const*, char const*)>
c000db6f:	83 c4 1c             	add    esp,0x1c
c000db72:	c3                   	ret    

c000db73 <KeSetEnvUser(char const*, char const*)>:
c000db73:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000db78:	85 c0                	test   eax,eax
c000db7a:	74 15                	je     c000db91 <KeSetEnvUser(char const*, char const*)+0x1e>
c000db7c:	83 ec 10             	sub    esp,0x10
c000db7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db87:	50                   	push   eax
c000db88:	e8 11 fc ff ff       	call   c000d79e <EnvVarContainer::setEnv(char const*, char const*)>
c000db8d:	83 c4 1c             	add    esp,0x1c
c000db90:	c3                   	ret    
c000db91:	c3                   	ret    

c000db92 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000db92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db96:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000db9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dba0:	e9 f9 fb ff ff       	jmp    c000d79e <EnvVarContainer::setEnv(char const*, char const*)>

c000dba5 <KeDeleteEnvSystem(char const*)>:
c000dba5:	c3                   	ret    

c000dba6 <KeDeleteEnvUser(char const*)>:
c000dba6:	c3                   	ret    

c000dba7 <KeDeleteEnvProcess(Process*, char const*)>:
c000dba7:	c3                   	ret    

c000dba8 <KeNewProcessEnv(Process*)>:
c000dba8:	83 ec 28             	sub    esp,0x28
c000dbab:	6a 0c                	push   0xc
c000dbad:	e8 ee 0d 00 00       	call   c000e9a0 <malloc>
c000dbb2:	5a                   	pop    edx
c000dbb3:	59                   	pop    ecx
c000dbb4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dbb8:	50                   	push   eax
c000dbb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dbbd:	e8 e0 fe ff ff       	call   c000daa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000dbc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbc6:	83 c4 2c             	add    esp,0x2c
c000dbc9:	c3                   	ret    

c000dbca <KeCopyProcessEnv(Process*, Process*)>:
c000dbca:	57                   	push   edi
c000dbcb:	56                   	push   esi
c000dbcc:	53                   	push   ebx
c000dbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd1:	83 ec 0c             	sub    esp,0xc
c000dbd4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dbda:	6a 0c                	push   0xc
c000dbdc:	e8 bf 0d 00 00       	call   c000e9a0 <malloc>
c000dbe1:	89 c3                	mov    ebx,eax
c000dbe3:	58                   	pop    eax
c000dbe4:	5a                   	pop    edx
c000dbe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe9:	53                   	push   ebx
c000dbea:	e8 b3 fe ff ff       	call   c000daa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000dbef:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbf1:	89 03                	mov    DWORD PTR [ebx],eax
c000dbf3:	c1 e0 03             	shl    eax,0x3
c000dbf6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbf9:	e8 a2 0d 00 00       	call   c000e9a0 <malloc>
c000dbfe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dc01:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dc03:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dc06:	89 c7                	mov    edi,eax
c000dc08:	c1 e1 03             	shl    ecx,0x3
c000dc0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc0d:	83 c4 10             	add    esp,0x10
c000dc10:	89 d8                	mov    eax,ebx
c000dc12:	5b                   	pop    ebx
c000dc13:	5e                   	pop    esi
c000dc14:	5f                   	pop    edi
c000dc15:	c3                   	ret    

c000dc16 <KeLoadSystemEnv()>:
c000dc16:	53                   	push   ebx
c000dc17:	83 ec 14             	sub    esp,0x14
c000dc1a:	6a 0c                	push   0xc
c000dc1c:	e8 7f 0d 00 00       	call   c000e9a0 <malloc>
c000dc21:	89 c3                	mov    ebx,eax
c000dc23:	58                   	pop    eax
c000dc24:	5a                   	pop    edx
c000dc25:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dc2b:	53                   	push   ebx
c000dc2c:	e8 71 fe ff ff       	call   c000daa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc34:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000dc3a:	e8 47 fe ff ff       	call   c000da86 <EnvVarContainer::__loadSystem()>
c000dc3f:	83 c4 18             	add    esp,0x18
c000dc42:	5b                   	pop    ebx
c000dc43:	c3                   	ret    

c000dc44 <KeLoadUserEnv()>:
c000dc44:	53                   	push   ebx
c000dc45:	83 ec 14             	sub    esp,0x14
c000dc48:	6a 0c                	push   0xc
c000dc4a:	e8 51 0d 00 00       	call   c000e9a0 <malloc>
c000dc4f:	89 c3                	mov    ebx,eax
c000dc51:	58                   	pop    eax
c000dc52:	5a                   	pop    edx
c000dc53:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dc59:	53                   	push   ebx
c000dc5a:	e8 43 fe ff ff       	call   c000daa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc5f:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000dc65:	83 c4 18             	add    esp,0x18
c000dc68:	5b                   	pop    ebx
c000dc69:	c3                   	ret    

c000dc6a <KeFlushEnv()>:
c000dc6a:	c3                   	ret    

c000dc6b <KeGetProcessTotalEnvCount(Process*)>:
c000dc6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc6f:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000dc75:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc7b:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dc80:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc82:	03 01                	add    eax,DWORD PTR [ecx]
c000dc84:	85 d2                	test   edx,edx
c000dc86:	74 02                	je     c000dc8a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dc88:	03 02                	add    eax,DWORD PTR [edx]
c000dc8a:	c3                   	ret    

c000dc8b <KeGetProcessEnvPair(Process*, int)>:
c000dc8b:	57                   	push   edi
c000dc8c:	56                   	push   esi
c000dc8d:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000dc93:	53                   	push   ebx
c000dc94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc9c:	85 f6                	test   esi,esi
c000dc9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dca2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dca8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcaa:	75 16                	jne    c000dcc2 <KeGetProcessEnvPair(Process*, int)+0x37>
c000dcac:	39 c2                	cmp    edx,eax
c000dcae:	7c 16                	jl     c000dcc6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dcb0:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000dcb6:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dcb8:	01 c6                	add    esi,eax
c000dcba:	39 d6                	cmp    esi,edx
c000dcbc:	7e 3c                	jle    c000dcfa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dcbe:	29 c2                	sub    edx,eax
c000dcc0:	eb 04                	jmp    c000dcc6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dcc2:	39 c2                	cmp    edx,eax
c000dcc4:	7d 05                	jge    c000dccb <KeGetProcessEnvPair(Process*, int)+0x40>
c000dcc6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dcc9:	eb 20                	jmp    c000dceb <KeGetProcessEnvPair(Process*, int)+0x60>
c000dccb:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dccd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dcd0:	39 d1                	cmp    ecx,edx
c000dcd2:	7e 04                	jle    c000dcd8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dcd4:	29 c2                	sub    edx,eax
c000dcd6:	eb 10                	jmp    c000dce8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dcd8:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000dcde:	03 0e                	add    ecx,DWORD PTR [esi]
c000dce0:	39 d1                	cmp    ecx,edx
c000dce2:	7e 16                	jle    c000dcfa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dce4:	29 c2                	sub    edx,eax
c000dce6:	29 fa                	sub    edx,edi
c000dce8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dceb:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dcee:	8b 02                	mov    eax,DWORD PTR [edx]
c000dcf0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dcf3:	89 03                	mov    DWORD PTR [ebx],eax
c000dcf5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dcf8:	eb 1d                	jmp    c000dd17 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dcfa:	83 ec 0c             	sub    esp,0xc
c000dcfd:	68 3e 26 02 c0       	push   0xc002263e
c000dd02:	e8 df 0f 00 00       	call   c000ece6 <KePanic(char const*)>
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd10:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dd17:	89 d8                	mov    eax,ebx
c000dd19:	5b                   	pop    ebx
c000dd1a:	5e                   	pop    esi
c000dd1b:	5f                   	pop    edi
c000dd1c:	c2 04 00             	ret    0x4
c000dd1f:	90                   	nop

c000dd20 <KeSetupInterrupts()>:
c000dd20:	83 ec 10             	sub    esp,0x10
c000dd23:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd2b:	90                   	nop
c000dd2c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dd34:	7f 5a                	jg     c000dd90 <KeSetupInterrupts()+0x70>
c000dd36:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd3e:	66 90                	xchg   ax,ax
c000dd40:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dd45:	7f 41                	jg     c000dd88 <KeSetupInterrupts()+0x68>
c000dd47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd4b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd56:	01 d0                	add    eax,edx
c000dd58:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000dd63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd67:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd72:	01 d0                	add    eax,edx
c000dd74:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dd7f:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dd84:	eb ba                	jmp    c000dd40 <KeSetupInterrupts()+0x20>
c000dd86:	66 90                	xchg   ax,ax
c000dd88:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dd8d:	eb 9d                	jmp    c000dd2c <KeSetupInterrupts()+0xc>
c000dd8f:	90                   	nop
c000dd90:	90                   	nop
c000dd91:	83 c4 10             	add    esp,0x10
c000dd94:	c3                   	ret    
c000dd95:	8d 76 00             	lea    esi,[esi+0x0]

c000dd98 <int_handler>:
c000dd98:	83 ec 2c             	sub    esp,0x2c
c000dd9b:	90                   	nop
c000dd9c:	a0 94 cd 02 c0       	mov    al,ds:0xc002cd94
c000dda1:	0f b6 c0             	movzx  eax,al
c000dda4:	85 c0                	test   eax,eax
c000dda6:	74 04                	je     c000ddac <int_handler+0x14>
c000dda8:	fa                   	cli    
c000dda9:	f4                   	hlt    
c000ddaa:	eb f0                	jmp    c000dd9c <int_handler+0x4>
c000ddac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddb0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ddb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddb7:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000ddbc:	7e 1a                	jle    c000ddd8 <int_handler+0x40>
c000ddbe:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000ddc3:	7f 13                	jg     c000ddd8 <int_handler+0x40>
c000ddc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ddc9:	83 e8 20             	sub    eax,0x20
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	50                   	push   eax
c000ddd0:	e8 f1 ab 00 00       	call   c00189c6 <HalEndOfInterrupt(int)>
c000ddd5:	83 c4 10             	add    esp,0x10
c000ddd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dddc:	c1 e0 04             	shl    eax,0x4
c000dddf:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000dde4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dde8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ddec:	c1 e0 04             	shl    eax,0x4
c000ddef:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000ddf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000de00:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000de05:	0f 8f 0d 01 00 00    	jg     c000df18 <int_handler+0x180>
c000de0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de0f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de1a:	01 d0                	add    eax,edx
c000de1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000de1e:	85 c0                	test   eax,eax
c000de20:	0f 84 e6 00 00 00    	je     c000df0c <int_handler+0x174>
c000de26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de2a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de2d:	83 f8 60             	cmp    eax,0x60
c000de30:	75 4a                	jne    c000de7c <int_handler+0xe4>
c000de32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de36:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de41:	01 d0                	add    eax,edx
c000de43:	8b 00                	mov    eax,DWORD PTR [eax]
c000de45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de49:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de54:	01 ca                	add    edx,ecx
c000de56:	8b 12                	mov    edx,DWORD PTR [edx]
c000de58:	83 ec 08             	sub    esp,0x8
c000de5b:	52                   	push   edx
c000de5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de60:	ff d0                	call   eax
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de75:	e9 ba 00 00 00       	jmp    c000df34 <int_handler+0x19c>
c000de7a:	66 90                	xchg   ax,ax
c000de7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de80:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de83:	83 ec 04             	sub    esp,0x4
c000de86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000de8a:	50                   	push   eax
c000de8b:	68 58 26 02 c0       	push   0xc0022658
c000de90:	e8 b9 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	a0 74 ad 02 c0       	mov    al,ds:0xc002ad74
c000de9d:	0f b6 c8             	movzx  ecx,al
c000dea0:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c000dea5:	0f b6 d0             	movzx  edx,al
c000dea8:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c000dead:	51                   	push   ecx
c000deae:	52                   	push   edx
c000deaf:	50                   	push   eax
c000deb0:	68 70 26 02 c0       	push   0xc0022670
c000deb5:	e8 94 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dec1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dec8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000decc:	01 d0                	add    eax,edx
c000dece:	8b 00                	mov    eax,DWORD PTR [eax]
c000ded0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ded4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000dedb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dedf:	01 ca                	add    edx,ecx
c000dee1:	8b 12                	mov    edx,DWORD PTR [edx]
c000dee3:	83 ec 08             	sub    esp,0x8
c000dee6:	52                   	push   edx
c000dee7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000deeb:	ff d0                	call   eax
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000def4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000def7:	83 ec 04             	sub    esp,0x4
c000defa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000defe:	50                   	push   eax
c000deff:	68 88 26 02 c0       	push   0xc0022688
c000df04:	e8 45 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df09:	83 c4 10             	add    esp,0x10
c000df0c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000df11:	e9 ea fe ff ff       	jmp    c000de00 <int_handler+0x68>
c000df16:	66 90                	xchg   ax,ax
c000df18:	83 ec 0c             	sub    esp,0xc
c000df1b:	68 9f 26 02 c0       	push   0xc002269f
c000df20:	e8 29 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df25:	83 c4 10             	add    esp,0x10
c000df28:	b8 00 00 00 00       	mov    eax,0x0
c000df2d:	ba 00 00 00 00       	mov    edx,0x0
c000df32:	66 90                	xchg   ax,ax
c000df34:	83 c4 2c             	add    esp,0x2c
c000df37:	c3                   	ret    

c000df38 <KeDisplayProgramFault(char const*)>:
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	83 ec 0c             	sub    esp,0xc
c000df3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df42:	e8 07 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df4f:	8b 00                	mov    eax,DWORD PTR [eax]
c000df51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df5a:	85 c0                	test   eax,eax
c000df5c:	74 22                	je     c000df80 <KeDisplayProgramFault(char const*)+0x48>
c000df5e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df63:	8b 00                	mov    eax,DWORD PTR [eax]
c000df65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df6e:	6a 04                	push   0x4
c000df70:	6a 0f                	push   0xf
c000df72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df76:	50                   	push   eax
c000df77:	e8 c4 35 00 00       	call   c0011540 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000df7c:	83 c4 10             	add    esp,0x10
c000df7f:	90                   	nop
c000df80:	90                   	nop
c000df81:	83 c4 0c             	add    esp,0xc
c000df84:	c3                   	ret    
c000df85:	8d 76 00             	lea    esi,[esi+0x0]

c000df88 <KeGeneralProtectionFault(void*, void*)>:
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	83 ec 08             	sub    esp,0x8
c000df8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df96:	e8 cd 9f 00 00       	call   c0017f68 <HalHandleGeneralProtectionFault(void*, void*)>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	0f b6 c0             	movzx  eax,al
c000dfa1:	85 c0                	test   eax,eax
c000dfa3:	75 2f                	jne    c000dfd4 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000dfa5:	83 ec 0c             	sub    esp,0xc
c000dfa8:	68 a2 26 02 c0       	push   0xc00226a2
c000dfad:	e8 86 ff ff ff       	call   c000df38 <KeDisplayProgramFault(char const*)>
c000dfb2:	83 c4 10             	add    esp,0x10
c000dfb5:	83 ec 0c             	sub    esp,0xc
c000dfb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbc:	e8 41 a1 00 00       	call   c0018102 <HalDisplayDebugInfo(void*)>
c000dfc1:	83 c4 10             	add    esp,0x10
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	6a 00                	push   0x0
c000dfc9:	e8 2e 80 00 00       	call   c0015ffc <Thr::terminateFromIRQ(int)>
c000dfce:	83 c4 10             	add    esp,0x10
c000dfd1:	eb 05                	jmp    c000dfd8 <KeGeneralProtectionFault(void*, void*)+0x50>
c000dfd3:	90                   	nop
c000dfd4:	90                   	nop
c000dfd5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd8:	83 c4 0c             	add    esp,0xc
c000dfdb:	c3                   	ret    

c000dfdc <KePageFault(void*, void*)>:
c000dfdc:	83 ec 0c             	sub    esp,0xc
c000dfdf:	83 ec 0c             	sub    esp,0xc
c000dfe2:	68 bb 26 02 c0       	push   0xc00226bb
c000dfe7:	e8 62 8f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000dfec:	83 c4 10             	add    esp,0x10
c000dfef:	83 ec 08             	sub    esp,0x8
c000dff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffa:	e8 14 a0 00 00       	call   c0018013 <HalHandlePageFault(void*, void*)>
c000dfff:	83 c4 10             	add    esp,0x10
c000e002:	0f b6 c0             	movzx  eax,al
c000e005:	85 c0                	test   eax,eax
c000e007:	75 2f                	jne    c000e038 <KePageFault(void*, void*)+0x5c>
c000e009:	83 ec 0c             	sub    esp,0xc
c000e00c:	68 c8 26 02 c0       	push   0xc00226c8
c000e011:	e8 22 ff ff ff       	call   c000df38 <KeDisplayProgramFault(char const*)>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	83 ec 0c             	sub    esp,0xc
c000e01c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e020:	e8 dd a0 00 00       	call   c0018102 <HalDisplayDebugInfo(void*)>
c000e025:	83 c4 10             	add    esp,0x10
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	6a 00                	push   0x0
c000e02d:	e8 ca 7f 00 00       	call   c0015ffc <Thr::terminateFromIRQ(int)>
c000e032:	83 c4 10             	add    esp,0x10
c000e035:	eb 05                	jmp    c000e03c <KePageFault(void*, void*)+0x60>
c000e037:	90                   	nop
c000e038:	90                   	nop
c000e039:	8d 76 00             	lea    esi,[esi+0x0]
c000e03c:	83 c4 0c             	add    esp,0xc
c000e03f:	c3                   	ret    

c000e040 <KeNonMaskableInterrupt(void*, void*)>:
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	e8 48 a4 00 00       	call   c0018490 <HalReceivedNMI()>
c000e048:	90                   	nop
c000e049:	83 c4 0c             	add    esp,0xc
c000e04c:	c3                   	ret    
c000e04d:	8d 76 00             	lea    esi,[esi+0x0]

c000e050 <KeOtherFault(void*, void*)>:
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	83 ec 0c             	sub    esp,0xc
c000e056:	68 d4 26 02 c0       	push   0xc00226d4
c000e05b:	e8 d8 fe ff ff       	call   c000df38 <KeDisplayProgramFault(char const*)>
c000e060:	83 c4 10             	add    esp,0x10
c000e063:	83 ec 0c             	sub    esp,0xc
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 93 a0 00 00       	call   c0018102 <HalDisplayDebugInfo(void*)>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	83 ec 0c             	sub    esp,0xc
c000e075:	6a 00                	push   0x0
c000e077:	e8 80 7f 00 00       	call   c0015ffc <Thr::terminateFromIRQ(int)>
c000e07c:	83 c4 10             	add    esp,0x10
c000e07f:	90                   	nop
c000e080:	83 c4 0c             	add    esp,0xc
c000e083:	c3                   	ret    

c000e084 <KeOpcodeFault(void*, void*)>:
c000e084:	55                   	push   ebp
c000e085:	89 e5                	mov    ebp,esp
c000e087:	83 ec 08             	sub    esp,0x8
c000e08a:	83 ec 08             	sub    esp,0x8
c000e08d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e090:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e093:	e8 28 a0 00 00       	call   c00180c0 <HalHandleOpcodeFault(void*, void*)>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	0f b6 c0             	movzx  eax,al
c000e09e:	85 c0                	test   eax,eax
c000e0a0:	75 2e                	jne    c000e0d0 <KeOpcodeFault(void*, void*)+0x4c>
c000e0a2:	83 ec 0c             	sub    esp,0xc
c000e0a5:	68 fc 26 02 c0       	push   0xc00226fc
c000e0aa:	e8 89 fe ff ff       	call   c000df38 <KeDisplayProgramFault(char const*)>
c000e0af:	83 c4 10             	add    esp,0x10
c000e0b2:	83 ec 0c             	sub    esp,0xc
c000e0b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e0b8:	e8 45 a0 00 00       	call   c0018102 <HalDisplayDebugInfo(void*)>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	6a 00                	push   0x0
c000e0c5:	e8 32 7f 00 00       	call   c0015ffc <Thr::terminateFromIRQ(int)>
c000e0ca:	83 c4 10             	add    esp,0x10
c000e0cd:	eb 05                	jmp    c000e0d4 <KeOpcodeFault(void*, void*)+0x50>
c000e0cf:	90                   	nop
c000e0d0:	90                   	nop
c000e0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0d4:	c9                   	leave  
c000e0d5:	c3                   	ret    
c000e0d6:	66 90                	xchg   ax,ax

c000e0d8 <KeDoubleFault(void*, void*)>:
c000e0d8:	55                   	push   ebp
c000e0d9:	89 e5                	mov    ebp,esp
c000e0db:	83 ec 08             	sub    esp,0x8
c000e0de:	83 ec 0c             	sub    esp,0xc
c000e0e1:	68 09 27 02 c0       	push   0xc0022709
c000e0e6:	e8 fb 0b 00 00       	call   c000ece6 <KePanic(char const*)>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	90                   	nop
c000e0ef:	c9                   	leave  
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop

c000e0f2 <GDTEntry::setBase(unsigned int)>:
c000e0f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e0fa:	89 c1                	mov    ecx,eax
c000e0fc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e100:	c1 e9 10             	shr    ecx,0x10
c000e103:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e106:	c1 e8 18             	shr    eax,0x18
c000e109:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e10c:	c3                   	ret    
c000e10d:	90                   	nop

c000e10e <GDTEntry::setLimit(unsigned int)>:
c000e10e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e116:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e119:	66 89 01             	mov    WORD PTR [ecx],ax
c000e11c:	c1 e8 10             	shr    eax,0x10
c000e11f:	83 e0 0f             	and    eax,0xf
c000e122:	83 e2 f0             	and    edx,0xfffffff0
c000e125:	09 d0                	or     eax,edx
c000e127:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e12a:	c3                   	ret    
c000e12b:	90                   	nop

c000e12c <GDT::GDT()>:
c000e12c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e130:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e13a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e140:	90                   	nop
c000e141:	c3                   	ret    

c000e142 <GDT::addEntry(GDTEntry)>:
c000e142:	53                   	push   ebx
c000e143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e147:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e14b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e14f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e151:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e155:	8d 48 01             	lea    ecx,[eax+0x1]
c000e158:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e15c:	c1 e0 03             	shl    eax,0x3
c000e15f:	89 0a                	mov    DWORD PTR [edx],ecx
c000e161:	5b                   	pop    ebx
c000e162:	c3                   	ret    
c000e163:	90                   	nop

c000e164 <GDT::getNumberOfEntries()>:
c000e164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e168:	8b 00                	mov    eax,DWORD PTR [eax]
c000e16a:	c3                   	ret    
c000e16b:	90                   	nop

c000e16c <GDT::flush()>:
c000e16c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e170:	8b 10                	mov    edx,DWORD PTR [eax]
c000e172:	83 c0 04             	add    eax,0x4
c000e175:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e17a:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e181:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e188:	e9 cd 21 ff ff       	jmp    c000035a <loadGDT>
c000e18d:	90                   	nop

c000e18e <GDT::setup()>:
c000e18e:	57                   	push   edi
c000e18f:	56                   	push   esi
c000e190:	53                   	push   ebx
c000e191:	83 ec 30             	sub    esp,0x30
c000e194:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e198:	6a 00                	push   0x0
c000e19a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e19e:	56                   	push   esi
c000e19f:	e8 4e ff ff ff       	call   c000e0f2 <GDTEntry::setBase(unsigned int)>
c000e1a4:	6a 00                	push   0x0
c000e1a6:	56                   	push   esi
c000e1a7:	e8 62 ff ff ff       	call   c000e10e <GDTEntry::setLimit(unsigned int)>
c000e1ac:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e1b4:	6a 00                	push   0x0
c000e1b6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e1ba:	56                   	push   esi
c000e1bb:	e8 32 ff ff ff       	call   c000e0f2 <GDTEntry::setBase(unsigned int)>
c000e1c0:	68 ff ff ff 00       	push   0xffffff
c000e1c5:	56                   	push   esi
c000e1c6:	e8 43 ff ff ff       	call   c000e10e <GDTEntry::setLimit(unsigned int)>
c000e1cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e1d3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e1d8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e1dc:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e1e1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e1e5:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e1e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e1ed:	89 f8                	mov    eax,edi
c000e1ef:	89 fa                	mov    edx,edi
c000e1f1:	80 e4 f7             	and    ah,0xf7
c000e1f4:	80 ce 60             	or     dh,0x60
c000e1f7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1fb:	89 c7                	mov    edi,eax
c000e1fd:	80 cc 60             	or     ah,0x60
c000e200:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e204:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e208:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e20c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e210:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e214:	83 c4 20             	add    esp,0x20
c000e217:	6a 00                	push   0x0
c000e219:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e21d:	50                   	push   eax
c000e21e:	e8 cf fe ff ff       	call   c000e0f2 <GDTEntry::setBase(unsigned int)>
c000e223:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e227:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e22b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e22f:	83 e0 3f             	and    eax,0x3f
c000e232:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e236:	6a 00                	push   0x0
c000e238:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e23c:	50                   	push   eax
c000e23d:	e8 b0 fe ff ff       	call   c000e0f2 <GDTEntry::setBase(unsigned int)>
c000e242:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e246:	83 e0 3f             	and    eax,0x3f
c000e249:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e24d:	83 c4 0c             	add    esp,0xc
c000e250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e254:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e258:	53                   	push   ebx
c000e259:	e8 e4 fe ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c000e25e:	83 c4 0c             	add    esp,0xc
c000e261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e269:	53                   	push   ebx
c000e26a:	e8 d3 fe ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c000e26f:	83 c4 0c             	add    esp,0xc
c000e272:	57                   	push   edi
c000e273:	56                   	push   esi
c000e274:	53                   	push   ebx
c000e275:	e8 c8 fe ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c000e27a:	83 c4 0c             	add    esp,0xc
c000e27d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e281:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e285:	53                   	push   ebx
c000e286:	e8 b7 fe ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c000e28b:	83 c4 0c             	add    esp,0xc
c000e28e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e292:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e296:	53                   	push   ebx
c000e297:	e8 a6 fe ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c000e29c:	83 c4 0c             	add    esp,0xc
c000e29f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2a7:	53                   	push   ebx
c000e2a8:	e8 95 fe ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c000e2ad:	83 c4 0c             	add    esp,0xc
c000e2b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2b8:	53                   	push   ebx
c000e2b9:	e8 84 fe ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c000e2be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2c1:	e8 a6 fe ff ff       	call   c000e16c <GDT::flush()>
c000e2c6:	83 c4 40             	add    esp,0x40
c000e2c9:	5b                   	pop    ebx
c000e2ca:	5e                   	pop    esi
c000e2cb:	5f                   	pop    edi
c000e2cc:	c3                   	ret    

c000e2cd <idleFunction(void*)>:
c000e2cd:	83 ec 0c             	sub    esp,0xc
c000e2d0:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e2d7:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e2de:	75 01                	jne    c000e2e1 <idleFunction(void*)+0x14>
c000e2e0:	fb                   	sti    
c000e2e1:	e8 45 a2 00 00       	call   c001852b <HalSystemIdle()>
c000e2e6:	e8 ab 24 01 00       	call   c0020796 <idleCommon()>
c000e2eb:	eb f4                	jmp    c000e2e1 <idleFunction(void*)+0x14>
c000e2ed:	66 90                	xchg   ax,ax
c000e2ef:	90                   	nop

c000e2f0 <IDTEntry::IDTEntry(bool)>:
c000e2f0:	53                   	push   ebx
c000e2f1:	83 ec 04             	sub    esp,0x4
c000e2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f8:	88 04 24             	mov    BYTE PTR [esp],al
c000e2fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2ff:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e309:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e30d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e311:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e314:	83 e2 f0             	and    edx,0xfffffff0
c000e317:	83 ca 0e             	or     edx,0xe
c000e31a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e31d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e321:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e324:	83 e2 ef             	and    edx,0xffffffef
c000e327:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e32a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e32e:	85 c0                	test   eax,eax
c000e330:	74 06                	je     c000e338 <IDTEntry::IDTEntry(bool)+0x48>
c000e332:	b2 03                	mov    dl,0x3
c000e334:	eb 06                	jmp    c000e33c <IDTEntry::IDTEntry(bool)+0x4c>
c000e336:	66 90                	xchg   ax,ax
c000e338:	b2 00                	mov    dl,0x0
c000e33a:	66 90                	xchg   ax,ax
c000e33c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e340:	83 e2 03             	and    edx,0x3
c000e343:	89 d3                	mov    ebx,edx
c000e345:	c1 e3 05             	shl    ebx,0x5
c000e348:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e34b:	83 e2 9f             	and    edx,0xffffff9f
c000e34e:	88 d1                	mov    cl,dl
c000e350:	88 da                	mov    dl,bl
c000e352:	09 ca                	or     edx,ecx
c000e354:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e357:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e35b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e35e:	83 ca 80             	or     edx,0xffffff80
c000e361:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e364:	90                   	nop
c000e365:	83 c4 04             	add    esp,0x4
c000e368:	5b                   	pop    ebx
c000e369:	c3                   	ret    

c000e36a <IDTEntry::setOffset(unsigned int)>:
c000e36a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e36e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e372:	66 89 02             	mov    WORD PTR [edx],ax
c000e375:	c1 e8 10             	shr    eax,0x10
c000e378:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e37c:	c3                   	ret    
c000e37d:	90                   	nop
c000e37e:	66 90                	xchg   ax,ax

c000e380 <IDT::IDT()>:
c000e380:	90                   	nop
c000e381:	c3                   	ret    

c000e382 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e386:	83 c0 30             	add    eax,0x30
c000e389:	c3                   	ret    

c000e38a <IDT::addEntry(IDTEntry, int)>:
c000e38a:	53                   	push   ebx
c000e38b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e38f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e393:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e397:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e39b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e39e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e3a2:	5b                   	pop    ebx
c000e3a3:	c3                   	ret    

c000e3a4 <IDT::addEntry(int, void (*)(), bool)>:
c000e3a4:	53                   	push   ebx
c000e3a5:	83 ec 10             	sub    esp,0x10
c000e3a8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e3ad:	50                   	push   eax
c000e3ae:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e3b2:	53                   	push   ebx
c000e3b3:	e8 38 ff ff ff       	call   c000e2f0 <IDTEntry::IDTEntry(bool)>
c000e3b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3bc:	53                   	push   ebx
c000e3bd:	e8 a8 ff ff ff       	call   c000e36a <IDTEntry::setOffset(unsigned int)>
c000e3c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e3d2:	e8 b3 ff ff ff       	call   c000e38a <IDT::addEntry(IDTEntry, int)>
c000e3d7:	83 c4 30             	add    esp,0x30
c000e3da:	5b                   	pop    ebx
c000e3db:	c3                   	ret    

c000e3dc <IDT::flush()>:
c000e3dc:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e3e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e9:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e3ee:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e3f5:	c3                   	ret    

c000e3f6 <IDT::setup()>:
c000e3f6:	57                   	push   edi
c000e3f7:	56                   	push   esi
c000e3f8:	53                   	push   ebx
c000e3f9:	83 ec 10             	sub    esp,0x10
c000e3fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e400:	6a 00                	push   0x0
c000e402:	68 40 fa 01 c0       	push   0xc001fa40
c000e407:	6a 00                	push   0x0
c000e409:	53                   	push   ebx
c000e40a:	e8 95 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e40f:	6a 00                	push   0x0
c000e411:	68 50 fa 01 c0       	push   0xc001fa50
c000e416:	6a 01                	push   0x1
c000e418:	53                   	push   ebx
c000e419:	e8 86 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e41e:	83 c4 20             	add    esp,0x20
c000e421:	6a 00                	push   0x0
c000e423:	68 5a fa 01 c0       	push   0xc001fa5a
c000e428:	6a 02                	push   0x2
c000e42a:	53                   	push   ebx
c000e42b:	e8 74 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e430:	6a 00                	push   0x0
c000e432:	68 64 fa 01 c0       	push   0xc001fa64
c000e437:	6a 03                	push   0x3
c000e439:	53                   	push   ebx
c000e43a:	e8 65 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e43f:	83 c4 20             	add    esp,0x20
c000e442:	6a 00                	push   0x0
c000e444:	68 6e fa 01 c0       	push   0xc001fa6e
c000e449:	6a 04                	push   0x4
c000e44b:	53                   	push   ebx
c000e44c:	e8 53 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e451:	6a 00                	push   0x0
c000e453:	68 78 fa 01 c0       	push   0xc001fa78
c000e458:	6a 05                	push   0x5
c000e45a:	53                   	push   ebx
c000e45b:	e8 44 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e460:	83 c4 20             	add    esp,0x20
c000e463:	6a 00                	push   0x0
c000e465:	68 82 fa 01 c0       	push   0xc001fa82
c000e46a:	6a 06                	push   0x6
c000e46c:	53                   	push   ebx
c000e46d:	e8 32 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e472:	6a 00                	push   0x0
c000e474:	68 8c fa 01 c0       	push   0xc001fa8c
c000e479:	6a 07                	push   0x7
c000e47b:	53                   	push   ebx
c000e47c:	e8 23 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e481:	83 c4 20             	add    esp,0x20
c000e484:	6a 00                	push   0x0
c000e486:	68 96 fa 01 c0       	push   0xc001fa96
c000e48b:	6a 08                	push   0x8
c000e48d:	53                   	push   ebx
c000e48e:	e8 11 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e493:	6a 00                	push   0x0
c000e495:	68 9e fa 01 c0       	push   0xc001fa9e
c000e49a:	6a 09                	push   0x9
c000e49c:	53                   	push   ebx
c000e49d:	e8 02 ff ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e4a2:	83 c4 20             	add    esp,0x20
c000e4a5:	6a 00                	push   0x0
c000e4a7:	68 a8 fa 01 c0       	push   0xc001faa8
c000e4ac:	6a 0a                	push   0xa
c000e4ae:	53                   	push   ebx
c000e4af:	e8 f0 fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e4b4:	6a 00                	push   0x0
c000e4b6:	68 b0 fa 01 c0       	push   0xc001fab0
c000e4bb:	6a 0b                	push   0xb
c000e4bd:	53                   	push   ebx
c000e4be:	e8 e1 fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e4c3:	83 c4 20             	add    esp,0x20
c000e4c6:	6a 00                	push   0x0
c000e4c8:	68 b8 fa 01 c0       	push   0xc001fab8
c000e4cd:	6a 0c                	push   0xc
c000e4cf:	53                   	push   ebx
c000e4d0:	e8 cf fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e4d5:	6a 00                	push   0x0
c000e4d7:	68 c0 fa 01 c0       	push   0xc001fac0
c000e4dc:	6a 0d                	push   0xd
c000e4de:	53                   	push   ebx
c000e4df:	e8 c0 fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e4e4:	83 c4 20             	add    esp,0x20
c000e4e7:	6a 00                	push   0x0
c000e4e9:	68 da fa 01 c0       	push   0xc001fada
c000e4ee:	6a 0e                	push   0xe
c000e4f0:	53                   	push   ebx
c000e4f1:	e8 ae fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e4f6:	6a 00                	push   0x0
c000e4f8:	68 e2 fa 01 c0       	push   0xc001fae2
c000e4fd:	6a 0f                	push   0xf
c000e4ff:	53                   	push   ebx
c000e500:	e8 9f fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e505:	83 c4 20             	add    esp,0x20
c000e508:	6a 00                	push   0x0
c000e50a:	68 ec fa 01 c0       	push   0xc001faec
c000e50f:	6a 10                	push   0x10
c000e511:	53                   	push   ebx
c000e512:	e8 8d fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e517:	6a 00                	push   0x0
c000e519:	68 f6 fa 01 c0       	push   0xc001faf6
c000e51e:	6a 11                	push   0x11
c000e520:	53                   	push   ebx
c000e521:	e8 7e fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e526:	83 c4 20             	add    esp,0x20
c000e529:	6a 00                	push   0x0
c000e52b:	68 00 fb 01 c0       	push   0xc001fb00
c000e530:	6a 12                	push   0x12
c000e532:	53                   	push   ebx
c000e533:	e8 6c fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e538:	6a 01                	push   0x1
c000e53a:	68 9a fb 01 c0       	push   0xc001fb9a
c000e53f:	6a 60                	push   0x60
c000e541:	53                   	push   ebx
c000e542:	e8 5d fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e547:	83 c4 20             	add    esp,0x20
c000e54a:	6a 00                	push   0x0
c000e54c:	68 a1 fb 01 c0       	push   0xc001fba1
c000e551:	6a 20                	push   0x20
c000e553:	53                   	push   ebx
c000e554:	e8 4b fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e559:	6a 00                	push   0x0
c000e55b:	68 8c fb 01 c0       	push   0xc001fb8c
c000e560:	6a 21                	push   0x21
c000e562:	53                   	push   ebx
c000e563:	e8 3c fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e568:	83 c4 20             	add    esp,0x20
c000e56b:	6a 00                	push   0x0
c000e56d:	68 93 fb 01 c0       	push   0xc001fb93
c000e572:	6a 22                	push   0x22
c000e574:	53                   	push   ebx
c000e575:	e8 2a fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e57a:	6a 00                	push   0x0
c000e57c:	68 0a fb 01 c0       	push   0xc001fb0a
c000e581:	6a 23                	push   0x23
c000e583:	53                   	push   ebx
c000e584:	e8 1b fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e589:	83 c4 20             	add    esp,0x20
c000e58c:	6a 00                	push   0x0
c000e58e:	68 14 fb 01 c0       	push   0xc001fb14
c000e593:	6a 24                	push   0x24
c000e595:	53                   	push   ebx
c000e596:	e8 09 fe ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e59b:	6a 00                	push   0x0
c000e59d:	68 1e fb 01 c0       	push   0xc001fb1e
c000e5a2:	6a 25                	push   0x25
c000e5a4:	53                   	push   ebx
c000e5a5:	e8 fa fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e5aa:	83 c4 20             	add    esp,0x20
c000e5ad:	6a 00                	push   0x0
c000e5af:	68 28 fb 01 c0       	push   0xc001fb28
c000e5b4:	6a 26                	push   0x26
c000e5b6:	53                   	push   ebx
c000e5b7:	e8 e8 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e5bc:	6a 00                	push   0x0
c000e5be:	68 32 fb 01 c0       	push   0xc001fb32
c000e5c3:	6a 27                	push   0x27
c000e5c5:	53                   	push   ebx
c000e5c6:	e8 d9 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e5cb:	83 c4 20             	add    esp,0x20
c000e5ce:	6a 00                	push   0x0
c000e5d0:	68 3c fb 01 c0       	push   0xc001fb3c
c000e5d5:	6a 28                	push   0x28
c000e5d7:	53                   	push   ebx
c000e5d8:	e8 c7 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e5dd:	6a 00                	push   0x0
c000e5df:	68 46 fb 01 c0       	push   0xc001fb46
c000e5e4:	6a 29                	push   0x29
c000e5e6:	53                   	push   ebx
c000e5e7:	e8 b8 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e5ec:	83 c4 20             	add    esp,0x20
c000e5ef:	6a 00                	push   0x0
c000e5f1:	68 50 fb 01 c0       	push   0xc001fb50
c000e5f6:	6a 2a                	push   0x2a
c000e5f8:	53                   	push   ebx
c000e5f9:	e8 a6 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e5fe:	6a 00                	push   0x0
c000e600:	68 5a fb 01 c0       	push   0xc001fb5a
c000e605:	6a 2b                	push   0x2b
c000e607:	53                   	push   ebx
c000e608:	e8 97 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e60d:	83 c4 20             	add    esp,0x20
c000e610:	6a 00                	push   0x0
c000e612:	68 64 fb 01 c0       	push   0xc001fb64
c000e617:	6a 2c                	push   0x2c
c000e619:	53                   	push   ebx
c000e61a:	e8 85 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e61f:	6a 00                	push   0x0
c000e621:	68 6e fb 01 c0       	push   0xc001fb6e
c000e626:	6a 2d                	push   0x2d
c000e628:	53                   	push   ebx
c000e629:	e8 76 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e62e:	83 c4 20             	add    esp,0x20
c000e631:	6a 00                	push   0x0
c000e633:	68 78 fb 01 c0       	push   0xc001fb78
c000e638:	6a 2e                	push   0x2e
c000e63a:	53                   	push   ebx
c000e63b:	e8 64 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e640:	6a 00                	push   0x0
c000e642:	68 82 fb 01 c0       	push   0xc001fb82
c000e647:	6a 2f                	push   0x2f
c000e649:	53                   	push   ebx
c000e64a:	e8 55 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e64f:	83 c4 20             	add    esp,0x20
c000e652:	6a 00                	push   0x0
c000e654:	68 dc fc 01 c0       	push   0xc001fcdc
c000e659:	6a 30                	push   0x30
c000e65b:	53                   	push   ebx
c000e65c:	e8 43 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e661:	6a 00                	push   0x0
c000e663:	68 e6 fc 01 c0       	push   0xc001fce6
c000e668:	6a 31                	push   0x31
c000e66a:	53                   	push   ebx
c000e66b:	e8 34 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e670:	83 c4 20             	add    esp,0x20
c000e673:	6a 00                	push   0x0
c000e675:	68 f0 fc 01 c0       	push   0xc001fcf0
c000e67a:	6a 32                	push   0x32
c000e67c:	53                   	push   ebx
c000e67d:	e8 22 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e682:	6a 00                	push   0x0
c000e684:	68 fa fc 01 c0       	push   0xc001fcfa
c000e689:	6a 33                	push   0x33
c000e68b:	53                   	push   ebx
c000e68c:	e8 13 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e691:	83 c4 20             	add    esp,0x20
c000e694:	6a 00                	push   0x0
c000e696:	68 04 fd 01 c0       	push   0xc001fd04
c000e69b:	6a 34                	push   0x34
c000e69d:	53                   	push   ebx
c000e69e:	e8 01 fd ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e6a3:	6a 00                	push   0x0
c000e6a5:	68 0e fd 01 c0       	push   0xc001fd0e
c000e6aa:	6a 35                	push   0x35
c000e6ac:	53                   	push   ebx
c000e6ad:	e8 f2 fc ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e6b2:	83 c4 20             	add    esp,0x20
c000e6b5:	6a 00                	push   0x0
c000e6b7:	68 18 fd 01 c0       	push   0xc001fd18
c000e6bc:	6a 36                	push   0x36
c000e6be:	53                   	push   ebx
c000e6bf:	e8 e0 fc ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e6c4:	6a 00                	push   0x0
c000e6c6:	68 22 fd 01 c0       	push   0xc001fd22
c000e6cb:	6a 37                	push   0x37
c000e6cd:	53                   	push   ebx
c000e6ce:	e8 d1 fc ff ff       	call   c000e3a4 <IDT::addEntry(int, void (*)(), bool)>
c000e6d3:	83 c4 1c             	add    esp,0x1c
c000e6d6:	6a 03                	push   0x3
c000e6d8:	6a 02                	push   0x2
c000e6da:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e6e0:	e8 d7 41 00 00       	call   c00128bc <VAS::allocatePages(int, int)>
c000e6e5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e6ec:	89 c6                	mov    esi,eax
c000e6ee:	e8 ad 02 00 00       	call   c000e9a0 <malloc>
c000e6f3:	81 c6 00 20 00 00    	add    esi,0x2000
c000e6f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6fc:	89 c7                	mov    edi,eax
c000e6fe:	e8 4d 32 00 00       	call   c0011950 <TSS::TSS()>
c000e703:	83 c4 0c             	add    esp,0xc
c000e706:	68 96 fa 01 c0       	push   0xc001fa96
c000e70b:	56                   	push   esi
c000e70c:	57                   	push   edi
c000e70d:	e8 82 32 00 00       	call   c0011994 <TSS::setup(unsigned long, unsigned long)>
c000e712:	89 c6                	mov    esi,eax
c000e714:	58                   	pop    eax
c000e715:	5a                   	pop    edx
c000e716:	6a 00                	push   0x0
c000e718:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e71c:	50                   	push   eax
c000e71d:	e8 ce fb ff ff       	call   c000e2f0 <IDTEntry::IDTEntry(bool)>
c000e722:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e726:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e72b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e736:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e73c:	80 ce 05             	or     dh,0x5
c000e73f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e743:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e746:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e74a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e74d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e750:	e8 87 fc ff ff       	call   c000e3dc <IDT::flush()>
c000e755:	83 c4 20             	add    esp,0x20
c000e758:	5b                   	pop    ebx
c000e759:	5e                   	pop    esi
c000e75a:	5f                   	pop    edi
c000e75b:	c3                   	ret    

c000e75c <CPU::current()>:
c000e75c:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e761:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e767:	c3                   	ret    

c000e768 <operator new(unsigned long)>:
c000e768:	e9 33 02 00 00       	jmp    c000e9a0 <malloc>

c000e76d <operator delete(void*)>:
c000e76d:	e9 4e 02 00 00       	jmp    c000e9c0 <rfree>

c000e772 <disableIRQs()>:
c000e772:	fa                   	cli    
c000e773:	c3                   	ret    

c000e774 <enableIRQs()>:
c000e774:	fb                   	sti    
c000e775:	c3                   	ret    

c000e776 <lockScheduler()>:
c000e776:	fa                   	cli    
c000e777:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e77d:	c3                   	ret    

c000e77e <unlockScheduler()>:
c000e77e:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e785:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e78c:	75 01                	jne    c000e78f <unlockScheduler()+0x11>
c000e78e:	fb                   	sti    
c000e78f:	c3                   	ret    

c000e790 <lockStuff()>:
c000e790:	fa                   	cli    
c000e791:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e797:	ff 05 ac d6 02 c0    	inc    DWORD PTR ds:0xc002d6ac
c000e79d:	c3                   	ret    

c000e79e <unlockStuff()>:
c000e79e:	83 ec 0c             	sub    esp,0xc
c000e7a1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000e7a6:	48                   	dec    eax
c000e7a7:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000e7ac:	75 18                	jne    c000e7c6 <unlockStuff()+0x28>
c000e7ae:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c000e7b5:	74 0f                	je     c000e7c6 <unlockStuff()+0x28>
c000e7b7:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000e7c1:	e8 6a 6f 00 00       	call   c0015730 <schedule()>
c000e7c6:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e7cd:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e7d4:	75 01                	jne    c000e7d7 <unlockStuff()+0x39>
c000e7d6:	fb                   	sti    
c000e7d7:	83 c4 0c             	add    esp,0xc
c000e7da:	c3                   	ret    

c000e7db <Virt::getAKernelVAS()>:
c000e7db:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c000e7e0:	c3                   	ret    

c000e7e1 <__not_memcpy>:
c000e7e1:	57                   	push   edi
c000e7e2:	56                   	push   esi
c000e7e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e7ef:	89 c7                	mov    edi,eax
c000e7f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7f3:	5e                   	pop    esi
c000e7f4:	5f                   	pop    edi
c000e7f5:	c3                   	ret    

c000e7f6 <sbrk>:
c000e7f6:	55                   	push   ebp
c000e7f7:	57                   	push   edi
c000e7f8:	56                   	push   esi
c000e7f9:	53                   	push   ebx
c000e7fa:	83 ec 1c             	sub    esp,0x1c
c000e7fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e801:	85 c0                	test   eax,eax
c000e803:	74 66                	je     c000e86b <sbrk+0x75>
c000e805:	78 6b                	js     c000e872 <sbrk+0x7c>
c000e807:	8b 15 50 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d50
c000e80d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e811:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e817:	05 ff 0f 00 00       	add    eax,0xfff
c000e81c:	0f 49 e8             	cmovns ebp,eax
c000e81f:	c1 fd 0c             	sar    ebp,0xc
c000e822:	bb 00 00 00 00       	mov    ebx,0x0
c000e827:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e82d:	8b 3d 50 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d50
c000e833:	e8 a8 06 00 00       	call   c000eee0 <Phys::allocatePage()>
c000e838:	68 01 04 00 00       	push   0x401
c000e83d:	57                   	push   edi
c000e83e:	50                   	push   eax
c000e83f:	56                   	push   esi
c000e840:	e8 6f 3f 00 00       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e845:	81 05 50 4d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024d50,0x1000
c000e84f:	83 c3 01             	add    ebx,0x1
c000e852:	83 c4 10             	add    esp,0x10
c000e855:	39 dd                	cmp    ebp,ebx
c000e857:	75 ce                	jne    c000e827 <sbrk+0x31>
c000e859:	0f 20 d8             	mov    eax,cr3
c000e85c:	0f 22 d8             	mov    cr3,eax
c000e85f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e863:	83 c4 1c             	add    esp,0x1c
c000e866:	5b                   	pop    ebx
c000e867:	5e                   	pop    esi
c000e868:	5f                   	pop    edi
c000e869:	5d                   	pop    ebp
c000e86a:	c3                   	ret    
c000e86b:	a1 50 4d 02 c0       	mov    eax,ds:0xc0024d50
c000e870:	eb f1                	jmp    c000e863 <sbrk+0x6d>
c000e872:	83 ec 08             	sub    esp,0x8
c000e875:	50                   	push   eax
c000e876:	68 18 27 02 c0       	push   0xc0022718
c000e87b:	e8 ce 86 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e880:	83 c4 10             	add    esp,0x10
c000e883:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e888:	eb d9                	jmp    c000e863 <sbrk+0x6d>

c000e88a <sbrk_thunk>:
c000e88a:	83 ec 0c             	sub    esp,0xc
c000e88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e891:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e896:	7f 10                	jg     c000e8a8 <sbrk_thunk+0x1e>
c000e898:	83 ec 0c             	sub    esp,0xc
c000e89b:	50                   	push   eax
c000e89c:	e8 55 ff ff ff       	call   c000e7f6 <sbrk>
c000e8a1:	83 c4 10             	add    esp,0x10
c000e8a4:	83 c4 0c             	add    esp,0xc
c000e8a7:	c3                   	ret    
c000e8a8:	83 ec 08             	sub    esp,0x8
c000e8ab:	50                   	push   eax
c000e8ac:	68 48 27 02 c0       	push   0xc0022748
c000e8b1:	e8 98 86 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8be:	eb e4                	jmp    c000e8a4 <sbrk_thunk+0x1a>

c000e8c0 <mmap>:
c000e8c0:	55                   	push   ebp
c000e8c1:	57                   	push   edi
c000e8c2:	56                   	push   esi
c000e8c3:	53                   	push   ebx
c000e8c4:	83 ec 18             	sub    esp,0x18
c000e8c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8cb:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e8d1:	89 fb                	mov    ebx,edi
c000e8d3:	c1 eb 0c             	shr    ebx,0xc
c000e8d6:	53                   	push   ebx
c000e8d7:	e8 ff 37 00 00       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c000e8dc:	89 c5                	mov    ebp,eax
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	85 db                	test   ebx,ebx
c000e8e3:	7e 2f                	jle    c000e914 <mmap+0x54>
c000e8e5:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e8eb:	01 c7                	add    edi,eax
c000e8ed:	89 c3                	mov    ebx,eax
c000e8ef:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e8f5:	e8 e6 05 00 00       	call   c000eee0 <Phys::allocatePage()>
c000e8fa:	68 01 04 00 00       	push   0x401
c000e8ff:	53                   	push   ebx
c000e900:	50                   	push   eax
c000e901:	56                   	push   esi
c000e902:	e8 ad 3e 00 00       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e907:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e90d:	83 c4 10             	add    esp,0x10
c000e910:	39 fb                	cmp    ebx,edi
c000e912:	75 db                	jne    c000e8ef <mmap+0x2f>
c000e914:	89 e8                	mov    eax,ebp
c000e916:	83 c4 0c             	add    esp,0xc
c000e919:	5b                   	pop    ebx
c000e91a:	5e                   	pop    esi
c000e91b:	5f                   	pop    edi
c000e91c:	5d                   	pop    ebp
c000e91d:	c3                   	ret    

c000e91e <munmap>:
c000e91e:	83 ec 18             	sub    esp,0x18
c000e921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e925:	e8 af 3a 00 00       	call   c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e92a:	b8 00 00 00 00       	mov    eax,0x0
c000e92f:	83 c4 1c             	add    esp,0x1c
c000e932:	c3                   	ret    

c000e933 <liballoc_lock()>:
c000e933:	fa                   	cli    
c000e934:	83 05 b0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6b0,0x1
c000e93b:	b8 00 00 00 00       	mov    eax,0x0
c000e940:	c3                   	ret    

c000e941 <liballoc_unlock()>:
c000e941:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000e949:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e950:	75 01                	jne    c000e953 <liballoc_unlock()+0x12>
c000e952:	fb                   	sti    
c000e953:	b8 00 00 00 00       	mov    eax,0x0
c000e958:	c3                   	ret    

c000e959 <liballoc_alloc(int)>:
c000e959:	83 ec 10             	sub    esp,0x10
c000e95c:	6a 01                	push   0x1
c000e95e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e962:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e968:	e8 4f 3f 00 00       	call   c00128bc <VAS::allocatePages(int, int)>
c000e96d:	83 c4 1c             	add    esp,0x1c
c000e970:	c3                   	ret    

c000e971 <liballoc_free(void*, int)>:
c000e971:	83 ec 14             	sub    esp,0x14
c000e974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e978:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e97e:	e8 93 3b 00 00       	call   c0012516 <VAS::freeAllocatedPages(unsigned long)>
c000e983:	b8 00 00 00 00       	mov    eax,0x0
c000e988:	83 c4 1c             	add    esp,0x1c
c000e98b:	c3                   	ret    

c000e98c <realloc>:
c000e98c:	83 ec 14             	sub    esp,0x14
c000e98f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e997:	e8 e9 2d ff ff       	call   c0001785 <dlrealloc>
c000e99c:	83 c4 1c             	add    esp,0x1c
c000e99f:	c3                   	ret    

c000e9a0 <malloc>:
c000e9a0:	83 ec 18             	sub    esp,0x18
c000e9a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a7:	e8 9c 28 ff ff       	call   c0001248 <dlmalloc>
c000e9ac:	83 c4 1c             	add    esp,0x1c
c000e9af:	c3                   	ret    

c000e9b0 <free>:
c000e9b0:	83 ec 18             	sub    esp,0x18
c000e9b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9b7:	e8 ca 23 ff ff       	call   c0000d86 <dlfree>
c000e9bc:	83 c4 1c             	add    esp,0x1c
c000e9bf:	c3                   	ret    

c000e9c0 <rfree>:
c000e9c0:	83 ec 18             	sub    esp,0x18
c000e9c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9c7:	e8 ba 23 ff ff       	call   c0000d86 <dlfree>
c000e9cc:	83 c4 1c             	add    esp,0x1c
c000e9cf:	c3                   	ret    

c000e9d0 <calloc>:
c000e9d0:	56                   	push   esi
c000e9d1:	53                   	push   ebx
c000e9d2:	83 ec 10             	sub    esp,0x10
c000e9d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e9d9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e9de:	53                   	push   ebx
c000e9df:	e8 bc ff ff ff       	call   c000e9a0 <malloc>
c000e9e4:	89 c6                	mov    esi,eax
c000e9e6:	83 c4 0c             	add    esp,0xc
c000e9e9:	53                   	push   ebx
c000e9ea:	6a 00                	push   0x0
c000e9ec:	50                   	push   eax
c000e9ed:	e8 fe 1a ff ff       	call   c00004f0 <memset>
c000e9f2:	89 f0                	mov    eax,esi
c000e9f4:	83 c4 14             	add    esp,0x14
c000e9f7:	5b                   	pop    ebx
c000e9f8:	5e                   	pop    esi
c000e9f9:	c3                   	ret    
c000e9fa:	66 90                	xchg   ax,ax

c000e9fc <KeMailboxTryPost(Mailbox*, void*)>:
c000e9fc:	83 ec 10             	sub    esp,0x10
c000e9ff:	fa                   	cli    
c000ea00:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea05:	83 c0 01             	add    eax,0x1
c000ea08:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ea0d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea19:	85 c0                	test   eax,eax
c000ea1b:	75 23                	jne    c000ea40 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000ea1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea25:	89 10                	mov    DWORD PTR [eax],edx
c000ea27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea2e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea38:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea40:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ea48:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea4d:	85 c0                	test   eax,eax
c000ea4f:	75 03                	jne    c000ea54 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000ea51:	fb                   	sti    
c000ea52:	66 90                	xchg   ax,ax
c000ea54:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea58:	83 c4 10             	add    esp,0x10
c000ea5b:	c3                   	ret    

c000ea5c <KeMailboxTryGet(Mailbox*, void**)>:
c000ea5c:	83 ec 10             	sub    esp,0x10
c000ea5f:	fa                   	cli    
c000ea60:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea65:	83 c0 01             	add    eax,0x1
c000ea68:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ea6d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea79:	83 f8 01             	cmp    eax,0x1
c000ea7c:	75 22                	jne    c000eaa0 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ea7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea82:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea88:	89 10                	mov    DWORD PTR [eax],edx
c000ea8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea91:	8d 50 ff             	lea    edx,[eax-0x1]
c000ea94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea9b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000eaa0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eaa8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eaad:	85 c0                	test   eax,eax
c000eaaf:	75 03                	jne    c000eab4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000eab1:	fb                   	sti    
c000eab2:	66 90                	xchg   ax,ax
c000eab4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eab8:	83 c4 10             	add    esp,0x10
c000eabb:	c3                   	ret    

c000eabc <KeMailboxCreate()>:
c000eabc:	83 ec 1c             	sub    esp,0x1c
c000eabf:	83 ec 0c             	sub    esp,0xc
c000eac2:	6a 08                	push   0x8
c000eac4:	e8 d7 fe ff ff       	call   c000e9a0 <malloc>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ead0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ead4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eae5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eae9:	83 c4 1c             	add    esp,0x1c
c000eaec:	c3                   	ret    
c000eaed:	8d 76 00             	lea    esi,[esi+0x0]

c000eaf0 <KeMailboxPost(Mailbox*, void*)>:
c000eaf0:	83 ec 1c             	sub    esp,0x1c
c000eaf3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eaf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eafc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb00:	e8 f7 fe ff ff       	call   c000e9fc <KeMailboxTryPost(Mailbox*, void*)>
c000eb05:	83 c4 08             	add    esp,0x8
c000eb08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb10:	83 f0 01             	xor    eax,0x1
c000eb13:	0f b6 c0             	movzx  eax,al
c000eb16:	85 c0                	test   eax,eax
c000eb18:	74 26                	je     c000eb40 <KeMailboxPost(Mailbox*, void*)+0x50>
c000eb1a:	fa                   	cli    
c000eb1b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb20:	83 c0 01             	add    eax,0x1
c000eb23:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eb28:	e8 03 6c 00 00       	call   c0015730 <schedule()>
c000eb2d:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eb35:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb3a:	85 c0                	test   eax,eax
c000eb3c:	75 02                	jne    c000eb40 <KeMailboxPost(Mailbox*, void*)+0x50>
c000eb3e:	fb                   	sti    
c000eb3f:	90                   	nop
c000eb40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb45:	85 c0                	test   eax,eax
c000eb47:	75 03                	jne    c000eb4c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000eb49:	eb ad                	jmp    c000eaf8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000eb4b:	90                   	nop
c000eb4c:	90                   	nop
c000eb4d:	83 c4 1c             	add    esp,0x1c
c000eb50:	c3                   	ret    
c000eb51:	8d 76 00             	lea    esi,[esi+0x0]

c000eb54 <KeMailboxGet(Mailbox*, void**)>:
c000eb54:	83 ec 1c             	sub    esp,0x1c
c000eb57:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb64:	e8 f3 fe ff ff       	call   c000ea5c <KeMailboxTryGet(Mailbox*, void**)>
c000eb69:	83 c4 08             	add    esp,0x8
c000eb6c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb74:	83 f0 01             	xor    eax,0x1
c000eb77:	0f b6 c0             	movzx  eax,al
c000eb7a:	85 c0                	test   eax,eax
c000eb7c:	74 26                	je     c000eba4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eb7e:	fa                   	cli    
c000eb7f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb84:	83 c0 01             	add    eax,0x1
c000eb87:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eb8c:	e8 9f 6b 00 00       	call   c0015730 <schedule()>
c000eb91:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eb99:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb9e:	85 c0                	test   eax,eax
c000eba0:	75 02                	jne    c000eba4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eba2:	fb                   	sti    
c000eba3:	90                   	nop
c000eba4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eba9:	85 c0                	test   eax,eax
c000ebab:	75 03                	jne    c000ebb0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000ebad:	eb ad                	jmp    c000eb5c <KeMailboxGet(Mailbox*, void**)+0x8>
c000ebaf:	90                   	nop
c000ebb0:	90                   	nop
c000ebb1:	83 c4 1c             	add    esp,0x1c
c000ebb4:	c3                   	ret    
c000ebb5:	8d 76 00             	lea    esi,[esi+0x0]

c000ebb8 <KeMailboxDestroy(Mailbox*)>:
c000ebb8:	83 ec 0c             	sub    esp,0xc
c000ebbb:	83 ec 0c             	sub    esp,0xc
c000ebbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc2:	e8 e9 fd ff ff       	call   c000e9b0 <free>
c000ebc7:	83 c4 10             	add    esp,0x10
c000ebca:	90                   	nop
c000ebcb:	83 c4 0c             	add    esp,0xc
c000ebce:	c3                   	ret    

c000ebcf <KeEntryPoint>:
c000ebcf:	57                   	push   edi
c000ebd0:	bf f9 03 00 00       	mov    edi,0x3f9
c000ebd5:	56                   	push   esi
c000ebd6:	31 f6                	xor    esi,esi
c000ebd8:	53                   	push   ebx
c000ebd9:	89 fa                	mov    edx,edi
c000ebdb:	83 ec 2c             	sub    esp,0x2c
c000ebde:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ebe3:	a3 90 cd 02 c0       	mov    ds:0xc002cd90,eax
c000ebe8:	89 f0                	mov    eax,esi
c000ebea:	ee                   	out    dx,al
c000ebeb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ebf0:	b0 80                	mov    al,0x80
c000ebf2:	89 da                	mov    edx,ebx
c000ebf4:	ee                   	out    dx,al
c000ebf5:	b1 03                	mov    cl,0x3
c000ebf7:	ba f8 03 00 00       	mov    edx,0x3f8
c000ebfc:	88 c8                	mov    al,cl
c000ebfe:	ee                   	out    dx,al
c000ebff:	89 f0                	mov    eax,esi
c000ec01:	89 fa                	mov    edx,edi
c000ec03:	ee                   	out    dx,al
c000ec04:	88 c8                	mov    al,cl
c000ec06:	89 da                	mov    edx,ebx
c000ec08:	ee                   	out    dx,al
c000ec09:	b0 c7                	mov    al,0xc7
c000ec0b:	ba fa 03 00 00       	mov    edx,0x3fa
c000ec10:	ee                   	out    dx,al
c000ec11:	b0 0b                	mov    al,0xb
c000ec13:	ba fc 03 00 00       	mov    edx,0x3fc
c000ec18:	ee                   	out    dx,al
c000ec19:	68 57 27 02 c0       	push   0xc0022757
c000ec1e:	e8 2b 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ec23:	e8 94 d9 ff ff       	call   c000c5bc <KeDisplaySplashScreen()>
c000ec28:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ec2d:	05 ff 0f 00 00       	add    eax,0xfff
c000ec32:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec37:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec3a:	e8 32 04 00 00       	call   c000f071 <Phys::physicalMemorySetup(unsigned int)>
c000ec3f:	e8 6b 36 00 00       	call   c00122af <Virt::virtualMemorySetup()>
c000ec44:	e8 bd d8 ff ff       	call   c000c506 <KeInitialiseAtexit()>
c000ec49:	c7 04 24 6e 27 02 c0 	mov    DWORD PTR [esp],0xc002276e
c000ec50:	e8 f9 82 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ec55:	58                   	pop    eax
c000ec56:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ec5a:	53                   	push   ebx
c000ec5b:	e8 36 39 00 00       	call   c0012596 <VAS::VAS()>
c000ec60:	c7 04 24 7e 27 02 c0 	mov    DWORD PTR [esp],0xc002277e
c000ec67:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c000ec6d:	e8 dc 82 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ec72:	e8 67 16 01 00       	call   c00202de <_init>
c000ec77:	c7 04 24 92 27 02 c0 	mov    DWORD PTR [esp],0xc0022792
c000ec7e:	e8 cb 82 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ec83:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ec8a:	e8 11 fd ff ff       	call   c000e9a0 <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 e7 e9 ff ff       	call   c000d680 <Computer::Computer()>
c000ec99:	5a                   	pop    edx
c000ec9a:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000eca0:	59                   	pop    ecx
c000eca1:	56                   	push   esi
c000eca2:	68 a1 27 02 c0       	push   0xc00227a1
c000eca7:	e8 a2 82 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ecac:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000ecb1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecb3:	53                   	push   ebx
c000ecb4:	6a 00                	push   0x0
c000ecb6:	6a 00                	push   0x0
c000ecb8:	50                   	push   eax
c000ecb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecbc:	83 c4 14             	add    esp,0x14
c000ecbf:	53                   	push   ebx
c000ecc0:	e8 87 39 00 00       	call   c001264c <VAS::~VAS()>
c000ecc5:	83 c4 30             	add    esp,0x30
c000ecc8:	5b                   	pop    ebx
c000ecc9:	5e                   	pop    esi
c000ecca:	5f                   	pop    edi
c000eccb:	c3                   	ret    

c000eccc <Mutex::Mutex()>:
c000eccc:	83 ec 0c             	sub    esp,0xc
c000eccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecd3:	83 ec 08             	sub    esp,0x8
c000ecd6:	6a 01                	push   0x1
c000ecd8:	50                   	push   eax
c000ecd9:	e8 4e 0c 00 00       	call   c000f92c <Semaphore::Semaphore(int)>
c000ecde:	83 c4 10             	add    esp,0x10
c000ece1:	90                   	nop
c000ece2:	83 c4 0c             	add    esp,0xc
c000ece5:	c3                   	ret    

c000ece6 <KePanic(char const*)>:
c000ece6:	c6 05 94 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd94,0x1
c000eced:	e9 e1 99 00 00       	jmp    c00186d3 <HalPanic(char const*)>

c000ecf2 <Phys::allocateDMA(unsigned long)>:
c000ecf2:	55                   	push   ebp
c000ecf3:	31 ed                	xor    ebp,ebp
c000ecf5:	57                   	push   edi
c000ecf6:	56                   	push   esi
c000ecf7:	31 f6                	xor    esi,esi
c000ecf9:	53                   	push   ebx
c000ecfa:	31 db                	xor    ebx,ebx
c000ecfc:	83 ec 1c             	sub    esp,0x1c
c000ecff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed03:	05 ff 0f 00 00       	add    eax,0xfff
c000ed08:	c1 e8 0c             	shr    eax,0xc
c000ed0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ed0f:	31 c0                	xor    eax,eax
c000ed11:	eb 1b                	jmp    c000ed2e <Phys::allocateDMA(unsigned long)+0x3c>
c000ed13:	8d 78 01             	lea    edi,[eax+0x1]
c000ed16:	85 c0                	test   eax,eax
c000ed18:	0f 44 eb             	cmove  ebp,ebx
c000ed1b:	0f 44 f3             	cmove  esi,ebx
c000ed1e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ed22:	74 37                	je     c000ed5b <Phys::allocateDMA(unsigned long)+0x69>
c000ed24:	89 f8                	mov    eax,edi
c000ed26:	83 c3 01             	add    ebx,0x1
c000ed29:	83 fb 0f             	cmp    ebx,0xf
c000ed2c:	7f 13                	jg     c000ed41 <Phys::allocateDMA(unsigned long)+0x4f>
c000ed2e:	80 bb b0 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3250],0x0
c000ed35:	74 dc                	je     c000ed13 <Phys::allocateDMA(unsigned long)+0x21>
c000ed37:	31 c0                	xor    eax,eax
c000ed39:	83 c3 01             	add    ebx,0x1
c000ed3c:	83 fb 0f             	cmp    ebx,0xf
c000ed3f:	7e ed                	jle    c000ed2e <Phys::allocateDMA(unsigned long)+0x3c>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 b8 27 02 c0       	push   0xc00227b8
c000ed49:	e8 98 ff ff ff       	call   c000ece6 <KePanic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	31 c0                	xor    eax,eax
c000ed53:	83 c4 1c             	add    esp,0x1c
c000ed56:	5b                   	pop    ebx
c000ed57:	5e                   	pop    esi
c000ed58:	5f                   	pop    edi
c000ed59:	5d                   	pop    ebp
c000ed5a:	c3                   	ret    
c000ed5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ed5f:	89 f2                	mov    edx,esi
c000ed61:	c1 fa 04             	sar    edx,0x4
c000ed64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed68:	01 f1                	add    ecx,esi
c000ed6a:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ed6d:	83 e9 01             	sub    ecx,0x1
c000ed70:	0f 48 ca             	cmovs  ecx,edx
c000ed73:	c1 f9 04             	sar    ecx,0x4
c000ed76:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ed7a:	74 06                	je     c000ed82 <Phys::allocateDMA(unsigned long)+0x90>
c000ed7c:	89 eb                	mov    ebx,ebp
c000ed7e:	31 c0                	xor    eax,eax
c000ed80:	eb b7                	jmp    c000ed39 <Phys::allocateDMA(unsigned long)+0x47>
c000ed82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed86:	85 d2                	test   edx,edx
c000ed88:	74 17                	je     c000eda1 <Phys::allocateDMA(unsigned long)+0xaf>
c000ed8a:	8d 96 b0 cd 02 c0    	lea    edx,[esi-0x3ffd3250]
c000ed90:	8d 84 06 b1 cd 02 c0 	lea    eax,[esi+eax*1-0x3ffd324f]
c000ed97:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ed9a:	83 c2 01             	add    edx,0x1
c000ed9d:	39 d0                	cmp    eax,edx
c000ed9f:	75 f6                	jne    c000ed97 <Phys::allocateDMA(unsigned long)+0xa5>
c000eda1:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000eda7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edaf:	01 c2                	add    edx,eax
c000edb1:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000edb7:	85 c9                	test   ecx,ecx
c000edb9:	74 17                	je     c000edd2 <Phys::allocateDMA(unsigned long)+0xe0>
c000edbb:	83 ec 0c             	sub    esp,0xc
c000edbe:	68 b8 27 02 c0       	push   0xc00227b8
c000edc3:	e8 1e ff ff ff       	call   c000ece6 <KePanic(char const*)>
c000edc8:	83 c4 10             	add    esp,0x10
c000edcb:	89 f8                	mov    eax,edi
c000edcd:	e9 54 ff ff ff       	jmp    c000ed26 <Phys::allocateDMA(unsigned long)+0x34>
c000edd2:	c1 e6 0c             	shl    esi,0xc
c000edd5:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000eddb:	e9 73 ff ff ff       	jmp    c000ed53 <Phys::allocateDMA(unsigned long)+0x61>

c000ede0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ede0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ede4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000edea:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000edef:	c1 ea 0c             	shr    edx,0xc
c000edf2:	29 d0                	sub    eax,edx
c000edf4:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000edf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edfd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ee02:	c1 e8 0c             	shr    eax,0xc
c000ee05:	85 d2                	test   edx,edx
c000ee07:	74 11                	je     c000ee1a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ee09:	05 b0 cd 02 c0       	add    eax,0xc002cdb0
c000ee0e:	01 c2                	add    edx,eax
c000ee10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ee13:	83 c0 01             	add    eax,0x1
c000ee16:	39 d0                	cmp    eax,edx
c000ee18:	75 f6                	jne    c000ee10 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ee1a:	c3                   	ret    

c000ee1b <Phys::setPageState(unsigned long, bool)>:
c000ee1b:	57                   	push   edi
c000ee1c:	56                   	push   esi
c000ee1d:	8b 35 54 4d 02 c0    	mov    esi,DWORD PTR ds:0xc0024d54
c000ee23:	53                   	push   ebx
c000ee24:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ee29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ee2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee31:	89 ca                	mov    edx,ecx
c000ee33:	83 e1 07             	and    ecx,0x7
c000ee36:	c1 ea 03             	shr    edx,0x3
c000ee39:	0f b6 c0             	movzx  eax,al
c000ee3c:	d3 c3                	rol    ebx,cl
c000ee3e:	01 d6                	add    esi,edx
c000ee40:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ee43:	d3 e0                	shl    eax,cl
c000ee45:	21 fb                	and    ebx,edi
c000ee47:	88 1e                	mov    BYTE PTR [esi],bl
c000ee49:	8b 1d 54 4d 02 c0    	mov    ebx,DWORD PTR ds:0xc0024d54
c000ee4f:	01 da                	add    edx,ebx
c000ee51:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ee53:	09 c8                	or     eax,ecx
c000ee55:	88 02                	mov    BYTE PTR [edx],al
c000ee57:	5b                   	pop    ebx
c000ee58:	5e                   	pop    esi
c000ee59:	5f                   	pop    edi
c000ee5a:	c3                   	ret    

c000ee5b <Phys::getPageState(unsigned long)>:
c000ee5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee5f:	8b 15 54 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d54
c000ee65:	89 c8                	mov    eax,ecx
c000ee67:	83 e1 07             	and    ecx,0x7
c000ee6a:	c1 e8 03             	shr    eax,0x3
c000ee6d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ee71:	d3 f8                	sar    eax,cl
c000ee73:	83 e0 01             	and    eax,0x1
c000ee76:	c3                   	ret    

c000ee77 <Phys::freePage(unsigned long)>:
c000ee77:	53                   	push   ebx
c000ee78:	83 ec 08             	sub    esp,0x8
c000ee7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee7f:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ee85:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ee8b:	76 41                	jbe    c000eece <Phys::freePage(unsigned long)+0x57>
c000ee8d:	c1 e8 0c             	shr    eax,0xc
c000ee90:	50                   	push   eax
c000ee91:	89 c3                	mov    ebx,eax
c000ee93:	e8 c3 ff ff ff       	call   c000ee5b <Phys::getPageState(unsigned long)>
c000ee98:	5a                   	pop    edx
c000ee99:	84 c0                	test   al,al
c000ee9b:	74 20                	je     c000eebd <Phys::freePage(unsigned long)+0x46>
c000ee9d:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000eea2:	83 ec 08             	sub    esp,0x8
c000eea5:	6a 00                	push   0x0
c000eea7:	53                   	push   ebx
c000eea8:	83 e8 01             	sub    eax,0x1
c000eeab:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000eeb0:	e8 66 ff ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000eeb5:	83 c4 10             	add    esp,0x10
c000eeb8:	83 c4 08             	add    esp,0x8
c000eebb:	5b                   	pop    ebx
c000eebc:	c3                   	ret    
c000eebd:	c7 44 24 10 bd 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc00228bd
c000eec5:	83 c4 08             	add    esp,0x8
c000eec8:	5b                   	pop    ebx
c000eec9:	e9 18 fe ff ff       	jmp    c000ece6 <KePanic(char const*)>
c000eece:	68 00 10 00 00       	push   0x1000
c000eed3:	50                   	push   eax
c000eed4:	e8 07 ff ff ff       	call   c000ede0 <Phys::freeDMA(unsigned long, unsigned long)>
c000eed9:	59                   	pop    ecx
c000eeda:	5b                   	pop    ebx
c000eedb:	83 c4 08             	add    esp,0x8
c000eede:	5b                   	pop    ebx
c000eedf:	c3                   	ret    

c000eee0 <Phys::allocatePage()>:
c000eee0:	56                   	push   esi
c000eee1:	53                   	push   ebx
c000eee2:	83 ec 14             	sub    esp,0x14
c000eee5:	8b 35 9c cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd9c
c000eeeb:	89 f3                	mov    ebx,esi
c000eeed:	eb 0a                	jmp    c000eef9 <Phys::allocatePage()+0x19>
c000eeef:	89 1d 9c cd 02 c0    	mov    DWORD PTR ds:0xc002cd9c,ebx
c000eef5:	39 de                	cmp    esi,ebx
c000eef7:	74 26                	je     c000ef1f <Phys::allocatePage()+0x3f>
c000eef9:	53                   	push   ebx
c000eefa:	e8 5c ff ff ff       	call   c000ee5b <Phys::getPageState(unsigned long)>
c000eeff:	59                   	pop    ecx
c000ef00:	84 c0                	test   al,al
c000ef02:	74 67                	je     c000ef6b <Phys::allocatePage()+0x8b>
c000ef04:	83 c3 01             	add    ebx,0x1
c000ef07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ef0d:	75 e0                	jne    c000eeef <Phys::allocatePage()+0xf>
c000ef0f:	c7 05 9c cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd9c,0x0
c000ef19:	31 db                	xor    ebx,ebx
c000ef1b:	39 de                	cmp    esi,ebx
c000ef1d:	75 da                	jne    c000eef9 <Phys::allocatePage()+0x19>
c000ef1f:	a0 c0 cd 02 c0       	mov    al,ds:0xc002cdc0
c000ef24:	83 ec 0c             	sub    esp,0xc
c000ef27:	83 f0 01             	xor    eax,0x1
c000ef2a:	a2 c0 cd 02 c0       	mov    ds:0xc002cdc0,al
c000ef2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef37:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000ef3d:	51                   	push   ecx
c000ef3e:	e8 51 42 00 00       	call   c0013194 <VAS::scanForEviction()>
c000ef43:	83 c4 10             	add    esp,0x10
c000ef46:	85 c0                	test   eax,eax
c000ef48:	75 48                	jne    c000ef92 <Phys::allocatePage()+0xb2>
c000ef4a:	83 ec 0c             	sub    esp,0xc
c000ef4d:	68 e0 27 02 c0       	push   0xc00227e0
c000ef52:	e8 8f fd ff ff       	call   c000ece6 <KePanic(char const*)>
c000ef57:	8b 1d 9c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd9c
c000ef5d:	83 c4 10             	add    esp,0x10
c000ef60:	53                   	push   ebx
c000ef61:	e8 f5 fe ff ff       	call   c000ee5b <Phys::getPageState(unsigned long)>
c000ef66:	59                   	pop    ecx
c000ef67:	84 c0                	test   al,al
c000ef69:	75 99                	jne    c000ef04 <Phys::allocatePage()+0x24>
c000ef6b:	6a 01                	push   0x1
c000ef6d:	53                   	push   ebx
c000ef6e:	e8 a8 fe ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000ef73:	8b 1d a8 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cda8
c000ef79:	5e                   	pop    esi
c000ef7a:	a1 9c cd 02 c0       	mov    eax,ds:0xc002cd9c
c000ef7f:	5a                   	pop    edx
c000ef80:	83 c3 01             	add    ebx,0x1
c000ef83:	89 1d a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,ebx
c000ef89:	c1 e0 0c             	shl    eax,0xc
c000ef8c:	83 c4 14             	add    esp,0x14
c000ef8f:	5b                   	pop    ebx
c000ef90:	5e                   	pop    esi
c000ef91:	c3                   	ret    
c000ef92:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000ef98:	83 ec 08             	sub    esp,0x8
c000ef9b:	6a 01                	push   0x1
c000ef9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efa1:	83 c2 01             	add    edx,0x1
c000efa4:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000efaa:	89 c2                	mov    edx,eax
c000efac:	c1 ea 0c             	shr    edx,0xc
c000efaf:	52                   	push   edx
c000efb0:	e8 66 fe ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000efb5:	83 c4 10             	add    esp,0x10
c000efb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efbc:	eb ce                	jmp    c000ef8c <Phys::allocatePage()+0xac>

c000efbe <Phys::allocateContiguousPages(int)>:
c000efbe:	57                   	push   edi
c000efbf:	56                   	push   esi
c000efc0:	53                   	push   ebx
c000efc1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000efc5:	fa                   	cli    
c000efc6:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c000efcc:	83 ec 0c             	sub    esp,0xc
c000efcf:	31 db                	xor    ebx,ebx
c000efd1:	68 10 28 02 c0       	push   0xc0022810
c000efd6:	83 c2 01             	add    edx,0x1
c000efd9:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c000efdf:	e8 6a 7f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000efe4:	83 c4 10             	add    esp,0x10
c000efe7:	85 db                	test   ebx,ebx
c000efe9:	75 11                	jne    c000effc <Phys::allocateContiguousPages(int)+0x3e>
c000efeb:	e8 f0 fe ff ff       	call   c000eee0 <Phys::allocatePage()>
c000eff0:	83 ff 01             	cmp    edi,0x1
c000eff3:	89 c6                	mov    esi,eax
c000eff5:	74 21                	je     c000f018 <Phys::allocateContiguousPages(int)+0x5a>
c000eff7:	bb 01 00 00 00       	mov    ebx,0x1
c000effc:	e8 df fe ff ff       	call   c000eee0 <Phys::allocatePage()>
c000f001:	89 da                	mov    edx,ebx
c000f003:	c1 e2 0c             	shl    edx,0xc
c000f006:	01 f2                	add    edx,esi
c000f008:	39 c2                	cmp    edx,eax
c000f00a:	74 24                	je     c000f030 <Phys::allocateContiguousPages(int)+0x72>
c000f00c:	83 ff 01             	cmp    edi,0x1
c000f00f:	bb 01 00 00 00       	mov    ebx,0x1
c000f014:	89 c6                	mov    esi,eax
c000f016:	75 e4                	jne    c000effc <Phys::allocateContiguousPages(int)+0x3e>
c000f018:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f020:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f025:	85 c0                	test   eax,eax
c000f027:	75 01                	jne    c000f02a <Phys::allocateContiguousPages(int)+0x6c>
c000f029:	fb                   	sti    
c000f02a:	5b                   	pop    ebx
c000f02b:	89 f0                	mov    eax,esi
c000f02d:	5e                   	pop    esi
c000f02e:	5f                   	pop    edi
c000f02f:	c3                   	ret    
c000f030:	83 c3 01             	add    ebx,0x1
c000f033:	39 fb                	cmp    ebx,edi
c000f035:	75 b0                	jne    c000efe7 <Phys::allocateContiguousPages(int)+0x29>
c000f037:	eb df                	jmp    c000f018 <Phys::allocateContiguousPages(int)+0x5a>

c000f039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f039:	56                   	push   esi
c000f03a:	53                   	push   ebx
c000f03b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f03f:	39 1d a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,ebx
c000f045:	73 06                	jae    c000f04d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f047:	89 1d a0 cd 02 c0    	mov    DWORD PTR ds:0xc002cda0,ebx
c000f04d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f051:	c1 eb 0c             	shr    ebx,0xc
c000f054:	c1 e8 0c             	shr    eax,0xc
c000f057:	39 d8                	cmp    eax,ebx
c000f059:	73 13                	jae    c000f06e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f05b:	6a 00                	push   0x0
c000f05d:	50                   	push   eax
c000f05e:	8d 70 01             	lea    esi,[eax+0x1]
c000f061:	e8 b5 fd ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000f066:	39 f3                	cmp    ebx,esi
c000f068:	89 f0                	mov    eax,esi
c000f06a:	5a                   	pop    edx
c000f06b:	59                   	pop    ecx
c000f06c:	75 ed                	jne    c000f05b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f06e:	5b                   	pop    ebx
c000f06f:	5e                   	pop    esi
c000f070:	c3                   	ret    

c000f071 <Phys::physicalMemorySetup(unsigned int)>:
c000f071:	55                   	push   ebp
c000f072:	57                   	push   edi
c000f073:	56                   	push   esi
c000f074:	53                   	push   ebx
c000f075:	31 db                	xor    ebx,ebx
c000f077:	83 ec 40             	sub    esp,0x40
c000f07a:	6a 10                	push   0x10
c000f07c:	6a 00                	push   0x0
c000f07e:	68 b0 cd 02 c0       	push   0xc002cdb0
c000f083:	e8 68 14 ff ff       	call   c00004f0 <memset>
c000f088:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f08c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f091:	05 00 10 00 00       	add    eax,0x1000
c000f096:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f09a:	5a                   	pop    edx
c000f09b:	59                   	pop    ecx
c000f09c:	50                   	push   eax
c000f09d:	68 d3 28 02 c0       	push   0xc00228d3
c000f0a2:	e8 a7 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0a7:	83 c4 10             	add    esp,0x10
c000f0aa:	83 ec 08             	sub    esp,0x8
c000f0ad:	6a 01                	push   0x1
c000f0af:	53                   	push   ebx
c000f0b0:	83 c3 01             	add    ebx,0x1
c000f0b3:	e8 63 fd ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000f0b8:	83 c4 10             	add    esp,0x10
c000f0bb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f0c1:	75 e7                	jne    c000f0aa <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f0c3:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f0ca:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f0d1:	c1 e0 08             	shl    eax,0x8
c000f0d4:	09 c2                	or     edx,eax
c000f0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f0da:	0f 84 43 01 00 00    	je     c000f223 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000f0e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f0e8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f0ed:	e9 82 00 00 00       	jmp    c000f174 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f0f2:	ba 00 00 08 00       	mov    edx,0x80000
c000f0f7:	89 c1                	mov    ecx,eax
c000f0f9:	39 f2                	cmp    edx,esi
c000f0fb:	19 f9                	sbb    ecx,edi
c000f0fd:	0f 82 c0 00 00 00    	jb     c000f1c3 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f103:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f107:	89 c5                	mov    ebp,eax
c000f109:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f10d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f111:	19 cd                	sbb    ebp,ecx
c000f113:	0f 83 af 00 00 00    	jae    c000f1c8 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f119:	89 d6                	mov    esi,edx
c000f11b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f120:	39 f2                	cmp    edx,esi
c000f122:	89 cf                	mov    edi,ecx
c000f124:	19 c8                	sbb    eax,ecx
c000f126:	73 07                	jae    c000f12f <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f128:	be 00 00 0a 00       	mov    esi,0xa0000
c000f12d:	31 ff                	xor    edi,edi
c000f12f:	89 f2                	mov    edx,esi
c000f131:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f136:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f13c:	89 f9                	mov    ecx,edi
c000f13e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f142:	83 d1 ff             	adc    ecx,0xffffffff
c000f145:	39 d0                	cmp    eax,edx
c000f147:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f14b:	b8 00 00 00 00       	mov    eax,0x0
c000f150:	19 c8                	sbb    eax,ecx
c000f152:	0f 82 9d 01 00 00    	jb     c000f2f5 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f158:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f15c:	83 c3 18             	add    ebx,0x18
c000f15f:	83 c6 01             	add    esi,0x1
c000f162:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f166:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f16a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f16e:	0f 84 bf 00 00 00    	je     c000f233 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f174:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f176:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f179:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f17c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f17f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f183:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f18a:	01 f0                	add    eax,esi
c000f18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f190:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f194:	55                   	push   ebp
c000f195:	11 fa                	adc    edx,edi
c000f197:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f19b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f19f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1a3:	50                   	push   eax
c000f1a4:	56                   	push   esi
c000f1a5:	68 70 28 02 c0       	push   0xc0022870
c000f1aa:	e8 9f 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f1af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1b3:	83 c4 10             	add    esp,0x10
c000f1b6:	09 f8                	or     eax,edi
c000f1b8:	75 79                	jne    c000f233 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f1ba:	83 fd 01             	cmp    ebp,0x1
c000f1bd:	0f 84 2f ff ff ff    	je     c000f0f2 <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f1c3:	83 fd 01             	cmp    ebp,0x1
c000f1c6:	75 90                	jne    c000f158 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f1c8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f1cc:	31 d2                	xor    edx,edx
c000f1ce:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f1d2:	89 c8                	mov    eax,ecx
c000f1d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1d8:	19 d1                	sbb    ecx,edx
c000f1da:	0f 82 78 ff ff ff    	jb     c000f158 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f1e0:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f1e5:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f1e9:	b9 00 00 00 00       	mov    ecx,0x0
c000f1ee:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f1f2:	0f 83 60 ff ff ff    	jae    c000f158 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f1f8:	39 c6                	cmp    esi,eax
c000f1fa:	19 d7                	sbb    edi,edx
c000f1fc:	0f 83 ff 00 00 00    	jae    c000f301 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f202:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f206:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f20a:	29 c7                	sub    edi,eax
c000f20c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f210:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f214:	19 d5                	sbb    ebp,edx
c000f216:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f21a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f21e:	e9 de 00 00 00       	jmp    c000f301 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f223:	83 ec 0c             	sub    esp,0xc
c000f226:	68 eb 28 02 c0       	push   0xc00228eb
c000f22b:	e8 b6 fa ff ff       	call   c000ece6 <KePanic(char const*)>
c000f230:	83 c4 10             	add    esp,0x10
c000f233:	83 ec 08             	sub    esp,0x8
c000f236:	bb 60 00 00 00       	mov    ebx,0x60
c000f23b:	6a 00                	push   0x0
c000f23d:	6a 06                	push   0x6
c000f23f:	e8 d7 fb ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000f244:	58                   	pop    eax
c000f245:	5a                   	pop    edx
c000f246:	6a 00                	push   0x0
c000f248:	6a 07                	push   0x7
c000f24a:	e8 cc fb ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000f24f:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c000f255:	83 c4 10             	add    esp,0x10
c000f258:	83 c1 02             	add    ecx,0x2
c000f25b:	89 0d ac cd 02 c0    	mov    DWORD PTR ds:0xc002cdac,ecx
c000f261:	83 ec 08             	sub    esp,0x8
c000f264:	6a 00                	push   0x0
c000f266:	53                   	push   ebx
c000f267:	83 c3 01             	add    ebx,0x1
c000f26a:	e8 ac fb ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000f26f:	83 c4 10             	add    esp,0x10
c000f272:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f278:	75 e7                	jne    c000f261 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f27a:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f27f:	bb 40 01 00 00       	mov    ebx,0x140
c000f284:	83 c0 20             	add    eax,0x20
c000f287:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f28c:	eb 26                	jmp    c000f2b4 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f28e:	83 ec 08             	sub    esp,0x8
c000f291:	6a 00                	push   0x0
c000f293:	53                   	push   ebx
c000f294:	83 c3 01             	add    ebx,0x1
c000f297:	e8 7f fb ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000f29c:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	83 c0 01             	add    eax,0x1
c000f2a7:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f2ad:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f2b2:	74 07                	je     c000f2bb <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f2b4:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f2b9:	7e d3                	jle    c000f28e <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f2bb:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f2c0:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f2c5:	7f 26                	jg     c000f2ed <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f2c7:	83 ec 08             	sub    esp,0x8
c000f2ca:	6a 00                	push   0x0
c000f2cc:	53                   	push   ebx
c000f2cd:	83 c3 01             	add    ebx,0x1
c000f2d0:	e8 46 fb ff ff       	call   c000ee1b <Phys::setPageState(unsigned long, bool)>
c000f2d5:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f2da:	83 c4 10             	add    esp,0x10
c000f2dd:	83 c0 01             	add    eax,0x1
c000f2e0:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f2e6:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f2eb:	75 d3                	jne    c000f2c0 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f2ed:	83 c4 3c             	add    esp,0x3c
c000f2f0:	5b                   	pop    ebx
c000f2f1:	5e                   	pop    esi
c000f2f2:	5f                   	pop    edi
c000f2f3:	5d                   	pop    ebp
c000f2f4:	c3                   	ret    
c000f2f5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f2f9:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f301:	83 ec 04             	sub    esp,0x4
c000f304:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f308:	56                   	push   esi
c000f309:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f30d:	57                   	push   edi
c000f30e:	68 94 28 02 c0       	push   0xc0022894
c000f313:	e8 36 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f318:	5d                   	pop    ebp
c000f319:	58                   	pop    eax
c000f31a:	56                   	push   esi
c000f31b:	57                   	push   edi
c000f31c:	e8 18 fd ff ff       	call   c000f039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f321:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f325:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f329:	83 c4 0c             	add    esp,0xc
c000f32c:	8b 35 ac cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cdac
c000f332:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f336:	01 f0                	add    eax,esi
c000f338:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f33d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f344:	52                   	push   edx
c000f345:	50                   	push   eax
c000f346:	68 f9 28 02 c0       	push   0xc00228f9
c000f34b:	e8 fe 7b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f350:	83 c4 10             	add    esp,0x10
c000f353:	e9 00 fe ff ff       	jmp    c000f158 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000f358 <Pipe::isAtty()>:
c000f358:	31 c0                	xor    eax,eax
c000f35a:	c3                   	ret    
c000f35b:	90                   	nop

c000f35c <Pipe::~Pipe()>:
c000f35c:	83 ec 0c             	sub    esp,0xc
c000f35f:	ba 58 29 02 c0       	mov    edx,0xc0022958
c000f364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f368:	89 10                	mov    DWORD PTR [eax],edx
c000f36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f36e:	83 ec 0c             	sub    esp,0xc
c000f371:	50                   	push   eax
c000f372:	e8 bb 2a 00 00       	call   c0011e32 <UnixFile::~UnixFile()>
c000f377:	83 c4 10             	add    esp,0x10
c000f37a:	90                   	nop
c000f37b:	83 c4 0c             	add    esp,0xc
c000f37e:	c3                   	ret    
c000f37f:	90                   	nop

c000f380 <Pipe::~Pipe()>:
c000f380:	83 ec 0c             	sub    esp,0xc
c000f383:	83 ec 0c             	sub    esp,0xc
c000f386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f38a:	e8 cd ff ff ff       	call   c000f35c <Pipe::~Pipe()>
c000f38f:	83 c4 10             	add    esp,0x10
c000f392:	83 ec 08             	sub    esp,0x8
c000f395:	6a 20                	push   0x20
c000f397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f39b:	e8 0b d3 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	83 c4 0c             	add    esp,0xc
c000f3a6:	c3                   	ret    
c000f3a7:	90                   	nop

c000f3a8 <Pipe::write(unsigned long long, void*, int*)>:
c000f3a8:	55                   	push   ebp
c000f3a9:	57                   	push   edi
c000f3aa:	56                   	push   esi
c000f3ab:	53                   	push   ebx
c000f3ac:	83 ec 1c             	sub    esp,0x1c
c000f3af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f3b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f3b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f3bb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f3be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f3c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f3c5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3c8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f3cc:	89 d8                	mov    eax,ebx
c000f3ce:	89 d6                	mov    esi,edx
c000f3d0:	89 d7                	mov    edi,edx
c000f3d2:	c1 ff 1f             	sar    edi,0x1f
c000f3d5:	03 34 24             	add    esi,DWORD PTR [esp]
c000f3d8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f3dc:	c1 f8 1f             	sar    eax,0x1f
c000f3df:	39 f3                	cmp    ebx,esi
c000f3e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3e9:	19 f8                	sbb    eax,edi
c000f3eb:	b8 01 00 00 00       	mov    eax,0x1
c000f3f0:	72 72                	jb     c000f464 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f3f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f3f5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f3f9:	01 d0                	add    eax,edx
c000f3fb:	99                   	cdq    
c000f3fc:	f7 fb                	idiv   ebx
c000f3fe:	89 d8                	mov    eax,ebx
c000f400:	29 d0                	sub    eax,edx
c000f402:	89 d6                	mov    esi,edx
c000f404:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f407:	89 c3                	mov    ebx,eax
c000f409:	c1 fb 1f             	sar    ebx,0x1f
c000f40c:	39 c2                	cmp    edx,eax
c000f40e:	19 df                	sbb    edi,ebx
c000f410:	bb 00 00 00 00       	mov    ebx,0x0
c000f415:	72 04                	jb     c000f41b <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f417:	89 d3                	mov    ebx,edx
c000f419:	29 c3                	sub    ebx,eax
c000f41b:	89 d0                	mov    eax,edx
c000f41d:	29 d8                	sub    eax,ebx
c000f41f:	74 0d                	je     c000f42e <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f421:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f424:	89 c1                	mov    ecx,eax
c000f426:	01 f7                	add    edi,esi
c000f428:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f42c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f42e:	85 db                	test   ebx,ebx
c000f430:	74 0d                	je     c000f43f <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f432:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f436:	89 d9                	mov    ecx,ebx
c000f438:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f43b:	89 c6                	mov    esi,eax
c000f43d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f43f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f442:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f447:	75 10                	jne    c000f459 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f449:	83 ec 0c             	sub    esp,0xc
c000f44c:	68 15 29 02 c0       	push   0xc0022915
c000f451:	e8 90 f8 ff ff       	call   c000ece6 <KePanic(char const*)>
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f45d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f460:	89 08                	mov    DWORD PTR [eax],ecx
c000f462:	31 c0                	xor    eax,eax
c000f464:	83 c4 1c             	add    esp,0x1c
c000f467:	5b                   	pop    ebx
c000f468:	5e                   	pop    esi
c000f469:	5f                   	pop    edi
c000f46a:	5d                   	pop    ebp
c000f46b:	c3                   	ret    

c000f46c <Pipe::read(unsigned long long, void*, int*)>:
c000f46c:	55                   	push   ebp
c000f46d:	57                   	push   edi
c000f46e:	56                   	push   esi
c000f46f:	53                   	push   ebx
c000f470:	83 ec 1c             	sub    esp,0x1c
c000f473:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f477:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f47b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f47f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f482:	89 c8                	mov    eax,ecx
c000f484:	99                   	cdq    
c000f485:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f489:	74 27                	je     c000f4b2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f48b:	39 f9                	cmp    ecx,edi
c000f48d:	89 d1                	mov    ecx,edx
c000f48f:	19 f1                	sbb    ecx,esi
c000f491:	73 1f                	jae    c000f4b2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f493:	fa                   	cli    
c000f494:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000f49a:	e8 91 62 00 00       	call   c0015730 <schedule()>
c000f49f:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f4a6:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f4ad:	75 d0                	jne    c000f47f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f4af:	fb                   	sti    
c000f4b0:	eb cd                	jmp    c000f47f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f4b2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f4b6:	39 f8                	cmp    eax,edi
c000f4b8:	89 d1                	mov    ecx,edx
c000f4ba:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f4be:	19 f1                	sbb    ecx,esi
c000f4c0:	73 08                	jae    c000f4ca <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000f4c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4ca:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f4cd:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f4d0:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f4d4:	29 f7                	sub    edi,esi
c000f4d6:	89 f8                	mov    eax,edi
c000f4d8:	99                   	cdq    
c000f4d9:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f4dd:	89 d0                	mov    eax,edx
c000f4df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4e3:	19 c2                	sbb    edx,eax
c000f4e5:	89 f8                	mov    eax,edi
c000f4e7:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f4ec:	89 ea                	mov    edx,ebp
c000f4ee:	29 c2                	sub    edx,eax
c000f4f0:	85 c0                	test   eax,eax
c000f4f2:	74 0b                	je     c000f4ff <Pipe::read(unsigned long long, void*, int*)+0x93>
c000f4f4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f4f7:	89 c1                	mov    ecx,eax
c000f4f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f4fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4ff:	85 d2                	test   edx,edx
c000f501:	74 0d                	je     c000f510 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000f503:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f507:	89 d1                	mov    ecx,edx
c000f509:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f50c:	89 c7                	mov    edi,eax
c000f50e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f510:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f513:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f516:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f519:	99                   	cdq    
c000f51a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f51e:	89 f7                	mov    edi,esi
c000f520:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f524:	c1 ff 1f             	sar    edi,0x1f
c000f527:	57                   	push   edi
c000f528:	56                   	push   esi
c000f529:	52                   	push   edx
c000f52a:	50                   	push   eax
c000f52b:	e8 94 0c 01 00       	call   c00201c4 <__umoddi3>
c000f530:	83 c4 10             	add    esp,0x10
c000f533:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f538:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f53b:	75 10                	jne    c000f54d <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000f53d:	83 ec 0c             	sub    esp,0xc
c000f540:	68 32 29 02 c0       	push   0xc0022932
c000f545:	e8 9c f7 ff ff       	call   c000ece6 <KePanic(char const*)>
c000f54a:	83 c4 10             	add    esp,0x10
c000f54d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f551:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f555:	89 10                	mov    DWORD PTR [eax],edx
c000f557:	83 c4 1c             	add    esp,0x1c
c000f55a:	31 c0                	xor    eax,eax
c000f55c:	5b                   	pop    ebx
c000f55d:	5e                   	pop    esi
c000f55e:	5f                   	pop    edi
c000f55f:	5d                   	pop    ebp
c000f560:	c3                   	ret    
c000f561:	90                   	nop

c000f562 <Pipe::Pipe(int)>:
c000f562:	83 ec 0c             	sub    esp,0xc
c000f565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f569:	83 ec 08             	sub    esp,0x8
c000f56c:	6a 00                	push   0x0
c000f56e:	50                   	push   eax
c000f56f:	e8 d8 26 00 00       	call   c0011c4c <UnixFile::UnixFile(int)>
c000f574:	83 c4 10             	add    esp,0x10
c000f577:	ba 58 29 02 c0       	mov    edx,0xc0022958
c000f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f580:	89 10                	mov    DWORD PTR [eax],edx
c000f582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f586:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f58a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f591:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f59c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f5a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5a7:	83 ec 0c             	sub    esp,0xc
c000f5aa:	50                   	push   eax
c000f5ab:	e8 f0 f3 ff ff       	call   c000e9a0 <malloc>
c000f5b0:	83 c4 10             	add    esp,0x10
c000f5b3:	89 c2                	mov    edx,eax
c000f5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5c0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f5c4:	90                   	nop
c000f5c5:	83 c4 0c             	add    esp,0xc
c000f5c8:	c3                   	ret    

c000f5c9 <KePowerThread(void*)>:
c000f5c9:	83 ec 0c             	sub    esp,0xc
c000f5cc:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f5d3:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f5da:	75 01                	jne    c000f5dd <KePowerThread(void*)+0x14>
c000f5dc:	fb                   	sti    
c000f5dd:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f5e4:	83 ec 0c             	sub    esp,0xc
c000f5e7:	6a 0a                	push   0xa
c000f5e9:	e8 4e 63 00 00       	call   c001593c <sleep(unsigned int)>
c000f5ee:	83 c4 10             	add    esp,0x10
c000f5f1:	83 05 24 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce24,0xa
c000f5f8:	eb e3                	jmp    c000f5dd <KePowerThread(void*)+0x14>

c000f5fa <KeChangePowerSettings(PowerSettings)>:
c000f5fa:	57                   	push   edi
c000f5fb:	b9 09 00 00 00       	mov    ecx,0x9
c000f600:	56                   	push   esi
c000f601:	bf 00 ce 02 c0       	mov    edi,0xc002ce00
c000f606:	fc                   	cld    
c000f607:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f60b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f60d:	5e                   	pop    esi
c000f60e:	5f                   	pop    edi
c000f60f:	c3                   	ret    

c000f610 <KeUserIOReceived()>:
c000f610:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f61a:	c3                   	ret    

c000f61b <KeHandlePowerButton()>:
c000f61b:	a1 00 ce 02 c0       	mov    eax,ds:0xc002ce00
c000f620:	83 f8 02             	cmp    eax,0x2
c000f623:	75 05                	jne    c000f62a <KeHandlePowerButton()+0xf>
c000f625:	e9 ba e0 ff ff       	jmp    c000d6e4 <KeShutdown()>
c000f62a:	48                   	dec    eax
c000f62b:	75 05                	jne    c000f632 <KeHandlePowerButton()+0x17>
c000f62d:	e9 d6 e0 ff ff       	jmp    c000d708 <KeSleep()>
c000f632:	c3                   	ret    

c000f633 <KeHandleSleepButton()>:
c000f633:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c000f638:	83 f8 02             	cmp    eax,0x2
c000f63b:	75 05                	jne    c000f642 <KeHandleSleepButton()+0xf>
c000f63d:	e9 a2 e0 ff ff       	jmp    c000d6e4 <KeShutdown()>
c000f642:	48                   	dec    eax
c000f643:	75 05                	jne    c000f64a <KeHandleSleepButton()+0x17>
c000f645:	e9 be e0 ff ff       	jmp    c000d708 <KeSleep()>
c000f64a:	c3                   	ret    

c000f64b <KeSetupPowerManager()>:
c000f64b:	83 ec 0c             	sub    esp,0xc
c000f64e:	68 f0 00 00 00       	push   0xf0
c000f653:	6a 00                	push   0x0
c000f655:	68 c9 f5 00 c0       	push   0xc000f5c9
c000f65a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000f660:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f66a:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f671:	e8 6e 5e 00 00       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c000f676:	c7 05 00 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce00,0x2
c000f680:	c7 05 04 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce04,0x1
c000f68a:	c7 05 08 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce08,0x3
c000f694:	c7 05 0c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce0c,0x0
c000f69e:	c7 05 18 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce18,0x0
c000f6a8:	c7 05 10 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce10,0x0
c000f6b2:	c7 05 1c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce1c,0x0
c000f6bc:	c7 05 14 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x3c
c000f6c6:	c7 05 20 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x3c
c000f6d0:	83 c4 1c             	add    esp,0x1c
c000f6d3:	c3                   	ret    

c000f6d4 <KeRand()>:
c000f6d4:	69 05 28 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce28,0x2875
c000f6de:	69 0d 2c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce2c,0xa2e7b175
c000f6e8:	53                   	push   ebx
c000f6e9:	01 c1                	add    ecx,eax
c000f6eb:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f6f0:	f7 25 28 ce 02 c0    	mul    DWORD PTR ds:0xc002ce28
c000f6f6:	01 ca                	add    edx,ecx
c000f6f8:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f6fd:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f702:	83 d2 00             	adc    edx,0x0
c000f705:	0f b7 da             	movzx  ebx,dx
c000f708:	89 1d 2c ce 02 c0    	mov    DWORD PTR ds:0xc002ce2c,ebx
c000f70e:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f712:	5b                   	pop    ebx
c000f713:	c3                   	ret    

c000f714 <KeSeedRand(unsigned int)>:
c000f714:	53                   	push   ebx
c000f715:	83 ec 08             	sub    esp,0x8
c000f718:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f71c:	e8 a2 92 00 00       	call   c00189c3 <HalGetRand()>
c000f721:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c000f72b:	31 d8                	xor    eax,ebx
c000f72d:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f732:	e8 9d ff ff ff       	call   c000f6d4 <KeRand()>
c000f737:	83 c4 08             	add    esp,0x8
c000f73a:	5b                   	pop    ebx
c000f73b:	eb 97                	jmp    c000f6d4 <KeRand()>

c000f73d <KeInitRand()>:
c000f73d:	83 ec 0c             	sub    esp,0xc
c000f740:	e8 a2 90 00 00       	call   c00187e7 <HalQueryPerformanceCounter()>
c000f745:	0f 20 da             	mov    edx,cr3
c000f748:	0f 22 da             	mov    cr3,edx
c000f74b:	0f 20 da             	mov    edx,cr3
c000f74e:	0f 22 da             	mov    cr3,edx
c000f751:	0f 20 da             	mov    edx,cr3
c000f754:	0f 22 da             	mov    cr3,edx
c000f757:	0f 20 da             	mov    edx,cr3
c000f75a:	0f 22 da             	mov    cr3,edx
c000f75d:	83 ec 0c             	sub    esp,0xc
c000f760:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f765:	50                   	push   eax
c000f766:	e8 a9 ff ff ff       	call   c000f714 <KeSeedRand(unsigned int)>
c000f76b:	83 c4 1c             	add    esp,0x1c
c000f76e:	c3                   	ret    
c000f76f:	90                   	nop

c000f770 <KeResolveCompatibilitySymbol(char*)>:
c000f770:	83 ec 0c             	sub    esp,0xc
c000f773:	83 ec 08             	sub    esp,0x8
c000f776:	68 6c 29 02 c0       	push   0xc002296c
c000f77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f77f:	e8 fc 0f ff ff       	call   c0000780 <strcmp>
c000f784:	83 c4 10             	add    esp,0x10
c000f787:	85 c0                	test   eax,eax
c000f789:	0f 94 c0             	sete   al
c000f78c:	0f b6 c0             	movzx  eax,al
c000f78f:	85 c0                	test   eax,eax
c000f791:	74 0d                	je     c000f7a0 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f793:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c000f798:	e9 8b 01 00 00       	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f79d:	8d 76 00             	lea    esi,[esi+0x0]
c000f7a0:	83 ec 08             	sub    esp,0x8
c000f7a3:	68 75 29 02 c0       	push   0xc0022975
c000f7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7ac:	e8 cf 0f ff ff       	call   c0000780 <strcmp>
c000f7b1:	83 c4 10             	add    esp,0x10
c000f7b4:	85 c0                	test   eax,eax
c000f7b6:	0f 94 c0             	sete   al
c000f7b9:	0f b6 c0             	movzx  eax,al
c000f7bc:	85 c0                	test   eax,eax
c000f7be:	74 0c                	je     c000f7cc <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f7c0:	b8 c4 00 02 c0       	mov    eax,0xc00200c4
c000f7c5:	e9 5e 01 00 00       	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	68 7f 29 02 c0       	push   0xc002297f
c000f7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7d8:	e8 a3 0f ff ff       	call   c0000780 <strcmp>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	85 c0                	test   eax,eax
c000f7e2:	0f 94 c0             	sete   al
c000f7e5:	0f b6 c0             	movzx  eax,al
c000f7e8:	85 c0                	test   eax,eax
c000f7ea:	74 0c                	je     c000f7f8 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f7ec:	b8 f8 fd 01 c0       	mov    eax,0xc001fdf8
c000f7f1:	e9 32 01 00 00       	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7f6:	66 90                	xchg   ax,ax
c000f7f8:	83 ec 08             	sub    esp,0x8
c000f7fb:	68 88 29 02 c0       	push   0xc0022988
c000f800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f804:	e8 77 0f ff ff       	call   c0000780 <strcmp>
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	85 c0                	test   eax,eax
c000f80e:	0f 94 c0             	sete   al
c000f811:	0f b6 c0             	movzx  eax,al
c000f814:	85 c0                	test   eax,eax
c000f816:	74 0c                	je     c000f824 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f818:	b8 e6 ec 00 c0       	mov    eax,0xc000ece6
c000f81d:	e9 06 01 00 00       	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f822:	66 90                	xchg   ax,ax
c000f824:	83 ec 08             	sub    esp,0x8
c000f827:	68 9b 29 02 c0       	push   0xc002299b
c000f82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f830:	e8 4b 0f ff ff       	call   c0000780 <strcmp>
c000f835:	83 c4 10             	add    esp,0x10
c000f838:	85 c0                	test   eax,eax
c000f83a:	0f 94 c0             	sete   al
c000f83d:	0f b6 c0             	movzx  eax,al
c000f840:	85 c0                	test   eax,eax
c000f842:	74 0c                	je     c000f850 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f844:	b8 eb c5 00 c0       	mov    eax,0xc000c5eb
c000f849:	e9 da 00 00 00       	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f84e:	66 90                	xchg   ax,ax
c000f850:	83 ec 08             	sub    esp,0x8
c000f853:	68 b8 29 02 c0       	push   0xc00229b8
c000f858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85c:	e8 1f 0f ff ff       	call   c0000780 <strcmp>
c000f861:	83 c4 10             	add    esp,0x10
c000f864:	85 c0                	test   eax,eax
c000f866:	0f 94 c0             	sete   al
c000f869:	0f b6 c0             	movzx  eax,al
c000f86c:	85 c0                	test   eax,eax
c000f86e:	74 0c                	je     c000f87c <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f870:	b8 c4 01 02 c0       	mov    eax,0xc00201c4
c000f875:	e9 ae 00 00 00       	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f87a:	66 90                	xchg   ax,ax
c000f87c:	83 ec 08             	sub    esp,0x8
c000f87f:	68 c2 29 02 c0       	push   0xc00229c2
c000f884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f888:	e8 f3 0e ff ff       	call   c0000780 <strcmp>
c000f88d:	83 c4 10             	add    esp,0x10
c000f890:	85 c0                	test   eax,eax
c000f892:	0f 94 c0             	sete   al
c000f895:	0f b6 c0             	movzx  eax,al
c000f898:	85 c0                	test   eax,eax
c000f89a:	74 0c                	je     c000f8a8 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f89c:	b8 44 ff 01 c0       	mov    eax,0xc001ff44
c000f8a1:	e9 82 00 00 00       	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8a6:	66 90                	xchg   ax,ax
c000f8a8:	83 ec 08             	sub    esp,0x8
c000f8ab:	68 cb 29 02 c0       	push   0xc00229cb
c000f8b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b4:	e8 c7 0e ff ff       	call   c0000780 <strcmp>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	85 c0                	test   eax,eax
c000f8be:	0f 94 c0             	sete   al
c000f8c1:	0f b6 c0             	movzx  eax,al
c000f8c4:	85 c0                	test   eax,eax
c000f8c6:	74 08                	je     c000f8d0 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f8c8:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f8cd:	eb 59                	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8cf:	90                   	nop
c000f8d0:	83 ec 08             	sub    esp,0x8
c000f8d3:	68 e3 29 02 c0       	push   0xc00229e3
c000f8d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8dc:	e8 9f 0e ff ff       	call   c0000780 <strcmp>
c000f8e1:	83 c4 10             	add    esp,0x10
c000f8e4:	85 c0                	test   eax,eax
c000f8e6:	0f 94 c0             	sete   al
c000f8e9:	0f b6 c0             	movzx  eax,al
c000f8ec:	85 c0                	test   eax,eax
c000f8ee:	74 08                	je     c000f8f8 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f8f0:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f8f5:	eb 31                	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8f7:	90                   	nop
c000f8f8:	83 ec 08             	sub    esp,0x8
c000f8fb:	68 f0 29 02 c0       	push   0xc00229f0
c000f900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f904:	e8 77 0e ff ff       	call   c0000780 <strcmp>
c000f909:	83 c4 10             	add    esp,0x10
c000f90c:	85 c0                	test   eax,eax
c000f90e:	0f 94 c0             	sete   al
c000f911:	0f b6 c0             	movzx  eax,al
c000f914:	85 c0                	test   eax,eax
c000f916:	74 08                	je     c000f920 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f918:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c000f91d:	eb 09                	jmp    c000f928 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f91f:	90                   	nop
c000f920:	b8 00 00 00 00       	mov    eax,0x0
c000f925:	8d 76 00             	lea    esi,[esi+0x0]
c000f928:	83 c4 0c             	add    esp,0xc
c000f92b:	c3                   	ret    

c000f92c <Semaphore::Semaphore(int)>:
c000f92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f930:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f934:	89 10                	mov    DWORD PTR [eax],edx
c000f936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f93a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f945:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f950:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f957:	90                   	nop
c000f958:	c3                   	ret    
c000f959:	90                   	nop
c000f95a:	66 90                	xchg   ax,ax

c000f95c <Semaphore::tryAcquire()>:
c000f95c:	83 ec 0c             	sub    esp,0xc
c000f95f:	fa                   	cli    
c000f960:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f965:	83 c0 01             	add    eax,0x1
c000f968:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000f96d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f972:	83 c0 01             	add    eax,0x1
c000f975:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f985:	8b 00                	mov    eax,DWORD PTR [eax]
c000f987:	39 c2                	cmp    edx,eax
c000f989:	7d 59                	jge    c000f9e4 <Semaphore::tryAcquire()+0x88>
c000f98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f992:	8d 50 01             	lea    edx,[eax+0x1]
c000f995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f999:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f99c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f9a1:	83 e8 01             	sub    eax,0x1
c000f9a4:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f9a9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f9ae:	85 c0                	test   eax,eax
c000f9b0:	75 1a                	jne    c000f9cc <Semaphore::tryAcquire()+0x70>
c000f9b2:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000f9b7:	85 c0                	test   eax,eax
c000f9b9:	74 11                	je     c000f9cc <Semaphore::tryAcquire()+0x70>
c000f9bb:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000f9c5:	e8 66 5d 00 00       	call   c0015730 <schedule()>
c000f9ca:	66 90                	xchg   ax,ax
c000f9cc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f9d4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f9d9:	85 c0                	test   eax,eax
c000f9db:	75 03                	jne    c000f9e0 <Semaphore::tryAcquire()+0x84>
c000f9dd:	fb                   	sti    
c000f9de:	66 90                	xchg   ax,ax
c000f9e0:	b0 01                	mov    al,0x1
c000f9e2:	eb 48                	jmp    c000fa2c <Semaphore::tryAcquire()+0xd0>
c000f9e4:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f9e9:	83 e8 01             	sub    eax,0x1
c000f9ec:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f9f1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 1a                	jne    c000fa14 <Semaphore::tryAcquire()+0xb8>
c000f9fa:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000f9ff:	85 c0                	test   eax,eax
c000fa01:	74 11                	je     c000fa14 <Semaphore::tryAcquire()+0xb8>
c000fa03:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fa0d:	e8 1e 5d 00 00       	call   c0015730 <schedule()>
c000fa12:	66 90                	xchg   ax,ax
c000fa14:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fa1c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa21:	85 c0                	test   eax,eax
c000fa23:	75 03                	jne    c000fa28 <Semaphore::tryAcquire()+0xcc>
c000fa25:	fb                   	sti    
c000fa26:	66 90                	xchg   ax,ax
c000fa28:	b0 00                	mov    al,0x0
c000fa2a:	66 90                	xchg   ax,ax
c000fa2c:	83 c4 0c             	add    esp,0xc
c000fa2f:	c3                   	ret    

c000fa30 <Semaphore::assertLocked(char const*)>:
c000fa30:	83 ec 0c             	sub    esp,0xc
c000fa33:	fa                   	cli    
c000fa34:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa39:	83 c0 01             	add    eax,0x1
c000fa3c:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fa41:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa46:	83 c0 01             	add    eax,0x1
c000fa49:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa52:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa59:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa5b:	39 c2                	cmp    edx,eax
c000fa5d:	7d 11                	jge    c000fa70 <Semaphore::assertLocked(char const*)+0x40>
c000fa5f:	83 ec 0c             	sub    esp,0xc
c000fa62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa66:	e8 7b f2 ff ff       	call   c000ece6 <KePanic(char const*)>
c000fa6b:	83 c4 10             	add    esp,0x10
c000fa6e:	66 90                	xchg   ax,ax
c000fa70:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa75:	83 e8 01             	sub    eax,0x1
c000fa78:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa7d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa82:	85 c0                	test   eax,eax
c000fa84:	75 1a                	jne    c000faa0 <Semaphore::assertLocked(char const*)+0x70>
c000fa86:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fa8b:	85 c0                	test   eax,eax
c000fa8d:	74 11                	je     c000faa0 <Semaphore::assertLocked(char const*)+0x70>
c000fa8f:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fa99:	e8 92 5c 00 00       	call   c0015730 <schedule()>
c000fa9e:	66 90                	xchg   ax,ax
c000faa0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000faa8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000faad:	85 c0                	test   eax,eax
c000faaf:	75 03                	jne    c000fab4 <Semaphore::assertLocked(char const*)+0x84>
c000fab1:	fb                   	sti    
c000fab2:	66 90                	xchg   ax,ax
c000fab4:	90                   	nop
c000fab5:	83 c4 0c             	add    esp,0xc
c000fab8:	c3                   	ret    
c000fab9:	90                   	nop
c000faba:	66 90                	xchg   ax,ax

c000fabc <Semaphore::acquire(int)>:
c000fabc:	83 ec 1c             	sub    esp,0x1c
c000fabf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fac4:	0f 84 9a 00 00 00    	je     c000fb64 <Semaphore::acquire(int)+0xa8>
c000faca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fad2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fad7:	90                   	nop
c000fad8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fadd:	85 c0                	test   eax,eax
c000fadf:	74 77                	je     c000fb58 <Semaphore::acquire(int)+0x9c>
c000fae1:	83 ec 0c             	sub    esp,0xc
c000fae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fae8:	e8 6f fe ff ff       	call   c000f95c <Semaphore::tryAcquire()>
c000faed:	83 c4 10             	add    esp,0x10
c000faf0:	83 f0 01             	xor    eax,0x1
c000faf3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000faf7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fafb:	83 f0 01             	xor    eax,0x1
c000fafe:	0f b6 c0             	movzx  eax,al
c000fb01:	85 c0                	test   eax,eax
c000fb03:	75 4f                	jne    c000fb54 <Semaphore::acquire(int)+0x98>
c000fb05:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fb0a:	7f 2c                	jg     c000fb38 <Semaphore::acquire(int)+0x7c>
c000fb0c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb10:	89 d0                	mov    eax,edx
c000fb12:	c1 e0 02             	shl    eax,0x2
c000fb15:	01 d0                	add    eax,edx
c000fb17:	d1 e0                	shl    eax,1
c000fb19:	83 ec 0c             	sub    esp,0xc
c000fb1c:	50                   	push   eax
c000fb1d:	e8 06 5e 00 00       	call   c0015928 <milliTenthSleep(unsigned int)>
c000fb22:	83 c4 10             	add    esp,0x10
c000fb25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb29:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fb2d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fb35:	eb a1                	jmp    c000fad8 <Semaphore::acquire(int)+0x1c>
c000fb37:	90                   	nop
c000fb38:	83 ec 0c             	sub    esp,0xc
c000fb3b:	68 90 01 00 00       	push   0x190
c000fb40:	e8 e3 5d 00 00       	call   c0015928 <milliTenthSleep(unsigned int)>
c000fb45:	83 c4 10             	add    esp,0x10
c000fb48:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fb4d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fb52:	eb 84                	jmp    c000fad8 <Semaphore::acquire(int)+0x1c>
c000fb54:	90                   	nop
c000fb55:	8d 76 00             	lea    esi,[esi+0x0]
c000fb58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb5c:	e9 fb 00 00 00       	jmp    c000fc5c <Semaphore::acquire(int)+0x1a0>
c000fb61:	8d 76 00             	lea    esi,[esi+0x0]
c000fb64:	fa                   	cli    
c000fb65:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb6a:	83 c0 01             	add    eax,0x1
c000fb6d:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fb72:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb77:	83 c0 01             	add    eax,0x1
c000fb7a:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb83:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8c:	39 c2                	cmp    edx,eax
c000fb8e:	7d 14                	jge    c000fba4 <Semaphore::acquire(int)+0xe8>
c000fb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb97:	8d 50 01             	lea    edx,[eax+0x1]
c000fb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb9e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fba1:	eb 6d                	jmp    c000fc10 <Semaphore::acquire(int)+0x154>
c000fba3:	90                   	nop
c000fba4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbab:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbb9:	85 c0                	test   eax,eax
c000fbbb:	75 13                	jne    c000fbd0 <Semaphore::acquire(int)+0x114>
c000fbbd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbc2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbcb:	eb 17                	jmp    c000fbe4 <Semaphore::acquire(int)+0x128>
c000fbcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fbd0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fbd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbdc:	8b 12                	mov    edx,DWORD PTR [edx]
c000fbde:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fbe1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbe4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbe9:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fbf2:	83 ec 0c             	sub    esp,0xc
c000fbf5:	68 00 2a 02 c0       	push   0xc0022a00
c000fbfa:	e8 4f 73 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fbff:	83 c4 10             	add    esp,0x10
c000fc02:	83 ec 0c             	sub    esp,0xc
c000fc05:	6a 05                	push   0x5
c000fc07:	e8 e4 5b 00 00       	call   c00157f0 <blockTask(TaskState)>
c000fc0c:	83 c4 10             	add    esp,0x10
c000fc0f:	90                   	nop
c000fc10:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc15:	83 e8 01             	sub    eax,0x1
c000fc18:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fc1d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc22:	85 c0                	test   eax,eax
c000fc24:	75 1a                	jne    c000fc40 <Semaphore::acquire(int)+0x184>
c000fc26:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fc2b:	85 c0                	test   eax,eax
c000fc2d:	74 11                	je     c000fc40 <Semaphore::acquire(int)+0x184>
c000fc2f:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fc39:	e8 f2 5a 00 00       	call   c0015730 <schedule()>
c000fc3e:	66 90                	xchg   ax,ax
c000fc40:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fc48:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc4d:	85 c0                	test   eax,eax
c000fc4f:	75 03                	jne    c000fc54 <Semaphore::acquire(int)+0x198>
c000fc51:	fb                   	sti    
c000fc52:	66 90                	xchg   ax,ax
c000fc54:	b8 00 00 00 00       	mov    eax,0x0
c000fc59:	8d 76 00             	lea    esi,[esi+0x0]
c000fc5c:	83 c4 1c             	add    esp,0x1c
c000fc5f:	c3                   	ret    

c000fc60 <Semaphore::acquire()>:
c000fc60:	83 ec 0c             	sub    esp,0xc
c000fc63:	83 ec 08             	sub    esp,0x8
c000fc66:	6a 00                	push   0x0
c000fc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc6c:	e8 4b fe ff ff       	call   c000fabc <Semaphore::acquire(int)>
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	90                   	nop
c000fc75:	83 c4 0c             	add    esp,0xc
c000fc78:	c3                   	ret    
c000fc79:	90                   	nop
c000fc7a:	66 90                	xchg   ax,ax

c000fc7c <Semaphore::release()>:
c000fc7c:	83 ec 1c             	sub    esp,0x1c
c000fc7f:	fa                   	cli    
c000fc80:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc85:	83 c0 01             	add    eax,0x1
c000fc88:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fc8d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc92:	83 c0 01             	add    eax,0x1
c000fc95:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fc9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fca1:	85 c0                	test   eax,eax
c000fca3:	74 2b                	je     c000fcd0 <Semaphore::release()+0x54>
c000fca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcb4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fcb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcbb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fcbe:	83 ec 0c             	sub    esp,0xc
c000fcc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcc5:	e8 76 5d 00 00       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c000fcca:	83 c4 10             	add    esp,0x10
c000fccd:	eb 15                	jmp    c000fce4 <Semaphore::release()+0x68>
c000fccf:	90                   	nop
c000fcd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcd7:	8d 50 ff             	lea    edx,[eax-0x1]
c000fcda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcde:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fce1:	8d 76 00             	lea    esi,[esi+0x0]
c000fce4:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fce9:	83 e8 01             	sub    eax,0x1
c000fcec:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fcf1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fcf6:	85 c0                	test   eax,eax
c000fcf8:	75 1a                	jne    c000fd14 <Semaphore::release()+0x98>
c000fcfa:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fcff:	85 c0                	test   eax,eax
c000fd01:	74 11                	je     c000fd14 <Semaphore::release()+0x98>
c000fd03:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fd0d:	e8 1e 5a 00 00       	call   c0015730 <schedule()>
c000fd12:	66 90                	xchg   ax,ax
c000fd14:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fd1c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fd21:	85 c0                	test   eax,eax
c000fd23:	75 03                	jne    c000fd28 <Semaphore::release()+0xac>
c000fd25:	fb                   	sti    
c000fd26:	66 90                	xchg   ax,ax
c000fd28:	90                   	nop
c000fd29:	83 c4 1c             	add    esp,0x1c
c000fd2c:	c3                   	ret    

c000fd2d <KiSigKill(int)>:
c000fd2d:	83 ec 0c             	sub    esp,0xc
c000fd30:	6a 00                	push   0x0
c000fd32:	6a 00                	push   0x0
c000fd34:	6a ff                	push   0xffffffff
c000fd36:	6a 01                	push   0x1
c000fd38:	e8 15 63 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd3d:	83 c4 1c             	add    esp,0x1c
c000fd40:	c3                   	ret    

c000fd41 <KiDefaultSignalHandlerIgnore(int)>:
c000fd41:	c3                   	ret    

c000fd42 <KiDefaultSignalHandlerPause(int)>:
c000fd42:	57                   	push   edi
c000fd43:	b9 07 00 00 00       	mov    ecx,0x7
c000fd48:	56                   	push   esi
c000fd49:	be 5b 2a 02 c0       	mov    esi,0xc0022a5b
c000fd4e:	83 ec 24             	sub    esp,0x24
c000fd51:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fd55:	fc                   	cld    
c000fd56:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd58:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fd5c:	50                   	push   eax
c000fd5d:	6a 00                	push   0x0
c000fd5f:	6a 00                	push   0x0
c000fd61:	6a 27                	push   0x27
c000fd63:	e8 ea 62 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd68:	83 c4 34             	add    esp,0x34
c000fd6b:	5e                   	pop    esi
c000fd6c:	5f                   	pop    edi
c000fd6d:	c3                   	ret    

c000fd6e <KiDefaultSignalHandlerResume(int)>:
c000fd6e:	57                   	push   edi
c000fd6f:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fd74:	56                   	push   esi
c000fd75:	be 77 2a 02 c0       	mov    esi,0xc0022a77
c000fd7a:	83 ec 24             	sub    esp,0x24
c000fd7d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fd81:	fc                   	cld    
c000fd82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd84:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fd88:	50                   	push   eax
c000fd89:	6a 00                	push   0x0
c000fd8b:	6a 00                	push   0x0
c000fd8d:	6a 27                	push   0x27
c000fd8f:	e8 be 62 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd94:	83 c4 34             	add    esp,0x34
c000fd97:	5e                   	pop    esi
c000fd98:	5f                   	pop    edi
c000fd99:	c3                   	ret    

c000fd9a <KeDeinitSignals(SigHandlerBlock*)>:
c000fd9a:	e9 11 ec ff ff       	jmp    c000e9b0 <free>

c000fd9f <KeInitSignals()>:
c000fd9f:	53                   	push   ebx
c000fda0:	83 ec 14             	sub    esp,0x14
c000fda3:	68 c8 00 00 00       	push   0xc8
c000fda8:	e8 f3 eb ff ff       	call   c000e9a0 <malloc>
c000fdad:	83 c4 0c             	add    esp,0xc
c000fdb0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fdba:	89 c3                	mov    ebx,eax
c000fdbc:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fdc6:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fdcc:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000fdd0:	6a 20                	push   0x20
c000fdd2:	6a 00                	push   0x0
c000fdd4:	50                   	push   eax
c000fdd5:	e8 16 07 ff ff       	call   c00004f0 <memset>
c000fdda:	83 c4 0c             	add    esp,0xc
c000fddd:	6a 44                	push   0x44
c000fddf:	6a 00                	push   0x0
c000fde1:	53                   	push   ebx
c000fde2:	e8 09 07 ff ff       	call   c00004f0 <memset>
c000fde7:	83 c4 18             	add    esp,0x18
c000fdea:	89 d8                	mov    eax,ebx
c000fdec:	5b                   	pop    ebx
c000fded:	c3                   	ret    

c000fdee <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fdee:	53                   	push   ebx
c000fdef:	b8 01 00 00 00       	mov    eax,0x1
c000fdf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdfc:	83 f9 10             	cmp    ecx,0x10
c000fdff:	7f 21                	jg     c000fe22 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fe01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe05:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fe08:	89 03                	mov    DWORD PTR [ebx],eax
c000fe0a:	b8 01 00 00 00       	mov    eax,0x1
c000fe0f:	d3 e0                	shl    eax,cl
c000fe11:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fe15:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fe18:	31 c0                	xor    eax,eax
c000fe1a:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fe22:	5b                   	pop    ebx
c000fe23:	c3                   	ret    

c000fe24 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fe24:	55                   	push   ebp
c000fe25:	57                   	push   edi
c000fe26:	bf 08 00 00 00       	mov    edi,0x8
c000fe2b:	56                   	push   esi
c000fe2c:	53                   	push   ebx
c000fe2d:	83 ec 18             	sub    esp,0x18
c000fe30:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fe34:	68 94 2a 02 c0       	push   0xc0022a94
c000fe39:	e8 10 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fe3e:	83 c4 10             	add    esp,0x10
c000fe41:	31 c9                	xor    ecx,ecx
c000fe43:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe4a:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fe50:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fe54:	99                   	cdq    
c000fe55:	f7 ff                	idiv   edi
c000fe57:	8d 42 24             	lea    eax,[edx+0x24]
c000fe5a:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fe5e:	85 f6                	test   esi,esi
c000fe60:	75 1a                	jne    c000fe7c <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fe62:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fe66:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fe6a:	50                   	push   eax
c000fe6b:	50                   	push   eax
c000fe6c:	52                   	push   edx
c000fe6d:	68 a5 2a 02 c0       	push   0xc0022aa5
c000fe72:	e8 d7 70 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	eb 1b                	jmp    c000fe97 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fe7c:	41                   	inc    ecx
c000fe7d:	83 f9 08             	cmp    ecx,0x8
c000fe80:	75 ce                	jne    c000fe50 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fe82:	83 ec 0c             	sub    esp,0xc
c000fe85:	be 01 00 00 00       	mov    esi,0x1
c000fe8a:	68 c6 2a 02 c0       	push   0xc0022ac6
c000fe8f:	e8 ba 70 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fe94:	83 c4 10             	add    esp,0x10
c000fe97:	83 c4 0c             	add    esp,0xc
c000fe9a:	89 f0                	mov    eax,esi
c000fe9c:	5b                   	pop    ebx
c000fe9d:	5e                   	pop    esi
c000fe9e:	5f                   	pop    edi
c000fe9f:	5d                   	pop    ebp
c000fea0:	c3                   	ret    

c000fea1 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fea1:	55                   	push   ebp
c000fea2:	57                   	push   edi
c000fea3:	56                   	push   esi
c000fea4:	53                   	push   ebx
c000fea5:	51                   	push   ecx
c000fea6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000feaa:	85 db                	test   ebx,ebx
c000feac:	0f 84 bc 00 00 00    	je     c000ff6e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000feb2:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000feb9:	0f 84 af 00 00 00    	je     c000ff6e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000febf:	31 c9                	xor    ecx,ecx
c000fec1:	bf 08 00 00 00       	mov    edi,0x8
c000fec6:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fecc:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fecf:	99                   	cdq    
c000fed0:	f7 ff                	idiv   edi
c000fed2:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fed9:	85 ed                	test   ebp,ebp
c000fedb:	0f 84 9e 00 00 00    	je     c000ff7f <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fee1:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fee7:	89 e9                	mov    ecx,ebp
c000fee9:	bf 01 00 00 00       	mov    edi,0x1
c000feee:	d3 e7                	shl    edi,cl
c000fef0:	31 c9                	xor    ecx,ecx
c000fef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fef5:	b8 01 00 00 00       	mov    eax,0x1
c000fefa:	d3 e0                	shl    eax,cl
c000fefc:	85 04 24             	test   DWORD PTR [esp],eax
c000feff:	74 06                	je     c000ff07 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000ff01:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000ff05:	75 67                	jne    c000ff6e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff07:	41                   	inc    ecx
c000ff08:	83 f9 11             	cmp    ecx,0x11
c000ff0b:	75 e8                	jne    c000fef5 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000ff0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ff10:	46                   	inc    esi
c000ff11:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff17:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000ff22:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000ff29:	09 f8                	or     eax,edi
c000ff2b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000ff31:	31 c0                	xor    eax,eax
c000ff33:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000ff3b:	74 09                	je     c000ff46 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000ff3d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff44:	eb 06                	jmp    c000ff4c <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000ff46:	40                   	inc    eax
c000ff47:	83 f8 08             	cmp    eax,0x8
c000ff4a:	75 e7                	jne    c000ff33 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000ff4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ff50:	83 fd 09             	cmp    ebp,0x9
c000ff53:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000ff56:	89 2a                	mov    DWORD PTR [edx],ebp
c000ff58:	75 07                	jne    c000ff61 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000ff5a:	b8 2d fd 00 c0       	mov    eax,0xc000fd2d
c000ff5f:	eb 31                	jmp    c000ff92 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff61:	83 f8 01             	cmp    eax,0x1
c000ff64:	75 0c                	jne    c000ff72 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000ff66:	f7 d7                	not    edi
c000ff68:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000ff6e:	31 c0                	xor    eax,eax
c000ff70:	eb 20                	jmp    c000ff92 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff72:	85 c0                	test   eax,eax
c000ff74:	75 1c                	jne    c000ff92 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff76:	8b 04 ad 60 4d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdb2a0]
c000ff7d:	eb 13                	jmp    c000ff92 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff7f:	41                   	inc    ecx
c000ff80:	46                   	inc    esi
c000ff81:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff87:	83 f9 08             	cmp    ecx,0x8
c000ff8a:	0f 85 36 ff ff ff    	jne    c000fec6 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000ff90:	eb dc                	jmp    c000ff6e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff92:	5a                   	pop    edx
c000ff93:	5b                   	pop    ebx
c000ff94:	5e                   	pop    esi
c000ff95:	5f                   	pop    edi
c000ff96:	5d                   	pop    ebp
c000ff97:	c3                   	ret    

c000ff98 <KiCheckSignalZ>:
c000ff98:	83 ec 10             	sub    esp,0x10
c000ff9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff9f:	50                   	push   eax
c000ffa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffa8:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ffae:	e8 ee fe ff ff       	call   c000fea1 <KeCheckSignal(SigHandlerBlock*, int*)>
c000ffb3:	5a                   	pop    edx
c000ffb4:	31 d2                	xor    edx,edx
c000ffb6:	59                   	pop    ecx
c000ffb7:	85 c0                	test   eax,eax
c000ffb9:	74 19                	je     c000ffd4 <KiCheckSignalZ+0x3c>
c000ffbb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ffc1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ffc4:	89 02                	mov    DWORD PTR [edx],eax
c000ffc6:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000ffcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffd1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ffd4:	89 d0                	mov    eax,edx
c000ffd6:	83 c4 10             	add    esp,0x10
c000ffd9:	c3                   	ret    

c000ffda <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ffda:	56                   	push   esi
c000ffdb:	53                   	push   ebx
c000ffdc:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe1:	52                   	push   edx
c000ffe2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ffe6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffea:	d3 e3                	shl    ebx,cl
c000ffec:	83 f9 10             	cmp    ecx,0x10
c000ffef:	7f 08                	jg     c000fff9 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000fff1:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000fff7:	75 10                	jne    c0010009 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000fff9:	83 ec 0c             	sub    esp,0xc
c000fffc:	68 d7 2a 02 c0       	push   0xc0022ad7
c0010001:	e8 e0 ec ff ff       	call   c000ece6 <KePanic(char const*)>
c0010006:	83 c4 10             	add    esp,0x10
c0010009:	f7 d3                	not    ebx
c001000b:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010011:	58                   	pop    eax
c0010012:	5b                   	pop    ebx
c0010013:	5e                   	pop    esi
c0010014:	c3                   	ret    

c0010015 <KiFinishSignalZ>:
c0010015:	53                   	push   ebx
c0010016:	83 ec 10             	sub    esp,0x10
c0010019:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001001d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010020:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010025:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010028:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001002e:	e8 a7 ff ff ff       	call   c000ffda <KeCompleteSignal(SigHandlerBlock*, int)>
c0010033:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010039:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010040:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010047:	83 c4 18             	add    esp,0x18
c001004a:	5b                   	pop    ebx
c001004b:	c3                   	ret    

c001004c <SysSeekDir(regs*)>:
c001004c:	31 c0                	xor    eax,eax
c001004e:	31 d2                	xor    edx,edx
c0010050:	c3                   	ret    

c0010051 <SysTellDir(regs*)>:
c0010051:	31 c0                	xor    eax,eax
c0010053:	31 d2                	xor    edx,edx
c0010055:	c3                   	ret    

c0010056 <SysVerify(regs*)>:
c0010056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001005a:	31 d2                	xor    edx,edx
c001005c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001005f:	c3                   	ret    

c0010060 <SysGetArgc(regs*)>:
c0010060:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010065:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010068:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001006e:	89 c2                	mov    edx,eax
c0010070:	c1 fa 1f             	sar    edx,0x1f
c0010073:	c3                   	ret    

c0010074 <SysTTYName(regs*)>:
c0010074:	b8 01 00 00 00       	mov    eax,0x1
c0010079:	31 d2                	xor    edx,edx
c001007b:	c3                   	ret    

c001007c <SysFormatDisk(regs*)>:
c001007c:	56                   	push   esi
c001007d:	53                   	push   ebx
c001007e:	83 ec 04             	sub    esp,0x4
c0010081:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010085:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c001008b:	eb 2a                	jmp    c00100b7 <SysFormatDisk(regs*)+0x3b>
c001008d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010090:	83 ec 0c             	sub    esp,0xc
c0010093:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010096:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010098:	51                   	push   ecx
c0010099:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001009c:	51                   	push   ecx
c001009d:	50                   	push   eax
c001009e:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00100a5:	50                   	push   eax
c00100a6:	53                   	push   ebx
c00100a7:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00100aa:	83 c4 20             	add    esp,0x20
c00100ad:	83 f8 08             	cmp    eax,0x8
c00100b0:	89 c1                	mov    ecx,eax
c00100b2:	75 14                	jne    c00100c8 <SysFormatDisk(regs*)+0x4c>
c00100b4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00100b7:	85 db                	test   ebx,ebx
c00100b9:	75 d2                	jne    c001008d <SysFormatDisk(regs*)+0x11>
c00100bb:	b8 03 00 00 00       	mov    eax,0x3
c00100c0:	31 d2                	xor    edx,edx
c00100c2:	83 c4 04             	add    esp,0x4
c00100c5:	5b                   	pop    ebx
c00100c6:	5e                   	pop    esi
c00100c7:	c3                   	ret    
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 13                	je     c00100df <SysFormatDisk(regs*)+0x63>
c00100cc:	31 d2                	xor    edx,edx
c00100ce:	83 f9 09             	cmp    ecx,0x9
c00100d1:	b8 01 00 00 00       	mov    eax,0x1
c00100d6:	74 ea                	je     c00100c2 <SysFormatDisk(regs*)+0x46>
c00100d8:	b8 02 00 00 00       	mov    eax,0x2
c00100dd:	eb e1                	jmp    c00100c0 <SysFormatDisk(regs*)+0x44>
c00100df:	31 c0                	xor    eax,eax
c00100e1:	eb dd                	jmp    c00100c0 <SysFormatDisk(regs*)+0x44>

c00100e3 <SysSetDiskVolumeLabel(regs*)>:
c00100e3:	56                   	push   esi
c00100e4:	53                   	push   ebx
c00100e5:	83 ec 04             	sub    esp,0x4
c00100e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100ec:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00100ef:	83 f8 19             	cmp    eax,0x19
c00100f2:	77 33                	ja     c0010127 <SysSetDiskVolumeLabel(regs*)+0x44>
c00100f4:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c00100fb:	85 c9                	test   ecx,ecx
c00100fd:	74 28                	je     c0010127 <SysSetDiskVolumeLabel(regs*)+0x44>
c00100ff:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010102:	85 db                	test   ebx,ebx
c0010104:	74 21                	je     c0010127 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010106:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001010c:	85 d2                	test   edx,edx
c001010e:	74 17                	je     c0010127 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010110:	8b 32                	mov    esi,DWORD PTR [edx]
c0010112:	53                   	push   ebx
c0010113:	50                   	push   eax
c0010114:	51                   	push   ecx
c0010115:	52                   	push   edx
c0010116:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010119:	83 c4 10             	add    esp,0x10
c001011c:	83 c4 04             	add    esp,0x4
c001011f:	5b                   	pop    ebx
c0010120:	5e                   	pop    esi
c0010121:	89 c2                	mov    edx,eax
c0010123:	c1 fa 1f             	sar    edx,0x1f
c0010126:	c3                   	ret    
c0010127:	83 c4 04             	add    esp,0x4
c001012a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001012f:	5b                   	pop    ebx
c0010130:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010135:	5e                   	pop    esi
c0010136:	c3                   	ret    

c0010137 <SysGetDiskVolumeLabel(regs*)>:
c0010137:	57                   	push   edi
c0010138:	56                   	push   esi
c0010139:	53                   	push   ebx
c001013a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010141:	83 fa 19             	cmp    edx,0x19
c0010144:	77 3c                	ja     c0010182 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010146:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c001014d:	85 c9                	test   ecx,ecx
c001014f:	74 31                	je     c0010182 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010151:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010154:	85 db                	test   ebx,ebx
c0010156:	74 2a                	je     c0010182 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010158:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001015b:	85 f6                	test   esi,esi
c001015d:	74 23                	je     c0010182 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001015f:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010165:	85 c0                	test   eax,eax
c0010167:	74 19                	je     c0010182 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010169:	83 ec 0c             	sub    esp,0xc
c001016c:	8b 38                	mov    edi,DWORD PTR [eax]
c001016e:	56                   	push   esi
c001016f:	53                   	push   ebx
c0010170:	52                   	push   edx
c0010171:	51                   	push   ecx
c0010172:	50                   	push   eax
c0010173:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010176:	83 c4 20             	add    esp,0x20
c0010179:	5b                   	pop    ebx
c001017a:	5e                   	pop    esi
c001017b:	89 c2                	mov    edx,eax
c001017d:	c1 fa 1f             	sar    edx,0x1f
c0010180:	5f                   	pop    edi
c0010181:	c3                   	ret    
c0010182:	5b                   	pop    ebx
c0010183:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010188:	ba ff ff ff ff       	mov    edx,0xffffffff
c001018d:	5e                   	pop    esi
c001018e:	5f                   	pop    edi
c001018f:	c3                   	ret    

c0010190 <SysRealpath(regs*)>:
c0010190:	53                   	push   ebx
c0010191:	83 ec 08             	sub    esp,0x8
c0010194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010198:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001019b:	85 c9                	test   ecx,ecx
c001019d:	74 36                	je     c00101d5 <SysRealpath(regs*)+0x45>
c001019f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00101a2:	31 d2                	xor    edx,edx
c00101a4:	b8 01 00 00 00       	mov    eax,0x1
c00101a9:	85 db                	test   ebx,ebx
c00101ab:	75 05                	jne    c00101b2 <SysRealpath(regs*)+0x22>
c00101ad:	83 c4 08             	add    esp,0x8
c00101b0:	5b                   	pop    ebx
c00101b1:	c3                   	ret    
c00101b2:	6a 00                	push   0x0
c00101b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00101b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00101bc:	05 0c 01 00 00       	add    eax,0x10c
c00101c1:	50                   	push   eax
c00101c2:	51                   	push   ecx
c00101c3:	53                   	push   ebx
c00101c4:	e8 37 7c ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00101c9:	83 c4 10             	add    esp,0x10
c00101cc:	31 c0                	xor    eax,eax
c00101ce:	31 d2                	xor    edx,edx
c00101d0:	83 c4 08             	add    esp,0x8
c00101d3:	5b                   	pop    ebx
c00101d4:	c3                   	ret    
c00101d5:	b8 01 00 00 00       	mov    eax,0x1
c00101da:	31 d2                	xor    edx,edx
c00101dc:	eb f2                	jmp    c00101d0 <SysRealpath(regs*)+0x40>

c00101de <SysReadDir(regs*)>:
c00101de:	53                   	push   ebx
c00101df:	83 ec 18             	sub    esp,0x18
c00101e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00101e9:	83 f8 02             	cmp    eax,0x2
c00101ec:	76 4f                	jbe    c001023d <SysReadDir(regs*)+0x5f>
c00101ee:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101f5:	77 52                	ja     c0010249 <SysReadDir(regs*)+0x6b>
c00101f7:	83 ec 0c             	sub    esp,0xc
c00101fa:	50                   	push   eax
c00101fb:	e8 41 1d 00 00       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c0010200:	83 c4 10             	add    esp,0x10
c0010203:	85 c0                	test   eax,eax
c0010205:	74 42                	je     c0010249 <SysReadDir(regs*)+0x6b>
c0010207:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010216:	8b 10                	mov    edx,DWORD PTR [eax]
c0010218:	51                   	push   ecx
c0010219:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001021c:	51                   	push   ecx
c001021d:	6a 00                	push   0x0
c001021f:	68 10 01 00 00       	push   0x110
c0010224:	50                   	push   eax
c0010225:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010228:	83 c4 20             	add    esp,0x20
c001022b:	85 c0                	test   eax,eax
c001022d:	89 c1                	mov    ecx,eax
c001022f:	74 27                	je     c0010258 <SysReadDir(regs*)+0x7a>
c0010231:	31 d2                	xor    edx,edx
c0010233:	83 f9 07             	cmp    ecx,0x7
c0010236:	b8 02 00 00 00       	mov    eax,0x2
c001023b:	75 16                	jne    c0010253 <SysReadDir(regs*)+0x75>
c001023d:	b8 01 00 00 00       	mov    eax,0x1
c0010242:	31 d2                	xor    edx,edx
c0010244:	83 c4 18             	add    esp,0x18
c0010247:	5b                   	pop    ebx
c0010248:	c3                   	ret    
c0010249:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001024e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010253:	83 c4 18             	add    esp,0x18
c0010256:	5b                   	pop    ebx
c0010257:	c3                   	ret    
c0010258:	31 c0                	xor    eax,eax
c001025a:	31 d2                	xor    edx,edx
c001025c:	eb e6                	jmp    c0010244 <SysReadDir(regs*)+0x66>

c001025e <SysIsATTY(regs*)>:
c001025e:	83 ec 0c             	sub    esp,0xc
c0010261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010265:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010268:	83 f8 02             	cmp    eax,0x2
c001026b:	76 07                	jbe    c0010274 <SysIsATTY(regs*)+0x16>
c001026d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010272:	75 26                	jne    c001029a <SysIsATTY(regs*)+0x3c>
c0010274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010279:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001027c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010282:	85 c0                	test   eax,eax
c0010284:	74 24                	je     c00102aa <SysIsATTY(regs*)+0x4c>
c0010286:	8b 10                	mov    edx,DWORD PTR [eax]
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	50                   	push   eax
c001028c:	ff 12                	call   DWORD PTR [edx]
c001028e:	83 c4 10             	add    esp,0x10
c0010291:	31 d2                	xor    edx,edx
c0010293:	83 c4 0c             	add    esp,0xc
c0010296:	0f b6 c0             	movzx  eax,al
c0010299:	c3                   	ret    
c001029a:	83 ec 0c             	sub    esp,0xc
c001029d:	50                   	push   eax
c001029e:	e8 9e 1c 00 00       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c00102a3:	83 c4 10             	add    esp,0x10
c00102a6:	85 c0                	test   eax,eax
c00102a8:	75 dc                	jne    c0010286 <SysIsATTY(regs*)+0x28>
c00102aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102b4:	83 c4 0c             	add    esp,0xc
c00102b7:	c3                   	ret    

c00102b8 <SysSeek(regs*)>:
c00102b8:	56                   	push   esi
c00102b9:	53                   	push   ebx
c00102ba:	83 ec 04             	sub    esp,0x4
c00102bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102c1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00102c4:	8d 71 fd             	lea    esi,[ecx-0x3]
c00102c7:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00102cd:	77 33                	ja     c0010302 <SysSeek(regs*)+0x4a>
c00102cf:	83 ec 0c             	sub    esp,0xc
c00102d2:	51                   	push   ecx
c00102d3:	e8 69 1c 00 00       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c00102d8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00102db:	83 c4 0c             	add    esp,0xc
c00102de:	31 db                	xor    ebx,ebx
c00102e0:	53                   	push   ebx
c00102e1:	51                   	push   ecx
c00102e2:	50                   	push   eax
c00102e3:	e8 20 7f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00102e8:	83 c4 10             	add    esp,0x10
c00102eb:	85 c0                	test   eax,eax
c00102ed:	0f 95 c0             	setne  al
c00102f0:	31 d2                	xor    edx,edx
c00102f2:	0f b6 c0             	movzx  eax,al
c00102f5:	f7 d8                	neg    eax
c00102f7:	83 d2 00             	adc    edx,0x0
c00102fa:	83 c4 04             	add    esp,0x4
c00102fd:	5b                   	pop    ebx
c00102fe:	f7 da                	neg    edx
c0010300:	5e                   	pop    esi
c0010301:	c3                   	ret    
c0010302:	83 c4 04             	add    esp,0x4
c0010305:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001030a:	5b                   	pop    ebx
c001030b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010310:	5e                   	pop    esi
c0010311:	c3                   	ret    

c0010312 <SysTell(regs*)>:
c0010312:	53                   	push   ebx
c0010313:	83 ec 08             	sub    esp,0x8
c0010316:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001031a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001031d:	83 f8 02             	cmp    eax,0x2
c0010320:	76 4e                	jbe    c0010370 <SysTell(regs*)+0x5e>
c0010322:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010327:	76 19                	jbe    c0010342 <SysTell(regs*)+0x30>
c0010329:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001032c:	31 d2                	xor    edx,edx
c001032e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010334:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001033b:	83 c4 08             	add    esp,0x8
c001033e:	31 c0                	xor    eax,eax
c0010340:	5b                   	pop    ebx
c0010341:	c3                   	ret    
c0010342:	83 ec 0c             	sub    esp,0xc
c0010345:	50                   	push   eax
c0010346:	e8 f6 1b 00 00       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c001034b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001034e:	5a                   	pop    edx
c001034f:	59                   	pop    ecx
c0010350:	53                   	push   ebx
c0010351:	50                   	push   eax
c0010352:	e8 5d 7f ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c0010357:	83 c4 10             	add    esp,0x10
c001035a:	85 c0                	test   eax,eax
c001035c:	0f 95 c0             	setne  al
c001035f:	31 d2                	xor    edx,edx
c0010361:	0f b6 c0             	movzx  eax,al
c0010364:	f7 d8                	neg    eax
c0010366:	83 d2 00             	adc    edx,0x0
c0010369:	83 c4 08             	add    esp,0x8
c001036c:	5b                   	pop    ebx
c001036d:	f7 da                	neg    edx
c001036f:	c3                   	ret    
c0010370:	83 c4 08             	add    esp,0x8
c0010373:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010378:	5b                   	pop    ebx
c0010379:	ba ff ff ff ff       	mov    edx,0xffffffff
c001037e:	c3                   	ret    

c001037f <SysSize(regs*)>:
c001037f:	53                   	push   ebx
c0010380:	83 ec 18             	sub    esp,0x18
c0010383:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010387:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001038a:	83 f8 02             	cmp    eax,0x2
c001038d:	76 54                	jbe    c00103e3 <SysSize(regs*)+0x64>
c001038f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010394:	76 19                	jbe    c00103af <SysSize(regs*)+0x30>
c0010396:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010399:	31 d2                	xor    edx,edx
c001039b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103a8:	83 c4 18             	add    esp,0x18
c00103ab:	31 c0                	xor    eax,eax
c00103ad:	5b                   	pop    ebx
c00103ae:	c3                   	ret    
c00103af:	83 ec 0c             	sub    esp,0xc
c00103b2:	50                   	push   eax
c00103b3:	e8 89 1b 00 00       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c00103b8:	83 c4 0c             	add    esp,0xc
c00103bb:	8d 54 24 13          	lea    edx,[esp+0x13]
c00103bf:	52                   	push   edx
c00103c0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00103c3:	52                   	push   edx
c00103c4:	50                   	push   eax
c00103c5:	e8 82 80 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00103ca:	83 c4 10             	add    esp,0x10
c00103cd:	85 c0                	test   eax,eax
c00103cf:	0f 95 c0             	setne  al
c00103d2:	31 d2                	xor    edx,edx
c00103d4:	0f b6 c0             	movzx  eax,al
c00103d7:	f7 d8                	neg    eax
c00103d9:	83 d2 00             	adc    edx,0x0
c00103dc:	83 c4 18             	add    esp,0x18
c00103df:	5b                   	pop    ebx
c00103e0:	f7 da                	neg    edx
c00103e2:	c3                   	ret    
c00103e3:	83 c4 18             	add    esp,0x18
c00103e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103eb:	5b                   	pop    ebx
c00103ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103f1:	c3                   	ret    

c00103f2 <SysSizeFromFilename(regs*)>:
c00103f2:	55                   	push   ebp
c00103f3:	57                   	push   edi
c00103f4:	56                   	push   esi
c00103f5:	53                   	push   ebx
c00103f6:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00103fc:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010403:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010406:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010409:	85 f6                	test   esi,esi
c001040b:	89 f8                	mov    eax,edi
c001040d:	74 09                	je     c0010418 <SysSizeFromFilename(regs*)+0x26>
c001040f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010415:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010418:	83 f8 02             	cmp    eax,0x2
c001041b:	0f 86 ca 00 00 00    	jbe    c00104eb <SysSizeFromFilename(regs*)+0xf9>
c0010421:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010426:	76 1f                	jbe    c0010447 <SysSizeFromFilename(regs*)+0x55>
c0010428:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001042b:	31 d2                	xor    edx,edx
c001042d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010433:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001043a:	31 c0                	xor    eax,eax
c001043c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010442:	5b                   	pop    ebx
c0010443:	5e                   	pop    esi
c0010444:	5f                   	pop    edi
c0010445:	5d                   	pop    ebp
c0010446:	c3                   	ret    
c0010447:	83 ec 0c             	sub    esp,0xc
c001044a:	68 14 01 00 00       	push   0x114
c001044f:	e8 4c e5 ff ff       	call   c000e9a0 <malloc>
c0010454:	6a 01                	push   0x1
c0010456:	89 c5                	mov    ebp,eax
c0010458:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001045d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010460:	51                   	push   ecx
c0010461:	57                   	push   edi
c0010462:	55                   	push   ebp
c0010463:	e8 c6 7b ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010468:	83 c4 1c             	add    esp,0x1c
c001046b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001046f:	50                   	push   eax
c0010470:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010473:	53                   	push   ebx
c0010474:	55                   	push   ebp
c0010475:	e8 d2 7f ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001047a:	83 c4 10             	add    esp,0x10
c001047d:	85 ed                	test   ebp,ebp
c001047f:	89 c3                	mov    ebx,eax
c0010481:	74 0d                	je     c0010490 <SysSizeFromFilename(regs*)+0x9e>
c0010483:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010486:	83 ec 0c             	sub    esp,0xc
c0010489:	55                   	push   ebp
c001048a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001048d:	83 c4 10             	add    esp,0x10
c0010490:	85 db                	test   ebx,ebx
c0010492:	75 57                	jne    c00104eb <SysSizeFromFilename(regs*)+0xf9>
c0010494:	6a 00                	push   0x0
c0010496:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001049b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001049e:	05 0c 01 00 00       	add    eax,0x10c
c00104a3:	50                   	push   eax
c00104a4:	57                   	push   edi
c00104a5:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00104ac:	53                   	push   ebx
c00104ad:	e8 4e 79 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00104b2:	58                   	pop    eax
c00104b3:	5a                   	pop    edx
c00104b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00104b8:	50                   	push   eax
c00104b9:	53                   	push   ebx
c00104ba:	e8 c8 73 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00104bf:	83 c4 10             	add    esp,0x10
c00104c2:	ba 00 00 00 00       	mov    edx,0x0
c00104c7:	83 f8 01             	cmp    eax,0x1
c00104ca:	b8 00 00 00 00       	mov    eax,0x0
c00104cf:	74 2f                	je     c0010500 <SysSizeFromFilename(regs*)+0x10e>
c00104d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00104d6:	74 3b                	je     c0010513 <SysSizeFromFilename(regs*)+0x121>
c00104d8:	85 f6                	test   esi,esi
c00104da:	0f 84 5c ff ff ff    	je     c001043c <SysSizeFromFilename(regs*)+0x4a>
c00104e0:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00104e6:	e9 51 ff ff ff       	jmp    c001043c <SysSizeFromFilename(regs*)+0x4a>
c00104eb:	81 c4 4c 02 00 00    	add    esp,0x24c
c00104f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104f6:	5b                   	pop    ebx
c00104f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104fc:	5e                   	pop    esi
c00104fd:	5f                   	pop    edi
c00104fe:	5d                   	pop    ebp
c00104ff:	c3                   	ret    
c0010500:	85 f6                	test   esi,esi
c0010502:	0f 84 34 ff ff ff    	je     c001043c <SysSizeFromFilename(regs*)+0x4a>
c0010508:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001050e:	e9 29 ff ff ff       	jmp    c001043c <SysSizeFromFilename(regs*)+0x4a>
c0010513:	85 f6                	test   esi,esi
c0010515:	0f 84 21 ff ff ff    	je     c001043c <SysSizeFromFilename(regs*)+0x4a>
c001051b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010521:	e9 16 ff ff ff       	jmp    c001043c <SysSizeFromFilename(regs*)+0x4a>

c0010526 <SysSizeFromFilenameNoSymlink(regs*)>:
c0010526:	55                   	push   ebp
c0010527:	57                   	push   edi
c0010528:	56                   	push   esi
c0010529:	53                   	push   ebx
c001052a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010530:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010537:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001053a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001053d:	85 f6                	test   esi,esi
c001053f:	89 f8                	mov    eax,edi
c0010541:	74 09                	je     c001054c <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010543:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010549:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001054c:	83 f8 02             	cmp    eax,0x2
c001054f:	0f 86 ca 00 00 00    	jbe    c001061f <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0010555:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001055a:	76 1f                	jbe    c001057b <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001055c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001055f:	31 d2                	xor    edx,edx
c0010561:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010567:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001056e:	31 c0                	xor    eax,eax
c0010570:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010576:	5b                   	pop    ebx
c0010577:	5e                   	pop    esi
c0010578:	5f                   	pop    edi
c0010579:	5d                   	pop    ebp
c001057a:	c3                   	ret    
c001057b:	83 ec 0c             	sub    esp,0xc
c001057e:	68 14 01 00 00       	push   0x114
c0010583:	e8 18 e4 ff ff       	call   c000e9a0 <malloc>
c0010588:	6a 00                	push   0x0
c001058a:	89 c5                	mov    ebp,eax
c001058c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010591:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010594:	51                   	push   ecx
c0010595:	57                   	push   edi
c0010596:	55                   	push   ebp
c0010597:	e8 92 7a ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001059c:	83 c4 1c             	add    esp,0x1c
c001059f:	8d 44 24 13          	lea    eax,[esp+0x13]
c00105a3:	50                   	push   eax
c00105a4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00105a7:	53                   	push   ebx
c00105a8:	55                   	push   ebp
c00105a9:	e8 9e 7e ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	85 ed                	test   ebp,ebp
c00105b3:	89 c3                	mov    ebx,eax
c00105b5:	74 0d                	je     c00105c4 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00105b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00105ba:	83 ec 0c             	sub    esp,0xc
c00105bd:	55                   	push   ebp
c00105be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105c1:	83 c4 10             	add    esp,0x10
c00105c4:	85 db                	test   ebx,ebx
c00105c6:	75 57                	jne    c001061f <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00105c8:	6a 00                	push   0x0
c00105ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105d2:	05 0c 01 00 00       	add    eax,0x10c
c00105d7:	50                   	push   eax
c00105d8:	57                   	push   edi
c00105d9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00105e0:	53                   	push   ebx
c00105e1:	e8 1a 78 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00105e6:	58                   	pop    eax
c00105e7:	5a                   	pop    edx
c00105e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00105ec:	50                   	push   eax
c00105ed:	53                   	push   ebx
c00105ee:	e8 94 72 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00105f3:	83 c4 10             	add    esp,0x10
c00105f6:	ba 00 00 00 00       	mov    edx,0x0
c00105fb:	83 f8 01             	cmp    eax,0x1
c00105fe:	b8 00 00 00 00       	mov    eax,0x0
c0010603:	74 2f                	je     c0010634 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0010605:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001060a:	74 3b                	je     c0010647 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c001060c:	85 f6                	test   esi,esi
c001060e:	0f 84 5c ff ff ff    	je     c0010570 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010614:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001061a:	e9 51 ff ff ff       	jmp    c0010570 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001061f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010625:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001062a:	5b                   	pop    ebx
c001062b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010630:	5e                   	pop    esi
c0010631:	5f                   	pop    edi
c0010632:	5d                   	pop    ebp
c0010633:	c3                   	ret    
c0010634:	85 f6                	test   esi,esi
c0010636:	0f 84 34 ff ff ff    	je     c0010570 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001063c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010642:	e9 29 ff ff ff       	jmp    c0010570 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010647:	85 f6                	test   esi,esi
c0010649:	0f 84 21 ff ff ff    	je     c0010570 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001064f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010655:	e9 16 ff ff ff       	jmp    c0010570 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001065a <SysClose(regs*)>:
c001065a:	55                   	push   ebp
c001065b:	57                   	push   edi
c001065c:	56                   	push   esi
c001065d:	53                   	push   ebx
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010665:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010668:	83 f8 02             	cmp    eax,0x2
c001066b:	76 6d                	jbe    c00106da <SysClose(regs*)+0x80>
c001066d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010673:	31 f6                	xor    esi,esi
c0010675:	31 ff                	xor    edi,edi
c0010677:	83 fa 01             	cmp    edx,0x1
c001067a:	76 3e                	jbe    c00106ba <SysClose(regs*)+0x60>
c001067c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010681:	77 57                	ja     c00106da <SysClose(regs*)+0x80>
c0010683:	83 ec 0c             	sub    esp,0xc
c0010686:	50                   	push   eax
c0010687:	e8 b5 18 00 00       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c001068c:	83 c4 10             	add    esp,0x10
c001068f:	85 c0                	test   eax,eax
c0010691:	89 c5                	mov    ebp,eax
c0010693:	74 31                	je     c00106c6 <SysClose(regs*)+0x6c>
c0010695:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010698:	83 ec 08             	sub    esp,0x8
c001069b:	50                   	push   eax
c001069c:	68 5a 2b 02 c0       	push   0xc0022b5a
c00106a1:	e8 a8 68 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00106a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00106a9:	e8 fa 7a ff ff       	call   c00081a8 <File::close()>
c00106ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00106b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00106b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106b7:	83 c4 10             	add    esp,0x10
c00106ba:	83 c4 0c             	add    esp,0xc
c00106bd:	89 f0                	mov    eax,esi
c00106bf:	5b                   	pop    ebx
c00106c0:	89 fa                	mov    edx,edi
c00106c2:	5e                   	pop    esi
c00106c3:	5f                   	pop    edi
c00106c4:	5d                   	pop    ebp
c00106c5:	c3                   	ret    
c00106c6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00106c9:	83 ec 08             	sub    esp,0x8
c00106cc:	52                   	push   edx
c00106cd:	68 e8 2a 02 c0       	push   0xc0022ae8
c00106d2:	e8 77 68 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	83 c4 0c             	add    esp,0xc
c00106dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00106e2:	5b                   	pop    ebx
c00106e3:	89 f0                	mov    eax,esi
c00106e5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00106ea:	89 fa                	mov    edx,edi
c00106ec:	5e                   	pop    esi
c00106ed:	5f                   	pop    edi
c00106ee:	5d                   	pop    ebp
c00106ef:	c3                   	ret    

c00106f0 <SysOpenDir(regs*)>:
c00106f0:	56                   	push   esi
c00106f1:	53                   	push   ebx
c00106f2:	83 ec 04             	sub    esp,0x4
c00106f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106f9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00106fc:	85 c9                	test   ecx,ecx
c00106fe:	74 5d                	je     c001075d <SysOpenDir(regs*)+0x6d>
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	68 14 01 00 00       	push   0x114
c0010708:	e8 93 e2 ff ff       	call   c000e9a0 <malloc>
c001070d:	83 c4 0c             	add    esp,0xc
c0010710:	89 c6                	mov    esi,eax
c0010712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010717:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001071a:	50                   	push   eax
c001071b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001071e:	52                   	push   edx
c001071f:	56                   	push   esi
c0010720:	e8 e7 7e ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0010725:	83 c4 10             	add    esp,0x10
c0010728:	85 f6                	test   esi,esi
c001072a:	74 31                	je     c001075d <SysOpenDir(regs*)+0x6d>
c001072c:	83 ec 0c             	sub    esp,0xc
c001072f:	56                   	push   esi
c0010730:	e8 9f 7f ff ff       	call   c00086d4 <Directory::open()>
c0010735:	83 c4 10             	add    esp,0x10
c0010738:	85 c0                	test   eax,eax
c001073a:	75 21                	jne    c001075d <SysOpenDir(regs*)+0x6d>
c001073c:	83 ec 0c             	sub    esp,0xc
c001073f:	56                   	push   esi
c0010740:	e8 ff 14 00 00       	call   c0011c44 <UnixFile::getFileDescriptor()>
c0010745:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	89 02                	mov    DWORD PTR [edx],eax
c001074d:	c1 f8 1f             	sar    eax,0x1f
c0010750:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010753:	83 c4 04             	add    esp,0x4
c0010756:	31 c0                	xor    eax,eax
c0010758:	5b                   	pop    ebx
c0010759:	31 d2                	xor    edx,edx
c001075b:	5e                   	pop    esi
c001075c:	c3                   	ret    
c001075d:	83 c4 04             	add    esp,0x4
c0010760:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010765:	5b                   	pop    ebx
c0010766:	ba ff ff ff ff       	mov    edx,0xffffffff
c001076b:	5e                   	pop    esi
c001076c:	c3                   	ret    

c001076d <SysMakeDir(regs*)>:
c001076d:	56                   	push   esi
c001076e:	53                   	push   ebx
c001076f:	83 ec 10             	sub    esp,0x10
c0010772:	68 14 01 00 00       	push   0x114
c0010777:	e8 24 e2 ff ff       	call   c000e9a0 <malloc>
c001077c:	83 c4 0c             	add    esp,0xc
c001077f:	89 c3                	mov    ebx,eax
c0010781:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010786:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010789:	50                   	push   eax
c001078a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001078e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0010791:	52                   	push   edx
c0010792:	53                   	push   ebx
c0010793:	e8 74 7e ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	85 db                	test   ebx,ebx
c001079d:	74 2c                	je     c00107cb <SysMakeDir(regs*)+0x5e>
c001079f:	83 ec 0c             	sub    esp,0xc
c00107a2:	53                   	push   ebx
c00107a3:	e8 0c 81 ff ff       	call   c00088b4 <Directory::create()>
c00107a8:	89 c6                	mov    esi,eax
c00107aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107b2:	83 c4 10             	add    esp,0x10
c00107b5:	31 c0                	xor    eax,eax
c00107b7:	85 f6                	test   esi,esi
c00107b9:	0f 95 c0             	setne  al
c00107bc:	31 d2                	xor    edx,edx
c00107be:	f7 d8                	neg    eax
c00107c0:	83 d2 00             	adc    edx,0x0
c00107c3:	83 c4 04             	add    esp,0x4
c00107c6:	5b                   	pop    ebx
c00107c7:	f7 da                	neg    edx
c00107c9:	5e                   	pop    esi
c00107ca:	c3                   	ret    
c00107cb:	83 c4 04             	add    esp,0x4
c00107ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107d3:	5b                   	pop    ebx
c00107d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107d9:	5e                   	pop    esi
c00107da:	c3                   	ret    

c00107db <SysCloseDir(regs*)>:
c00107db:	55                   	push   ebp
c00107dc:	57                   	push   edi
c00107dd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00107e2:	56                   	push   esi
c00107e3:	be ff ff ff ff       	mov    esi,0xffffffff
c00107e8:	53                   	push   ebx
c00107e9:	83 ec 0c             	sub    esp,0xc
c00107ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107f3:	8d 50 fd             	lea    edx,[eax-0x3]
c00107f6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00107fc:	77 3b                	ja     c0010839 <SysCloseDir(regs*)+0x5e>
c00107fe:	83 ec 0c             	sub    esp,0xc
c0010801:	50                   	push   eax
c0010802:	e8 3a 17 00 00       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c0010807:	83 c4 10             	add    esp,0x10
c001080a:	85 c0                	test   eax,eax
c001080c:	89 c5                	mov    ebp,eax
c001080e:	74 35                	je     c0010845 <SysCloseDir(regs*)+0x6a>
c0010810:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010813:	83 ec 08             	sub    esp,0x8
c0010816:	31 f6                	xor    esi,esi
c0010818:	31 ff                	xor    edi,edi
c001081a:	50                   	push   eax
c001081b:	68 65 2b 02 c0       	push   0xc0022b65
c0010820:	e8 29 67 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010825:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010828:	e8 03 7f ff ff       	call   c0008730 <Directory::close()>
c001082d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010830:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010833:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010836:	83 c4 10             	add    esp,0x10
c0010839:	83 c4 0c             	add    esp,0xc
c001083c:	89 f0                	mov    eax,esi
c001083e:	5b                   	pop    ebx
c001083f:	89 fa                	mov    edx,edi
c0010841:	5e                   	pop    esi
c0010842:	5f                   	pop    edi
c0010843:	5d                   	pop    ebp
c0010844:	c3                   	ret    
c0010845:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010848:	83 ec 08             	sub    esp,0x8
c001084b:	52                   	push   edx
c001084c:	68 20 2b 02 c0       	push   0xc0022b20
c0010851:	e8 f8 66 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010856:	83 c4 10             	add    esp,0x10
c0010859:	eb de                	jmp    c0010839 <SysCloseDir(regs*)+0x5e>

c001085b <SysWait(regs*)>:
c001085b:	83 ec 10             	sub    esp,0x10
c001085e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010862:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010865:	52                   	push   edx
c0010866:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010869:	51                   	push   ecx
c001086a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001086d:	50                   	push   eax
c001086e:	e8 c9 4f 00 00       	call   c001583c <waitTask(int, int*, int)>
c0010873:	83 c4 1c             	add    esp,0x1c
c0010876:	89 c2                	mov    edx,eax
c0010878:	c1 fa 1f             	sar    edx,0x1f
c001087b:	c3                   	ret    

c001087c <SysNotImpl(regs*)>:
c001087c:	83 ec 18             	sub    esp,0x18
c001087f:	68 73 2b 02 c0       	push   0xc0022b73
c0010884:	e8 5d e4 ff ff       	call   c000ece6 <KePanic(char const*)>
c0010889:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001088e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010893:	83 c4 1c             	add    esp,0x1c
c0010896:	c3                   	ret    

c0010897 <SysPanic(regs*)>:
c0010897:	83 ec 18             	sub    esp,0x18
c001089a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001089e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108a1:	50                   	push   eax
c00108a2:	e8 3f e4 ff ff       	call   c000ece6 <KePanic(char const*)>
c00108a7:	b8 01 00 00 00       	mov    eax,0x1
c00108ac:	31 d2                	xor    edx,edx
c00108ae:	83 c4 1c             	add    esp,0x1c
c00108b1:	c3                   	ret    

c00108b2 <SysRmdir(regs*)>:
c00108b2:	56                   	push   esi
c00108b3:	53                   	push   ebx
c00108b4:	83 ec 10             	sub    esp,0x10
c00108b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108bb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00108be:	68 14 01 00 00       	push   0x114
c00108c3:	e8 d8 e0 ff ff       	call   c000e9a0 <malloc>
c00108c8:	6a 00                	push   0x0
c00108ca:	89 c3                	mov    ebx,eax
c00108cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d4:	50                   	push   eax
c00108d5:	56                   	push   esi
c00108d6:	53                   	push   ebx
c00108d7:	e8 52 77 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00108dc:	83 c4 14             	add    esp,0x14
c00108df:	53                   	push   ebx
c00108e0:	e8 33 7a ff ff       	call   c0008318 <File::unlink()>
c00108e5:	83 c4 10             	add    esp,0x10
c00108e8:	85 db                	test   ebx,ebx
c00108ea:	89 c6                	mov    esi,eax
c00108ec:	74 0c                	je     c00108fa <SysRmdir(regs*)+0x48>
c00108ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	53                   	push   ebx
c00108f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	31 c0                	xor    eax,eax
c00108fc:	85 f6                	test   esi,esi
c00108fe:	0f 95 c0             	setne  al
c0010901:	31 d2                	xor    edx,edx
c0010903:	f7 d8                	neg    eax
c0010905:	83 d2 00             	adc    edx,0x0
c0010908:	83 c4 04             	add    esp,0x4
c001090b:	5b                   	pop    ebx
c001090c:	f7 da                	neg    edx
c001090e:	5e                   	pop    esi
c001090f:	c3                   	ret    

c0010910 <SysUnlink(regs*)>:
c0010910:	56                   	push   esi
c0010911:	53                   	push   ebx
c0010912:	83 ec 10             	sub    esp,0x10
c0010915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010919:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001091c:	68 14 01 00 00       	push   0x114
c0010921:	e8 7a e0 ff ff       	call   c000e9a0 <malloc>
c0010926:	6a 00                	push   0x0
c0010928:	89 c3                	mov    ebx,eax
c001092a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001092f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010932:	50                   	push   eax
c0010933:	56                   	push   esi
c0010934:	53                   	push   ebx
c0010935:	e8 f4 76 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001093a:	83 c4 14             	add    esp,0x14
c001093d:	53                   	push   ebx
c001093e:	e8 d5 79 ff ff       	call   c0008318 <File::unlink()>
c0010943:	83 c4 10             	add    esp,0x10
c0010946:	85 db                	test   ebx,ebx
c0010948:	89 c6                	mov    esi,eax
c001094a:	74 0c                	je     c0010958 <SysUnlink(regs*)+0x48>
c001094c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001094e:	83 ec 0c             	sub    esp,0xc
c0010951:	53                   	push   ebx
c0010952:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010955:	83 c4 10             	add    esp,0x10
c0010958:	31 c0                	xor    eax,eax
c001095a:	85 f6                	test   esi,esi
c001095c:	0f 95 c0             	setne  al
c001095f:	31 d2                	xor    edx,edx
c0010961:	f7 d8                	neg    eax
c0010963:	83 d2 00             	adc    edx,0x0
c0010966:	83 c4 04             	add    esp,0x4
c0010969:	5b                   	pop    ebx
c001096a:	f7 da                	neg    edx
c001096c:	5e                   	pop    esi
c001096d:	c3                   	ret    

c001096e <SysGetArgv(regs*)>:
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010975:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010978:	85 c0                	test   eax,eax
c001097a:	78 2c                	js     c00109a8 <SysGetArgv(regs*)+0x3a>
c001097c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010982:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010985:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001098b:	7d 1b                	jge    c00109a8 <SysGetArgv(regs*)+0x3a>
c001098d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010994:	85 c0                	test   eax,eax
c0010996:	74 18                	je     c00109b0 <SysGetArgv(regs*)+0x42>
c0010998:	83 ec 08             	sub    esp,0x8
c001099b:	50                   	push   eax
c001099c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001099f:	50                   	push   eax
c00109a0:	e8 ab fc fe ff       	call   c0000650 <strcpy>
c00109a5:	83 c4 10             	add    esp,0x10
c00109a8:	31 c0                	xor    eax,eax
c00109aa:	31 d2                	xor    edx,edx
c00109ac:	83 c4 0c             	add    esp,0xc
c00109af:	c3                   	ret    
c00109b0:	b8 01 00 00 00       	mov    eax,0x1
c00109b5:	31 d2                	xor    edx,edx
c00109b7:	83 c4 0c             	add    esp,0xc
c00109ba:	c3                   	ret    

c00109bb <SysUSleep(regs*)>:
c00109bb:	83 ec 1c             	sub    esp,0x1c
c00109be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00109c2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00109c5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00109c8:	6a 00                	push   0x0
c00109ca:	6a 64                	push   0x64
c00109cc:	52                   	push   edx
c00109cd:	50                   	push   eax
c00109ce:	e8 f1 f6 00 00       	call   c00200c4 <__udivdi3>
c00109d3:	83 c4 14             	add    esp,0x14
c00109d6:	50                   	push   eax
c00109d7:	e8 4c 4f 00 00       	call   c0015928 <milliTenthSleep(unsigned int)>
c00109dc:	31 c0                	xor    eax,eax
c00109de:	31 d2                	xor    edx,edx
c00109e0:	83 c4 1c             	add    esp,0x1c
c00109e3:	c3                   	ret    

c00109e4 <SysSpawn(regs*)>:
c00109e4:	56                   	push   esi
c00109e5:	53                   	push   ebx
c00109e6:	83 ec 04             	sub    esp,0x4
c00109e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109ed:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109f0:	85 f6                	test   esi,esi
c00109f2:	75 0a                	jne    c00109fe <SysSpawn(regs*)+0x1a>
c00109f4:	83 c4 04             	add    esp,0x4
c00109f7:	31 c0                	xor    eax,eax
c00109f9:	5b                   	pop    ebx
c00109fa:	31 d2                	xor    edx,edx
c00109fc:	5e                   	pop    esi
c00109fd:	c3                   	ret    
c00109fe:	83 ec 0c             	sub    esp,0xc
c0010a01:	68 24 07 00 00       	push   0x724
c0010a06:	e8 95 df ff ff       	call   c000e9a0 <malloc>
c0010a0b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010a0e:	83 c4 10             	add    esp,0x10
c0010a11:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a14:	89 c6                	mov    esi,eax
c0010a16:	31 c0                	xor    eax,eax
c0010a18:	85 c9                	test   ecx,ecx
c0010a1a:	75 08                	jne    c0010a24 <SysSpawn(regs*)+0x40>
c0010a1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a24:	52                   	push   edx
c0010a25:	50                   	push   eax
c0010a26:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a29:	50                   	push   eax
c0010a2a:	56                   	push   esi
c0010a2b:	e8 80 46 00 00       	call   c00150b0 <Process::Process(char const*, Process*, char**)>
c0010a30:	83 c4 10             	add    esp,0x10
c0010a33:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010a3a:	75 b8                	jne    c00109f4 <SysSpawn(regs*)+0x10>
c0010a3c:	83 ec 0c             	sub    esp,0xc
c0010a3f:	56                   	push   esi
c0010a40:	e8 a7 4b 00 00       	call   c00155ec <Process::createUserThread()>
c0010a45:	8b 06                	mov    eax,DWORD PTR [esi]
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	83 c4 04             	add    esp,0x4
c0010a4d:	5b                   	pop    ebx
c0010a4e:	89 c2                	mov    edx,eax
c0010a50:	c1 fa 1f             	sar    edx,0x1f
c0010a53:	5e                   	pop    esi
c0010a54:	c3                   	ret    

c0010a55 <SysGetEnv(regs*)>:
c0010a55:	57                   	push   edi
c0010a56:	56                   	push   esi
c0010a57:	53                   	push   ebx
c0010a58:	83 ec 1c             	sub    esp,0x1c
c0010a5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a64:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010a67:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010a6a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010a6d:	51                   	push   ecx
c0010a6e:	e8 f8 d1 ff ff       	call   c000dc6b <KeGetProcessTotalEnvCount(Process*)>
c0010a73:	83 c4 10             	add    esp,0x10
c0010a76:	39 c7                	cmp    edi,eax
c0010a78:	7c 12                	jl     c0010a8c <SysGetEnv(regs*)+0x37>
c0010a7a:	31 c0                	xor    eax,eax
c0010a7c:	31 d2                	xor    edx,edx
c0010a7e:	85 f6                	test   esi,esi
c0010a80:	74 03                	je     c0010a85 <SysGetEnv(regs*)+0x30>
c0010a82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a85:	83 c4 10             	add    esp,0x10
c0010a88:	5b                   	pop    ebx
c0010a89:	5e                   	pop    esi
c0010a8a:	5f                   	pop    edi
c0010a8b:	c3                   	ret    
c0010a8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a90:	83 ec 04             	sub    esp,0x4
c0010a93:	57                   	push   edi
c0010a94:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a9a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010a9d:	57                   	push   edi
c0010a9e:	50                   	push   eax
c0010a9f:	e8 e7 d1 ff ff       	call   c000dc8b <KeGetProcessEnvPair(Process*, int)>
c0010aa4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010aa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010aab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010aaf:	83 c4 0c             	add    esp,0xc
c0010ab2:	85 d2                	test   edx,edx
c0010ab4:	75 23                	jne    c0010ad9 <SysGetEnv(regs*)+0x84>
c0010ab6:	83 ec 0c             	sub    esp,0xc
c0010ab9:	50                   	push   eax
c0010aba:	e8 c1 fa fe ff       	call   c0000580 <strlen>
c0010abf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ac2:	89 c3                	mov    ebx,eax
c0010ac4:	e8 b7 fa fe ff       	call   c0000580 <strlen>
c0010ac9:	83 c4 10             	add    esp,0x10
c0010acc:	31 d2                	xor    edx,edx
c0010ace:	83 c4 10             	add    esp,0x10
c0010ad1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010ad5:	5b                   	pop    ebx
c0010ad6:	5e                   	pop    esi
c0010ad7:	5f                   	pop    edi
c0010ad8:	c3                   	ret    
c0010ad9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010adc:	83 ec 08             	sub    esp,0x8
c0010adf:	50                   	push   eax
c0010ae0:	56                   	push   esi
c0010ae1:	e8 6a fb fe ff       	call   c0000650 <strcpy>
c0010ae6:	58                   	pop    eax
c0010ae7:	5a                   	pop    edx
c0010ae8:	68 8d 2b 02 c0       	push   0xc0022b8d
c0010aed:	56                   	push   esi
c0010aee:	e8 7d fd fe ff       	call   c0000870 <strcat>
c0010af3:	59                   	pop    ecx
c0010af4:	5b                   	pop    ebx
c0010af5:	57                   	push   edi
c0010af6:	56                   	push   esi
c0010af7:	e8 74 fd fe ff       	call   c0000870 <strcat>
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	31 c0                	xor    eax,eax
c0010b01:	83 c4 10             	add    esp,0x10
c0010b04:	31 d2                	xor    edx,edx
c0010b06:	5b                   	pop    ebx
c0010b07:	5e                   	pop    esi
c0010b08:	5f                   	pop    edi
c0010b09:	c3                   	ret    

c0010b0a <SysSetFatAttrib(regs*)>:
c0010b0a:	57                   	push   edi
c0010b0b:	56                   	push   esi
c0010b0c:	53                   	push   ebx
c0010b0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b11:	83 ec 0c             	sub    esp,0xc
c0010b14:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010b17:	68 14 01 00 00       	push   0x114
c0010b1c:	e8 7f de ff ff       	call   c000e9a0 <malloc>
c0010b21:	83 c4 0c             	add    esp,0xc
c0010b24:	89 c3                	mov    ebx,eax
c0010b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b2b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b2e:	50                   	push   eax
c0010b2f:	57                   	push   edi
c0010b30:	53                   	push   ebx
c0010b31:	e8 f6 75 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0010b36:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b39:	83 c4 0c             	add    esp,0xc
c0010b3c:	0f b6 d4             	movzx  edx,ah
c0010b3f:	0f b6 c0             	movzx  eax,al
c0010b42:	52                   	push   edx
c0010b43:	50                   	push   eax
c0010b44:	53                   	push   ebx
c0010b45:	e8 68 78 ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c0010b4a:	83 c4 10             	add    esp,0x10
c0010b4d:	85 db                	test   ebx,ebx
c0010b4f:	89 c6                	mov    esi,eax
c0010b51:	74 0c                	je     c0010b5f <SysSetFatAttrib(regs*)+0x55>
c0010b53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b55:	83 ec 0c             	sub    esp,0xc
c0010b58:	53                   	push   ebx
c0010b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	5b                   	pop    ebx
c0010b60:	31 c0                	xor    eax,eax
c0010b62:	85 f6                	test   esi,esi
c0010b64:	0f 95 c0             	setne  al
c0010b67:	31 d2                	xor    edx,edx
c0010b69:	5e                   	pop    esi
c0010b6a:	f7 d8                	neg    eax
c0010b6c:	83 d2 00             	adc    edx,0x0
c0010b6f:	f7 da                	neg    edx
c0010b71:	5f                   	pop    edi
c0010b72:	c3                   	ret    

c0010b73 <SysShutdown(regs*)>:
c0010b73:	83 ec 1c             	sub    esp,0x1c
c0010b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b7a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010b7d:	85 c9                	test   ecx,ecx
c0010b7f:	74 18                	je     c0010b99 <SysShutdown(regs*)+0x26>
c0010b81:	83 f9 01             	cmp    ecx,0x1
c0010b84:	74 26                	je     c0010bac <SysShutdown(regs*)+0x39>
c0010b86:	83 f9 02             	cmp    ecx,0x2
c0010b89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b93:	74 24                	je     c0010bb9 <SysShutdown(regs*)+0x46>
c0010b95:	83 c4 1c             	add    esp,0x1c
c0010b98:	c3                   	ret    
c0010b99:	e8 46 cb ff ff       	call   c000d6e4 <KeShutdown()>
c0010b9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ba3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ba8:	83 c4 1c             	add    esp,0x1c
c0010bab:	c3                   	ret    
c0010bac:	e8 57 cb ff ff       	call   c000d708 <KeSleep()>
c0010bb1:	31 c0                	xor    eax,eax
c0010bb3:	31 d2                	xor    edx,edx
c0010bb5:	83 c4 1c             	add    esp,0x1c
c0010bb8:	c3                   	ret    
c0010bb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010bc1:	e8 4e cb ff ff       	call   c000d714 <KeRestart()>
c0010bc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010bce:	eb c5                	jmp    c0010b95 <SysShutdown(regs*)+0x22>

c0010bd0 <SysPipe(regs*)>:
c0010bd0:	57                   	push   edi
c0010bd1:	56                   	push   esi
c0010bd2:	53                   	push   ebx
c0010bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd7:	83 ec 0c             	sub    esp,0xc
c0010bda:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010bdd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010be0:	6a 20                	push   0x20
c0010be2:	e8 b9 dd ff ff       	call   c000e9a0 <malloc>
c0010be7:	89 c3                	mov    ebx,eax
c0010be9:	58                   	pop    eax
c0010bea:	5a                   	pop    edx
c0010beb:	68 00 50 00 00       	push   0x5000
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 6c e9 ff ff       	call   c000f562 <Pipe::Pipe(int)>
c0010bf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bf9:	e8 46 10 00 00       	call   c0011c44 <UnixFile::getFileDescriptor()>
c0010bfe:	89 07                	mov    DWORD PTR [edi],eax
c0010c00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c03:	e8 3c 10 00 00       	call   c0011c44 <UnixFile::getFileDescriptor()>
c0010c08:	83 c4 10             	add    esp,0x10
c0010c0b:	31 d2                	xor    edx,edx
c0010c0d:	89 06                	mov    DWORD PTR [esi],eax
c0010c0f:	31 c0                	xor    eax,eax
c0010c11:	5b                   	pop    ebx
c0010c12:	5e                   	pop    esi
c0010c13:	5f                   	pop    edi
c0010c14:	c3                   	ret    

c0010c15 <SysGetUnixTime(regs*)>:
c0010c15:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0010c1a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010c20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c24:	e9 8b 7f ff ff       	jmp    c0008bb4 <Clock::timeInSecondsLocal()>

c0010c29 <string_ends_with(char const*, char const*)>:
c0010c29:	57                   	push   edi
c0010c2a:	56                   	push   esi
c0010c2b:	53                   	push   ebx
c0010c2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c30:	83 ec 0c             	sub    esp,0xc
c0010c33:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010c37:	53                   	push   ebx
c0010c38:	e8 43 f9 fe ff       	call   c0000580 <strlen>
c0010c3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c40:	89 c6                	mov    esi,eax
c0010c42:	e8 39 f9 fe ff       	call   c0000580 <strlen>
c0010c47:	83 c4 10             	add    esp,0x10
c0010c4a:	31 d2                	xor    edx,edx
c0010c4c:	39 c6                	cmp    esi,eax
c0010c4e:	7d 06                	jge    c0010c56 <string_ends_with(char const*, char const*)+0x2d>
c0010c50:	5b                   	pop    ebx
c0010c51:	89 d0                	mov    eax,edx
c0010c53:	5e                   	pop    esi
c0010c54:	5f                   	pop    edi
c0010c55:	c3                   	ret    
c0010c56:	83 ec 08             	sub    esp,0x8
c0010c59:	29 c6                	sub    esi,eax
c0010c5b:	57                   	push   edi
c0010c5c:	01 f3                	add    ebx,esi
c0010c5e:	53                   	push   ebx
c0010c5f:	e8 1c fb fe ff       	call   c0000780 <strcmp>
c0010c64:	83 c4 10             	add    esp,0x10
c0010c67:	31 d2                	xor    edx,edx
c0010c69:	5b                   	pop    ebx
c0010c6a:	5e                   	pop    esi
c0010c6b:	85 c0                	test   eax,eax
c0010c6d:	5f                   	pop    edi
c0010c6e:	0f 94 c2             	sete   dl
c0010c71:	89 d0                	mov    eax,edx
c0010c73:	c3                   	ret    

c0010c74 <SysOpen(regs*)>:
c0010c74:	56                   	push   esi
c0010c75:	53                   	push   ebx
c0010c76:	81 ec 04 01 00 00    	sub    esp,0x104
c0010c7c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010c83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c86:	85 c0                	test   eax,eax
c0010c88:	0f 84 c4 01 00 00    	je     c0010e52 <SysOpen(regs*)+0x1de>
c0010c8e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c91:	85 c0                	test   eax,eax
c0010c93:	0f 84 b9 01 00 00    	je     c0010e52 <SysOpen(regs*)+0x1de>
c0010c99:	6a 00                	push   0x0
c0010c9b:	68 8f 2b 02 c0       	push   0xc0022b8f
c0010ca0:	50                   	push   eax
c0010ca1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010ca5:	56                   	push   esi
c0010ca6:	e8 55 71 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010cab:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cae:	e8 cd f8 fe ff       	call   c0000580 <strlen>
c0010cb3:	83 c4 10             	add    esp,0x10
c0010cb6:	83 e8 01             	sub    eax,0x1
c0010cb9:	74 29                	je     c0010ce4 <SysOpen(regs*)+0x70>
c0010cbb:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010cbf:	83 fa 2e             	cmp    edx,0x2e
c0010cc2:	74 1c                	je     c0010ce0 <SysOpen(regs*)+0x6c>
c0010cc4:	83 fa 3a             	cmp    edx,0x3a
c0010cc7:	74 17                	je     c0010ce0 <SysOpen(regs*)+0x6c>
c0010cc9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010ccd:	83 e8 01             	sub    eax,0x1
c0010cd0:	74 12                	je     c0010ce4 <SysOpen(regs*)+0x70>
c0010cd2:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010cd6:	83 fa 3a             	cmp    edx,0x3a
c0010cd9:	74 05                	je     c0010ce0 <SysOpen(regs*)+0x6c>
c0010cdb:	83 fa 2e             	cmp    edx,0x2e
c0010cde:	75 e9                	jne    c0010cc9 <SysOpen(regs*)+0x55>
c0010ce0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010ce4:	83 ec 08             	sub    esp,0x8
c0010ce7:	68 93 2b 02 c0       	push   0xc0022b93
c0010cec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cef:	50                   	push   eax
c0010cf0:	e8 34 ff ff ff       	call   c0010c29 <string_ends_with(char const*, char const*)>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	85 c0                	test   eax,eax
c0010cfa:	74 1d                	je     c0010d19 <SysOpen(regs*)+0xa5>
c0010cfc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cff:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010d05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d0c:	81 c4 04 01 00 00    	add    esp,0x104
c0010d12:	31 c0                	xor    eax,eax
c0010d14:	5b                   	pop    ebx
c0010d15:	31 d2                	xor    edx,edx
c0010d17:	5e                   	pop    esi
c0010d18:	c3                   	ret    
c0010d19:	83 ec 08             	sub    esp,0x8
c0010d1c:	68 98 2b 02 c0       	push   0xc0022b98
c0010d21:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d24:	50                   	push   eax
c0010d25:	e8 ff fe ff ff       	call   c0010c29 <string_ends_with(char const*, char const*)>
c0010d2a:	83 c4 10             	add    esp,0x10
c0010d2d:	85 c0                	test   eax,eax
c0010d2f:	75 cb                	jne    c0010cfc <SysOpen(regs*)+0x88>
c0010d31:	83 ec 08             	sub    esp,0x8
c0010d34:	68 94 2b 02 c0       	push   0xc0022b94
c0010d39:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d3c:	50                   	push   eax
c0010d3d:	e8 3e fa fe ff       	call   c0000780 <strcmp>
c0010d42:	83 c4 10             	add    esp,0x10
c0010d45:	85 c0                	test   eax,eax
c0010d47:	74 b3                	je     c0010cfc <SysOpen(regs*)+0x88>
c0010d49:	83 ec 08             	sub    esp,0x8
c0010d4c:	68 93 2b 02 c0       	push   0xc0022b93
c0010d51:	56                   	push   esi
c0010d52:	e8 d2 fe ff ff       	call   c0010c29 <string_ends_with(char const*, char const*)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	85 c0                	test   eax,eax
c0010d5c:	75 9e                	jne    c0010cfc <SysOpen(regs*)+0x88>
c0010d5e:	83 ec 08             	sub    esp,0x8
c0010d61:	68 9d 2b 02 c0       	push   0xc0022b9d
c0010d66:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d69:	50                   	push   eax
c0010d6a:	e8 ba fe ff ff       	call   c0010c29 <string_ends_with(char const*, char const*)>
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	85 c0                	test   eax,eax
c0010d74:	0f 85 eb 00 00 00    	jne    c0010e65 <SysOpen(regs*)+0x1f1>
c0010d7a:	83 ec 08             	sub    esp,0x8
c0010d7d:	68 a2 2b 02 c0       	push   0xc0022ba2
c0010d82:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d85:	50                   	push   eax
c0010d86:	e8 9e fe ff ff       	call   c0010c29 <string_ends_with(char const*, char const*)>
c0010d8b:	83 c4 10             	add    esp,0x10
c0010d8e:	85 c0                	test   eax,eax
c0010d90:	0f 85 cf 00 00 00    	jne    c0010e65 <SysOpen(regs*)+0x1f1>
c0010d96:	83 ec 08             	sub    esp,0x8
c0010d99:	68 9e 2b 02 c0       	push   0xc0022b9e
c0010d9e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010da1:	51                   	push   ecx
c0010da2:	e8 d9 f9 fe ff       	call   c0000780 <strcmp>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	85 c0                	test   eax,eax
c0010dac:	0f 84 b3 00 00 00    	je     c0010e65 <SysOpen(regs*)+0x1f1>
c0010db2:	83 ec 08             	sub    esp,0x8
c0010db5:	68 9d 2b 02 c0       	push   0xc0022b9d
c0010dba:	56                   	push   esi
c0010dbb:	e8 69 fe ff ff       	call   c0010c29 <string_ends_with(char const*, char const*)>
c0010dc0:	83 c4 10             	add    esp,0x10
c0010dc3:	85 c0                	test   eax,eax
c0010dc5:	0f 85 9a 00 00 00    	jne    c0010e65 <SysOpen(regs*)+0x1f1>
c0010dcb:	83 ec 0c             	sub    esp,0xc
c0010dce:	68 14 01 00 00       	push   0x114
c0010dd3:	e8 c8 db ff ff       	call   c000e9a0 <malloc>
c0010dd8:	83 c4 0c             	add    esp,0xc
c0010ddb:	89 c6                	mov    esi,eax
c0010ddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010de2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010de5:	50                   	push   eax
c0010de6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010de9:	52                   	push   edx
c0010dea:	56                   	push   esi
c0010deb:	e8 3c 73 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0010df0:	83 c4 10             	add    esp,0x10
c0010df3:	85 f6                	test   esi,esi
c0010df5:	74 5b                	je     c0010e52 <SysOpen(regs*)+0x1de>
c0010df7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010dfa:	0f b6 c2             	movzx  eax,dl
c0010dfd:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010e00:	89 d0                	mov    eax,edx
c0010e02:	83 e0 01             	and    eax,0x1
c0010e05:	f6 c2 02             	test   dl,0x2
c0010e08:	74 03                	je     c0010e0d <SysOpen(regs*)+0x199>
c0010e0a:	83 c8 02             	or     eax,0x2
c0010e0d:	f6 c2 04             	test   dl,0x4
c0010e10:	74 03                	je     c0010e15 <SysOpen(regs*)+0x1a1>
c0010e12:	83 c8 04             	or     eax,0x4
c0010e15:	f6 c2 08             	test   dl,0x8
c0010e18:	74 03                	je     c0010e1d <SysOpen(regs*)+0x1a9>
c0010e1a:	83 c8 0a             	or     eax,0xa
c0010e1d:	80 e2 10             	and    dl,0x10
c0010e20:	74 03                	je     c0010e25 <SysOpen(regs*)+0x1b1>
c0010e22:	83 c8 12             	or     eax,0x12
c0010e25:	83 ec 08             	sub    esp,0x8
c0010e28:	50                   	push   eax
c0010e29:	56                   	push   esi
c0010e2a:	e8 1b 73 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0010e2f:	83 c4 10             	add    esp,0x10
c0010e32:	85 c0                	test   eax,eax
c0010e34:	75 1c                	jne    c0010e52 <SysOpen(regs*)+0x1de>
c0010e36:	83 ec 0c             	sub    esp,0xc
c0010e39:	56                   	push   esi
c0010e3a:	e8 05 0e 00 00       	call   c0011c44 <UnixFile::getFileDescriptor()>
c0010e3f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	89 02                	mov    DWORD PTR [edx],eax
c0010e47:	c1 f8 1f             	sar    eax,0x1f
c0010e4a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e4d:	e9 ba fe ff ff       	jmp    c0010d0c <SysOpen(regs*)+0x98>
c0010e52:	81 c4 04 01 00 00    	add    esp,0x104
c0010e58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e5d:	5b                   	pop    ebx
c0010e5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e63:	5e                   	pop    esi
c0010e64:	c3                   	ret    
c0010e65:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e68:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010e6e:	e9 92 fe ff ff       	jmp    c0010d05 <SysOpen(regs*)+0x91>

c0010e73 <KeSystemCall(regs*, void*)>:
c0010e73:	53                   	push   ebx
c0010e74:	83 ec 08             	sub    esp,0x8
c0010e77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e7b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010e7e:	83 f8 40             	cmp    eax,0x40
c0010e81:	77 29                	ja     c0010eac <KeSystemCall(regs*, void*)+0x39>
c0010e83:	83 3c 85 c0 4d 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdb240],0x0
c0010e8b:	74 1f                	je     c0010eac <KeSystemCall(regs*, void*)+0x39>
c0010e8d:	51                   	push   ecx
c0010e8e:	51                   	push   ecx
c0010e8f:	50                   	push   eax
c0010e90:	68 a7 2b 02 c0       	push   0xc0022ba7
c0010e95:	e8 b4 60 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010e9a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010e9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ea0:	ff 14 85 c0 4d 02 c0 	call   DWORD PTR [eax*4-0x3ffdb240]
c0010ea7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010eaa:	eb 0d                	jmp    c0010eb9 <KeSystemCall(regs*, void*)+0x46>
c0010eac:	52                   	push   edx
c0010ead:	52                   	push   edx
c0010eae:	50                   	push   eax
c0010eaf:	68 c4 2b 02 c0       	push   0xc0022bc4
c0010eb4:	e8 95 60 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010ec1:	83 c4 08             	add    esp,0x8
c0010ec4:	31 d2                	xor    edx,edx
c0010ec6:	5b                   	pop    ebx
c0010ec7:	c3                   	ret    

c0010ec8 <VgaText::isAtty()>:
c0010ec8:	b0 01                	mov    al,0x1
c0010eca:	c3                   	ret    
c0010ecb:	90                   	nop

c0010ecc <VgaText::~VgaText()>:
c0010ecc:	83 ec 0c             	sub    esp,0xc
c0010ecf:	ba 0c 2c 02 c0       	mov    edx,0xc0022c0c
c0010ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed8:	89 10                	mov    DWORD PTR [eax],edx
c0010eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ede:	83 ec 0c             	sub    esp,0xc
c0010ee1:	50                   	push   eax
c0010ee2:	e8 4b 0f 00 00       	call   c0011e32 <UnixFile::~UnixFile()>
c0010ee7:	83 c4 10             	add    esp,0x10
c0010eea:	90                   	nop
c0010eeb:	83 c4 0c             	add    esp,0xc
c0010eee:	c3                   	ret    
c0010eef:	90                   	nop

c0010ef0 <VgaText::~VgaText()>:
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	83 ec 0c             	sub    esp,0xc
c0010ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010efa:	e8 cd ff ff ff       	call   c0010ecc <VgaText::~VgaText()>
c0010eff:	83 c4 10             	add    esp,0x10
c0010f02:	83 ec 08             	sub    esp,0x8
c0010f05:	68 84 01 00 00       	push   0x184
c0010f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f0e:	e8 98 b7 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	83 c4 0c             	add    esp,0xc
c0010f19:	c3                   	ret    

c0010f1a <VgaText::read(unsigned long long, void*, int*)>:
c0010f1a:	83 ec 10             	sub    esp,0x10
c0010f1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f29:	e8 8b 8c ff ff       	call   c0009bb9 <readKeyboard(VgaText*, char*, unsigned long)>
c0010f2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010f32:	89 02                	mov    DWORD PTR [edx],eax
c0010f34:	31 c0                	xor    eax,eax
c0010f36:	83 c4 1c             	add    esp,0x1c
c0010f39:	c3                   	ret    

c0010f3a <setTerminalScrollLock(bool)>:
c0010f3a:	c3                   	ret    

c0010f3b <doTerminalCycle()>:
c0010f3b:	c3                   	ret    

c0010f3c <addToTerminalCycle(VgaText*)>:
c0010f3c:	c3                   	ret    

c0010f3d <scrollTerminalScrollLock(int)>:
c0010f3d:	c3                   	ret    

c0010f3e <VgaText::updateTitle()>:
c0010f3e:	c3                   	ret    
c0010f3f:	90                   	nop

c0010f40 <VgaText::load()>:
c0010f40:	c3                   	ret    
c0010f41:	90                   	nop

c0010f42 <VgaText::updateCursor()>:
c0010f42:	83 ec 14             	sub    esp,0x14
c0010f45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f49:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010f4c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010f4f:	e8 18 8a 00 00       	call   c001996c <HalConsoleCursorUpdate(int, int)>
c0010f54:	83 c4 1c             	add    esp,0x1c
c0010f57:	c3                   	ret    

c0010f58 <VgaText::doANSI_SGR(int)>:
c0010f58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f60:	85 d2                	test   edx,edx
c0010f62:	75 0b                	jne    c0010f6f <VgaText::doANSI_SGR(int)+0x17>
c0010f64:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010f67:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f6a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f6d:	eb 59                	jmp    c0010fc8 <VgaText::doANSI_SGR(int)+0x70>
c0010f6f:	83 fa 07             	cmp    edx,0x7
c0010f72:	75 0b                	jne    c0010f7f <VgaText::doANSI_SGR(int)+0x27>
c0010f74:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010f77:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010f7a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010f7d:	eb 49                	jmp    c0010fc8 <VgaText::doANSI_SGR(int)+0x70>
c0010f7f:	83 fa 1b             	cmp    edx,0x1b
c0010f82:	74 e0                	je     c0010f64 <VgaText::doANSI_SGR(int)+0xc>
c0010f84:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010f87:	83 f9 07             	cmp    ecx,0x7
c0010f8a:	77 09                	ja     c0010f95 <VgaText::doANSI_SGR(int)+0x3d>
c0010f8c:	8b 14 8d 00 4f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb100]
c0010f93:	eb 20                	jmp    c0010fb5 <VgaText::doANSI_SGR(int)+0x5d>
c0010f95:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010f98:	83 f9 07             	cmp    ecx,0x7
c0010f9b:	77 09                	ja     c0010fa6 <VgaText::doANSI_SGR(int)+0x4e>
c0010f9d:	8b 14 8d 00 4f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb100]
c0010fa4:	eb 22                	jmp    c0010fc8 <VgaText::doANSI_SGR(int)+0x70>
c0010fa6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010fa9:	83 f9 07             	cmp    ecx,0x7
c0010fac:	77 0b                	ja     c0010fb9 <VgaText::doANSI_SGR(int)+0x61>
c0010fae:	8b 14 95 b8 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb248]
c0010fb5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010fb8:	c3                   	ret    
c0010fb9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010fbc:	83 f9 07             	cmp    ecx,0x7
c0010fbf:	77 0a                	ja     c0010fcb <VgaText::doANSI_SGR(int)+0x73>
c0010fc1:	8b 14 95 90 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb270]
c0010fc8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010fcb:	c3                   	ret    

c0010fcc <VgaText::setDefaultBgColour(VgaColour)>:
c0010fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fd4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010fd7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <VgaText::setDefaultFgColour(VgaColour)>:
c0010fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010fe7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010fea:	c3                   	ret    
c0010feb:	90                   	nop

c0010fec <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010fec:	53                   	push   ebx
c0010fed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ff1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010ff5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ff9:	51                   	push   ecx
c0010ffa:	e8 cd ff ff ff       	call   c0010fcc <VgaText::setDefaultBgColour(VgaColour)>
c0010fff:	58                   	pop    eax
c0011000:	5a                   	pop    edx
c0011001:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011005:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011009:	5b                   	pop    ebx
c001100a:	eb d0                	jmp    c0010fdc <VgaText::setDefaultFgColour(VgaColour)>

c001100c <VgaText::setTitleTextColour(VgaColour)>:
c001100c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011010:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011014:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0011017:	c3                   	ret    

c0011018 <VgaText::setTitleColour(VgaColour)>:
c0011018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001101c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011020:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011023:	c3                   	ret    

c0011024 <VgaText::setTitle(char*)>:
c0011024:	c3                   	ret    
c0011025:	90                   	nop

c0011026 <VgaText::combineColours(unsigned char, unsigned char)>:
c0011026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001102a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001102f:	83 e0 0f             	and    eax,0xf
c0011032:	c1 e2 04             	shl    edx,0x4
c0011035:	09 d0                	or     eax,edx
c0011037:	c3                   	ret    

c0011038 <VgaText::scrollScreen()>:
c0011038:	55                   	push   ebp
c0011039:	57                   	push   edi
c001103a:	56                   	push   esi
c001103b:	be 01 00 00 00       	mov    esi,0x1
c0011040:	53                   	push   ebx
c0011041:	83 ec 0c             	sub    esp,0xc
c0011044:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011048:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001104b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011051:	31 ff                	xor    edi,edi
c0011053:	01 e9                	add    ecx,ebp
c0011055:	8a 01                	mov    al,BYTE PTR [ecx]
c0011057:	83 fe 18             	cmp    esi,0x18
c001105a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011060:	75 20                	jne    c0011082 <VgaText::scrollScreen()+0x4a>
c0011062:	f7 c7 01 00 00 00    	test   edi,0x1
c0011068:	74 15                	je     c001107f <VgaText::scrollScreen()+0x47>
c001106a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001106e:	50                   	push   eax
c001106f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011073:	50                   	push   eax
c0011074:	e8 ad ff ff ff       	call   c0011026 <VgaText::combineColours(unsigned char, unsigned char)>
c0011079:	5a                   	pop    edx
c001107a:	5a                   	pop    edx
c001107b:	88 01                	mov    BYTE PTR [ecx],al
c001107d:	eb 03                	jmp    c0011082 <VgaText::scrollScreen()+0x4a>
c001107f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011082:	47                   	inc    edi
c0011083:	41                   	inc    ecx
c0011084:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001108a:	75 c9                	jne    c0011055 <VgaText::scrollScreen()+0x1d>
c001108c:	46                   	inc    esi
c001108d:	83 fe 19             	cmp    esi,0x19
c0011090:	75 b9                	jne    c001104b <VgaText::scrollScreen()+0x13>
c0011092:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c0011098:	75 1f                	jne    c00110b9 <VgaText::scrollScreen()+0x81>
c001109a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001109e:	74 05                	je     c00110a5 <VgaText::scrollScreen()+0x6d>
c00110a0:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00110a3:	eb 14                	jmp    c00110b9 <VgaText::scrollScreen()+0x81>
c00110a5:	50                   	push   eax
c00110a6:	50                   	push   eax
c00110a7:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00110ab:	50                   	push   eax
c00110ac:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00110b0:	50                   	push   eax
c00110b1:	e8 4a 87 00 00       	call   c0019800 <HalConsoleScroll(int, int)>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00110bd:	83 c4 0c             	add    esp,0xc
c00110c0:	5b                   	pop    ebx
c00110c1:	5e                   	pop    esi
c00110c2:	5f                   	pop    edi
c00110c3:	5d                   	pop    ebp
c00110c4:	e9 79 fe ff ff       	jmp    c0010f42 <VgaText::updateCursor()>
c00110c9:	90                   	nop

c00110ca <VgaText::combineCharAndColour(char, unsigned char)>:
c00110ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00110cf:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00110d4:	c1 e0 08             	shl    eax,0x8
c00110d7:	09 d0                	or     eax,edx
c00110d9:	c3                   	ret    

c00110da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00110da:	55                   	push   ebp
c00110db:	57                   	push   edi
c00110dc:	56                   	push   esi
c00110dd:	53                   	push   ebx
c00110de:	83 ec 1c             	sub    esp,0x1c
c00110e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00110e5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00110e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00110ed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00110f9:	0f b6 c3             	movzx  eax,bl
c00110fc:	50                   	push   eax
c00110fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0011102:	50                   	push   eax
c0011103:	e8 1e ff ff ff       	call   c0011026 <VgaText::combineColours(unsigned char, unsigned char)>
c0011108:	5a                   	pop    edx
c0011109:	59                   	pop    ecx
c001110a:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c001110f:	0f b6 c0             	movzx  eax,al
c0011112:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011116:	50                   	push   eax
c0011117:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001111b:	e8 aa ff ff ff       	call   c00110ca <VgaText::combineCharAndColour(char, unsigned char)>
c0011120:	5a                   	pop    edx
c0011121:	6b d7 50             	imul   edx,edi,0x50
c0011124:	59                   	pop    ecx
c0011125:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0011128:	01 f2                	add    edx,esi
c001112a:	0f b7 d2             	movzx  edx,dx
c001112d:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0011131:	39 2d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebp
c0011137:	75 28                	jne    c0011161 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0011139:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001113d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011141:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0011145:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0011149:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001114d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011151:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011155:	83 c4 1c             	add    esp,0x1c
c0011158:	5b                   	pop    ebx
c0011159:	5e                   	pop    esi
c001115a:	5f                   	pop    edi
c001115b:	5d                   	pop    ebp
c001115c:	e9 a7 87 00 00       	jmp    c0019908 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011161:	83 c4 1c             	add    esp,0x1c
c0011164:	5b                   	pop    ebx
c0011165:	5e                   	pop    esi
c0011166:	5f                   	pop    edi
c0011167:	5d                   	pop    ebp
c0011168:	c3                   	ret    
c0011169:	90                   	nop

c001116a <VgaText::getCursorX()>:
c001116a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001116e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011171:	c3                   	ret    

c0011172 <VgaText::getCursorY()>:
c0011172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011176:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011179:	c3                   	ret    

c001117a <VgaText::setCursor(int, int)>:
c001117a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001117e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011182:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011185:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011189:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001118c:	e9 b1 fd ff ff       	jmp    c0010f42 <VgaText::updateCursor()>

c0011191 <setActiveTerminal(VgaText*)>:
c0011191:	53                   	push   ebx
c0011192:	83 ec 08             	sub    esp,0x8
c0011195:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011199:	85 db                	test   ebx,ebx
c001119b:	75 11                	jne    c00111ae <setActiveTerminal(VgaText*)+0x1d>
c001119d:	c7 44 24 10 d8 2b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022bd8
c00111a5:	83 c4 08             	add    esp,0x8
c00111a8:	5b                   	pop    ebx
c00111a9:	e9 38 db ff ff       	jmp    c000ece6 <KePanic(char const*)>
c00111ae:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c00111b3:	85 c0                	test   eax,eax
c00111b5:	74 0c                	je     c00111c3 <setActiveTerminal(VgaText*)+0x32>
c00111b7:	83 ec 0c             	sub    esp,0xc
c00111ba:	50                   	push   eax
c00111bb:	e8 82 fd ff ff       	call   c0010f42 <VgaText::updateCursor()>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	50                   	push   eax
c00111c4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00111c7:	89 1d 34 ce 02 c0    	mov    DWORD PTR ds:0xc002ce34,ebx
c00111cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00111d0:	53                   	push   ebx
c00111d1:	e8 a4 ff ff ff       	call   c001117a <VgaText::setCursor(int, int)>
c00111d6:	83 c4 18             	add    esp,0x18
c00111d9:	5b                   	pop    ebx
c00111da:	c3                   	ret    
c00111db:	90                   	nop

c00111dc <VgaText::clearScreen()>:
c00111dc:	57                   	push   edi
c00111dd:	56                   	push   esi
c00111de:	31 f6                	xor    esi,esi
c00111e0:	53                   	push   ebx
c00111e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111e5:	52                   	push   edx
c00111e6:	6a 00                	push   0x0
c00111e8:	6a 00                	push   0x0
c00111ea:	53                   	push   ebx
c00111eb:	e8 8a ff ff ff       	call   c001117a <VgaText::setCursor(int, int)>
c00111f0:	83 c4 10             	add    esp,0x10
c00111f3:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00111fa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00111fd:	7e 20                	jle    c001121f <VgaText::clearScreen()+0x43>
c00111ff:	31 ff                	xor    edi,edi
c0011201:	50                   	push   eax
c0011202:	50                   	push   eax
c0011203:	56                   	push   esi
c0011204:	57                   	push   edi
c0011205:	47                   	inc    edi
c0011206:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011209:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001120c:	6a 20                	push   0x20
c001120e:	53                   	push   ebx
c001120f:	e8 c6 fe ff ff       	call   c00110da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011214:	83 c4 20             	add    esp,0x20
c0011217:	83 ff 50             	cmp    edi,0x50
c001121a:	75 e5                	jne    c0011201 <VgaText::clearScreen()+0x25>
c001121c:	46                   	inc    esi
c001121d:	eb db                	jmp    c00111fa <VgaText::clearScreen()+0x1e>
c001121f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011226:	5b                   	pop    ebx
c0011227:	5e                   	pop    esi
c0011228:	5f                   	pop    edi
c0011229:	c3                   	ret    

c001122a <VgaText::setCursorX(int)>:
c001122a:	83 ec 10             	sub    esp,0x10
c001122d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011231:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011238:	50                   	push   eax
c0011239:	e8 3c ff ff ff       	call   c001117a <VgaText::setCursor(int, int)>
c001123e:	83 c4 1c             	add    esp,0x1c
c0011241:	c3                   	ret    

c0011242 <VgaText::setCursorY(int)>:
c0011242:	83 ec 10             	sub    esp,0x10
c0011245:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011249:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001124d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011250:	50                   	push   eax
c0011251:	e8 24 ff ff ff       	call   c001117a <VgaText::setCursor(int, int)>
c0011256:	83 c4 1c             	add    esp,0x1c
c0011259:	c3                   	ret    

c001125a <VgaText::incrementCursor(bool)>:
c001125a:	56                   	push   esi
c001125b:	53                   	push   ebx
c001125c:	51                   	push   ecx
c001125d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011261:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011265:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011268:	40                   	inc    eax
c0011269:	83 f8 50             	cmp    eax,0x50
c001126c:	74 05                	je     c0011273 <VgaText::incrementCursor(bool)+0x19>
c001126e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011271:	eb 24                	jmp    c0011297 <VgaText::incrementCursor(bool)+0x3d>
c0011273:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001127a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001127d:	8d 50 01             	lea    edx,[eax+0x1]
c0011280:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011283:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011286:	75 0f                	jne    c0011297 <VgaText::incrementCursor(bool)+0x3d>
c0011288:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001128b:	83 ec 0c             	sub    esp,0xc
c001128e:	53                   	push   ebx
c001128f:	e8 a4 fd ff ff       	call   c0011038 <VgaText::scrollScreen()>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	89 f0                	mov    eax,esi
c0011299:	84 c0                	test   al,al
c001129b:	74 0c                	je     c00112a9 <VgaText::incrementCursor(bool)+0x4f>
c001129d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00112a1:	5a                   	pop    edx
c00112a2:	5b                   	pop    ebx
c00112a3:	5e                   	pop    esi
c00112a4:	e9 99 fc ff ff       	jmp    c0010f42 <VgaText::updateCursor()>
c00112a9:	58                   	pop    eax
c00112aa:	5b                   	pop    ebx
c00112ab:	5e                   	pop    esi
c00112ac:	c3                   	ret    
c00112ad:	90                   	nop

c00112ae <VgaText::decrementCursor(bool)>:
c00112ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00112b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112b6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00112b9:	85 c0                	test   eax,eax
c00112bb:	74 04                	je     c00112c1 <VgaText::decrementCursor(bool)+0x13>
c00112bd:	48                   	dec    eax
c00112be:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00112c1:	84 c9                	test   cl,cl
c00112c3:	74 09                	je     c00112ce <VgaText::decrementCursor(bool)+0x20>
c00112c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00112c9:	e9 74 fc ff ff       	jmp    c0010f42 <VgaText::updateCursor()>
c00112ce:	c3                   	ret    
c00112cf:	90                   	nop

c00112d0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00112d0:	53                   	push   ebx
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00112d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00112e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00112e5:	83 f8 07             	cmp    eax,0x7
c00112e8:	75 21                	jne    c001130b <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00112ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00112f2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00112fa:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011302:	83 c4 08             	add    esp,0x8
c0011305:	5b                   	pop    ebx
c0011306:	e9 c3 76 ff ff       	jmp    c00089ce <KeBeep(int, int, bool)>
c001130b:	83 f8 0d             	cmp    eax,0xd
c001130e:	75 09                	jne    c0011319 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011310:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011317:	eb 2d                	jmp    c0011346 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011319:	83 f8 0a             	cmp    eax,0xa
c001131c:	75 31                	jne    c001134f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001131e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011325:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011328:	8d 50 01             	lea    edx,[eax+0x1]
c001132b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001132e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011331:	75 0f                	jne    c0011342 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011333:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011336:	83 ec 0c             	sub    esp,0xc
c0011339:	53                   	push   ebx
c001133a:	e8 f9 fc ff ff       	call   c0011038 <VgaText::scrollScreen()>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011346:	83 c4 08             	add    esp,0x8
c0011349:	5b                   	pop    ebx
c001134a:	e9 f3 fb ff ff       	jmp    c0010f42 <VgaText::updateCursor()>
c001134f:	83 f8 08             	cmp    eax,0x8
c0011352:	75 25                	jne    c0011379 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011354:	50                   	push   eax
c0011355:	50                   	push   eax
c0011356:	6a 01                	push   0x1
c0011358:	53                   	push   ebx
c0011359:	e8 50 ff ff ff       	call   c00112ae <VgaText::decrementCursor(bool)>
c001135e:	5a                   	pop    edx
c001135f:	59                   	pop    ecx
c0011360:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011363:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011366:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011369:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001136c:	6a 20                	push   0x20
c001136e:	53                   	push   ebx
c001136f:	e8 66 fd ff ff       	call   c00110da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011374:	83 c4 28             	add    esp,0x28
c0011377:	5b                   	pop    ebx
c0011378:	c3                   	ret    
c0011379:	83 ec 08             	sub    esp,0x8
c001137c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001137f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011382:	51                   	push   ecx
c0011383:	52                   	push   edx
c0011384:	50                   	push   eax
c0011385:	53                   	push   ebx
c0011386:	e8 4f fd ff ff       	call   c00110da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001138b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001138f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011397:	83 c4 28             	add    esp,0x28
c001139a:	5b                   	pop    ebx
c001139b:	e9 ba fe ff ff       	jmp    c001125a <VgaText::incrementCursor(bool)>

c00113a0 <VgaText::putchar(char)>:
c00113a0:	57                   	push   edi
c00113a1:	56                   	push   esi
c00113a2:	53                   	push   ebx
c00113a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113ab:	0f be c2             	movsx  eax,dl
c00113ae:	83 f8 5b             	cmp    eax,0x5b
c00113b1:	75 18                	jne    c00113cb <VgaText::putchar(char)+0x2b>
c00113b3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00113b7:	74 20                	je     c00113d9 <VgaText::putchar(char)+0x39>
c00113b9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00113bf:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00113c6:	e9 b8 00 00 00       	jmp    c0011483 <VgaText::putchar(char)+0xe3>
c00113cb:	83 f8 1b             	cmp    eax,0x1b
c00113ce:	75 09                	jne    c00113d9 <VgaText::putchar(char)+0x39>
c00113d0:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00113d4:	e9 aa 00 00 00       	jmp    c0011483 <VgaText::putchar(char)+0xe3>
c00113d9:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00113dd:	89 f9                	mov    ecx,edi
c00113df:	84 c9                	test   cl,cl
c00113e1:	0f 84 8c 00 00 00    	je     c0011473 <VgaText::putchar(char)+0xd3>
c00113e7:	8d 4a c0             	lea    ecx,[edx-0x40]
c00113ea:	80 f9 3e             	cmp    cl,0x3e
c00113ed:	77 70                	ja     c001145f <VgaText::putchar(char)+0xbf>
c00113ef:	83 f8 6d             	cmp    eax,0x6d
c00113f2:	75 3f                	jne    c0011433 <VgaText::putchar(char)+0x93>
c00113f4:	31 f6                	xor    esi,esi
c00113f6:	31 d2                	xor    edx,edx
c00113f8:	31 c0                	xor    eax,eax
c00113fa:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00113fd:	7e 25                	jle    c0011424 <VgaText::putchar(char)+0x84>
c00113ff:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011404:	83 fa 3b             	cmp    edx,0x3b
c0011407:	75 0f                	jne    c0011418 <VgaText::putchar(char)+0x78>
c0011409:	50                   	push   eax
c001140a:	53                   	push   ebx
c001140b:	e8 48 fb ff ff       	call   c0010f58 <VgaText::doANSI_SGR(int)>
c0011410:	31 d2                	xor    edx,edx
c0011412:	59                   	pop    ecx
c0011413:	58                   	pop    eax
c0011414:	31 c0                	xor    eax,eax
c0011416:	eb 09                	jmp    c0011421 <VgaText::putchar(char)+0x81>
c0011418:	6b c0 0a             	imul   eax,eax,0xa
c001141b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001141f:	89 fa                	mov    edx,edi
c0011421:	46                   	inc    esi
c0011422:	eb d6                	jmp    c00113fa <VgaText::putchar(char)+0x5a>
c0011424:	84 d2                	test   dl,dl
c0011426:	74 2f                	je     c0011457 <VgaText::putchar(char)+0xb7>
c0011428:	50                   	push   eax
c0011429:	53                   	push   ebx
c001142a:	e8 29 fb ff ff       	call   c0010f58 <VgaText::doANSI_SGR(int)>
c001142f:	58                   	pop    eax
c0011430:	5a                   	pop    edx
c0011431:	eb 24                	jmp    c0011457 <VgaText::putchar(char)+0xb7>
c0011433:	83 f8 4a             	cmp    eax,0x4a
c0011436:	75 1f                	jne    c0011457 <VgaText::putchar(char)+0xb7>
c0011438:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001143c:	75 19                	jne    c0011457 <VgaText::putchar(char)+0xb7>
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	53                   	push   ebx
c0011442:	e8 95 fd ff ff       	call   c00111dc <VgaText::clearScreen()>
c0011447:	83 c4 0c             	add    esp,0xc
c001144a:	6a 00                	push   0x0
c001144c:	6a 00                	push   0x0
c001144e:	53                   	push   ebx
c001144f:	e8 26 fd ff ff       	call   c001117a <VgaText::setCursor(int, int)>
c0011454:	83 c4 10             	add    esp,0x10
c0011457:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001145d:	eb 24                	jmp    c0011483 <VgaText::putchar(char)+0xe3>
c001145f:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011462:	83 f8 0e             	cmp    eax,0xe
c0011465:	7f 1c                	jg     c0011483 <VgaText::putchar(char)+0xe3>
c0011467:	8d 48 01             	lea    ecx,[eax+0x1]
c001146a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001146d:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011471:	eb 10                	jmp    c0011483 <VgaText::putchar(char)+0xe3>
c0011473:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011476:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011479:	50                   	push   eax
c001147a:	53                   	push   ebx
c001147b:	e8 50 fe ff ff       	call   c00112d0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011480:	83 c4 10             	add    esp,0x10
c0011483:	5b                   	pop    ebx
c0011484:	5e                   	pop    esi
c0011485:	5f                   	pop    edi
c0011486:	c3                   	ret    
c0011487:	90                   	nop

c0011488 <VgaText::putx(unsigned int)>:
c0011488:	57                   	push   edi
c0011489:	b9 11 00 00 00       	mov    ecx,0x11
c001148e:	56                   	push   esi
c001148f:	be e6 2b 02 c0       	mov    esi,0xc0022be6
c0011494:	53                   	push   ebx
c0011495:	83 ec 20             	sub    esp,0x20
c0011498:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001149c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00114a0:	fc                   	cld    
c00114a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114a3:	be 08 00 00 00       	mov    esi,0x8
c00114a8:	50                   	push   eax
c00114a9:	50                   	push   eax
c00114aa:	89 d8                	mov    eax,ebx
c00114ac:	c1 e8 1c             	shr    eax,0x1c
c00114af:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00114b4:	c1 e3 04             	shl    ebx,0x4
c00114b7:	50                   	push   eax
c00114b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00114bc:	e8 df fe ff ff       	call   c00113a0 <VgaText::putchar(char)>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	4e                   	dec    esi
c00114c5:	75 e1                	jne    c00114a8 <VgaText::putx(unsigned int)+0x20>
c00114c7:	83 c4 20             	add    esp,0x20
c00114ca:	5b                   	pop    ebx
c00114cb:	5e                   	pop    esi
c00114cc:	5f                   	pop    edi
c00114cd:	c3                   	ret    

c00114ce <VgaText::puts(char const*)>:
c00114ce:	53                   	push   ebx
c00114cf:	83 ec 08             	sub    esp,0x8
c00114d2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00114d6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00114d9:	85 c0                	test   eax,eax
c00114db:	74 12                	je     c00114ef <VgaText::puts(char const*)+0x21>
c00114dd:	51                   	push   ecx
c00114de:	43                   	inc    ebx
c00114df:	51                   	push   ecx
c00114e0:	50                   	push   eax
c00114e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e5:	e8 b6 fe ff ff       	call   c00113a0 <VgaText::putchar(char)>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	eb e7                	jmp    c00114d6 <VgaText::puts(char const*)+0x8>
c00114ef:	83 c4 08             	add    esp,0x8
c00114f2:	5b                   	pop    ebx
c00114f3:	c3                   	ret    

c00114f4 <VgaText::write(unsigned long long, void*, int*)>:
c00114f4:	55                   	push   ebp
c00114f5:	57                   	push   edi
c00114f6:	56                   	push   esi
c00114f7:	53                   	push   ebx
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00114ff:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011503:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011507:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001150e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011511:	39 eb                	cmp    ebx,ebp
c0011513:	74 13                	je     c0011528 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011515:	50                   	push   eax
c0011516:	43                   	inc    ebx
c0011517:	50                   	push   eax
c0011518:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001151c:	50                   	push   eax
c001151d:	56                   	push   esi
c001151e:	e8 7d fe ff ff       	call   c00113a0 <VgaText::putchar(char)>
c0011523:	83 c4 10             	add    esp,0x10
c0011526:	eb e9                	jmp    c0011511 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011528:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001152f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011533:	89 38                	mov    DWORD PTR [eax],edi
c0011535:	83 c4 0c             	add    esp,0xc
c0011538:	31 c0                	xor    eax,eax
c001153a:	5b                   	pop    ebx
c001153b:	5e                   	pop    esi
c001153c:	5f                   	pop    edi
c001153d:	5d                   	pop    ebp
c001153e:	c3                   	ret    
c001153f:	90                   	nop

c0011540 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011540:	55                   	push   ebp
c0011541:	57                   	push   edi
c0011542:	56                   	push   esi
c0011543:	53                   	push   ebx
c0011544:	83 ec 0c             	sub    esp,0xc
c0011547:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001154b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011550:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0011557:	50                   	push   eax
c0011558:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001155d:	50                   	push   eax
c001155e:	e8 c3 fa ff ff       	call   c0011026 <VgaText::combineColours(unsigned char, unsigned char)>
c0011563:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011567:	5a                   	pop    edx
c0011568:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001156b:	59                   	pop    ecx
c001156c:	0f b6 f8             	movzx  edi,al
c001156f:	0f b7 db             	movzx  ebx,bx
c0011572:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011576:	01 db                	add    ebx,ebx
c0011578:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001157b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001157e:	85 c0                	test   eax,eax
c0011580:	0f 84 ef 00 00 00    	je     c0011675 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0011586:	83 f8 0d             	cmp    eax,0xd
c0011589:	75 0c                	jne    c0011597 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001158b:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0011592:	e9 d8 00 00 00       	jmp    c001166f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011597:	83 f8 0a             	cmp    eax,0xa
c001159a:	75 44                	jne    c00115e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001159c:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c00115a3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00115a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00115a9:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c00115ac:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00115af:	75 0f                	jne    c00115c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00115b1:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00115b4:	83 ec 0c             	sub    esp,0xc
c00115b7:	55                   	push   ebp
c00115b8:	e8 7b fa ff ff       	call   c0011038 <VgaText::scrollScreen()>
c00115bd:	83 c4 10             	add    esp,0x10
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	55                   	push   ebp
c00115c4:	e8 79 f9 ff ff       	call   c0010f42 <VgaText::updateCursor()>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00115d0:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00115d3:	0f b7 db             	movzx  ebx,bx
c00115d6:	01 db                	add    ebx,ebx
c00115d8:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00115db:	e9 8f 00 00 00       	jmp    c001166f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115e0:	83 f8 08             	cmp    eax,0x8
c00115e3:	75 34                	jne    c0011619 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00115e5:	51                   	push   ecx
c00115e6:	51                   	push   ecx
c00115e7:	6a 01                	push   0x1
c00115e9:	55                   	push   ebp
c00115ea:	e8 bf fc ff ff       	call   c00112ae <VgaText::decrementCursor(bool)>
c00115ef:	5b                   	pop    ebx
c00115f0:	58                   	pop    eax
c00115f1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00115f4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00115f7:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00115fa:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00115fd:	6a 20                	push   0x20
c00115ff:	55                   	push   ebp
c0011600:	e8 d5 fa ff ff       	call   c00110da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011605:	83 c4 20             	add    esp,0x20
c0011608:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001160c:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001160f:	0f b7 db             	movzx  ebx,bx
c0011612:	01 db                	add    ebx,ebx
c0011614:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011617:	eb 56                	jmp    c001166f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011619:	52                   	push   edx
c001161a:	52                   	push   edx
c001161b:	57                   	push   edi
c001161c:	50                   	push   eax
c001161d:	e8 a8 fa ff ff       	call   c00110ca <VgaText::combineCharAndColour(char, unsigned char)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	66 89 03             	mov    WORD PTR [ebx],ax
c0011628:	39 2d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebp
c001162e:	75 1d                	jne    c001164d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0011636:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0011639:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001163d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011641:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011644:	50                   	push   eax
c0011645:	e8 be 82 00 00       	call   c0019908 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001164a:	83 c4 20             	add    esp,0x20
c001164d:	50                   	push   eax
c001164e:	83 c3 02             	add    ebx,0x2
c0011651:	50                   	push   eax
c0011652:	6a 00                	push   0x0
c0011654:	55                   	push   ebp
c0011655:	e8 00 fc ff ff       	call   c001125a <VgaText::incrementCursor(bool)>
c001165a:	83 c4 10             	add    esp,0x10
c001165d:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0011661:	75 0c                	jne    c001166f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011663:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011667:	0f b7 db             	movzx  ebx,bx
c001166a:	01 db                	add    ebx,ebx
c001166c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001166f:	46                   	inc    esi
c0011670:	e9 06 ff ff ff       	jmp    c001157b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0011675:	83 ec 0c             	sub    esp,0xc
c0011678:	55                   	push   ebp
c0011679:	e8 c4 f8 ff ff       	call   c0010f42 <VgaText::updateCursor()>
c001167e:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0011685:	83 c4 1c             	add    esp,0x1c
c0011688:	5b                   	pop    ebx
c0011689:	5e                   	pop    esi
c001168a:	5f                   	pop    edi
c001168b:	5d                   	pop    ebp
c001168c:	c3                   	ret    
c001168d:	90                   	nop

c001168e <VgaText::VgaText(char const*)>:
c001168e:	56                   	push   esi
c001168f:	53                   	push   ebx
c0011690:	83 ec 04             	sub    esp,0x4
c0011693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011697:	83 ec 08             	sub    esp,0x8
c001169a:	6a 00                	push   0x0
c001169c:	50                   	push   eax
c001169d:	e8 aa 05 00 00       	call   c0011c4c <UnixFile::UnixFile(int)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	ba 0c 2c 02 c0       	mov    edx,0xc0022c0c
c00116aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ae:	89 10                	mov    DWORD PTR [eax],edx
c00116b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116b4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00116bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116bf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00116c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ca:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00116ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00116d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116da:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00116e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116e5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00116ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116f0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00116f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116fb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011706:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001170d:	83 ec 0c             	sub    esp,0xc
c0011710:	6a 01                	push   0x1
c0011712:	e8 c4 09 00 00       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	89 c2                	mov    edx,eax
c001171c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011720:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011723:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0011729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001172d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011730:	89 c6                	mov    esi,eax
c0011732:	e8 a9 d7 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0011737:	68 05 0c 00 00       	push   0xc05
c001173c:	56                   	push   esi
c001173d:	50                   	push   eax
c001173e:	53                   	push   ebx
c001173f:	e8 70 10 00 00       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011744:	83 c4 10             	add    esp,0x10
c0011747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001174b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001174e:	83 ec 04             	sub    esp,0x4
c0011751:	68 a0 0f 00 00       	push   0xfa0
c0011756:	6a 00                	push   0x0
c0011758:	50                   	push   eax
c0011759:	e8 92 ed fe ff       	call   c00004f0 <memset>
c001175e:	83 c4 10             	add    esp,0x10
c0011761:	83 ec 04             	sub    esp,0x4
c0011764:	6a 00                	push   0x0
c0011766:	6a 07                	push   0x7
c0011768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001176c:	e8 7b f8 ff ff       	call   c0010fec <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011771:	83 c4 10             	add    esp,0x10
c0011774:	83 ec 04             	sub    esp,0x4
c0011777:	6a 00                	push   0x0
c0011779:	6a 00                	push   0x0
c001177b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001177f:	e8 f6 f9 ff ff       	call   c001117a <VgaText::setCursor(int, int)>
c0011784:	83 c4 10             	add    esp,0x10
c0011787:	83 ec 0c             	sub    esp,0xc
c001178a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001178e:	e8 49 fa ff ff       	call   c00111dc <VgaText::clearScreen()>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001179a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001179e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a2:	05 82 00 00 00       	add    eax,0x82
c00117a7:	83 ec 04             	sub    esp,0x4
c00117aa:	68 80 00 00 00       	push   0x80
c00117af:	6a 00                	push   0x0
c00117b1:	50                   	push   eax
c00117b2:	e8 39 ed fe ff       	call   c00004f0 <memset>
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117be:	05 02 01 00 00       	add    eax,0x102
c00117c3:	83 ec 04             	sub    esp,0x4
c00117c6:	68 80 00 00 00       	push   0x80
c00117cb:	6a 00                	push   0x0
c00117cd:	50                   	push   eax
c00117ce:	e8 1d ed fe ff       	call   c00004f0 <memset>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	90                   	nop
c00117d7:	83 c4 04             	add    esp,0x4
c00117da:	5b                   	pop    ebx
c00117db:	5e                   	pop    esi
c00117dc:	c3                   	ret    
c00117dd:	90                   	nop

c00117de <VgaText::receiveKey(unsigned char)>:
c00117de:	55                   	push   ebp
c00117df:	57                   	push   edi
c00117e0:	56                   	push   esi
c00117e1:	53                   	push   ebx
c00117e2:	83 ec 2c             	sub    esp,0x2c
c00117e5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00117e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00117ed:	89 fd                	mov    ebp,edi
c00117ef:	81 e5 ff 00 00 00    	and    ebp,0xff
c00117f5:	0f 84 48 01 00 00    	je     c0011943 <VgaText::receiveKey(unsigned char)+0x165>
c00117fb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0011801:	83 fd 08             	cmp    ebp,0x8
c0011804:	75 6a                	jne    c0011870 <VgaText::receiveKey(unsigned char)+0x92>
c0011806:	83 ec 0c             	sub    esp,0xc
c0011809:	56                   	push   esi
c001180a:	e8 71 ed fe ff       	call   c0000580 <strlen>
c001180f:	83 c4 10             	add    esp,0x10
c0011812:	85 c0                	test   eax,eax
c0011814:	0f 84 ef 00 00 00    	je     c0011909 <VgaText::receiveKey(unsigned char)+0x12b>
c001181a:	50                   	push   eax
c001181b:	50                   	push   eax
c001181c:	6a 08                	push   0x8
c001181e:	53                   	push   ebx
c001181f:	e8 7c fb ff ff       	call   c00113a0 <VgaText::putchar(char)>
c0011824:	89 34 24             	mov    DWORD PTR [esp],esi
c0011827:	e8 54 ed fe ff       	call   c0000580 <strlen>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0011837:	83 fa 1f             	cmp    edx,0x1f
c001183a:	89 d0                	mov    eax,edx
c001183c:	7f 1c                	jg     c001185a <VgaText::receiveKey(unsigned char)+0x7c>
c001183e:	83 e8 08             	sub    eax,0x8
c0011841:	3c 02                	cmp    al,0x2
c0011843:	76 15                	jbe    c001185a <VgaText::receiveKey(unsigned char)+0x7c>
c0011845:	83 fa 0d             	cmp    edx,0xd
c0011848:	74 10                	je     c001185a <VgaText::receiveKey(unsigned char)+0x7c>
c001184a:	57                   	push   edi
c001184b:	57                   	push   edi
c001184c:	68 f7 2b 02 c0       	push   0xc0022bf7
c0011851:	53                   	push   ebx
c0011852:	e8 77 fc ff ff       	call   c00114ce <VgaText::puts(char const*)>
c0011857:	83 c4 10             	add    esp,0x10
c001185a:	83 ec 0c             	sub    esp,0xc
c001185d:	56                   	push   esi
c001185e:	e8 1d ed fe ff       	call   c0000580 <strlen>
c0011863:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001186b:	e9 96 00 00 00       	jmp    c0011906 <VgaText::receiveKey(unsigned char)+0x128>
c0011870:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	50                   	push   eax
c001187a:	e8 01 ed fe ff       	call   c0000580 <strlen>
c001187f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011882:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011886:	e8 f5 ec fe ff       	call   c0000580 <strlen>
c001188b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001188f:	83 c4 10             	add    esp,0x10
c0011892:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011896:	3d 80 00 00 00       	cmp    eax,0x80
c001189b:	0f 87 a2 00 00 00    	ja     c0011943 <VgaText::receiveKey(unsigned char)+0x165>
c00118a1:	8d 47 ff             	lea    eax,[edi-0x1]
c00118a4:	3c 1e                	cmp    al,0x1e
c00118a6:	77 35                	ja     c00118dd <VgaText::receiveKey(unsigned char)+0xff>
c00118a8:	8d 47 f7             	lea    eax,[edi-0x9]
c00118ab:	3c 01                	cmp    al,0x1
c00118ad:	76 2e                	jbe    c00118dd <VgaText::receiveKey(unsigned char)+0xff>
c00118af:	83 fd 0d             	cmp    ebp,0xd
c00118b2:	74 29                	je     c00118dd <VgaText::receiveKey(unsigned char)+0xff>
c00118b4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00118b7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00118ba:	68 fd 2b 02 c0       	push   0xc0022bfd
c00118bf:	53                   	push   ebx
c00118c0:	e8 7b fc ff ff       	call   c0011540 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00118c5:	8d 47 40             	lea    eax,[edi+0x40]
c00118c8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00118cb:	0f b6 c0             	movzx  eax,al
c00118ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00118d1:	50                   	push   eax
c00118d2:	53                   	push   ebx
c00118d3:	e8 f8 f9 ff ff       	call   c00112d0 <VgaText::putchar(char, VgaColour, VgaColour)>
c00118d8:	83 c4 20             	add    esp,0x20
c00118db:	eb 11                	jmp    c00118ee <VgaText::receiveKey(unsigned char)+0x110>
c00118dd:	51                   	push   ecx
c00118de:	89 f8                	mov    eax,edi
c00118e0:	51                   	push   ecx
c00118e1:	0f be c0             	movsx  eax,al
c00118e4:	50                   	push   eax
c00118e5:	53                   	push   ebx
c00118e6:	e8 b5 fa ff ff       	call   c00113a0 <VgaText::putchar(char)>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00118f3:	89 f8                	mov    eax,edi
c00118f5:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00118f9:	52                   	push   edx
c00118fa:	52                   	push   edx
c00118fb:	8d 44 24 26          	lea    eax,[esp+0x26]
c00118ff:	50                   	push   eax
c0011900:	56                   	push   esi
c0011901:	e8 6a ef fe ff       	call   c0000870 <strcat>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0011910:	75 0f                	jne    c0011921 <VgaText::receiveKey(unsigned char)+0x143>
c0011912:	83 fd 1c             	cmp    ebp,0x1c
c0011915:	77 2c                	ja     c0011943 <VgaText::receiveKey(unsigned char)+0x165>
c0011917:	b8 08 04 00 10       	mov    eax,0x10000408
c001191c:	0f a3 e8             	bt     eax,ebp
c001191f:	73 22                	jae    c0011943 <VgaText::receiveKey(unsigned char)+0x165>
c0011921:	50                   	push   eax
c0011922:	81 c3 02 01 00 00    	add    ebx,0x102
c0011928:	50                   	push   eax
c0011929:	56                   	push   esi
c001192a:	53                   	push   ebx
c001192b:	e8 40 ef fe ff       	call   c0000870 <strcat>
c0011930:	83 c4 0c             	add    esp,0xc
c0011933:	68 80 00 00 00       	push   0x80
c0011938:	6a 00                	push   0x0
c001193a:	56                   	push   esi
c001193b:	e8 b0 eb fe ff       	call   c00004f0 <memset>
c0011940:	83 c4 10             	add    esp,0x10
c0011943:	83 c4 2c             	add    esp,0x2c
c0011946:	5b                   	pop    ebx
c0011947:	5e                   	pop    esi
c0011948:	5f                   	pop    edi
c0011949:	5d                   	pop    ebp
c001194a:	c3                   	ret    
c001194b:	90                   	nop

c001194c <VgaText::doUpdate()>:
c001194c:	c3                   	ret    
c001194d:	66 90                	xchg   ax,ax
c001194f:	90                   	nop

c0011950 <TSS::TSS()>:
c0011950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011954:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001195b:	90                   	nop
c001195c:	c3                   	ret    
c001195d:	90                   	nop
c001195e:	66 90                	xchg   ax,ax

c0011960 <TSS::setESP(unsigned long)>:
c0011960:	55                   	push   ebp
c0011961:	89 e5                	mov    ebp,esp
c0011963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011969:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001196c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001196f:	90                   	nop
c0011970:	5d                   	pop    ebp
c0011971:	c3                   	ret    
c0011972:	66 90                	xchg   ax,ax

c0011974 <TSS::flush()>:
c0011974:	55                   	push   ebp
c0011975:	89 e5                	mov    ebp,esp
c0011977:	83 ec 10             	sub    esp,0x10
c001197a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197d:	8b 00                	mov    eax,DWORD PTR [eax]
c001197f:	83 c8 03             	or     eax,0x3
c0011982:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011986:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001198a:	66 89 d0             	mov    ax,dx
c001198d:	0f 00 d8             	ltr    ax
c0011990:	90                   	nop
c0011991:	c9                   	leave  
c0011992:	c3                   	ret    
c0011993:	90                   	nop

c0011994 <TSS::setup(unsigned long, unsigned long)>:
c0011994:	55                   	push   ebp
c0011995:	89 e5                	mov    ebp,esp
c0011997:	83 ec 18             	sub    esp,0x18
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	6a 68                	push   0x68
c001199f:	e8 fc cf ff ff       	call   c000e9a0 <malloc>
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	89 c2                	mov    edx,eax
c00119a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119b5:	83 ec 08             	sub    esp,0x8
c00119b8:	50                   	push   eax
c00119b9:	68 20 2c 02 c0       	push   0xc0022c20
c00119be:	e8 8b 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119cc:	83 ec 04             	sub    esp,0x4
c00119cf:	6a 68                	push   0x68
c00119d1:	6a 00                	push   0x0
c00119d3:	50                   	push   eax
c00119d4:	e8 17 eb fe ff       	call   c00004f0 <memset>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119e2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00119e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ee:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119fa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00119fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a06:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a12:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a1e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a2a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a36:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a42:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011a48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a4e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011a51:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a5a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011a5d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a66:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011a6d:	83 ec 0c             	sub    esp,0xc
c0011a70:	68 37 2c 02 c0       	push   0xc0022c37
c0011a75:	e8 d4 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a7a:	83 c4 10             	add    esp,0x10
c0011a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a83:	0f 20 da             	mov    edx,cr3
c0011a86:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011a89:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011a8c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a8f:	83 ec 0c             	sub    esp,0xc
c0011a92:	68 3a 2c 02 c0       	push   0xc0022c3a
c0011a97:	e8 b2 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a9c:	83 c4 10             	add    esp,0x10
c0011a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011aa5:	83 ec 08             	sub    esp,0x8
c0011aa8:	50                   	push   eax
c0011aa9:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011aac:	50                   	push   eax
c0011aad:	e8 40 c6 ff ff       	call   c000e0f2 <GDTEntry::setBase(unsigned int)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	83 ec 08             	sub    esp,0x8
c0011ab8:	6a 68                	push   0x68
c0011aba:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011abd:	50                   	push   eax
c0011abe:	e8 4b c6 ff ff       	call   c000e10e <GDTEntry::setLimit(unsigned int)>
c0011ac3:	83 c4 10             	add    esp,0x10
c0011ac6:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011aca:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011acd:	83 e0 0f             	and    eax,0xf
c0011ad0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011ad3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011ad6:	83 c8 40             	or     eax,0x40
c0011ad9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011adc:	83 ec 0c             	sub    esp,0xc
c0011adf:	68 3d 2c 02 c0       	push   0xc0022c3d
c0011ae4:	e8 65 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011ae9:	83 c4 10             	add    esp,0x10
c0011aec:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011af1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af7:	83 ec 08             	sub    esp,0x8
c0011afa:	50                   	push   eax
c0011afb:	68 40 2c 02 c0       	push   0xc0022c40
c0011b00:	e8 49 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011b05:	83 c4 10             	add    esp,0x10
c0011b08:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011b0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b13:	05 64 01 00 00       	add    eax,0x164
c0011b18:	83 ec 04             	sub    esp,0x4
c0011b1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b1e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011b21:	50                   	push   eax
c0011b22:	e8 1b c6 ff ff       	call   c000e142 <GDT::addEntry(GDTEntry)>
c0011b27:	83 c4 10             	add    esp,0x10
c0011b2a:	89 c2                	mov    edx,eax
c0011b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b2f:	89 10                	mov    DWORD PTR [eax],edx
c0011b31:	83 ec 0c             	sub    esp,0xc
c0011b34:	68 55 2c 02 c0       	push   0xc0022c55
c0011b39:	e8 10 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011b46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b4c:	05 64 01 00 00       	add    eax,0x164
c0011b51:	83 ec 0c             	sub    esp,0xc
c0011b54:	50                   	push   eax
c0011b55:	e8 12 c6 ff ff       	call   c000e16c <GDT::flush()>
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	83 ec 0c             	sub    esp,0xc
c0011b60:	68 58 2c 02 c0       	push   0xc0022c58
c0011b65:	e8 e4 53 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011b6a:	83 c4 10             	add    esp,0x10
c0011b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b72:	c9                   	leave  
c0011b73:	c3                   	ret    

c0011b74 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b7f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b84:	75 08                	jne    c0011b8e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011b86:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b8c:	eb 38                	jmp    c0011bc6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011b8e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b93:	75 17                	jne    c0011bac <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011b95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b9d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ba3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ba5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ba9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011bac:	89 c1                	mov    ecx,eax
c0011bae:	83 e1 fd             	and    ecx,0xfffffffd
c0011bb1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011bb7:	74 cd                	je     c0011b86 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011bb9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011bbe:	83 e0 ef             	and    eax,0xffffffef
c0011bc1:	83 f8 08             	cmp    eax,0x8
c0011bc4:	76 c0                	jbe    c0011b86 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011bc6:	31 c0                	xor    eax,eax
c0011bc8:	c3                   	ret    
c0011bc9:	90                   	nop

c0011bca <ReservedFilename::isAtty()>:
c0011bca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011bd1:	31 c0                	xor    eax,eax
c0011bd3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011bd9:	74 09                	je     c0011be4 <ReservedFilename::isAtty()+0x1a>
c0011bdb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011be1:	0f 94 c0             	sete   al
c0011be4:	c3                   	ret    
c0011be5:	90                   	nop

c0011be6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011bee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bf5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011bfa:	75 08                	jne    c0011c04 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011bfc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011c02:	eb 3d                	jmp    c0011c41 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011c04:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c09:	75 17                	jne    c0011c22 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011c0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c13:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c19:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c1f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011c22:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c27:	75 04                	jne    c0011c2d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011c29:	89 0a                	mov    DWORD PTR [edx],ecx
c0011c2b:	eb 14                	jmp    c0011c41 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011c2d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011c32:	74 c8                	je     c0011bfc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011c34:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011c39:	83 e0 ef             	and    eax,0xffffffef
c0011c3c:	83 f8 08             	cmp    eax,0x8
c0011c3f:	76 bb                	jbe    c0011bfc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011c41:	31 c0                	xor    eax,eax
c0011c43:	c3                   	ret    

c0011c44 <UnixFile::getFileDescriptor()>:
c0011c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c4b:	c3                   	ret    

c0011c4c <UnixFile::UnixFile(int)>:
c0011c4c:	53                   	push   ebx
c0011c4d:	83 ec 28             	sub    esp,0x28
c0011c50:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c0011c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c59:	89 10                	mov    DWORD PTR [eax],edx
c0011c5b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011c63:	0f 8f 90 01 00 00    	jg     c0011df9 <UnixFile::UnixFile(int)+0x1ad>
c0011c69:	a1 40 4f 02 c0       	mov    eax,ds:0xc0024f40
c0011c6e:	8d 50 01             	lea    edx,[eax+0x1]
c0011c71:	89 15 40 4f 02 c0    	mov    DWORD PTR ds:0xc0024f40,edx
c0011c77:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011c7b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c7e:	83 ec 08             	sub    esp,0x8
c0011c81:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c85:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011c8a:	e8 6f eb 00 00       	call   c00207fe <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011c8f:	83 c4 10             	add    esp,0x10
c0011c92:	a0 b4 ce 02 c0       	mov    al,ds:0xc002ceb4
c0011c97:	83 f0 01             	xor    eax,0x1
c0011c9a:	0f b6 c0             	movzx  eax,al
c0011c9d:	85 c0                	test   eax,eax
c0011c9f:	0f 84 55 01 00 00    	je     c0011dfa <UnixFile::UnixFile(int)+0x1ae>
c0011ca5:	c6 05 b4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ceb4,0x1
c0011cac:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011cbb:	e8 e0 cc ff ff       	call   c000e9a0 <malloc>
c0011cc0:	83 c4 10             	add    esp,0x10
c0011cc3:	89 c3                	mov    ebx,eax
c0011cc5:	83 ec 08             	sub    esp,0x8
c0011cc8:	68 03 ff ff 0f       	push   0xfffff03
c0011ccd:	53                   	push   ebx
c0011cce:	e8 2d 01 00 00       	call   c0011e00 <ReservedFilename::ReservedFilename(int)>
c0011cd3:	83 c4 10             	add    esp,0x10
c0011cd6:	89 1d ac ce 02 c0    	mov    DWORD PTR ds:0xc002ceac,ebx
c0011cdc:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011ce4:	83 ec 0c             	sub    esp,0xc
c0011ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ceb:	e8 b0 cc ff ff       	call   c000e9a0 <malloc>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	89 c3                	mov    ebx,eax
c0011cf5:	83 ec 08             	sub    esp,0x8
c0011cf8:	68 01 ff ff 0f       	push   0xfffff01
c0011cfd:	53                   	push   ebx
c0011cfe:	e8 fd 00 00 00       	call   c0011e00 <ReservedFilename::ReservedFilename(int)>
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	89 1d b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,ebx
c0011d0c:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011d14:	83 ec 0c             	sub    esp,0xc
c0011d17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d1b:	e8 80 cc ff ff       	call   c000e9a0 <malloc>
c0011d20:	83 c4 10             	add    esp,0x10
c0011d23:	89 c3                	mov    ebx,eax
c0011d25:	83 ec 08             	sub    esp,0x8
c0011d28:	68 00 ff ff 0f       	push   0xfffff00
c0011d2d:	53                   	push   ebx
c0011d2e:	e8 cd 00 00 00       	call   c0011e00 <ReservedFilename::ReservedFilename(int)>
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	89 1d a4 ce 02 c0    	mov    DWORD PTR ds:0xc002cea4,ebx
c0011d3c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011d44:	83 ec 0c             	sub    esp,0xc
c0011d47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d4b:	e8 50 cc ff ff       	call   c000e9a0 <malloc>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	89 c3                	mov    ebx,eax
c0011d55:	83 ec 08             	sub    esp,0x8
c0011d58:	68 02 ff ff 0f       	push   0xfffff02
c0011d5d:	53                   	push   ebx
c0011d5e:	e8 9d 00 00 00       	call   c0011e00 <ReservedFilename::ReservedFilename(int)>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	89 1d a8 ce 02 c0    	mov    DWORD PTR ds:0xc002cea8,ebx
c0011d6c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d74:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011d79:	7f 7f                	jg     c0011dfa <UnixFile::UnixFile(int)+0x1ae>
c0011d7b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011d83:	83 ec 0c             	sub    esp,0xc
c0011d86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d8a:	e8 11 cc ff ff       	call   c000e9a0 <malloc>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	89 c3                	mov    ebx,eax
c0011d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d98:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	50                   	push   eax
c0011da1:	53                   	push   ebx
c0011da2:	e8 59 00 00 00       	call   c0011e00 <ReservedFilename::ReservedFilename(int)>
c0011da7:	83 c4 10             	add    esp,0x10
c0011daa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dae:	89 1c 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],ebx
c0011db5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011dbd:	83 ec 0c             	sub    esp,0xc
c0011dc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dc4:	e8 d7 cb ff ff       	call   c000e9a0 <malloc>
c0011dc9:	83 c4 10             	add    esp,0x10
c0011dcc:	89 c3                	mov    ebx,eax
c0011dce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dd2:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011dd7:	83 ec 08             	sub    esp,0x8
c0011dda:	50                   	push   eax
c0011ddb:	53                   	push   ebx
c0011ddc:	e8 1f 00 00 00       	call   c0011e00 <ReservedFilename::ReservedFilename(int)>
c0011de1:	83 c4 10             	add    esp,0x10
c0011de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011de8:	89 1c 85 40 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31c0],ebx
c0011def:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011df4:	e9 7b ff ff ff       	jmp    c0011d74 <UnixFile::UnixFile(int)+0x128>
c0011df9:	90                   	nop
c0011dfa:	83 c4 28             	add    esp,0x28
c0011dfd:	5b                   	pop    ebx
c0011dfe:	c3                   	ret    
c0011dff:	90                   	nop

c0011e00 <ReservedFilename::ReservedFilename(int)>:
c0011e00:	83 ec 0c             	sub    esp,0xc
c0011e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e07:	83 ec 08             	sub    esp,0x8
c0011e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e0e:	50                   	push   eax
c0011e0f:	e8 38 fe ff ff       	call   c0011c4c <UnixFile::UnixFile(int)>
c0011e14:	83 c4 10             	add    esp,0x10
c0011e17:	ba e8 2c 02 c0       	mov    edx,0xc0022ce8
c0011e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e20:	89 10                	mov    DWORD PTR [eax],edx
c0011e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011e2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011e2d:	90                   	nop
c0011e2e:	83 c4 0c             	add    esp,0xc
c0011e31:	c3                   	ret    

c0011e32 <UnixFile::~UnixFile()>:
c0011e32:	83 ec 1c             	sub    esp,0x1c
c0011e35:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c0011e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e3e:	89 10                	mov    DWORD PTR [eax],edx
c0011e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e47:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011e4c:	7f 76                	jg     c0011ec4 <UnixFile::~UnixFile()+0x92>
c0011e4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e56:	83 ec 0c             	sub    esp,0xc
c0011e59:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e5e:	e8 6f ea 00 00       	call   c00208d2 <LinkedList<UnixFile>::getFirstElement()>
c0011e63:	83 c4 10             	add    esp,0x10
c0011e66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e6a:	83 ec 0c             	sub    esp,0xc
c0011e6d:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e72:	e8 63 ea 00 00       	call   c00208da <LinkedList<UnixFile>::removeFirst()>
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e7e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011e82:	74 43                	je     c0011ec7 <UnixFile::~UnixFile()+0x95>
c0011e84:	83 ec 08             	sub    esp,0x8
c0011e87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e8b:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e90:	e8 69 e9 00 00       	call   c00207fe <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011e95:	83 c4 10             	add    esp,0x10
c0011e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e9c:	8d 50 01             	lea    edx,[eax+0x1]
c0011e9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ea3:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011ea8:	0f 94 c0             	sete   al
c0011eab:	0f b6 c0             	movzx  eax,al
c0011eae:	85 c0                	test   eax,eax
c0011eb0:	74 a4                	je     c0011e56 <UnixFile::~UnixFile()+0x24>
c0011eb2:	83 ec 0c             	sub    esp,0xc
c0011eb5:	68 5c 2c 02 c0       	push   0xc0022c5c
c0011eba:	e8 27 ce ff ff       	call   c000ece6 <KePanic(char const*)>
c0011ebf:	83 c4 10             	add    esp,0x10
c0011ec2:	eb 92                	jmp    c0011e56 <UnixFile::~UnixFile()+0x24>
c0011ec4:	90                   	nop
c0011ec5:	eb 01                	jmp    c0011ec8 <UnixFile::~UnixFile()+0x96>
c0011ec7:	90                   	nop
c0011ec8:	90                   	nop
c0011ec9:	83 c4 1c             	add    esp,0x1c
c0011ecc:	c3                   	ret    
c0011ecd:	90                   	nop

c0011ece <UnixFile::~UnixFile()>:
c0011ece:	83 ec 0c             	sub    esp,0xc
c0011ed1:	83 ec 0c             	sub    esp,0xc
c0011ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ed8:	e8 55 ff ff ff       	call   c0011e32 <UnixFile::~UnixFile()>
c0011edd:	83 c4 10             	add    esp,0x10
c0011ee0:	83 ec 08             	sub    esp,0x8
c0011ee3:	6a 0c                	push   0xc
c0011ee5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ee9:	e8 bd a7 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	83 c4 0c             	add    esp,0xc
c0011ef4:	c3                   	ret    
c0011ef5:	90                   	nop

c0011ef6 <ReservedFilename::~ReservedFilename()>:
c0011ef6:	83 ec 0c             	sub    esp,0xc
c0011ef9:	ba e8 2c 02 c0       	mov    edx,0xc0022ce8
c0011efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f02:	89 10                	mov    DWORD PTR [eax],edx
c0011f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	50                   	push   eax
c0011f0c:	e8 21 ff ff ff       	call   c0011e32 <UnixFile::~UnixFile()>
c0011f11:	83 c4 10             	add    esp,0x10
c0011f14:	90                   	nop
c0011f15:	83 c4 0c             	add    esp,0xc
c0011f18:	c3                   	ret    
c0011f19:	90                   	nop

c0011f1a <ReservedFilename::~ReservedFilename()>:
c0011f1a:	83 ec 0c             	sub    esp,0xc
c0011f1d:	83 ec 0c             	sub    esp,0xc
c0011f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f24:	e8 cd ff ff ff       	call   c0011ef6 <ReservedFilename::~ReservedFilename()>
c0011f29:	83 c4 10             	add    esp,0x10
c0011f2c:	83 ec 08             	sub    esp,0x8
c0011f2f:	6a 0c                	push   0xc
c0011f31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f35:	e8 71 a7 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0011f3a:	83 c4 10             	add    esp,0x10
c0011f3d:	83 c4 0c             	add    esp,0xc
c0011f40:	c3                   	ret    

c0011f41 <KeGetFileFromDescriptor(int)>:
c0011f41:	56                   	push   esi
c0011f42:	53                   	push   ebx
c0011f43:	83 ec 0c             	sub    esp,0xc
c0011f46:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011f4a:	81 e6 ff ff ff 0f    	and    esi,0xfffffff
c0011f50:	56                   	push   esi
c0011f51:	68 7c 2c 02 c0       	push   0xc0022c7c
c0011f56:	e8 f3 4f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	81 fe ff fe ff 0f    	cmp    esi,0xffffeff
c0011f64:	7f 54                	jg     c0011fba <KeGetFileFromDescriptor(int)+0x79>
c0011f66:	83 ec 0c             	sub    esp,0xc
c0011f69:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f6e:	e8 5f e9 00 00       	call   c00208d2 <LinkedList<UnixFile>::getFirstElement()>
c0011f73:	89 c3                	mov    ebx,eax
c0011f75:	58                   	pop    eax
c0011f76:	5a                   	pop    edx
c0011f77:	53                   	push   ebx
c0011f78:	68 9e 2c 02 c0       	push   0xc0022c9e
c0011f7d:	e8 cc 4f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011f82:	8d 43 ff             	lea    eax,[ebx-0x1]
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	83 f8 fd             	cmp    eax,0xfffffffd
c0011f8b:	76 07                	jbe    c0011f94 <KeGetFileFromDescriptor(int)+0x53>
c0011f8d:	31 db                	xor    ebx,ebx
c0011f8f:	e9 88 00 00 00       	jmp    c001201c <KeGetFileFromDescriptor(int)+0xdb>
c0011f94:	50                   	push   eax
c0011f95:	50                   	push   eax
c0011f96:	53                   	push   ebx
c0011f97:	68 b2 2c 02 c0       	push   0xc0022cb2
c0011f9c:	e8 ad 4f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	39 73 04             	cmp    DWORD PTR [ebx+0x4],esi
c0011fa7:	74 73                	je     c001201c <KeGetFileFromDescriptor(int)+0xdb>
c0011fa9:	51                   	push   ecx
c0011faa:	51                   	push   ecx
c0011fab:	53                   	push   ebx
c0011fac:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011fb1:	e8 c6 e9 00 00       	call   c002097c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011fb6:	89 c3                	mov    ebx,eax
c0011fb8:	eb c8                	jmp    c0011f82 <KeGetFileFromDescriptor(int)+0x41>
c0011fba:	81 fe 03 ff ff 0f    	cmp    esi,0xfffff03
c0011fc0:	8b 1d ac ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ceac
c0011fc6:	74 54                	je     c001201c <KeGetFileFromDescriptor(int)+0xdb>
c0011fc8:	81 fe 01 ff ff 0f    	cmp    esi,0xfffff01
c0011fce:	8b 1d b0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ceb0
c0011fd4:	74 46                	je     c001201c <KeGetFileFromDescriptor(int)+0xdb>
c0011fd6:	81 fe 02 ff ff 0f    	cmp    esi,0xfffff02
c0011fdc:	8b 1d a8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cea8
c0011fe2:	74 38                	je     c001201c <KeGetFileFromDescriptor(int)+0xdb>
c0011fe4:	81 fe 00 ff ff 0f    	cmp    esi,0xfffff00
c0011fea:	8b 1d a4 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cea4
c0011ff0:	74 2a                	je     c001201c <KeGetFileFromDescriptor(int)+0xdb>
c0011ff2:	8d 86 f0 00 00 f0    	lea    eax,[esi-0xfffff10]
c0011ff8:	83 f8 08             	cmp    eax,0x8
c0011ffb:	77 09                	ja     c0012006 <KeGetFileFromDescriptor(int)+0xc5>
c0011ffd:	8b 1c 85 80 ce 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd3180]
c0012004:	eb 16                	jmp    c001201c <KeGetFileFromDescriptor(int)+0xdb>
c0012006:	81 ee 20 ff ff 0f    	sub    esi,0xfffff20
c001200c:	83 fe 08             	cmp    esi,0x8
c001200f:	0f 87 78 ff ff ff    	ja     c0011f8d <KeGetFileFromDescriptor(int)+0x4c>
c0012015:	8b 1c b5 40 ce 02 c0 	mov    ebx,DWORD PTR [esi*4-0x3ffd31c0]
c001201c:	5a                   	pop    edx
c001201d:	89 d8                	mov    eax,ebx
c001201f:	5b                   	pop    ebx
c0012020:	5e                   	pop    esi
c0012021:	c3                   	ret    

c0012022 <__static_initialization_and_destruction_0(int, int)>:
c0012022:	83 ec 0c             	sub    esp,0xc
c0012025:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001202a:	75 34                	jne    c0012060 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001202c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0012034:	75 2a                	jne    c0012060 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012036:	83 ec 0c             	sub    esp,0xc
c0012039:	68 b8 ce 02 c0       	push   0xc002ceb8
c001203e:	e8 79 e7 00 00       	call   c00207bc <LinkedList<UnixFile>::LinkedList()>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	83 ec 04             	sub    esp,0x4
c0012049:	68 a4 47 02 c0       	push   0xc00247a4
c001204e:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012053:	68 ba 07 02 c0       	push   0xc00207ba
c0012058:	e8 fe a5 ff ff       	call   c000c65b <__cxa_atexit>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	90                   	nop
c0012061:	83 c4 0c             	add    esp,0xc
c0012064:	c3                   	ret    

c0012065 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0012065:	83 ec 0c             	sub    esp,0xc
c0012068:	83 ec 08             	sub    esp,0x8
c001206b:	68 ff ff 00 00       	push   0xffff
c0012070:	6a 01                	push   0x1
c0012072:	e8 ab ff ff ff       	call   c0012022 <__static_initialization_and_destruction_0(int, int)>
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	83 c4 0c             	add    esp,0xc
c001207d:	c3                   	ret    

c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001207e:	53                   	push   ebx
c001207f:	8b 15 48 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024f48
c0012085:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012089:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001208d:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012093:	89 d8                	mov    eax,ebx
c0012095:	d1 e8                	shr    eax,1
c0012097:	01 d0                	add    eax,edx
c0012099:	80 e3 01             	and    bl,0x1
c001209c:	8a 10                	mov    dl,BYTE PTR [eax]
c001209e:	75 09                	jne    c00120a9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00120a0:	83 e2 f0             	and    edx,0xfffffff0
c00120a3:	09 ca                	or     edx,ecx
c00120a5:	88 10                	mov    BYTE PTR [eax],dl
c00120a7:	5b                   	pop    ebx
c00120a8:	c3                   	ret    
c00120a9:	0f b6 c9             	movzx  ecx,cl
c00120ac:	83 e2 0f             	and    edx,0xf
c00120af:	c1 e1 04             	shl    ecx,0x4
c00120b2:	09 ca                	or     edx,ecx
c00120b4:	88 10                	mov    BYTE PTR [eax],dl
c00120b6:	5b                   	pop    ebx
c00120b7:	c3                   	ret    

c00120b8 <Virt::getPageState(unsigned long)>:
c00120b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120bc:	8b 0d 48 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024f48
c00120c2:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00120c8:	89 d0                	mov    eax,edx
c00120ca:	d1 e8                	shr    eax,1
c00120cc:	80 e2 01             	and    dl,0x1
c00120cf:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00120d2:	74 03                	je     c00120d7 <Virt::getPageState(unsigned long)+0x1f>
c00120d4:	c1 e8 04             	shr    eax,0x4
c00120d7:	83 e0 0f             	and    eax,0xf
c00120da:	c3                   	ret    

c00120db <Virt::allocateKernelVirtualPages(int)>:
c00120db:	55                   	push   ebp
c00120dc:	57                   	push   edi
c00120dd:	56                   	push   esi
c00120de:	31 f6                	xor    esi,esi
c00120e0:	53                   	push   ebx
c00120e1:	31 db                	xor    ebx,ebx
c00120e3:	83 ec 1c             	sub    esp,0x1c
c00120e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00120eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120ef:	8b 2d 44 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024f44
c00120f5:	55                   	push   ebp
c00120f6:	e8 bd ff ff ff       	call   c00120b8 <Virt::getPageState(unsigned long)>
c00120fb:	5a                   	pop    edx
c00120fc:	84 c0                	test   al,al
c00120fe:	75 3d                	jne    c001213d <Virt::allocateKernelVirtualPages(int)+0x62>
c0012100:	85 db                	test   ebx,ebx
c0012102:	0f 44 f5             	cmove  esi,ebp
c0012105:	83 c3 01             	add    ebx,0x1
c0012108:	39 fb                	cmp    ebx,edi
c001210a:	74 5e                	je     c001216a <Virt::allocateKernelVirtualPages(int)+0x8f>
c001210c:	83 c5 01             	add    ebp,0x1
c001210f:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0012115:	76 33                	jbe    c001214a <Virt::allocateKernelVirtualPages(int)+0x6f>
c0012117:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001211c:	c7 05 44 4f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024f44,0xc8000
c0012126:	75 2a                	jne    c0012152 <Virt::allocateKernelVirtualPages(int)+0x77>
c0012128:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001212d:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0012132:	55                   	push   ebp
c0012133:	e8 80 ff ff ff       	call   c00120b8 <Virt::getPageState(unsigned long)>
c0012138:	5a                   	pop    edx
c0012139:	84 c0                	test   al,al
c001213b:	74 c3                	je     c0012100 <Virt::allocateKernelVirtualPages(int)+0x25>
c001213d:	83 c5 01             	add    ebp,0x1
c0012140:	31 db                	xor    ebx,ebx
c0012142:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0012148:	77 cd                	ja     c0012117 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001214a:	89 2d 44 4f 02 c0    	mov    DWORD PTR ds:0xc0024f44,ebp
c0012150:	eb a3                	jmp    c00120f5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012152:	83 ec 0c             	sub    esp,0xc
c0012155:	68 fc 2c 02 c0       	push   0xc0022cfc
c001215a:	e8 87 cb ff ff       	call   c000ece6 <KePanic(char const*)>
c001215f:	8b 2d 44 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024f44
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	eb 8b                	jmp    c00120f5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001216a:	89 35 44 4f 02 c0    	mov    DWORD PTR ds:0xc0024f44,esi
c0012170:	83 fb 01             	cmp    ebx,0x1
c0012173:	74 63                	je     c00121d8 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0012175:	85 ff                	test   edi,edi
c0012177:	74 41                	je     c00121ba <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012179:	89 f0                	mov    eax,esi
c001217b:	31 db                	xor    ebx,ebx
c001217d:	8d 6f ff             	lea    ebp,[edi-0x1]
c0012180:	eb 16                	jmp    c0012198 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0012182:	6a 01                	push   0x1
c0012184:	83 c3 01             	add    ebx,0x1
c0012187:	50                   	push   eax
c0012188:	e8 f1 fe ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001218d:	39 fb                	cmp    ebx,edi
c001218f:	58                   	pop    eax
c0012190:	5a                   	pop    edx
c0012191:	74 27                	je     c00121ba <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012193:	a1 44 4f 02 c0       	mov    eax,ds:0xc0024f44
c0012198:	8d 50 01             	lea    edx,[eax+0x1]
c001219b:	85 db                	test   ebx,ebx
c001219d:	89 15 44 4f 02 c0    	mov    DWORD PTR ds:0xc0024f44,edx
c00121a3:	74 22                	je     c00121c7 <Virt::allocateKernelVirtualPages(int)+0xec>
c00121a5:	39 dd                	cmp    ebp,ebx
c00121a7:	75 d9                	jne    c0012182 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00121a9:	6a 03                	push   0x3
c00121ab:	83 c3 01             	add    ebx,0x1
c00121ae:	50                   	push   eax
c00121af:	e8 ca fe ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121b4:	39 fb                	cmp    ebx,edi
c00121b6:	59                   	pop    ecx
c00121b7:	58                   	pop    eax
c00121b8:	75 d9                	jne    c0012193 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00121ba:	83 c4 1c             	add    esp,0x1c
c00121bd:	89 f0                	mov    eax,esi
c00121bf:	5b                   	pop    ebx
c00121c0:	c1 e0 0c             	shl    eax,0xc
c00121c3:	5e                   	pop    esi
c00121c4:	5f                   	pop    edi
c00121c5:	5d                   	pop    ebp
c00121c6:	c3                   	ret    
c00121c7:	6a 02                	push   0x2
c00121c9:	bb 01 00 00 00       	mov    ebx,0x1
c00121ce:	50                   	push   eax
c00121cf:	e8 aa fe ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121d4:	58                   	pop    eax
c00121d5:	5a                   	pop    edx
c00121d6:	eb bb                	jmp    c0012193 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00121d8:	6a 04                	push   0x4
c00121da:	56                   	push   esi
c00121db:	8d 46 01             	lea    eax,[esi+0x1]
c00121de:	a3 44 4f 02 c0       	mov    ds:0xc0024f44,eax
c00121e3:	e8 96 fe ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121e8:	89 f0                	mov    eax,esi
c00121ea:	59                   	pop    ecx
c00121eb:	c1 e0 0c             	shl    eax,0xc
c00121ee:	5b                   	pop    ebx
c00121ef:	83 c4 1c             	add    esp,0x1c
c00121f2:	5b                   	pop    ebx
c00121f3:	5e                   	pop    esi
c00121f4:	5f                   	pop    edi
c00121f5:	5d                   	pop    ebp
c00121f6:	c3                   	ret    

c00121f7 <Virt::freeSwapfilePage(unsigned long)>:
c00121f7:	53                   	push   ebx
c00121f8:	8b 15 cc ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cecc
c00121fe:	b8 01 00 00 00       	mov    eax,0x1
c0012203:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012207:	d3 e0                	shl    eax,cl
c0012209:	89 cb                	mov    ebx,ecx
c001220b:	c1 eb 05             	shr    ebx,0x5
c001220e:	f7 d0                	not    eax
c0012210:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012213:	21 c1                	and    ecx,eax
c0012215:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012218:	5b                   	pop    ebx
c0012219:	c3                   	ret    

c001221a <Virt::swapIDToSector(unsigned long)>:
c001221a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001221e:	8b 15 4c 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024f4c
c0012224:	8b 0d 54 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024f54
c001222a:	0f af c2             	imul   eax,edx
c001222d:	01 c8                	add    eax,ecx
c001222f:	c3                   	ret    

c0012230 <Virt::allocateSwapfilePage()>:
c0012230:	55                   	push   ebp
c0012231:	31 d2                	xor    edx,edx
c0012233:	57                   	push   edi
c0012234:	56                   	push   esi
c0012235:	53                   	push   ebx
c0012236:	83 ec 0c             	sub    esp,0xc
c0012239:	8b 1d 50 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024f50
c001223f:	8b 0d 4c 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024f4c
c0012245:	89 d8                	mov    eax,ebx
c0012247:	f7 f1                	div    ecx
c0012249:	39 cb                	cmp    ebx,ecx
c001224b:	72 2f                	jb     c001227c <Virt::allocateSwapfilePage()+0x4c>
c001224d:	8b 35 cc ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cecc
c0012253:	8b 16                	mov    edx,DWORD PTR [esi]
c0012255:	f6 c2 01             	test   dl,0x1
c0012258:	74 3e                	je     c0012298 <Virt::allocateSwapfilePage()+0x68>
c001225a:	31 c9                	xor    ecx,ecx
c001225c:	bf 01 00 00 00       	mov    edi,0x1
c0012261:	eb 12                	jmp    c0012275 <Virt::allocateSwapfilePage()+0x45>
c0012263:	89 ca                	mov    edx,ecx
c0012265:	89 fd                	mov    ebp,edi
c0012267:	c1 ea 05             	shr    edx,0x5
c001226a:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001226d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001226f:	d3 e5                	shl    ebp,cl
c0012271:	85 ea                	test   edx,ebp
c0012273:	74 2c                	je     c00122a1 <Virt::allocateSwapfilePage()+0x71>
c0012275:	83 c1 01             	add    ecx,0x1
c0012278:	39 c8                	cmp    eax,ecx
c001227a:	77 e7                	ja     c0012263 <Virt::allocateSwapfilePage()+0x33>
c001227c:	83 ec 0c             	sub    esp,0xc
c001227f:	68 1f 32 02 c0       	push   0xc002321f
c0012284:	e8 5d ca ff ff       	call   c000ece6 <KePanic(char const*)>
c0012289:	83 c4 10             	add    esp,0x10
c001228c:	31 c9                	xor    ecx,ecx
c001228e:	83 c4 0c             	add    esp,0xc
c0012291:	89 c8                	mov    eax,ecx
c0012293:	5b                   	pop    ebx
c0012294:	5e                   	pop    esi
c0012295:	5f                   	pop    edi
c0012296:	5d                   	pop    ebp
c0012297:	c3                   	ret    
c0012298:	89 f3                	mov    ebx,esi
c001229a:	bd 01 00 00 00       	mov    ebp,0x1
c001229f:	31 c9                	xor    ecx,ecx
c00122a1:	09 ea                	or     edx,ebp
c00122a3:	89 c8                	mov    eax,ecx
c00122a5:	89 13                	mov    DWORD PTR [ebx],edx
c00122a7:	83 c4 0c             	add    esp,0xc
c00122aa:	5b                   	pop    ebx
c00122ab:	5e                   	pop    esi
c00122ac:	5f                   	pop    edi
c00122ad:	5d                   	pop    ebp
c00122ae:	c3                   	ret    

c00122af <Virt::virtualMemorySetup()>:
c00122af:	53                   	push   ebx
c00122b0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00122b5:	6a 0f                	push   0xf
c00122b7:	53                   	push   ebx
c00122b8:	83 c3 01             	add    ebx,0x1
c00122bb:	e8 be fd ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122c0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00122c6:	58                   	pop    eax
c00122c7:	5a                   	pop    edx
c00122c8:	75 eb                	jne    c00122b5 <Virt::virtualMemorySetup()+0x6>
c00122ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00122cf:	6a 00                	push   0x0
c00122d1:	53                   	push   ebx
c00122d2:	83 c3 01             	add    ebx,0x1
c00122d5:	e8 a4 fd ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00122e0:	59                   	pop    ecx
c00122e1:	58                   	pop    eax
c00122e2:	75 eb                	jne    c00122cf <Virt::virtualMemorySetup()+0x20>
c00122e4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00122e9:	6a 0f                	push   0xf
c00122eb:	53                   	push   ebx
c00122ec:	83 c3 01             	add    ebx,0x1
c00122ef:	e8 8a fd ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122f4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00122fa:	58                   	pop    eax
c00122fb:	5a                   	pop    edx
c00122fc:	75 eb                	jne    c00122e9 <Virt::virtualMemorySetup()+0x3a>
c00122fe:	5b                   	pop    ebx
c00122ff:	c3                   	ret    

c0012300 <Virt::setupPageSwapping(int)>:
c0012300:	53                   	push   ebx
c0012301:	83 ec 0c             	sub    esp,0xc
c0012304:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c0012309:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001230d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012313:	8b 10                	mov    edx,DWORD PTR [eax]
c0012315:	53                   	push   ebx
c0012316:	68 36 32 02 c0       	push   0xc0023236
c001231b:	50                   	push   eax
c001231c:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001231f:	c1 e3 0b             	shl    ebx,0xb
c0012322:	89 1d 50 4f 02 c0    	mov    DWORD PTR ds:0xc0024f50,ebx
c0012328:	c1 eb 08             	shr    ebx,0x8
c001232b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001232e:	c6 05 58 4f 02 c0 43 	mov    BYTE PTR ds:0xc0024f58,0x43
c0012335:	c7 05 4c 4f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0024f4c,0x8
c001233f:	a3 54 4f 02 c0       	mov    ds:0xc0024f54,eax
c0012344:	e8 57 c6 ff ff       	call   c000e9a0 <malloc>
c0012349:	31 d2                	xor    edx,edx
c001234b:	83 c4 0c             	add    esp,0xc
c001234e:	a3 cc ce 02 c0       	mov    ds:0xc002cecc,eax
c0012353:	89 c1                	mov    ecx,eax
c0012355:	a1 50 4f 02 c0       	mov    eax,ds:0xc0024f50
c001235a:	f7 35 4c 4f 02 c0    	div    DWORD PTR ds:0xc0024f4c
c0012360:	c1 e8 05             	shr    eax,0x5
c0012363:	50                   	push   eax
c0012364:	6a 00                	push   0x0
c0012366:	51                   	push   ecx
c0012367:	e8 84 e1 fe ff       	call   c00004f0 <memset>
c001236c:	83 c4 18             	add    esp,0x18
c001236f:	5b                   	pop    ebx
c0012370:	c3                   	ret    
c0012371:	90                   	nop

c0012372 <VAS::setCPUSpecific(unsigned long)>:
c0012372:	c3                   	ret    
c0012373:	90                   	nop

c0012374 <VAS::VAS(VAS*)>:
c0012374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012378:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001237f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012383:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001238a:	90                   	nop
c001238b:	c3                   	ret    

c001238c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001238c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012390:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012395:	89 c2                	mov    edx,eax
c0012397:	c1 ea 16             	shr    edx,0x16
c001239a:	c1 e8 0a             	shr    eax,0xa
c001239d:	83 f9 01             	cmp    ecx,0x1
c00123a0:	19 c9                	sbb    ecx,ecx
c00123a2:	25 fc 0f 00 00       	and    eax,0xffc
c00123a7:	c1 e2 0c             	shl    edx,0xc
c00123aa:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00123b0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00123b7:	01 d0                	add    eax,edx
c00123b9:	c3                   	ret    

c00123ba <VAS::getPageTableEntry(unsigned long)>:
c00123ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123be:	89 ca                	mov    edx,ecx
c00123c0:	c1 ea 16             	shr    edx,0x16
c00123c3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00123c9:	c1 e9 0a             	shr    ecx,0xa
c00123cc:	c1 e0 0c             	shl    eax,0xc
c00123cf:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00123d5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00123d8:	c3                   	ret    

c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00123d9:	55                   	push   ebp
c00123da:	57                   	push   edi
c00123db:	bf 01 00 00 00       	mov    edi,0x1
c00123e0:	56                   	push   esi
c00123e1:	53                   	push   ebx
c00123e2:	83 ec 1c             	sub    esp,0x1c
c00123e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00123e9:	c1 ee 0c             	shr    esi,0xc
c00123ec:	eb 48                	jmp    c0012436 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00123ee:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00123f3:	83 ec 08             	sub    esp,0x8
c00123f6:	55                   	push   ebp
c00123f7:	50                   	push   eax
c00123f8:	e8 bd ff ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c00123fd:	83 c4 10             	add    esp,0x10
c0012400:	8b 10                	mov    edx,DWORD PTR [eax]
c0012402:	f6 c6 04             	test   dh,0x4
c0012405:	75 70                	jne    c0012477 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012407:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001240d:	83 fb 04             	cmp    ebx,0x4
c0012410:	0f 84 8a 00 00 00    	je     c00124a0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012416:	83 fb 02             	cmp    ebx,0x2
c0012419:	0f 84 9a 00 00 00    	je     c00124b9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001241f:	83 fb 03             	cmp    ebx,0x3
c0012422:	0f 84 be 00 00 00    	je     c00124e6 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012428:	83 fb 01             	cmp    ebx,0x1
c001242b:	0f 84 a2 00 00 00    	je     c00124d3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012431:	83 c6 01             	add    esi,0x1
c0012434:	31 ff                	xor    edi,edi
c0012436:	56                   	push   esi
c0012437:	89 f5                	mov    ebp,esi
c0012439:	e8 7a fc ff ff       	call   c00120b8 <Virt::getPageState(unsigned long)>
c001243e:	c1 e5 0c             	shl    ebp,0xc
c0012441:	5a                   	pop    edx
c0012442:	0f b6 d8             	movzx  ebx,al
c0012445:	85 db                	test   ebx,ebx
c0012447:	75 a5                	jne    c00123ee <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012449:	83 ec 0c             	sub    esp,0xc
c001244c:	68 4d 32 02 c0       	push   0xc002324d
c0012451:	e8 90 c8 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012456:	5a                   	pop    edx
c0012457:	59                   	pop    ecx
c0012458:	55                   	push   ebp
c0012459:	8b 2d d0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002ced0
c001245f:	55                   	push   ebp
c0012460:	e8 55 ff ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	8b 10                	mov    edx,DWORD PTR [eax]
c001246a:	f6 c6 04             	test   dh,0x4
c001246d:	75 08                	jne    c0012477 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001246f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012475:	eb ba                	jmp    c0012431 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001247b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012481:	83 ec 0c             	sub    esp,0xc
c0012484:	52                   	push   edx
c0012485:	e8 ed c9 ff ff       	call   c000ee77 <Phys::freePage(unsigned long)>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	83 fb 04             	cmp    ebx,0x4
c0012490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012494:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001249a:	0f 85 76 ff ff ff    	jne    c0012416 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00124a0:	83 e7 01             	and    edi,0x1
c00124a3:	75 46                	jne    c00124eb <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00124a5:	c7 44 24 30 1c 2d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022d1c
c00124ad:	83 c4 1c             	add    esp,0x1c
c00124b0:	5b                   	pop    ebx
c00124b1:	5e                   	pop    esi
c00124b2:	5f                   	pop    edi
c00124b3:	5d                   	pop    ebp
c00124b4:	e9 2d c8 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c00124b9:	83 e7 01             	and    edi,0x1
c00124bc:	75 15                	jne    c00124d3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00124be:	83 ec 0c             	sub    esp,0xc
c00124c1:	68 69 32 02 c0       	push   0xc0023269
c00124c6:	e8 1b c8 ff ff       	call   c000ece6 <KePanic(char const*)>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	e9 5e ff ff ff       	jmp    c0012431 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00124d3:	83 ec 08             	sub    esp,0x8
c00124d6:	6a 00                	push   0x0
c00124d8:	56                   	push   esi
c00124d9:	e8 a0 fb ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124de:	83 c4 10             	add    esp,0x10
c00124e1:	e9 4b ff ff ff       	jmp    c0012431 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00124e6:	83 e7 01             	and    edi,0x1
c00124e9:	75 16                	jne    c0012501 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00124eb:	83 ec 08             	sub    esp,0x8
c00124ee:	6a 00                	push   0x0
c00124f0:	56                   	push   esi
c00124f1:	e8 88 fb ff ff       	call   c001207e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124f6:	83 c4 10             	add    esp,0x10
c00124f9:	83 c4 1c             	add    esp,0x1c
c00124fc:	5b                   	pop    ebx
c00124fd:	5e                   	pop    esi
c00124fe:	5f                   	pop    edi
c00124ff:	5d                   	pop    ebp
c0012500:	c3                   	ret    
c0012501:	c7 44 24 30 85 32 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023285
c0012509:	83 c4 1c             	add    esp,0x1c
c001250c:	5b                   	pop    ebx
c001250d:	5e                   	pop    esi
c001250e:	5f                   	pop    edi
c001250f:	5d                   	pop    ebp
c0012510:	e9 d1 c7 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c0012515:	90                   	nop

c0012516 <VAS::freeAllocatedPages(unsigned long)>:
c0012516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001251a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001251e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012522:	74 09                	je     c001252d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012528:	e9 ac fe ff ff       	jmp    c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001252d:	c7 44 24 04 40 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022d40
c0012535:	e9 14 4a ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c001253a <VAS::virtualToPhysical(unsigned long)>:
c001253a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001253e:	50                   	push   eax
c001253f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012543:	52                   	push   edx
c0012544:	e8 71 fe ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c0012549:	59                   	pop    ecx
c001254a:	5a                   	pop    edx
c001254b:	8b 00                	mov    eax,DWORD PTR [eax]
c001254d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012552:	c3                   	ret    
c0012553:	90                   	nop

c0012554 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0012554:	55                   	push   ebp
c0012555:	57                   	push   edi
c0012556:	56                   	push   esi
c0012557:	53                   	push   ebx
c0012558:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001255c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012560:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012564:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012568:	85 db                	test   ebx,ebx
c001256a:	7e 24                	jle    c0012590 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001256c:	c1 e3 0c             	shl    ebx,0xc
c001256f:	01 f3                	add    ebx,esi
c0012571:	56                   	push   esi
c0012572:	81 c6 00 10 00 00    	add    esi,0x1000
c0012578:	55                   	push   ebp
c0012579:	e8 3c fe ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c001257e:	5a                   	pop    edx
c001257f:	59                   	pop    ecx
c0012580:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012582:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012586:	21 f9                	and    ecx,edi
c0012588:	09 d1                	or     ecx,edx
c001258a:	39 f3                	cmp    ebx,esi
c001258c:	89 08                	mov    DWORD PTR [eax],ecx
c001258e:	75 e1                	jne    c0012571 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012590:	5b                   	pop    ebx
c0012591:	5e                   	pop    esi
c0012592:	5f                   	pop    edi
c0012593:	5d                   	pop    ebp
c0012594:	c3                   	ret    
c0012595:	90                   	nop

c0012596 <VAS::VAS()>:
c0012596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001259a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00125a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00125ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125b0:	a3 d0 ce 02 c0       	mov    ds:0xc002ced0,eax
c00125b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125b9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00125bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00125c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00125cf:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c00125d4:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00125d9:	29 c2                	sub    edx,eax
c00125db:	89 d0                	mov    eax,edx
c00125dd:	05 ff 0f 00 00       	add    eax,0xfff
c00125e2:	c1 e8 0c             	shr    eax,0xc
c00125e5:	89 c2                	mov    edx,eax
c00125e7:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00125ec:	6a 04                	push   0x4
c00125ee:	6a ff                	push   0xffffffff
c00125f0:	52                   	push   edx
c00125f1:	50                   	push   eax
c00125f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125f6:	e8 59 ff ff ff       	call   c0012554 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00125fb:	83 c4 14             	add    esp,0x14
c00125fe:	90                   	nop
c00125ff:	c3                   	ret    

c0012600 <VAS::setToWriteCombining(unsigned long, int)>:
c0012600:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c0012605:	50                   	push   eax
c0012606:	6a ff                	push   0xffffffff
c0012608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001260c:	52                   	push   edx
c001260d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012611:	51                   	push   ecx
c0012612:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012616:	50                   	push   eax
c0012617:	e8 38 ff ff ff       	call   c0012554 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001261c:	83 c4 14             	add    esp,0x14
c001261f:	c3                   	ret    

c0012620 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012624:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012627:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001262b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001262e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012633:	83 f8 01             	cmp    eax,0x1
c0012636:	19 c0                	sbb    eax,eax
c0012638:	83 ca 03             	or     edx,0x3
c001263b:	83 e0 fc             	and    eax,0xfffffffc
c001263e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012645:	0f 20 d8             	mov    eax,cr3
c0012648:	0f 22 d8             	mov    cr3,eax
c001264b:	c3                   	ret    

c001264c <VAS::~VAS()>:
c001264c:	83 ec 2c             	sub    esp,0x2c
c001264f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012657:	fa                   	cli    
c0012658:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001265d:	83 c0 01             	add    eax,0x1
c0012660:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0012665:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001266a:	8b 00                	mov    eax,DWORD PTR [eax]
c001266c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001266f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012675:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012679:	6a 01                	push   0x1
c001267b:	50                   	push   eax
c001267c:	e8 9f ff ff ff       	call   c0012620 <VAS::mapOtherVASIn(bool, VAS*)>
c0012681:	83 c4 0c             	add    esp,0xc
c0012684:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001268c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012694:	0f 8f d8 00 00 00    	jg     c0012772 <VAS::~VAS()+0x126>
c001269a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001269e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126a5:	c1 e2 02             	shl    edx,0x2
c00126a8:	01 d0                	add    eax,edx
c00126aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00126ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126b4:	83 e0 01             	and    eax,0x1
c00126b7:	0f 84 ab 00 00 00    	je     c0012768 <VAS::~VAS()+0x11c>
c00126bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126c5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00126cd:	7f 74                	jg     c0012743 <VAS::~VAS()+0xf7>
c00126cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126d3:	c1 e0 0a             	shl    eax,0xa
c00126d6:	89 c2                	mov    edx,eax
c00126d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126dc:	01 d0                	add    eax,edx
c00126de:	c1 e0 0c             	shl    eax,0xc
c00126e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00126ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00126ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126ef:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00126f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00126f9:	6a 01                	push   0x1
c00126fb:	50                   	push   eax
c00126fc:	e8 8b fc ff ff       	call   c001238c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012701:	83 c4 0c             	add    esp,0xc
c0012704:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001270c:	8b 00                	mov    eax,DWORD PTR [eax]
c001270e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012716:	25 01 04 00 00       	and    eax,0x401
c001271b:	3d 01 04 00 00       	cmp    eax,0x401
c0012720:	75 1a                	jne    c001273c <VAS::~VAS()+0xf0>
c0012722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012726:	25 00 f0 ff ff       	and    eax,0xfffff000
c001272b:	83 ec 0c             	sub    esp,0xc
c001272e:	50                   	push   eax
c001272f:	e8 43 c7 ff ff       	call   c000ee77 <Phys::freePage(unsigned long)>
c0012734:	83 c4 10             	add    esp,0x10
c0012737:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001273c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0012741:	eb 82                	jmp    c00126c5 <VAS::~VAS()+0x79>
c0012743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012747:	25 00 04 00 00       	and    eax,0x400
c001274c:	74 1a                	je     c0012768 <VAS::~VAS()+0x11c>
c001274e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012752:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	50                   	push   eax
c001275b:	e8 17 c7 ff ff       	call   c000ee77 <Phys::freePage(unsigned long)>
c0012760:	83 c4 10             	add    esp,0x10
c0012763:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012768:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001276d:	e9 1a ff ff ff       	jmp    c001268c <VAS::~VAS()+0x40>
c0012772:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012776:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012779:	83 ec 0c             	sub    esp,0xc
c001277c:	50                   	push   eax
c001277d:	e8 57 fc ff ff       	call   c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012782:	83 c4 10             	add    esp,0x10
c0012785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012789:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001278c:	83 ec 0c             	sub    esp,0xc
c001278f:	50                   	push   eax
c0012790:	e8 e2 c6 ff ff       	call   c000ee77 <Phys::freePage(unsigned long)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001279d:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00127a5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00127aa:	85 c0                	test   eax,eax
c00127ac:	75 01                	jne    c00127af <VAS::~VAS()+0x163>
c00127ae:	fb                   	sti    
c00127af:	90                   	nop
c00127b0:	83 c4 2c             	add    esp,0x2c
c00127b3:	c3                   	ret    

c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00127b4:	55                   	push   ebp
c00127b5:	57                   	push   edi
c00127b6:	56                   	push   esi
c00127b7:	53                   	push   ebx
c00127b8:	83 ec 1c             	sub    esp,0x1c
c00127bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00127bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00127c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00127c7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00127cd:	77 08                	ja     c00127d7 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00127cf:	0f 20 d8             	mov    eax,cr3
c00127d2:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00127d5:	75 43                	jne    c001281a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00127d7:	89 d8                	mov    eax,ebx
c00127d9:	09 f8                	or     eax,edi
c00127db:	a9 ff 0f 00 00       	test   eax,0xfff
c00127e0:	75 53                	jne    c0012835 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00127e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00127e5:	89 de                	mov    esi,ebx
c00127e7:	c1 ee 16             	shr    esi,0x16
c00127ea:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00127f1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00127f5:	74 50                	je     c0012847 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00127f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127fb:	c1 eb 0a             	shr    ebx,0xa
c00127fe:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012804:	c1 e6 0c             	shl    esi,0xc
c0012807:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001280d:	09 c7                	or     edi,eax
c001280f:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0012812:	83 c4 1c             	add    esp,0x1c
c0012815:	5b                   	pop    ebx
c0012816:	5e                   	pop    esi
c0012817:	5f                   	pop    edi
c0012818:	5d                   	pop    ebp
c0012819:	c3                   	ret    
c001281a:	83 ec 0c             	sub    esp,0xc
c001281d:	68 64 2d 02 c0       	push   0xc0022d64
c0012822:	e8 27 47 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012827:	89 d8                	mov    eax,ebx
c0012829:	83 c4 10             	add    esp,0x10
c001282c:	09 f8                	or     eax,edi
c001282e:	a9 ff 0f 00 00       	test   eax,0xfff
c0012833:	74 ad                	je     c00127e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0012835:	83 ec 0c             	sub    esp,0xc
c0012838:	68 cc 2d 02 c0       	push   0xc0022dcc
c001283d:	e8 a4 c4 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	eb 9b                	jmp    c00127e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0012847:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001284b:	e8 90 c6 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0012850:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c0012856:	83 ec 0c             	sub    esp,0xc
c0012859:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001285d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012861:	6a 01                	push   0x1
c0012863:	e8 73 f8 ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c0012868:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001286f:	6a 01                	push   0x1
c0012871:	50                   	push   eax
c0012872:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012876:	52                   	push   edx
c0012877:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001287b:	51                   	push   ecx
c001287c:	e8 2d 01 00 00       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012881:	83 c4 1c             	add    esp,0x1c
c0012884:	68 00 10 00 00       	push   0x1000
c0012889:	6a 00                	push   0x0
c001288b:	50                   	push   eax
c001288c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012890:	e8 5b dc fe ff       	call   c00004f0 <memset>
c0012895:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012899:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001289c:	e8 38 fb ff ff       	call   c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c00128a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00128a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00128af:	0d 07 04 00 00       	or     eax,0x407
c00128b4:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00128b7:	e9 3b ff ff ff       	jmp    c00127f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00128bc <VAS::allocatePages(int, int)>:
c00128bc:	55                   	push   ebp
c00128bd:	57                   	push   edi
c00128be:	56                   	push   esi
c00128bf:	53                   	push   ebx
c00128c0:	83 ec 1c             	sub    esp,0x1c
c00128c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00128c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00128cb:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00128cf:	75 75                	jne    c0012946 <VAS::allocatePages(int, int)+0x8a>
c00128d1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00128d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128d8:	85 c0                	test   eax,eax
c00128da:	74 49                	je     c0012925 <VAS::allocatePages(int, int)+0x69>
c00128dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128e0:	89 d5                	mov    ebp,edx
c00128e2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00128e6:	c1 e5 0c             	shl    ebp,0xc
c00128e9:	01 dd                	add    ebp,ebx
c00128eb:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00128ee:	81 cf 00 04 00 00    	or     edi,0x400
c00128f4:	85 d2                	test   edx,edx
c00128f6:	7e 1b                	jle    c0012913 <VAS::allocatePages(int, int)+0x57>
c00128f8:	e8 e3 c5 ff ff       	call   c000eee0 <Phys::allocatePage()>
c00128fd:	57                   	push   edi
c00128fe:	53                   	push   ebx
c00128ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012905:	50                   	push   eax
c0012906:	56                   	push   esi
c0012907:	e8 a8 fe ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	39 dd                	cmp    ebp,ebx
c0012911:	75 e5                	jne    c00128f8 <VAS::allocatePages(int, int)+0x3c>
c0012913:	0f 20 d8             	mov    eax,cr3
c0012916:	0f 22 d8             	mov    cr3,eax
c0012919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001291d:	83 c4 1c             	add    esp,0x1c
c0012920:	5b                   	pop    ebx
c0012921:	5e                   	pop    esi
c0012922:	5f                   	pop    edi
c0012923:	5d                   	pop    ebp
c0012924:	c3                   	ret    
c0012925:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012929:	83 ec 0c             	sub    esp,0xc
c001292c:	68 f0 2d 02 c0       	push   0xc0022df0
c0012931:	e8 b0 c3 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012936:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012939:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012944:	eb 96                	jmp    c00128dc <VAS::allocatePages(int, int)+0x20>
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	52                   	push   edx
c001294a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c001294e:	e8 88 f7 ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c0012953:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001295f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012963:	77 38                	ja     c001299d <VAS::allocatePages(int, int)+0xe1>
c0012965:	85 d2                	test   edx,edx
c0012967:	7e aa                	jle    c0012913 <VAS::allocatePages(int, int)+0x57>
c0012969:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001296d:	c1 e2 0c             	shl    edx,0xc
c0012970:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012974:	81 cf 00 04 00 00    	or     edi,0x400
c001297a:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c001297d:	e8 5e c5 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0012982:	57                   	push   edi
c0012983:	53                   	push   ebx
c0012984:	81 c3 00 10 00 00    	add    ebx,0x1000
c001298a:	50                   	push   eax
c001298b:	56                   	push   esi
c001298c:	e8 23 fe ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	39 dd                	cmp    ebp,ebx
c0012996:	75 e5                	jne    c001297d <VAS::allocatePages(int, int)+0xc1>
c0012998:	e9 76 ff ff ff       	jmp    c0012913 <VAS::allocatePages(int, int)+0x57>
c001299d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00129a1:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c00129a6:	09 c1                	or     ecx,eax
c00129a8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00129ac:	eb b7                	jmp    c0012965 <VAS::allocatePages(int, int)+0xa9>

c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00129ae:	55                   	push   ebp
c00129af:	57                   	push   edi
c00129b0:	56                   	push   esi
c00129b1:	53                   	push   ebx
c00129b2:	83 ec 1c             	sub    esp,0x1c
c00129b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00129b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00129bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00129c1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00129c5:	85 db                	test   ebx,ebx
c00129c7:	7e 2c                	jle    c00129f5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00129c9:	c1 e3 0c             	shl    ebx,0xc
c00129cc:	8d 04 33             	lea    eax,[ebx+esi*1]
c00129cf:	89 f3                	mov    ebx,esi
c00129d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129d5:	55                   	push   ebp
c00129d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00129da:	29 f2                	sub    edx,esi
c00129dc:	01 da                	add    edx,ebx
c00129de:	52                   	push   edx
c00129df:	53                   	push   ebx
c00129e0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00129e6:	57                   	push   edi
c00129e7:	e8 c8 fd ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c00129f3:	75 e0                	jne    c00129d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c00129f5:	0f 20 d8             	mov    eax,cr3
c00129f8:	0f 22 d8             	mov    cr3,eax
c00129fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00129ff:	83 c4 1c             	add    esp,0x1c
c0012a02:	5b                   	pop    ebx
c0012a03:	5e                   	pop    esi
c0012a04:	5f                   	pop    edi
c0012a05:	5d                   	pop    ebp
c0012a06:	c3                   	ret    
c0012a07:	90                   	nop

c0012a08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012a08:	55                   	push   ebp
c0012a09:	57                   	push   edi
c0012a0a:	56                   	push   esi
c0012a0b:	53                   	push   ebx
c0012a0c:	83 ec 1c             	sub    esp,0x1c
c0012a0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a23:	09 d8                	or     eax,ebx
c0012a25:	a9 ff 0f 00 00       	test   eax,0xfff
c0012a2a:	75 4b                	jne    c0012a77 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012a2c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012a2f:	89 de                	mov    esi,ebx
c0012a31:	c1 ee 16             	shr    esi,0x16
c0012a34:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0012a3b:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012a3f:	74 48                	je     c0012a89 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0012a41:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0012a46:	c1 eb 0a             	shr    ebx,0xa
c0012a49:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012a4d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0012a51:	83 ff 01             	cmp    edi,0x1
c0012a54:	19 c0                	sbb    eax,eax
c0012a56:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012a5c:	c1 e6 0c             	shl    esi,0xc
c0012a5f:	25 00 00 c0 ff       	and    eax,0xffc00000
c0012a64:	01 f3                	add    ebx,esi
c0012a66:	09 ca                	or     edx,ecx
c0012a68:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0012a6f:	83 c4 1c             	add    esp,0x1c
c0012a72:	5b                   	pop    ebx
c0012a73:	5e                   	pop    esi
c0012a74:	5f                   	pop    edi
c0012a75:	5d                   	pop    ebp
c0012a76:	c3                   	ret    
c0012a77:	83 ec 0c             	sub    esp,0xc
c0012a7a:	68 1c 2e 02 c0       	push   0xc0022e1c
c0012a7f:	e8 62 c2 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012a84:	83 c4 10             	add    esp,0x10
c0012a87:	eb a3                	jmp    c0012a2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0012a89:	e8 52 c4 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0012a8e:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c0012a94:	83 ec 0c             	sub    esp,0xc
c0012a97:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012a9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012a9f:	6a 01                	push   0x1
c0012aa1:	e8 35 f6 ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c0012aa6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012aad:	6a 01                	push   0x1
c0012aaf:	50                   	push   eax
c0012ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab4:	50                   	push   eax
c0012ab5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012ab9:	51                   	push   ecx
c0012aba:	e8 ef fe ff ff       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012abf:	83 c4 1c             	add    esp,0x1c
c0012ac2:	68 00 10 00 00       	push   0x1000
c0012ac7:	6a 00                	push   0x0
c0012ac9:	50                   	push   eax
c0012aca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ace:	e8 1d da fe ff       	call   c00004f0 <memset>
c0012ad3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012ad7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012ada:	e8 fa f8 ff ff       	call   c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012adf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012ae3:	83 c4 10             	add    esp,0x10
c0012ae6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012ae9:	81 ca 07 04 00 00    	or     edx,0x407
c0012aef:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0012af2:	e9 4a ff ff ff       	jmp    c0012a41 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0012af7:	90                   	nop

c0012af8 <VAS::VAS(bool)>:
c0012af8:	53                   	push   ebx
c0012af9:	83 ec 28             	sub    esp,0x28
c0012afc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b00:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012b04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012b0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012b1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b1e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012b22:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012b25:	e8 b6 c3 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0012b2a:	89 c2                	mov    edx,eax
c0012b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012b33:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0012b39:	83 ec 0c             	sub    esp,0xc
c0012b3c:	6a 01                	push   0x1
c0012b3e:	e8 98 f5 ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c0012b43:	83 c4 10             	add    esp,0x10
c0012b46:	89 c2                	mov    edx,eax
c0012b48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012b4f:	83 ec 0c             	sub    esp,0xc
c0012b52:	6a 03                	push   0x3
c0012b54:	6a 01                	push   0x1
c0012b56:	52                   	push   edx
c0012b57:	50                   	push   eax
c0012b58:	53                   	push   ebx
c0012b59:	e8 50 fe ff ff       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012b5e:	83 c4 20             	add    esp,0x20
c0012b61:	89 c2                	mov    edx,eax
c0012b63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b6a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012b72:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012b7a:	7f 1d                	jg     c0012b99 <VAS::VAS(bool)+0xa1>
c0012b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b87:	c1 e2 02             	shl    edx,0x2
c0012b8a:	01 d0                	add    eax,edx
c0012b8c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b92:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012b97:	eb d9                	jmp    c0012b72 <VAS::VAS(bool)+0x7a>
c0012b99:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012ba1:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012ba9:	7f 59                	jg     c0012c04 <VAS::VAS(bool)+0x10c>
c0012bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012baf:	2d 00 02 00 00       	sub    eax,0x200
c0012bb4:	c1 e0 0c             	shl    eax,0xc
c0012bb7:	89 c2                	mov    edx,eax
c0012bb9:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012bbe:	89 d1                	mov    ecx,edx
c0012bc0:	09 c1                	or     ecx,eax
c0012bc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012bcd:	c1 e2 02             	shl    edx,0x2
c0012bd0:	01 d0                	add    eax,edx
c0012bd2:	83 c9 05             	or     ecx,0x5
c0012bd5:	89 ca                	mov    edx,ecx
c0012bd7:	89 10                	mov    DWORD PTR [eax],edx
c0012bd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bdd:	2d 40 03 00 00       	sub    eax,0x340
c0012be2:	83 f8 7f             	cmp    eax,0x7f
c0012be5:	77 16                	ja     c0012bfd <VAS::VAS(bool)+0x105>
c0012be7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012beb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012bf2:	c1 e2 02             	shl    edx,0x2
c0012bf5:	01 d0                	add    eax,edx
c0012bf7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012bfd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012c02:	eb 9d                	jmp    c0012ba1 <VAS::VAS(bool)+0xa9>
c0012c04:	8b 15 68 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d768
c0012c0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c11:	05 20 0c 00 00       	add    eax,0xc20
c0012c16:	81 ca 03 40 00 00    	or     edx,0x4003
c0012c1c:	89 10                	mov    DWORD PTR [eax],edx
c0012c1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c22:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012c25:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012c2a:	09 c2                	or     edx,eax
c0012c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c33:	05 fc 0f 00 00       	add    eax,0xffc
c0012c38:	83 ca 03             	or     edx,0x3
c0012c3b:	89 10                	mov    DWORD PTR [eax],edx
c0012c3d:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012c42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	50                   	push   eax
c0012c4c:	e8 73 66 ff ff       	call   c00092c4 <Device::getName()>
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	83 ec 08             	sub    esp,0x8
c0012c57:	68 9f 32 02 c0       	push   0xc002329f
c0012c5c:	50                   	push   eax
c0012c5d:	e8 1e db fe ff       	call   c0000780 <strcmp>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	85 c0                	test   eax,eax
c0012c67:	0f 94 c0             	sete   al
c0012c6a:	0f b6 c0             	movzx  eax,al
c0012c6d:	85 c0                	test   eax,eax
c0012c6f:	74 68                	je     c0012cd9 <VAS::VAS(bool)+0x1e1>
c0012c71:	fa                   	cli    
c0012c72:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012c77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c7d:	05 68 09 00 00       	add    eax,0x968
c0012c82:	83 ec 0c             	sub    esp,0xc
c0012c85:	50                   	push   eax
c0012c86:	e8 f7 b6 ff ff       	call   c000e382 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c8b:	83 c4 10             	add    esp,0x10
c0012c8e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c93:	89 c3                	mov    ebx,eax
c0012c95:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012c9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ca0:	05 68 09 00 00       	add    eax,0x968
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	50                   	push   eax
c0012ca9:	e8 d4 b6 ff ff       	call   c000e382 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	83 ec 08             	sub    esp,0x8
c0012cb4:	50                   	push   eax
c0012cb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012cb9:	e8 fc f6 ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c0012cbe:	83 c4 10             	add    esp,0x10
c0012cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cc3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cc8:	6a 11                	push   0x11
c0012cca:	53                   	push   ebx
c0012ccb:	50                   	push   eax
c0012ccc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012cd0:	e8 df fa ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012cd5:	83 c4 10             	add    esp,0x10
c0012cd8:	fb                   	sti    
c0012cd9:	90                   	nop
c0012cda:	83 c4 28             	add    esp,0x28
c0012cdd:	5b                   	pop    ebx
c0012cde:	c3                   	ret    
c0012cdf:	90                   	nop

c0012ce0 <VAS::evict(unsigned long)>:
c0012ce0:	55                   	push   ebp
c0012ce1:	57                   	push   edi
c0012ce2:	56                   	push   esi
c0012ce3:	53                   	push   ebx
c0012ce4:	83 ec 24             	sub    esp,0x24
c0012ce7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012ceb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012cef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012cf3:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012cf8:	50                   	push   eax
c0012cf9:	68 ad 32 02 c0       	push   0xc00232ad
c0012cfe:	e8 4b 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d03:	e8 28 f5 ff ff       	call   c0012230 <Virt::allocateSwapfilePage()>
c0012d08:	83 c4 10             	add    esp,0x10
c0012d0b:	89 c7                	mov    edi,eax
c0012d0d:	a1 4c 4f 02 c0       	mov    eax,ds:0xc0024f4c
c0012d12:	85 c0                	test   eax,eax
c0012d14:	7e 40                	jle    c0012d56 <VAS::evict(unsigned long)+0x76>
c0012d16:	89 ee                	mov    esi,ebp
c0012d18:	31 db                	xor    ebx,ebx
c0012d1a:	83 ec 0c             	sub    esp,0xc
c0012d1d:	57                   	push   edi
c0012d1e:	e8 f7 f4 ff ff       	call   c001221a <Virt::swapIDToSector(unsigned long)>
c0012d23:	31 d2                	xor    edx,edx
c0012d25:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d28:	81 c6 00 02 00 00    	add    esi,0x200
c0012d2e:	6a 01                	push   0x1
c0012d30:	52                   	push   edx
c0012d31:	01 d8                	add    eax,ebx
c0012d33:	83 c3 01             	add    ebx,0x1
c0012d36:	50                   	push   eax
c0012d37:	0f be 05 58 4f 02 c0 	movsx  eax,BYTE PTR ds:0xc0024f58
c0012d3e:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0012d45:	50                   	push   eax
c0012d46:	e8 dd 73 ff ff       	call   c000a128 <LogicalDisk::write(unsigned long long, int, void*)>
c0012d4b:	83 c4 20             	add    esp,0x20
c0012d4e:	39 1d 4c 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f4c,ebx
c0012d54:	7f c4                	jg     c0012d1a <VAS::evict(unsigned long)+0x3a>
c0012d56:	c1 e7 0c             	shl    edi,0xc
c0012d59:	83 ec 08             	sub    esp,0x8
c0012d5c:	55                   	push   ebp
c0012d5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d61:	50                   	push   eax
c0012d62:	e8 53 f6 ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c0012d67:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d69:	89 d3                	mov    ebx,edx
c0012d6b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012d71:	09 d7                	or     edi,edx
c0012d73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d79:	89 38                	mov    DWORD PTR [eax],edi
c0012d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d7e:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0012d84:	83 c2 01             	add    edx,0x1
c0012d87:	89 15 c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,edx
c0012d8d:	e8 e5 c0 ff ff       	call   c000ee77 <Phys::freePage(unsigned long)>
c0012d92:	0f 20 d8             	mov    eax,cr3
c0012d95:	0f 22 d8             	mov    cr3,eax
c0012d98:	8b 0d c8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cec8
c0012d9e:	51                   	push   ecx
c0012d9f:	55                   	push   ebp
c0012da0:	53                   	push   ebx
c0012da1:	68 40 2e 02 c0       	push   0xc0022e40
c0012da6:	e8 a3 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012dab:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c0012db0:	83 c4 18             	add    esp,0x18
c0012db3:	50                   	push   eax
c0012db4:	68 c2 32 02 c0       	push   0xc00232c2
c0012db9:	8d 50 01             	lea    edx,[eax+0x1]
c0012dbc:	89 15 c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edx
c0012dc2:	e8 87 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012dc7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012dcc:	c7 44 24 40 d4 32 02 c0 	mov    DWORD PTR [esp+0x40],0xc00232d4
c0012dd4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012dd8:	83 c4 2c             	add    esp,0x2c
c0012ddb:	5b                   	pop    ebx
c0012ddc:	5e                   	pop    esi
c0012ddd:	5f                   	pop    edi
c0012dde:	5d                   	pop    ebp
c0012ddf:	e9 6a 41 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012de4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012de4:	55                   	push   ebp
c0012de5:	57                   	push   edi
c0012de6:	56                   	push   esi
c0012de7:	53                   	push   ebx
c0012de8:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0012dee:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0012df5:	89 f3                	mov    ebx,esi
c0012df7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012dfd:	53                   	push   ebx
c0012dfe:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0012e05:	50                   	push   eax
c0012e06:	e8 af f5 ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c0012e0b:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012e11:	5a                   	pop    edx
c0012e12:	59                   	pop    ecx
c0012e13:	89 c5                	mov    ebp,eax
c0012e15:	0f 87 cb 00 00 00    	ja     c0012ee6 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012e1b:	83 ec 08             	sub    esp,0x8
c0012e1e:	56                   	push   esi
c0012e1f:	68 74 2e 02 c0       	push   0xc0022e74
c0012e24:	e8 25 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e29:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012e2e:	5e                   	pop    esi
c0012e2f:	5f                   	pop    edi
c0012e30:	50                   	push   eax
c0012e31:	68 a4 2e 02 c0       	push   0xc0022ea4
c0012e36:	e8 13 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e3b:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012e41:	58                   	pop    eax
c0012e42:	5a                   	pop    edx
c0012e43:	51                   	push   ecx
c0012e44:	68 c8 2e 02 c0       	push   0xc0022ec8
c0012e49:	e8 00 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	85 db                	test   ebx,ebx
c0012e53:	74 5b                	je     c0012eb0 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012e55:	85 ed                	test   ebp,ebp
c0012e57:	74 21                	je     c0012e7a <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0012e59:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0012e5c:	f7 c6 00 02 00 00    	test   esi,0x200
c0012e62:	0f 85 c5 00 00 00    	jne    c0012f2d <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0012e68:	89 f0                	mov    eax,esi
c0012e6a:	25 01 04 00 00       	and    eax,0x401
c0012e6f:	3d 00 04 00 00       	cmp    eax,0x400
c0012e74:	0f 84 39 01 00 00    	je     c0012fb3 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0012e7a:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012e7f:	83 ec 08             	sub    esp,0x8
c0012e82:	50                   	push   eax
c0012e83:	68 bc 30 02 c0       	push   0xc00230bc
c0012e88:	e8 c1 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e8d:	8b 1d b0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6b0
c0012e93:	5a                   	pop    edx
c0012e94:	59                   	pop    ecx
c0012e95:	53                   	push   ebx
c0012e96:	68 e0 30 02 c0       	push   0xc00230e0
c0012e9b:	e8 ae 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	31 c0                	xor    eax,eax
c0012ea5:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012eab:	5b                   	pop    ebx
c0012eac:	5e                   	pop    esi
c0012ead:	5f                   	pop    edi
c0012eae:	5d                   	pop    ebp
c0012eaf:	c3                   	ret    
c0012eb0:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012eb5:	83 ec 08             	sub    esp,0x8
c0012eb8:	50                   	push   eax
c0012eb9:	68 ec 2e 02 c0       	push   0xc0022eec
c0012ebe:	e8 8b 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ec3:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012ec9:	58                   	pop    eax
c0012eca:	5a                   	pop    edx
c0012ecb:	51                   	push   ecx
c0012ecc:	68 10 2f 02 c0       	push   0xc0022f10
c0012ed1:	e8 78 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ed6:	83 c4 10             	add    esp,0x10
c0012ed9:	31 c0                	xor    eax,eax
c0012edb:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012ee1:	5b                   	pop    ebx
c0012ee2:	5e                   	pop    esi
c0012ee3:	5f                   	pop    edi
c0012ee4:	5d                   	pop    ebp
c0012ee5:	c3                   	ret    
c0012ee6:	83 ec 0c             	sub    esp,0xc
c0012ee9:	68 e9 32 02 c0       	push   0xc00232e9
c0012eee:	e8 f3 bd ff ff       	call   c000ece6 <KePanic(char const*)>
c0012ef3:	5f                   	pop    edi
c0012ef4:	58                   	pop    eax
c0012ef5:	56                   	push   esi
c0012ef6:	68 74 2e 02 c0       	push   0xc0022e74
c0012efb:	e8 4e 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f00:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c0012f06:	58                   	pop    eax
c0012f07:	5a                   	pop    edx
c0012f08:	51                   	push   ecx
c0012f09:	68 a4 2e 02 c0       	push   0xc0022ea4
c0012f0e:	e8 3b 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f13:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f18:	5e                   	pop    esi
c0012f19:	5f                   	pop    edi
c0012f1a:	50                   	push   eax
c0012f1b:	68 c8 2e 02 c0       	push   0xc0022ec8
c0012f20:	e8 29 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	e9 28 ff ff ff       	jmp    c0012e55 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0012f2d:	83 ec 0c             	sub    esp,0xc
c0012f30:	68 34 2f 02 c0       	push   0xc0022f34
c0012f35:	e8 14 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f3a:	e8 a1 bf ff ff       	call   c000eee0 <Phys::allocatePage()>
c0012f3f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012f42:	83 ca 01             	or     edx,0x1
c0012f45:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012f48:	0f 20 da             	mov    edx,cr3
c0012f4b:	0f 22 da             	mov    cr3,edx
c0012f4e:	ba 00 10 00 00       	mov    edx,0x1000
c0012f53:	89 de                	mov    esi,ebx
c0012f55:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f59:	89 d1                	mov    ecx,edx
c0012f5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f5d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012f60:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012f66:	09 c8                	or     eax,ecx
c0012f68:	83 c8 02             	or     eax,0x2
c0012f6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012f6e:	0f 20 d8             	mov    eax,cr3
c0012f71:	0f 22 d8             	mov    cr3,eax
c0012f74:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012f78:	89 df                	mov    edi,ebx
c0012f7a:	89 d1                	mov    ecx,edx
c0012f7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f7e:	59                   	pop    ecx
c0012f7f:	8b 35 8c d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d68c
c0012f85:	5b                   	pop    ebx
c0012f86:	56                   	push   esi
c0012f87:	68 54 2f 02 c0       	push   0xc0022f54
c0012f8c:	e8 bd 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f91:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f96:	5f                   	pop    edi
c0012f97:	5d                   	pop    ebp
c0012f98:	50                   	push   eax
c0012f99:	68 78 2f 02 c0       	push   0xc0022f78
c0012f9e:	e8 ab 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fa3:	83 c4 10             	add    esp,0x10
c0012fa6:	b0 01                	mov    al,0x1
c0012fa8:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012fae:	5b                   	pop    ebx
c0012faf:	5e                   	pop    esi
c0012fb0:	5f                   	pop    edi
c0012fb1:	5d                   	pop    ebp
c0012fb2:	c3                   	ret    
c0012fb3:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012fb8:	c1 ee 0c             	shr    esi,0xc
c0012fbb:	83 ec 08             	sub    esp,0x8
c0012fbe:	50                   	push   eax
c0012fbf:	68 9c 2f 02 c0       	push   0xc0022f9c
c0012fc4:	e8 85 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fc9:	e8 12 bf ff ff       	call   c000eee0 <Phys::allocatePage()>
c0012fce:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012fd4:	89 c7                	mov    edi,eax
c0012fd6:	58                   	pop    eax
c0012fd7:	5a                   	pop    edx
c0012fd8:	51                   	push   ecx
c0012fd9:	68 c0 2f 02 c0       	push   0xc0022fc0
c0012fde:	e8 6b 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fe3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012fef:	09 fa                	or     edx,edi
c0012ff1:	31 ff                	xor    edi,edi
c0012ff3:	81 ca 01 08 00 00    	or     edx,0x801
c0012ff9:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012ffc:	89 dd                	mov    ebp,ebx
c0012ffe:	a1 4c 4f 02 c0       	mov    eax,ds:0xc0024f4c
c0013003:	85 c0                	test   eax,eax
c0013005:	7e 61                	jle    c0013068 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c0013007:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001300c:	83 ec 08             	sub    esp,0x8
c001300f:	50                   	push   eax
c0013010:	68 74 30 02 c0       	push   0xc0023074
c0013015:	e8 34 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001301a:	89 34 24             	mov    DWORD PTR [esp],esi
c001301d:	e8 f8 f1 ff ff       	call   c001221a <Virt::swapIDToSector(unsigned long)>
c0013022:	31 d2                	xor    edx,edx
c0013024:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013027:	81 c5 00 02 00 00    	add    ebp,0x200
c001302d:	6a 01                	push   0x1
c001302f:	52                   	push   edx
c0013030:	01 f8                	add    eax,edi
c0013032:	83 c7 01             	add    edi,0x1
c0013035:	50                   	push   eax
c0013036:	0f be 05 58 4f 02 c0 	movsx  eax,BYTE PTR ds:0xc0024f58
c001303d:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0013044:	50                   	push   eax
c0013045:	e8 72 70 ff ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c001304a:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001304f:	83 c4 18             	add    esp,0x18
c0013052:	50                   	push   eax
c0013053:	68 98 30 02 c0       	push   0xc0023098
c0013058:	e8 f1 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001305d:	83 c4 10             	add    esp,0x10
c0013060:	39 3d 4c 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f4c,edi
c0013066:	7f 9f                	jg     c0013007 <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c0013068:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001306d:	83 ec 08             	sub    esp,0x8
c0013070:	50                   	push   eax
c0013071:	68 e4 2f 02 c0       	push   0xc0022fe4
c0013076:	e8 d3 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001307b:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013080:	83 c4 0c             	add    esp,0xc
c0013083:	83 e8 01             	sub    eax,0x1
c0013086:	50                   	push   eax
c0013087:	53                   	push   ebx
c0013088:	68 fb 32 02 c0       	push   0xc00232fb
c001308d:	a3 c8 ce 02 c0       	mov    ds:0xc002cec8,eax
c0013092:	e8 b7 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013097:	89 34 24             	mov    DWORD PTR [esp],esi
c001309a:	e8 58 f1 ff ff       	call   c00121f7 <Virt::freeSwapfilePage(unsigned long)>
c001309f:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00130a5:	58                   	pop    eax
c00130a6:	5a                   	pop    edx
c00130a7:	51                   	push   ecx
c00130a8:	68 08 30 02 c0       	push   0xc0023008
c00130ad:	e8 9c 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130b2:	0f 20 d8             	mov    eax,cr3
c00130b5:	0f 22 d8             	mov    cr3,eax
c00130b8:	c7 04 24 10 33 02 c0 	mov    DWORD PTR [esp],0xc0023310
c00130bf:	e8 8a 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130c4:	8b 3d 8c d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d68c
c00130ca:	5b                   	pop    ebx
c00130cb:	5e                   	pop    esi
c00130cc:	57                   	push   edi
c00130cd:	68 2c 30 02 c0       	push   0xc002302c
c00130d2:	e8 77 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130d7:	5d                   	pop    ebp
c00130d8:	58                   	pop    eax
c00130d9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00130de:	50                   	push   eax
c00130df:	68 50 30 02 c0       	push   0xc0023050
c00130e4:	e8 65 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	b0 01                	mov    al,0x1
c00130ee:	e9 b2 fd ff ff       	jmp    c0012ea5 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c00130f3:	90                   	nop

c00130f4 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00130f4:	55                   	push   ebp
c00130f5:	57                   	push   edi
c00130f6:	56                   	push   esi
c00130f7:	53                   	push   ebx
c00130f8:	83 ec 28             	sub    esp,0x28
c00130fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00130ff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013103:	50                   	push   eax
c0013104:	e8 d2 ef ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c0013109:	83 c4 0c             	add    esp,0xc
c001310c:	6a 07                	push   0x7
c001310e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013112:	52                   	push   edx
c0013113:	89 c5                	mov    ebp,eax
c0013115:	53                   	push   ebx
c0013116:	e8 a1 f7 ff ff       	call   c00128bc <VAS::allocatePages(int, int)>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013122:	89 c7                	mov    edi,eax
c0013124:	85 c9                	test   ecx,ecx
c0013126:	74 2f                	je     c0013157 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013128:	31 f6                	xor    esi,esi
c001312a:	e8 b1 bd ff ff       	call   c000eee0 <Phys::allocatePage()>
c001312f:	83 c6 01             	add    esi,0x1
c0013132:	6a 03                	push   0x3
c0013134:	55                   	push   ebp
c0013135:	50                   	push   eax
c0013136:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001313a:	53                   	push   ebx
c001313b:	e8 74 f6 ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013140:	6a 07                	push   0x7
c0013142:	57                   	push   edi
c0013143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013147:	50                   	push   eax
c0013148:	53                   	push   ebx
c0013149:	e8 66 f6 ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001314e:	83 c4 20             	add    esp,0x20
c0013151:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0013155:	75 d3                	jne    c001312a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013157:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001315b:	89 28                	mov    DWORD PTR [eax],ebp
c001315d:	83 c4 1c             	add    esp,0x1c
c0013160:	89 f8                	mov    eax,edi
c0013162:	5b                   	pop    ebx
c0013163:	5e                   	pop    esi
c0013164:	5f                   	pop    edi
c0013165:	5d                   	pop    ebp
c0013166:	c3                   	ret    
c0013167:	90                   	nop

c0013168 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013168:	53                   	push   ebx
c0013169:	83 ec 14             	sub    esp,0x14
c001316c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013170:	68 04 31 02 c0       	push   0xc0023104
c0013175:	e8 d4 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001317a:	c7 04 24 64 31 02 c0 	mov    DWORD PTR [esp],0xc0023164
c0013181:	e8 c8 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013186:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001318a:	83 c4 18             	add    esp,0x18
c001318d:	5b                   	pop    ebx
c001318e:	e9 46 f2 ff ff       	jmp    c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013193:	90                   	nop

c0013194 <VAS::scanForEviction()>:
c0013194:	57                   	push   edi
c0013195:	56                   	push   esi
c0013196:	31 f6                	xor    esi,esi
c0013198:	53                   	push   ebx
c0013199:	83 ec 18             	sub    esp,0x18
c001319c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00131a1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00131a5:	50                   	push   eax
c00131a6:	68 e0 31 02 c0       	push   0xc00231e0
c00131ab:	e8 9e 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131b0:	c7 04 24 17 33 02 c0 	mov    DWORD PTR [esp],0xc0023317
c00131b7:	e8 92 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131bc:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00131bf:	83 c4 10             	add    esp,0x10
c00131c2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00131c8:	75 0e                	jne    c00131d8 <VAS::scanForEviction()+0x44>
c00131ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00131cd:	89 da                	mov    edx,ebx
c00131cf:	c1 ea 16             	shr    edx,0x16
c00131d2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00131d6:	74 5b                	je     c0013233 <VAS::scanForEviction()+0x9f>
c00131d8:	83 ec 08             	sub    esp,0x8
c00131db:	53                   	push   ebx
c00131dc:	57                   	push   edi
c00131dd:	e8 d8 f1 ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e7:	89 d1                	mov    ecx,edx
c00131e9:	c1 e9 0c             	shr    ecx,0xc
c00131ec:	74 10                	je     c00131fe <VAS::scanForEviction()+0x6a>
c00131ee:	89 d1                	mov    ecx,edx
c00131f0:	81 e1 01 08 00 00    	and    ecx,0x801
c00131f6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00131fc:	74 40                	je     c001323e <VAS::scanForEviction()+0xaa>
c00131fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013204:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001320a:	76 2d                	jbe    c0013239 <VAS::scanForEviction()+0xa5>
c001320c:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0013213:	83 c6 01             	add    esi,0x1
c0013216:	83 fe 03             	cmp    esi,0x3
c0013219:	74 32                	je     c001324d <VAS::scanForEviction()+0xb9>
c001321b:	31 db                	xor    ebx,ebx
c001321d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013223:	75 b3                	jne    c00131d8 <VAS::scanForEviction()+0x44>
c0013225:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013228:	89 da                	mov    edx,ebx
c001322a:	c1 ea 16             	shr    edx,0x16
c001322d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013231:	75 a5                	jne    c00131d8 <VAS::scanForEviction()+0x44>
c0013233:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013239:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001323c:	eb 84                	jmp    c00131c2 <VAS::scanForEviction()+0x2e>
c001323e:	f6 c2 20             	test   dl,0x20
c0013241:	74 13                	je     c0013256 <VAS::scanForEviction()+0xc2>
c0013243:	83 e2 df             	and    edx,0xffffffdf
c0013246:	89 10                	mov    DWORD PTR [eax],edx
c0013248:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001324b:	eb b1                	jmp    c00131fe <VAS::scanForEviction()+0x6a>
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	31 c0                	xor    eax,eax
c0013252:	5b                   	pop    ebx
c0013253:	5e                   	pop    esi
c0013254:	5f                   	pop    edi
c0013255:	c3                   	ret    
c0013256:	89 d0                	mov    eax,edx
c0013258:	83 ec 08             	sub    esp,0x8
c001325b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013260:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013264:	53                   	push   ebx
c0013265:	68 33 33 02 c0       	push   0xc0023333
c001326a:	e8 df 3c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001326f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013272:	58                   	pop    eax
c0013273:	5a                   	pop    edx
c0013274:	51                   	push   ecx
c0013275:	57                   	push   edi
c0013276:	e8 65 fa ff ff       	call   c0012ce0 <VAS::evict(unsigned long)>
c001327b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001327e:	5b                   	pop    ebx
c001327f:	5e                   	pop    esi
c0013280:	50                   	push   eax
c0013281:	68 47 33 02 c0       	push   0xc0023347
c0013286:	e8 c3 3c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001328b:	58                   	pop    eax
c001328c:	5a                   	pop    edx
c001328d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013291:	50                   	push   eax
c0013292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013296:	68 5a 33 02 c0       	push   0xc002335a
c001329b:	e8 ae 3c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00132a0:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00132a3:	81 c1 00 10 00 00    	add    ecx,0x1000
c00132a9:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00132ac:	8b 3d b0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6b0
c00132b2:	5b                   	pop    ebx
c00132b3:	5e                   	pop    esi
c00132b4:	57                   	push   edi
c00132b5:	68 00 32 02 c0       	push   0xc0023200
c00132ba:	e8 8f 3c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	5b                   	pop    ebx
c00132ca:	5e                   	pop    esi
c00132cb:	5f                   	pop    edi
c00132cc:	c3                   	ret    

c00132cd <mapVASFirstTime>:
c00132cd:	55                   	push   ebp
c00132ce:	57                   	push   edi
c00132cf:	56                   	push   esi
c00132d0:	53                   	push   ebx
c00132d1:	83 ec 0c             	sub    esp,0xc
c00132d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00132dc:	83 fa 01             	cmp    edx,0x1
c00132df:	0f 84 cb 00 00 00    	je     c00133b0 <mapVASFirstTime+0xe3>
c00132e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00132e8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00132ed:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00132f2:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00132f5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00132fb:	c1 e5 15             	shl    ebp,0x15
c00132fe:	29 eb                	sub    ebx,ebp
c0013300:	29 ef                	sub    edi,ebp
c0013302:	e8 d9 bb ff ff       	call   c000eee0 <Phys::allocatePage()>
c0013307:	83 ec 0c             	sub    esp,0xc
c001330a:	68 03 04 00 00       	push   0x403
c001330f:	6a 01                	push   0x1
c0013311:	53                   	push   ebx
c0013312:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013318:	50                   	push   eax
c0013319:	56                   	push   esi
c001331a:	e8 8f f6 ff ff       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001331f:	83 c4 20             	add    esp,0x20
c0013322:	39 fb                	cmp    ebx,edi
c0013324:	75 dc                	jne    c0013302 <mapVASFirstTime+0x35>
c0013326:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001332b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0013330:	29 eb                	sub    ebx,ebp
c0013332:	29 ef                	sub    edi,ebp
c0013334:	e8 a7 bb ff ff       	call   c000eee0 <Phys::allocatePage()>
c0013339:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001333d:	83 fa 01             	cmp    edx,0x1
c0013340:	19 d2                	sbb    edx,edx
c0013342:	83 ec 0c             	sub    esp,0xc
c0013345:	83 e2 04             	and    edx,0x4
c0013348:	81 c2 03 04 00 00    	add    edx,0x403
c001334e:	52                   	push   edx
c001334f:	6a 01                	push   0x1
c0013351:	53                   	push   ebx
c0013352:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013358:	50                   	push   eax
c0013359:	56                   	push   esi
c001335a:	e8 4f f6 ff ff       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001335f:	83 c4 20             	add    esp,0x20
c0013362:	39 df                	cmp    edi,ebx
c0013364:	75 ce                	jne    c0013334 <mapVASFirstTime+0x67>
c0013366:	83 ec 0c             	sub    esp,0xc
c0013369:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c001336e:	6a 04                	push   0x4
c0013370:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c0013376:	6a ff                	push   0xffffffff
c0013378:	c1 eb 0c             	shr    ebx,0xc
c001337b:	53                   	push   ebx
c001337c:	68 00 60 02 c0       	push   0xc0026000
c0013381:	56                   	push   esi
c0013382:	e8 cd f1 ff ff       	call   c0012554 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013387:	83 c4 14             	add    esp,0x14
c001338a:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001338f:	6a 04                	push   0x4
c0013391:	6a ff                	push   0xffffffff
c0013393:	53                   	push   ebx
c0013394:	68 00 60 02 c0       	push   0xc0026000
c0013399:	50                   	push   eax
c001339a:	e8 b5 f1 ff ff       	call   c0012554 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001339f:	0f 20 d8             	mov    eax,cr3
c00133a2:	0f 22 d8             	mov    cr3,eax
c00133a5:	83 c4 20             	add    esp,0x20
c00133a8:	83 c4 0c             	add    esp,0xc
c00133ab:	5b                   	pop    ebx
c00133ac:	5e                   	pop    esi
c00133ad:	5f                   	pop    edi
c00133ae:	5d                   	pop    ebp
c00133af:	c3                   	ret    
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	68 67 33 02 c0       	push   0xc0023367
c00133b8:	e8 91 3b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00133bd:	83 c4 10             	add    esp,0x10
c00133c0:	83 c4 0c             	add    esp,0xc
c00133c3:	5b                   	pop    ebx
c00133c4:	5e                   	pop    esi
c00133c5:	5f                   	pop    edi
c00133c6:	5d                   	pop    ebp
c00133c7:	c3                   	ret    

c00133c8 <SysEject(regs*)>:
c00133c8:	83 ec 0c             	sub    esp,0xc
c00133cb:	83 ca ff             	or     edx,0xffffffff
c00133ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00133d5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00133da:	83 e9 41             	sub    ecx,0x41
c00133dd:	83 f9 19             	cmp    ecx,0x19
c00133e0:	77 18                	ja     c00133fa <SysEject(regs*)+0x32>
c00133e2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00133e9:	85 c9                	test   ecx,ecx
c00133eb:	74 0d                	je     c00133fa <SysEject(regs*)+0x32>
c00133ed:	83 ec 0c             	sub    esp,0xc
c00133f0:	51                   	push   ecx
c00133f1:	e8 5c 6c ff ff       	call   c000a052 <LogicalDisk::eject()>
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	99                   	cdq    
c00133fa:	83 c4 0c             	add    esp,0xc
c00133fd:	c3                   	ret    

c00133fe <SysExit(regs*)>:
c00133fe:	83 ec 18             	sub    esp,0x18
c0013401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013405:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013408:	e8 d3 2a 00 00       	call   c0015ee0 <terminateTask(int)>
c001340d:	83 c8 ff             	or     eax,0xffffffff
c0013410:	83 c4 1c             	add    esp,0x1c
c0013413:	89 c2                	mov    edx,eax
c0013415:	c3                   	ret    

c0013416 <SysGetCwd(regs*)>:
c0013416:	83 ec 10             	sub    esp,0x10
c0013419:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001341d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013420:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013428:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001342b:	e8 7c 49 ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c0013430:	83 c4 1c             	add    esp,0x1c
c0013433:	99                   	cdq    
c0013434:	c3                   	ret    

c0013435 <SysGetPID(regs*)>:
c0013435:	83 ec 14             	sub    esp,0x14
c0013438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001343d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013440:	ff 30                	push   DWORD PTR [eax]
c0013442:	68 80 33 02 c0       	push   0xc0023380
c0013447:	e8 02 3b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001344c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013451:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013454:	8b 00                	mov    eax,DWORD PTR [eax]
c0013456:	83 c4 1c             	add    esp,0x1c
c0013459:	99                   	cdq    
c001345a:	c3                   	ret    

c001345b <SysGetRAMData(regs*)>:
c001345b:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013460:	03 05 a8 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cda8
c0013466:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c001346c:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0013472:	99                   	cdq    
c0013473:	f7 f9                	idiv   ecx
c0013475:	c1 e0 18             	shl    eax,0x18
c0013478:	09 c8                	or     eax,ecx
c001347a:	99                   	cdq    
c001347b:	c3                   	ret    

c001347c <SysGetVGAPtr(regs*)>:
c001347c:	55                   	push   ebp
c001347d:	57                   	push   edi
c001347e:	56                   	push   esi
c001347f:	53                   	push   ebx
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013487:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001348a:	83 f8 ff             	cmp    eax,0xffffffff
c001348d:	74 1b                	je     c00134aa <SysGetVGAPtr(regs*)+0x2e>
c001348f:	83 ec 0c             	sub    esp,0xc
c0013492:	50                   	push   eax
c0013493:	e8 fc 24 00 00       	call   c0015994 <Thr::processFromPID(int)>
c0013498:	83 c4 10             	add    esp,0x10
c001349b:	31 d2                	xor    edx,edx
c001349d:	89 c1                	mov    ecx,eax
c001349f:	b8 01 00 00 00       	mov    eax,0x1
c00134a4:	85 c9                	test   ecx,ecx
c00134a6:	75 0a                	jne    c00134b2 <SysGetVGAPtr(regs*)+0x36>
c00134a8:	eb 61                	jmp    c001350b <SysGetVGAPtr(regs*)+0x8f>
c00134aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134af:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00134b2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00134b6:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00134bc:	74 0c                	je     c00134ca <SysGetVGAPtr(regs*)+0x4e>
c00134be:	83 ec 0c             	sub    esp,0xc
c00134c1:	55                   	push   ebp
c00134c2:	e8 ca dc ff ff       	call   c0011191 <setActiveTerminal(VgaText*)>
c00134c7:	83 c4 10             	add    esp,0x10
c00134ca:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00134cd:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00134d2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00134d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134d7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00134da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134dd:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00134e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00134e9:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00134ef:	50                   	push   eax
c00134f0:	50                   	push   eax
c00134f1:	68 8f 33 02 c0       	push   0xc002338f
c00134f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134f9:	05 a8 0f 00 00       	add    eax,0xfa8
c00134fe:	50                   	push   eax
c00134ff:	e8 4c d1 fe ff       	call   c0000650 <strcpy>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	31 c0                	xor    eax,eax
c0013509:	31 d2                	xor    edx,edx
c001350b:	83 c4 0c             	add    esp,0xc
c001350e:	5b                   	pop    ebx
c001350f:	5e                   	pop    esi
c0013510:	5f                   	pop    edi
c0013511:	5d                   	pop    ebp
c0013512:	c3                   	ret    
c0013513:	90                   	nop

c0013514 <SysKill(regs*)>:
c0013514:	53                   	push   ebx
c0013515:	83 ec 08             	sub    esp,0x8
c0013518:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001351c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013520:	75 16                	jne    c0013538 <SysKill(regs*)+0x24>
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	68 99 33 02 c0       	push   0xc0023399
c001352a:	e8 b7 b7 ff ff       	call   c000ece6 <KePanic(char const*)>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	e9 89 00 00 00       	jmp    c00135c0 <SysKill(regs*)+0xac>
c0013537:	90                   	nop
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	68 cc d6 02 c0       	push   0xc002d6cc
c0013540:	e8 33 cf 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013545:	8d 76 00             	lea    esi,[esi+0x0]
c0013548:	83 c4 10             	add    esp,0x10
c001354b:	85 c0                	test   eax,eax
c001354d:	74 19                	je     c0013568 <SysKill(regs*)+0x54>
c001354f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013552:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013555:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013557:	74 33                	je     c001358c <SysKill(regs*)+0x78>
c0013559:	52                   	push   edx
c001355a:	52                   	push   edx
c001355b:	50                   	push   eax
c001355c:	68 cc d6 02 c0       	push   0xc002d6cc
c0013561:	e8 1e d4 00 00       	call   c0020984 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013566:	eb e0                	jmp    c0013548 <SysKill(regs*)+0x34>
c0013568:	83 ec 0c             	sub    esp,0xc
c001356b:	68 c0 d6 02 c0       	push   0xc002d6c0
c0013570:	e8 03 cf 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013575:	8d 76 00             	lea    esi,[esi+0x0]
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	85 c0                	test   eax,eax
c001357d:	74 41                	je     c00135c0 <SysKill(regs*)+0xac>
c001357f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013582:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013585:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013587:	75 27                	jne    c00135b0 <SysKill(regs*)+0x9c>
c0013589:	8d 76 00             	lea    esi,[esi+0x0]
c001358c:	51                   	push   ecx
c001358d:	51                   	push   ecx
c001358e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013591:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013596:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013599:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001359f:	e8 80 c8 ff ff       	call   c000fe24 <KeRaiseSignal(SigHandlerBlock*, int)>
c00135a4:	83 c4 10             	add    esp,0x10
c00135a7:	31 c0                	xor    eax,eax
c00135a9:	31 d2                	xor    edx,edx
c00135ab:	eb 1b                	jmp    c00135c8 <SysKill(regs*)+0xb4>
c00135ad:	8d 76 00             	lea    esi,[esi+0x0]
c00135b0:	52                   	push   edx
c00135b1:	52                   	push   edx
c00135b2:	50                   	push   eax
c00135b3:	68 c0 d6 02 c0       	push   0xc002d6c0
c00135b8:	e8 c7 d3 00 00       	call   c0020984 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00135bd:	eb b9                	jmp    c0013578 <SysKill(regs*)+0x64>
c00135bf:	90                   	nop
c00135c0:	83 c8 ff             	or     eax,0xffffffff
c00135c3:	89 c2                	mov    edx,eax
c00135c5:	8d 76 00             	lea    esi,[esi+0x0]
c00135c8:	83 c4 08             	add    esp,0x8
c00135cb:	5b                   	pop    ebx
c00135cc:	c3                   	ret    

c00135cd <SysLoadDLL(regs*)>:
c00135cd:	56                   	push   esi
c00135ce:	31 d2                	xor    edx,edx
c00135d0:	53                   	push   ebx
c00135d1:	b8 01 00 00 00       	mov    eax,0x1
c00135d6:	51                   	push   ecx
c00135d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135db:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00135df:	0f 84 8c 00 00 00    	je     c0013671 <SysLoadDLL(regs*)+0xa4>
c00135e5:	83 ec 0c             	sub    esp,0xc
c00135e8:	68 14 01 00 00       	push   0x114
c00135ed:	e8 ae b3 ff ff       	call   c000e9a0 <malloc>
c00135f2:	83 c4 0c             	add    esp,0xc
c00135f5:	89 c3                	mov    ebx,eax
c00135f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135fc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135ff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013602:	53                   	push   ebx
c0013603:	e8 24 4b ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	31 d2                	xor    edx,edx
c001360d:	85 db                	test   ebx,ebx
c001360f:	b8 02 00 00 00       	mov    eax,0x2
c0013614:	74 5b                	je     c0013671 <SysLoadDLL(regs*)+0xa4>
c0013616:	83 ec 0c             	sub    esp,0xc
c0013619:	53                   	push   ebx
c001361a:	e8 ef 4d ff ff       	call   c000840e <File::exists()>
c001361f:	83 c4 10             	add    esp,0x10
c0013622:	84 c0                	test   al,al
c0013624:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013626:	75 11                	jne    c0013639 <SysLoadDLL(regs*)+0x6c>
c0013628:	83 ec 0c             	sub    esp,0xc
c001362b:	53                   	push   ebx
c001362c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001362f:	83 c4 10             	add    esp,0x10
c0013632:	b8 03 00 00 00       	mov    eax,0x3
c0013637:	eb 36                	jmp    c001366f <SysLoadDLL(regs*)+0xa2>
c0013639:	83 ec 0c             	sub    esp,0xc
c001363c:	53                   	push   ebx
c001363d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013640:	58                   	pop    eax
c0013641:	5a                   	pop    edx
c0013642:	6a 00                	push   0x0
c0013644:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013647:	e8 f6 15 00 00       	call   c0014c42 <Thr::loadDLL(char const*, bool)>
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	31 d2                	xor    edx,edx
c0013651:	89 c1                	mov    ecx,eax
c0013653:	b8 04 00 00 00       	mov    eax,0x4
c0013658:	85 c9                	test   ecx,ecx
c001365a:	74 15                	je     c0013671 <SysLoadDLL(regs*)+0xa4>
c001365c:	53                   	push   ebx
c001365d:	53                   	push   ebx
c001365e:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0013664:	51                   	push   ecx
c0013665:	e8 39 18 00 00       	call   c0014ea3 <Thr::executeDLL(unsigned long, void*)>
c001366a:	83 c4 10             	add    esp,0x10
c001366d:	31 c0                	xor    eax,eax
c001366f:	31 d2                	xor    edx,edx
c0013671:	59                   	pop    ecx
c0013672:	5b                   	pop    ebx
c0013673:	5e                   	pop    esi
c0013674:	c3                   	ret    

c0013675 <SysRead(regs*)>:
c0013675:	57                   	push   edi
c0013676:	56                   	push   esi
c0013677:	53                   	push   ebx
c0013678:	83 ec 10             	sub    esp,0x10
c001367b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001367f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013682:	83 f8 02             	cmp    eax,0x2
c0013685:	77 10                	ja     c0013697 <SysRead(regs*)+0x22>
c0013687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001368c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001368f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013695:	eb 0e                	jmp    c00136a5 <SysRead(regs*)+0x30>
c0013697:	83 ec 0c             	sub    esp,0xc
c001369a:	50                   	push   eax
c001369b:	e8 a1 e8 ff ff       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c00136a0:	83 c4 10             	add    esp,0x10
c00136a3:	89 c1                	mov    ecx,eax
c00136a5:	83 c8 ff             	or     eax,0xffffffff
c00136a8:	85 c9                	test   ecx,ecx
c00136aa:	89 c2                	mov    edx,eax
c00136ac:	74 28                	je     c00136d6 <SysRead(regs*)+0x61>
c00136ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136b6:	83 ec 0c             	sub    esp,0xc
c00136b9:	31 ff                	xor    edi,edi
c00136bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00136bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136c1:	52                   	push   edx
c00136c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136c5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00136c8:	57                   	push   edi
c00136c9:	56                   	push   esi
c00136ca:	51                   	push   ecx
c00136cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00136d2:	83 c4 20             	add    esp,0x20
c00136d5:	99                   	cdq    
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	5b                   	pop    ebx
c00136da:	5e                   	pop    esi
c00136db:	5f                   	pop    edi
c00136dc:	c3                   	ret    

c00136dd <SysRegisterSignal(regs*)>:
c00136dd:	83 ec 18             	sub    esp,0x18
c00136e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136e4:	6a 00                	push   0x0
c00136e6:	6a 00                	push   0x0
c00136e8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136f6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00136fc:	e8 ed c6 ff ff       	call   c000fdee <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013701:	83 c4 2c             	add    esp,0x2c
c0013704:	99                   	cdq    
c0013705:	c3                   	ret    

c0013706 <SysRegistryGetTypeFromPath(regs*)>:
c0013706:	53                   	push   ebx
c0013707:	81 ec 40 01 00 00    	sub    esp,0x140
c001370d:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013714:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013717:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001371a:	e8 dc 9b ff ff       	call   c000d2fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001371f:	83 c4 10             	add    esp,0x10
c0013722:	85 c0                	test   eax,eax
c0013724:	89 c1                	mov    ecx,eax
c0013726:	74 15                	je     c001373d <SysRegistryGetTypeFromPath(regs*)+0x37>
c0013728:	50                   	push   eax
c0013729:	8d 44 24 08          	lea    eax,[esp+0x8]
c001372d:	50                   	push   eax
c001372e:	51                   	push   ecx
c001372f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013732:	e8 a9 97 ff ff       	call   c000cee0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013737:	83 c4 10             	add    esp,0x10
c001373a:	99                   	cdq    
c001373b:	eb 05                	jmp    c0013742 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c001373d:	83 c8 ff             	or     eax,0xffffffff
c0013740:	89 c2                	mov    edx,eax
c0013742:	81 c4 38 01 00 00    	add    esp,0x138
c0013748:	5b                   	pop    ebx
c0013749:	c3                   	ret    

c001374a <SysRegistryReadExtent(regs*)>:
c001374a:	83 ec 1c             	sub    esp,0x1c
c001374d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013751:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013754:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013757:	85 c0                	test   eax,eax
c0013759:	79 1f                	jns    c001377a <SysRegistryReadExtent(regs*)+0x30>
c001375b:	52                   	push   edx
c001375c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013761:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013765:	52                   	push   edx
c0013766:	50                   	push   eax
c0013767:	51                   	push   ecx
c0013768:	e8 65 96 ff ff       	call   c000cdd2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001376d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013771:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013775:	83 c4 10             	add    esp,0x10
c0013778:	eb 14                	jmp    c001378e <SysRegistryReadExtent(regs*)+0x44>
c001377a:	83 ec 04             	sub    esp,0x4
c001377d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013780:	50                   	push   eax
c0013781:	51                   	push   ecx
c0013782:	e8 e9 90 ff ff       	call   c000c870 <CmGetString(Reghive_Tag*, int, char*)>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	31 c0                	xor    eax,eax
c001378c:	31 d2                	xor    edx,edx
c001378e:	83 c4 1c             	add    esp,0x1c
c0013791:	c3                   	ret    

c0013792 <SysRegistryPathToExtentLookup(regs*)>:
c0013792:	83 ec 14             	sub    esp,0x14
c0013795:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013799:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001379c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001379f:	e8 57 9b ff ff       	call   c000d2fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00137a4:	83 c4 1c             	add    esp,0x1c
c00137a7:	99                   	cdq    
c00137a8:	c3                   	ret    

c00137a9 <SysRegistryEnterDirectory(regs*)>:
c00137a9:	83 ec 14             	sub    esp,0x14
c00137ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137b0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00137b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137b6:	e8 2c 91 ff ff       	call   c000c8e7 <CmEnterDirectory(Reghive_Tag*, int)>
c00137bb:	83 c4 1c             	add    esp,0x1c
c00137be:	99                   	cdq    
c00137bf:	c3                   	ret    

c00137c0 <SysRegistryGetNext(regs*)>:
c00137c0:	83 ec 14             	sub    esp,0x14
c00137c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137c7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00137ca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137cd:	e8 54 91 ff ff       	call   c000c926 <CmGetNext(Reghive_Tag*, int)>
c00137d2:	83 c4 1c             	add    esp,0x1c
c00137d5:	99                   	cdq    
c00137d6:	c3                   	ret    

c00137d7 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00137d7:	57                   	push   edi
c00137d8:	56                   	push   esi
c00137d9:	53                   	push   ebx
c00137da:	81 ec 34 01 00 00    	sub    esp,0x134
c00137e0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00137e7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00137eb:	57                   	push   edi
c00137ec:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00137ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00137f2:	e8 e9 96 ff ff       	call   c000cee0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00137f7:	89 c3                	mov    ebx,eax
c00137f9:	58                   	pop    eax
c00137fa:	5a                   	pop    edx
c00137fb:	57                   	push   edi
c00137fc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00137ff:	e8 4c ce fe ff       	call   c0000650 <strcpy>
c0013804:	81 c4 40 01 00 00    	add    esp,0x140
c001380a:	89 d8                	mov    eax,ebx
c001380c:	5b                   	pop    ebx
c001380d:	99                   	cdq    
c001380e:	5e                   	pop    esi
c001380f:	5f                   	pop    edi
c0013810:	c3                   	ret    

c0013811 <SysRegistryOpen(regs*)>:
c0013811:	83 ec 18             	sub    esp,0x18
c0013814:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013818:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001381b:	e8 e0 8e ff ff       	call   c000c700 <CmOpen(char const*)>
c0013820:	83 c4 1c             	add    esp,0x1c
c0013823:	99                   	cdq    
c0013824:	c3                   	ret    

c0013825 <SysRegistryClose(regs*)>:
c0013825:	83 ec 18             	sub    esp,0x18
c0013828:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001382c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001382f:	e8 ea 8f ff ff       	call   c000c81e <CmClose(Reghive_Tag*)>
c0013834:	31 c0                	xor    eax,eax
c0013836:	31 d2                	xor    edx,edx
c0013838:	83 c4 1c             	add    esp,0x1c
c001383b:	c3                   	ret    

c001383c <SysRegistryEasyReadString(regs*)>:
c001383c:	57                   	push   edi
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013843:	83 ec 0c             	sub    esp,0xc
c0013846:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013849:	e8 b2 8e ff ff       	call   c000c700 <CmOpen(char const*)>
c001384e:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013851:	5a                   	pop    edx
c0013852:	59                   	pop    ecx
c0013853:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013856:	89 c3                	mov    ebx,eax
c0013858:	50                   	push   eax
c0013859:	e8 9d 9a ff ff       	call   c000d2fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001385e:	83 c4 10             	add    esp,0x10
c0013861:	89 c1                	mov    ecx,eax
c0013863:	b8 01 00 00 00       	mov    eax,0x1
c0013868:	85 c9                	test   ecx,ecx
c001386a:	7e 16                	jle    c0013882 <SysRegistryEasyReadString(regs*)+0x46>
c001386c:	50                   	push   eax
c001386d:	57                   	push   edi
c001386e:	51                   	push   ecx
c001386f:	53                   	push   ebx
c0013870:	e8 fb 8f ff ff       	call   c000c870 <CmGetString(Reghive_Tag*, int, char*)>
c0013875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013878:	e8 a1 8f ff ff       	call   c000c81e <CmClose(Reghive_Tag*)>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	31 c0                	xor    eax,eax
c0013882:	5b                   	pop    ebx
c0013883:	31 d2                	xor    edx,edx
c0013885:	5e                   	pop    esi
c0013886:	5f                   	pop    edi
c0013887:	c3                   	ret    

c0013888 <SysRegistryEasyReadInteger(regs*)>:
c0013888:	56                   	push   esi
c0013889:	53                   	push   ebx
c001388a:	83 ec 10             	sub    esp,0x10
c001388d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013891:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013894:	e8 67 8e ff ff       	call   c000c700 <CmOpen(char const*)>
c0013899:	5a                   	pop    edx
c001389a:	59                   	pop    ecx
c001389b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001389e:	89 c3                	mov    ebx,eax
c00138a0:	50                   	push   eax
c00138a1:	e8 55 9a ff ff       	call   c000d2fb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00138a6:	83 c4 10             	add    esp,0x10
c00138a9:	89 c1                	mov    ecx,eax
c00138ab:	b8 01 00 00 00       	mov    eax,0x1
c00138b0:	85 c9                	test   ecx,ecx
c00138b2:	7e 18                	jle    c00138cc <SysRegistryEasyReadInteger(regs*)+0x44>
c00138b4:	50                   	push   eax
c00138b5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00138b8:	51                   	push   ecx
c00138b9:	53                   	push   ebx
c00138ba:	e8 13 95 ff ff       	call   c000cdd2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00138bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138c2:	e8 57 8f ff ff       	call   c000c81e <CmClose(Reghive_Tag*)>
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	31 c0                	xor    eax,eax
c00138cc:	59                   	pop    ecx
c00138cd:	31 d2                	xor    edx,edx
c00138cf:	5b                   	pop    ebx
c00138d0:	5e                   	pop    esi
c00138d1:	c3                   	ret    

c00138d2 <SysSbrk(regs*)>:
c00138d2:	56                   	push   esi
c00138d3:	53                   	push   ebx
c00138d4:	50                   	push   eax
c00138d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138e1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00138e4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00138ea:	85 db                	test   ebx,ebx
c00138ec:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00138ef:	74 02                	je     c00138f3 <SysSbrk(regs*)+0x21>
c00138f1:	79 06                	jns    c00138f9 <SysSbrk(regs*)+0x27>
c00138f3:	89 f0                	mov    eax,esi
c00138f5:	31 d2                	xor    edx,edx
c00138f7:	eb 2a                	jmp    c0013923 <SysSbrk(regs*)+0x51>
c00138f9:	83 c8 ff             	or     eax,0xffffffff
c00138fc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013902:	89 c2                	mov    edx,eax
c0013904:	77 1d                	ja     c0013923 <SysSbrk(regs*)+0x51>
c0013906:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001390c:	50                   	push   eax
c001390d:	68 07 0c 00 00       	push   0xc07
c0013912:	c1 ea 0c             	shr    edx,0xc
c0013915:	52                   	push   edx
c0013916:	51                   	push   ecx
c0013917:	e8 a0 ef ff ff       	call   c00128bc <VAS::allocatePages(int, int)>
c001391c:	89 f0                	mov    eax,esi
c001391e:	31 d2                	xor    edx,edx
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	59                   	pop    ecx
c0013924:	5b                   	pop    ebx
c0013925:	5e                   	pop    esi
c0013926:	c3                   	ret    

c0013927 <SysSetCwd(regs*)>:
c0013927:	83 ec 14             	sub    esp,0x14
c001392a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001392e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013931:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013936:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013939:	e8 6f 4b ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c001393e:	83 c4 1c             	add    esp,0x1c
c0013941:	99                   	cdq    
c0013942:	c3                   	ret    

c0013943 <SysSetTime(regs*)>:
c0013943:	55                   	push   ebp
c0013944:	31 c9                	xor    ecx,ecx
c0013946:	57                   	push   edi
c0013947:	bd 0c 00 00 00       	mov    ebp,0xc
c001394c:	56                   	push   esi
c001394d:	53                   	push   ebx
c001394e:	31 db                	xor    ebx,ebx
c0013950:	83 ec 10             	sub    esp,0x10
c0013953:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013957:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001395a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001395d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013960:	89 c2                	mov    edx,eax
c0013962:	c1 e8 05             	shr    eax,0x5
c0013965:	83 e2 1f             	and    edx,0x1f
c0013968:	42                   	inc    edx
c0013969:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001396f:	c1 e7 10             	shl    edi,0x10
c0013972:	88 d1                	mov    cl,dl
c0013974:	31 d2                	xor    edx,edx
c0013976:	f7 f5                	div    ebp
c0013978:	89 dd                	mov    ebp,ebx
c001397a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013980:	88 d5                	mov    ch,dl
c0013982:	31 d2                	xor    edx,edx
c0013984:	0f b7 c1             	movzx  eax,cx
c0013987:	09 f8                	or     eax,edi
c0013989:	bf 3c 00 00 00       	mov    edi,0x3c
c001398e:	89 c1                	mov    ecx,eax
c0013990:	89 f0                	mov    eax,esi
c0013992:	f7 f7                	div    edi
c0013994:	c1 e2 10             	shl    edx,0x10
c0013997:	09 d5                	or     ebp,edx
c0013999:	31 d2                	xor    edx,edx
c001399b:	f7 f7                	div    edi
c001399d:	89 eb                	mov    ebx,ebp
c001399f:	bf 10 0e 00 00       	mov    edi,0xe10
c00139a4:	89 f0                	mov    eax,esi
c00139a6:	88 d7                	mov    bh,dl
c00139a8:	31 d2                	xor    edx,edx
c00139aa:	f7 f7                	div    edi
c00139ac:	bf 18 00 00 00       	mov    edi,0x18
c00139b1:	31 d2                	xor    edx,edx
c00139b3:	f7 f7                	div    edi
c00139b5:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00139ba:	88 d3                	mov    bl,dl
c00139bc:	53                   	push   ebx
c00139bd:	51                   	push   ecx
c00139be:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00139c4:	e8 b1 53 ff ff       	call   c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00139c9:	83 c4 1c             	add    esp,0x1c
c00139cc:	31 d2                	xor    edx,edx
c00139ce:	5b                   	pop    ebx
c00139cf:	5e                   	pop    esi
c00139d0:	83 f0 01             	xor    eax,0x1
c00139d3:	5f                   	pop    edi
c00139d4:	0f b6 c0             	movzx  eax,al
c00139d7:	5d                   	pop    ebp
c00139d8:	c3                   	ret    

c00139d9 <SysSymlink(regs*)>:
c00139d9:	56                   	push   esi
c00139da:	83 c8 ff             	or     eax,0xffffffff
c00139dd:	53                   	push   ebx
c00139de:	89 c2                	mov    edx,eax
c00139e0:	81 ec 34 02 00 00    	sub    esp,0x234
c00139e6:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00139ed:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00139f1:	74 50                	je     c0013a43 <SysSymlink(regs*)+0x6a>
c00139f3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00139f6:	85 c9                	test   ecx,ecx
c00139f8:	74 49                	je     c0013a43 <SysSymlink(regs*)+0x6a>
c00139fa:	6a 01                	push   0x1
c00139fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a04:	05 0c 01 00 00       	add    eax,0x10c
c0013a09:	50                   	push   eax
c0013a0a:	51                   	push   ecx
c0013a0b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013a0f:	56                   	push   esi
c0013a10:	e8 eb 43 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013a15:	6a 01                	push   0x1
c0013a17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a1f:	05 0c 01 00 00       	add    eax,0x10c
c0013a24:	50                   	push   eax
c0013a25:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a28:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0013a2f:	53                   	push   ebx
c0013a30:	e8 cb 43 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013a35:	83 c4 18             	add    esp,0x18
c0013a38:	56                   	push   esi
c0013a39:	53                   	push   ebx
c0013a3a:	e8 ef 3f ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c0013a3f:	83 c4 10             	add    esp,0x10
c0013a42:	99                   	cdq    
c0013a43:	81 c4 34 02 00 00    	add    esp,0x234
c0013a49:	5b                   	pop    ebx
c0013a4a:	5e                   	pop    esi
c0013a4b:	c3                   	ret    

c0013a4c <SysTimezone(regs*)>:
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a53:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013a57:	75 17                	jne    c0013a70 <SysTimezone(regs*)+0x24>
c0013a59:	83 ec 0c             	sub    esp,0xc
c0013a5c:	68 ba 33 02 c0       	push   0xc00233ba
c0013a61:	e8 e8 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a66:	83 c8 ff             	or     eax,0xffffffff
c0013a69:	83 c4 10             	add    esp,0x10
c0013a6c:	89 c2                	mov    edx,eax
c0013a6e:	eb 17                	jmp    c0013a87 <SysTimezone(regs*)+0x3b>
c0013a70:	83 ec 0c             	sub    esp,0xc
c0013a73:	68 cf 33 02 c0       	push   0xc00233cf
c0013a78:	e8 d1 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a7d:	83 c4 10             	add    esp,0x10
c0013a80:	b8 01 00 00 00       	mov    eax,0x1
c0013a85:	31 d2                	xor    edx,edx
c0013a87:	83 c4 0c             	add    esp,0xc
c0013a8a:	c3                   	ret    

c0013a8b <SysTruncate(regs*)>:
c0013a8b:	55                   	push   ebp
c0013a8c:	57                   	push   edi
c0013a8d:	31 ff                	xor    edi,edi
c0013a8f:	56                   	push   esi
c0013a90:	53                   	push   ebx
c0013a91:	83 ec 0c             	sub    esp,0xc
c0013a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a98:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013a9b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013a9f:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013aa2:	89 ce                	mov    esi,ecx
c0013aa4:	0f 84 9a 00 00 00    	je     c0013b44 <SysTruncate(regs*)+0xb9>
c0013aaa:	83 ec 0c             	sub    esp,0xc
c0013aad:	68 14 01 00 00       	push   0x114
c0013ab2:	e8 e9 ae ff ff       	call   c000e9a0 <malloc>
c0013ab7:	83 c4 0c             	add    esp,0xc
c0013aba:	89 c3                	mov    ebx,eax
c0013abc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ac4:	55                   	push   ebp
c0013ac5:	53                   	push   ebx
c0013ac6:	e8 61 46 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013acb:	83 c4 10             	add    esp,0x10
c0013ace:	31 d2                	xor    edx,edx
c0013ad0:	85 db                	test   ebx,ebx
c0013ad2:	b8 03 00 00 00       	mov    eax,0x3
c0013ad7:	0f 84 a2 00 00 00    	je     c0013b7f <SysTruncate(regs*)+0xf4>
c0013add:	51                   	push   ecx
c0013ade:	51                   	push   ecx
c0013adf:	6a 02                	push   0x2
c0013ae1:	53                   	push   ebx
c0013ae2:	e8 63 46 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0013ae7:	83 c4 10             	add    esp,0x10
c0013aea:	85 c0                	test   eax,eax
c0013aec:	74 13                	je     c0013b01 <SysTruncate(regs*)+0x76>
c0013aee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	53                   	push   ebx
c0013af4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013af7:	83 c4 10             	add    esp,0x10
c0013afa:	b8 04 00 00 00       	mov    eax,0x4
c0013aff:	eb 7c                	jmp    c0013b7d <SysTruncate(regs*)+0xf2>
c0013b01:	52                   	push   edx
c0013b02:	57                   	push   edi
c0013b03:	56                   	push   esi
c0013b04:	53                   	push   ebx
c0013b05:	e8 54 47 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0013b0a:	83 c4 10             	add    esp,0x10
c0013b0d:	85 c0                	test   eax,eax
c0013b0f:	74 1b                	je     c0013b2c <SysTruncate(regs*)+0xa1>
c0013b11:	83 ec 0c             	sub    esp,0xc
c0013b14:	53                   	push   ebx
c0013b15:	e8 8e 46 ff ff       	call   c00081a8 <File::close()>
c0013b1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b22:	83 c4 10             	add    esp,0x10
c0013b25:	b8 05 00 00 00       	mov    eax,0x5
c0013b2a:	eb 51                	jmp    c0013b7d <SysTruncate(regs*)+0xf2>
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	53                   	push   ebx
c0013b30:	e8 73 46 ff ff       	call   c00081a8 <File::close()>
c0013b35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b3d:	83 c4 10             	add    esp,0x10
c0013b40:	31 c0                	xor    eax,eax
c0013b42:	eb 39                	jmp    c0013b7d <SysTruncate(regs*)+0xf2>
c0013b44:	31 d2                	xor    edx,edx
c0013b46:	83 fd 02             	cmp    ebp,0x2
c0013b49:	b8 01 00 00 00       	mov    eax,0x1
c0013b4e:	7e 2f                	jle    c0013b7f <SysTruncate(regs*)+0xf4>
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	51                   	push   ecx
c0013b54:	e8 e8 e3 ff ff       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c0013b59:	83 c4 10             	add    esp,0x10
c0013b5c:	31 d2                	xor    edx,edx
c0013b5e:	89 c1                	mov    ecx,eax
c0013b60:	b8 02 00 00 00       	mov    eax,0x2
c0013b65:	85 c9                	test   ecx,ecx
c0013b67:	74 16                	je     c0013b7f <SysTruncate(regs*)+0xf4>
c0013b69:	50                   	push   eax
c0013b6a:	57                   	push   edi
c0013b6b:	56                   	push   esi
c0013b6c:	51                   	push   ecx
c0013b6d:	e8 ec 46 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	85 c0                	test   eax,eax
c0013b77:	0f 95 c0             	setne  al
c0013b7a:	0f b6 c0             	movzx  eax,al
c0013b7d:	31 d2                	xor    edx,edx
c0013b7f:	83 c4 0c             	add    esp,0xc
c0013b82:	5b                   	pop    ebx
c0013b83:	5e                   	pop    esi
c0013b84:	5f                   	pop    edi
c0013b85:	5d                   	pop    ebp
c0013b86:	c3                   	ret    

c0013b87 <SysWrite(regs*)>:
c0013b87:	57                   	push   edi
c0013b88:	56                   	push   esi
c0013b89:	53                   	push   ebx
c0013b8a:	83 ec 10             	sub    esp,0x10
c0013b8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b91:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b94:	83 f8 02             	cmp    eax,0x2
c0013b97:	77 10                	ja     c0013ba9 <SysWrite(regs*)+0x22>
c0013b99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ba1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ba7:	eb 0e                	jmp    c0013bb7 <SysWrite(regs*)+0x30>
c0013ba9:	83 ec 0c             	sub    esp,0xc
c0013bac:	50                   	push   eax
c0013bad:	e8 8f e3 ff ff       	call   c0011f41 <KeGetFileFromDescriptor(int)>
c0013bb2:	83 c4 10             	add    esp,0x10
c0013bb5:	89 c1                	mov    ecx,eax
c0013bb7:	83 c8 ff             	or     eax,0xffffffff
c0013bba:	85 c9                	test   ecx,ecx
c0013bbc:	89 c2                	mov    edx,eax
c0013bbe:	74 28                	je     c0013be8 <SysWrite(regs*)+0x61>
c0013bc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013bc8:	83 ec 0c             	sub    esp,0xc
c0013bcb:	31 ff                	xor    edi,edi
c0013bcd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bd1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bd3:	52                   	push   edx
c0013bd4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bd7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013bda:	57                   	push   edi
c0013bdb:	56                   	push   esi
c0013bdc:	51                   	push   ecx
c0013bdd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013be0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013be4:	83 c4 20             	add    esp,0x20
c0013be7:	99                   	cdq    
c0013be8:	83 c4 10             	add    esp,0x10
c0013beb:	5b                   	pop    ebx
c0013bec:	5e                   	pop    esi
c0013bed:	5f                   	pop    edi
c0013bee:	c3                   	ret    

c0013bef <SysWsbe(regs*)>:
c0013bef:	55                   	push   ebp
c0013bf0:	57                   	push   edi
c0013bf1:	56                   	push   esi
c0013bf2:	53                   	push   ebx
c0013bf3:	83 ec 3c             	sub    esp,0x3c
c0013bf6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013bfa:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013c01:	75 2d                	jne    c0013c30 <SysWsbe(regs*)+0x41>
c0013c03:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013c0a:	75 24                	jne    c0013c30 <SysWsbe(regs*)+0x41>
c0013c0c:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013c13:	75 1b                	jne    c0013c30 <SysWsbe(regs*)+0x41>
c0013c15:	6a 01                	push   0x1
c0013c17:	6a 00                	push   0x0
c0013c19:	68 8d 95 00 c0       	push   0xc000958d
c0013c1e:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0013c24:	e8 bb 18 00 00       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	31 c0                	xor    eax,eax
c0013c2e:	eb 52                	jmp    c0013c82 <SysWsbe(regs*)+0x93>
c0013c30:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013c34:	be 0e 34 02 c0       	mov    esi,0xc002340e
c0013c39:	b9 0b 00 00 00       	mov    ecx,0xb
c0013c3e:	fc                   	cld    
c0013c3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c41:	83 ec 0c             	sub    esp,0xc
c0013c44:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013c48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c50:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013c56:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c58:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013c5b:	57                   	push   edi
c0013c5c:	e8 1f c9 fe ff       	call   c0000580 <strlen>
c0013c61:	5a                   	pop    edx
c0013c62:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c66:	52                   	push   edx
c0013c67:	31 d2                	xor    edx,edx
c0013c69:	57                   	push   edi
c0013c6a:	52                   	push   edx
c0013c6b:	50                   	push   eax
c0013c6c:	56                   	push   esi
c0013c6d:	ff d5                	call   ebp
c0013c6f:	83 c4 14             	add    esp,0x14
c0013c72:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c75:	e8 66 22 00 00       	call   c0015ee0 <terminateTask(int)>
c0013c7a:	83 c4 10             	add    esp,0x10
c0013c7d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013c82:	83 c4 3c             	add    esp,0x3c
c0013c85:	31 d2                	xor    edx,edx
c0013c87:	5b                   	pop    ebx
c0013c88:	5e                   	pop    esi
c0013c89:	5f                   	pop    edi
c0013c8a:	5d                   	pop    ebp
c0013c8b:	c3                   	ret    

c0013c8c <SysYield(regs*)>:
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	fa                   	cli    
c0013c90:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013c96:	e8 95 1a 00 00       	call   c0015730 <schedule()>
c0013c9b:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013ca2:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013ca9:	75 01                	jne    c0013cac <SysYield(regs*)+0x20>
c0013cab:	fb                   	sti    
c0013cac:	31 c0                	xor    eax,eax
c0013cae:	31 d2                	xor    edx,edx
c0013cb0:	83 c4 0c             	add    esp,0xc
c0013cb3:	c3                   	ret    

c0013cb4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013cb4:	55                   	push   ebp
c0013cb5:	57                   	push   edi
c0013cb6:	56                   	push   esi
c0013cb7:	53                   	push   ebx
c0013cb8:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013cbe:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013cc9:	74 3b                	je     c0013d06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013ccb:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013cd3:	74 31                	je     c0013d06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013cd5:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013cdd:	75 27                	jne    c0013d06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013cdf:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013ce6:	05 00 10 00 00       	add    eax,0x1000
c0013ceb:	89 c2                	mov    edx,eax
c0013ced:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013cf2:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013cf9:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013cff:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013d06:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013d0d:	83 ec 0c             	sub    esp,0xc
c0013d10:	6a 01                	push   0x1
c0013d12:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013d18:	e8 be e3 ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013d26:	89 c3                	mov    ebx,eax
c0013d28:	0f 86 27 01 00 00    	jbe    c0013e55 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0013d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d36:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013d3d:	c1 ee 0c             	shr    esi,0xc
c0013d40:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013d44:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013d4b:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013d52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d56:	29 ef                	sub    edi,ebp
c0013d58:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013d5c:	0f 83 fa 00 00 00    	jae    c0013e5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013d62:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013d68:	b8 00 10 00 00       	mov    eax,0x1000
c0013d6d:	0f 47 f8             	cmova  edi,eax
c0013d70:	83 ec 0c             	sub    esp,0xc
c0013d73:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013d7a:	31 d2                	xor    edx,edx
c0013d7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d82:	50                   	push   eax
c0013d83:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013d87:	56                   	push   esi
c0013d88:	52                   	push   edx
c0013d89:	57                   	push   edi
c0013d8a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013d91:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d94:	83 c4 20             	add    esp,0x20
c0013d97:	85 c0                	test   eax,eax
c0013d99:	75 06                	jne    c0013da1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013d9b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013d9f:	74 13                	je     c0013db4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013da1:	83 ec 0c             	sub    esp,0xc
c0013da4:	53                   	push   ebx
c0013da5:	e8 2f e6 ff ff       	call   c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	31 c0                	xor    eax,eax
c0013daf:	e9 80 01 00 00       	jmp    c0013f34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0013db4:	fa                   	cli    
c0013db5:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013dbb:	e8 20 b1 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0013dc0:	6a 07                	push   0x7
c0013dc2:	53                   	push   ebx
c0013dc3:	50                   	push   eax
c0013dc4:	89 c7                	mov    edi,eax
c0013dc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dcb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013dce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013dd4:	e8 db e9 ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013dd9:	83 c4 0c             	add    esp,0xc
c0013ddc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013de3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013de9:	6a 00                	push   0x0
c0013deb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013df0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013df3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013df9:	e8 22 e8 ff ff       	call   c0012620 <VAS::mapOtherVASIn(bool, VAS*)>
c0013dfe:	58                   	pop    eax
c0013dff:	5a                   	pop    edx
c0013e00:	68 07 0c 00 00       	push   0xc07
c0013e05:	55                   	push   ebp
c0013e06:	57                   	push   edi
c0013e07:	89 df                	mov    edi,ebx
c0013e09:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013e10:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e16:	6a 00                	push   0x0
c0013e18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e20:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e26:	e8 dd eb ff ff       	call   c0012a08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013e2b:	b9 00 10 00 00       	mov    ecx,0x1000
c0013e30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e32:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013e39:	83 c4 20             	add    esp,0x20
c0013e3c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013e43:	75 01                	jne    c0013e46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0013e45:	fb                   	sti    
c0013e46:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013e4a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013e50:	e9 ef fe ff ff       	jmp    c0013d44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013e55:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013e5c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013e63:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013e69:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013e6f:	0f 86 b1 00 00 00    	jbe    c0013f26 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013e75:	fa                   	cli    
c0013e76:	51                   	push   ecx
c0013e77:	31 ff                	xor    edi,edi
c0013e79:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013e80:	c1 ee 0c             	shr    esi,0xc
c0013e83:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013e89:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e8f:	6a 00                	push   0x0
c0013e91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e99:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e9f:	e8 7c e7 ff ff       	call   c0012620 <VAS::mapOtherVASIn(bool, VAS*)>
c0013ea4:	83 c4 10             	add    esp,0x10
c0013ea7:	e8 34 b0 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0013eac:	47                   	inc    edi
c0013ead:	6a 07                	push   0x7
c0013eaf:	53                   	push   ebx
c0013eb0:	50                   	push   eax
c0013eb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ebb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013ebe:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013ec4:	e8 eb e8 ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ec9:	58                   	pop    eax
c0013eca:	5a                   	pop    edx
c0013ecb:	68 07 0c 00 00       	push   0xc07
c0013ed0:	55                   	push   ebp
c0013ed1:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013edb:	50                   	push   eax
c0013edc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013ee3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ee9:	6a 00                	push   0x0
c0013eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ef0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ef3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ef9:	e8 0a eb ff ff       	call   c0012a08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013efe:	83 c4 1c             	add    esp,0x1c
c0013f01:	68 00 10 00 00       	push   0x1000
c0013f06:	6a 00                	push   0x0
c0013f08:	53                   	push   ebx
c0013f09:	e8 e2 c5 fe ff       	call   c00004f0 <memset>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	39 fe                	cmp    esi,edi
c0013f13:	77 92                	ja     c0013ea7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0013f15:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013f1c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013f23:	75 01                	jne    c0013f26 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013f25:	fb                   	sti    
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	53                   	push   ebx
c0013f2a:	e8 aa e4 ff ff       	call   c00123d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	b0 01                	mov    al,0x1
c0013f34:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013f3a:	5b                   	pop    ebx
c0013f3b:	5e                   	pop    esi
c0013f3c:	5f                   	pop    edi
c0013f3d:	5d                   	pop    ebp
c0013f3e:	c3                   	ret    

c0013f3f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013f3f:	55                   	push   ebp
c0013f40:	57                   	push   edi
c0013f41:	56                   	push   esi
c0013f42:	53                   	push   ebx
c0013f43:	83 ec 48             	sub    esp,0x48
c0013f46:	68 14 01 00 00       	push   0x114
c0013f4b:	e8 50 aa ff ff       	call   c000e9a0 <malloc>
c0013f50:	83 c4 0c             	add    esp,0xc
c0013f53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013f57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013f5b:	89 c7                	mov    edi,eax
c0013f5d:	50                   	push   eax
c0013f5e:	e8 c9 41 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013f63:	58                   	pop    eax
c0013f64:	5a                   	pop    edx
c0013f65:	6a 01                	push   0x1
c0013f67:	57                   	push   edi
c0013f68:	e8 dd 41 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	85 c0                	test   eax,eax
c0013f72:	0f 85 4c 01 00 00    	jne    c00140c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013f78:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	6a 34                	push   0x34
c0013f85:	e8 16 aa ff ff       	call   c000e9a0 <malloc>
c0013f8a:	89 c3                	mov    ebx,eax
c0013f8c:	58                   	pop    eax
c0013f8d:	8b 07                	mov    eax,DWORD PTR [edi]
c0013f8f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013f93:	56                   	push   esi
c0013f94:	53                   	push   ebx
c0013f95:	6a 00                	push   0x0
c0013f97:	6a 34                	push   0x34
c0013f99:	57                   	push   edi
c0013f9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f9d:	83 c4 20             	add    esp,0x20
c0013fa0:	85 c0                	test   eax,eax
c0013fa2:	0f 85 1c 01 00 00    	jne    c00140c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013fa8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013fae:	0f 85 10 01 00 00    	jne    c00140c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013fb4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fb7:	85 c0                	test   eax,eax
c0013fb9:	0f 84 05 01 00 00    	je     c00140c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013fbf:	31 d2                	xor    edx,edx
c0013fc1:	55                   	push   ebp
c0013fc2:	52                   	push   edx
c0013fc3:	50                   	push   eax
c0013fc4:	57                   	push   edi
c0013fc5:	e8 3e 42 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0013fca:	83 c4 10             	add    esp,0x10
c0013fcd:	85 c0                	test   eax,eax
c0013fcf:	0f 85 ef 00 00 00    	jne    c00140c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013fd5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013fdf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013fe3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013fe7:	0f af c2             	imul   eax,edx
c0013fea:	50                   	push   eax
c0013feb:	e8 b0 a9 ff ff       	call   c000e9a0 <malloc>
c0013ff0:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013ff2:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ff5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013ff9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ffd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014001:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014005:	0f af c2             	imul   eax,edx
c0014008:	99                   	cdq    
c0014009:	52                   	push   edx
c001400a:	50                   	push   eax
c001400b:	57                   	push   edi
c001400c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001400f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014012:	83 c4 20             	add    esp,0x20
c0014015:	85 c0                	test   eax,eax
c0014017:	0f 84 a7 00 00 00    	je     c00140c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001401d:	31 d2                	xor    edx,edx
c001401f:	51                   	push   ecx
c0014020:	52                   	push   edx
c0014021:	50                   	push   eax
c0014022:	57                   	push   edi
c0014023:	e8 e0 41 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014028:	83 c4 10             	add    esp,0x10
c001402b:	85 c0                	test   eax,eax
c001402d:	0f 85 91 00 00 00    	jne    c00140c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014033:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014037:	83 ec 0c             	sub    esp,0xc
c001403a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001403e:	0f af c2             	imul   eax,edx
c0014041:	50                   	push   eax
c0014042:	e8 59 a9 ff ff       	call   c000e9a0 <malloc>
c0014047:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014049:	89 34 24             	mov    DWORD PTR [esp],esi
c001404c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014054:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014058:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001405c:	0f af c2             	imul   eax,edx
c001405f:	99                   	cdq    
c0014060:	52                   	push   edx
c0014061:	50                   	push   eax
c0014062:	57                   	push   edi
c0014063:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014066:	83 c4 20             	add    esp,0x20
c0014069:	31 c9                	xor    ecx,ecx
c001406b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014073:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014077:	0f b7 e9             	movzx  ebp,cx
c001407a:	0f 83 86 00 00 00    	jae    c0014106 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014080:	c1 e5 05             	shl    ebp,0x5
c0014083:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014087:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001408b:	75 73                	jne    c0014100 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001408d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014094:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014097:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001409b:	52                   	push   edx
c001409c:	31 d2                	xor    edx,edx
c001409e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00140a1:	52                   	push   edx
c00140a2:	50                   	push   eax
c00140a3:	57                   	push   edi
c00140a4:	e8 5f 41 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00140b0:	85 c0                	test   eax,eax
c00140b2:	74 17                	je     c00140cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00140b4:	83 ec 0c             	sub    esp,0xc
c00140b7:	68 3a 34 02 c0       	push   0xc002343a
c00140bc:	e8 8d 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	31 c0                	xor    eax,eax
c00140c6:	e9 8b 00 00 00       	jmp    c0014156 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00140cb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00140cf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00140d2:	83 ec 0c             	sub    esp,0xc
c00140d5:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00140d8:	50                   	push   eax
c00140d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00140dd:	56                   	push   esi
c00140de:	57                   	push   edi
c00140df:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00140e3:	e8 cc fb ff ff       	call   c0013cb4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00140e8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00140ec:	83 c4 20             	add    esp,0x20
c00140ef:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00140f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00140f7:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00140fc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014100:	41                   	inc    ecx
c0014101:	e9 6d ff ff ff       	jmp    c0014073 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014106:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014111:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014115:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c001411b:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014121:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014126:	05 00 10 00 00       	add    eax,0x1000
c001412b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001412e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014132:	e8 79 a8 ff ff       	call   c000e9b0 <free>
c0014137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001413a:	e8 71 a8 ff ff       	call   c000e9b0 <free>
c001413f:	58                   	pop    eax
c0014140:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014144:	e8 67 a8 ff ff       	call   c000e9b0 <free>
c0014149:	89 3c 24             	mov    DWORD PTR [esp],edi
c001414c:	e8 57 40 ff ff       	call   c00081a8 <File::close()>
c0014151:	83 c4 10             	add    esp,0x10
c0014154:	b0 01                	mov    al,0x1
c0014156:	83 c4 3c             	add    esp,0x3c
c0014159:	5b                   	pop    ebx
c001415a:	5e                   	pop    esi
c001415b:	5f                   	pop    edi
c001415c:	5d                   	pop    ebp
c001415d:	c3                   	ret    

c001415e <Thr::runtimeReferenceHelper()>:
c001415e:	83 ec 18             	sub    esp,0x18
c0014161:	68 42 34 02 c0       	push   0xc0023442
c0014166:	e8 e3 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001416b:	fa                   	cli    
c001416c:	83 c4 10             	add    esp,0x10
c001416f:	eb fe                	jmp    c001416f <Thr::runtimeReferenceHelper()+0x11>

c0014171 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014171:	57                   	push   edi
c0014172:	56                   	push   esi
c0014173:	53                   	push   ebx
c0014174:	31 db                	xor    ebx,ebx
c0014176:	39 1d 80 d6 02 c0    	cmp    DWORD PTR ds:0xc002d680,ebx
c001417c:	7e 3c                	jle    c00141ba <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001417e:	8b 34 9d 00 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2a00]
c0014185:	31 ff                	xor    edi,edi
c0014187:	39 3c 9d 00 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2b00],edi
c001418e:	7e 27                	jle    c00141b7 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014190:	50                   	push   eax
c0014191:	50                   	push   eax
c0014192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014196:	8b 06                	mov    eax,DWORD PTR [esi]
c0014198:	03 04 9d 80 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a80]
c001419f:	50                   	push   eax
c00141a0:	e8 db c5 fe ff       	call   c0000780 <strcmp>
c00141a5:	83 c4 10             	add    esp,0x10
c00141a8:	85 c0                	test   eax,eax
c00141aa:	75 05                	jne    c00141b1 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00141ac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00141af:	eb 0b                	jmp    c00141bc <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00141b1:	83 c6 10             	add    esi,0x10
c00141b4:	47                   	inc    edi
c00141b5:	eb d0                	jmp    c0014187 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00141b7:	43                   	inc    ebx
c00141b8:	eb bc                	jmp    c0014176 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00141ba:	31 c0                	xor    eax,eax
c00141bc:	5b                   	pop    ebx
c00141bd:	5e                   	pop    esi
c00141be:	5f                   	pop    edi
c00141bf:	c3                   	ret    

c00141c0 <Thr::loadKernelSymbolTable(char const*)>:
c00141c0:	55                   	push   ebp
c00141c1:	57                   	push   edi
c00141c2:	56                   	push   esi
c00141c3:	53                   	push   ebx
c00141c4:	83 ec 68             	sub    esp,0x68
c00141c7:	68 14 01 00 00       	push   0x114
c00141cc:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c00141d2:	e8 c9 a7 ff ff       	call   c000e9a0 <malloc>
c00141d7:	83 c4 0c             	add    esp,0xc
c00141da:	56                   	push   esi
c00141db:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00141df:	89 c3                	mov    ebx,eax
c00141e1:	50                   	push   eax
c00141e2:	e8 45 3f ff ff       	call   c000812c <File::File(char const*, Process*)>
c00141e7:	5e                   	pop    esi
c00141e8:	5f                   	pop    edi
c00141e9:	6a 01                	push   0x1
c00141eb:	53                   	push   ebx
c00141ec:	e8 59 3f ff ff       	call   c000814a <File::open(FileOpenMode)>
c00141f1:	83 c4 10             	add    esp,0x10
c00141f4:	85 c0                	test   eax,eax
c00141f6:	74 0a                	je     c0014202 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00141f8:	83 ec 0c             	sub    esp,0xc
c00141fb:	68 64 34 02 c0       	push   0xc0023464
c0014200:	eb 34                	jmp    c0014236 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014202:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001420a:	83 ec 0c             	sub    esp,0xc
c001420d:	6a 34                	push   0x34
c001420f:	e8 8c a7 ff ff       	call   c000e9a0 <malloc>
c0014214:	59                   	pop    ecx
c0014215:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014219:	89 c7                	mov    edi,eax
c001421b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001421d:	56                   	push   esi
c001421e:	57                   	push   edi
c001421f:	6a 00                	push   0x0
c0014221:	6a 34                	push   0x34
c0014223:	53                   	push   ebx
c0014224:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014227:	83 c4 20             	add    esp,0x20
c001422a:	85 c0                	test   eax,eax
c001422c:	74 17                	je     c0014245 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	68 7b 34 02 c0       	push   0xc002347b
c0014236:	e8 ab aa ff ff       	call   c000ece6 <KePanic(char const*)>
c001423b:	83 c4 10             	add    esp,0x10
c001423e:	31 c0                	xor    eax,eax
c0014240:	e9 31 02 00 00       	jmp    c0014476 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014245:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001424b:	75 e1                	jne    c001422e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001424d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014250:	85 c0                	test   eax,eax
c0014252:	74 da                	je     c001422e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014254:	52                   	push   edx
c0014255:	31 d2                	xor    edx,edx
c0014257:	52                   	push   edx
c0014258:	50                   	push   eax
c0014259:	53                   	push   ebx
c001425a:	e8 a9 3f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001425f:	83 c4 10             	add    esp,0x10
c0014262:	85 c0                	test   eax,eax
c0014264:	75 c8                	jne    c001422e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014266:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001426a:	83 ec 0c             	sub    esp,0xc
c001426d:	31 ed                	xor    ebp,ebp
c001426f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014273:	0f af c2             	imul   eax,edx
c0014276:	50                   	push   eax
c0014277:	e8 24 a7 ff ff       	call   c000e9a0 <malloc>
c001427c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001427e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014281:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014285:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014289:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001428d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014291:	0f af c2             	imul   eax,edx
c0014294:	99                   	cdq    
c0014295:	52                   	push   edx
c0014296:	50                   	push   eax
c0014297:	53                   	push   ebx
c0014298:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001429b:	83 c4 20             	add    esp,0x20
c001429e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00142a6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142ae:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00142b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142be:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00142c2:	0f b7 f5             	movzx  esi,bp
c00142c5:	0f 83 a7 00 00 00    	jae    c0014372 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00142cb:	6b f6 28             	imul   esi,esi,0x28
c00142ce:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00142d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00142d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142d9:	50                   	push   eax
c00142da:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00142de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142e2:	8b 16                	mov    edx,DWORD PTR [esi]
c00142e4:	6b c0 28             	imul   eax,eax,0x28
c00142e7:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00142eb:	89 d0                	mov    eax,edx
c00142ed:	31 d2                	xor    edx,edx
c00142ef:	52                   	push   edx
c00142f0:	50                   	push   eax
c00142f1:	53                   	push   ebx
c00142f2:	e8 11 3f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00142f7:	83 c4 0c             	add    esp,0xc
c00142fa:	6a 20                	push   0x20
c00142fc:	6a 00                	push   0x0
c00142fe:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014302:	52                   	push   edx
c0014303:	e8 e8 c1 fe ff       	call   c00004f0 <memset>
c0014308:	58                   	pop    eax
c0014309:	8b 03                	mov    eax,DWORD PTR [ebx]
c001430b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001430f:	51                   	push   ecx
c0014310:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014314:	52                   	push   edx
c0014315:	6a 00                	push   0x0
c0014317:	6a 1f                	push   0x1f
c0014319:	53                   	push   ebx
c001431a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001431d:	83 c4 18             	add    esp,0x18
c0014320:	68 92 34 02 c0       	push   0xc0023492
c0014325:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014329:	52                   	push   edx
c001432a:	e8 51 c4 fe ff       	call   c0000780 <strcmp>
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	85 c0                	test   eax,eax
c0014334:	75 0f                	jne    c0014345 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014336:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014339:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001433d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014341:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014345:	50                   	push   eax
c0014346:	50                   	push   eax
c0014347:	68 9a 34 02 c0       	push   0xc002349a
c001434c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014350:	50                   	push   eax
c0014351:	e8 2a c4 fe ff       	call   c0000780 <strcmp>
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	85 c0                	test   eax,eax
c001435b:	75 0f                	jne    c001436c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001435d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014360:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014364:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001436c:	45                   	inc    ebp
c001436d:	e9 4c ff ff ff       	jmp    c00142be <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014372:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014377:	75 10                	jne    c0014389 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014379:	83 ec 0c             	sub    esp,0xc
c001437c:	68 a2 34 02 c0       	push   0xc00234a2
c0014381:	e8 60 a9 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001438e:	75 10                	jne    c00143a0 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014390:	83 ec 0c             	sub    esp,0xc
c0014393:	68 a2 34 02 c0       	push   0xc00234a2
c0014398:	e8 49 a9 ff ff       	call   c000ece6 <KePanic(char const*)>
c001439d:	83 c4 10             	add    esp,0x10
c00143a0:	50                   	push   eax
c00143a1:	31 d2                	xor    edx,edx
c00143a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a7:	52                   	push   edx
c00143a8:	50                   	push   eax
c00143a9:	53                   	push   ebx
c00143aa:	e8 59 3e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00143af:	5a                   	pop    edx
c00143b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00143b4:	e8 e7 a5 ff ff       	call   c000e9a0 <malloc>
c00143b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143bd:	31 c9                	xor    ecx,ecx
c00143bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00143c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143c5:	5e                   	pop    esi
c00143c6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00143ca:	55                   	push   ebp
c00143cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143cf:	51                   	push   ecx
c00143d0:	52                   	push   edx
c00143d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00143d5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00143d9:	53                   	push   ebx
c00143da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143dd:	83 c4 14             	add    esp,0x14
c00143e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143e4:	e8 b7 a5 ff ff       	call   c000e9a0 <malloc>
c00143e9:	89 c6                	mov    esi,eax
c00143eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00143f0:	56                   	push   esi
c00143f1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00143f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00143f9:	51                   	push   ecx
c00143fa:	52                   	push   edx
c00143fb:	53                   	push   ebx
c00143fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014403:	83 c4 1c             	add    esp,0x1c
c0014406:	8b 15 80 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d680
c001440c:	c1 e8 04             	shr    eax,0x4
c001440f:	89 04 95 00 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b00],eax
c0014416:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001441a:	31 d2                	xor    edx,edx
c001441c:	52                   	push   edx
c001441d:	50                   	push   eax
c001441e:	53                   	push   ebx
c001441f:	e8 e4 3d ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014424:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014426:	31 d2                	xor    edx,edx
c0014428:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001442b:	56                   	push   esi
c001442c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014430:	52                   	push   edx
c0014431:	50                   	push   eax
c0014432:	53                   	push   ebx
c0014433:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014436:	83 c4 14             	add    esp,0x14
c0014439:	53                   	push   ebx
c001443a:	e8 69 3d ff ff       	call   c00081a8 <File::close()>
c001443f:	5d                   	pop    ebp
c0014440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014444:	e8 67 a5 ff ff       	call   c000e9b0 <free>
c0014449:	89 3c 24             	mov    DWORD PTR [esp],edi
c001444c:	e8 5f a5 ff ff       	call   c000e9b0 <free>
c0014451:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c0014456:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001445a:	83 c4 10             	add    esp,0x10
c001445d:	89 34 85 80 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a80],esi
c0014464:	8d 50 01             	lea    edx,[eax+0x1]
c0014467:	89 0c 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],ecx
c001446e:	b0 01                	mov    al,0x1
c0014470:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c0014476:	83 c4 5c             	add    esp,0x5c
c0014479:	5b                   	pop    ebx
c001447a:	5e                   	pop    esi
c001447b:	5f                   	pop    edi
c001447c:	5d                   	pop    ebp
c001447d:	c3                   	ret    

c001447e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001447e:	55                   	push   ebp
c001447f:	57                   	push   edi
c0014480:	56                   	push   esi
c0014481:	53                   	push   ebx
c0014482:	81 ec 68 03 00 00    	sub    esp,0x368
c0014488:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001448f:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c0014495:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014499:	68 14 01 00 00       	push   0x114
c001449e:	e8 fd a4 ff ff       	call   c000e9a0 <malloc>
c00144a3:	83 c4 0c             	add    esp,0xc
c00144a6:	56                   	push   esi
c00144a7:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00144ae:	50                   	push   eax
c00144af:	89 c3                	mov    ebx,eax
c00144b1:	e8 76 3c ff ff       	call   c000812c <File::File(char const*, Process*)>
c00144b6:	5f                   	pop    edi
c00144b7:	5d                   	pop    ebp
c00144b8:	6a 01                	push   0x1
c00144ba:	53                   	push   ebx
c00144bb:	e8 8a 3c ff ff       	call   c000814a <File::open(FileOpenMode)>
c00144c0:	83 c4 10             	add    esp,0x10
c00144c3:	85 c0                	test   eax,eax
c00144c5:	0f 85 b3 06 00 00    	jne    c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00144cb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00144d3:	83 ec 0c             	sub    esp,0xc
c00144d6:	6a 34                	push   0x34
c00144d8:	e8 c3 a4 ff ff       	call   c000e9a0 <malloc>
c00144dd:	5e                   	pop    esi
c00144de:	8d 74 24 54          	lea    esi,[esp+0x54]
c00144e2:	89 c5                	mov    ebp,eax
c00144e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144e6:	56                   	push   esi
c00144e7:	55                   	push   ebp
c00144e8:	6a 00                	push   0x0
c00144ea:	6a 34                	push   0x34
c00144ec:	53                   	push   ebx
c00144ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144f0:	83 c4 20             	add    esp,0x20
c00144f3:	85 c0                	test   eax,eax
c00144f5:	0f 85 83 06 00 00    	jne    c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00144fb:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014502:	0f 85 76 06 00 00    	jne    c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014508:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001450b:	85 c0                	test   eax,eax
c001450d:	0f 84 6b 06 00 00    	je     c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014513:	31 d2                	xor    edx,edx
c0014515:	51                   	push   ecx
c0014516:	52                   	push   edx
c0014517:	50                   	push   eax
c0014518:	53                   	push   ebx
c0014519:	e8 ea 3c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001451e:	83 c4 10             	add    esp,0x10
c0014521:	85 c0                	test   eax,eax
c0014523:	0f 85 55 06 00 00    	jne    c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014529:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014533:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014537:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001453b:	0f af c2             	imul   eax,edx
c001453e:	50                   	push   eax
c001453f:	e8 5c a4 ff ff       	call   c000e9a0 <malloc>
c0014544:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014546:	89 34 24             	mov    DWORD PTR [esp],esi
c0014549:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001454d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014551:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014555:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014559:	0f af c2             	imul   eax,edx
c001455c:	99                   	cdq    
c001455d:	52                   	push   edx
c001455e:	50                   	push   eax
c001455f:	53                   	push   ebx
c0014560:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014563:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014566:	83 c4 20             	add    esp,0x20
c0014569:	85 c0                	test   eax,eax
c001456b:	0f 84 0d 06 00 00    	je     c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014571:	52                   	push   edx
c0014572:	31 d2                	xor    edx,edx
c0014574:	52                   	push   edx
c0014575:	50                   	push   eax
c0014576:	53                   	push   ebx
c0014577:	e8 8c 3c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001457c:	83 c4 10             	add    esp,0x10
c001457f:	85 c0                	test   eax,eax
c0014581:	0f 85 f7 05 00 00    	jne    c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014587:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001458b:	83 ec 0c             	sub    esp,0xc
c001458e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014592:	0f af c2             	imul   eax,edx
c0014595:	50                   	push   eax
c0014596:	e8 05 a4 ff ff       	call   c000e9a0 <malloc>
c001459b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001459d:	89 34 24             	mov    DWORD PTR [esp],esi
c00145a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a8:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00145ac:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00145b0:	0f af c2             	imul   eax,edx
c00145b3:	99                   	cdq    
c00145b4:	52                   	push   edx
c00145b5:	50                   	push   eax
c00145b6:	53                   	push   ebx
c00145b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145ba:	83 c4 20             	add    esp,0x20
c00145bd:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00145c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00145c6:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00145ca:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00145ce:	73 78                	jae    c0014648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00145d0:	c1 e7 05             	shl    edi,0x5
c00145d3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00145d7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00145da:	75 63                	jne    c001463f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00145dc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00145df:	31 d2                	xor    edx,edx
c00145e1:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00145e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145e8:	50                   	push   eax
c00145e9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00145ec:	52                   	push   edx
c00145ed:	50                   	push   eax
c00145ee:	53                   	push   ebx
c00145ef:	e8 14 3c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	85 c0                	test   eax,eax
c00145f9:	0f 85 7f 05 00 00    	jne    c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00145ff:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014606:	83 ec 0c             	sub    esp,0xc
c0014609:	31 d2                	xor    edx,edx
c001460b:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001460f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014611:	01 c6                	add    esi,eax
c0014613:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001461a:	50                   	push   eax
c001461b:	56                   	push   esi
c001461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014620:	52                   	push   edx
c0014621:	50                   	push   eax
c0014622:	53                   	push   ebx
c0014623:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014626:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014629:	83 c4 1c             	add    esp,0x1c
c001462c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001462f:	50                   	push   eax
c0014630:	6a 00                	push   0x0
c0014632:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014636:	56                   	push   esi
c0014637:	e8 b4 be fe ff       	call   c00004f0 <memset>
c001463c:	83 c4 10             	add    esp,0x10
c001463f:	66 ff 04 24          	inc    WORD PTR [esp]
c0014643:	e9 7b ff ff ff       	jmp    c00145c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014648:	50                   	push   eax
c0014649:	68 00 01 00 00       	push   0x100
c001464e:	6a 00                	push   0x0
c0014650:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014654:	50                   	push   eax
c0014655:	e8 96 be fe ff       	call   c00004f0 <memset>
c001465a:	83 c4 0c             	add    esp,0xc
c001465d:	68 00 01 00 00       	push   0x100
c0014662:	6a 00                	push   0x0
c0014664:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001466b:	50                   	push   eax
c001466c:	e8 7f be fe ff       	call   c00004f0 <memset>
c0014671:	83 c4 10             	add    esp,0x10
c0014674:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001467b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014682:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001468a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014692:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001469a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00146a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146a6:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c00146aa:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00146af:	0f 83 16 01 00 00    	jae    c00147cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c00146b5:	6b ff 28             	imul   edi,edi,0x28
c00146b8:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c00146bc:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00146bf:	51                   	push   ecx
c00146c0:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00146c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00146c8:	8b 07                	mov    eax,DWORD PTR [edi]
c00146ca:	6b d2 28             	imul   edx,edx,0x28
c00146cd:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00146d1:	31 d2                	xor    edx,edx
c00146d3:	52                   	push   edx
c00146d4:	50                   	push   eax
c00146d5:	53                   	push   ebx
c00146d6:	e8 2d 3b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00146db:	83 c4 0c             	add    esp,0xc
c00146de:	6a 20                	push   0x20
c00146e0:	6a 00                	push   0x0
c00146e2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00146e9:	51                   	push   ecx
c00146ea:	e8 01 be fe ff       	call   c00004f0 <memset>
c00146ef:	58                   	pop    eax
c00146f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146f2:	8d 54 24 58          	lea    edx,[esp+0x58]
c00146f6:	52                   	push   edx
c00146f7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00146fe:	51                   	push   ecx
c00146ff:	6a 00                	push   0x0
c0014701:	6a 1f                	push   0x1f
c0014703:	53                   	push   ebx
c0014704:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014707:	83 c4 1c             	add    esp,0x1c
c001470a:	6a 09                	push   0x9
c001470c:	68 bc 34 02 c0       	push   0xc00234bc
c0014711:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014718:	51                   	push   ecx
c0014719:	e8 62 bc fe ff       	call   c0000380 <memcmp>
c001471e:	83 c4 10             	add    esp,0x10
c0014721:	85 c0                	test   eax,eax
c0014723:	75 1a                	jne    c001473f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014725:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014728:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001472b:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001472f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014732:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014739:	89 d0                	mov    eax,edx
c001473b:	40                   	inc    eax
c001473c:	89 04 24             	mov    DWORD PTR [esp],eax
c001473f:	52                   	push   edx
c0014740:	6a 09                	push   0x9
c0014742:	68 c6 34 02 c0       	push   0xc00234c6
c0014747:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001474e:	50                   	push   eax
c001474f:	e8 2c bc fe ff       	call   c0000380 <memcmp>
c0014754:	83 c4 10             	add    esp,0x10
c0014757:	85 c0                	test   eax,eax
c0014759:	75 1a                	jne    c0014775 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c001475b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001475e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014761:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014765:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014768:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001476f:	89 c8                	mov    eax,ecx
c0014771:	40                   	inc    eax
c0014772:	89 04 24             	mov    DWORD PTR [esp],eax
c0014775:	50                   	push   eax
c0014776:	50                   	push   eax
c0014777:	68 92 34 02 c0       	push   0xc0023492
c001477c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014783:	50                   	push   eax
c0014784:	e8 f7 bf fe ff       	call   c0000780 <strcmp>
c0014789:	83 c4 10             	add    esp,0x10
c001478c:	85 c0                	test   eax,eax
c001478e:	75 0b                	jne    c001479b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014790:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014794:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014797:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001479b:	50                   	push   eax
c001479c:	50                   	push   eax
c001479d:	68 9a 34 02 c0       	push   0xc002349a
c00147a2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147a9:	50                   	push   eax
c00147aa:	e8 d1 bf fe ff       	call   c0000780 <strcmp>
c00147af:	83 c4 10             	add    esp,0x10
c00147b2:	85 c0                	test   eax,eax
c00147b4:	75 0b                	jne    c00147c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00147b6:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00147ba:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00147bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147c1:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00147c6:	e9 d7 fe ff ff       	jmp    c00146a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00147cb:	50                   	push   eax
c00147cc:	31 d2                	xor    edx,edx
c00147ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147d2:	52                   	push   edx
c00147d3:	50                   	push   eax
c00147d4:	53                   	push   ebx
c00147d5:	e8 2e 3a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00147da:	58                   	pop    eax
c00147db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147df:	e8 bc a1 ff ff       	call   c000e9a0 <malloc>
c00147e4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147e6:	31 d2                	xor    edx,edx
c00147e8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00147ec:	58                   	pop    eax
c00147ed:	8d 74 24 54          	lea    esi,[esp+0x54]
c00147f1:	56                   	push   esi
c00147f2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00147f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147fa:	52                   	push   edx
c00147fb:	50                   	push   eax
c00147fc:	53                   	push   ebx
c00147fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014800:	83 c4 14             	add    esp,0x14
c0014803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014807:	e8 94 a1 ff ff       	call   c000e9a0 <malloc>
c001480c:	31 d2                	xor    edx,edx
c001480e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014812:	83 c4 0c             	add    esp,0xc
c0014815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014819:	52                   	push   edx
c001481a:	50                   	push   eax
c001481b:	53                   	push   ebx
c001481c:	e8 e7 39 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014821:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014823:	31 d2                	xor    edx,edx
c0014825:	89 34 24             	mov    DWORD PTR [esp],esi
c0014828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001482c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014830:	52                   	push   edx
c0014831:	50                   	push   eax
c0014832:	53                   	push   ebx
c0014833:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014836:	83 c4 20             	add    esp,0x20
c0014839:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c001483e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014846:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001484a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001484e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014851:	0f 84 2b 03 00 00    	je     c0014b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014857:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c001485e:	31 d2                	xor    edx,edx
c0014860:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014864:	c1 e8 03             	shr    eax,0x3
c0014867:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001486b:	51                   	push   ecx
c001486c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014870:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014874:	52                   	push   edx
c0014875:	50                   	push   eax
c0014876:	53                   	push   ebx
c0014877:	e8 8c 39 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001487c:	5e                   	pop    esi
c001487d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014881:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014888:	e8 13 a1 ff ff       	call   c000e9a0 <malloc>
c001488d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001488f:	31 d2                	xor    edx,edx
c0014891:	89 c7                	mov    edi,eax
c0014893:	58                   	pop    eax
c0014894:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014898:	50                   	push   eax
c0014899:	57                   	push   edi
c001489a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001489e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00148a5:	52                   	push   edx
c00148a6:	50                   	push   eax
c00148a7:	53                   	push   ebx
c00148a8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148ab:	83 c4 20             	add    esp,0x20
c00148ae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00148b6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00148ba:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00148be:	0f 8d a5 02 00 00    	jge    c0014b69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00148c4:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00148c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148cd:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00148d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00148d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148d8:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00148dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00148e0:	c1 e8 08             	shr    eax,0x8
c00148e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00148e7:	89 c2                	mov    edx,eax
c00148e9:	c1 e2 04             	shl    edx,0x4
c00148ec:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00148f0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00148f3:	85 f6                	test   esi,esi
c00148f5:	0f 85 cf 00 00 00    	jne    c00149ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00148fb:	83 ec 0c             	sub    esp,0xc
c00148fe:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014906:	03 02                	add    eax,DWORD PTR [edx]
c0014908:	50                   	push   eax
c0014909:	e8 63 f8 ff ff       	call   c0014171 <Thr::getAddressOfKernelSymbol(char const*)>
c001490e:	83 c4 10             	add    esp,0x10
c0014911:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014915:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001491a:	85 c0                	test   eax,eax
c001491c:	89 c6                	mov    esi,eax
c001491e:	0f 85 a6 00 00 00    	jne    c00149ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014924:	83 ec 0c             	sub    esp,0xc
c0014927:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001492b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001492f:	03 02                	add    eax,DWORD PTR [edx]
c0014931:	50                   	push   eax
c0014932:	e8 39 ae ff ff       	call   c000f770 <KeResolveCompatibilitySymbol(char*)>
c0014937:	83 c4 10             	add    esp,0x10
c001493a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001493e:	85 c0                	test   eax,eax
c0014940:	89 c6                	mov    esi,eax
c0014942:	0f 85 82 00 00 00    	jne    c00149ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014948:	50                   	push   eax
c0014949:	50                   	push   eax
c001494a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001494e:	03 02                	add    eax,DWORD PTR [edx]
c0014950:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014954:	50                   	push   eax
c0014955:	68 d0 34 02 c0       	push   0xc00234d0
c001495a:	e8 ef 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001495f:	58                   	pop    eax
c0014960:	5a                   	pop    edx
c0014961:	68 ea 34 02 c0       	push   0xc00234ea
c0014966:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001496d:	51                   	push   ecx
c001496e:	e8 dd bc fe ff       	call   c0000650 <strcpy>
c0014973:	59                   	pop    ecx
c0014974:	58                   	pop    eax
c0014975:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001497d:	03 02                	add    eax,DWORD PTR [edx]
c001497f:	50                   	push   eax
c0014980:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014987:	51                   	push   ecx
c0014988:	e8 e3 be fe ff       	call   c0000870 <strcat>
c001498d:	58                   	pop    eax
c001498e:	5a                   	pop    edx
c001498f:	68 84 35 02 c0       	push   0xc0023584
c0014994:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001499b:	51                   	push   ecx
c001499c:	e8 cf be fe ff       	call   c0000870 <strcat>
c00149a1:	83 c4 10             	add    esp,0x10
c00149a4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00149a9:	0f 84 77 01 00 00    	je     c0014b26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00149af:	83 ec 0c             	sub    esp,0xc
c00149b2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00149b9:	51                   	push   ecx
c00149ba:	e8 27 a3 ff ff       	call   c000ece6 <KePanic(char const*)>
c00149bf:	83 c4 10             	add    esp,0x10
c00149c2:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00149c6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00149ca:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00149cf:	83 f8 01             	cmp    eax,0x1
c00149d2:	0f 85 9b 00 00 00    	jne    c0014a73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00149d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00149dc:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00149e3:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00149e7:	01 d0                	add    eax,edx
c00149e9:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00149f1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00149f5:	0f 94 c0             	sete   al
c00149f8:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014a00:	0f 94 c1             	sete   cl
c0014a03:	09 c1                	or     ecx,eax
c0014a05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014a09:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a0e:	0f b6 c9             	movzx  ecx,cl
c0014a11:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a13:	74 41                	je     c0014a56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014a15:	8d 14 06             	lea    edx,[esi+eax*1]
c0014a18:	85 c9                	test   ecx,ecx
c0014a1a:	75 15                	jne    c0014a31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014a1c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a20:	66 83 f8 0c          	cmp    ax,0xc
c0014a24:	76 05                	jbe    c0014a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014a26:	b8 0c 00 00 00       	mov    eax,0xc
c0014a2b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014a2f:	76 37                	jbe    c0014a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014a31:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014a36:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014a3a:	0f 84 e6 00 00 00    	je     c0014b26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014a40:	83 ec 0c             	sub    esp,0xc
c0014a43:	68 01 35 02 c0       	push   0xc0023501
c0014a48:	e8 99 a2 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014a4d:	83 c4 10             	add    esp,0x10
c0014a50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014a54:	eb 12                	jmp    c0014a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014a56:	01 c2                	add    edx,eax
c0014a58:	85 c9                	test   ecx,ecx
c0014a5a:	75 0c                	jne    c0014a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014a5c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a60:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014a64:	77 02                	ja     c0014a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014a66:	01 f2                	add    edx,esi
c0014a68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014a6c:	89 10                	mov    DWORD PTR [eax],edx
c0014a6e:	e9 ed 00 00 00       	jmp    c0014b60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014a73:	83 f8 02             	cmp    eax,0x2
c0014a76:	0f 85 81 00 00 00    	jne    c0014afd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014a7c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a83:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014a87:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014a8b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014a93:	74 21                	je     c0014ab6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014a95:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014a9d:	74 17                	je     c0014ab6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014a9f:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014aa3:	ba 0a 00 00 00       	mov    edx,0xa
c0014aa8:	83 f9 0e             	cmp    ecx,0xe
c0014aab:	77 03                	ja     c0014ab0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014aad:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014ab0:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014ab4:	76 1f                	jbe    c0014ad5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014ab6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014abb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014abf:	74 65                	je     c0014b26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ac1:	83 ec 0c             	sub    esp,0xc
c0014ac4:	68 1d 35 02 c0       	push   0xc002351d
c0014ac9:	e8 18 a2 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014ace:	83 c4 10             	add    esp,0x10
c0014ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ad5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ada:	8b 10                	mov    edx,DWORD PTR [eax]
c0014adc:	74 15                	je     c0014af3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014ade:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014ae2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014ae9:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014aed:	01 d1                	add    ecx,edx
c0014aef:	01 ce                	add    esi,ecx
c0014af1:	eb 06                	jmp    c0014af9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014af3:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014af7:	01 d6                	add    esi,edx
c0014af9:	89 30                	mov    DWORD PTR [eax],esi
c0014afb:	eb 63                	jmp    c0014b60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014afd:	56                   	push   esi
c0014afe:	56                   	push   esi
c0014aff:	50                   	push   eax
c0014b00:	68 39 35 02 c0       	push   0xc0023539
c0014b05:	e8 44 24 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014b12:	74 12                	je     c0014b26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014b14:	83 ec 0c             	sub    esp,0xc
c0014b17:	68 44 35 02 c0       	push   0xc0023544
c0014b1c:	e8 c5 a1 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014b21:	83 c4 10             	add    esp,0x10
c0014b24:	eb 3a                	jmp    c0014b60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014b26:	83 ec 0c             	sub    esp,0xc
c0014b29:	53                   	push   ebx
c0014b2a:	e8 79 36 ff ff       	call   c00081a8 <File::close()>
c0014b2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b37:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b3a:	e8 71 9e ff ff       	call   c000e9b0 <free>
c0014b3f:	59                   	pop    ecx
c0014b40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b44:	e8 67 9e ff ff       	call   c000e9b0 <free>
c0014b49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014b4c:	e8 5f 9e ff ff       	call   c000e9b0 <free>
c0014b51:	5b                   	pop    ebx
c0014b52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b56:	e8 55 9e ff ff       	call   c000e9b0 <free>
c0014b5b:	83 c4 10             	add    esp,0x10
c0014b5e:	eb 1e                	jmp    c0014b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b60:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014b64:	e9 4d fd ff ff       	jmp    c00148b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	57                   	push   edi
c0014b6d:	e8 3e 9e ff ff       	call   c000e9b0 <free>
c0014b72:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	e9 cc fc ff ff       	jmp    c001484a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014b7e:	31 c0                	xor    eax,eax
c0014b80:	eb 32                	jmp    c0014bb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014b82:	83 ec 0c             	sub    esp,0xc
c0014b85:	53                   	push   ebx
c0014b86:	e8 1d 36 ff ff       	call   c00081a8 <File::close()>
c0014b8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b93:	58                   	pop    eax
c0014b94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b98:	e8 13 9e ff ff       	call   c000e9b0 <free>
c0014b9d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ba0:	e8 0b 9e ff ff       	call   c000e9b0 <free>
c0014ba5:	5a                   	pop    edx
c0014ba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014baa:	e8 01 9e ff ff       	call   c000e9b0 <free>
c0014baf:	83 c4 10             	add    esp,0x10
c0014bb2:	b0 01                	mov    al,0x1
c0014bb4:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014bba:	5b                   	pop    ebx
c0014bbb:	5e                   	pop    esi
c0014bbc:	5f                   	pop    edi
c0014bbd:	5d                   	pop    ebp
c0014bbe:	c3                   	ret    

c0014bbf <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014bbf:	56                   	push   esi
c0014bc0:	31 d2                	xor    edx,edx
c0014bc2:	53                   	push   ebx
c0014bc3:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014bc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014bcd:	39 d3                	cmp    ebx,edx
c0014bcf:	7e 1b                	jle    c0014bec <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014bd1:	8b 04 95 00 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2f00]
c0014bd8:	39 c8                	cmp    eax,ecx
c0014bda:	77 0d                	ja     c0014be9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014bdc:	8b 34 95 00 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3100]
c0014be3:	01 c6                	add    esi,eax
c0014be5:	39 ce                	cmp    esi,ecx
c0014be7:	77 05                	ja     c0014bee <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014be9:	42                   	inc    edx
c0014bea:	eb e1                	jmp    c0014bcd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014bec:	31 c0                	xor    eax,eax
c0014bee:	5b                   	pop    ebx
c0014bef:	5e                   	pop    esi
c0014bf0:	c3                   	ret    

c0014bf1 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014bf1:	53                   	push   ebx
c0014bf2:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014bf8:	31 c0                	xor    eax,eax
c0014bfa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014bfe:	39 c3                	cmp    ebx,eax
c0014c00:	7e 22                	jle    c0014c24 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014c02:	8b 14 85 00 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f00]
c0014c09:	39 ca                	cmp    edx,ecx
c0014c0b:	77 14                	ja     c0014c21 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014c0d:	03 14 85 00 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3100]
c0014c14:	39 ca                	cmp    edx,ecx
c0014c16:	76 09                	jbe    c0014c21 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014c18:	8b 04 85 00 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d00]
c0014c1f:	eb 05                	jmp    c0014c26 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014c21:	40                   	inc    eax
c0014c22:	eb da                	jmp    c0014bfe <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014c24:	31 c0                	xor    eax,eax
c0014c26:	5b                   	pop    ebx
c0014c27:	c3                   	ret    

c0014c28 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014c28:	53                   	push   ebx
c0014c29:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014c2d:	53                   	push   ebx
c0014c2e:	e8 8c ff ff ff       	call   c0014bbf <Thr::getDriverBaseFromAddress(unsigned long)>
c0014c33:	5a                   	pop    edx
c0014c34:	31 d2                	xor    edx,edx
c0014c36:	85 c0                	test   eax,eax
c0014c38:	74 04                	je     c0014c3e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014c3a:	89 da                	mov    edx,ebx
c0014c3c:	29 c2                	sub    edx,eax
c0014c3e:	5b                   	pop    ebx
c0014c3f:	89 d0                	mov    eax,edx
c0014c41:	c3                   	ret    

c0014c42 <Thr::loadDLL(char const*, bool)>:
c0014c42:	55                   	push   ebp
c0014c43:	57                   	push   edi
c0014c44:	56                   	push   esi
c0014c45:	53                   	push   ebx
c0014c46:	81 ec 34 01 00 00    	sub    esp,0x134
c0014c4c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014c53:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014c5a:	56                   	push   esi
c0014c5b:	68 5c 35 02 c0       	push   0xc002355c
c0014c60:	e8 e9 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014c65:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014c6c:	e8 2f 9d ff ff       	call   c000e9a0 <malloc>
c0014c71:	83 c4 0c             	add    esp,0xc
c0014c74:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0014c7a:	56                   	push   esi
c0014c7b:	50                   	push   eax
c0014c7c:	89 c3                	mov    ebx,eax
c0014c7e:	e8 a9 34 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014c83:	83 c4 10             	add    esp,0x10
c0014c86:	85 db                	test   ebx,ebx
c0014c88:	75 3c                	jne    c0014cc6 <Thr::loadDLL(char const*, bool)+0x84>
c0014c8a:	89 e8                	mov    eax,ebp
c0014c8c:	84 c0                	test   al,al
c0014c8e:	0f 84 02 02 00 00    	je     c0014e96 <Thr::loadDLL(char const*, bool)+0x254>
c0014c94:	50                   	push   eax
c0014c95:	50                   	push   eax
c0014c96:	68 6d 35 02 c0       	push   0xc002356d
c0014c9b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014c9f:	57                   	push   edi
c0014ca0:	e8 ab b9 fe ff       	call   c0000650 <strcpy>
c0014ca5:	58                   	pop    eax
c0014ca6:	5a                   	pop    edx
c0014ca7:	56                   	push   esi
c0014ca8:	57                   	push   edi
c0014ca9:	e8 c2 bb fe ff       	call   c0000870 <strcat>
c0014cae:	59                   	pop    ecx
c0014caf:	58                   	pop    eax
c0014cb0:	68 84 35 02 c0       	push   0xc0023584
c0014cb5:	57                   	push   edi
c0014cb6:	e8 b5 bb fe ff       	call   c0000870 <strcat>
c0014cbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014cbe:	e8 23 a0 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014cc3:	83 c4 10             	add    esp,0x10
c0014cc6:	50                   	push   eax
c0014cc7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014ccb:	50                   	push   eax
c0014ccc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014cd0:	50                   	push   eax
c0014cd1:	53                   	push   ebx
c0014cd2:	e8 75 37 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0014cd7:	83 c4 10             	add    esp,0x10
c0014cda:	85 db                	test   ebx,ebx
c0014cdc:	89 c7                	mov    edi,eax
c0014cde:	74 0c                	je     c0014cec <Thr::loadDLL(char const*, bool)+0xaa>
c0014ce0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ce2:	83 ec 0c             	sub    esp,0xc
c0014ce5:	53                   	push   ebx
c0014ce6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	83 ec 0c             	sub    esp,0xc
c0014cef:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014cf4:	50                   	push   eax
c0014cf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cfd:	57                   	push   edi
c0014cfe:	68 86 35 02 c0       	push   0xc0023586
c0014d03:	e8 46 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d08:	83 c4 20             	add    esp,0x20
c0014d0b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014d10:	75 0a                	jne    c0014d1c <Thr::loadDLL(char const*, bool)+0xda>
c0014d12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d16:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014d1a:	75 3e                	jne    c0014d5a <Thr::loadDLL(char const*, bool)+0x118>
c0014d1c:	89 e8                	mov    eax,ebp
c0014d1e:	31 db                	xor    ebx,ebx
c0014d20:	84 c0                	test   al,al
c0014d22:	0f 84 6e 01 00 00    	je     c0014e96 <Thr::loadDLL(char const*, bool)+0x254>
c0014d28:	50                   	push   eax
c0014d29:	50                   	push   eax
c0014d2a:	68 a7 35 02 c0       	push   0xc00235a7
c0014d2f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014d33:	53                   	push   ebx
c0014d34:	e8 17 b9 fe ff       	call   c0000650 <strcpy>
c0014d39:	58                   	pop    eax
c0014d3a:	5a                   	pop    edx
c0014d3b:	56                   	push   esi
c0014d3c:	53                   	push   ebx
c0014d3d:	e8 2e bb fe ff       	call   c0000870 <strcat>
c0014d42:	59                   	pop    ecx
c0014d43:	5f                   	pop    edi
c0014d44:	68 84 35 02 c0       	push   0xc0023584
c0014d49:	53                   	push   ebx
c0014d4a:	e8 21 bb fe ff       	call   c0000870 <strcat>
c0014d4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d52:	e8 8f 9f ff ff       	call   c000ece6 <KePanic(char const*)>
c0014d57:	83 c4 10             	add    esp,0x10
c0014d5a:	53                   	push   ebx
c0014d5b:	6a 03                	push   0x3
c0014d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d65:	05 ff 0f 00 00       	add    eax,0xfff
c0014d6a:	83 d2 00             	adc    edx,0x0
c0014d6d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014d71:	50                   	push   eax
c0014d72:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014d78:	e8 3f db ff ff       	call   c00128bc <VAS::allocatePages(int, int)>
c0014d7d:	89 c3                	mov    ebx,eax
c0014d7f:	58                   	pop    eax
c0014d80:	5a                   	pop    edx
c0014d81:	53                   	push   ebx
c0014d82:	68 de 28 02 c0       	push   0xc00228de
c0014d87:	e8 c2 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d8f:	e8 ec b7 fe ff       	call   c0000580 <strlen>
c0014d94:	8b 3d e0 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002cee0
c0014d9a:	40                   	inc    eax
c0014d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d9e:	e8 fd 9b ff ff       	call   c000e9a0 <malloc>
c0014da3:	59                   	pop    ecx
c0014da4:	89 04 bd 00 d3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2d00],eax
c0014dab:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014db0:	5f                   	pop    edi
c0014db1:	56                   	push   esi
c0014db2:	ff 34 85 00 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d00]
c0014db9:	e8 92 b8 fe ff       	call   c0000650 <strcpy>
c0014dbe:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014dc3:	89 1c 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],ebx
c0014dca:	8d 50 01             	lea    edx,[eax+0x1]
c0014dcd:	89 15 e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,edx
c0014dd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014dd7:	83 c4 0c             	add    esp,0xc
c0014dda:	6a 01                	push   0x1
c0014ddc:	53                   	push   ebx
c0014ddd:	56                   	push   esi
c0014dde:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c0014de5:	e8 94 f6 ff ff       	call   c001447e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	89 c7                	mov    edi,eax
c0014def:	89 f8                	mov    eax,edi
c0014df1:	83 f0 01             	xor    eax,0x1
c0014df4:	84 c0                	test   al,al
c0014df6:	74 18                	je     c0014e10 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014df8:	89 e8                	mov    eax,ebp
c0014dfa:	84 c0                	test   al,al
c0014dfc:	74 12                	je     c0014e10 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014dfe:	83 ec 0c             	sub    esp,0xc
c0014e01:	68 c0 35 02 c0       	push   0xc00235c0
c0014e06:	e8 db 9e ff ff       	call   c000ece6 <KePanic(char const*)>
c0014e0b:	83 c4 10             	add    esp,0x10
c0014e0e:	eb 06                	jmp    c0014e16 <Thr::loadDLL(char const*, bool)+0x1d4>
c0014e10:	89 f8                	mov    eax,edi
c0014e12:	84 c0                	test   al,al
c0014e14:	75 10                	jne    c0014e26 <Thr::loadDLL(char const*, bool)+0x1e4>
c0014e16:	83 ec 0c             	sub    esp,0xc
c0014e19:	68 df 35 02 c0       	push   0xc00235df
c0014e1e:	e8 c3 9e ff ff       	call   c000ece6 <KePanic(char const*)>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	31 f6                	xor    esi,esi
c0014e28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014e30:	05 ff 0f 00 00       	add    eax,0xfff
c0014e35:	83 d2 00             	adc    edx,0x0
c0014e38:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e40:	c1 ea 0c             	shr    edx,0xc
c0014e43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e47:	ba 00 00 00 00       	mov    edx,0x0
c0014e4c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014e50:	89 d0                	mov    eax,edx
c0014e52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014e56:	73 32                	jae    c0014e8a <Thr::loadDLL(char const*, bool)+0x248>
c0014e58:	50                   	push   eax
c0014e59:	50                   	push   eax
c0014e5a:	89 f0                	mov    eax,esi
c0014e5c:	c1 e0 0c             	shl    eax,0xc
c0014e5f:	01 d8                	add    eax,ebx
c0014e61:	50                   	push   eax
c0014e62:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014e68:	e8 4d d5 ff ff       	call   c00123ba <VAS::getPageTableEntry(unsigned long)>
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e72:	a8 60                	test   al,0x60
c0014e74:	75 11                	jne    c0014e87 <Thr::loadDLL(char const*, bool)+0x245>
c0014e76:	83 ec 0c             	sub    esp,0xc
c0014e79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014e7e:	50                   	push   eax
c0014e7f:	e8 f3 9f ff ff       	call   c000ee77 <Phys::freePage(unsigned long)>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	46                   	inc    esi
c0014e88:	eb 9e                	jmp    c0014e28 <Thr::loadDLL(char const*, bool)+0x1e6>
c0014e8a:	89 f8                	mov    eax,edi
c0014e8c:	84 c0                	test   al,al
c0014e8e:	b8 00 00 00 00       	mov    eax,0x0
c0014e93:	0f 44 d8             	cmove  ebx,eax
c0014e96:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e9c:	89 d8                	mov    eax,ebx
c0014e9e:	5b                   	pop    ebx
c0014e9f:	5e                   	pop    esi
c0014ea0:	5f                   	pop    edi
c0014ea1:	5d                   	pop    ebp
c0014ea2:	c3                   	ret    

c0014ea3 <Thr::executeDLL(unsigned long, void*)>:
c0014ea3:	56                   	push   esi
c0014ea4:	53                   	push   ebx
c0014ea5:	52                   	push   edx
c0014ea6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014eaa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014eae:	85 db                	test   ebx,ebx
c0014eb0:	75 10                	jne    c0014ec2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014eb2:	83 ec 0c             	sub    esp,0xc
c0014eb5:	68 fb 35 02 c0       	push   0xc00235fb
c0014eba:	e8 27 9e ff ff       	call   c000ece6 <KePanic(char const*)>
c0014ebf:	83 c4 10             	add    esp,0x10
c0014ec2:	50                   	push   eax
c0014ec3:	50                   	push   eax
c0014ec4:	53                   	push   ebx
c0014ec5:	68 25 36 02 c0       	push   0xc0023625
c0014eca:	e8 7f 20 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014ecf:	89 d8                	mov    eax,ebx
c0014ed1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014ed5:	83 c4 14             	add    esp,0x14
c0014ed8:	5b                   	pop    ebx
c0014ed9:	5e                   	pop    esi
c0014eda:	ff e0                	jmp    eax

c0014edc <KeProcessExec(Process*, char const*)>:
c0014edc:	56                   	push   esi
c0014edd:	53                   	push   ebx
c0014ede:	83 ec 04             	sub    esp,0x4
c0014ee1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ee5:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014eeb:	85 f6                	test   esi,esi
c0014eed:	74 16                	je     c0014f05 <KeProcessExec(Process*, char const*)+0x29>
c0014eef:	83 ec 0c             	sub    esp,0xc
c0014ef2:	56                   	push   esi
c0014ef3:	e8 54 d7 ff ff       	call   c001264c <VAS::~VAS()>
c0014ef8:	58                   	pop    eax
c0014ef9:	5a                   	pop    edx
c0014efa:	6a 14                	push   0x14
c0014efc:	56                   	push   esi
c0014efd:	e8 a9 77 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0014f02:	83 c4 10             	add    esp,0x10
c0014f05:	83 ec 0c             	sub    esp,0xc
c0014f08:	6a 14                	push   0x14
c0014f0a:	e8 91 9a ff ff       	call   c000e9a0 <malloc>
c0014f0f:	89 c6                	mov    esi,eax
c0014f11:	58                   	pop    eax
c0014f12:	5a                   	pop    edx
c0014f13:	6a 00                	push   0x0
c0014f15:	56                   	push   esi
c0014f16:	e8 dd db ff ff       	call   c0012af8 <VAS::VAS(bool)>
c0014f1b:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014f21:	59                   	pop    ecx
c0014f22:	5e                   	pop    esi
c0014f23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f27:	50                   	push   eax
c0014f28:	53                   	push   ebx
c0014f29:	e8 11 f0 ff ff       	call   c0013f3f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014f2e:	83 c4 14             	add    esp,0x14
c0014f31:	31 c0                	xor    eax,eax
c0014f33:	5b                   	pop    ebx
c0014f34:	5e                   	pop    esi
c0014f35:	c3                   	ret    
c0014f36:	66 90                	xchg   ax,ax

c0014f38 <userModeEntryPoint(void*)>:
c0014f38:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0014f40:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0014f45:	85 c0                	test   eax,eax
c0014f47:	75 03                	jne    c0014f4c <userModeEntryPoint(void*)+0x14>
c0014f49:	fb                   	sti    
c0014f4a:	66 90                	xchg   ax,ax
c0014f4c:	fb                   	sti    
c0014f4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f55:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014f5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f5f:	e9 db b2 fe ff       	jmp    c000023f <goToUsermode>

c0014f64 <changeTSS>:
c0014f64:	83 ec 14             	sub    esp,0x14
c0014f67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f6c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f6f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014f74:	c1 e2 15             	shl    edx,0x15
c0014f77:	29 d0                	sub    eax,edx
c0014f79:	50                   	push   eax
c0014f7a:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0014f7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f85:	05 68 11 00 00       	add    eax,0x1168
c0014f8a:	50                   	push   eax
c0014f8b:	e8 d0 c9 ff ff       	call   c0011960 <TSS::setESP(unsigned long)>
c0014f90:	83 c4 1c             	add    esp,0x1c
c0014f93:	c3                   	ret    

c0014f94 <switchToThread(ThreadControlBlock*)>:
c0014f94:	57                   	push   edi
c0014f95:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c0014f9b:	56                   	push   esi
c0014f9c:	53                   	push   ebx
c0014f9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fa1:	85 c9                	test   ecx,ecx
c0014fa3:	0f 85 8b 00 00 00    	jne    c0015034 <switchToThread(ThreadControlBlock*)+0xa0>
c0014fa9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014fad:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014fb3:	74 7b                	je     c0015030 <switchToThread(ThreadControlBlock*)+0x9c>
c0014fb5:	b8 00 04 00 00       	mov    eax,0x400
c0014fba:	29 d0                	sub    eax,edx
c0014fbc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014fbf:	d1 f8                	sar    eax,1
c0014fc1:	01 d0                	add    eax,edx
c0014fc3:	90                   	nop
c0014fc4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014fc7:	e8 1b 38 00 00       	call   c00187e7 <HalQueryPerformanceCounter()>
c0014fcc:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0014fd1:	89 c6                	mov    esi,eax
c0014fd3:	89 d7                	mov    edi,edx
c0014fd5:	2b 35 e0 d6 02 c0    	sub    esi,DWORD PTR ds:0xc002d6e0
c0014fdb:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0014fe0:	1b 3d e4 d6 02 c0    	sbb    edi,DWORD PTR ds:0xc002d6e4
c0014fe6:	89 35 e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,esi
c0014fec:	89 15 f4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f4,edx
c0014ff2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ff8:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c0014ffe:	89 3d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edi
c0015004:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015007:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001500a:	01 c6                	add    esi,eax
c001500c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001500f:	11 d7                	adc    edi,edx
c0015011:	83 ec 0c             	sub    esp,0xc
c0015014:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015017:	53                   	push   ebx
c0015018:	e8 5a b2 fe ff       	call   c0000277 <switchToThreadASM>
c001501d:	0f 20 c0             	mov    eax,cr0
c0015020:	83 c8 08             	or     eax,0x8
c0015023:	0f 22 c0             	mov    cr0,eax
c0015026:	83 c4 10             	add    esp,0x10
c0015029:	5b                   	pop    ebx
c001502a:	5e                   	pop    esi
c001502b:	5f                   	pop    edi
c001502c:	c3                   	ret    
c001502d:	8d 76 00             	lea    esi,[esi+0x0]
c0015030:	31 c0                	xor    eax,eax
c0015032:	eb 90                	jmp    c0014fc4 <switchToThread(ThreadControlBlock*)+0x30>
c0015034:	5b                   	pop    ebx
c0015035:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c001503f:	5e                   	pop    esi
c0015040:	5f                   	pop    edi
c0015041:	c3                   	ret    
c0015042:	66 90                	xchg   ax,ax

c0015044 <Process::addArgs(char**)>:
c0015044:	57                   	push   edi
c0015045:	56                   	push   esi
c0015046:	53                   	push   ebx
c0015047:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001504b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001504f:	85 f6                	test   esi,esi
c0015051:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001505b:	74 4f                	je     c00150ac <Process::addArgs(char**)+0x68>
c001505d:	8b 06                	mov    eax,DWORD PTR [esi]
c001505f:	85 c0                	test   eax,eax
c0015061:	74 49                	je     c00150ac <Process::addArgs(char**)+0x68>
c0015063:	31 db                	xor    ebx,ebx
c0015065:	8d 76 00             	lea    esi,[esi+0x0]
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	50                   	push   eax
c001506c:	e8 0f b5 fe ff       	call   c0000580 <strlen>
c0015071:	83 c0 01             	add    eax,0x1
c0015074:	89 04 24             	mov    DWORD PTR [esp],eax
c0015077:	e8 24 99 ff ff       	call   c000e9a0 <malloc>
c001507c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015083:	5a                   	pop    edx
c0015084:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015087:	83 c3 01             	add    ebx,0x1
c001508a:	59                   	pop    ecx
c001508b:	52                   	push   edx
c001508c:	50                   	push   eax
c001508d:	e8 be b5 fe ff       	call   c0000650 <strcpy>
c0015092:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015098:	83 c4 10             	add    esp,0x10
c001509b:	83 c1 01             	add    ecx,0x1
c001509e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00150a4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00150a7:	85 c0                	test   eax,eax
c00150a9:	75 bd                	jne    c0015068 <Process::addArgs(char**)+0x24>
c00150ab:	90                   	nop
c00150ac:	5b                   	pop    ebx
c00150ad:	5e                   	pop    esi
c00150ae:	5f                   	pop    edi
c00150af:	c3                   	ret    

c00150b0 <Process::Process(char const*, Process*, char**)>:
c00150b0:	56                   	push   esi
c00150b1:	53                   	push   ebx
c00150b2:	83 ec 14             	sub    esp,0x14
c00150b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150b9:	05 0c 02 00 00       	add    eax,0x20c
c00150be:	bb 07 00 00 00       	mov    ebx,0x7
c00150c3:	89 c6                	mov    esi,eax
c00150c5:	8d 76 00             	lea    esi,[esi+0x0]
c00150c8:	85 db                	test   ebx,ebx
c00150ca:	78 14                	js     c00150e0 <Process::Process(char const*, Process*, char**)+0x30>
c00150cc:	83 ec 0c             	sub    esp,0xc
c00150cf:	56                   	push   esi
c00150d0:	e8 bb b8 00 00       	call   c0020990 <ThreadControlBlock::ThreadControlBlock()>
c00150d5:	83 c4 10             	add    esp,0x10
c00150d8:	83 c6 5f             	add    esi,0x5f
c00150db:	83 eb 01             	sub    ebx,0x1
c00150de:	eb e8                	jmp    c00150c8 <Process::Process(char const*, Process*, char**)+0x18>
c00150e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150e4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00150eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150ef:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00150f6:	83 ec 0c             	sub    esp,0xc
c00150f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fd:	e8 a6 8a ff ff       	call   c000dba8 <KeNewProcessEnv(Process*)>
c0015102:	83 c4 10             	add    esp,0x10
c0015105:	89 c2                	mov    edx,eax
c0015107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001510b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015115:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001511e:	a1 5c 4f 02 c0       	mov    eax,ds:0xc0024f5c
c0015123:	8d 50 01             	lea    edx,[eax+0x1]
c0015126:	89 15 5c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f5c,edx
c001512c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015130:	89 02                	mov    DWORD PTR [edx],eax
c0015132:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001513a:	83 ec 0c             	sub    esp,0xc
c001513d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015141:	e8 5a 98 ff ff       	call   c000e9a0 <malloc>
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	89 c3                	mov    ebx,eax
c001514b:	83 ec 08             	sub    esp,0x8
c001514e:	6a 00                	push   0x0
c0015150:	53                   	push   ebx
c0015151:	e8 a2 d9 ff ff       	call   c0012af8 <VAS::VAS(bool)>
c0015156:	83 c4 10             	add    esp,0x10
c0015159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001515d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015167:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015175:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015179:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001517f:	e8 1b ac ff ff       	call   c000fd9f <KeInitSignals()>
c0015184:	89 c2                	mov    edx,eax
c0015186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001518a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015194:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001519a:	85 c0                	test   eax,eax
c001519c:	74 42                	je     c00151e0 <Process::Process(char const*, Process*, char**)+0x130>
c001519e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151a2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00151a8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00151ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151b2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00151b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00151c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00151c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151cc:	05 0c 01 00 00       	add    eax,0x10c
c00151d1:	83 ec 08             	sub    esp,0x8
c00151d4:	52                   	push   edx
c00151d5:	50                   	push   eax
c00151d6:	e8 75 b4 fe ff       	call   c0000650 <strcpy>
c00151db:	83 c4 10             	add    esp,0x10
c00151de:	eb 64                	jmp    c0015244 <Process::Process(char const*, Process*, char**)+0x194>
c00151e0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151ef:	e8 ac 97 ff ff       	call   c000e9a0 <malloc>
c00151f4:	83 c4 10             	add    esp,0x10
c00151f7:	89 c3                	mov    ebx,eax
c00151f9:	83 ec 08             	sub    esp,0x8
c00151fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015200:	53                   	push   ebx
c0015201:	e8 88 c4 ff ff       	call   c001168e <VgaText::VgaText(char const*)>
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001520d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015217:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001521d:	83 ec 0c             	sub    esp,0xc
c0015220:	50                   	push   eax
c0015221:	e8 16 bd ff ff       	call   c0010f3c <addToTerminalCycle(VgaText*)>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001522d:	05 0c 01 00 00       	add    eax,0x10c
c0015232:	83 ec 08             	sub    esp,0x8
c0015235:	68 44 36 02 c0       	push   0xc0023644
c001523a:	50                   	push   eax
c001523b:	e8 10 b4 fe ff       	call   c0000650 <strcpy>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	90                   	nop
c0015244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015248:	83 c0 0c             	add    eax,0xc
c001524b:	83 ec 08             	sub    esp,0x8
c001524e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015252:	50                   	push   eax
c0015253:	e8 f8 b3 fe ff       	call   c0000650 <strcpy>
c0015258:	83 c4 10             	add    esp,0x10
c001525b:	83 ec 08             	sub    esp,0x8
c001525e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015266:	e8 d9 fd ff ff       	call   c0015044 <Process::addArgs(char**)>
c001526b:	83 c4 10             	add    esp,0x10
c001526e:	83 ec 08             	sub    esp,0x8
c0015271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015279:	e8 c1 ec ff ff       	call   c0013f3f <Thr::loadProgramIntoMemory(Process*, char const*)>
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015285:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015289:	83 f0 01             	xor    eax,0x1
c001528c:	88 c2                	mov    dl,al
c001528e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015292:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015298:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001529d:	83 ec 04             	sub    esp,0x4
c00152a0:	50                   	push   eax
c00152a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152a5:	68 c0 36 02 c0       	push   0xc00236c0
c00152aa:	e8 9f 1c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00152af:	83 c4 10             	add    esp,0x10
c00152b2:	90                   	nop
c00152b3:	83 c4 14             	add    esp,0x14
c00152b6:	5b                   	pop    ebx
c00152b7:	5e                   	pop    esi
c00152b8:	c3                   	ret    
c00152b9:	90                   	nop
c00152ba:	66 90                	xchg   ax,ax

c00152bc <Process::Process(bool, char const*, Process*, char**)>:
c00152bc:	56                   	push   esi
c00152bd:	53                   	push   ebx
c00152be:	83 ec 24             	sub    esp,0x24
c00152c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00152c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00152c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152cd:	05 0c 02 00 00       	add    eax,0x20c
c00152d2:	bb 07 00 00 00       	mov    ebx,0x7
c00152d7:	89 c6                	mov    esi,eax
c00152d9:	8d 76 00             	lea    esi,[esi+0x0]
c00152dc:	85 db                	test   ebx,ebx
c00152de:	78 14                	js     c00152f4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00152e0:	83 ec 0c             	sub    esp,0xc
c00152e3:	56                   	push   esi
c00152e4:	e8 a7 b6 00 00       	call   c0020990 <ThreadControlBlock::ThreadControlBlock()>
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	83 c6 5f             	add    esi,0x5f
c00152ef:	83 eb 01             	sub    ebx,0x1
c00152f2:	eb e8                	jmp    c00152dc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00152f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152f8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00152ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015303:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001530a:	83 ec 0c             	sub    esp,0xc
c001530d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015311:	e8 92 88 ff ff       	call   c000dba8 <KeNewProcessEnv(Process*)>
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	89 c2                	mov    edx,eax
c001531b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001531f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015329:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015332:	a1 5c 4f 02 c0       	mov    eax,ds:0xc0024f5c
c0015337:	8d 50 01             	lea    edx,[eax+0x1]
c001533a:	89 15 5c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f5c,edx
c0015340:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015344:	89 02                	mov    DWORD PTR [edx],eax
c0015346:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001534e:	83 ec 0c             	sub    esp,0xc
c0015351:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015355:	e8 46 96 ff ff       	call   c000e9a0 <malloc>
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	89 c3                	mov    ebx,eax
c001535f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015364:	83 ec 08             	sub    esp,0x8
c0015367:	50                   	push   eax
c0015368:	53                   	push   ebx
c0015369:	e8 8a d7 ff ff       	call   c0012af8 <VAS::VAS(bool)>
c001536e:	83 c4 10             	add    esp,0x10
c0015371:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015375:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001537b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001537f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015389:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001538d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015391:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015397:	e8 03 aa ff ff       	call   c000fd9f <KeInitSignals()>
c001539c:	89 c2                	mov    edx,eax
c001539e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153a2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00153a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153ac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00153b2:	85 c0                	test   eax,eax
c00153b4:	74 42                	je     c00153f8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00153b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153ba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00153c0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00153c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153ca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00153d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00153da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00153e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153e4:	05 0c 01 00 00       	add    eax,0x10c
c00153e9:	83 ec 08             	sub    esp,0x8
c00153ec:	52                   	push   edx
c00153ed:	50                   	push   eax
c00153ee:	e8 5d b2 fe ff       	call   c0000650 <strcpy>
c00153f3:	83 c4 10             	add    esp,0x10
c00153f6:	eb 64                	jmp    c001545c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00153f8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015400:	83 ec 0c             	sub    esp,0xc
c0015403:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015407:	e8 94 95 ff ff       	call   c000e9a0 <malloc>
c001540c:	83 c4 10             	add    esp,0x10
c001540f:	89 c3                	mov    ebx,eax
c0015411:	83 ec 08             	sub    esp,0x8
c0015414:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015418:	53                   	push   ebx
c0015419:	e8 70 c2 ff ff       	call   c001168e <VgaText::VgaText(char const*)>
c001541e:	83 c4 10             	add    esp,0x10
c0015421:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015425:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001542b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001542f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015435:	83 ec 0c             	sub    esp,0xc
c0015438:	50                   	push   eax
c0015439:	e8 fe ba ff ff       	call   c0010f3c <addToTerminalCycle(VgaText*)>
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015445:	05 0c 01 00 00       	add    eax,0x10c
c001544a:	83 ec 08             	sub    esp,0x8
c001544d:	68 44 36 02 c0       	push   0xc0023644
c0015452:	50                   	push   eax
c0015453:	e8 f8 b1 fe ff       	call   c0000650 <strcpy>
c0015458:	83 c4 10             	add    esp,0x10
c001545b:	90                   	nop
c001545c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015460:	83 c0 0c             	add    eax,0xc
c0015463:	83 ec 08             	sub    esp,0x8
c0015466:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001546a:	50                   	push   eax
c001546b:	e8 e0 b1 fe ff       	call   c0000650 <strcpy>
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	83 ec 08             	sub    esp,0x8
c0015476:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001547a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001547e:	e8 c1 fb ff ff       	call   c0015044 <Process::addArgs(char**)>
c0015483:	83 c4 10             	add    esp,0x10
c0015486:	90                   	nop
c0015487:	83 c4 24             	add    esp,0x24
c001548a:	5b                   	pop    ebx
c001548b:	5e                   	pop    esi
c001548c:	c3                   	ret    
c001548d:	8d 76 00             	lea    esi,[esi+0x0]

c0015490 <taskStartupFunction>:
c0015490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015495:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015498:	c3                   	ret    
c0015499:	8d 76 00             	lea    esi,[esi+0x0]

c001549c <KeDisablePreemption()>:
c001549c:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00154a1:	85 c0                	test   eax,eax
c00154a3:	75 13                	jne    c00154b8 <KeDisablePreemption()+0x1c>
c00154a5:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c00154ab:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c00154b2:	88 15 88 d6 02 c0    	mov    BYTE PTR ds:0xc002d688,dl
c00154b8:	83 c0 01             	add    eax,0x1
c00154bb:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00154c0:	c3                   	ret    
c00154c1:	8d 76 00             	lea    esi,[esi+0x0]

c00154c4 <KeRestorePreemption()>:
c00154c4:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00154c9:	83 e8 01             	sub    eax,0x1
c00154cc:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00154d1:	75 0d                	jne    c00154e0 <KeRestorePreemption()+0x1c>
c00154d3:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c00154d8:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c00154dd:	8d 76 00             	lea    esi,[esi+0x0]
c00154e0:	c3                   	ret    
c00154e1:	90                   	nop
c00154e2:	66 90                	xchg   ax,ax

c00154e4 <Process::createThread(void (*)(void*), void*, int)>:
c00154e4:	57                   	push   edi
c00154e5:	31 c9                	xor    ecx,ecx
c00154e7:	56                   	push   esi
c00154e8:	53                   	push   ebx
c00154e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154ed:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00154f4:	89 f2                	mov    edx,esi
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	0f b7 c2             	movzx  eax,dx
c00154fb:	80 e2 01             	and    dl,0x1
c00154fe:	74 14                	je     c0015514 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015500:	d1 f8                	sar    eax,1
c0015502:	83 c1 01             	add    ecx,0x1
c0015505:	83 f9 10             	cmp    ecx,0x10
c0015508:	89 c2                	mov    edx,eax
c001550a:	75 ec                	jne    c00154f8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001550c:	31 db                	xor    ebx,ebx
c001550e:	89 d8                	mov    eax,ebx
c0015510:	5b                   	pop    ebx
c0015511:	5e                   	pop    esi
c0015512:	5f                   	pop    edi
c0015513:	c3                   	ret    
c0015514:	b8 01 00 00 00       	mov    eax,0x1
c0015519:	d3 e0                	shl    eax,cl
c001551b:	09 c6                	or     esi,eax
c001551d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015524:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015527:	c1 e0 05             	shl    eax,0x5
c001552a:	29 c8                	sub    eax,ecx
c001552c:	01 d8                	add    eax,ebx
c001552e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015535:	75 0d                	jne    c0015544 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015537:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015541:	8d 76 00             	lea    esi,[esi+0x0]
c0015544:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001554a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	c1 e6 05             	shl    esi,0x5
c0015553:	29 ce                	sub    esi,ecx
c0015555:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015558:	8d 04 33             	lea    eax,[ebx+esi*1]
c001555b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015561:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015567:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001556d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015574:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001557a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001557e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015584:	89 ca                	mov    edx,ecx
c0015586:	f7 da                	neg    edx
c0015588:	c1 e2 15             	shl    edx,0x15
c001558b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015591:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015597:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001559b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00155a5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00155ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155af:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00155b5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00155bf:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00155c9:	68 00 01 00 00       	push   0x100
c00155ce:	e8 cd 93 ff ff       	call   c000e9a0 <malloc>
c00155d3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00155d6:	58                   	pop    eax
c00155d7:	5a                   	pop    edx
c00155d8:	53                   	push   ebx
c00155d9:	68 cc d6 02 c0       	push   0xc002d6cc
c00155de:	e8 59 af 00 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	89 d8                	mov    eax,ebx
c00155e8:	5b                   	pop    ebx
c00155e9:	5e                   	pop    esi
c00155ea:	5f                   	pop    edi
c00155eb:	c3                   	ret    

c00155ec <Process::createUserThread()>:
c00155ec:	83 ec 0c             	sub    esp,0xc
c00155ef:	68 80 00 00 00       	push   0x80
c00155f4:	6a 00                	push   0x0
c00155f6:	68 38 4f 01 c0       	push   0xc0014f38
c00155fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155ff:	50                   	push   eax
c0015600:	e8 df fe ff ff       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c0015605:	83 c4 1c             	add    esp,0x1c
c0015608:	c3                   	ret    
c0015609:	8d 76 00             	lea    esi,[esi+0x0]

c001560c <setupMultitasking(void (*)())>:
c001560c:	56                   	push   esi
c001560d:	53                   	push   ebx
c001560e:	83 ec 04             	sub    esp,0x4
c0015611:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015615:	eb 11                	jmp    c0015628 <setupMultitasking(void (*)())+0x1c>
c0015617:	90                   	nop
c0015618:	83 ec 0c             	sub    esp,0xc
c001561b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015620:	e8 5b ae 00 00       	call   c0020480 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	83 ec 0c             	sub    esp,0xc
c001562b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015630:	e8 27 ae 00 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	84 c0                	test   al,al
c001563a:	74 dc                	je     c0015618 <setupMultitasking(void (*)())+0xc>
c001563c:	83 ec 0c             	sub    esp,0xc
c001563f:	68 24 07 00 00       	push   0x724
c0015644:	e8 57 93 ff ff       	call   c000e9a0 <malloc>
c0015649:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015650:	6a 00                	push   0x0
c0015652:	68 48 36 02 c0       	push   0xc0023648
c0015657:	6a 01                	push   0x1
c0015659:	50                   	push   eax
c001565a:	89 c3                	mov    ebx,eax
c001565c:	e8 5b fc ff ff       	call   c00152bc <Process::Process(bool, char const*, Process*, char**)>
c0015661:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015667:	83 c4 14             	add    esp,0x14
c001566a:	89 1d d8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d8,ebx
c0015670:	50                   	push   eax
c0015671:	e8 1b bb ff ff       	call   c0011191 <setActiveTerminal(VgaText*)>
c0015676:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001567d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015687:	83 c8 01             	or     eax,0x1
c001568a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015691:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015697:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001569a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00156a4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00156aa:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00156b4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00156ba:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00156c4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00156ce:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00156d4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00156da:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00156e4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00156ee:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00156f5:	e8 a6 92 ff ff       	call   c000e9a0 <malloc>
c00156fa:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015700:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015706:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001570c:	5a                   	pop    edx
c001570d:	59                   	pop    ecx
c001570e:	68 44 36 02 c0       	push   0xc0023644
c0015713:	50                   	push   eax
c0015714:	e8 37 af fe ff       	call   c0000650 <strcpy>
c0015719:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015720:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015724:	83 c4 14             	add    esp,0x14
c0015727:	5b                   	pop    ebx
c0015728:	5e                   	pop    esi
c0015729:	e9 3b ab fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001572e:	66 90                	xchg   ax,ax

c0015730 <schedule()>:
c0015730:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c0015736:	85 d2                	test   edx,edx
c0015738:	74 0e                	je     c0015748 <schedule()+0x18>
c001573a:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c0015744:	c3                   	ret    
c0015745:	8d 76 00             	lea    esi,[esi+0x0]
c0015748:	53                   	push   ebx
c0015749:	83 ec 14             	sub    esp,0x14
c001574c:	68 cc d6 02 c0       	push   0xc002d6cc
c0015751:	e8 06 ad 00 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015756:	83 c4 10             	add    esp,0x10
c0015759:	84 c0                	test   al,al
c001575b:	75 3f                	jne    c001579c <schedule()+0x6c>
c001575d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015762:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015765:	83 fa 01             	cmp    edx,0x1
c0015768:	74 3a                	je     c00157a4 <schedule()+0x74>
c001576a:	66 90                	xchg   ax,ax
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	68 cc d6 02 c0       	push   0xc002d6cc
c0015774:	e8 ff ac 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015779:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015780:	89 c3                	mov    ebx,eax
c0015782:	e8 f9 ac 00 00       	call   c0020480 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015787:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001578e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015791:	e8 fe f7 ff ff       	call   c0014f94 <switchToThread(ThreadControlBlock*)>
c0015796:	83 c4 10             	add    esp,0x10
c0015799:	8d 76 00             	lea    esi,[esi+0x0]
c001579c:	83 c4 08             	add    esp,0x8
c001579f:	5b                   	pop    ebx
c00157a0:	c3                   	ret    
c00157a1:	8d 76 00             	lea    esi,[esi+0x0]
c00157a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00157ab:	83 ec 08             	sub    esp,0x8
c00157ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157b3:	50                   	push   eax
c00157b4:	68 cc d6 02 c0       	push   0xc002d6cc
c00157b9:	e8 7e ad 00 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157be:	83 c4 10             	add    esp,0x10
c00157c1:	eb a9                	jmp    c001576c <schedule()+0x3c>
c00157c3:	90                   	nop

c00157c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00157c4:	83 ec 0c             	sub    esp,0xc
c00157c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00157d3:	e8 58 ff ff ff       	call   c0015730 <schedule()>
c00157d8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00157e0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00157e5:	85 c0                	test   eax,eax
c00157e7:	75 03                	jne    c00157ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00157e9:	fb                   	sti    
c00157ea:	66 90                	xchg   ax,ax
c00157ec:	83 c4 0c             	add    esp,0xc
c00157ef:	c3                   	ret    

c00157f0 <blockTask(TaskState)>:
c00157f0:	53                   	push   ebx
c00157f1:	83 ec 10             	sub    esp,0x10
c00157f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00157f8:	fa                   	cli    
c00157f9:	53                   	push   ebx
c00157fa:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00157ff:	68 4f 36 02 c0       	push   0xc002364f
c0015804:	83 c0 01             	add    eax,0x1
c0015807:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c001580c:	e8 3d 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015811:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015816:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0015819:	e8 12 ff ff ff       	call   c0015730 <schedule()>
c001581e:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015826:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c001582c:	83 c4 10             	add    esp,0x10
c001582f:	85 d2                	test   edx,edx
c0015831:	75 01                	jne    c0015834 <blockTask(TaskState)+0x44>
c0015833:	fb                   	sti    
c0015834:	83 c4 08             	add    esp,0x8
c0015837:	5b                   	pop    ebx
c0015838:	c3                   	ret    
c0015839:	8d 76 00             	lea    esi,[esi+0x0]

c001583c <waitTask(int, int*, int)>:
c001583c:	83 ec 18             	sub    esp,0x18
c001583f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015844:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015848:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001584b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001584f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015854:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015857:	6a 07                	push   0x7
c0015859:	e8 92 ff ff ff       	call   c00157f0 <blockTask(TaskState)>
c001585e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015863:	83 c4 10             	add    esp,0x10
c0015866:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015869:	85 d2                	test   edx,edx
c001586b:	74 0b                	je     c0015878 <waitTask(int, int*, int)+0x3c>
c001586d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015870:	89 02                	mov    DWORD PTR [edx],eax
c0015872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015877:	90                   	nop
c0015878:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001587b:	83 c4 0c             	add    esp,0xc
c001587e:	c3                   	ret    
c001587f:	90                   	nop

c0015880 <milliTenthSleepUntil(unsigned int)>:
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015887:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c001588d:	76 05                	jbe    c0015894 <milliTenthSleepUntil(unsigned int)+0x14>
c001588f:	90                   	nop
c0015890:	83 c4 0c             	add    esp,0xc
c0015893:	c3                   	ret    
c0015894:	fa                   	cli    
c0015895:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c001589b:	83 ec 08             	sub    esp,0x8
c001589e:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c00158a4:	83 c1 01             	add    ecx,0x1
c00158a7:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c00158ad:	83 c2 01             	add    edx,0x1
c00158b0:	89 15 ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,edx
c00158b6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158bc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00158bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158c5:	51                   	push   ecx
c00158c6:	68 c0 d6 02 c0       	push   0xc002d6c0
c00158cb:	e8 6c ac 00 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00158d7:	e8 14 ff ff ff       	call   c00157f0 <blockTask(TaskState)>
c00158dc:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00158e1:	83 c4 10             	add    esp,0x10
c00158e4:	83 e8 01             	sub    eax,0x1
c00158e7:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00158ec:	85 c0                	test   eax,eax
c00158ee:	75 0c                	jne    c00158fc <milliTenthSleepUntil(unsigned int)+0x7c>
c00158f0:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c00158f6:	85 d2                	test   edx,edx
c00158f8:	75 1a                	jne    c0015914 <milliTenthSleepUntil(unsigned int)+0x94>
c00158fa:	66 90                	xchg   ax,ax
c00158fc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015904:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015909:	85 c0                	test   eax,eax
c001590b:	75 83                	jne    c0015890 <milliTenthSleepUntil(unsigned int)+0x10>
c001590d:	fb                   	sti    
c001590e:	83 c4 0c             	add    esp,0xc
c0015911:	c3                   	ret    
c0015912:	66 90                	xchg   ax,ax
c0015914:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c001591e:	e8 0d fe ff ff       	call   c0015730 <schedule()>
c0015923:	eb d7                	jmp    c00158fc <milliTenthSleepUntil(unsigned int)+0x7c>
c0015925:	8d 76 00             	lea    esi,[esi+0x0]

c0015928 <milliTenthSleep(unsigned int)>:
c0015928:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001592c:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c0015931:	01 c2                	add    edx,eax
c0015933:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015937:	e9 44 ff ff ff       	jmp    c0015880 <milliTenthSleepUntil(unsigned int)>

c001593c <sleep(unsigned int)>:
c001593c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015944:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015948:	eb de                	jmp    c0015928 <milliTenthSleep(unsigned int)>
c001594a:	66 90                	xchg   ax,ax

c001594c <taskReturned>:
c001594c:	83 ec 18             	sub    esp,0x18
c001594f:	68 ec 36 02 c0       	push   0xc00236ec
c0015954:	e8 8d 93 ff ff       	call   c000ece6 <KePanic(char const*)>
c0015959:	83 c4 10             	add    esp,0x10
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	6a 02                	push   0x2
c0015961:	e8 8a fe ff ff       	call   c00157f0 <blockTask(TaskState)>
c0015966:	fa                   	cli    
c0015967:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001596c:	83 c0 01             	add    eax,0x1
c001596f:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015974:	e8 b7 fd ff ff       	call   c0015730 <schedule()>
c0015979:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015981:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015987:	83 c4 10             	add    esp,0x10
c001598a:	85 d2                	test   edx,edx
c001598c:	75 ce                	jne    c001595c <taskReturned+0x10>
c001598e:	fb                   	sti    
c001598f:	eb cb                	jmp    c001595c <taskReturned+0x10>
c0015991:	8d 76 00             	lea    esi,[esi+0x0]

c0015994 <Thr::processFromPID(int)>:
c0015994:	57                   	push   edi
c0015995:	56                   	push   esi
c0015996:	53                   	push   ebx
c0015997:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001599b:	fa                   	cli    
c001599c:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00159a2:	83 ec 0c             	sub    esp,0xc
c00159a5:	68 cc d6 02 c0       	push   0xc002d6cc
c00159aa:	83 c1 01             	add    ecx,0x1
c00159ad:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c00159b3:	e8 c0 aa 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	89 c7                	mov    edi,eax
c00159bd:	eb 15                	jmp    c00159d4 <Thr::processFromPID(int)+0x40>
c00159bf:	90                   	nop
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	68 cc d6 02 c0       	push   0xc002d6cc
c00159c8:	e8 ab aa 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	39 f8                	cmp    eax,edi
c00159d2:	74 50                	je     c0015a24 <Thr::processFromPID(int)+0x90>
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	68 cc d6 02 c0       	push   0xc002d6cc
c00159dc:	e8 97 aa 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159e1:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c00159e8:	89 c3                	mov    ebx,eax
c00159ea:	e8 91 aa 00 00       	call   c0020480 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159ef:	58                   	pop    eax
c00159f0:	5a                   	pop    edx
c00159f1:	53                   	push   ebx
c00159f2:	68 cc d6 02 c0       	push   0xc002d6cc
c00159f7:	e8 40 ab 00 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	39 30                	cmp    DWORD PTR [eax],esi
c0015a04:	75 ba                	jne    c00159c0 <Thr::processFromPID(int)+0x2c>
c0015a06:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015a0e:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015a14:	85 c9                	test   ecx,ecx
c0015a16:	74 08                	je     c0015a20 <Thr::processFromPID(int)+0x8c>
c0015a18:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a1b:	90                   	nop
c0015a1c:	5b                   	pop    ebx
c0015a1d:	5e                   	pop    esi
c0015a1e:	5f                   	pop    edi
c0015a1f:	c3                   	ret    
c0015a20:	fb                   	sti    
c0015a21:	eb f5                	jmp    c0015a18 <Thr::processFromPID(int)+0x84>
c0015a23:	90                   	nop
c0015a24:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015a2c:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015a32:	31 c0                	xor    eax,eax
c0015a34:	85 d2                	test   edx,edx
c0015a36:	75 e4                	jne    c0015a1c <Thr::processFromPID(int)+0x88>
c0015a38:	fb                   	sti    
c0015a39:	5b                   	pop    ebx
c0015a3a:	5e                   	pop    esi
c0015a3b:	5f                   	pop    edi
c0015a3c:	c3                   	ret    
c0015a3d:	8d 76 00             	lea    esi,[esi+0x0]

c0015a40 <unblockTask(ThreadControlBlock*)>:
c0015a40:	53                   	push   ebx
c0015a41:	83 ec 08             	sub    esp,0x8
c0015a44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a48:	fa                   	cli    
c0015a49:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015a4f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015a52:	83 c2 01             	add    edx,0x1
c0015a55:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c0015a5b:	85 c0                	test   eax,eax
c0015a5d:	74 6d                	je     c0015acc <unblockTask(ThreadControlBlock*)+0x8c>
c0015a5f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015a62:	83 f8 01             	cmp    eax,0x1
c0015a65:	74 39                	je     c0015aa0 <unblockTask(ThreadControlBlock*)+0x60>
c0015a67:	83 ec 0c             	sub    esp,0xc
c0015a6a:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a6f:	e8 04 aa 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a74:	83 c4 10             	add    esp,0x10
c0015a77:	85 c0                	test   eax,eax
c0015a79:	75 1d                	jne    c0015a98 <unblockTask(ThreadControlBlock*)+0x58>
c0015a7b:	eb 63                	jmp    c0015ae0 <unblockTask(ThreadControlBlock*)+0xa0>
c0015a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a80:	83 ec 08             	sub    esp,0x8
c0015a83:	50                   	push   eax
c0015a84:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a89:	e8 f6 ae 00 00       	call   c0020984 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	85 c0                	test   eax,eax
c0015a93:	74 4b                	je     c0015ae0 <unblockTask(ThreadControlBlock*)+0xa0>
c0015a95:	8d 76 00             	lea    esi,[esi+0x0]
c0015a98:	39 c3                	cmp    ebx,eax
c0015a9a:	75 e4                	jne    c0015a80 <unblockTask(ThreadControlBlock*)+0x40>
c0015a9c:	eb 12                	jmp    c0015ab0 <unblockTask(ThreadControlBlock*)+0x70>
c0015a9e:	66 90                	xchg   ax,ax
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	68 78 36 02 c0       	push   0xc0023678
c0015aa8:	e8 a1 14 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015aad:	83 c4 10             	add    esp,0x10
c0015ab0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015ab8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015abd:	85 c0                	test   eax,eax
c0015abf:	75 03                	jne    c0015ac4 <unblockTask(ThreadControlBlock*)+0x84>
c0015ac1:	fb                   	sti    
c0015ac2:	66 90                	xchg   ax,ax
c0015ac4:	83 c4 08             	add    esp,0x8
c0015ac7:	5b                   	pop    ebx
c0015ac8:	c3                   	ret    
c0015ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0015acc:	83 ec 0c             	sub    esp,0xc
c0015acf:	68 61 36 02 c0       	push   0xc0023661
c0015ad4:	e8 75 14 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	eb d2                	jmp    c0015ab0 <unblockTask(ThreadControlBlock*)+0x70>
c0015ade:	66 90                	xchg   ax,ax
c0015ae0:	83 ec 08             	sub    esp,0x8
c0015ae3:	53                   	push   ebx
c0015ae4:	68 cc d6 02 c0       	push   0xc002d6cc
c0015ae9:	e8 4e aa 00 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	eb bd                	jmp    c0015ab0 <unblockTask(ThreadControlBlock*)+0x70>
c0015af3:	90                   	nop

c0015af4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015af4:	55                   	push   ebp
c0015af5:	57                   	push   edi
c0015af6:	56                   	push   esi
c0015af7:	53                   	push   ebx
c0015af8:	83 ec 1c             	sub    esp,0x1c
c0015afb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015aff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b02:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015b08:	85 ed                	test   ebp,ebp
c0015b0a:	7e 28                	jle    c0015b34 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015b0c:	31 f6                	xor    esi,esi
c0015b0e:	66 90                	xchg   ax,ax
c0015b10:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015b17:	83 ec 0c             	sub    esp,0xc
c0015b1a:	83 c6 01             	add    esi,0x1
c0015b1d:	57                   	push   edi
c0015b1e:	e8 8d 8e ff ff       	call   c000e9b0 <free>
c0015b23:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015b2f:	7f df                	jg     c0015b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015b31:	8d 76 00             	lea    esi,[esi+0x0]
c0015b34:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b3e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015b43:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015b46:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015b49:	d3 c0                	rol    eax,cl
c0015b4b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015b52:	21 c8                	and    eax,ecx
c0015b54:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015b5b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b5e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015b66:	89 f7                	mov    edi,esi
c0015b68:	0f 85 72 01 00 00    	jne    c0015ce0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015b6e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015b74:	85 ed                	test   ebp,ebp
c0015b76:	74 1c                	je     c0015b94 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	55                   	push   ebp
c0015b7c:	e8 43 7f ff ff       	call   c000dac4 <EnvVarContainer::~EnvVarContainer()>
c0015b81:	59                   	pop    ecx
c0015b82:	5e                   	pop    esi
c0015b83:	6a 0c                	push   0xc
c0015b85:	55                   	push   ebp
c0015b86:	e8 20 6b ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0015b8b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	89 f7                	mov    edi,esi
c0015b93:	90                   	nop
c0015b94:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015b9a:	85 c0                	test   eax,eax
c0015b9c:	0f 84 b2 00 00 00    	je     c0015c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015ba2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015ba9:	31 c9                	xor    ecx,ecx
c0015bab:	eb 17                	jmp    c0015bc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015bad:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb0:	83 c1 01             	add    ecx,0x1
c0015bb3:	83 f9 10             	cmp    ecx,0x10
c0015bb6:	0f 84 98 00 00 00    	je     c0015c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015bbc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015bc2:	66 90                	xchg   ax,ax
c0015bc4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015bcb:	d3 fa                	sar    edx,cl
c0015bcd:	80 e2 01             	and    dl,0x1
c0015bd0:	74 de                	je     c0015bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015bd2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015bd5:	c1 e2 05             	shl    edx,0x5
c0015bd8:	29 ca                	sub    edx,ecx
c0015bda:	01 d0                	add    eax,edx
c0015bdc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015be2:	83 fd 07             	cmp    ebp,0x7
c0015be5:	75 c9                	jne    c0015bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015be7:	05 40 02 00 00       	add    eax,0x240
c0015bec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015bef:	83 fd ff             	cmp    ebp,0xffffffff
c0015bf2:	0f 8c f0 00 00 00    	jl     c0015ce8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015bf8:	0f 84 ae 01 00 00    	je     c0015dac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015bfe:	85 ed                	test   ebp,ebp
c0015c00:	0f 84 92 01 00 00    	je     c0015d98 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015c06:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015c08:	75 a6                	jne    c0015bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015c0a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c0e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015c14:	01 d0                	add    eax,edx
c0015c16:	66 90                	xchg   ax,ax
c0015c18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015c25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c2e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015c35:	50                   	push   eax
c0015c36:	e8 05 fe ff ff       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c41:	89 f7                	mov    edi,esi
c0015c43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c47:	83 c1 01             	add    ecx,0x1
c0015c4a:	83 f9 10             	cmp    ecx,0x10
c0015c4d:	0f 85 69 ff ff ff    	jne    c0015bbc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015c53:	90                   	nop
c0015c54:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015c5a:	85 c0                	test   eax,eax
c0015c5c:	74 62                	je     c0015cc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015c5e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015c64:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015c6a:	74 54                	je     c0015cc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015c6c:	83 ec 0c             	sub    esp,0xc
c0015c6f:	68 cc d6 02 c0       	push   0xc002d6cc
c0015c74:	e8 ff a7 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c79:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015c80:	89 c7                	mov    edi,eax
c0015c82:	e8 d5 a7 00 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c87:	83 c4 10             	add    esp,0x10
c0015c8a:	84 c0                	test   al,al
c0015c8c:	0f 84 ce 00 00 00    	je     c0015d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015c92:	66 90                	xchg   ax,ax
c0015c94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c97:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c9d:	85 d2                	test   edx,edx
c0015c9f:	74 0f                	je     c0015cb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015ca1:	8b 02                	mov    eax,DWORD PTR [edx]
c0015ca3:	83 ec 0c             	sub    esp,0xc
c0015ca6:	52                   	push   edx
c0015ca7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015caa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015cba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015cc0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015cc6:	85 db                	test   ebx,ebx
c0015cc8:	74 16                	je     c0015ce0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015cca:	83 ec 0c             	sub    esp,0xc
c0015ccd:	53                   	push   ebx
c0015cce:	e8 79 c9 ff ff       	call   c001264c <VAS::~VAS()>
c0015cd3:	58                   	pop    eax
c0015cd4:	5a                   	pop    edx
c0015cd5:	6a 14                	push   0x14
c0015cd7:	53                   	push   ebx
c0015cd8:	e8 ce 69 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	83 c4 1c             	add    esp,0x1c
c0015ce3:	5b                   	pop    ebx
c0015ce4:	5e                   	pop    esi
c0015ce5:	5f                   	pop    edi
c0015ce6:	5d                   	pop    ebp
c0015ce7:	c3                   	ret    
c0015ce8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015cec:	83 ec 0c             	sub    esp,0xc
c0015cef:	68 20 37 02 c0       	push   0xc0023720
c0015cf4:	e8 ed 8f ff ff       	call   c000ece6 <KePanic(char const*)>
c0015cf9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	89 f7                	mov    edi,esi
c0015d01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d05:	e9 a6 fe ff ff       	jmp    c0015bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015d0a:	66 90                	xchg   ax,ax
c0015d0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d12:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015d18:	75 1e                	jne    c0015d38 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d1a:	83 ec 0c             	sub    esp,0xc
c0015d1d:	68 88 37 02 c0       	push   0xc0023788
c0015d22:	e8 27 12 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015d27:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015d2e:	e8 bd fa ff ff       	call   c00157f0 <blockTask(TaskState)>
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	66 90                	xchg   ax,ax
c0015d38:	83 ec 08             	sub    esp,0x8
c0015d3b:	56                   	push   esi
c0015d3c:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d41:	e8 f6 a7 00 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d46:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015d4d:	e8 26 a7 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d52:	83 c4 10             	add    esp,0x10
c0015d55:	39 f8                	cmp    eax,edi
c0015d57:	0f 84 37 ff ff ff    	je     c0015c94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d68:	e8 0b a7 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d6d:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015d74:	89 c6                	mov    esi,eax
c0015d76:	e8 05 a7 00 00       	call   c0020480 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	39 f3                	cmp    ebx,esi
c0015d80:	74 b6                	je     c0015d38 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d82:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015d85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d88:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015d8e:	75 a8                	jne    c0015d38 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d90:	e9 77 ff ff ff       	jmp    c0015d0c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015d95:	8d 76 00             	lea    esi,[esi+0x0]
c0015d98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015d9c:	83 ec 0c             	sub    esp,0xc
c0015d9f:	68 54 37 02 c0       	push   0xc0023754
c0015da4:	e9 4b ff ff ff       	jmp    c0015cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015da9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015db0:	8b 36                	mov    esi,DWORD PTR [esi]
c0015db2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015db5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015db8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015dbe:	01 d7                	add    edi,edx
c0015dc0:	89 f8                	mov    eax,edi
c0015dc2:	e9 51 fe ff ff       	jmp    c0015c18 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015dc7:	90                   	nop

c0015dc8 <cleanerTaskFunction(void*)>:
c0015dc8:	53                   	push   ebx
c0015dc9:	83 ec 08             	sub    esp,0x8
c0015dcc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015dd4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015dd9:	85 c0                	test   eax,eax
c0015ddb:	75 03                	jne    c0015de0 <cleanerTaskFunction(void*)+0x18>
c0015ddd:	fb                   	sti    
c0015dde:	66 90                	xchg   ax,ax
c0015de0:	fa                   	cli    
c0015de1:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015de6:	83 c0 01             	add    eax,0x1
c0015de9:	80 3d 94 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d694,0x0
c0015df0:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015df5:	0f 85 c9 00 00 00    	jne    c0015ec4 <cleanerTaskFunction(void*)+0xfc>
c0015dfb:	83 ec 0c             	sub    esp,0xc
c0015dfe:	6a 02                	push   0x2
c0015e00:	e8 bf f9 ff ff       	call   c00157c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	c6 05 94 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d694,0x0
c0015e0f:	fa                   	cli    
c0015e10:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015e16:	8b 1d ac d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6ac
c0015e1c:	83 c1 01             	add    ecx,0x1
c0015e1f:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015e25:	83 c3 01             	add    ebx,0x1
c0015e28:	89 1d ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,ebx
c0015e2e:	fa                   	cli    
c0015e2f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015e34:	83 c0 01             	add    eax,0x1
c0015e37:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015e3c:	eb 2a                	jmp    c0015e68 <cleanerTaskFunction(void*)+0xa0>
c0015e3e:	66 90                	xchg   ax,ax
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015e48:	e8 2b a6 00 00       	call   c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e4d:	c7 04 24 b4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6b4
c0015e54:	89 c3                	mov    ebx,eax
c0015e56:	e8 25 a6 00 00       	call   c0020480 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e5e:	e8 91 fc ff ff       	call   c0015af4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015e63:	83 c4 10             	add    esp,0x10
c0015e66:	66 90                	xchg   ax,ax
c0015e68:	83 ec 0c             	sub    esp,0xc
c0015e6b:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015e70:	e8 e7 a5 00 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e75:	83 c4 10             	add    esp,0x10
c0015e78:	84 c0                	test   al,al
c0015e7a:	74 c4                	je     c0015e40 <cleanerTaskFunction(void*)+0x78>
c0015e7c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015e84:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015e8a:	85 d2                	test   edx,edx
c0015e8c:	75 02                	jne    c0015e90 <cleanerTaskFunction(void*)+0xc8>
c0015e8e:	fb                   	sti    
c0015e8f:	90                   	nop
c0015e90:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015e95:	83 e8 01             	sub    eax,0x1
c0015e98:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015e9d:	0f 85 29 ff ff ff    	jne    c0015dcc <cleanerTaskFunction(void*)+0x4>
c0015ea3:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0015ea8:	85 c0                	test   eax,eax
c0015eaa:	0f 84 1c ff ff ff    	je     c0015dcc <cleanerTaskFunction(void*)+0x4>
c0015eb0:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015eba:	e8 71 f8 ff ff       	call   c0015730 <schedule()>
c0015ebf:	e9 08 ff ff ff       	jmp    c0015dcc <cleanerTaskFunction(void*)+0x4>
c0015ec4:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015ecc:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015ed1:	85 c0                	test   eax,eax
c0015ed3:	0f 85 2f ff ff ff    	jne    c0015e08 <cleanerTaskFunction(void*)+0x40>
c0015ed9:	fb                   	sti    
c0015eda:	e9 29 ff ff ff       	jmp    c0015e08 <cleanerTaskFunction(void*)+0x40>
c0015edf:	90                   	nop

c0015ee0 <terminateTask(int)>:
c0015ee0:	83 ec 18             	sub    esp,0x18
c0015ee3:	68 8f 36 02 c0       	push   0xc002368f
c0015ee8:	e8 61 10 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015eed:	fa                   	cli    
c0015eee:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015ef3:	83 c0 01             	add    eax,0x1
c0015ef6:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015efb:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015f00:	83 c0 01             	add    eax,0x1
c0015f03:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015f08:	fa                   	cli    
c0015f09:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015f0e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f12:	83 c0 01             	add    eax,0x1
c0015f15:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f1f:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015f22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f27:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f2a:	5a                   	pop    edx
c0015f2b:	59                   	pop    ecx
c0015f2c:	50                   	push   eax
c0015f2d:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015f32:	e8 05 a6 00 00       	call   c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f3c:	83 c4 10             	add    esp,0x10
c0015f3f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015f46:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0015f4b:	85 c0                	test   eax,eax
c0015f4d:	0f 84 81 00 00 00    	je     c0015fd4 <terminateTask(int)+0xf4>
c0015f53:	c6 05 94 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d694,0x1
c0015f5a:	83 ec 0c             	sub    esp,0xc
c0015f5d:	50                   	push   eax
c0015f5e:	e8 dd fa ff ff       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c0015f63:	83 c4 10             	add    esp,0x10
c0015f66:	66 90                	xchg   ax,ax
c0015f68:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015f70:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015f75:	85 c0                	test   eax,eax
c0015f77:	75 03                	jne    c0015f7c <terminateTask(int)+0x9c>
c0015f79:	fb                   	sti    
c0015f7a:	66 90                	xchg   ax,ax
c0015f7c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015f81:	83 e8 01             	sub    eax,0x1
c0015f84:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015f89:	75 09                	jne    c0015f94 <terminateTask(int)+0xb4>
c0015f8b:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c0015f92:	75 54                	jne    c0015fe8 <terminateTask(int)+0x108>
c0015f94:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015f9c:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015fa2:	85 c9                	test   ecx,ecx
c0015fa4:	75 06                	jne    c0015fac <terminateTask(int)+0xcc>
c0015fa6:	66 90                	xchg   ax,ax
c0015fa8:	fb                   	sti    
c0015fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fac:	fa                   	cli    
c0015fad:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015fb2:	83 c0 01             	add    eax,0x1
c0015fb5:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015fba:	e8 71 f7 ff ff       	call   c0015730 <schedule()>
c0015fbf:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015fc7:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015fcd:	85 d2                	test   edx,edx
c0015fcf:	75 db                	jne    c0015fac <terminateTask(int)+0xcc>
c0015fd1:	eb d5                	jmp    c0015fa8 <terminateTask(int)+0xc8>
c0015fd3:	90                   	nop
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	68 a2 36 02 c0       	push   0xc00236a2
c0015fdc:	e8 6d 0f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015fe1:	83 c4 10             	add    esp,0x10
c0015fe4:	eb 82                	jmp    c0015f68 <terminateTask(int)+0x88>
c0015fe6:	66 90                	xchg   ax,ax
c0015fe8:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015ff2:	e8 39 f7 ff ff       	call   c0015730 <schedule()>
c0015ff7:	eb 9b                	jmp    c0015f94 <terminateTask(int)+0xb4>
c0015ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0015ffc <Thr::terminateFromIRQ(int)>:
c0015ffc:	83 ec 18             	sub    esp,0x18
c0015fff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016003:	50                   	push   eax
c0016004:	e8 d7 fe ff ff       	call   c0015ee0 <terminateTask(int)>
c0016009:	8d 76 00             	lea    esi,[esi+0x0]

c001600c <__static_initialization_and_destruction_0(int, int)>:
c001600c:	83 ec 0c             	sub    esp,0xc
c001600f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016014:	0f 85 8e 00 00 00    	jne    c00160a8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001601a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016022:	0f 85 80 00 00 00    	jne    c00160a8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016028:	83 ec 0c             	sub    esp,0xc
c001602b:	68 cc d6 02 c0       	push   0xc002d6cc
c0016030:	e8 a7 a9 00 00       	call   c00209dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016035:	83 c4 10             	add    esp,0x10
c0016038:	83 ec 04             	sub    esp,0x4
c001603b:	68 a4 47 02 c0       	push   0xc00247a4
c0016040:	68 cc d6 02 c0       	push   0xc002d6cc
c0016045:	68 8c 09 02 c0       	push   0xc002098c
c001604a:	e8 0c 66 ff ff       	call   c000c65b <__cxa_atexit>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	83 ec 0c             	sub    esp,0xc
c0016055:	68 c0 d6 02 c0       	push   0xc002d6c0
c001605a:	e8 7d a9 00 00       	call   c00209dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001605f:	83 c4 10             	add    esp,0x10
c0016062:	83 ec 04             	sub    esp,0x4
c0016065:	68 a4 47 02 c0       	push   0xc00247a4
c001606a:	68 c0 d6 02 c0       	push   0xc002d6c0
c001606f:	68 8c 09 02 c0       	push   0xc002098c
c0016074:	e8 e2 65 ff ff       	call   c000c65b <__cxa_atexit>
c0016079:	83 c4 10             	add    esp,0x10
c001607c:	83 ec 0c             	sub    esp,0xc
c001607f:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016084:	e8 53 a9 00 00       	call   c00209dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016089:	83 c4 10             	add    esp,0x10
c001608c:	83 ec 04             	sub    esp,0x4
c001608f:	68 a4 47 02 c0       	push   0xc00247a4
c0016094:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016099:	68 8c 09 02 c0       	push   0xc002098c
c001609e:	e8 b8 65 ff ff       	call   c000c65b <__cxa_atexit>
c00160a3:	83 c4 10             	add    esp,0x10
c00160a6:	66 90                	xchg   ax,ax
c00160a8:	90                   	nop
c00160a9:	83 c4 0c             	add    esp,0xc
c00160ac:	c3                   	ret    
c00160ad:	8d 76 00             	lea    esi,[esi+0x0]

c00160b0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00160b0:	83 ec 0c             	sub    esp,0xc
c00160b3:	83 ec 08             	sub    esp,0x8
c00160b6:	68 ff ff 00 00       	push   0xffff
c00160bb:	6a 01                	push   0x1
c00160bd:	e8 4a ff ff ff       	call   c001600c <__static_initialization_and_destruction_0(int, int)>
c00160c2:	83 c4 10             	add    esp,0x10
c00160c5:	83 c4 0c             	add    esp,0xc
c00160c8:	c3                   	ret    

c00160c9 <Vm::inbv(unsigned short)>:
c00160c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160cd:	66 81 fa fe fe       	cmp    dx,0xfefe
c00160d2:	75 06                	jne    c00160da <Vm::inbv(unsigned short)+0x11>
c00160d4:	a0 10 d7 02 c0       	mov    al,ds:0xc002d710
c00160d9:	c3                   	ret    
c00160da:	ec                   	in     al,dx
c00160db:	c3                   	ret    

c00160dc <Vm::outbv(unsigned short, unsigned char)>:
c00160dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160e4:	66 81 fa fe fe       	cmp    dx,0xfefe
c00160e9:	75 25                	jne    c0016110 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00160eb:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c00160f1:	88 81 20 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28e0],al
c00160f7:	8d 51 01             	lea    edx,[ecx+0x1]
c00160fa:	89 15 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,edx
c0016100:	83 fa 20             	cmp    edx,0x20
c0016103:	75 0c                	jne    c0016111 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016105:	c7 05 10 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x1f
c001610f:	c3                   	ret    
c0016110:	ee                   	out    dx,al
c0016111:	c3                   	ret    

c0016112 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016112:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016117:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001611c:	c1 e0 04             	shl    eax,0x4
c001611f:	01 d0                	add    eax,edx
c0016121:	c3                   	ret    

c0016122 <Vm::getSegment(unsigned int)>:
c0016122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016126:	c1 e8 10             	shr    eax,0x10
c0016129:	c3                   	ret    

c001612a <Vm::getOffset(unsigned int)>:
c001612a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001612e:	c3                   	ret    

c001612f <Vm::mainloop2()>:
c001612f:	83 ec 18             	sub    esp,0x18
c0016132:	fa                   	cli    
c0016133:	6a 02                	push   0x2
c0016135:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001613b:	c6 05 09 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d709,0x1
c0016142:	e8 7d f6 ff ff       	call   c00157c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001614c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016150:	52                   	push   edx
c0016151:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016155:	52                   	push   edx
c0016156:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001615a:	52                   	push   edx
c001615b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001615f:	50                   	push   eax
c0016160:	e8 aa a0 fe ff       	call   c000020f <goToVM86>
c0016165:	83 c4 2c             	add    esp,0x2c
c0016168:	c3                   	ret    

c0016169 <Vm::mainVm8086Loop(void*)>:
c0016169:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016170:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016177:	75 01                	jne    c001617a <Vm::mainVm8086Loop(void*)+0x11>
c0016179:	fb                   	sti    
c001617a:	eb b3                	jmp    c001612f <Vm::mainloop2()>

c001617c <Vm::mainloop3(unsigned long)>:
c001617c:	83 ec 18             	sub    esp,0x18
c001617f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016183:	fa                   	cli    
c0016184:	6a 02                	push   0x2
c0016186:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001618c:	c6 05 08 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d708,0x1
c0016193:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c0016198:	e8 27 f6 ff ff       	call   c00157c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001619d:	83 c4 1c             	add    esp,0x1c
c00161a0:	eb 8d                	jmp    c001612f <Vm::mainloop2()>

c00161a2 <Vm::initialise8086()>:
c00161a2:	83 ec 0c             	sub    esp,0xc
c00161a5:	68 80 00 00 00       	push   0x80
c00161aa:	6a 00                	push   0x0
c00161ac:	68 69 61 01 c0       	push   0xc0016169
c00161b1:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00161b7:	e8 28 f3 ff ff       	call   c00154e4 <Process::createThread(void (*)(void*), void*, int)>
c00161bc:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00161c3:	68 10 01 00 00       	push   0x110
c00161c8:	6a 00                	push   0x0
c00161ca:	6a 00                	push   0x0
c00161cc:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c00161d1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00161d6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00161dc:	e8 cd c7 ff ff       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161e1:	83 c4 2c             	add    esp,0x2c
c00161e4:	c3                   	ret    

c00161e5 <Vm::resetConventionalMemory8086()>:
c00161e5:	c3                   	ret    

c00161e6 <Vm::finish8086()>:
c00161e6:	53                   	push   ebx
c00161e7:	83 ec 08             	sub    esp,0x8
c00161ea:	fa                   	cli    
c00161eb:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00161f1:	80 3d 08 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d708,0x0
c00161f8:	75 18                	jne    c0016212 <Vm::finish8086()+0x2c>
c00161fa:	e8 31 f5 ff ff       	call   c0015730 <schedule()>
c00161ff:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016206:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001620d:	75 db                	jne    c00161ea <Vm::finish8086()+0x4>
c001620f:	fb                   	sti    
c0016210:	eb d8                	jmp    c00161ea <Vm::finish8086()+0x4>
c0016212:	c6 05 08 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d708,0x0
c0016219:	83 ec 0c             	sub    esp,0xc
c001621c:	8b 1d 04 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d704
c0016222:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016228:	e8 13 f8 ff ff       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c001622d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016234:	83 c4 10             	add    esp,0x10
c0016237:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001623e:	75 01                	jne    c0016241 <Vm::finish8086()+0x5b>
c0016240:	fb                   	sti    
c0016241:	83 c4 08             	add    esp,0x8
c0016244:	89 d8                	mov    eax,ebx
c0016246:	5b                   	pop    ebx
c0016247:	c3                   	ret    

c0016248 <Vm::getOutput8086(unsigned char*)>:
c0016248:	57                   	push   edi
c0016249:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c001624f:	56                   	push   esi
c0016250:	be 20 d7 02 c0       	mov    esi,0xc002d720
c0016255:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016259:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001625b:	5e                   	pop    esi
c001625c:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c0016261:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c001626b:	5f                   	pop    edi
c001626c:	c3                   	ret    

c001626d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001626d:	55                   	push   ebp
c001626e:	57                   	push   edi
c001626f:	56                   	push   esi
c0016270:	53                   	push   ebx
c0016271:	83 ec 2c             	sub    esp,0x2c
c0016274:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016278:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c001627f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016283:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016287:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001628b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c001628f:	75 5d                	jne    c00162ee <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016291:	83 ec 0c             	sub    esp,0xc
c0016294:	68 14 01 00 00       	push   0x114
c0016299:	e8 02 87 ff ff       	call   c000e9a0 <malloc>
c001629e:	83 c4 0c             	add    esp,0xc
c00162a1:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00162a7:	68 b0 37 02 c0       	push   0xc00237b0
c00162ac:	50                   	push   eax
c00162ad:	89 c7                	mov    edi,eax
c00162af:	e8 78 1e ff ff       	call   c000812c <File::File(char const*, Process*)>
c00162b4:	58                   	pop    eax
c00162b5:	5a                   	pop    edx
c00162b6:	6a 12                	push   0x12
c00162b8:	57                   	push   edi
c00162b9:	e8 8c 1e ff ff       	call   c000814a <File::open(FileOpenMode)>
c00162be:	8b 07                	mov    eax,DWORD PTR [edi]
c00162c0:	59                   	pop    ecx
c00162c1:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00162c5:	51                   	push   ecx
c00162c6:	6a 00                	push   0x0
c00162c8:	6a 00                	push   0x0
c00162ca:	68 00 00 11 00       	push   0x110000
c00162cf:	57                   	push   edi
c00162d0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00162d3:	83 c4 14             	add    esp,0x14
c00162d6:	57                   	push   edi
c00162d7:	e8 cc 1e ff ff       	call   c00081a8 <File::close()>
c00162dc:	8b 07                	mov    eax,DWORD PTR [edi]
c00162de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c00162ee:	fa                   	cli    
c00162ef:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00162f5:	80 3d 09 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d709,0x0
c00162fc:	75 18                	jne    c0016316 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c00162fe:	e8 2d f4 ff ff       	call   c0015730 <schedule()>
c0016303:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001630a:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016311:	75 db                	jne    c00162ee <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016313:	fb                   	sti    
c0016314:	eb d8                	jmp    c00162ee <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016316:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016320:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016324:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c0016329:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c001632d:	0f b7 f6             	movzx  esi,si
c0016330:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016334:	0f b7 db             	movzx  ebx,bx
c0016337:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001633b:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001633f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016343:	50                   	push   eax
c0016344:	6a 20                	push   0x20
c0016346:	6a 00                	push   0x0
c0016348:	68 20 d7 02 c0       	push   0xc002d720
c001634d:	e8 9e a1 fe ff       	call   c00004f0 <memset>
c0016352:	5a                   	pop    edx
c0016353:	59                   	pop    ecx
c0016354:	56                   	push   esi
c0016355:	53                   	push   ebx
c0016356:	e8 b7 fd ff ff       	call   c0016112 <Vm::realToLinear(unsigned short, unsigned short)>
c001635b:	83 c4 10             	add    esp,0x10
c001635e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016362:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016366:	89 c7                	mov    edi,eax
c0016368:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001636a:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c0016371:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016378:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001637f:	75 01                	jne    c0016382 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016381:	fb                   	sti    
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c001638b:	e8 b0 f6 ff ff       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c0016390:	83 c4 3c             	add    esp,0x3c
c0016393:	b0 01                	mov    al,0x1
c0016395:	5b                   	pop    ebx
c0016396:	5e                   	pop    esi
c0016397:	5f                   	pop    edi
c0016398:	5d                   	pop    ebp
c0016399:	c3                   	ret    

c001639a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001639a:	55                   	push   ebp
c001639b:	57                   	push   edi
c001639c:	56                   	push   esi
c001639d:	53                   	push   ebx
c001639e:	83 ec 2c             	sub    esp,0x2c
c00163a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00163a5:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c00163ac:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00163b0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00163b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163b8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00163bc:	75 5d                	jne    c001641b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00163be:	83 ec 0c             	sub    esp,0xc
c00163c1:	68 14 01 00 00       	push   0x114
c00163c6:	e8 d5 85 ff ff       	call   c000e9a0 <malloc>
c00163cb:	83 c4 0c             	add    esp,0xc
c00163ce:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00163d4:	68 b0 37 02 c0       	push   0xc00237b0
c00163d9:	50                   	push   eax
c00163da:	89 c3                	mov    ebx,eax
c00163dc:	e8 4b 1d ff ff       	call   c000812c <File::File(char const*, Process*)>
c00163e1:	58                   	pop    eax
c00163e2:	5a                   	pop    edx
c00163e3:	6a 12                	push   0x12
c00163e5:	53                   	push   ebx
c00163e6:	e8 5f 1d ff ff       	call   c000814a <File::open(FileOpenMode)>
c00163eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163ed:	59                   	pop    ecx
c00163ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c00163f2:	52                   	push   edx
c00163f3:	6a 00                	push   0x0
c00163f5:	6a 00                	push   0x0
c00163f7:	68 00 00 11 00       	push   0x110000
c00163fc:	53                   	push   ebx
c00163fd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016400:	83 c4 14             	add    esp,0x14
c0016403:	53                   	push   ebx
c0016404:	e8 9f 1d ff ff       	call   c00081a8 <File::close()>
c0016409:	8b 03                	mov    eax,DWORD PTR [ebx]
c001640b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001640e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016411:	83 c4 10             	add    esp,0x10
c0016414:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c001641b:	50                   	push   eax
c001641c:	50                   	push   eax
c001641d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016421:	68 cb 37 02 c0       	push   0xc00237cb
c0016426:	e8 23 0b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	fa                   	cli    
c001642f:	8a 1d 09 d7 02 c0    	mov    bl,BYTE PTR ds:0xc002d709
c0016435:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001643b:	84 db                	test   bl,bl
c001643d:	75 18                	jne    c0016457 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c001643f:	e8 ec f2 ff ff       	call   c0015730 <schedule()>
c0016444:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001644b:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016452:	75 da                	jne    c001642e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016454:	fb                   	sti    
c0016455:	eb d7                	jmp    c001642e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016457:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016461:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016465:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c001646a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001646e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016472:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016476:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001647a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001647e:	50                   	push   eax
c001647f:	6a 20                	push   0x20
c0016481:	6a 00                	push   0x0
c0016483:	68 20 d7 02 c0       	push   0xc002d720
c0016488:	e8 63 a0 fe ff       	call   c00004f0 <memset>
c001648d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016494:	e8 07 85 ff ff       	call   c000e9a0 <malloc>
c0016499:	83 c4 0c             	add    esp,0xc
c001649c:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00164a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00164a6:	89 c5                	mov    ebp,eax
c00164a8:	50                   	push   eax
c00164a9:	e8 7e 1c ff ff       	call   c000812c <File::File(char const*, Process*)>
c00164ae:	83 c4 10             	add    esp,0x10
c00164b1:	85 ed                	test   ebp,ebp
c00164b3:	75 0a                	jne    c00164bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00164b5:	83 ec 0c             	sub    esp,0xc
c00164b8:	68 ed 37 02 c0       	push   0xc00237ed
c00164bd:	eb 2b                	jmp    c00164ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c00164bf:	50                   	push   eax
c00164c0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00164c4:	50                   	push   eax
c00164c5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00164c9:	50                   	push   eax
c00164ca:	55                   	push   ebp
c00164cb:	e8 7c 1f ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00164d0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00164d4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00164d8:	83 c4 10             	add    esp,0x10
c00164db:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00164e0:	74 28                	je     c001650a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c00164e2:	83 ec 0c             	sub    esp,0xc
c00164e5:	68 01 38 02 c0       	push   0xc0023801
c00164ea:	e8 f7 87 ff ff       	call   c000ece6 <KePanic(char const*)>
c00164ef:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00164f6:	83 c4 10             	add    esp,0x10
c00164f9:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016500:	75 01                	jne    c0016503 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0016502:	fb                   	sti    
c0016503:	31 db                	xor    ebx,ebx
c0016505:	e9 92 00 00 00       	jmp    c001659c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c001650a:	51                   	push   ecx
c001650b:	51                   	push   ecx
c001650c:	6a 01                	push   0x1
c001650e:	55                   	push   ebp
c001650f:	e8 36 1c ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	85 c0                	test   eax,eax
c0016519:	74 27                	je     c0016542 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c001651b:	83 ec 0c             	sub    esp,0xc
c001651e:	68 1a 38 02 c0       	push   0xc002381a
c0016523:	e8 be 87 ff ff       	call   c000ece6 <KePanic(char const*)>
c0016528:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001652f:	83 c4 10             	add    esp,0x10
c0016532:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016539:	75 c8                	jne    c0016503 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c001653b:	fb                   	sti    
c001653c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016540:	eb 5a                	jmp    c001659c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0016542:	50                   	push   eax
c0016543:	0f b7 ff             	movzx  edi,di
c0016546:	50                   	push   eax
c0016547:	0f b7 f6             	movzx  esi,si
c001654a:	57                   	push   edi
c001654b:	56                   	push   esi
c001654c:	e8 c1 fb ff ff       	call   c0016112 <Vm::realToLinear(unsigned short, unsigned short)>
c0016551:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016554:	5a                   	pop    edx
c0016555:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016559:	56                   	push   esi
c001655a:	50                   	push   eax
c001655b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001655f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016563:	55                   	push   ebp
c0016564:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016567:	83 c4 14             	add    esp,0x14
c001656a:	55                   	push   ebp
c001656b:	e8 38 1c ff ff       	call   c00081a8 <File::close()>
c0016570:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c0016577:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016588:	75 01                	jne    c001658b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c001658a:	fb                   	sti    
c001658b:	83 ec 0c             	sub    esp,0xc
c001658e:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016594:	e8 a7 f4 ff ff       	call   c0015a40 <unblockTask(ThreadControlBlock*)>
c0016599:	83 c4 10             	add    esp,0x10
c001659c:	83 c4 2c             	add    esp,0x2c
c001659f:	88 d8                	mov    al,bl
c00165a1:	5b                   	pop    ebx
c00165a2:	5e                   	pop    esi
c00165a3:	5f                   	pop    edi
c00165a4:	5d                   	pop    ebp
c00165a5:	c3                   	ret    

c00165a6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00165a6:	57                   	push   edi
c00165a7:	56                   	push   esi
c00165a8:	53                   	push   ebx
c00165a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165b1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00165b5:	83 e8 06             	sub    eax,0x6
c00165b8:	0f b7 c0             	movzx  eax,ax
c00165bb:	50                   	push   eax
c00165bc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00165c1:	50                   	push   eax
c00165c2:	e8 4b fb ff ff       	call   c0016112 <Vm::realToLinear(unsigned short, unsigned short)>
c00165c7:	5a                   	pop    edx
c00165c8:	59                   	pop    ecx
c00165c9:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00165cc:	8d 51 fa             	lea    edx,[ecx-0x6]
c00165cf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00165d2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00165d8:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00165db:	8d 51 02             	lea    edx,[ecx+0x2]
c00165de:	66 89 10             	mov    WORD PTR [eax],dx
c00165e1:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00165e5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00165e9:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00165ed:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00165f0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00165f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165fa:	89 f1                	mov    ecx,esi
c00165fc:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016600:	89 f2                	mov    edx,esi
c0016602:	0f b6 d6             	movzx  edx,dh
c0016605:	0f b6 f1             	movzx  esi,cl
c0016608:	74 0a                	je     c0016614 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001660a:	c1 e2 08             	shl    edx,0x8
c001660d:	09 f2                	or     edx,esi
c001660f:	80 ce 02             	or     dh,0x2
c0016612:	eb 08                	jmp    c001661c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016614:	c1 e2 08             	shl    edx,0x8
c0016617:	09 f2                	or     edx,esi
c0016619:	80 e6 fd             	and    dh,0xfd
c001661c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016620:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016625:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016629:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016631:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016634:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001663c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001663f:	5b                   	pop    ebx
c0016640:	5e                   	pop    esi
c0016641:	5f                   	pop    edi
c0016642:	c3                   	ret    

c0016643 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016643:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016648:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001664d:	c1 e0 04             	shl    eax,0x4
c0016650:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016653:	c3                   	ret    

c0016654 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016654:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016659:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001665e:	c1 e0 04             	shl    eax,0x4
c0016661:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016665:	c3                   	ret    

c0016666 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016666:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001666b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016670:	c1 e0 04             	shl    eax,0x4
c0016673:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016676:	c3                   	ret    

c0016677 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016677:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001667c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016681:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016685:	c1 e0 04             	shl    eax,0x4
c0016688:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001668b:	c3                   	ret    

c001668c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001668c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016691:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016696:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001669a:	c1 e0 04             	shl    eax,0x4
c001669d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00166a1:	c3                   	ret    

c00166a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00166a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166b0:	c1 e0 04             	shl    eax,0x4
c00166b3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00166b6:	c3                   	ret    

c00166b7 <Vm::faultHandler(regs*)>:
c00166b7:	55                   	push   ebp
c00166b8:	57                   	push   edi
c00166b9:	56                   	push   esi
c00166ba:	53                   	push   ebx
c00166bb:	83 ec 2c             	sub    esp,0x2c
c00166be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00166c2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166c5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00166c9:	0f b7 f8             	movzx  edi,ax
c00166cc:	0f b7 c0             	movzx  eax,ax
c00166cf:	52                   	push   edx
c00166d0:	50                   	push   eax
c00166d1:	e8 3c fa ff ff       	call   c0016112 <Vm::realToLinear(unsigned short, unsigned short)>
c00166d6:	5a                   	pop    edx
c00166d7:	59                   	pop    ecx
c00166d8:	89 c1                	mov    ecx,eax
c00166da:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00166dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166e1:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00166e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166ea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00166ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00166f1:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00166f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016702:	e8 0b fa ff ff       	call   c0016112 <Vm::realToLinear(unsigned short, unsigned short)>
c0016707:	5e                   	pop    esi
c0016708:	be 06 00 00 00       	mov    esi,0x6
c001670d:	5d                   	pop    ebp
c001670e:	31 ed                	xor    ebp,ebp
c0016710:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016715:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016718:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001671e:	0f 84 74 02 00 00    	je     c0016998 <Vm::faultHandler(regs*)+0x2e1>
c0016724:	0f 87 94 00 00 00    	ja     c00167be <Vm::faultHandler(regs*)+0x107>
c001672a:	83 fa 66             	cmp    edx,0x66
c001672d:	0f 84 e2 01 00 00    	je     c0016915 <Vm::faultHandler(regs*)+0x25e>
c0016733:	77 47                	ja     c001677c <Vm::faultHandler(regs*)+0xc5>
c0016735:	83 fa 36             	cmp    edx,0x36
c0016738:	0f 84 ca 01 00 00    	je     c0016908 <Vm::faultHandler(regs*)+0x251>
c001673e:	77 1a                	ja     c001675a <Vm::faultHandler(regs*)+0xa3>
c0016740:	83 fa 26             	cmp    edx,0x26
c0016743:	0f 84 98 01 00 00    	je     c00168e1 <Vm::faultHandler(regs*)+0x22a>
c0016749:	83 fa 2e             	cmp    edx,0x2e
c001674c:	0f 85 27 06 00 00    	jne    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c0016752:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016755:	31 f6                	xor    esi,esi
c0016757:	41                   	inc    ecx
c0016758:	eb bb                	jmp    c0016715 <Vm::faultHandler(regs*)+0x5e>
c001675a:	83 fa 64             	cmp    edx,0x64
c001675d:	0f 84 8b 01 00 00    	je     c00168ee <Vm::faultHandler(regs*)+0x237>
c0016763:	0f 87 92 01 00 00    	ja     c00168fb <Vm::faultHandler(regs*)+0x244>
c0016769:	83 fa 3e             	cmp    edx,0x3e
c001676c:	0f 85 07 06 00 00    	jne    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c0016772:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016775:	be 01 00 00 00       	mov    esi,0x1
c001677a:	eb db                	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c001677c:	83 fa 6d             	cmp    edx,0x6d
c001677f:	0f 84 34 03 00 00    	je     c0016ab9 <Vm::faultHandler(regs*)+0x402>
c0016785:	77 17                	ja     c001679e <Vm::faultHandler(regs*)+0xe7>
c0016787:	83 fa 67             	cmp    edx,0x67
c001678a:	0f 84 92 01 00 00    	je     c0016922 <Vm::faultHandler(regs*)+0x26b>
c0016790:	83 fa 6c             	cmp    edx,0x6c
c0016793:	0f 84 b1 02 00 00    	je     c0016a4a <Vm::faultHandler(regs*)+0x393>
c0016799:	e9 db 05 00 00       	jmp    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c001679e:	83 fa 6f             	cmp    edx,0x6f
c00167a1:	0f 84 40 04 00 00    	je     c0016be7 <Vm::faultHandler(regs*)+0x530>
c00167a7:	0f 82 a2 03 00 00    	jb     c0016b4f <Vm::faultHandler(regs*)+0x498>
c00167ad:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00167b3:	0f 84 76 01 00 00    	je     c001692f <Vm::faultHandler(regs*)+0x278>
c00167b9:	e9 bb 05 00 00       	jmp    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c00167be:	81 fa ec 00 00 00    	cmp    edx,0xec
c00167c4:	0f 84 57 05 00 00    	je     c0016d21 <Vm::faultHandler(regs*)+0x66a>
c00167ca:	0f 87 a9 00 00 00    	ja     c0016879 <Vm::faultHandler(regs*)+0x1c2>
c00167d0:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00167d6:	0f 84 d6 04 00 00    	je     c0016cb2 <Vm::faultHandler(regs*)+0x5fb>
c00167dc:	77 78                	ja     c0016856 <Vm::faultHandler(regs*)+0x19f>
c00167de:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00167e4:	0f 84 0e 02 00 00    	je     c00169f8 <Vm::faultHandler(regs*)+0x341>
c00167ea:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00167f0:	0f 85 83 05 00 00    	jne    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c00167f6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00167fa:	89 d1                	mov    ecx,edx
c00167fc:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00167ff:	c1 e1 08             	shl    ecx,0x8
c0016802:	09 ca                	or     edx,ecx
c0016804:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016807:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001680b:	89 d1                	mov    ecx,edx
c001680d:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016811:	c1 e1 08             	shl    ecx,0x8
c0016814:	09 ca                	or     edx,ecx
c0016816:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016819:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001681d:	89 d1                	mov    ecx,edx
c001681f:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016823:	c1 e1 08             	shl    ecx,0x8
c0016826:	09 ca                	or     edx,ecx
c0016828:	81 ca 00 02 02 00    	or     edx,0x20200
c001682e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016831:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016835:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001683b:	d1 e8                	shr    eax,1
c001683d:	83 e0 01             	and    eax,0x1
c0016840:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016843:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016846:	83 c0 06             	add    eax,0x6
c0016849:	25 ff ff 00 00       	and    eax,0xffff
c001684e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016851:	e9 1f 05 00 00       	jmp    c0016d75 <Vm::faultHandler(regs*)+0x6be>
c0016856:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001685c:	0f 84 95 04 00 00    	je     c0016cf7 <Vm::faultHandler(regs*)+0x640>
c0016862:	0f 82 66 04 00 00    	jb     c0016cce <Vm::faultHandler(regs*)+0x617>
c0016868:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001686e:	0f 84 9a 04 00 00    	je     c0016d0e <Vm::faultHandler(regs*)+0x657>
c0016874:	e9 00 05 00 00       	jmp    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c0016879:	81 fa ef 00 00 00    	cmp    edx,0xef
c001687f:	0f 84 dd 04 00 00    	je     c0016d62 <Vm::faultHandler(regs*)+0x6ab>
c0016885:	77 2e                	ja     c00168b5 <Vm::faultHandler(regs*)+0x1fe>
c0016887:	81 fa ed 00 00 00    	cmp    edx,0xed
c001688d:	0f 84 aa 04 00 00    	je     c0016d3d <Vm::faultHandler(regs*)+0x686>
c0016893:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016899:	0f 85 da 04 00 00    	jne    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c001689f:	50                   	push   eax
c00168a0:	50                   	push   eax
c00168a1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00168a5:	50                   	push   eax
c00168a6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00168aa:	50                   	push   eax
c00168ab:	e8 2c f8 ff ff       	call   c00160dc <Vm::outbv(unsigned short, unsigned char)>
c00168b0:	e9 a5 04 00 00       	jmp    c0016d5a <Vm::faultHandler(regs*)+0x6a3>
c00168b5:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00168bb:	0f 84 6d 01 00 00    	je     c0016a2e <Vm::faultHandler(regs*)+0x377>
c00168c1:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00168c7:	0f 84 6f 01 00 00    	je     c0016a3c <Vm::faultHandler(regs*)+0x385>
c00168cd:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00168d3:	0f 85 a0 04 00 00    	jne    c0016d79 <Vm::faultHandler(regs*)+0x6c2>
c00168d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168dc:	e9 76 fe ff ff       	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c00168e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168e4:	be 02 00 00 00       	mov    esi,0x2
c00168e9:	e9 69 fe ff ff       	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c00168ee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168f1:	be 03 00 00 00       	mov    esi,0x3
c00168f6:	e9 5c fe ff ff       	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c00168fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168fe:	be 04 00 00 00       	mov    esi,0x4
c0016903:	e9 4f fe ff ff       	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c0016908:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001690b:	be 05 00 00 00       	mov    esi,0x5
c0016910:	e9 42 fe ff ff       	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c0016915:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016918:	bd 01 00 00 00       	mov    ebp,0x1
c001691d:	e9 35 fe ff ff       	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c0016922:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016925:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001692a:	e9 28 fe ff ff       	jmp    c0016757 <Vm::faultHandler(regs*)+0xa0>
c001692f:	83 e5 01             	and    ebp,0x1
c0016932:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016935:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016939:	74 30                	je     c001696b <Vm::faultHandler(regs*)+0x2b4>
c001693b:	83 e9 04             	sub    ecx,0x4
c001693e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016944:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001694a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001694d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016950:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016956:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001695a:	0f 84 12 04 00 00    	je     c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016960:	80 ce 02             	or     dh,0x2
c0016963:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016966:	e9 07 04 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c001696b:	83 e9 02             	sub    ecx,0x2
c001696e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016974:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016977:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001697b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016981:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016985:	74 05                	je     c001698c <Vm::faultHandler(regs*)+0x2d5>
c0016987:	80 ce 02             	or     dh,0x2
c001698a:	eb 03                	jmp    c001698f <Vm::faultHandler(regs*)+0x2d8>
c001698c:	80 e6 fd             	and    dh,0xfd
c001698f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016993:	e9 da 03 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016998:	83 e5 01             	and    ebp,0x1
c001699b:	74 2a                	je     c00169c7 <Vm::faultHandler(regs*)+0x310>
c001699d:	8b 10                	mov    edx,DWORD PTR [eax]
c001699f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00169a5:	81 ca 00 02 02 00    	or     edx,0x20200
c00169ab:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00169ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00169b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00169b6:	c1 e8 09             	shr    eax,0x9
c00169b9:	83 e0 01             	and    eax,0x1
c00169bc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00169bf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00169c2:	83 c0 04             	add    eax,0x4
c00169c5:	eb 24                	jmp    c00169eb <Vm::faultHandler(regs*)+0x334>
c00169c7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00169ca:	81 ca 00 02 02 00    	or     edx,0x20200
c00169d0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00169d3:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00169d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00169dc:	c1 e8 09             	shr    eax,0x9
c00169df:	83 e0 01             	and    eax,0x1
c00169e2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00169e5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00169e8:	83 c0 02             	add    eax,0x2
c00169eb:	25 ff ff 00 00       	and    eax,0xffff
c00169f0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00169f3:	e9 7a 03 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c00169f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169fc:	3d ee 00 00 00       	cmp    eax,0xee
c0016a01:	75 10                	jne    c0016a13 <Vm::faultHandler(regs*)+0x35c>
c0016a03:	83 ec 0c             	sub    esp,0xc
c0016a06:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016a09:	e8 6e f7 ff ff       	call   c001617c <Vm::mainloop3(unsigned long)>
c0016a0e:	e9 4a 03 00 00       	jmp    c0016d5d <Vm::faultHandler(regs*)+0x6a6>
c0016a13:	83 ec 0c             	sub    esp,0xc
c0016a16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a1e:	51                   	push   ecx
c0016a1f:	50                   	push   eax
c0016a20:	53                   	push   ebx
c0016a21:	e8 80 fb ff ff       	call   c00165a6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016a26:	83 c4 20             	add    esp,0x20
c0016a29:	e9 47 03 00 00       	jmp    c0016d75 <Vm::faultHandler(regs*)+0x6be>
c0016a2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a33:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016a37:	e9 36 03 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016a3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a41:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016a45:	e9 28 03 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016a4a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a4f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016a52:	74 2b                	je     c0016a7f <Vm::faultHandler(regs*)+0x3c8>
c0016a54:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016a5b:	76 22                	jbe    c0016a7f <Vm::faultHandler(regs*)+0x3c8>
c0016a5d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a61:	50                   	push   eax
c0016a62:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a66:	50                   	push   eax
c0016a67:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a6b:	50                   	push   eax
c0016a6c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a70:	50                   	push   eax
c0016a71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a75:	50                   	push   eax
c0016a76:	6a 6c                	push   0x6c
c0016a78:	6a 6c                	push   0x6c
c0016a7a:	e9 c0 01 00 00       	jmp    c0016c3f <Vm::faultHandler(regs*)+0x588>
c0016a7f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a83:	83 ec 0c             	sub    esp,0xc
c0016a86:	0f b7 f6             	movzx  esi,si
c0016a89:	50                   	push   eax
c0016a8a:	e8 3a f6 ff ff       	call   c00160c9 <Vm::inbv(unsigned short)>
c0016a8f:	83 c4 0c             	add    esp,0xc
c0016a92:	0f b6 c0             	movzx  eax,al
c0016a95:	50                   	push   eax
c0016a96:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016a9a:	50                   	push   eax
c0016a9b:	56                   	push   esi
c0016a9c:	e8 d6 fb ff ff       	call   c0016677 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016aa7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016aab:	74 03                	je     c0016ab0 <Vm::faultHandler(regs*)+0x3f9>
c0016aad:	48                   	dec    eax
c0016aae:	eb 01                	jmp    c0016ab1 <Vm::faultHandler(regs*)+0x3fa>
c0016ab0:	40                   	inc    eax
c0016ab1:	0f b7 c0             	movzx  eax,ax
c0016ab4:	e9 8e 00 00 00       	jmp    c0016b47 <Vm::faultHandler(regs*)+0x490>
c0016ab9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016abe:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016ac1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ac4:	74 29                	je     c0016aef <Vm::faultHandler(regs*)+0x438>
c0016ac6:	3d ff ff 00 00       	cmp    eax,0xffff
c0016acb:	76 22                	jbe    c0016aef <Vm::faultHandler(regs*)+0x438>
c0016acd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ad1:	50                   	push   eax
c0016ad2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ad6:	50                   	push   eax
c0016ad7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016adb:	50                   	push   eax
c0016adc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ae0:	50                   	push   eax
c0016ae1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ae5:	50                   	push   eax
c0016ae6:	6a 6d                	push   0x6d
c0016ae8:	6a 6d                	push   0x6d
c0016aea:	e9 50 01 00 00       	jmp    c0016c3f <Vm::faultHandler(regs*)+0x588>
c0016aef:	83 e5 01             	and    ebp,0x1
c0016af2:	0f b7 c8             	movzx  ecx,ax
c0016af5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016af8:	0f b7 f6             	movzx  esi,si
c0016afb:	74 1e                	je     c0016b1b <Vm::faultHandler(regs*)+0x464>
c0016afd:	ed                   	in     eax,dx
c0016afe:	55                   	push   ebp
c0016aff:	50                   	push   eax
c0016b00:	51                   	push   ecx
c0016b01:	56                   	push   esi
c0016b02:	e8 9b fb ff ff       	call   c00166a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016b07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	8d 50 04             	lea    edx,[eax+0x4]
c0016b10:	83 e8 04             	sub    eax,0x4
c0016b13:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016b19:	eb 20                	jmp    c0016b3b <Vm::faultHandler(regs*)+0x484>
c0016b1b:	66 ed                	in     ax,dx
c0016b1d:	57                   	push   edi
c0016b1e:	0f b7 c0             	movzx  eax,ax
c0016b21:	50                   	push   eax
c0016b22:	51                   	push   ecx
c0016b23:	56                   	push   esi
c0016b24:	e8 63 fb ff ff       	call   c001668c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016b29:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016b2c:	83 c4 10             	add    esp,0x10
c0016b2f:	8d 50 02             	lea    edx,[eax+0x2]
c0016b32:	83 e8 02             	sub    eax,0x2
c0016b35:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016b3b:	25 ff ff 00 00       	and    eax,0xffff
c0016b40:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016b44:	0f 44 c2             	cmove  eax,edx
c0016b47:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016b4a:	e9 23 02 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016b4f:	8d 46 ff             	lea    eax,[esi-0x1]
c0016b52:	0f b6 f0             	movzx  esi,al
c0016b55:	83 fe 05             	cmp    esi,0x5
c0016b58:	77 23                	ja     c0016b7d <Vm::faultHandler(regs*)+0x4c6>
c0016b5a:	ff 24 b5 90 38 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc770]
c0016b61:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016b66:	eb 15                	jmp    c0016b7d <Vm::faultHandler(regs*)+0x4c6>
c0016b68:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016b6c:	eb 0f                	jmp    c0016b7d <Vm::faultHandler(regs*)+0x4c6>
c0016b6e:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016b72:	eb 09                	jmp    c0016b7d <Vm::faultHandler(regs*)+0x4c6>
c0016b74:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016b78:	eb 03                	jmp    c0016b7d <Vm::faultHandler(regs*)+0x4c6>
c0016b7a:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016b7d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016b82:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016b85:	74 29                	je     c0016bb0 <Vm::faultHandler(regs*)+0x4f9>
c0016b87:	3d ff ff 00 00       	cmp    eax,0xffff
c0016b8c:	76 22                	jbe    c0016bb0 <Vm::faultHandler(regs*)+0x4f9>
c0016b8e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b92:	50                   	push   eax
c0016b93:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b97:	50                   	push   eax
c0016b98:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b9c:	50                   	push   eax
c0016b9d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ba1:	50                   	push   eax
c0016ba2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ba6:	50                   	push   eax
c0016ba7:	6a 6e                	push   0x6e
c0016ba9:	6a 6e                	push   0x6e
c0016bab:	e9 8f 00 00 00       	jmp    c0016c3f <Vm::faultHandler(regs*)+0x588>
c0016bb0:	52                   	push   edx
c0016bb1:	0f b7 c0             	movzx  eax,ax
c0016bb4:	52                   	push   edx
c0016bb5:	50                   	push   eax
c0016bb6:	57                   	push   edi
c0016bb7:	e8 87 fa ff ff       	call   c0016643 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016bbc:	59                   	pop    ecx
c0016bbd:	5e                   	pop    esi
c0016bbe:	0f b6 c0             	movzx  eax,al
c0016bc1:	50                   	push   eax
c0016bc2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016bc6:	50                   	push   eax
c0016bc7:	e8 10 f5 ff ff       	call   c00160dc <Vm::outbv(unsigned short, unsigned char)>
c0016bcc:	83 c4 10             	add    esp,0x10
c0016bcf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016bd2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016bd6:	74 03                	je     c0016bdb <Vm::faultHandler(regs*)+0x524>
c0016bd8:	48                   	dec    eax
c0016bd9:	eb 01                	jmp    c0016bdc <Vm::faultHandler(regs*)+0x525>
c0016bdb:	40                   	inc    eax
c0016bdc:	0f b7 c0             	movzx  eax,ax
c0016bdf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016be2:	e9 8b 01 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016be7:	8d 46 ff             	lea    eax,[esi-0x1]
c0016bea:	0f b6 f0             	movzx  esi,al
c0016bed:	83 fe 05             	cmp    esi,0x5
c0016bf0:	77 1e                	ja     c0016c10 <Vm::faultHandler(regs*)+0x559>
c0016bf2:	ff 24 b5 a8 38 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc758]
c0016bf9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016bfd:	eb 11                	jmp    c0016c10 <Vm::faultHandler(regs*)+0x559>
c0016bff:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016c02:	eb 0c                	jmp    c0016c10 <Vm::faultHandler(regs*)+0x559>
c0016c04:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016c07:	eb 07                	jmp    c0016c10 <Vm::faultHandler(regs*)+0x559>
c0016c09:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016c0c:	eb 02                	jmp    c0016c10 <Vm::faultHandler(regs*)+0x559>
c0016c0e:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016c10:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016c15:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016c18:	74 37                	je     c0016c51 <Vm::faultHandler(regs*)+0x59a>
c0016c1a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016c20:	76 2f                	jbe    c0016c51 <Vm::faultHandler(regs*)+0x59a>
c0016c22:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016c26:	50                   	push   eax
c0016c27:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016c2b:	50                   	push   eax
c0016c2c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016c30:	50                   	push   eax
c0016c31:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016c35:	50                   	push   eax
c0016c36:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c3a:	50                   	push   eax
c0016c3b:	6a 6f                	push   0x6f
c0016c3d:	6a 6f                	push   0x6f
c0016c3f:	68 33 38 02 c0       	push   0xc0023833
c0016c44:	e8 05 03 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016c49:	83 c4 20             	add    esp,0x20
c0016c4c:	e9 86 01 00 00       	jmp    c0016dd7 <Vm::faultHandler(regs*)+0x720>
c0016c51:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c54:	0f b7 d7             	movzx  edx,di
c0016c57:	0f b7 c6             	movzx  eax,si
c0016c5a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016c5d:	81 e1 00 04 00 00    	and    ecx,0x400
c0016c63:	83 e5 01             	and    ebp,0x1
c0016c66:	74 1c                	je     c0016c84 <Vm::faultHandler(regs*)+0x5cd>
c0016c68:	55                   	push   ebp
c0016c69:	55                   	push   ebp
c0016c6a:	50                   	push   eax
c0016c6b:	52                   	push   edx
c0016c6c:	e8 f5 f9 ff ff       	call   c0016666 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016c71:	83 c4 10             	add    esp,0x10
c0016c74:	89 fa                	mov    edx,edi
c0016c76:	ef                   	out    dx,eax
c0016c77:	8d 46 04             	lea    eax,[esi+0x4]
c0016c7a:	83 ee 04             	sub    esi,0x4
c0016c7d:	25 ff ff 00 00       	and    eax,0xffff
c0016c82:	eb 1b                	jmp    c0016c9f <Vm::faultHandler(regs*)+0x5e8>
c0016c84:	55                   	push   ebp
c0016c85:	55                   	push   ebp
c0016c86:	50                   	push   eax
c0016c87:	52                   	push   edx
c0016c88:	e8 c7 f9 ff ff       	call   c0016654 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016c8d:	83 c4 10             	add    esp,0x10
c0016c90:	89 fa                	mov    edx,edi
c0016c92:	66 ef                	out    dx,ax
c0016c94:	8d 46 02             	lea    eax,[esi+0x2]
c0016c97:	83 ee 02             	sub    esi,0x2
c0016c9a:	25 ff ff 00 00       	and    eax,0xffff
c0016c9f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016ca5:	85 c9                	test   ecx,ecx
c0016ca7:	0f 44 f0             	cmove  esi,eax
c0016caa:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016cad:	e9 c0 00 00 00       	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016cb2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016cb9:	83 ec 0c             	sub    esp,0xc
c0016cbc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016cc0:	50                   	push   eax
c0016cc1:	e8 03 f4 ff ff       	call   c00160c9 <Vm::inbv(unsigned short)>
c0016cc6:	0f b6 c0             	movzx  eax,al
c0016cc9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016ccc:	eb 3a                	jmp    c0016d08 <Vm::faultHandler(regs*)+0x651>
c0016cce:	83 e5 01             	and    ebp,0x1
c0016cd1:	74 07                	je     c0016cda <Vm::faultHandler(regs*)+0x623>
c0016cd3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016cd7:	ed                   	in     eax,dx
c0016cd8:	eb 14                	jmp    c0016cee <Vm::faultHandler(regs*)+0x637>
c0016cda:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016cdd:	66 31 f6             	xor    si,si
c0016ce0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016ce3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016ce7:	66 ed                	in     ax,dx
c0016ce9:	0f b7 c0             	movzx  eax,ax
c0016cec:	09 f0                	or     eax,esi
c0016cee:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016cf1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016cf5:	eb 7e                	jmp    c0016d75 <Vm::faultHandler(regs*)+0x6be>
c0016cf7:	52                   	push   edx
c0016cf8:	52                   	push   edx
c0016cf9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016cfd:	50                   	push   eax
c0016cfe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d02:	50                   	push   eax
c0016d03:	e8 d4 f3 ff ff       	call   c00160dc <Vm::outbv(unsigned short, unsigned char)>
c0016d08:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016d0c:	eb 4f                	jmp    c0016d5d <Vm::faultHandler(regs*)+0x6a6>
c0016d0e:	83 e5 01             	and    ebp,0x1
c0016d11:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d14:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016d18:	74 03                	je     c0016d1d <Vm::faultHandler(regs*)+0x666>
c0016d1a:	ef                   	out    dx,eax
c0016d1b:	eb d4                	jmp    c0016cf1 <Vm::faultHandler(regs*)+0x63a>
c0016d1d:	66 ef                	out    dx,ax
c0016d1f:	eb d0                	jmp    c0016cf1 <Vm::faultHandler(regs*)+0x63a>
c0016d21:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d25:	83 ec 0c             	sub    esp,0xc
c0016d28:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016d2f:	50                   	push   eax
c0016d30:	e8 94 f3 ff ff       	call   c00160c9 <Vm::inbv(unsigned short)>
c0016d35:	0f b6 c0             	movzx  eax,al
c0016d38:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016d3b:	eb 1d                	jmp    c0016d5a <Vm::faultHandler(regs*)+0x6a3>
c0016d3d:	83 e5 01             	and    ebp,0x1
c0016d40:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016d43:	74 03                	je     c0016d48 <Vm::faultHandler(regs*)+0x691>
c0016d45:	ed                   	in     eax,dx
c0016d46:	eb 0d                	jmp    c0016d55 <Vm::faultHandler(regs*)+0x69e>
c0016d48:	66 ed                	in     ax,dx
c0016d4a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016d4d:	0f b7 c0             	movzx  eax,ax
c0016d50:	66 31 d2             	xor    dx,dx
c0016d53:	09 d0                	or     eax,edx
c0016d55:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d58:	eb 18                	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016d5a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	eb 13                	jmp    c0016d75 <Vm::faultHandler(regs*)+0x6be>
c0016d62:	83 e5 01             	and    ebp,0x1
c0016d65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d68:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016d6b:	74 03                	je     c0016d70 <Vm::faultHandler(regs*)+0x6b9>
c0016d6d:	ef                   	out    dx,eax
c0016d6e:	eb 02                	jmp    c0016d72 <Vm::faultHandler(regs*)+0x6bb>
c0016d70:	66 ef                	out    dx,ax
c0016d72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d75:	b0 01                	mov    al,0x1
c0016d77:	eb 60                	jmp    c0016dd9 <Vm::faultHandler(regs*)+0x722>
c0016d79:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016d7d:	50                   	push   eax
c0016d7e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016d82:	50                   	push   eax
c0016d83:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016d87:	50                   	push   eax
c0016d88:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016d8c:	50                   	push   eax
c0016d8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d91:	50                   	push   eax
c0016d92:	52                   	push   edx
c0016d93:	52                   	push   edx
c0016d94:	68 60 38 02 c0       	push   0xc0023860
c0016d99:	e8 b0 01 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016d9e:	83 c4 20             	add    esp,0x20
c0016da1:	83 ec 0c             	sub    esp,0xc
c0016da4:	6a 60                	push   0x60
c0016da6:	e8 1e f3 ff ff       	call   c00160c9 <Vm::inbv(unsigned short)>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	0f b6 d0             	movzx  edx,al
c0016db1:	83 fa 1c             	cmp    edx,0x1c
c0016db4:	74 05                	je     c0016dbb <Vm::faultHandler(regs*)+0x704>
c0016db6:	83 fa 5a             	cmp    edx,0x5a
c0016db9:	75 e6                	jne    c0016da1 <Vm::faultHandler(regs*)+0x6ea>
c0016dbb:	0f b6 c0             	movzx  eax,al
c0016dbe:	83 f8 1c             	cmp    eax,0x1c
c0016dc1:	74 05                	je     c0016dc8 <Vm::faultHandler(regs*)+0x711>
c0016dc3:	83 f8 5a             	cmp    eax,0x5a
c0016dc6:	75 0f                	jne    c0016dd7 <Vm::faultHandler(regs*)+0x720>
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	6a 60                	push   0x60
c0016dcd:	e8 f7 f2 ff ff       	call   c00160c9 <Vm::inbv(unsigned short)>
c0016dd2:	83 c4 10             	add    esp,0x10
c0016dd5:	eb e4                	jmp    c0016dbb <Vm::faultHandler(regs*)+0x704>
c0016dd7:	31 c0                	xor    eax,eax
c0016dd9:	83 c4 2c             	add    esp,0x2c
c0016ddc:	5b                   	pop    ebx
c0016ddd:	5e                   	pop    esi
c0016dde:	5f                   	pop    edi
c0016ddf:	5d                   	pop    ebp
c0016de0:	c3                   	ret    
c0016de1:	90                   	nop

c0016de2 <noCopro(unsigned long)>:
c0016de2:	c3                   	ret    
c0016de3:	90                   	nop

c0016de4 <CPU::close(int, int, void*)>:
c0016de4:	31 c0                	xor    eax,eax
c0016de6:	c3                   	ret    

c0016de7 <x86ReadCMOS(unsigned char)>:
c0016de7:	83 ec 14             	sub    esp,0x14
c0016dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016dee:	88 04 24             	mov    BYTE PTR [esp],al
c0016df1:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016df6:	0f b6 c0             	movzx  eax,al
c0016df9:	85 c0                	test   eax,eax
c0016dfb:	74 04                	je     c0016e01 <x86ReadCMOS(unsigned char)+0x1a>
c0016dfd:	b2 00                	mov    dl,0x0
c0016dff:	eb 02                	jmp    c0016e03 <x86ReadCMOS(unsigned char)+0x1c>
c0016e01:	b2 80                	mov    dl,0x80
c0016e03:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016e06:	09 d0                	or     eax,edx
c0016e08:	0f b6 c0             	movzx  eax,al
c0016e0b:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016e12:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016e16:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016e1a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016e1f:	ee                   	out    dx,al
c0016e20:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016e27:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016e2c:	89 c2                	mov    edx,eax
c0016e2e:	ec                   	in     al,dx
c0016e2f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016e33:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016e37:	83 c4 14             	add    esp,0x14
c0016e3a:	c3                   	ret    

c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>:
c0016e3b:	83 ec 18             	sub    esp,0x18
c0016e3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e46:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e4a:	88 d0                	mov    al,dl
c0016e4c:	88 04 24             	mov    BYTE PTR [esp],al
c0016e4f:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016e54:	0f b6 c0             	movzx  eax,al
c0016e57:	85 c0                	test   eax,eax
c0016e59:	74 04                	je     c0016e5f <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016e5b:	b2 00                	mov    dl,0x0
c0016e5d:	eb 02                	jmp    c0016e61 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0016e5f:	b2 80                	mov    dl,0x80
c0016e61:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016e65:	09 d0                	or     eax,edx
c0016e67:	0f b6 c0             	movzx  eax,al
c0016e6a:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016e71:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016e75:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016e79:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016e7e:	ee                   	out    dx,al
c0016e7f:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016e83:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016e8a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016e8e:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016e92:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016e97:	ee                   	out    dx,al
c0016e98:	90                   	nop
c0016e99:	83 c4 18             	add    esp,0x18
c0016e9c:	c3                   	ret    

c0016e9d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016e9d:	60                   	pusha  
c0016e9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ea2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ea6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016eaa:	9c                   	pushf  
c0016eab:	fa                   	cli    
c0016eac:	0f 09                	wbinvd 
c0016eae:	0f 30                	wrmsr  
c0016eb0:	9d                   	popf   
c0016eb1:	89 c2                	mov    edx,eax
c0016eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eb7:	89 10                	mov    DWORD PTR [eax],edx
c0016eb9:	61                   	popa   
c0016eba:	90                   	nop
c0016ebb:	c3                   	ret    

c0016ebc <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016ebc:	60                   	pusha  
c0016ebd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ec1:	89 c1                	mov    ecx,eax
c0016ec3:	9c                   	pushf  
c0016ec4:	fa                   	cli    
c0016ec5:	0f 09                	wbinvd 
c0016ec7:	31 c0                	xor    eax,eax
c0016ec9:	31 d2                	xor    edx,edx
c0016ecb:	0f 32                	rdmsr  
c0016ecd:	9d                   	popf   
c0016ece:	89 c2                	mov    edx,eax
c0016ed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ed4:	89 10                	mov    DWORD PTR [eax],edx
c0016ed6:	61                   	popa   
c0016ed7:	90                   	nop
c0016ed8:	c3                   	ret    

c0016ed9 <AMD_K6_writeback(int, int, int)>:
c0016ed9:	83 ec 20             	sub    esp,0x20
c0016edc:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c0016ee1:	c1 e8 14             	shr    eax,0x14
c0016ee4:	c1 e8 02             	shr    eax,0x2
c0016ee7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016eeb:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016ef0:	0f 85 9e 00 00 00    	jne    c0016f94 <AMD_K6_writeback(int, int, int)+0xbb>
c0016ef6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016efa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016efe:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016f03:	75 19                	jne    c0016f1e <AMD_K6_writeback(int, int, int)+0x45>
c0016f05:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016f0a:	7f 0a                	jg     c0016f16 <AMD_K6_writeback(int, int, int)+0x3d>
c0016f0c:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016f14:	eb 08                	jmp    c0016f1e <AMD_K6_writeback(int, int, int)+0x45>
c0016f16:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016f1e:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016f23:	7c 6e                	jl     c0016f93 <AMD_K6_writeback(int, int, int)+0xba>
c0016f25:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016f2a:	7e 09                	jle    c0016f35 <AMD_K6_writeback(int, int, int)+0x5c>
c0016f2c:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016f31:	74 36                	je     c0016f69 <AMD_K6_writeback(int, int, int)+0x90>
c0016f33:	eb 5e                	jmp    c0016f93 <AMD_K6_writeback(int, int, int)+0xba>
c0016f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f39:	50                   	push   eax
c0016f3a:	68 82 00 00 c0       	push   0xc0000082
c0016f3f:	e8 78 ff ff ff       	call   c0016ebc <AMD_K6_read_msr(unsigned int, REGS*)>
c0016f44:	83 c4 08             	add    esp,0x8
c0016f47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f4b:	d1 e0                	shl    eax,1
c0016f4d:	83 e0 7f             	and    eax,0x7f
c0016f50:	89 c2                	mov    edx,eax
c0016f52:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f56:	50                   	push   eax
c0016f57:	6a 00                	push   0x0
c0016f59:	52                   	push   edx
c0016f5a:	68 82 00 00 c0       	push   0xc0000082
c0016f5f:	e8 39 ff ff ff       	call   c0016e9d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016f64:	83 c4 10             	add    esp,0x10
c0016f67:	eb 2b                	jmp    c0016f94 <AMD_K6_writeback(int, int, int)+0xbb>
c0016f69:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f6d:	50                   	push   eax
c0016f6e:	68 82 00 00 c0       	push   0xc0000082
c0016f73:	e8 44 ff ff ff       	call   c0016ebc <AMD_K6_read_msr(unsigned int, REGS*)>
c0016f78:	83 c4 08             	add    esp,0x8
c0016f7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f7f:	50                   	push   eax
c0016f80:	6a 00                	push   0x0
c0016f82:	6a 00                	push   0x0
c0016f84:	68 82 00 00 c0       	push   0xc0000082
c0016f89:	e8 0f ff ff ff       	call   c0016e9d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016f8e:	83 c4 10             	add    esp,0x10
c0016f91:	eb 01                	jmp    c0016f94 <AMD_K6_writeback(int, int, int)+0xbb>
c0016f93:	90                   	nop
c0016f94:	90                   	nop
c0016f95:	83 c4 20             	add    esp,0x20
c0016f98:	c3                   	ret    

c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016f99:	56                   	push   esi
c0016f9a:	53                   	push   ebx
c0016f9b:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c0016fa0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016fa4:	75 32                	jne    c0016fd8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016fa6:	8b 15 60 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d760
c0016fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb0:	89 10                	mov    DWORD PTR [eax],edx
c0016fb2:	8b 15 5c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d75c
c0016fb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fbc:	89 10                	mov    DWORD PTR [eax],edx
c0016fbe:	8b 15 58 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d758
c0016fc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fc8:	89 10                	mov    DWORD PTR [eax],edx
c0016fca:	8b 15 54 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d754
c0016fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fd4:	89 10                	mov    DWORD PTR [eax],edx
c0016fd6:	eb 5c                	jmp    c0017034 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fdc:	ba 00 00 00 00       	mov    edx,0x0
c0016fe1:	89 d1                	mov    ecx,edx
c0016fe3:	0f a2                	cpuid  
c0016fe5:	89 c6                	mov    esi,eax
c0016fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016feb:	89 30                	mov    DWORD PTR [eax],esi
c0016fed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ff1:	89 18                	mov    DWORD PTR [eax],ebx
c0016ff3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ff7:	89 08                	mov    DWORD PTR [eax],ecx
c0016ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ffd:	89 10                	mov    DWORD PTR [eax],edx
c0016fff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017003:	a3 00 52 02 c0       	mov    ds:0xc0025200,eax
c0017008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700c:	8b 00                	mov    eax,DWORD PTR [eax]
c001700e:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c0017013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017017:	8b 00                	mov    eax,DWORD PTR [eax]
c0017019:	a3 5c d7 02 c0       	mov    ds:0xc002d75c,eax
c001701e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017022:	8b 00                	mov    eax,DWORD PTR [eax]
c0017024:	a3 58 d7 02 c0       	mov    ds:0xc002d758,eax
c0017029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001702d:	8b 00                	mov    eax,DWORD PTR [eax]
c001702f:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c0017034:	5b                   	pop    ebx
c0017035:	5e                   	pop    esi
c0017036:	c3                   	ret    

c0017037 <cpuidCheckEDX(unsigned int)>:
c0017037:	83 ec 10             	sub    esp,0x10
c001703a:	89 e0                	mov    eax,esp
c001703c:	50                   	push   eax
c001703d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017041:	50                   	push   eax
c0017042:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017046:	50                   	push   eax
c0017047:	8d 44 24 18          	lea    eax,[esp+0x18]
c001704b:	50                   	push   eax
c001704c:	6a 01                	push   0x1
c001704e:	e8 46 ff ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017053:	83 c4 14             	add    esp,0x14
c0017056:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017059:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001705d:	0f 95 c0             	setne  al
c0017060:	83 c4 10             	add    esp,0x10
c0017063:	c3                   	ret    

c0017064 <cpuidCheckECX(unsigned int)>:
c0017064:	83 ec 10             	sub    esp,0x10
c0017067:	89 e0                	mov    eax,esp
c0017069:	50                   	push   eax
c001706a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001706e:	50                   	push   eax
c001706f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017073:	50                   	push   eax
c0017074:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017078:	50                   	push   eax
c0017079:	6a 01                	push   0x1
c001707b:	e8 19 ff ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017080:	83 c4 14             	add    esp,0x14
c0017083:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017087:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001708b:	0f 95 c0             	setne  al
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	c3                   	ret    

c0017092 <cpuidCheckExtendedEBX(unsigned int)>:
c0017092:	83 ec 10             	sub    esp,0x10
c0017095:	89 e0                	mov    eax,esp
c0017097:	50                   	push   eax
c0017098:	8d 44 24 08          	lea    eax,[esp+0x8]
c001709c:	50                   	push   eax
c001709d:	8d 44 24 10          	lea    eax,[esp+0x10]
c00170a1:	50                   	push   eax
c00170a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170a6:	50                   	push   eax
c00170a7:	6a 07                	push   0x7
c00170a9:	e8 eb fe ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170ae:	83 c4 14             	add    esp,0x14
c00170b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170b5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00170b9:	0f 95 c0             	setne  al
c00170bc:	83 c4 10             	add    esp,0x10
c00170bf:	c3                   	ret    

c00170c0 <cpuidCheckExtendedECX(unsigned int)>:
c00170c0:	83 ec 10             	sub    esp,0x10
c00170c3:	89 e0                	mov    eax,esp
c00170c5:	50                   	push   eax
c00170c6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00170ca:	50                   	push   eax
c00170cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00170cf:	50                   	push   eax
c00170d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170d4:	50                   	push   eax
c00170d5:	6a 07                	push   0x7
c00170d7:	e8 bd fe ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170dc:	83 c4 14             	add    esp,0x14
c00170df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00170e7:	0f 95 c0             	setne  al
c00170ea:	83 c4 10             	add    esp,0x10
c00170ed:	c3                   	ret    

c00170ee <HalDetectFeatures()>:
c00170ee:	57                   	push   edi
c00170ef:	56                   	push   esi
c00170f0:	53                   	push   ebx
c00170f1:	81 ec 90 00 00 00    	sub    esp,0x90
c00170f7:	83 ec 04             	sub    esp,0x4
c00170fa:	6a 08                	push   0x8
c00170fc:	6a 00                	push   0x0
c00170fe:	68 8c d7 02 c0       	push   0xc002d78c
c0017103:	e8 e8 93 fe ff       	call   c00004f0 <memset>
c0017108:	83 c4 10             	add    esp,0x10
c001710b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017110:	83 c8 04             	or     eax,0x4
c0017113:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017118:	e8 dc 90 fe ff       	call   c00001f9 <detectCPUID>
c001711d:	85 c0                	test   eax,eax
c001711f:	0f 95 c0             	setne  al
c0017122:	83 e0 01             	and    eax,0x1
c0017125:	83 e0 01             	and    eax,0x1
c0017128:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001712b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017130:	83 e0 fd             	and    eax,0xfffffffd
c0017133:	88 c2                	mov    dl,al
c0017135:	88 c8                	mov    al,cl
c0017137:	09 d0                	or     eax,edx
c0017139:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001713e:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017143:	83 e0 02             	and    eax,0x2
c0017146:	0f b6 c0             	movzx  eax,al
c0017149:	85 c0                	test   eax,eax
c001714b:	0f 84 7f 02 00 00    	je     c00173d0 <HalDetectFeatures()+0x2e2>
c0017151:	83 ec 0c             	sub    esp,0xc
c0017154:	6a 20                	push   0x20
c0017156:	e8 dc fe ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c001715b:	83 c4 10             	add    esp,0x10
c001715e:	83 e0 01             	and    eax,0x1
c0017161:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017168:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001716d:	83 e0 f7             	and    eax,0xfffffff7
c0017170:	88 c2                	mov    dl,al
c0017172:	88 c8                	mov    al,cl
c0017174:	09 d0                	or     eax,edx
c0017176:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001717b:	83 ec 0c             	sub    esp,0xc
c001717e:	68 00 00 00 04       	push   0x4000000
c0017183:	e8 af fe ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	89 c1                	mov    ecx,eax
c001718d:	83 e1 01             	and    ecx,0x1
c0017190:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017195:	83 e0 fe             	and    eax,0xfffffffe
c0017198:	88 c2                	mov    dl,al
c001719a:	88 c8                	mov    al,cl
c001719c:	09 d0                	or     eax,edx
c001719e:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00171a3:	83 ec 0c             	sub    esp,0xc
c00171a6:	68 80 00 00 00       	push   0x80
c00171ab:	e8 87 fe ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	89 c1                	mov    ecx,eax
c00171b5:	c1 e1 07             	shl    ecx,0x7
c00171b8:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00171bd:	83 e0 7f             	and    eax,0x7f
c00171c0:	88 c2                	mov    dl,al
c00171c2:	88 c8                	mov    al,cl
c00171c4:	09 d0                	or     eax,edx
c00171c6:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	68 00 00 80 00       	push   0x800000
c00171d3:	e8 5f fe ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c00171d8:	83 c4 10             	add    esp,0x10
c00171db:	83 e0 01             	and    eax,0x1
c00171de:	89 c1                	mov    ecx,eax
c00171e0:	c1 e1 05             	shl    ecx,0x5
c00171e3:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00171e8:	83 e0 df             	and    eax,0xffffffdf
c00171eb:	88 c2                	mov    dl,al
c00171ed:	88 c8                	mov    al,cl
c00171ef:	09 d0                	or     eax,edx
c00171f1:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00171f6:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00171fb:	83 e0 01             	and    eax,0x1
c00171fe:	75 0c                	jne    c001720c <HalDetectFeatures()+0x11e>
c0017200:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0017205:	25 00 04 00 00       	and    eax,0x400
c001720a:	74 0f                	je     c001721b <HalDetectFeatures()+0x12d>
c001720c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017211:	83 e0 fe             	and    eax,0xfffffffe
c0017214:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017219:	eb 28                	jmp    c0017243 <HalDetectFeatures()+0x155>
c001721b:	83 ec 0c             	sub    esp,0xc
c001721e:	68 00 02 00 00       	push   0x200
c0017223:	e8 0f fe ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	89 c1                	mov    ecx,eax
c001722d:	83 e1 01             	and    ecx,0x1
c0017230:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017235:	83 e0 fe             	and    eax,0xfffffffe
c0017238:	88 c2                	mov    dl,al
c001723a:	88 c8                	mov    al,cl
c001723c:	09 d0                	or     eax,edx
c001723e:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017243:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017248:	83 e0 01             	and    eax,0x1
c001724b:	0f b6 c0             	movzx  eax,al
c001724e:	85 c0                	test   eax,eax
c0017250:	74 1c                	je     c001726e <HalDetectFeatures()+0x180>
c0017252:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017257:	83 e0 08             	and    eax,0x8
c001725a:	0f b6 c0             	movzx  eax,al
c001725d:	85 c0                	test   eax,eax
c001725f:	75 0d                	jne    c001726e <HalDetectFeatures()+0x180>
c0017261:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017266:	83 e0 fe             	and    eax,0xfffffffe
c0017269:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001726e:	83 ec 0c             	sub    esp,0xc
c0017271:	68 c0 38 02 c0       	push   0xc00238c0
c0017276:	e8 d3 fc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001727b:	83 c4 10             	add    esp,0x10
c001727e:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017283:	83 e0 fe             	and    eax,0xfffffffe
c0017286:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001728b:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0017293:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c001729b:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00172a3:	85 c0                	test   eax,eax
c00172a5:	0f 84 ab 00 00 00    	je     c0017356 <HalDetectFeatures()+0x268>
c00172ab:	83 ec 0c             	sub    esp,0xc
c00172ae:	6a 01                	push   0x1
c00172b0:	e8 af fd ff ff       	call   c0017064 <cpuidCheckECX(unsigned int)>
c00172b5:	83 c4 10             	add    esp,0x10
c00172b8:	83 e0 01             	and    eax,0x1
c00172bb:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00172be:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00172c3:	83 e0 fd             	and    eax,0xfffffffd
c00172c6:	88 c2                	mov    dl,al
c00172c8:	88 c8                	mov    al,cl
c00172ca:	09 d0                	or     eax,edx
c00172cc:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00172d1:	83 ec 0c             	sub    esp,0xc
c00172d4:	68 00 02 00 00       	push   0x200
c00172d9:	e8 86 fd ff ff       	call   c0017064 <cpuidCheckECX(unsigned int)>
c00172de:	83 c4 10             	add    esp,0x10
c00172e1:	83 e0 01             	and    eax,0x1
c00172e4:	89 c1                	mov    ecx,eax
c00172e6:	c1 e1 04             	shl    ecx,0x4
c00172e9:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00172ee:	83 e0 ef             	and    eax,0xffffffef
c00172f1:	88 c2                	mov    dl,al
c00172f3:	88 c8                	mov    al,cl
c00172f5:	09 d0                	or     eax,edx
c00172f7:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00172fc:	83 ec 0c             	sub    esp,0xc
c00172ff:	68 00 00 08 00       	push   0x80000
c0017304:	e8 5b fd ff ff       	call   c0017064 <cpuidCheckECX(unsigned int)>
c0017309:	83 c4 10             	add    esp,0x10
c001730c:	83 e0 01             	and    eax,0x1
c001730f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017316:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001731b:	83 e0 fb             	and    eax,0xfffffffb
c001731e:	88 c2                	mov    dl,al
c0017320:	88 c8                	mov    al,cl
c0017322:	09 d0                	or     eax,edx
c0017324:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017329:	83 ec 0c             	sub    esp,0xc
c001732c:	68 00 00 10 00       	push   0x100000
c0017331:	e8 2e fd ff ff       	call   c0017064 <cpuidCheckECX(unsigned int)>
c0017336:	83 c4 10             	add    esp,0x10
c0017339:	83 e0 01             	and    eax,0x1
c001733c:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017343:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017348:	83 e0 f7             	and    eax,0xfffffff7
c001734b:	88 c2                	mov    dl,al
c001734d:	88 c8                	mov    al,cl
c001734f:	09 d0                	or     eax,edx
c0017351:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017356:	83 ec 0c             	sub    esp,0xc
c0017359:	8d 44 24 24          	lea    eax,[esp+0x24]
c001735d:	50                   	push   eax
c001735e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017362:	50                   	push   eax
c0017363:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017367:	50                   	push   eax
c0017368:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001736c:	50                   	push   eax
c001736d:	68 00 00 00 80       	push   0x80000000
c0017372:	e8 22 fc ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017377:	83 c4 20             	add    esp,0x20
c001737a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001737e:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017383:	76 4b                	jbe    c00173d0 <HalDetectFeatures()+0x2e2>
c0017385:	83 ec 0c             	sub    esp,0xc
c0017388:	8d 44 24 24          	lea    eax,[esp+0x24]
c001738c:	50                   	push   eax
c001738d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017391:	50                   	push   eax
c0017392:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017396:	50                   	push   eax
c0017397:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001739b:	50                   	push   eax
c001739c:	68 01 00 00 80       	push   0x80000001
c00173a1:	e8 f3 fb ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00173a6:	83 c4 20             	add    esp,0x20
c00173a9:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00173ae:	83 e0 bf             	and    eax,0xffffffbf
c00173b1:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00173b6:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00173bb:	83 e0 fd             	and    eax,0xfffffffd
c00173be:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00173c3:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00173c8:	83 e0 fe             	and    eax,0xfffffffe
c00173cb:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00173d0:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00173d5:	25 00 04 00 00       	and    eax,0x400
c00173da:	74 0d                	je     c00173e9 <HalDetectFeatures()+0x2fb>
c00173dc:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00173e1:	83 e0 fb             	and    eax,0xfffffffb
c00173e4:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00173e9:	c6 05 88 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d788,0x1
c00173f0:	83 ec 04             	sub    esp,0x4
c00173f3:	6a 0d                	push   0xd
c00173f5:	6a 00                	push   0x0
c00173f7:	68 70 d7 02 c0       	push   0xc002d770
c00173fc:	e8 ef 90 fe ff       	call   c00004f0 <memset>
c0017401:	83 c4 10             	add    esp,0x10
c0017404:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017409:	83 e0 02             	and    eax,0x2
c001740c:	0f b6 c0             	movzx  eax,al
c001740f:	85 c0                	test   eax,eax
c0017411:	0f 84 16 08 00 00    	je     c0017c2d <HalDetectFeatures()+0xb3f>
c0017417:	83 ec 0c             	sub    esp,0xc
c001741a:	6a 10                	push   0x10
c001741c:	e8 16 fc ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c0017421:	83 c4 10             	add    esp,0x10
c0017424:	83 e0 01             	and    eax,0x1
c0017427:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001742e:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017433:	83 e0 f7             	and    eax,0xfffffff7
c0017436:	88 c2                	mov    dl,al
c0017438:	88 c8                	mov    al,cl
c001743a:	09 d0                	or     eax,edx
c001743c:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017441:	83 ec 0c             	sub    esp,0xc
c0017444:	6a 40                	push   0x40
c0017446:	e8 ec fb ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c001744b:	83 c4 10             	add    esp,0x10
c001744e:	83 e0 01             	and    eax,0x1
c0017451:	89 c1                	mov    ecx,eax
c0017453:	c1 e1 04             	shl    ecx,0x4
c0017456:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001745b:	83 e0 ef             	and    eax,0xffffffef
c001745e:	88 c2                	mov    dl,al
c0017460:	88 c8                	mov    al,cl
c0017462:	09 d0                	or     eax,edx
c0017464:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017469:	83 ec 0c             	sub    esp,0xc
c001746c:	6a 08                	push   0x8
c001746e:	e8 c4 fb ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c0017473:	83 c4 10             	add    esp,0x10
c0017476:	83 e0 01             	and    eax,0x1
c0017479:	89 c1                	mov    ecx,eax
c001747b:	c1 e1 05             	shl    ecx,0x5
c001747e:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017483:	83 e0 df             	and    eax,0xffffffdf
c0017486:	88 c2                	mov    dl,al
c0017488:	88 c8                	mov    al,cl
c001748a:	09 d0                	or     eax,edx
c001748c:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017491:	83 ec 0c             	sub    esp,0xc
c0017494:	68 00 20 00 00       	push   0x2000
c0017499:	e8 99 fb ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c001749e:	83 c4 10             	add    esp,0x10
c00174a1:	83 e0 01             	and    eax,0x1
c00174a4:	89 c1                	mov    ecx,eax
c00174a6:	c1 e1 06             	shl    ecx,0x6
c00174a9:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00174ae:	83 e0 bf             	and    eax,0xffffffbf
c00174b1:	88 c2                	mov    dl,al
c00174b3:	88 c8                	mov    al,cl
c00174b5:	09 d0                	or     eax,edx
c00174b7:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	68 00 00 01 00       	push   0x10000
c00174c4:	e8 6e fb ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	89 c1                	mov    ecx,eax
c00174ce:	c1 e1 07             	shl    ecx,0x7
c00174d1:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00174d6:	83 e0 7f             	and    eax,0x7f
c00174d9:	88 c2                	mov    dl,al
c00174db:	88 c8                	mov    al,cl
c00174dd:	09 d0                	or     eax,edx
c00174df:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00174e4:	83 ec 0c             	sub    esp,0xc
c00174e7:	6a 01                	push   0x1
c00174e9:	e8 49 fb ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	83 e0 01             	and    eax,0x1
c00174f4:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00174fb:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017500:	83 e0 f7             	and    eax,0xfffffff7
c0017503:	88 c2                	mov    dl,al
c0017505:	88 c8                	mov    al,cl
c0017507:	09 d0                	or     eax,edx
c0017509:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c001750e:	83 ec 0c             	sub    esp,0xc
c0017511:	68 00 08 00 00       	push   0x800
c0017516:	e8 1c fb ff ff       	call   c0017037 <cpuidCheckEDX(unsigned int)>
c001751b:	83 c4 10             	add    esp,0x10
c001751e:	89 c1                	mov    ecx,eax
c0017520:	83 e1 01             	and    ecx,0x1
c0017523:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017528:	83 e0 fe             	and    eax,0xfffffffe
c001752b:	88 c2                	mov    dl,al
c001752d:	88 c8                	mov    al,cl
c001752f:	09 d0                	or     eax,edx
c0017531:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017536:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001753b:	83 e0 40             	and    eax,0x40
c001753e:	0f b6 c0             	movzx  eax,al
c0017541:	85 c0                	test   eax,eax
c0017543:	74 0a                	je     c001754f <HalDetectFeatures()+0x461>
c0017545:	c7 05 68 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d768,0x100
c001754f:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017554:	83 e0 80             	and    eax,0xffffff80
c0017557:	0f b6 c0             	movzx  eax,al
c001755a:	85 c0                	test   eax,eax
c001755c:	74 0a                	je     c0017568 <HalDetectFeatures()+0x47a>
c001755e:	c7 05 64 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d764,0x80
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001756f:	50                   	push   eax
c0017570:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017574:	50                   	push   eax
c0017575:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017579:	50                   	push   eax
c001757a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001757e:	50                   	push   eax
c001757f:	6a 00                	push   0x0
c0017581:	e8 13 fa ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017586:	83 c4 20             	add    esp,0x20
c0017589:	c7 44 24 48 70 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d770
c0017591:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017595:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017599:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00175a1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00175a9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175ad:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00175b1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00175b5:	89 c6                	mov    esi,eax
c00175b7:	89 d7                	mov    edi,edx
c00175b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175bb:	89 c8                	mov    eax,ecx
c00175bd:	89 fa                	mov    edx,edi
c00175bf:	89 f3                	mov    ebx,esi
c00175c1:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00175c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175cd:	b8 74 d7 02 c0       	mov    eax,0xc002d774
c00175d2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00175d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175da:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00175de:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00175e6:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00175ea:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00175ee:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00175f2:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00175f6:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00175fa:	89 c6                	mov    esi,eax
c00175fc:	89 d7                	mov    edi,edx
c00175fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017600:	89 c8                	mov    eax,ecx
c0017602:	89 fa                	mov    edx,edi
c0017604:	89 f3                	mov    ebx,esi
c0017606:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c001760a:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001760e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017612:	b8 78 d7 02 c0       	mov    eax,0xc002d778
c0017617:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001761e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017622:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0017626:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001762e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0017635:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0017639:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001763d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0017644:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0017648:	89 c6                	mov    esi,eax
c001764a:	89 d7                	mov    edi,edx
c001764c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001764e:	89 c8                	mov    eax,ecx
c0017650:	89 fa                	mov    edx,edi
c0017652:	89 f3                	mov    ebx,esi
c0017654:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0017658:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001765c:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0017660:	83 ec 08             	sub    esp,0x8
c0017663:	68 d2 38 02 c0       	push   0xc00238d2
c0017668:	68 70 d7 02 c0       	push   0xc002d770
c001766d:	e8 0e 91 fe ff       	call   c0000780 <strcmp>
c0017672:	83 c4 10             	add    esp,0x10
c0017675:	85 c0                	test   eax,eax
c0017677:	74 19                	je     c0017692 <HalDetectFeatures()+0x5a4>
c0017679:	83 ec 08             	sub    esp,0x8
c001767c:	68 df 38 02 c0       	push   0xc00238df
c0017681:	68 70 d7 02 c0       	push   0xc002d770
c0017686:	e8 f5 90 fe ff       	call   c0000780 <strcmp>
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	85 c0                	test   eax,eax
c0017690:	75 04                	jne    c0017696 <HalDetectFeatures()+0x5a8>
c0017692:	b0 01                	mov    al,0x1
c0017694:	eb 02                	jmp    c0017698 <HalDetectFeatures()+0x5aa>
c0017696:	b0 00                	mov    al,0x0
c0017698:	0f b6 c0             	movzx  eax,al
c001769b:	85 c0                	test   eax,eax
c001769d:	74 0f                	je     c00176ae <HalDetectFeatures()+0x5c0>
c001769f:	c7 05 84 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x2
c00176a9:	e9 0d 03 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c00176ae:	83 ec 08             	sub    esp,0x8
c00176b1:	68 ec 38 02 c0       	push   0xc00238ec
c00176b6:	68 70 d7 02 c0       	push   0xc002d770
c00176bb:	e8 c0 90 fe ff       	call   c0000780 <strcmp>
c00176c0:	83 c4 10             	add    esp,0x10
c00176c3:	85 c0                	test   eax,eax
c00176c5:	74 19                	je     c00176e0 <HalDetectFeatures()+0x5f2>
c00176c7:	83 ec 08             	sub    esp,0x8
c00176ca:	68 f9 38 02 c0       	push   0xc00238f9
c00176cf:	68 70 d7 02 c0       	push   0xc002d770
c00176d4:	e8 a7 90 fe ff       	call   c0000780 <strcmp>
c00176d9:	83 c4 10             	add    esp,0x10
c00176dc:	85 c0                	test   eax,eax
c00176de:	75 04                	jne    c00176e4 <HalDetectFeatures()+0x5f6>
c00176e0:	b0 01                	mov    al,0x1
c00176e2:	eb 02                	jmp    c00176e6 <HalDetectFeatures()+0x5f8>
c00176e4:	b0 00                	mov    al,0x0
c00176e6:	0f b6 c0             	movzx  eax,al
c00176e9:	85 c0                	test   eax,eax
c00176eb:	74 0f                	je     c00176fc <HalDetectFeatures()+0x60e>
c00176ed:	c7 05 84 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x4
c00176f7:	e9 bf 02 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c00176fc:	83 ec 08             	sub    esp,0x8
c00176ff:	68 06 39 02 c0       	push   0xc0023906
c0017704:	68 70 d7 02 c0       	push   0xc002d770
c0017709:	e8 72 90 fe ff       	call   c0000780 <strcmp>
c001770e:	83 c4 10             	add    esp,0x10
c0017711:	85 c0                	test   eax,eax
c0017713:	74 19                	je     c001772e <HalDetectFeatures()+0x640>
c0017715:	83 ec 08             	sub    esp,0x8
c0017718:	68 13 39 02 c0       	push   0xc0023913
c001771d:	68 70 d7 02 c0       	push   0xc002d770
c0017722:	e8 59 90 fe ff       	call   c0000780 <strcmp>
c0017727:	83 c4 10             	add    esp,0x10
c001772a:	85 c0                	test   eax,eax
c001772c:	75 04                	jne    c0017732 <HalDetectFeatures()+0x644>
c001772e:	b0 01                	mov    al,0x1
c0017730:	eb 02                	jmp    c0017734 <HalDetectFeatures()+0x646>
c0017732:	b0 00                	mov    al,0x0
c0017734:	0f b6 c0             	movzx  eax,al
c0017737:	85 c0                	test   eax,eax
c0017739:	74 0f                	je     c001774a <HalDetectFeatures()+0x65c>
c001773b:	c7 05 84 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x5
c0017745:	e9 71 02 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c001774a:	83 ec 08             	sub    esp,0x8
c001774d:	68 20 39 02 c0       	push   0xc0023920
c0017752:	68 70 d7 02 c0       	push   0xc002d770
c0017757:	e8 24 90 fe ff       	call   c0000780 <strcmp>
c001775c:	83 c4 10             	add    esp,0x10
c001775f:	85 c0                	test   eax,eax
c0017761:	0f 94 c0             	sete   al
c0017764:	0f b6 c0             	movzx  eax,al
c0017767:	85 c0                	test   eax,eax
c0017769:	74 0f                	je     c001777a <HalDetectFeatures()+0x68c>
c001776b:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017775:	e9 41 02 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c001777a:	83 ec 08             	sub    esp,0x8
c001777d:	68 2d 39 02 c0       	push   0xc002392d
c0017782:	68 70 d7 02 c0       	push   0xc002d770
c0017787:	e8 f4 8f fe ff       	call   c0000780 <strcmp>
c001778c:	83 c4 10             	add    esp,0x10
c001778f:	85 c0                	test   eax,eax
c0017791:	0f 94 c0             	sete   al
c0017794:	0f b6 c0             	movzx  eax,al
c0017797:	85 c0                	test   eax,eax
c0017799:	74 0f                	je     c00177aa <HalDetectFeatures()+0x6bc>
c001779b:	c7 05 84 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x3
c00177a5:	e9 11 02 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c00177aa:	83 ec 08             	sub    esp,0x8
c00177ad:	68 ec 38 02 c0       	push   0xc00238ec
c00177b2:	68 70 d7 02 c0       	push   0xc002d770
c00177b7:	e8 c4 8f fe ff       	call   c0000780 <strcmp>
c00177bc:	83 c4 10             	add    esp,0x10
c00177bf:	85 c0                	test   eax,eax
c00177c1:	0f 94 c0             	sete   al
c00177c4:	0f b6 c0             	movzx  eax,al
c00177c7:	85 c0                	test   eax,eax
c00177c9:	74 0f                	je     c00177da <HalDetectFeatures()+0x6ec>
c00177cb:	c7 05 84 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x6
c00177d5:	e9 e1 01 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c00177da:	83 ec 08             	sub    esp,0x8
c00177dd:	68 3a 39 02 c0       	push   0xc002393a
c00177e2:	68 70 d7 02 c0       	push   0xc002d770
c00177e7:	e8 94 8f fe ff       	call   c0000780 <strcmp>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	85 c0                	test   eax,eax
c00177f1:	0f 94 c0             	sete   al
c00177f4:	0f b6 c0             	movzx  eax,al
c00177f7:	85 c0                	test   eax,eax
c00177f9:	74 0f                	je     c001780a <HalDetectFeatures()+0x71c>
c00177fb:	c7 05 84 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x7
c0017805:	e9 b1 01 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c001780a:	83 ec 08             	sub    esp,0x8
c001780d:	68 47 39 02 c0       	push   0xc0023947
c0017812:	68 70 d7 02 c0       	push   0xc002d770
c0017817:	e8 64 8f fe ff       	call   c0000780 <strcmp>
c001781c:	83 c4 10             	add    esp,0x10
c001781f:	85 c0                	test   eax,eax
c0017821:	0f 94 c0             	sete   al
c0017824:	0f b6 c0             	movzx  eax,al
c0017827:	85 c0                	test   eax,eax
c0017829:	74 0f                	je     c001783a <HalDetectFeatures()+0x74c>
c001782b:	c7 05 84 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x8
c0017835:	e9 81 01 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c001783a:	83 ec 08             	sub    esp,0x8
c001783d:	68 54 39 02 c0       	push   0xc0023954
c0017842:	68 70 d7 02 c0       	push   0xc002d770
c0017847:	e8 34 8f fe ff       	call   c0000780 <strcmp>
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	85 c0                	test   eax,eax
c0017851:	0f 94 c0             	sete   al
c0017854:	0f b6 c0             	movzx  eax,al
c0017857:	85 c0                	test   eax,eax
c0017859:	74 0f                	je     c001786a <HalDetectFeatures()+0x77c>
c001785b:	c7 05 84 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x9
c0017865:	e9 51 01 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c001786a:	83 ec 08             	sub    esp,0x8
c001786d:	68 61 39 02 c0       	push   0xc0023961
c0017872:	68 70 d7 02 c0       	push   0xc002d770
c0017877:	e8 04 8f fe ff       	call   c0000780 <strcmp>
c001787c:	83 c4 10             	add    esp,0x10
c001787f:	85 c0                	test   eax,eax
c0017881:	0f 94 c0             	sete   al
c0017884:	0f b6 c0             	movzx  eax,al
c0017887:	85 c0                	test   eax,eax
c0017889:	74 0f                	je     c001789a <HalDetectFeatures()+0x7ac>
c001788b:	c7 05 84 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xa
c0017895:	e9 21 01 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c001789a:	83 ec 08             	sub    esp,0x8
c001789d:	68 6e 39 02 c0       	push   0xc002396e
c00178a2:	68 70 d7 02 c0       	push   0xc002d770
c00178a7:	e8 d4 8e fe ff       	call   c0000780 <strcmp>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	85 c0                	test   eax,eax
c00178b1:	0f 94 c0             	sete   al
c00178b4:	0f b6 c0             	movzx  eax,al
c00178b7:	85 c0                	test   eax,eax
c00178b9:	74 0f                	je     c00178ca <HalDetectFeatures()+0x7dc>
c00178bb:	c7 05 84 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xb
c00178c5:	e9 f1 00 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c00178ca:	83 ec 08             	sub    esp,0x8
c00178cd:	68 7b 39 02 c0       	push   0xc002397b
c00178d2:	68 70 d7 02 c0       	push   0xc002d770
c00178d7:	e8 a4 8e fe ff       	call   c0000780 <strcmp>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	85 c0                	test   eax,eax
c00178e1:	0f 94 c0             	sete   al
c00178e4:	0f b6 c0             	movzx  eax,al
c00178e7:	85 c0                	test   eax,eax
c00178e9:	74 0f                	je     c00178fa <HalDetectFeatures()+0x80c>
c00178eb:	c7 05 84 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xc
c00178f5:	e9 c1 00 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c00178fa:	83 ec 08             	sub    esp,0x8
c00178fd:	68 88 39 02 c0       	push   0xc0023988
c0017902:	68 70 d7 02 c0       	push   0xc002d770
c0017907:	e8 74 8e fe ff       	call   c0000780 <strcmp>
c001790c:	83 c4 10             	add    esp,0x10
c001790f:	85 c0                	test   eax,eax
c0017911:	0f 94 c0             	sete   al
c0017914:	0f b6 c0             	movzx  eax,al
c0017917:	85 c0                	test   eax,eax
c0017919:	74 0f                	je     c001792a <HalDetectFeatures()+0x83c>
c001791b:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017925:	e9 91 00 00 00       	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c001792a:	83 ec 08             	sub    esp,0x8
c001792d:	68 95 39 02 c0       	push   0xc0023995
c0017932:	68 70 d7 02 c0       	push   0xc002d770
c0017937:	e8 44 8e fe ff       	call   c0000780 <strcmp>
c001793c:	83 c4 10             	add    esp,0x10
c001793f:	85 c0                	test   eax,eax
c0017941:	0f 94 c0             	sete   al
c0017944:	0f b6 c0             	movzx  eax,al
c0017947:	85 c0                	test   eax,eax
c0017949:	74 0c                	je     c0017957 <HalDetectFeatures()+0x869>
c001794b:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017955:	eb 64                	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c0017957:	83 ec 08             	sub    esp,0x8
c001795a:	68 a2 39 02 c0       	push   0xc00239a2
c001795f:	68 70 d7 02 c0       	push   0xc002d770
c0017964:	e8 17 8e fe ff       	call   c0000780 <strcmp>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	85 c0                	test   eax,eax
c001796e:	0f 94 c0             	sete   al
c0017971:	0f b6 c0             	movzx  eax,al
c0017974:	85 c0                	test   eax,eax
c0017976:	74 0c                	je     c0017984 <HalDetectFeatures()+0x896>
c0017978:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017982:	eb 37                	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c0017984:	83 ec 08             	sub    esp,0x8
c0017987:	68 af 39 02 c0       	push   0xc00239af
c001798c:	68 70 d7 02 c0       	push   0xc002d770
c0017991:	e8 ea 8d fe ff       	call   c0000780 <strcmp>
c0017996:	83 c4 10             	add    esp,0x10
c0017999:	85 c0                	test   eax,eax
c001799b:	0f 94 c0             	sete   al
c001799e:	0f b6 c0             	movzx  eax,al
c00179a1:	85 c0                	test   eax,eax
c00179a3:	74 0c                	je     c00179b1 <HalDetectFeatures()+0x8c3>
c00179a5:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c00179af:	eb 0a                	jmp    c00179bb <HalDetectFeatures()+0x8cd>
c00179b1:	c7 05 84 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x0
c00179bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179bf:	83 f8 06             	cmp    eax,0x6
c00179c2:	0f 86 cc 00 00 00    	jbe    c0017a94 <HalDetectFeatures()+0x9a6>
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	68 80 00 00 00       	push   0x80
c00179d0:	e8 bd f6 ff ff       	call   c0017092 <cpuidCheckExtendedEBX(unsigned int)>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	89 c1                	mov    ecx,eax
c00179da:	83 e1 01             	and    ecx,0x1
c00179dd:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c00179e2:	83 e0 fe             	and    eax,0xfffffffe
c00179e5:	88 c2                	mov    dl,al
c00179e7:	88 c8                	mov    al,cl
c00179e9:	09 d0                	or     eax,edx
c00179eb:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c00179f0:	83 ec 0c             	sub    esp,0xc
c00179f3:	68 00 00 10 00       	push   0x100000
c00179f8:	e8 95 f6 ff ff       	call   c0017092 <cpuidCheckExtendedEBX(unsigned int)>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	83 e0 01             	and    eax,0x1
c0017a03:	89 c1                	mov    ecx,eax
c0017a05:	c1 e1 06             	shl    ecx,0x6
c0017a08:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017a0d:	83 e0 bf             	and    eax,0xffffffbf
c0017a10:	88 c2                	mov    dl,al
c0017a12:	88 c8                	mov    al,cl
c0017a14:	09 d0                	or     eax,edx
c0017a16:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017a1b:	83 ec 0c             	sub    esp,0xc
c0017a1e:	68 00 00 04 00       	push   0x40000
c0017a23:	e8 6a f6 ff ff       	call   c0017092 <cpuidCheckExtendedEBX(unsigned int)>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	83 e0 01             	and    eax,0x1
c0017a2e:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017a31:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017a36:	83 e0 fd             	and    eax,0xfffffffd
c0017a39:	88 c2                	mov    dl,al
c0017a3b:	88 c8                	mov    al,cl
c0017a3d:	09 d0                	or     eax,edx
c0017a3f:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017a44:	83 ec 0c             	sub    esp,0xc
c0017a47:	6a 04                	push   0x4
c0017a49:	e8 72 f6 ff ff       	call   c00170c0 <cpuidCheckExtendedECX(unsigned int)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	83 e0 01             	and    eax,0x1
c0017a54:	89 c1                	mov    ecx,eax
c0017a56:	c1 e1 05             	shl    ecx,0x5
c0017a59:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017a5e:	83 e0 df             	and    eax,0xffffffdf
c0017a61:	88 c2                	mov    dl,al
c0017a63:	88 c8                	mov    al,cl
c0017a65:	09 d0                	or     eax,edx
c0017a67:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017a6c:	83 ec 0c             	sub    esp,0xc
c0017a6f:	6a 20                	push   0x20
c0017a71:	e8 4a f6 ff ff       	call   c00170c0 <cpuidCheckExtendedECX(unsigned int)>
c0017a76:	83 c4 10             	add    esp,0x10
c0017a79:	83 e0 01             	and    eax,0x1
c0017a7c:	89 c1                	mov    ecx,eax
c0017a7e:	c1 e1 04             	shl    ecx,0x4
c0017a81:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017a86:	83 e0 ef             	and    eax,0xffffffef
c0017a89:	88 c2                	mov    dl,al
c0017a8b:	88 c8                	mov    al,cl
c0017a8d:	09 d0                	or     eax,edx
c0017a8f:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017a94:	83 ec 0c             	sub    esp,0xc
c0017a97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017a9b:	50                   	push   eax
c0017a9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017aa0:	50                   	push   eax
c0017aa1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017aa5:	50                   	push   eax
c0017aa6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017aaa:	50                   	push   eax
c0017aab:	6a 01                	push   0x1
c0017aad:	e8 e7 f4 ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017ab2:	83 c4 20             	add    esp,0x20
c0017ab5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ab9:	83 e0 0f             	and    eax,0xf
c0017abc:	a2 80 d7 02 c0       	mov    ds:0xc002d780,al
c0017ac1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ac5:	c1 e8 04             	shr    eax,0x4
c0017ac8:	83 e0 0f             	and    eax,0xf
c0017acb:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017ad0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ad4:	c1 e8 08             	shr    eax,0x8
c0017ad7:	83 e0 0f             	and    eax,0xf
c0017ada:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017adf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ae3:	c1 e8 0c             	shr    eax,0xc
c0017ae6:	83 e0 03             	and    eax,0x3
c0017ae9:	a2 7f d7 02 c0       	mov    ds:0xc002d77f,al
c0017aee:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017af3:	0f b6 c0             	movzx  eax,al
c0017af6:	83 f8 06             	cmp    eax,0x6
c0017af9:	74 0d                	je     c0017b08 <HalDetectFeatures()+0xa1a>
c0017afb:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017b00:	0f b6 c0             	movzx  eax,al
c0017b03:	83 f8 0f             	cmp    eax,0xf
c0017b06:	75 18                	jne    c0017b20 <HalDetectFeatures()+0xa32>
c0017b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b0c:	c1 e8 10             	shr    eax,0x10
c0017b0f:	c1 e0 04             	shl    eax,0x4
c0017b12:	88 c2                	mov    dl,al
c0017b14:	a0 7e d7 02 c0       	mov    al,ds:0xc002d77e
c0017b19:	09 d0                	or     eax,edx
c0017b1b:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017b20:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017b25:	0f b6 c0             	movzx  eax,al
c0017b28:	83 f8 0f             	cmp    eax,0xf
c0017b2b:	75 15                	jne    c0017b42 <HalDetectFeatures()+0xa54>
c0017b2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b31:	c1 e8 14             	shr    eax,0x14
c0017b34:	88 c2                	mov    dl,al
c0017b36:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017b3b:	01 d0                	add    eax,edx
c0017b3d:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017b42:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017b4a:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0017b52:	85 c0                	test   eax,eax
c0017b54:	74 2d                	je     c0017b83 <HalDetectFeatures()+0xa95>
c0017b56:	83 ec 0c             	sub    esp,0xc
c0017b59:	68 00 00 00 40       	push   0x40000000
c0017b5e:	e8 01 f5 ff ff       	call   c0017064 <cpuidCheckECX(unsigned int)>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	83 e0 01             	and    eax,0x1
c0017b69:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017b70:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017b75:	83 e0 fb             	and    eax,0xfffffffb
c0017b78:	88 c2                	mov    dl,al
c0017b7a:	88 c8                	mov    al,cl
c0017b7c:	09 d0                	or     eax,edx
c0017b7e:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017b83:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b88:	83 c8 04             	or     eax,0x4
c0017b8b:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b90:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b95:	83 c8 08             	or     eax,0x8
c0017b98:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b9d:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017ba2:	83 c8 10             	or     eax,0x10
c0017ba5:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017baa:	83 ec 0c             	sub    esp,0xc
c0017bad:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017bb1:	50                   	push   eax
c0017bb2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017bb6:	50                   	push   eax
c0017bb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017bbb:	50                   	push   eax
c0017bbc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017bc0:	50                   	push   eax
c0017bc1:	68 00 00 00 80       	push   0x80000000
c0017bc6:	e8 ce f3 ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017bcb:	83 c4 20             	add    esp,0x20
c0017bce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bd2:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017bd7:	0f 86 96 01 00 00    	jbe    c0017d73 <HalDetectFeatures()+0xc85>
c0017bdd:	83 ec 0c             	sub    esp,0xc
c0017be0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017be4:	50                   	push   eax
c0017be5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017be9:	50                   	push   eax
c0017bea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017bee:	50                   	push   eax
c0017bef:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017bf3:	50                   	push   eax
c0017bf4:	68 01 00 00 80       	push   0x80000001
c0017bf9:	e8 9b f3 ff ff       	call   c0016f99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017bfe:	83 c4 20             	add    esp,0x20
c0017c01:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c06:	83 e0 7f             	and    eax,0x7f
c0017c09:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c0e:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017c13:	83 e0 fb             	and    eax,0xfffffffb
c0017c16:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017c1b:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017c20:	83 e0 fd             	and    eax,0xfffffffd
c0017c23:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017c28:	e9 46 01 00 00       	jmp    c0017d73 <HalDetectFeatures()+0xc85>
c0017c2d:	83 ec 08             	sub    esp,0x8
c0017c30:	68 20 39 02 c0       	push   0xc0023920
c0017c35:	68 70 d7 02 c0       	push   0xc002d770
c0017c3a:	e8 11 8a fe ff       	call   c0000650 <strcpy>
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017c4c:	e8 72 85 fe ff       	call   c00001c3 <is486>
c0017c51:	85 c0                	test   eax,eax
c0017c53:	0f 95 c0             	setne  al
c0017c56:	0f b6 c0             	movzx  eax,al
c0017c59:	85 c0                	test   eax,eax
c0017c5b:	0f 84 8d 00 00 00    	je     c0017cee <HalDetectFeatures()+0xc00>
c0017c61:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c66:	83 c8 04             	or     eax,0x4
c0017c69:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c6e:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c73:	83 c8 08             	or     eax,0x8
c0017c76:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c7b:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c80:	83 c8 10             	or     eax,0x10
c0017c83:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c88:	0f 20 c0             	mov    eax,cr0
c0017c8b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c93:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017c9a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017ca1:	83 e0 04             	and    eax,0x4
c0017ca4:	74 1e                	je     c0017cc4 <HalDetectFeatures()+0xbd6>
c0017ca6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017cad:	83 e0 10             	and    eax,0x10
c0017cb0:	75 12                	jne    c0017cc4 <HalDetectFeatures()+0xbd6>
c0017cb2:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017cb7:	83 e0 f7             	and    eax,0xfffffff7
c0017cba:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017cbf:	e9 af 00 00 00       	jmp    c0017d73 <HalDetectFeatures()+0xc85>
c0017cc4:	e8 d5 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017cc9:	83 e0 01             	and    eax,0x1
c0017ccc:	83 e0 01             	and    eax,0x1
c0017ccf:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017cd6:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017cdb:	83 e0 f7             	and    eax,0xfffffff7
c0017cde:	88 c2                	mov    dl,al
c0017ce0:	88 c8                	mov    al,cl
c0017ce2:	09 d0                	or     eax,edx
c0017ce4:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017ce9:	e9 85 00 00 00       	jmp    c0017d73 <HalDetectFeatures()+0xc85>
c0017cee:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017cf3:	83 e0 fb             	and    eax,0xfffffffb
c0017cf6:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017cfb:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d00:	83 e0 f7             	and    eax,0xfffffff7
c0017d03:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d08:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d0d:	83 e0 ef             	and    eax,0xffffffef
c0017d10:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d15:	0f 20 c0             	mov    eax,cr0
c0017d18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d20:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017d27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017d2e:	83 e0 04             	and    eax,0x4
c0017d31:	74 1b                	je     c0017d4e <HalDetectFeatures()+0xc60>
c0017d33:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017d3a:	83 e0 10             	and    eax,0x10
c0017d3d:	75 0f                	jne    c0017d4e <HalDetectFeatures()+0xc60>
c0017d3f:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d44:	83 e0 f7             	and    eax,0xfffffff7
c0017d47:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017d4c:	eb 25                	jmp    c0017d73 <HalDetectFeatures()+0xc85>
c0017d4e:	e8 4b 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017d53:	83 e0 01             	and    eax,0x1
c0017d56:	83 e0 01             	and    eax,0x1
c0017d59:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017d60:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d65:	83 e0 f7             	and    eax,0xfffffff7
c0017d68:	88 c2                	mov    dl,al
c0017d6a:	88 c8                	mov    al,cl
c0017d6c:	09 d0                	or     eax,edx
c0017d6e:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017d73:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d78:	83 e0 08             	and    eax,0x8
c0017d7b:	0f b6 c0             	movzx  eax,al
c0017d7e:	85 c0                	test   eax,eax
c0017d80:	75 25                	jne    c0017da7 <HalDetectFeatures()+0xcb9>
c0017d82:	e8 17 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017d87:	83 e0 01             	and    eax,0x1
c0017d8a:	83 e0 01             	and    eax,0x1
c0017d8d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017d94:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d99:	83 e0 f7             	and    eax,0xfffffff7
c0017d9c:	88 c2                	mov    dl,al
c0017d9e:	88 c8                	mov    al,cl
c0017da0:	09 d0                	or     eax,edx
c0017da2:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017da7:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017dac:	83 e0 08             	and    eax,0x8
c0017daf:	0f b6 c0             	movzx  eax,al
c0017db2:	85 c0                	test   eax,eax
c0017db4:	74 0d                	je     c0017dc3 <HalDetectFeatures()+0xcd5>
c0017db6:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017dbb:	83 c8 10             	or     eax,0x10
c0017dbe:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017dc3:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017dc8:	83 e0 10             	and    eax,0x10
c0017dcb:	0f b6 c0             	movzx  eax,al
c0017dce:	85 c0                	test   eax,eax
c0017dd0:	75 23                	jne    c0017df5 <HalDetectFeatures()+0xd07>
c0017dd2:	e8 af 7f 00 00       	call   c001fd86 <x87Detect>
c0017dd7:	83 e0 01             	and    eax,0x1
c0017dda:	83 e0 01             	and    eax,0x1
c0017ddd:	89 c1                	mov    ecx,eax
c0017ddf:	c1 e1 04             	shl    ecx,0x4
c0017de2:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017de7:	83 e0 ef             	and    eax,0xffffffef
c0017dea:	88 c2                	mov    dl,al
c0017dec:	88 c8                	mov    al,cl
c0017dee:	09 d0                	or     eax,edx
c0017df0:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017df5:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017dfa:	83 e0 01             	and    eax,0x1
c0017dfd:	0f b6 c0             	movzx  eax,al
c0017e00:	85 c0                	test   eax,eax
c0017e02:	75 2d                	jne    c0017e31 <HalDetectFeatures()+0xd43>
c0017e04:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e09:	83 e0 02             	and    eax,0x2
c0017e0c:	0f b6 c0             	movzx  eax,al
c0017e0f:	85 c0                	test   eax,eax
c0017e11:	75 1e                	jne    c0017e31 <HalDetectFeatures()+0xd43>
c0017e13:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e18:	83 e0 04             	and    eax,0x4
c0017e1b:	0f b6 c0             	movzx  eax,al
c0017e1e:	85 c0                	test   eax,eax
c0017e20:	75 0f                	jne    c0017e31 <HalDetectFeatures()+0xd43>
c0017e22:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e27:	83 e0 08             	and    eax,0x8
c0017e2a:	0f b6 c0             	movzx  eax,al
c0017e2d:	85 c0                	test   eax,eax
c0017e2f:	74 0d                	je     c0017e3e <HalDetectFeatures()+0xd50>
c0017e31:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e36:	83 c8 80             	or     eax,0xffffff80
c0017e39:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017e3e:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e43:	83 e0 10             	and    eax,0x10
c0017e46:	0f b6 c0             	movzx  eax,al
c0017e49:	85 c0                	test   eax,eax
c0017e4b:	74 2f                	je     c0017e7c <HalDetectFeatures()+0xd8e>
c0017e4d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e52:	83 e0 80             	and    eax,0xffffff80
c0017e55:	0f b6 c0             	movzx  eax,al
c0017e58:	85 c0                	test   eax,eax
c0017e5a:	75 20                	jne    c0017e7c <HalDetectFeatures()+0xd8e>
c0017e5c:	e8 df 7e 00 00       	call   c001fd40 <sseDetect>
c0017e61:	83 e0 01             	and    eax,0x1
c0017e64:	89 c1                	mov    ecx,eax
c0017e66:	c1 e1 07             	shl    ecx,0x7
c0017e69:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e6e:	83 e0 7f             	and    eax,0x7f
c0017e71:	88 c2                	mov    dl,al
c0017e73:	88 c8                	mov    al,cl
c0017e75:	09 d0                	or     eax,edx
c0017e77:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017e7c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e81:	83 e0 80             	and    eax,0xffffff80
c0017e84:	0f b6 c0             	movzx  eax,al
c0017e87:	85 c0                	test   eax,eax
c0017e89:	74 1c                	je     c0017ea7 <HalDetectFeatures()+0xdb9>
c0017e8b:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e90:	83 e0 20             	and    eax,0x20
c0017e93:	0f b6 c0             	movzx  eax,al
c0017e96:	85 c0                	test   eax,eax
c0017e98:	75 0d                	jne    c0017ea7 <HalDetectFeatures()+0xdb9>
c0017e9a:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e9f:	83 e0 df             	and    eax,0xffffffdf
c0017ea2:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017ea7:	c6 05 88 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d788,0x0
c0017eae:	90                   	nop
c0017eaf:	81 c4 90 00 00 00    	add    esp,0x90
c0017eb5:	5b                   	pop    ebx
c0017eb6:	5e                   	pop    esi
c0017eb7:	5f                   	pop    edi
c0017eb8:	c3                   	ret    

c0017eb9 <HalEnableNMI()>:
c0017eb9:	c6 05 6c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d76c,0x1
c0017ec0:	6a 10                	push   0x10
c0017ec2:	e8 20 ef ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0017ec7:	83 c4 04             	add    esp,0x4
c0017eca:	90                   	nop
c0017ecb:	c3                   	ret    

c0017ecc <HalDisableNMI()>:
c0017ecc:	c6 05 6c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d76c,0x0
c0017ed3:	6a 10                	push   0x10
c0017ed5:	e8 0d ef ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0017eda:	83 c4 04             	add    esp,0x4
c0017edd:	90                   	nop
c0017ede:	c3                   	ret    

c0017edf <HalGetNMIState()>:
c0017edf:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0017ee4:	c3                   	ret    

c0017ee5 <x86rdmsr(unsigned int)>:
c0017ee5:	83 ec 1c             	sub    esp,0x1c
c0017ee8:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017eed:	83 e0 08             	and    eax,0x8
c0017ef0:	0f b6 c0             	movzx  eax,al
c0017ef3:	85 c0                	test   eax,eax
c0017ef5:	75 10                	jne    c0017f07 <x86rdmsr(unsigned int)+0x22>
c0017ef7:	83 ec 0c             	sub    esp,0xc
c0017efa:	68 bb 39 02 c0       	push   0xc00239bb
c0017eff:	e8 e2 6d ff ff       	call   c000ece6 <KePanic(char const*)>
c0017f04:	83 c4 10             	add    esp,0x10
c0017f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0b:	89 c1                	mov    ecx,eax
c0017f0d:	0f 32                	rdmsr  
c0017f0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f1f:	83 c4 1c             	add    esp,0x1c
c0017f22:	c3                   	ret    

c0017f23 <x86wrmsr(unsigned int, unsigned long long)>:
c0017f23:	83 ec 1c             	sub    esp,0x1c
c0017f26:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f36:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f3b:	83 e0 08             	and    eax,0x8
c0017f3e:	0f b6 c0             	movzx  eax,al
c0017f41:	85 c0                	test   eax,eax
c0017f43:	75 10                	jne    c0017f55 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017f45:	83 ec 0c             	sub    esp,0xc
c0017f48:	68 c1 39 02 c0       	push   0xc00239c1
c0017f4d:	e8 94 6d ff ff       	call   c000ece6 <KePanic(char const*)>
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017f59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f61:	0f 30                	wrmsr  
c0017f63:	90                   	nop
c0017f64:	83 c4 1c             	add    esp,0x1c
c0017f67:	c3                   	ret    

c0017f68 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017f68:	83 ec 0c             	sub    esp,0xc
c0017f6b:	83 ec 0c             	sub    esp,0xc
c0017f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f72:	e8 40 e7 ff ff       	call   c00166b7 <Vm::faultHandler(regs*)>
c0017f77:	83 c4 10             	add    esp,0x10
c0017f7a:	83 c4 0c             	add    esp,0xc
c0017f7d:	c3                   	ret    

c0017f7e <HalFindRSDP()>:
c0017f7e:	83 ec 1c             	sub    esp,0x1c
c0017f81:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c0017f86:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017f8b:	7e 0c                	jle    c0017f99 <HalFindRSDP()+0x1b>
c0017f8d:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0017f92:	25 00 04 00 00       	and    eax,0x400
c0017f97:	74 0d                	je     c0017fa6 <HalFindRSDP()+0x28>
c0017f99:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f9e:	83 e0 fb             	and    eax,0xfffffffb
c0017fa1:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017fa6:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017fab:	83 e0 04             	and    eax,0x4
c0017fae:	0f b6 c0             	movzx  eax,al
c0017fb1:	85 c0                	test   eax,eax
c0017fb3:	75 07                	jne    c0017fbc <HalFindRSDP()+0x3e>
c0017fb5:	b8 00 00 00 00       	mov    eax,0x0
c0017fba:	eb 53                	jmp    c001800f <HalFindRSDP()+0x91>
c0017fbc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017fc4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017fcc:	77 2f                	ja     c0017ffd <HalFindRSDP()+0x7f>
c0017fce:	83 ec 04             	sub    esp,0x4
c0017fd1:	6a 08                	push   0x8
c0017fd3:	68 c7 39 02 c0       	push   0xc00239c7
c0017fd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017fdc:	e8 9f 83 fe ff       	call   c0000380 <memcmp>
c0017fe1:	83 c4 10             	add    esp,0x10
c0017fe4:	85 c0                	test   eax,eax
c0017fe6:	0f 94 c0             	sete   al
c0017fe9:	0f b6 c0             	movzx  eax,al
c0017fec:	85 c0                	test   eax,eax
c0017fee:	74 06                	je     c0017ff6 <HalFindRSDP()+0x78>
c0017ff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ff4:	eb 19                	jmp    c001800f <HalFindRSDP()+0x91>
c0017ff6:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017ffb:	eb c7                	jmp    c0017fc4 <HalFindRSDP()+0x46>
c0017ffd:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018002:	83 e0 fb             	and    eax,0xfffffffb
c0018005:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001800a:	b8 00 00 00 00       	mov    eax,0x0
c001800f:	83 c4 1c             	add    esp,0x1c
c0018012:	c3                   	ret    

c0018013 <HalHandlePageFault(void*, void*)>:
c0018013:	83 ec 1c             	sub    esp,0x1c
c0018016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001801a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001801d:	83 ec 08             	sub    esp,0x8
c0018020:	50                   	push   eax
c0018021:	68 0c 3c 02 c0       	push   0xc0023c0c
c0018026:	e8 23 ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001802b:	83 c4 10             	add    esp,0x10
c001802e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018032:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018035:	83 ec 08             	sub    esp,0x8
c0018038:	50                   	push   eax
c0018039:	68 d0 39 02 c0       	push   0xc00239d0
c001803e:	e8 0b ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018043:	83 c4 10             	add    esp,0x10
c0018046:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001804b:	8b 00                	mov    eax,DWORD PTR [eax]
c001804d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018050:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018056:	0f 20 d2             	mov    edx,cr2
c0018059:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001805d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018061:	83 ec 08             	sub    esp,0x8
c0018064:	52                   	push   edx
c0018065:	50                   	push   eax
c0018066:	e8 79 ad ff ff       	call   c0012de4 <VAS::tryLoadBackOffDisk(unsigned long)>
c001806b:	83 c4 10             	add    esp,0x10
c001806e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018076:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018079:	83 ec 08             	sub    esp,0x8
c001807c:	50                   	push   eax
c001807d:	68 e5 39 02 c0       	push   0xc00239e5
c0018082:	e8 c7 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001808e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018091:	83 ec 08             	sub    esp,0x8
c0018094:	50                   	push   eax
c0018095:	68 ff 39 02 c0       	push   0xc00239ff
c001809a:	e8 af ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00180a7:	83 ec 08             	sub    esp,0x8
c00180aa:	50                   	push   eax
c00180ab:	68 14 3a 02 c0       	push   0xc0023a14
c00180b0:	e8 99 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180b5:	83 c4 10             	add    esp,0x10
c00180b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00180bc:	83 c4 1c             	add    esp,0x1c
c00180bf:	c3                   	ret    

c00180c0 <HalHandleOpcodeFault(void*, void*)>:
c00180c0:	83 ec 1c             	sub    esp,0x1c
c00180c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180cb:	a0 88 d7 02 c0       	mov    al,ds:0xc002d788
c00180d0:	0f b6 c0             	movzx  eax,al
c00180d3:	85 c0                	test   eax,eax
c00180d5:	74 25                	je     c00180fc <HalHandleOpcodeFault(void*, void*)+0x3c>
c00180d7:	83 ec 0c             	sub    esp,0xc
c00180da:	68 40 3c 02 c0       	push   0xc0023c40
c00180df:	e8 6a ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180ee:	8d 50 19             	lea    edx,[eax+0x19]
c00180f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00180f8:	b0 01                	mov    al,0x1
c00180fa:	eb 02                	jmp    c00180fe <HalHandleOpcodeFault(void*, void*)+0x3e>
c00180fc:	b0 00                	mov    al,0x0
c00180fe:	83 c4 1c             	add    esp,0x1c
c0018101:	c3                   	ret    

c0018102 <HalDisplayDebugInfo(void*)>:
c0018102:	83 ec 2c             	sub    esp,0x2c
c0018105:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018109:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001810d:	0f 20 c0             	mov    eax,cr0
c0018110:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018114:	0f 20 d0             	mov    eax,cr2
c0018117:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001811b:	0f 20 d8             	mov    eax,cr3
c001811e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018122:	0f 20 e0             	mov    eax,cr4
c0018125:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018129:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001812d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018130:	83 ec 08             	sub    esp,0x8
c0018133:	50                   	push   eax
c0018134:	68 2f 3a 02 c0       	push   0xc0023a2f
c0018139:	e8 10 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001813e:	83 c4 10             	add    esp,0x10
c0018141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018145:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018148:	83 ec 08             	sub    esp,0x8
c001814b:	50                   	push   eax
c001814c:	68 20 3a 02 c0       	push   0xc0023a20
c0018151:	e8 f8 ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018156:	83 c4 10             	add    esp,0x10
c0018159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001815d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018160:	83 ec 08             	sub    esp,0x8
c0018163:	50                   	push   eax
c0018164:	68 2b 3a 02 c0       	push   0xc0023a2b
c0018169:	e8 e0 ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001816e:	83 c4 10             	add    esp,0x10
c0018171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018175:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018178:	83 ec 08             	sub    esp,0x8
c001817b:	50                   	push   eax
c001817c:	68 3a 3a 02 c0       	push   0xc0023a3a
c0018181:	e8 c8 ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018186:	83 c4 10             	add    esp,0x10
c0018189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001818d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018190:	83 ec 08             	sub    esp,0x8
c0018193:	50                   	push   eax
c0018194:	68 45 3a 02 c0       	push   0xc0023a45
c0018199:	e8 b0 ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001819e:	83 c4 10             	add    esp,0x10
c00181a1:	83 ec 08             	sub    esp,0x8
c00181a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181a8:	68 50 3a 02 c0       	push   0xc0023a50
c00181ad:	e8 9c ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00181b2:	83 c4 10             	add    esp,0x10
c00181b5:	83 ec 08             	sub    esp,0x8
c00181b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181bc:	68 5b 3a 02 c0       	push   0xc0023a5b
c00181c1:	e8 88 ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00181c6:	83 c4 10             	add    esp,0x10
c00181c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181cd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00181d0:	c1 e0 05             	shl    eax,0x5
c00181d3:	8d 90 60 4f 02 c0    	lea    edx,[eax-0x3ffdb0a0]
c00181d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181dd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00181e0:	83 ec 04             	sub    esp,0x4
c00181e3:	52                   	push   edx
c00181e4:	50                   	push   eax
c00181e5:	68 66 3a 02 c0       	push   0xc0023a66
c00181ea:	e8 5f ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00181ef:	83 c4 10             	add    esp,0x10
c00181f2:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00181f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181fd:	83 ec 0c             	sub    esp,0xc
c0018200:	50                   	push   eax
c0018201:	e8 8b 8f ff ff       	call   c0011191 <setActiveTerminal(VgaText*)>
c0018206:	83 c4 10             	add    esp,0x10
c0018209:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001820e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018214:	83 ec 08             	sub    esp,0x8
c0018217:	68 75 3a 02 c0       	push   0xc0023a75
c001821c:	50                   	push   eax
c001821d:	e8 ac 92 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c0018222:	83 c4 10             	add    esp,0x10
c0018225:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001822a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018230:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018234:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018237:	83 ec 08             	sub    esp,0x8
c001823a:	52                   	push   edx
c001823b:	50                   	push   eax
c001823c:	e8 47 92 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018249:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001824f:	83 ec 08             	sub    esp,0x8
c0018252:	68 83 3a 02 c0       	push   0xc0023a83
c0018257:	50                   	push   eax
c0018258:	e8 71 92 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018265:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001826b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018270:	8b 12                	mov    edx,DWORD PTR [edx]
c0018272:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018275:	83 c2 0c             	add    edx,0xc
c0018278:	83 ec 08             	sub    esp,0x8
c001827b:	52                   	push   edx
c001827c:	50                   	push   eax
c001827d:	e8 4c 92 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c0018282:	83 c4 10             	add    esp,0x10
c0018285:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001828a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018290:	83 ec 08             	sub    esp,0x8
c0018293:	68 8c 3a 02 c0       	push   0xc0023a8c
c0018298:	50                   	push   eax
c0018299:	e8 30 92 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001829e:	83 c4 10             	add    esp,0x10
c00182a1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182b0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00182b3:	83 ec 08             	sub    esp,0x8
c00182b6:	52                   	push   edx
c00182b7:	50                   	push   eax
c00182b8:	e8 cb 91 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c00182bd:	83 c4 10             	add    esp,0x10
c00182c0:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182cb:	83 ec 08             	sub    esp,0x8
c00182ce:	68 94 3a 02 c0       	push   0xc0023a94
c00182d3:	50                   	push   eax
c00182d4:	e8 f5 91 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c00182d9:	83 c4 10             	add    esp,0x10
c00182dc:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182eb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00182ee:	83 ec 08             	sub    esp,0x8
c00182f1:	52                   	push   edx
c00182f2:	50                   	push   eax
c00182f3:	e8 90 91 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018300:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018306:	83 ec 08             	sub    esp,0x8
c0018309:	68 9c 3a 02 c0       	push   0xc0023a9c
c001830e:	50                   	push   eax
c001830f:	e8 ba 91 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c0018314:	83 c4 10             	add    esp,0x10
c0018317:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001831c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018326:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018329:	83 ec 08             	sub    esp,0x8
c001832c:	52                   	push   edx
c001832d:	50                   	push   eax
c001832e:	e8 55 91 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001833b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018341:	83 ec 08             	sub    esp,0x8
c0018344:	68 a4 3a 02 c0       	push   0xc0023aa4
c0018349:	50                   	push   eax
c001834a:	e8 7f 91 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018357:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001835d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018361:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018364:	83 ec 08             	sub    esp,0x8
c0018367:	52                   	push   edx
c0018368:	50                   	push   eax
c0018369:	e8 1a 91 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c001836e:	83 c4 10             	add    esp,0x10
c0018371:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018376:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001837c:	83 ec 08             	sub    esp,0x8
c001837f:	68 ac 3a 02 c0       	push   0xc0023aac
c0018384:	50                   	push   eax
c0018385:	e8 44 91 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018392:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001839c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001839f:	83 ec 08             	sub    esp,0x8
c00183a2:	52                   	push   edx
c00183a3:	50                   	push   eax
c00183a4:	e8 df 90 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c00183a9:	83 c4 10             	add    esp,0x10
c00183ac:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183b7:	83 ec 08             	sub    esp,0x8
c00183ba:	68 b4 3a 02 c0       	push   0xc0023ab4
c00183bf:	50                   	push   eax
c00183c0:	e8 09 91 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c00183c5:	83 c4 10             	add    esp,0x10
c00183c8:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183d7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00183da:	83 ec 08             	sub    esp,0x8
c00183dd:	52                   	push   edx
c00183de:	50                   	push   eax
c00183df:	e8 a4 90 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c00183e4:	83 c4 10             	add    esp,0x10
c00183e7:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183f2:	83 ec 08             	sub    esp,0x8
c00183f5:	68 bc 3a 02 c0       	push   0xc0023abc
c00183fa:	50                   	push   eax
c00183fb:	e8 ce 90 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018408:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001840e:	83 ec 08             	sub    esp,0x8
c0018411:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018415:	50                   	push   eax
c0018416:	e8 6d 90 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c001841b:	83 c4 10             	add    esp,0x10
c001841e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018423:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018429:	83 ec 08             	sub    esp,0x8
c001842c:	68 c5 3a 02 c0       	push   0xc0023ac5
c0018431:	50                   	push   eax
c0018432:	e8 97 90 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c0018437:	83 c4 10             	add    esp,0x10
c001843a:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001843f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018445:	83 ec 08             	sub    esp,0x8
c0018448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001844c:	50                   	push   eax
c001844d:	e8 36 90 ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001845a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018460:	83 ec 08             	sub    esp,0x8
c0018463:	68 cd 3a 02 c0       	push   0xc0023acd
c0018468:	50                   	push   eax
c0018469:	e8 60 90 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018476:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001847c:	83 ec 08             	sub    esp,0x8
c001847f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018483:	50                   	push   eax
c0018484:	e8 ff 8f ff ff       	call   c0011488 <VgaText::putx(unsigned int)>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	fa                   	cli    
c001848d:	f4                   	hlt    
c001848e:	eb fe                	jmp    c001848e <HalDisplayDebugInfo(void*)+0x38c>

c0018490 <HalReceivedNMI()>:
c0018490:	83 ec 1c             	sub    esp,0x1c
c0018493:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001849a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001849e:	89 c2                	mov    edx,eax
c00184a0:	ec                   	in     al,dx
c00184a1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00184a5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00184a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184ad:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00184b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184b8:	89 c2                	mov    edx,eax
c00184ba:	ec                   	in     al,dx
c00184bb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00184bf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00184c3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184c7:	83 ec 0c             	sub    esp,0xc
c00184ca:	68 d5 3a 02 c0       	push   0xc0023ad5
c00184cf:	e8 7a ea fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00184d4:	83 c4 10             	add    esp,0x10
c00184d7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00184dc:	83 e0 10             	and    eax,0x10
c00184df:	74 10                	je     c00184f1 <HalReceivedNMI()+0x61>
c00184e1:	83 ec 0c             	sub    esp,0xc
c00184e4:	68 e6 3a 02 c0       	push   0xc0023ae6
c00184e9:	e8 f8 67 ff ff       	call   c000ece6 <KePanic(char const*)>
c00184ee:	83 c4 10             	add    esp,0x10
c00184f1:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00184f6:	83 e0 40             	and    eax,0x40
c00184f9:	74 10                	je     c001850b <HalReceivedNMI()+0x7b>
c00184fb:	83 ec 0c             	sub    esp,0xc
c00184fe:	68 f3 3a 02 c0       	push   0xc0023af3
c0018503:	e8 de 67 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018508:	83 c4 10             	add    esp,0x10
c001850b:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001850f:	0f be c0             	movsx  eax,al
c0018512:	85 c0                	test   eax,eax
c0018514:	79 10                	jns    c0018526 <HalReceivedNMI()+0x96>
c0018516:	83 ec 0c             	sub    esp,0xc
c0018519:	68 fd 3a 02 c0       	push   0xc0023afd
c001851e:	e8 c3 67 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018523:	83 c4 10             	add    esp,0x10
c0018526:	90                   	nop
c0018527:	83 c4 1c             	add    esp,0x1c
c001852a:	c3                   	ret    

c001852b <HalSystemIdle()>:
c001852b:	56                   	push   esi
c001852c:	53                   	push   ebx
c001852d:	83 ec 14             	sub    esp,0x14
c0018530:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018535:	83 e0 10             	and    eax,0x10
c0018538:	0f b6 c0             	movzx  eax,al
c001853b:	85 c0                	test   eax,eax
c001853d:	74 43                	je     c0018582 <HalSystemIdle()+0x57>
c001853f:	83 ec 0c             	sub    esp,0xc
c0018542:	68 e1 00 00 00       	push   0xe1
c0018547:	e8 99 f9 ff ff       	call   c0017ee5 <x86rdmsr(unsigned int)>
c001854c:	83 c4 10             	add    esp,0x10
c001854f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018553:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018557:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001855b:	83 e0 02             	and    eax,0x2
c001855e:	89 c3                	mov    ebx,eax
c0018560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018564:	83 e0 00             	and    eax,0x0
c0018567:	89 c6                	mov    esi,eax
c0018569:	83 ec 04             	sub    esp,0x4
c001856c:	56                   	push   esi
c001856d:	53                   	push   ebx
c001856e:	68 e1 00 00 00       	push   0xe1
c0018573:	e8 ab f9 ff ff       	call   c0017f23 <x86wrmsr(unsigned int, unsigned long long)>
c0018578:	83 c4 10             	add    esp,0x10
c001857b:	e8 14 7c fe ff       	call   c0000194 <doTPAUSE>
c0018580:	eb 01                	jmp    c0018583 <HalSystemIdle()+0x58>
c0018582:	f4                   	hlt    
c0018583:	90                   	nop
c0018584:	83 c4 14             	add    esp,0x14
c0018587:	5b                   	pop    ebx
c0018588:	5e                   	pop    esi
c0018589:	c3                   	ret    

c001858a <i386SaveCoprocessor(void*)>:
c001858a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001858e:	83 c0 3f             	add    eax,0x3f
c0018591:	83 e0 c0             	and    eax,0xffffffc0
c0018594:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018598:	ff 25 50 d7 02 c0    	jmp    DWORD PTR ds:0xc002d750

c001859e <i386LoadCoprocessor(void*)>:
c001859e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185a2:	83 c0 3f             	add    eax,0x3f
c00185a5:	83 e0 c0             	and    eax,0xffffffc0
c00185a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00185ac:	ff 25 4c d7 02 c0    	jmp    DWORD PTR ds:0xc002d74c

c00185b2 <x87EmulHandler(regs*, void*)>:
c00185b2:	53                   	push   ebx
c00185b3:	83 ec 08             	sub    esp,0x8
c00185b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185bb:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00185bf:	74 10                	je     c00185d1 <x87EmulHandler(regs*, void*)+0x1f>
c00185c1:	83 ec 0c             	sub    esp,0xc
c00185c4:	68 0a 3b 02 c0       	push   0xc0023b0a
c00185c9:	e8 18 67 ff ff       	call   c000ece6 <KePanic(char const*)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	0f 20 c0             	mov    eax,cr0
c00185d4:	a8 08                	test   al,0x8
c00185d6:	74 59                	je     c0018631 <x87EmulHandler(regs*, void*)+0x7f>
c00185d8:	0f 06                	clts   
c00185da:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00185df:	85 c0                	test   eax,eax
c00185e1:	74 0e                	je     c00185f1 <x87EmulHandler(regs*, void*)+0x3f>
c00185e3:	83 ec 0c             	sub    esp,0xc
c00185e6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00185e9:	e8 9c ff ff ff       	call   c001858a <i386SaveCoprocessor(void*)>
c00185ee:	83 c4 10             	add    esp,0x10
c00185f1:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00185f7:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00185fb:	75 12                	jne    c001860f <x87EmulHandler(regs*, void*)+0x5d>
c00185fd:	83 ec 0c             	sub    esp,0xc
c0018600:	68 40 02 00 00       	push   0x240
c0018605:	e8 96 63 ff ff       	call   c000e9a0 <malloc>
c001860a:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001860d:	eb 10                	jmp    c001861f <x87EmulHandler(regs*, void*)+0x6d>
c001860f:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0018614:	83 ec 0c             	sub    esp,0xc
c0018617:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001861a:	e8 7f ff ff ff       	call   c001859e <i386LoadCoprocessor(void*)>
c001861f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c001862c:	83 c4 08             	add    esp,0x8
c001862f:	5b                   	pop    ebx
c0018630:	c3                   	ret    
c0018631:	83 ec 0c             	sub    esp,0xc
c0018634:	68 1e 3b 02 c0       	push   0xc0023b1e
c0018639:	e8 10 e9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001863e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018646:	83 c4 18             	add    esp,0x18
c0018649:	5b                   	pop    ebx
c001864a:	e9 ad d9 ff ff       	jmp    c0015ffc <Thr::terminateFromIRQ(int)>

c001864f <HalInitialiseCoprocessor()>:
c001864f:	83 ec 10             	sub    esp,0x10
c0018652:	6a 00                	push   0x0
c0018654:	68 b2 85 01 c0       	push   0xc00185b2
c0018659:	6a 07                	push   0x7
c001865b:	c7 05 48 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d748,0x0
c0018665:	e8 9d 06 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001866a:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001866f:	83 c4 10             	add    esp,0x10
c0018672:	a8 80                	test   al,0x80
c0018674:	74 1c                	je     c0018692 <HalInitialiseCoprocessor()+0x43>
c0018676:	c7 05 50 d7 02 c0 58 fd 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fd58
c0018680:	c7 05 4c d7 02 c0 60 fd 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fd60
c001868a:	83 c4 0c             	add    esp,0xc
c001868d:	e9 d6 76 00 00       	jmp    c001fd68 <sseInit>
c0018692:	a8 10                	test   al,0x10
c0018694:	74 1c                	je     c00186b2 <HalInitialiseCoprocessor()+0x63>
c0018696:	c7 05 50 d7 02 c0 a7 fd 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fda7
c00186a0:	c7 05 4c d7 02 c0 ae fd 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fdae
c00186aa:	83 c4 0c             	add    esp,0xc
c00186ad:	e9 03 77 00 00       	jmp    c001fdb5 <x87Init>
c00186b2:	c7 05 50 d7 02 c0 e2 6d 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc0016de2
c00186bc:	c7 05 4c d7 02 c0 e2 6d 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc0016de2
c00186c6:	0f 20 c0             	mov    eax,cr0
c00186c9:	83 c8 04             	or     eax,0x4
c00186cc:	0f 22 c0             	mov    cr0,eax
c00186cf:	83 c4 0c             	add    esp,0xc
c00186d2:	c3                   	ret    

c00186d3 <HalPanic(char const*)>:
c00186d3:	53                   	push   ebx
c00186d4:	83 ec 10             	sub    esp,0x10
c00186d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00186db:	fa                   	cli    
c00186dc:	53                   	push   ebx
c00186dd:	68 34 3b 02 c0       	push   0xc0023b34
c00186e2:	e8 67 e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00186e7:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	85 c0                	test   eax,eax
c00186f1:	74 09                	je     c00186fc <HalPanic(char const*)+0x29>
c00186f3:	83 ec 0c             	sub    esp,0xc
c00186f6:	53                   	push   ebx
c00186f7:	ff d0                	call   eax
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0018701:	85 c0                	test   eax,eax
c0018703:	0f 84 dc 00 00 00    	je     c00187e5 <HalPanic(char const*)+0x112>
c0018709:	52                   	push   edx
c001870a:	6a 01                	push   0x1
c001870c:	6a 0f                	push   0xf
c001870e:	50                   	push   eax
c001870f:	e8 d8 88 ff ff       	call   c0010fec <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018714:	59                   	pop    ecx
c0018715:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001871b:	e8 bc 8a ff ff       	call   c00111dc <VgaText::clearScreen()>
c0018720:	58                   	pop    eax
c0018721:	5a                   	pop    edx
c0018722:	68 fc 2b 02 c0       	push   0xc0022bfc
c0018727:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001872d:	e8 f2 88 ff ff       	call   c0011024 <VgaText::setTitle(char*)>
c0018732:	83 c4 0c             	add    esp,0xc
c0018735:	6a 01                	push   0x1
c0018737:	6a 0f                	push   0xf
c0018739:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001873f:	e8 a8 88 ff ff       	call   c0010fec <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018744:	59                   	pop    ecx
c0018745:	58                   	pop    eax
c0018746:	68 4d 3b 02 c0       	push   0xc0023b4d
c001874b:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018751:	e8 78 8d ff ff       	call   c00114ce <VgaText::puts(char const*)>
c0018756:	83 c4 0c             	add    esp,0xc
c0018759:	6a 0f                	push   0xf
c001875b:	6a 01                	push   0x1
c001875d:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018763:	e8 84 88 ff ff       	call   c0010fec <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018768:	58                   	pop    eax
c0018769:	5a                   	pop    edx
c001876a:	68 56 3b 02 c0       	push   0xc0023b56
c001876f:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018775:	e8 54 8d ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001877a:	83 c4 0c             	add    esp,0xc
c001877d:	6a 01                	push   0x1
c001877f:	6a 0f                	push   0xf
c0018781:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018787:	e8 60 88 ff ff       	call   c0010fec <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001878c:	59                   	pop    ecx
c001878d:	58                   	pop    eax
c001878e:	68 9a 3b 02 c0       	push   0xc0023b9a
c0018793:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018799:	e8 30 8d ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001879e:	58                   	pop    eax
c001879f:	5a                   	pop    edx
c00187a0:	68 63 3b 02 c0       	push   0xc0023b63
c00187a5:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187ab:	e8 1e 8d ff ff       	call   c00114ce <VgaText::puts(char const*)>
c00187b0:	59                   	pop    ecx
c00187b1:	58                   	pop    eax
c00187b2:	68 9d 3b 02 c0       	push   0xc0023b9d
c00187b7:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187bd:	e8 0c 8d ff ff       	call   c00114ce <VgaText::puts(char const*)>
c00187c2:	58                   	pop    eax
c00187c3:	5a                   	pop    edx
c00187c4:	53                   	push   ebx
c00187c5:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187cb:	e8 fe 8c ff ff       	call   c00114ce <VgaText::puts(char const*)>
c00187d0:	59                   	pop    ecx
c00187d1:	5b                   	pop    ebx
c00187d2:	68 9a 3b 02 c0       	push   0xc0023b9a
c00187d7:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187dd:	e8 ec 8c ff ff       	call   c00114ce <VgaText::puts(char const*)>
c00187e2:	83 c4 10             	add    esp,0x10
c00187e5:	eb fe                	jmp    c00187e5 <HalPanic(char const*)+0x112>

c00187e7 <HalQueryPerformanceCounter()>:
c00187e7:	31 c0                	xor    eax,eax
c00187e9:	31 d2                	xor    edx,edx
c00187eb:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c00187f2:	75 02                	jne    c00187f6 <HalQueryPerformanceCounter()+0xf>
c00187f4:	0f 31                	rdtsc  
c00187f6:	c3                   	ret    

c00187f7 <HalInitialise()>:
c00187f7:	53                   	push   ebx
c00187f8:	83 ec 08             	sub    esp,0x8
c00187fb:	c6 05 40 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d740,0x0
c0018802:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018807:	83 e0 fe             	and    eax,0xfffffffe
c001880a:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001880f:	e8 d8 07 00 00       	call   c0018fec <picOpen()>
c0018814:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c001881b:	74 0a                	je     c0018827 <HalInitialise()+0x30>
c001881d:	e8 1a 07 00 00       	call   c0018f3c <picDisable()>
c0018822:	e8 05 6b 00 00       	call   c001f32c <apicOpen()>
c0018827:	50                   	push   eax
c0018828:	bb 0f 00 00 00       	mov    ebx,0xf
c001882d:	6a 00                	push   0x0
c001882f:	68 50 e0 00 c0       	push   0xc000e050
c0018834:	6a 00                	push   0x0
c0018836:	e8 cc 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001883b:	83 c4 0c             	add    esp,0xc
c001883e:	6a 00                	push   0x0
c0018840:	68 50 e0 00 c0       	push   0xc000e050
c0018845:	6a 01                	push   0x1
c0018847:	e8 bb 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001884c:	83 c4 0c             	add    esp,0xc
c001884f:	6a 00                	push   0x0
c0018851:	68 40 e0 00 c0       	push   0xc000e040
c0018856:	6a 02                	push   0x2
c0018858:	e8 aa 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001885d:	83 c4 0c             	add    esp,0xc
c0018860:	6a 00                	push   0x0
c0018862:	68 50 e0 00 c0       	push   0xc000e050
c0018867:	6a 03                	push   0x3
c0018869:	e8 99 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001886e:	83 c4 0c             	add    esp,0xc
c0018871:	6a 00                	push   0x0
c0018873:	68 50 e0 00 c0       	push   0xc000e050
c0018878:	6a 04                	push   0x4
c001887a:	e8 88 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001887f:	83 c4 0c             	add    esp,0xc
c0018882:	6a 00                	push   0x0
c0018884:	68 50 e0 00 c0       	push   0xc000e050
c0018889:	6a 05                	push   0x5
c001888b:	e8 77 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018890:	83 c4 0c             	add    esp,0xc
c0018893:	6a 00                	push   0x0
c0018895:	68 84 e0 00 c0       	push   0xc000e084
c001889a:	6a 06                	push   0x6
c001889c:	e8 66 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188a1:	83 c4 0c             	add    esp,0xc
c00188a4:	6a 00                	push   0x0
c00188a6:	68 d8 e0 00 c0       	push   0xc000e0d8
c00188ab:	6a 08                	push   0x8
c00188ad:	e8 55 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188b2:	83 c4 0c             	add    esp,0xc
c00188b5:	6a 00                	push   0x0
c00188b7:	68 50 e0 00 c0       	push   0xc000e050
c00188bc:	6a 09                	push   0x9
c00188be:	e8 44 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188c3:	83 c4 0c             	add    esp,0xc
c00188c6:	6a 00                	push   0x0
c00188c8:	68 50 e0 00 c0       	push   0xc000e050
c00188cd:	6a 0a                	push   0xa
c00188cf:	e8 33 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188d4:	83 c4 0c             	add    esp,0xc
c00188d7:	6a 00                	push   0x0
c00188d9:	68 50 e0 00 c0       	push   0xc000e050
c00188de:	6a 0b                	push   0xb
c00188e0:	e8 22 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188e5:	83 c4 0c             	add    esp,0xc
c00188e8:	6a 00                	push   0x0
c00188ea:	68 88 df 00 c0       	push   0xc000df88
c00188ef:	6a 0d                	push   0xd
c00188f1:	e8 11 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188f6:	83 c4 0c             	add    esp,0xc
c00188f9:	6a 00                	push   0x0
c00188fb:	68 dc df 00 c0       	push   0xc000dfdc
c0018900:	6a 0e                	push   0xe
c0018902:	e8 00 04 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018907:	83 c4 10             	add    esp,0x10
c001890a:	50                   	push   eax
c001890b:	6a 00                	push   0x0
c001890d:	68 50 e0 00 c0       	push   0xc000e050
c0018912:	53                   	push   ebx
c0018913:	43                   	inc    ebx
c0018914:	e8 ee 03 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018919:	83 c4 10             	add    esp,0x10
c001891c:	83 fb 1e             	cmp    ebx,0x1e
c001891f:	75 e9                	jne    c001890a <HalInitialise()+0x113>
c0018921:	50                   	push   eax
c0018922:	6a 00                	push   0x0
c0018924:	68 73 0e 01 c0       	push   0xc0010e73
c0018929:	6a 60                	push   0x60
c001892b:	e8 d7 03 00 00       	call   c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018930:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018935:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001893f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018946:	e8 55 60 ff ff       	call   c000e9a0 <malloc>
c001894b:	89 04 24             	mov    DWORD PTR [esp],eax
c001894e:	89 c3                	mov    ebx,eax
c0018950:	e8 ff 0d 00 00       	call   c0019754 <RTC::RTC()>
c0018955:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001895f:	5a                   	pop    edx
c0018960:	59                   	pop    ecx
c0018961:	53                   	push   ebx
c0018962:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0018968:	e8 f9 06 ff ff       	call   c0009066 <Device::addChild(Device*)>
c001896d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001896f:	6a 00                	push   0x0
c0018971:	6a 00                	push   0x0
c0018973:	6a 00                	push   0x0
c0018975:	53                   	push   ebx
c0018976:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018979:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001897e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018984:	83 c4 28             	add    esp,0x28
c0018987:	5b                   	pop    ebx
c0018988:	c3                   	ret    

c0018989 <HalMakeBeep(int)>:
c0018989:	53                   	push   ebx
c001898a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001898e:	85 db                	test   ebx,ebx
c0018990:	75 07                	jne    c0018999 <HalMakeBeep(int)+0x10>
c0018992:	e4 61                	in     al,0x61
c0018994:	83 e0 fc             	and    eax,0xfffffffc
c0018997:	eb 26                	jmp    c00189bf <HalMakeBeep(int)+0x36>
c0018999:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001899e:	99                   	cdq    
c001899f:	f7 fb                	idiv   ebx
c00189a1:	89 c1                	mov    ecx,eax
c00189a3:	b0 b6                	mov    al,0xb6
c00189a5:	e6 43                	out    0x43,al
c00189a7:	88 c8                	mov    al,cl
c00189a9:	e6 42                	out    0x42,al
c00189ab:	89 c8                	mov    eax,ecx
c00189ad:	c1 e8 08             	shr    eax,0x8
c00189b0:	e6 42                	out    0x42,al
c00189b2:	e4 61                	in     al,0x61
c00189b4:	89 c2                	mov    edx,eax
c00189b6:	83 ca 03             	or     edx,0x3
c00189b9:	38 d0                	cmp    al,dl
c00189bb:	74 04                	je     c00189c1 <HalMakeBeep(int)+0x38>
c00189bd:	88 d0                	mov    al,dl
c00189bf:	e6 61                	out    0x61,al
c00189c1:	5b                   	pop    ebx
c00189c2:	c3                   	ret    

c00189c3 <HalGetRand()>:
c00189c3:	31 c0                	xor    eax,eax
c00189c5:	c3                   	ret    

c00189c6 <HalEndOfInterrupt(int)>:
c00189c6:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c00189cd:	74 1d                	je     c00189ec <HalEndOfInterrupt(int)+0x26>
c00189cf:	83 ec 18             	sub    esp,0x18
c00189d2:	6a 1b                	push   0x1b
c00189d4:	e8 0c f5 ff ff       	call   c0017ee5 <x86rdmsr(unsigned int)>
c00189d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00189de:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00189e8:	83 c4 1c             	add    esp,0x1c
c00189eb:	c3                   	ret    
c00189ec:	e9 7f 07 00 00       	jmp    c0019170 <picEOI(int)>

c00189f1 <HalRestart()>:
c00189f1:	c3                   	ret    

c00189f2 <HalShutdown()>:
c00189f2:	c3                   	ret    

c00189f3 <HalSleep()>:
c00189f3:	c3                   	ret    

c00189f4 <CPU::CPU()>:
c00189f4:	83 ec 0c             	sub    esp,0xc
c00189f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189fb:	83 ec 08             	sub    esp,0x8
c00189fe:	68 0f 39 02 c0       	push   0xc002390f
c0018a03:	50                   	push   eax
c0018a04:	e8 bf 07 ff ff       	call   c00091c8 <Device::Device(char const*)>
c0018a09:	83 c4 10             	add    esp,0x10
c0018a0c:	ba 6c 3c 02 c0       	mov    edx,0xc0023c6c
c0018a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a15:	89 10                	mov    DWORD PTR [eax],edx
c0018a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a1b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a29:	05 64 01 00 00       	add    eax,0x164
c0018a2e:	83 ec 0c             	sub    esp,0xc
c0018a31:	50                   	push   eax
c0018a32:	e8 f5 56 ff ff       	call   c000e12c <GDT::GDT()>
c0018a37:	83 c4 10             	add    esp,0x10
c0018a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a3e:	05 68 09 00 00       	add    eax,0x968
c0018a43:	83 ec 0c             	sub    esp,0xc
c0018a46:	50                   	push   eax
c0018a47:	e8 34 59 ff ff       	call   c000e380 <IDT::IDT()>
c0018a4c:	83 c4 10             	add    esp,0x10
c0018a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a53:	05 68 11 00 00       	add    eax,0x1168
c0018a58:	83 ec 0c             	sub    esp,0xc
c0018a5b:	50                   	push   eax
c0018a5c:	e8 ef 8e ff ff       	call   c0011950 <TSS::TSS()>
c0018a61:	83 c4 10             	add    esp,0x10
c0018a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a68:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018a72:	90                   	nop
c0018a73:	83 c4 0c             	add    esp,0xc
c0018a76:	c3                   	ret    
c0018a77:	90                   	nop

c0018a78 <CPU::setupSMEP()>:
c0018a78:	0f 20 e0             	mov    eax,cr4
c0018a7b:	0d 00 00 10 00       	or     eax,0x100000
c0018a80:	0f 22 e0             	mov    cr4,eax
c0018a83:	c3                   	ret    

c0018a84 <CPU::setupUMIP()>:
c0018a84:	0f 20 e0             	mov    eax,cr4
c0018a87:	80 cc 08             	or     ah,0x8
c0018a8a:	0f 22 e0             	mov    cr4,eax
c0018a8d:	c3                   	ret    

c0018a8e <CPU::setupTSC()>:
c0018a8e:	0f 20 e0             	mov    eax,cr4
c0018a91:	83 c8 04             	or     eax,0x4
c0018a94:	0f 22 e0             	mov    cr4,eax
c0018a97:	c3                   	ret    

c0018a98 <CPU::setupLargePages()>:
c0018a98:	0f 20 e0             	mov    eax,cr4
c0018a9b:	83 c8 10             	or     eax,0x10
c0018a9e:	0f 22 e0             	mov    cr4,eax
c0018aa1:	c3                   	ret    

c0018aa2 <CPU::setupPAT()>:
c0018aa2:	f6 05 8c d7 02 c0 08 	test   BYTE PTR ds:0xc002d78c,0x8
c0018aa9:	74 28                	je     c0018ad3 <CPU::setupPAT()+0x31>
c0018aab:	53                   	push   ebx
c0018aac:	83 ec 14             	sub    esp,0x14
c0018aaf:	68 77 02 00 00       	push   0x277
c0018ab4:	e8 2c f4 ff ff       	call   c0017ee5 <x86rdmsr(unsigned int)>
c0018ab9:	83 c4 0c             	add    esp,0xc
c0018abc:	83 e2 f8             	and    edx,0xfffffff8
c0018abf:	83 ca 01             	or     edx,0x1
c0018ac2:	52                   	push   edx
c0018ac3:	50                   	push   eax
c0018ac4:	68 77 02 00 00       	push   0x277
c0018ac9:	e8 55 f4 ff ff       	call   c0017f23 <x86wrmsr(unsigned int, unsigned long long)>
c0018ace:	83 c4 18             	add    esp,0x18
c0018ad1:	5b                   	pop    ebx
c0018ad2:	c3                   	ret    
c0018ad3:	c3                   	ret    

c0018ad4 <CPU::setupMTRR()>:
c0018ad4:	c3                   	ret    
c0018ad5:	90                   	nop

c0018ad6 <CPU::setupGlobalPages()>:
c0018ad6:	0f 20 e0             	mov    eax,cr4
c0018ad9:	0c 80                	or     al,0x80
c0018adb:	0f 22 e0             	mov    cr4,eax
c0018ade:	c3                   	ret    
c0018adf:	90                   	nop

c0018ae0 <CPU::allowUsermodeDataAccess()>:
c0018ae0:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018ae7:	74 03                	je     c0018aec <CPU::allowUsermodeDataAccess()+0xc>
c0018ae9:	0f 01 cb             	stac   
c0018aec:	c3                   	ret    
c0018aed:	90                   	nop

c0018aee <CPU::prohibitUsermodeDataAccess()>:
c0018aee:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018af5:	74 03                	je     c0018afa <CPU::prohibitUsermodeDataAccess()+0xc>
c0018af7:	0f 01 ca             	clac   
c0018afa:	c3                   	ret    
c0018afb:	90                   	nop

c0018afc <CPU::setupSMAP()>:
c0018afc:	0f 20 e0             	mov    eax,cr4
c0018aff:	0d 00 00 20 00       	or     eax,0x200000
c0018b04:	0f 22 e0             	mov    cr4,eax
c0018b07:	eb e5                	jmp    c0018aee <CPU::prohibitUsermodeDataAccess()>
c0018b09:	90                   	nop

c0018b0a <CPU::setupFeatures()>:
c0018b0a:	53                   	push   ebx
c0018b0b:	83 ec 08             	sub    esp,0x8
c0018b0e:	f6 05 8f d7 02 c0 20 	test   BYTE PTR ds:0xc002d78f,0x20
c0018b15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b19:	74 18                	je     c0018b33 <CPU::setupFeatures()+0x29>
c0018b1b:	83 ec 0c             	sub    esp,0xc
c0018b1e:	68 a8 3b 02 c0       	push   0xc0023ba8
c0018b23:	e8 26 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b2b:	e8 54 ff ff ff       	call   c0018a84 <CPU::setupUMIP()>
c0018b30:	83 c4 10             	add    esp,0x10
c0018b33:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018b3a:	74 18                	je     c0018b54 <CPU::setupFeatures()+0x4a>
c0018b3c:	83 ec 0c             	sub    esp,0xc
c0018b3f:	68 b2 3b 02 c0       	push   0xc0023bb2
c0018b44:	e8 05 e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b4c:	e8 3d ff ff ff       	call   c0018a8e <CPU::setupTSC()>
c0018b51:	83 c4 10             	add    esp,0x10
c0018b54:	f6 05 8e d7 02 c0 20 	test   BYTE PTR ds:0xc002d78e,0x20
c0018b5b:	74 18                	je     c0018b75 <CPU::setupFeatures()+0x6b>
c0018b5d:	83 ec 0c             	sub    esp,0xc
c0018b60:	68 bb 3b 02 c0       	push   0xc0023bbb
c0018b65:	e8 e4 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b6d:	e8 26 ff ff ff       	call   c0018a98 <CPU::setupLargePages()>
c0018b72:	83 c4 10             	add    esp,0x10
c0018b75:	f6 05 8e d7 02 c0 40 	test   BYTE PTR ds:0xc002d78e,0x40
c0018b7c:	74 18                	je     c0018b96 <CPU::setupFeatures()+0x8c>
c0018b7e:	83 ec 0c             	sub    esp,0xc
c0018b81:	68 c4 3b 02 c0       	push   0xc0023bc4
c0018b86:	e8 c3 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018b8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b8e:	e8 43 ff ff ff       	call   c0018ad6 <CPU::setupGlobalPages()>
c0018b93:	83 c4 10             	add    esp,0x10
c0018b96:	f6 05 8e d7 02 c0 80 	test   BYTE PTR ds:0xc002d78e,0x80
c0018b9d:	74 18                	je     c0018bb7 <CPU::setupFeatures()+0xad>
c0018b9f:	83 ec 0c             	sub    esp,0xc
c0018ba2:	68 d6 3b 02 c0       	push   0xc0023bd6
c0018ba7:	e8 a2 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018bac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018baf:	e8 ee fe ff ff       	call   c0018aa2 <CPU::setupPAT()>
c0018bb4:	83 c4 10             	add    esp,0x10
c0018bb7:	f6 05 90 d7 02 c0 04 	test   BYTE PTR ds:0xc002d790,0x4
c0018bbe:	74 11                	je     c0018bd1 <CPU::setupFeatures()+0xc7>
c0018bc0:	c7 44 24 10 df 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023bdf
c0018bc8:	83 c4 08             	add    esp,0x8
c0018bcb:	5b                   	pop    ebx
c0018bcc:	e9 7d e3 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0018bd1:	83 c4 08             	add    esp,0x8
c0018bd4:	5b                   	pop    ebx
c0018bd5:	c3                   	ret    

c0018bd6 <CPU::open(int, int, void*)>:
c0018bd6:	55                   	push   ebp
c0018bd7:	57                   	push   edi
c0018bd8:	56                   	push   esi
c0018bd9:	53                   	push   ebx
c0018bda:	83 ec 18             	sub    esp,0x18
c0018bdd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018be1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018be5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018be9:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018bef:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018bf5:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018bfb:	50                   	push   eax
c0018bfc:	e8 8d 55 ff ff       	call   c000e18e <GDT::setup()>
c0018c01:	83 c4 0c             	add    esp,0xc
c0018c04:	6a 00                	push   0x0
c0018c06:	68 ef be ad de       	push   0xdeadbeef
c0018c0b:	55                   	push   ebp
c0018c0c:	e8 83 8d ff ff       	call   c0011994 <TSS::setup(unsigned long, unsigned long)>
c0018c11:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018c14:	e8 5b 8d ff ff       	call   c0011974 <TSS::flush()>
c0018c19:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018c1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c22:	e8 cf 57 ff ff       	call   c000e3f6 <IDT::setup()>
c0018c27:	b8 00 04 00 00       	mov    eax,0x400
c0018c2c:	0f 23 f8             	mov    dr7,eax
c0018c2f:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018c39:	e8 a2 62 ff ff       	call   c000eee0 <Phys::allocatePage()>
c0018c3e:	83 c4 10             	add    esp,0x10
c0018c41:	85 f6                	test   esi,esi
c0018c43:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018c49:	89 38                	mov    DWORD PTR [eax],edi
c0018c4b:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018c51:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018c54:	74 10                	je     c0018c66 <CPU::open(int, int, void*)+0x90>
c0018c56:	50                   	push   eax
c0018c57:	50                   	push   eax
c0018c58:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018c5e:	56                   	push   esi
c0018c5f:	e8 0e 97 ff ff       	call   c0012372 <VAS::setCPUSpecific(unsigned long)>
c0018c64:	eb 0d                	jmp    c0018c73 <CPU::open(int, int, void*)+0x9d>
c0018c66:	83 ec 0c             	sub    esp,0xc
c0018c69:	68 e9 3b 02 c0       	push   0xc0023be9
c0018c6e:	e8 73 60 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018c73:	83 c4 10             	add    esp,0x10
c0018c76:	83 ec 0c             	sub    esp,0xc
c0018c79:	68 f7 3b 02 c0       	push   0xc0023bf7
c0018c7e:	e8 68 39 ff ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c0018c83:	e8 6f fb ff ff       	call   c00187f7 <HalInitialise()>
c0018c88:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0018c8d:	83 e0 10             	and    eax,0x10
c0018c90:	83 f8 01             	cmp    eax,0x1
c0018c93:	19 c0                	sbb    eax,eax
c0018c95:	83 e0 46             	and    eax,0x46
c0018c98:	83 c0 1e             	add    eax,0x1e
c0018c9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c9e:	e8 5e 1a ff ff       	call   c000a701 <setupTimer(int)>
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	f6 05 90 cd 02 c0 20 	test   BYTE PTR ds:0xc002cd90,0x20
c0018cad:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018cb3:	74 0c                	je     c0018cc1 <CPU::open(int, int, void*)+0xeb>
c0018cb5:	83 ec 0c             	sub    esp,0xc
c0018cb8:	53                   	push   ebx
c0018cb9:	e8 4c fe ff ff       	call   c0018b0a <CPU::setupFeatures()>
c0018cbe:	83 c4 10             	add    esp,0x10
c0018cc1:	83 c4 0c             	add    esp,0xc
c0018cc4:	31 c0                	xor    eax,eax
c0018cc6:	5b                   	pop    ebx
c0018cc7:	5e                   	pop    esi
c0018cc8:	5f                   	pop    edi
c0018cc9:	5d                   	pop    ebp
c0018cca:	c3                   	ret    

c0018ccb <convertLegacyIRQNumber(int)>:
c0018ccb:	83 ec 0c             	sub    esp,0xc
c0018cce:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd9:	74 0c                	je     c0018ce7 <convertLegacyIRQNumber(int)+0x1c>
c0018cdb:	83 f8 0f             	cmp    eax,0xf
c0018cde:	7f 0b                	jg     c0018ceb <convertLegacyIRQNumber(int)+0x20>
c0018ce0:	0f b6 80 e8 47 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb818]
c0018ce7:	83 c4 0c             	add    esp,0xc
c0018cea:	c3                   	ret    
c0018ceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018cef:	83 ec 0c             	sub    esp,0xc
c0018cf2:	68 90 3c 02 c0       	push   0xc0023c90
c0018cf7:	e8 ea 5f ff ff       	call   c000ece6 <KePanic(char const*)>
c0018cfc:	83 c4 10             	add    esp,0x10
c0018cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d03:	83 c4 0c             	add    esp,0xc
c0018d06:	c3                   	ret    

c0018d07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018d07:	56                   	push   esi
c0018d08:	31 c0                	xor    eax,eax
c0018d0a:	53                   	push   ebx
c0018d0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018d17:	89 ca                	mov    edx,ecx
c0018d19:	c1 e2 04             	shl    edx,0x4
c0018d1c:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c0018d24:	74 17                	je     c0018d3d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018d26:	83 c0 01             	add    eax,0x1
c0018d29:	83 f8 04             	cmp    eax,0x4
c0018d2c:	75 ee                	jne    c0018d1c <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018d2e:	c7 44 24 0c f1 3c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023cf1
c0018d36:	5b                   	pop    ebx
c0018d37:	5e                   	pop    esi
c0018d38:	e9 a9 5f ff ff       	jmp    c000ece6 <KePanic(char const*)>
c0018d3d:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018d40:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c0018d47:	5b                   	pop    ebx
c0018d48:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c0018d4f:	5e                   	pop    esi
c0018d50:	c3                   	ret    

c0018d51 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018d51:	55                   	push   ebp
c0018d52:	57                   	push   edi
c0018d53:	56                   	push   esi
c0018d54:	53                   	push   ebx
c0018d55:	83 ec 0c             	sub    esp,0xc
c0018d58:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0018d5c:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018d63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d67:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018d6a:	74 57                	je     c0018dc3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018d6c:	84 c0                	test   al,al
c0018d6e:	89 c7                	mov    edi,eax
c0018d70:	74 1d                	je     c0018d8f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018d72:	83 fe 0f             	cmp    esi,0xf
c0018d75:	0f 8f d9 00 00 00    	jg     c0018e54 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c0018d7b:	0f b6 b6 e8 47 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdb818]
c0018d82:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c0018d8a:	d1 ef                	shr    edi,1
c0018d8c:	83 e7 01             	and    edi,0x1
c0018d8f:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018d94:	83 ec 08             	sub    esp,0x8
c0018d97:	31 db                	xor    ebx,ebx
c0018d99:	50                   	push   eax
c0018d9a:	68 fe 3c 02 c0       	push   0xc0023cfe
c0018d9f:	e8 aa e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018da4:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018da9:	83 c4 10             	add    esp,0x10
c0018dac:	85 c0                	test   eax,eax
c0018dae:	7f 59                	jg     c0018e09 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c0018db0:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018db3:	83 ec 0c             	sub    esp,0xc
c0018db6:	68 15 3d 02 c0       	push   0xc0023d15
c0018dbb:	e8 26 5f ff ff       	call   c000ece6 <KePanic(char const*)>
c0018dc0:	83 c4 10             	add    esp,0x10
c0018dc3:	89 e8                	mov    eax,ebp
c0018dc5:	31 d2                	xor    edx,edx
c0018dc7:	c1 e0 04             	shl    eax,0x4
c0018dca:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c0018dd1:	85 c9                	test   ecx,ecx
c0018dd3:	0f 84 92 00 00 00    	je     c0018e6b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c0018dd9:	83 c2 01             	add    edx,0x1
c0018ddc:	83 fa 04             	cmp    edx,0x4
c0018ddf:	75 e9                	jne    c0018dca <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c0018de1:	83 ec 0c             	sub    esp,0xc
c0018de4:	68 cc 3c 02 c0       	push   0xc0023ccc
c0018de9:	e8 f8 5e ff ff       	call   c000ece6 <KePanic(char const*)>
c0018dee:	83 c4 10             	add    esp,0x10
c0018df1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018df6:	83 c4 0c             	add    esp,0xc
c0018df9:	5b                   	pop    ebx
c0018dfa:	5e                   	pop    esi
c0018dfb:	5f                   	pop    edi
c0018dfc:	5d                   	pop    ebp
c0018dfd:	c3                   	ret    
c0018dfe:	83 c3 01             	add    ebx,0x1
c0018e01:	39 1d e0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e0,ebx
c0018e07:	7e a7                	jle    c0018db0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c0018e09:	8b 2c 9d 00 e1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd1f00]
c0018e10:	83 ec 08             	sub    esp,0x8
c0018e13:	56                   	push   esi
c0018e14:	55                   	push   ebp
c0018e15:	e8 9e 66 00 00       	call   c001f4b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018e1a:	83 c4 10             	add    esp,0x10
c0018e1d:	84 c0                	test   al,al
c0018e1f:	74 dd                	je     c0018dfe <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018e21:	89 f8                	mov    eax,edi
c0018e23:	83 ec 04             	sub    esp,0x4
c0018e26:	8b 1c 9d 00 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1f00]
c0018e2d:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018e30:	0f b6 f8             	movzx  edi,al
c0018e33:	57                   	push   edi
c0018e34:	89 e8                	mov    eax,ebp
c0018e36:	6a 00                	push   0x0
c0018e38:	0f b6 c0             	movzx  eax,al
c0018e3b:	50                   	push   eax
c0018e3c:	89 f0                	mov    eax,esi
c0018e3e:	6a 00                	push   0x0
c0018e40:	0f b6 c0             	movzx  eax,al
c0018e43:	6a 00                	push   0x0
c0018e45:	50                   	push   eax
c0018e46:	53                   	push   ebx
c0018e47:	e8 d8 67 00 00       	call   c001f624 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018e4c:	83 c4 20             	add    esp,0x20
c0018e4f:	e9 6f ff ff ff       	jmp    c0018dc3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018e54:	83 ec 0c             	sub    esp,0xc
c0018e57:	31 ff                	xor    edi,edi
c0018e59:	68 90 3c 02 c0       	push   0xc0023c90
c0018e5e:	e8 83 5e ff ff       	call   c000ece6 <KePanic(char const*)>
c0018e63:	83 c4 10             	add    esp,0x10
c0018e66:	e9 24 ff ff ff       	jmp    c0018d8f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018e6b:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0018e6e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018e72:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c0018e79:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018e7d:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018e84:	83 c4 0c             	add    esp,0xc
c0018e87:	89 f0                	mov    eax,esi
c0018e89:	5b                   	pop    ebx
c0018e8a:	5e                   	pop    esi
c0018e8b:	5f                   	pop    edi
c0018e8c:	5d                   	pop    ebp
c0018e8d:	c3                   	ret    

c0018e8e <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018e96:	c1 e0 04             	shl    eax,0x4
c0018e99:	8d 50 10             	lea    edx,[eax+0x10]
c0018e9c:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c0018ea2:	74 08                	je     c0018eac <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018ea4:	83 c0 04             	add    eax,0x4
c0018ea7:	39 d0                	cmp    eax,edx
c0018ea9:	75 f1                	jne    c0018e9c <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018eab:	c3                   	ret    
c0018eac:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018eb6:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018ec0:	eb e2                	jmp    c0018ea4 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018ec2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018ec2:	56                   	push   esi
c0018ec3:	53                   	push   ebx
c0018ec4:	83 ec 04             	sub    esp,0x4
c0018ec7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018ecc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ed0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ed4:	74 09                	je     c0018edf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018ed6:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018edd:	75 34                	jne    c0018f13 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0018edf:	8d 43 20             	lea    eax,[ebx+0x20]
c0018ee2:	c1 e0 04             	shl    eax,0x4
c0018ee5:	8d 50 10             	lea    edx,[eax+0x10]
c0018ee8:	39 b0 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],esi
c0018eee:	74 0d                	je     c0018efd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0018ef0:	83 c0 04             	add    eax,0x4
c0018ef3:	39 d0                	cmp    eax,edx
c0018ef5:	75 f1                	jne    c0018ee8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0018ef7:	83 c4 04             	add    esp,0x4
c0018efa:	5b                   	pop    ebx
c0018efb:	5e                   	pop    esi
c0018efc:	c3                   	ret    
c0018efd:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018f07:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018f11:	eb dd                	jmp    c0018ef0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0018f13:	83 fb 0f             	cmp    ebx,0xf
c0018f16:	7f 09                	jg     c0018f21 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0018f18:	0f b6 9b e8 47 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdb818]
c0018f1f:	eb be                	jmp    c0018edf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018f21:	83 ec 0c             	sub    esp,0xc
c0018f24:	68 22 3d 02 c0       	push   0xc0023d22
c0018f29:	e8 b8 5d ff ff       	call   c000ece6 <KePanic(char const*)>
c0018f2e:	83 c4 10             	add    esp,0x10
c0018f31:	eb ac                	jmp    c0018edf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018f33:	90                   	nop

c0018f34 <picIoWait()>:
c0018f34:	eb 00                	jmp    c0018f36 <picIoWait()+0x2>
c0018f36:	eb 00                	jmp    c0018f38 <picIoWait()+0x4>
c0018f38:	90                   	nop
c0018f39:	c3                   	ret    
c0018f3a:	66 90                	xchg   ax,ax

c0018f3c <picDisable()>:
c0018f3c:	83 ec 10             	sub    esp,0x10
c0018f3f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018f46:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018f4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f4f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018f54:	ee                   	out    dx,al
c0018f55:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018f5c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018f61:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018f65:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018f6a:	ee                   	out    dx,al
c0018f6b:	90                   	nop
c0018f6c:	83 c4 10             	add    esp,0x10
c0018f6f:	c3                   	ret    

c0018f70 <picGetIRQReg(int)>:
c0018f70:	83 ec 10             	sub    esp,0x10
c0018f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f77:	0f b6 c0             	movzx  eax,al
c0018f7a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018f81:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018f85:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018f89:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018f8e:	ee                   	out    dx,al
c0018f8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f93:	0f b6 c0             	movzx  eax,al
c0018f96:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018f9d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018fa1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018fa5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018faa:	ee                   	out    dx,al
c0018fab:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018fb2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018fb7:	89 c2                	mov    edx,eax
c0018fb9:	ec                   	in     al,dx
c0018fba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fbe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fc2:	0f b6 c0             	movzx  eax,al
c0018fc5:	c1 e0 08             	shl    eax,0x8
c0018fc8:	89 c1                	mov    ecx,eax
c0018fca:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018fd1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018fd6:	89 c2                	mov    edx,eax
c0018fd8:	ec                   	in     al,dx
c0018fd9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018fdd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018fe1:	0f b6 c0             	movzx  eax,al
c0018fe4:	09 c8                	or     eax,ecx
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	c3                   	ret    
c0018fea:	66 90                	xchg   ax,ax

c0018fec <picOpen()>:
c0018fec:	83 ec 50             	sub    esp,0x50
c0018fef:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018ff6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018ffb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018fff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019003:	ee                   	out    dx,al
c0019004:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001900b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019010:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019014:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019018:	ee                   	out    dx,al
c0019019:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019021:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0019029:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019030:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019034:	89 c2                	mov    edx,eax
c0019036:	ec                   	in     al,dx
c0019037:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001903b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001903f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019043:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001904a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001904e:	89 c2                	mov    edx,eax
c0019050:	ec                   	in     al,dx
c0019051:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019055:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019059:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001905d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019064:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019069:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001906d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019071:	ee                   	out    dx,al
c0019072:	e8 bd fe ff ff       	call   c0018f34 <picIoWait()>
c0019077:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001907e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019083:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019087:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001908b:	ee                   	out    dx,al
c001908c:	e8 a3 fe ff ff       	call   c0018f34 <picIoWait()>
c0019091:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019095:	0f b6 c0             	movzx  eax,al
c0019098:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001909f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00190a3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00190a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190ab:	ee                   	out    dx,al
c00190ac:	e8 83 fe ff ff       	call   c0018f34 <picIoWait()>
c00190b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00190b5:	0f b6 c0             	movzx  eax,al
c00190b8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00190bf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00190c3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00190c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00190cb:	ee                   	out    dx,al
c00190cc:	e8 63 fe ff ff       	call   c0018f34 <picIoWait()>
c00190d1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00190d8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00190dd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00190e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00190e5:	ee                   	out    dx,al
c00190e6:	e8 49 fe ff ff       	call   c0018f34 <picIoWait()>
c00190eb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00190f2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00190f7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00190fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190ff:	ee                   	out    dx,al
c0019100:	e8 2f fe ff ff       	call   c0018f34 <picIoWait()>
c0019105:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001910c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019111:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019115:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019119:	ee                   	out    dx,al
c001911a:	e8 15 fe ff ff       	call   c0018f34 <picIoWait()>
c001911f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0019126:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001912b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001912f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019133:	ee                   	out    dx,al
c0019134:	e8 fb fd ff ff       	call   c0018f34 <picIoWait()>
c0019139:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001913e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019145:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019149:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001914d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019151:	ee                   	out    dx,al
c0019152:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019157:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001915e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019162:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019166:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001916a:	ee                   	out    dx,al
c001916b:	90                   	nop
c001916c:	83 c4 50             	add    esp,0x50
c001916f:	c3                   	ret    

c0019170 <picEOI(int)>:
c0019170:	83 ec 10             	sub    esp,0x10
c0019173:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019178:	75 1e                	jne    c0019198 <picEOI(int)+0x28>
c001917a:	6a 0b                	push   0xb
c001917c:	e8 ef fd ff ff       	call   c0018f70 <picGetIRQReg(int)>
c0019181:	83 c4 04             	add    esp,0x4
c0019184:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019189:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001918e:	25 80 00 00 00       	and    eax,0x80
c0019193:	74 73                	je     c0019208 <picEOI(int)+0x98>
c0019195:	8d 76 00             	lea    esi,[esi+0x0]
c0019198:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001919d:	75 31                	jne    c00191d0 <picEOI(int)+0x60>
c001919f:	6a 0b                	push   0xb
c00191a1:	e8 ca fd ff ff       	call   c0018f70 <picGetIRQReg(int)>
c00191a6:	83 c4 04             	add    esp,0x4
c00191a9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00191ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00191b2:	98                   	cwde   
c00191b3:	85 c0                	test   eax,eax
c00191b5:	78 19                	js     c00191d0 <picEOI(int)+0x60>
c00191b7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00191be:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00191c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00191c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00191cc:	ee                   	out    dx,al
c00191cd:	eb 3d                	jmp    c001920c <picEOI(int)+0x9c>
c00191cf:	90                   	nop
c00191d0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00191d5:	7e 19                	jle    c00191f0 <picEOI(int)+0x80>
c00191d7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00191de:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00191e3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00191e7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00191ec:	ee                   	out    dx,al
c00191ed:	8d 76 00             	lea    esi,[esi+0x0]
c00191f0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00191f7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00191fc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019200:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019205:	ee                   	out    dx,al
c0019206:	eb 04                	jmp    c001920c <picEOI(int)+0x9c>
c0019208:	90                   	nop
c0019209:	8d 76 00             	lea    esi,[esi+0x0]
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	c3                   	ret    

c0019210 <RTC::open(int, int, void*)>:
c0019210:	31 c0                	xor    eax,eax
c0019212:	c3                   	ret    
c0019213:	90                   	nop

c0019214 <RTC::close(int, int, void*)>:
c0019214:	31 c0                	xor    eax,eax
c0019216:	c3                   	ret    
c0019217:	90                   	nop

c0019218 <RTC::timeInSecondsUTC()>:
c0019218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001921c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019222:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019228:	c3                   	ret    
c0019229:	90                   	nop

c001922a <RTC::timeInDatetimeUTC()>:
c001922a:	53                   	push   ebx
c001922b:	83 ec 14             	sub    esp,0x14
c001922e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019232:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019236:	8b 10                	mov    edx,DWORD PTR [eax]
c0019238:	50                   	push   eax
c0019239:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001923c:	83 c4 0c             	add    esp,0xc
c001923f:	52                   	push   edx
c0019240:	50                   	push   eax
c0019241:	53                   	push   ebx
c0019242:	e8 93 fb fe ff       	call   c0008dda <KeSecondsToDatetime(unsigned long long)>
c0019247:	89 d8                	mov    eax,ebx
c0019249:	83 c4 14             	add    esp,0x14
c001924c:	5b                   	pop    ebx
c001924d:	c2 04 00             	ret    0x4

c0019250 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019250:	56                   	push   esi
c0019251:	53                   	push   ebx
c0019252:	83 ec 14             	sub    esp,0x14
c0019255:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019259:	8b 03                	mov    eax,DWORD PTR [ebx]
c001925b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001925e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019262:	52                   	push   edx
c0019263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001926b:	50                   	push   eax
c001926c:	e8 69 fb fe ff       	call   c0008dda <KeSecondsToDatetime(unsigned long long)>
c0019271:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019279:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001927d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019281:	89 f0                	mov    eax,esi
c0019283:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019287:	83 c4 20             	add    esp,0x20
c001928a:	5b                   	pop    ebx
c001928b:	5e                   	pop    esi
c001928c:	ff e0                	jmp    eax

c001928e <RTC::~RTC()>:
c001928e:	83 ec 0c             	sub    esp,0xc
c0019291:	ba 4c 3d 02 c0       	mov    edx,0xc0023d4c
c0019296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001929a:	89 10                	mov    DWORD PTR [eax],edx
c001929c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	50                   	push   eax
c00192a4:	e8 bd f8 fe ff       	call   c0008b66 <Clock::~Clock()>
c00192a9:	83 c4 10             	add    esp,0x10
c00192ac:	90                   	nop
c00192ad:	83 c4 0c             	add    esp,0xc
c00192b0:	c3                   	ret    
c00192b1:	90                   	nop

c00192b2 <RTC::~RTC()>:
c00192b2:	83 ec 0c             	sub    esp,0xc
c00192b5:	83 ec 0c             	sub    esp,0xc
c00192b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192bc:	e8 cd ff ff ff       	call   c001928e <RTC::~RTC()>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	83 ec 08             	sub    esp,0x8
c00192c7:	68 60 01 00 00       	push   0x160
c00192cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192d0:	e8 d6 33 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c00192d5:	83 c4 10             	add    esp,0x10
c00192d8:	83 c4 0c             	add    esp,0xc
c00192db:	c3                   	ret    

c00192dc <RTC::get_update_in_progress_flag()>:
c00192dc:	83 ec 18             	sub    esp,0x18
c00192df:	6a 0a                	push   0xa
c00192e1:	e8 01 db ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00192e6:	83 c4 1c             	add    esp,0x1c
c00192e9:	0f b6 c0             	movzx  eax,al
c00192ec:	c1 e8 07             	shr    eax,0x7
c00192ef:	c3                   	ret    

c00192f0 <RTC::completeRTCRefresh()>:
c00192f0:	55                   	push   ebp
c00192f1:	57                   	push   edi
c00192f2:	56                   	push   esi
c00192f3:	53                   	push   ebx
c00192f4:	83 ec 3c             	sub    esp,0x3c
c00192f7:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c00192fd:	83 ec 0c             	sub    esp,0xc
c0019300:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019304:	e8 d3 ff ff ff       	call   c00192dc <RTC::get_update_in_progress_flag()>
c0019309:	83 c4 10             	add    esp,0x10
c001930c:	84 c0                	test   al,al
c001930e:	74 0e                	je     c001931e <RTC::completeRTCRefresh()+0x2e>
c0019310:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019316:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c001931c:	73 df                	jae    c00192fd <RTC::completeRTCRefresh()+0xd>
c001931e:	83 ec 0c             	sub    esp,0xc
c0019321:	6a 00                	push   0x0
c0019323:	e8 bf da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0019328:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001932f:	89 c7                	mov    edi,eax
c0019331:	e8 b1 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0019336:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001933d:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019341:	e8 a1 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0019346:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001934d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019351:	e8 91 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0019356:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001935d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019361:	e8 81 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0019366:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001936d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019371:	e8 71 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0019376:	0f b6 c0             	movzx  eax,al
c0019379:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001937d:	83 c4 10             	add    esp,0x10
c0019380:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019386:	83 ec 0c             	sub    esp,0xc
c0019389:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001938d:	e8 4a ff ff ff       	call   c00192dc <RTC::get_update_in_progress_flag()>
c0019392:	83 c4 10             	add    esp,0x10
c0019395:	84 c0                	test   al,al
c0019397:	74 0e                	je     c00193a7 <RTC::completeRTCRefresh()+0xb7>
c0019399:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001939f:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c00193a5:	73 df                	jae    c0019386 <RTC::completeRTCRefresh()+0x96>
c00193a7:	83 ec 0c             	sub    esp,0xc
c00193aa:	6a 00                	push   0x0
c00193ac:	e8 36 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00193b1:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00193b8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00193bc:	e8 26 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00193c1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00193c8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00193cc:	e8 16 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00193d1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00193d8:	88 c3                	mov    bl,al
c00193da:	e8 08 da ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00193df:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00193e6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00193ea:	e8 f8 d9 ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00193ef:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00193f6:	89 c6                	mov    esi,eax
c00193f8:	e8 ea d9 ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00193fd:	89 f9                	mov    ecx,edi
c00193ff:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	0f b6 e8             	movzx  ebp,al
c0019409:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001940e:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019412:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019416:	74 27                	je     c001943f <RTC::completeRTCRefresh()+0x14f>
c0019418:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001941c:	89 f0                	mov    eax,esi
c001941e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019422:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019426:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001942a:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001942e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019432:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019436:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001943a:	e9 41 ff ff ff       	jmp    c0019380 <RTC::completeRTCRefresh()+0x90>
c001943f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019444:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019448:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001944c:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019450:	75 c6                	jne    c0019418 <RTC::completeRTCRefresh()+0x128>
c0019452:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019457:	89 f1                	mov    ecx,esi
c0019459:	0f b6 fb             	movzx  edi,bl
c001945c:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019460:	0f b6 c9             	movzx  ecx,cl
c0019463:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019467:	89 f1                	mov    ecx,esi
c0019469:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001946d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019471:	0f 94 c2             	sete   dl
c0019474:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019478:	0f 94 c0             	sete   al
c001947b:	21 d0                	and    eax,edx
c001947d:	31 d2                	xor    edx,edx
c001947f:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019483:	0f 94 c2             	sete   dl
c0019486:	85 c2                	test   edx,eax
c0019488:	74 8e                	je     c0019418 <RTC::completeRTCRefresh()+0x128>
c001948a:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001948e:	75 88                	jne    c0019418 <RTC::completeRTCRefresh()+0x128>
c0019490:	83 ec 0c             	sub    esp,0xc
c0019493:	6a 0b                	push   0xb
c0019495:	e8 4d d9 ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c001949a:	83 c4 10             	add    esp,0x10
c001949d:	a8 04                	test   al,0x4
c001949f:	75 7a                	jne    c001951b <RTC::completeRTCRefresh()+0x22b>
c00194a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00194a5:	c1 ef 04             	shr    edi,0x4
c00194a8:	83 e6 0f             	and    esi,0xf
c00194ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00194af:	c1 ed 04             	shr    ebp,0x4
c00194b2:	6b ed 0a             	imul   ebp,ebp,0xa
c00194b5:	c1 ea 04             	shr    edx,0x4
c00194b8:	6b d2 0a             	imul   edx,edx,0xa
c00194bb:	83 e1 0f             	and    ecx,0xf
c00194be:	01 d1                	add    ecx,edx
c00194c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00194c4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00194c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00194cc:	c1 ea 04             	shr    edx,0x4
c00194cf:	6b d2 0a             	imul   edx,edx,0xa
c00194d2:	83 e1 0f             	and    ecx,0xf
c00194d5:	01 d1                	add    ecx,edx
c00194d7:	89 fa                	mov    edx,edi
c00194d9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00194dd:	83 e2 07             	and    edx,0x7
c00194e0:	89 d9                	mov    ecx,ebx
c00194e2:	6b d2 0a             	imul   edx,edx,0xa
c00194e5:	83 e1 0f             	and    ecx,0xf
c00194e8:	83 e3 80             	and    ebx,0xffffff80
c00194eb:	01 d1                	add    ecx,edx
c00194ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00194f1:	09 cb                	or     ebx,ecx
c00194f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00194f7:	c1 ea 04             	shr    edx,0x4
c00194fa:	6b d2 0a             	imul   edx,edx,0xa
c00194fd:	83 e1 0f             	and    ecx,0xf
c0019500:	01 d1                	add    ecx,edx
c0019502:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019506:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001950a:	c1 ea 04             	shr    edx,0x4
c001950d:	6b d2 0a             	imul   edx,edx,0xa
c0019510:	01 d6                	add    esi,edx
c0019512:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019516:	83 e2 0f             	and    edx,0xf
c0019519:	01 d5                	add    ebp,edx
c001951b:	a8 02                	test   al,0x2
c001951d:	75 15                	jne    c0019534 <RTC::completeRTCRefresh()+0x244>
c001951f:	f6 c3 80             	test   bl,0x80
c0019522:	74 10                	je     c0019534 <RTC::completeRTCRefresh()+0x244>
c0019524:	83 e3 7f             	and    ebx,0x7f
c0019527:	b9 18 00 00 00       	mov    ecx,0x18
c001952c:	8d 43 0c             	lea    eax,[ebx+0xc]
c001952f:	99                   	cdq    
c0019530:	f7 f9                	idiv   ecx
c0019532:	88 d3                	mov    bl,dl
c0019534:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001953a:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0019540:	77 06                	ja     c0019548 <RTC::completeRTCRefresh()+0x258>
c0019542:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0019548:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001954d:	31 c9                	xor    ecx,ecx
c001954f:	31 d2                	xor    edx,edx
c0019551:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019555:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019559:	89 cd                	mov    ebp,ecx
c001955b:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001955f:	c1 e7 10             	shl    edi,0x10
c0019562:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0019568:	c1 e0 10             	shl    eax,0x10
c001956b:	09 c5                	or     ebp,eax
c001956d:	89 e9                	mov    ecx,ebp
c001956f:	0f b7 c2             	movzx  eax,dx
c0019572:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0019576:	09 f8                	or     eax,edi
c0019578:	89 c2                	mov    edx,eax
c001957a:	50                   	push   eax
c001957b:	50                   	push   eax
c001957c:	88 d9                	mov    cl,bl
c001957e:	51                   	push   ecx
c001957f:	52                   	push   edx
c0019580:	e8 d0 f6 fe ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c0019585:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019589:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001958f:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019595:	83 c4 4c             	add    esp,0x4c
c0019598:	5b                   	pop    ebx
c0019599:	5e                   	pop    esi
c001959a:	5f                   	pop    edi
c001959b:	5d                   	pop    ebp
c001959c:	c3                   	ret    
c001959d:	90                   	nop

c001959e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001959e:	55                   	push   ebp
c001959f:	57                   	push   edi
c00195a0:	56                   	push   esi
c00195a1:	53                   	push   ebx
c00195a2:	83 ec 34             	sub    esp,0x34
c00195a5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00195a9:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00195ad:	6a 00                	push   0x0
c00195af:	6a 00                	push   0x0
c00195b1:	e8 85 d8 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00195b6:	5d                   	pop    ebp
c00195b7:	89 fb                	mov    ebx,edi
c00195b9:	58                   	pop    eax
c00195ba:	6a 00                	push   0x0
c00195bc:	6a 02                	push   0x2
c00195be:	e8 78 d8 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00195c3:	89 f8                	mov    eax,edi
c00195c5:	89 f9                	mov    ecx,edi
c00195c7:	0f b6 c4             	movzx  eax,ah
c00195ca:	31 d2                	xor    edx,edx
c00195cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195d0:	c1 e9 10             	shr    ecx,0x10
c00195d3:	89 f0                	mov    eax,esi
c00195d5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00195d9:	89 f0                	mov    eax,esi
c00195db:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00195df:	0f b6 c4             	movzx  eax,ah
c00195e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195e6:	89 f0                	mov    eax,esi
c00195e8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00195ec:	c1 e8 10             	shr    eax,0x10
c00195ef:	b9 64 00 00 00       	mov    ecx,0x64
c00195f4:	f7 f1                	div    ecx
c00195f6:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00195fd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019601:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019605:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019609:	e8 d9 d7 ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c001960e:	83 c4 10             	add    esp,0x10
c0019611:	a8 04                	test   al,0x4
c0019613:	89 c5                	mov    ebp,eax
c0019615:	75 6e                	jne    c0019685 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019617:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001961b:	31 d2                	xor    edx,edx
c001961d:	0f b6 c1             	movzx  eax,cl
c0019620:	b9 0a 00 00 00       	mov    ecx,0xa
c0019625:	f7 f1                	div    ecx
c0019627:	c1 e0 04             	shl    eax,0x4
c001962a:	09 d0                	or     eax,edx
c001962c:	31 d2                	xor    edx,edx
c001962e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019632:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019637:	f7 f1                	div    ecx
c0019639:	c1 e0 04             	shl    eax,0x4
c001963c:	09 d0                	or     eax,edx
c001963e:	31 d2                	xor    edx,edx
c0019640:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019644:	0f b6 c3             	movzx  eax,bl
c0019647:	f7 f1                	div    ecx
c0019649:	c1 e0 04             	shl    eax,0x4
c001964c:	09 d0                	or     eax,edx
c001964e:	31 d2                	xor    edx,edx
c0019650:	89 c3                	mov    ebx,eax
c0019652:	89 f0                	mov    eax,esi
c0019654:	0f b6 c0             	movzx  eax,al
c0019657:	f7 f1                	div    ecx
c0019659:	c1 e0 04             	shl    eax,0x4
c001965c:	09 d0                	or     eax,edx
c001965e:	31 d2                	xor    edx,edx
c0019660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019664:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019669:	f7 f1                	div    ecx
c001966b:	c1 e0 04             	shl    eax,0x4
c001966e:	09 d0                	or     eax,edx
c0019670:	31 d2                	xor    edx,edx
c0019672:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019676:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001967a:	f7 f1                	div    ecx
c001967c:	c1 e0 04             	shl    eax,0x4
c001967f:	09 d0                	or     eax,edx
c0019681:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019685:	83 e5 02             	and    ebp,0x2
c0019688:	75 1e                	jne    c00196a8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001968a:	0f b6 c3             	movzx  eax,bl
c001968d:	83 f8 0b             	cmp    eax,0xb
c0019690:	76 10                	jbe    c00196a2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c0019692:	8d 53 f4             	lea    edx,[ebx-0xc]
c0019695:	84 d2                	test   dl,dl
c0019697:	88 d3                	mov    bl,dl
c0019699:	75 02                	jne    c001969d <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001969b:	b3 0c                	mov    bl,0xc
c001969d:	83 cb 80             	or     ebx,0xffffff80
c00196a0:	eb 06                	jmp    c00196a8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00196a2:	85 c0                	test   eax,eax
c00196a4:	75 02                	jne    c00196a8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00196a6:	b3 0c                	mov    bl,0xc
c00196a8:	50                   	push   eax
c00196a9:	0f b6 db             	movzx  ebx,bl
c00196ac:	50                   	push   eax
c00196ad:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00196b2:	52                   	push   edx
c00196b3:	6a 00                	push   0x0
c00196b5:	e8 81 d7 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00196ba:	5a                   	pop    edx
c00196bb:	59                   	pop    ecx
c00196bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196c1:	50                   	push   eax
c00196c2:	6a 02                	push   0x2
c00196c4:	e8 72 d7 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00196c9:	5e                   	pop    esi
c00196ca:	5f                   	pop    edi
c00196cb:	53                   	push   ebx
c00196cc:	6a 04                	push   0x4
c00196ce:	e8 68 d7 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00196d3:	5d                   	pop    ebp
c00196d4:	58                   	pop    eax
c00196d5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00196da:	52                   	push   edx
c00196db:	6a 07                	push   0x7
c00196dd:	e8 59 d7 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00196e2:	58                   	pop    eax
c00196e3:	5a                   	pop    edx
c00196e4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00196e9:	50                   	push   eax
c00196ea:	6a 08                	push   0x8
c00196ec:	e8 4a d7 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00196f1:	59                   	pop    ecx
c00196f2:	5b                   	pop    ebx
c00196f3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00196f8:	55                   	push   ebp
c00196f9:	6a 09                	push   0x9
c00196fb:	e8 3b d7 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c0019700:	5e                   	pop    esi
c0019701:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019705:	e8 e6 fb ff ff       	call   c00192f0 <RTC::completeRTCRefresh()>
c001970a:	83 c4 3c             	add    esp,0x3c
c001970d:	b0 01                	mov    al,0x1
c001970f:	5b                   	pop    ebx
c0019710:	5e                   	pop    esi
c0019711:	5f                   	pop    edi
c0019712:	5d                   	pop    ebp
c0019713:	c3                   	ret    

c0019714 <rtcIRQHandler(regs*, void*)>:
c0019714:	53                   	push   ebx
c0019715:	83 ec 14             	sub    esp,0x14
c0019718:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001971c:	6a 0c                	push   0xc
c001971e:	e8 c4 d6 ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	a8 80                	test   al,0x80
c0019728:	74 24                	je     c001974e <rtcIRQHandler(regs*, void*)+0x3a>
c001972a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019731:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019738:	66 ff 05 94 d7 02 c0 	inc    WORD PTR ds:0xc002d794
c001973f:	75 0d                	jne    c001974e <rtcIRQHandler(regs*, void*)+0x3a>
c0019741:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019745:	83 c4 08             	add    esp,0x8
c0019748:	5b                   	pop    ebx
c0019749:	e9 a2 fb ff ff       	jmp    c00192f0 <RTC::completeRTCRefresh()>
c001974e:	83 c4 08             	add    esp,0x8
c0019751:	5b                   	pop    ebx
c0019752:	c3                   	ret    
c0019753:	90                   	nop

c0019754 <RTC::RTC()>:
c0019754:	83 ec 1c             	sub    esp,0x1c
c0019757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001975b:	83 ec 08             	sub    esp,0x8
c001975e:	68 2f 3d 02 c0       	push   0xc0023d2f
c0019763:	50                   	push   eax
c0019764:	e8 c7 f3 fe ff       	call   c0008b30 <Clock::Clock(char const*)>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	ba 4c 3d 02 c0       	mov    edx,0xc0023d4c
c0019771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019775:	89 10                	mov    DWORD PTR [eax],edx
c0019777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001977b:	83 ec 0c             	sub    esp,0xc
c001977e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019782:	6a 01                	push   0x1
c0019784:	68 14 97 01 c0       	push   0xc0019714
c0019789:	6a 08                	push   0x8
c001978b:	50                   	push   eax
c001978c:	e8 81 f8 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019791:	83 c4 20             	add    esp,0x20
c0019794:	89 c2                	mov    edx,eax
c0019796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001979a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00197a0:	fa                   	cli    
c00197a1:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00197a6:	83 c0 01             	add    eax,0x1
c00197a9:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00197ae:	83 ec 0c             	sub    esp,0xc
c00197b1:	6a 0b                	push   0xb
c00197b3:	e8 2f d6 ff ff       	call   c0016de7 <x86ReadCMOS(unsigned char)>
c00197b8:	83 c4 10             	add    esp,0x10
c00197bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00197bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00197c3:	83 c8 10             	or     eax,0x10
c00197c6:	0f b6 c0             	movzx  eax,al
c00197c9:	83 ec 08             	sub    esp,0x8
c00197cc:	50                   	push   eax
c00197cd:	6a 0b                	push   0xb
c00197cf:	e8 67 d6 ff ff       	call   c0016e3b <x86WriteCMOS(unsigned char, unsigned char)>
c00197d4:	83 c4 10             	add    esp,0x10
c00197d7:	83 ec 0c             	sub    esp,0xc
c00197da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197de:	e8 0d fb ff ff       	call   c00192f0 <RTC::completeRTCRefresh()>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00197ee:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00197f3:	85 c0                	test   eax,eax
c00197f5:	75 01                	jne    c00197f8 <RTC::RTC()+0xa4>
c00197f7:	fb                   	sti    
c00197f8:	90                   	nop
c00197f9:	83 c4 1c             	add    esp,0x1c
c00197fc:	c3                   	ret    
c00197fd:	66 90                	xchg   ax,ax
c00197ff:	90                   	nop

c0019800 <HalConsoleScroll(int, int)>:
c0019800:	83 ec 10             	sub    esp,0x10
c0019803:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001980b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019813:	90                   	nop
c0019814:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019819:	0f 8f e1 00 00 00    	jg     c0019900 <HalConsoleScroll(int, int)+0x100>
c001981f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019827:	90                   	nop
c0019828:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019830:	0f 8f be 00 00 00    	jg     c00198f4 <HalConsoleScroll(int, int)+0xf4>
c0019836:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001983a:	89 d0                	mov    eax,edx
c001983c:	c1 e0 02             	shl    eax,0x2
c001983f:	01 d0                	add    eax,edx
c0019841:	c1 e0 05             	shl    eax,0x5
c0019844:	89 c2                	mov    edx,eax
c0019846:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001984a:	01 d0                	add    eax,edx
c001984c:	89 c2                	mov    edx,eax
c001984e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019852:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019855:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019859:	89 d0                	mov    eax,edx
c001985b:	c1 e0 02             	shl    eax,0x2
c001985e:	01 d0                	add    eax,edx
c0019860:	c1 e0 05             	shl    eax,0x5
c0019863:	89 c2                	mov    edx,eax
c0019865:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019869:	01 d0                	add    eax,edx
c001986b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019875:	01 d0                	add    eax,edx
c0019877:	8a 11                	mov    dl,BYTE PTR [ecx]
c0019879:	88 10                	mov    BYTE PTR [eax],dl
c001987b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019880:	75 66                	jne    c00198e8 <HalConsoleScroll(int, int)+0xe8>
c0019882:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019886:	83 e0 01             	and    eax,0x1
c0019889:	74 39                	je     c00198c4 <HalConsoleScroll(int, int)+0xc4>
c001988b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001988f:	83 e0 0f             	and    eax,0xf
c0019892:	88 c2                	mov    dl,al
c0019894:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019898:	c1 e0 04             	shl    eax,0x4
c001989b:	09 d0                	or     eax,edx
c001989d:	88 c1                	mov    cl,al
c001989f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00198a3:	89 d0                	mov    eax,edx
c00198a5:	c1 e0 02             	shl    eax,0x2
c00198a8:	01 d0                	add    eax,edx
c00198aa:	c1 e0 05             	shl    eax,0x5
c00198ad:	89 c2                	mov    edx,eax
c00198af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198b3:	01 d0                	add    eax,edx
c00198b5:	89 c2                	mov    edx,eax
c00198b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198bb:	01 d0                	add    eax,edx
c00198bd:	88 ca                	mov    dl,cl
c00198bf:	88 10                	mov    BYTE PTR [eax],dl
c00198c1:	eb 25                	jmp    c00198e8 <HalConsoleScroll(int, int)+0xe8>
c00198c3:	90                   	nop
c00198c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00198c8:	89 d0                	mov    eax,edx
c00198ca:	c1 e0 02             	shl    eax,0x2
c00198cd:	01 d0                	add    eax,edx
c00198cf:	c1 e0 05             	shl    eax,0x5
c00198d2:	89 c2                	mov    edx,eax
c00198d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198d8:	01 d0                	add    eax,edx
c00198da:	89 c2                	mov    edx,eax
c00198dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198e0:	01 d0                	add    eax,edx
c00198e2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00198e5:	8d 76 00             	lea    esi,[esi+0x0]
c00198e8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00198ed:	e9 36 ff ff ff       	jmp    c0019828 <HalConsoleScroll(int, int)+0x28>
c00198f2:	66 90                	xchg   ax,ax
c00198f4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00198f9:	e9 16 ff ff ff       	jmp    c0019814 <HalConsoleScroll(int, int)+0x14>
c00198fe:	66 90                	xchg   ax,ax
c0019900:	90                   	nop
c0019901:	83 c4 10             	add    esp,0x10
c0019904:	c3                   	ret    
c0019905:	8d 76 00             	lea    esi,[esi+0x0]

c0019908 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019908:	83 ec 14             	sub    esp,0x14
c001990b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001990f:	88 04 24             	mov    BYTE PTR [esp],al
c0019912:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019915:	0f b6 c0             	movzx  eax,al
c0019918:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001991c:	89 d1                	mov    ecx,edx
c001991e:	83 e1 0f             	and    ecx,0xf
c0019921:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019925:	c1 e2 04             	shl    edx,0x4
c0019928:	0f b6 d2             	movzx  edx,dl
c001992b:	09 ca                	or     edx,ecx
c001992d:	c1 e2 08             	shl    edx,0x8
c0019930:	09 d0                	or     eax,edx
c0019932:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0019937:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001993f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019943:	89 d0                	mov    eax,edx
c0019945:	c1 e0 02             	shl    eax,0x2
c0019948:	01 d0                	add    eax,edx
c001994a:	c1 e0 04             	shl    eax,0x4
c001994d:	89 c2                	mov    edx,eax
c001994f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019953:	01 d0                	add    eax,edx
c0019955:	d1 e0                	shl    eax,1
c0019957:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001995b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001995f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019964:	66 89 10             	mov    WORD PTR [eax],dx
c0019967:	90                   	nop
c0019968:	83 c4 14             	add    esp,0x14
c001996b:	c3                   	ret    

c001996c <HalConsoleCursorUpdate(int, int)>:
c001996c:	83 ec 20             	sub    esp,0x20
c001996f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019973:	89 c2                	mov    edx,eax
c0019975:	c1 e2 02             	shl    edx,0x2
c0019978:	01 d0                	add    eax,edx
c001997a:	c1 e0 04             	shl    eax,0x4
c001997d:	89 c2                	mov    edx,eax
c001997f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019983:	01 d0                	add    eax,edx
c0019985:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001998a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019991:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0019996:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001999a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001999e:	ee                   	out    dx,al
c001999f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00199a4:	0f b6 c0             	movzx  eax,al
c00199a7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00199ae:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00199b2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00199b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00199ba:	ee                   	out    dx,al
c00199bb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00199c2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00199c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00199cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00199cf:	ee                   	out    dx,al
c00199d0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00199d5:	c1 e8 08             	shr    eax,0x8
c00199d8:	0f b6 c0             	movzx  eax,al
c00199db:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00199e2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00199e6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00199ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199ee:	ee                   	out    dx,al
c00199ef:	90                   	nop
c00199f0:	83 c4 20             	add    esp,0x20
c00199f3:	c3                   	ret    

c00199f4 <FAT::getName()>:
c00199f4:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c00199f9:	c3                   	ret    
c00199fa:	66 90                	xchg   ax,ax

c00199fc <FAT::tell(void*, unsigned long long*)>:
c00199fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a01:	75 09                	jne    c0019a0c <FAT::tell(void*, unsigned long long*)+0x10>
c0019a03:	b8 04 00 00 00       	mov    eax,0x4
c0019a08:	c3                   	ret    
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019a11:	75 09                	jne    c0019a1c <FAT::tell(void*, unsigned long long*)+0x20>
c0019a13:	b8 04 00 00 00       	mov    eax,0x4
c0019a18:	c3                   	ret    
c0019a19:	8d 76 00             	lea    esi,[esi+0x0]
c0019a1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a23:	ba 00 00 00 00       	mov    edx,0x0
c0019a28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a2c:	89 01                	mov    DWORD PTR [ecx],eax
c0019a2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a31:	b8 00 00 00 00       	mov    eax,0x0
c0019a36:	c3                   	ret    
c0019a37:	90                   	nop

c0019a38 <FAT::stat(void*, unsigned long long*)>:
c0019a38:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a3d:	75 09                	jne    c0019a48 <FAT::stat(void*, unsigned long long*)+0x10>
c0019a3f:	b8 04 00 00 00       	mov    eax,0x4
c0019a44:	c3                   	ret    
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019a4d:	75 09                	jne    c0019a58 <FAT::stat(void*, unsigned long long*)+0x20>
c0019a4f:	b8 04 00 00 00       	mov    eax,0x4
c0019a54:	c3                   	ret    
c0019a55:	8d 76 00             	lea    esi,[esi+0x0]
c0019a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019a5f:	ba 00 00 00 00       	mov    edx,0x0
c0019a64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a68:	89 01                	mov    DWORD PTR [ecx],eax
c0019a6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a6d:	b8 00 00 00 00       	mov    eax,0x0
c0019a72:	c3                   	ret    
c0019a73:	90                   	nop

c0019a74 <FAT::~FAT()>:
c0019a74:	83 ec 0c             	sub    esp,0xc
c0019a77:	ba cc 3d 02 c0       	mov    edx,0xc0023dcc
c0019a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a80:	89 10                	mov    DWORD PTR [eax],edx
c0019a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a86:	83 ec 0c             	sub    esp,0xc
c0019a89:	50                   	push   eax
c0019a8a:	e8 eb e2 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	90                   	nop
c0019a93:	83 c4 0c             	add    esp,0xc
c0019a96:	c3                   	ret    
c0019a97:	90                   	nop

c0019a98 <FAT::~FAT()>:
c0019a98:	83 ec 0c             	sub    esp,0xc
c0019a9b:	83 ec 0c             	sub    esp,0xc
c0019a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019aa2:	e8 cd ff ff ff       	call   c0019a74 <FAT::~FAT()>
c0019aa7:	83 c4 10             	add    esp,0x10
c0019aaa:	83 ec 08             	sub    esp,0x8
c0019aad:	6a 08                	push   0x8
c0019aaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ab3:	e8 f3 2b ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	83 c4 0c             	add    esp,0xc
c0019abe:	c3                   	ret    
c0019abf:	90                   	nop

c0019ac0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019ac0:	83 ec 1c             	sub    esp,0x1c
c0019ac3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019aca:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019acf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ad3:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019ada:	83 f8 ff             	cmp    eax,0xffffffff
c0019add:	75 35                	jne    c0019b14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019adf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019ae3:	88 c2                	mov    dl,al
c0019ae5:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019aea:	01 d0                	add    eax,edx
c0019aec:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019af0:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019af6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019afa:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019b01:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019b06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019b0a:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019b11:	eb 19                	jmp    c0019b2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019b13:	90                   	nop
c0019b14:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019b18:	88 c2                	mov    dl,al
c0019b1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b1e:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019b25:	01 d0                	add    eax,edx
c0019b27:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019b2b:	90                   	nop
c0019b2c:	83 ec 04             	sub    esp,0x4
c0019b2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019b33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019b37:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019b3b:	50                   	push   eax
c0019b3c:	e8 93 b6 fe ff       	call   c00051d4 <f_getlabel>
c0019b41:	83 c4 10             	add    esp,0x10
c0019b44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b48:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019b4d:	75 09                	jne    c0019b58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019b4f:	b8 00 00 00 00       	mov    eax,0x0
c0019b54:	eb 0a                	jmp    c0019b60 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019b56:	66 90                	xchg   ax,ax
c0019b58:	b8 01 00 00 00       	mov    eax,0x1
c0019b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b60:	83 c4 1c             	add    esp,0x1c
c0019b63:	c3                   	ret    

c0019b64 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019b64:	53                   	push   ebx
c0019b65:	83 ec 58             	sub    esp,0x58
c0019b68:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019b70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019b74:	b9 00 00 00 00       	mov    ecx,0x0
c0019b79:	b8 3c 00 00 00       	mov    eax,0x3c
c0019b7e:	83 e0 f8             	and    eax,0xfffffff8
c0019b81:	89 c3                	mov    ebx,eax
c0019b83:	b8 00 00 00 00       	mov    eax,0x0
c0019b88:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019b8c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019b90:	83 c0 08             	add    eax,0x8
c0019b93:	39 d8                	cmp    eax,ebx
c0019b95:	72 f1                	jb     c0019b88 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0019b97:	01 c2                	add    edx,eax
c0019b99:	89 0a                	mov    DWORD PTR [edx],ecx
c0019b9b:	83 c2 04             	add    edx,0x4
c0019b9e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ba2:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019ba9:	83 f8 ff             	cmp    eax,0xffffffff
c0019bac:	75 36                	jne    c0019be4 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019bae:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019bb2:	88 c2                	mov    dl,al
c0019bb4:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019bb9:	01 d0                	add    eax,edx
c0019bbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bbf:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019bc5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019bc9:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019bd0:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019bd5:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019bd9:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019be0:	eb 1a                	jmp    c0019bfc <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019be2:	66 90                	xchg   ax,ax
c0019be4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019be8:	88 c2                	mov    dl,al
c0019bea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019bee:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019bf5:	01 d0                	add    eax,edx
c0019bf7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bfb:	90                   	nop
c0019bfc:	83 ec 08             	sub    esp,0x8
c0019bff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019c03:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c07:	50                   	push   eax
c0019c08:	e8 63 6c fe ff       	call   c0000870 <strcat>
c0019c0d:	83 c4 10             	add    esp,0x10
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c17:	50                   	push   eax
c0019c18:	e8 0b b7 fe ff       	call   c0005328 <f_setlabel>
c0019c1d:	83 c4 10             	add    esp,0x10
c0019c20:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019c24:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019c29:	75 09                	jne    c0019c34 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0019c2b:	b8 00 00 00 00       	mov    eax,0x0
c0019c30:	eb 0a                	jmp    c0019c3c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019c32:	66 90                	xchg   ax,ax
c0019c34:	b8 01 00 00 00       	mov    eax,0x1
c0019c39:	8d 76 00             	lea    esi,[esi+0x0]
c0019c3c:	83 c4 58             	add    esp,0x58
c0019c3f:	5b                   	pop    ebx
c0019c40:	c3                   	ret    
c0019c41:	90                   	nop
c0019c42:	66 90                	xchg   ax,ax

c0019c44 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019c44:	83 ec 2c             	sub    esp,0x2c
c0019c47:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019c4f:	83 ec 08             	sub    esp,0x8
c0019c52:	68 a4 3d 02 c0       	push   0xc0023da4
c0019c57:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c5b:	e8 20 6b fe ff       	call   c0000780 <strcmp>
c0019c60:	83 c4 10             	add    esp,0x10
c0019c63:	85 c0                	test   eax,eax
c0019c65:	0f 94 c0             	sete   al
c0019c68:	0f b6 c0             	movzx  eax,al
c0019c6b:	85 c0                	test   eax,eax
c0019c6d:	74 0d                	je     c0019c7c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019c6f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019c77:	e9 c0 00 00 00       	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019c7c:	83 ec 08             	sub    esp,0x8
c0019c7f:	68 96 3d 02 c0       	push   0xc0023d96
c0019c84:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c88:	e8 f3 6a fe ff       	call   c0000780 <strcmp>
c0019c8d:	83 c4 10             	add    esp,0x10
c0019c90:	85 c0                	test   eax,eax
c0019c92:	0f 94 c0             	sete   al
c0019c95:	0f b6 c0             	movzx  eax,al
c0019c98:	85 c0                	test   eax,eax
c0019c9a:	74 10                	je     c0019cac <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019c9c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019ca4:	e9 93 00 00 00       	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cac:	83 ec 08             	sub    esp,0x8
c0019caf:	68 9c 3d 02 c0       	push   0xc0023d9c
c0019cb4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019cb8:	e8 c3 6a fe ff       	call   c0000780 <strcmp>
c0019cbd:	83 c4 10             	add    esp,0x10
c0019cc0:	85 c0                	test   eax,eax
c0019cc2:	0f 94 c0             	sete   al
c0019cc5:	0f b6 c0             	movzx  eax,al
c0019cc8:	85 c0                	test   eax,eax
c0019cca:	74 0c                	je     c0019cd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019ccc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019cd4:	eb 66                	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019cd6:	66 90                	xchg   ax,ax
c0019cd8:	83 ec 08             	sub    esp,0x8
c0019cdb:	68 bc 0e 02 c0       	push   0xc0020ebc
c0019ce0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019ce4:	e8 97 6a fe ff       	call   c0000780 <strcmp>
c0019ce9:	83 c4 10             	add    esp,0x10
c0019cec:	85 c0                	test   eax,eax
c0019cee:	0f 94 c0             	sete   al
c0019cf1:	0f b6 c0             	movzx  eax,al
c0019cf4:	85 c0                	test   eax,eax
c0019cf6:	74 0c                	je     c0019d04 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019cf8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019d00:	eb 3a                	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019d02:	66 90                	xchg   ax,ax
c0019d04:	83 ec 08             	sub    esp,0x8
c0019d07:	68 a2 3d 02 c0       	push   0xc0023da2
c0019d0c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d10:	e8 6b 6a fe ff       	call   c0000780 <strcmp>
c0019d15:	83 c4 10             	add    esp,0x10
c0019d18:	85 c0                	test   eax,eax
c0019d1a:	0f 94 c0             	sete   al
c0019d1d:	0f b6 c0             	movzx  eax,al
c0019d20:	85 c0                	test   eax,eax
c0019d22:	74 0c                	je     c0019d30 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019d24:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019d2c:	eb 0e                	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019d2e:	66 90                	xchg   ax,ax
c0019d30:	b8 08 00 00 00       	mov    eax,0x8
c0019d35:	e9 ea 00 00 00       	jmp    c0019e24 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019d3a:	66 90                	xchg   ax,ax
c0019d3c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019d43:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019d48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d4c:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019d53:	83 f8 ff             	cmp    eax,0xffffffff
c0019d56:	75 34                	jne    c0019d8c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019d58:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d5c:	88 c2                	mov    dl,al
c0019d5e:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019d63:	01 d0                	add    eax,edx
c0019d65:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019d69:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019d6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d73:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019d7a:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019d7f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019d83:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019d8a:	eb 18                	jmp    c0019da4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019d8c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d90:	88 c2                	mov    dl,al
c0019d92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d96:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019d9d:	01 d0                	add    eax,edx
c0019d9f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019da3:	90                   	nop
c0019da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019da8:	88 04 24             	mov    BYTE PTR [esp],al
c0019dab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019daf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019db3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019dbb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019dc0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019dc8:	83 ec 0c             	sub    esp,0xc
c0019dcb:	68 00 20 00 00       	push   0x2000
c0019dd0:	e8 cb 4b ff ff       	call   c000e9a0 <malloc>
c0019dd5:	83 c4 10             	add    esp,0x10
c0019dd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ddc:	68 00 20 00 00       	push   0x2000
c0019de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019de5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019de9:	50                   	push   eax
c0019dea:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019dee:	50                   	push   eax
c0019def:	e8 31 b8 fe ff       	call   c0005625 <f_mkfs>
c0019df4:	83 c4 10             	add    esp,0x10
c0019df7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dfb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e00:	75 0a                	jne    c0019e0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019e02:	b8 00 00 00 00       	mov    eax,0x0
c0019e07:	eb 1b                	jmp    c0019e24 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019e11:	75 09                	jne    c0019e1c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019e13:	b8 09 00 00 00       	mov    eax,0x9
c0019e18:	eb 0a                	jmp    c0019e24 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019e1a:	66 90                	xchg   ax,ax
c0019e1c:	b8 01 00 00 00       	mov    eax,0x1
c0019e21:	8d 76 00             	lea    esi,[esi+0x0]
c0019e24:	83 c4 2c             	add    esp,0x2c
c0019e27:	c3                   	ret    

c0019e28 <FAT::tryMount(LogicalDisk*, int)>:
c0019e28:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019e2e:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e33:	83 f8 14             	cmp    eax,0x14
c0019e36:	75 18                	jne    c0019e50 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019e38:	83 ec 0c             	sub    esp,0xc
c0019e3b:	68 a8 3d 02 c0       	push   0xc0023da8
c0019e40:	e8 a1 4e ff ff       	call   c000ece6 <KePanic(char const*)>
c0019e45:	83 c4 10             	add    esp,0x10
c0019e48:	b0 00                	mov    al,0x0
c0019e4a:	e9 ed 01 00 00       	jmp    c001a03c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019e4f:	90                   	nop
c0019e50:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019e57:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019e5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019e63:	3d 00 02 00 00       	cmp    eax,0x200
c0019e68:	74 0a                	je     c0019e74 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019e6a:	b0 00                	mov    al,0x0
c0019e6c:	e9 cb 01 00 00       	jmp    c001a03c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019e71:	8d 76 00             	lea    esi,[esi+0x0]
c0019e74:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019e7c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019e83:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019e8a:	83 f8 ff             	cmp    eax,0xffffffff
c0019e8d:	74 09                	je     c0019e98 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019e8f:	b0 01                	mov    al,0x1
c0019e91:	e9 a6 01 00 00       	jmp    c001a03c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019e96:	66 90                	xchg   ax,ax
c0019e98:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019ea2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019eaa:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019eb1:	88 c2                	mov    dl,al
c0019eb3:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019eb8:	01 d0                	add    eax,edx
c0019eba:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019ec1:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019ec7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019ece:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019ed5:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019eda:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019ee1:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019ee8:	83 ec 0c             	sub    esp,0xc
c0019eeb:	68 34 02 00 00       	push   0x234
c0019ef0:	e8 ab 4a ff ff       	call   c000e9a0 <malloc>
c0019ef5:	83 c4 10             	add    esp,0x10
c0019ef8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019eff:	83 ec 04             	sub    esp,0x4
c0019f02:	6a 00                	push   0x0
c0019f04:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019f0b:	50                   	push   eax
c0019f0c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019f13:	e8 07 9f fe ff       	call   c0003e1f <f_mount>
c0019f18:	83 c4 10             	add    esp,0x10
c0019f1b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019f22:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019f2a:	74 1c                	je     c0019f48 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019f2c:	83 ec 0c             	sub    esp,0xc
c0019f2f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019f36:	e8 85 4a ff ff       	call   c000e9c0 <rfree>
c0019f3b:	83 c4 10             	add    esp,0x10
c0019f3e:	b0 00                	mov    al,0x0
c0019f40:	e9 f7 00 00 00       	jmp    c001a03c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019f45:	8d 76 00             	lea    esi,[esi+0x0]
c0019f48:	83 ec 04             	sub    esp,0x4
c0019f4b:	68 00 01 00 00       	push   0x100
c0019f50:	6a 00                	push   0x0
c0019f52:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019f59:	50                   	push   eax
c0019f5a:	e8 91 65 fe ff       	call   c00004f0 <memset>
c0019f5f:	83 c4 10             	add    esp,0x10
c0019f62:	83 ec 08             	sub    esp,0x8
c0019f65:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019f6c:	50                   	push   eax
c0019f6d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019f74:	50                   	push   eax
c0019f75:	e8 f6 68 fe ff       	call   c0000870 <strcat>
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	83 ec 08             	sub    esp,0x8
c0019f80:	68 b6 3d 02 c0       	push   0xc0023db6
c0019f85:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019f8c:	50                   	push   eax
c0019f8d:	e8 de 68 fe ff       	call   c0000870 <strcat>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	83 ec 04             	sub    esp,0x4
c0019f98:	6a 01                	push   0x1
c0019f9a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019fa1:	50                   	push   eax
c0019fa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fa6:	50                   	push   eax
c0019fa7:	e8 d5 9e fe ff       	call   c0003e81 <f_open>
c0019fac:	83 c4 10             	add    esp,0x10
c0019faf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019fb6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019fbd:	85 c0                	test   eax,eax
c0019fbf:	74 0b                	je     c0019fcc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019fc1:	78 31                	js     c0019ff4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019fc3:	83 e8 04             	sub    eax,0x4
c0019fc6:	83 f8 01             	cmp    eax,0x1
c0019fc9:	77 29                	ja     c0019ff4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019fcb:	90                   	nop
c0019fcc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019fd4:	83 ec 0c             	sub    esp,0xc
c0019fd7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fdb:	50                   	push   eax
c0019fdc:	e8 50 a6 fe ff       	call   c0004631 <f_close>
c0019fe1:	83 c4 10             	add    esp,0x10
c0019fe4:	90                   	nop
c0019fe5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019fed:	85 c0                	test   eax,eax
c0019fef:	74 43                	je     c001a034 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019ff1:	eb 31                	jmp    c001a024 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019ff3:	90                   	nop
c0019ff4:	83 ec 0c             	sub    esp,0xc
c0019ff7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019ffe:	e8 bd 49 ff ff       	call   c000e9c0 <rfree>
c001a003:	83 c4 10             	add    esp,0x10
c001a006:	83 ec 04             	sub    esp,0x4
c001a009:	6a 00                	push   0x0
c001a00b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a012:	50                   	push   eax
c001a013:	6a 00                	push   0x0
c001a015:	e8 05 9e fe ff       	call   c0003e1f <f_mount>
c001a01a:	83 c4 10             	add    esp,0x10
c001a01d:	b0 00                	mov    al,0x0
c001a01f:	eb 1b                	jmp    c001a03c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a021:	8d 76 00             	lea    esi,[esi+0x0]
c001a024:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a029:	83 c0 01             	add    eax,0x1
c001a02c:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c001a031:	8d 76 00             	lea    esi,[esi+0x0]
c001a034:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001a03b:	90                   	nop
c001a03c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001a042:	c3                   	ret    
c001a043:	90                   	nop

c001a044 <FAT::allocateSwapfile(char const*, int)>:
c001a044:	55                   	push   ebp
c001a045:	57                   	push   edi
c001a046:	56                   	push   esi
c001a047:	53                   	push   ebx
c001a048:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a04e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a059:	83 ec 0c             	sub    esp,0xc
c001a05c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a063:	e8 38 49 ff ff       	call   c000e9a0 <malloc>
c001a068:	83 c4 10             	add    esp,0x10
c001a06b:	89 c7                	mov    edi,eax
c001a06d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001a072:	83 ec 04             	sub    esp,0x4
c001a075:	50                   	push   eax
c001a076:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a07d:	57                   	push   edi
c001a07e:	e8 a9 e0 fe ff       	call   c000812c <File::File(char const*, Process*)>
c001a083:	83 c4 10             	add    esp,0x10
c001a086:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a08d:	83 ec 04             	sub    esp,0x4
c001a090:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a094:	50                   	push   eax
c001a095:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a099:	50                   	push   eax
c001a09a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a0a1:	e8 a6 e3 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001a0a6:	83 c4 10             	add    esp,0x10
c001a0a9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a0b0:	c1 e0 14             	shl    eax,0x14
c001a0b3:	89 c7                	mov    edi,eax
c001a0b5:	89 c5                	mov    ebp,eax
c001a0b7:	c1 fd 1f             	sar    ebp,0x1f
c001a0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0c2:	89 f9                	mov    ecx,edi
c001a0c4:	31 c1                	xor    ecx,eax
c001a0c6:	89 cb                	mov    ebx,ecx
c001a0c8:	89 e9                	mov    ecx,ebp
c001a0ca:	31 d1                	xor    ecx,edx
c001a0cc:	89 ce                	mov    esi,ecx
c001a0ce:	89 f0                	mov    eax,esi
c001a0d0:	09 d8                	or     eax,ebx
c001a0d2:	0f 84 9c 00 00 00    	je     c001a174 <FAT::allocateSwapfile(char const*, int)+0x130>
c001a0d8:	83 ec 0c             	sub    esp,0xc
c001a0db:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a0e2:	e8 31 e2 fe ff       	call   c0008318 <File::unlink()>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	83 ec 08             	sub    esp,0x8
c001a0ed:	6a 12                	push   0x12
c001a0ef:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a0f6:	e8 4f e0 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001a0fb:	83 c4 10             	add    esp,0x10
c001a0fe:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a105:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a10b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a112:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a119:	c1 e0 14             	shl    eax,0x14
c001a11c:	83 ec 04             	sub    esp,0x4
c001a11f:	6a 01                	push   0x1
c001a121:	50                   	push   eax
c001a122:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a129:	e8 8a b3 fe ff       	call   c00054b8 <f_expand>
c001a12e:	83 c4 10             	add    esp,0x10
c001a131:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a138:	8b 00                	mov    eax,DWORD PTR [eax]
c001a13a:	83 c0 10             	add    eax,0x10
c001a13d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a13f:	83 ec 0c             	sub    esp,0xc
c001a142:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a146:	52                   	push   edx
c001a147:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a14b:	52                   	push   edx
c001a14c:	6a 00                	push   0x0
c001a14e:	68 00 04 00 00       	push   0x400
c001a153:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a15a:	ff d0                	call   eax
c001a15c:	83 c4 20             	add    esp,0x20
c001a15f:	83 ec 0c             	sub    esp,0xc
c001a162:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a169:	e8 3a e0 fe ff       	call   c00081a8 <File::close()>
c001a16e:	83 c4 10             	add    esp,0x10
c001a171:	8d 76 00             	lea    esi,[esi+0x0]
c001a174:	83 ec 08             	sub    esp,0x8
c001a177:	6a 01                	push   0x1
c001a179:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a180:	e8 c5 df fe ff       	call   c000814a <File::open(FileOpenMode)>
c001a185:	83 c4 10             	add    esp,0x10
c001a188:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a18f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a191:	83 c0 0c             	add    eax,0xc
c001a194:	8b 00                	mov    eax,DWORD PTR [eax]
c001a196:	83 ec 0c             	sub    esp,0xc
c001a199:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a19d:	52                   	push   edx
c001a19e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001a1a2:	52                   	push   edx
c001a1a3:	6a 00                	push   0x0
c001a1a5:	6a 04                	push   0x4
c001a1a7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a1ae:	ff d0                	call   eax
c001a1b0:	83 c4 20             	add    esp,0x20
c001a1b3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a1ba:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a1c0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a1c7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a1ce:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a1d1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001a1d8:	83 ec 0c             	sub    esp,0xc
c001a1db:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a1e2:	e8 c1 df fe ff       	call   c00081a8 <File::close()>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001a1f1:	ba 00 00 00 00       	mov    edx,0x0
c001a1f6:	81 c4 3c 04 00 00    	add    esp,0x43c
c001a1fc:	5b                   	pop    ebx
c001a1fd:	5e                   	pop    esi
c001a1fe:	5f                   	pop    edi
c001a1ff:	5d                   	pop    ebp
c001a200:	c3                   	ret    
c001a201:	90                   	nop
c001a202:	66 90                	xchg   ax,ax

c001a204 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a204:	57                   	push   edi
c001a205:	56                   	push   esi
c001a206:	53                   	push   ebx
c001a207:	81 ec 50 02 00 00    	sub    esp,0x250
c001a20d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001a215:	74 0d                	je     c001a224 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001a217:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001a21f:	75 0f                	jne    c001a230 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001a221:	8d 76 00             	lea    esi,[esi+0x0]
c001a224:	b8 04 00 00 00       	mov    eax,0x4
c001a229:	e9 3a 01 00 00       	jmp    c001a368 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a22e:	66 90                	xchg   ax,ax
c001a230:	83 ec 08             	sub    esp,0x8
c001a233:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a23a:	50                   	push   eax
c001a23b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001a242:	e8 b6 a6 fe ff       	call   c00048fd <f_readdir>
c001a247:	83 c4 10             	add    esp,0x10
c001a24a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001a251:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001a258:	83 ec 0c             	sub    esp,0xc
c001a25b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a262:	83 c0 16             	add    eax,0x16
c001a265:	50                   	push   eax
c001a266:	e8 15 63 fe ff       	call   c0000580 <strlen>
c001a26b:	83 c4 10             	add    esp,0x10
c001a26e:	ba 00 00 00 00       	mov    edx,0x0
c001a273:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a277:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a27b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001a282:	0f b6 c0             	movzx  eax,al
c001a285:	83 e0 10             	and    eax,0x10
c001a288:	74 0a                	je     c001a294 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001a28a:	b8 02 00 00 00       	mov    eax,0x2
c001a28f:	eb 0b                	jmp    c001a29c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001a291:	8d 76 00             	lea    esi,[esi+0x0]
c001a294:	b8 01 00 00 00       	mov    eax,0x1
c001a299:	8d 76 00             	lea    esi,[esi+0x0]
c001a29c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2a0:	83 ec 08             	sub    esp,0x8
c001a2a3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a2aa:	83 c0 16             	add    eax,0x16
c001a2ad:	50                   	push   eax
c001a2ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2b2:	83 c0 10             	add    eax,0x10
c001a2b5:	50                   	push   eax
c001a2b6:	e8 95 63 fe ff       	call   c0000650 <strcpy>
c001a2bb:	83 c4 10             	add    esp,0x10
c001a2be:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001a2c5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001a2cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2d0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001a2d7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001a2de:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001a2e5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001a2ec:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001a2f3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001a2fa:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001a301:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001a308:	89 c6                	mov    esi,eax
c001a30a:	89 d7                	mov    edi,edx
c001a30c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a30e:	89 c8                	mov    eax,ecx
c001a310:	89 fa                	mov    edx,edi
c001a312:	89 f3                	mov    ebx,esi
c001a314:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001a31b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001a322:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a329:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a330:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a336:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a33d:	0f be c0             	movsx  eax,al
c001a340:	85 c0                	test   eax,eax
c001a342:	75 08                	jne    c001a34c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a344:	b8 07 00 00 00       	mov    eax,0x7
c001a349:	eb 1d                	jmp    c001a368 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a34b:	90                   	nop
c001a34c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a353:	85 c0                	test   eax,eax
c001a355:	75 09                	jne    c001a360 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a357:	b8 00 00 00 00       	mov    eax,0x0
c001a35c:	eb 0a                	jmp    c001a368 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a35e:	66 90                	xchg   ax,ax
c001a360:	b8 01 00 00 00       	mov    eax,0x1
c001a365:	8d 76 00             	lea    esi,[esi+0x0]
c001a368:	81 c4 50 02 00 00    	add    esp,0x250
c001a36e:	5b                   	pop    ebx
c001a36f:	5e                   	pop    esi
c001a370:	5f                   	pop    edi
c001a371:	c3                   	ret    
c001a372:	66 90                	xchg   ax,ax

c001a374 <FAT::read(void*, unsigned long, void*, int*)>:
c001a374:	83 ec 1c             	sub    esp,0x1c
c001a377:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a37c:	74 0a                	je     c001a388 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a37e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a383:	75 0b                	jne    c001a390 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a385:	8d 76 00             	lea    esi,[esi+0x0]
c001a388:	b8 04 00 00 00       	mov    eax,0x4
c001a38d:	eb 41                	jmp    c001a3d0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a38f:	90                   	nop
c001a390:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a394:	50                   	push   eax
c001a395:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a399:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a39d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a3a1:	e8 9e 9d fe ff       	call   c0004144 <f_read>
c001a3a6:	83 c4 10             	add    esp,0x10
c001a3a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3b1:	89 c2                	mov    edx,eax
c001a3b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3b7:	89 10                	mov    DWORD PTR [eax],edx
c001a3b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3bd:	85 c0                	test   eax,eax
c001a3bf:	75 07                	jne    c001a3c8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a3c1:	b8 00 00 00 00       	mov    eax,0x0
c001a3c6:	eb 08                	jmp    c001a3d0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a3c8:	b8 01 00 00 00       	mov    eax,0x1
c001a3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d0:	83 c4 1c             	add    esp,0x1c
c001a3d3:	c3                   	ret    

c001a3d4 <FAT::write(void*, unsigned long, void*, int*)>:
c001a3d4:	83 ec 1c             	sub    esp,0x1c
c001a3d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a3dc:	74 0a                	je     c001a3e8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a3de:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a3e3:	75 0b                	jne    c001a3f0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	b8 04 00 00 00       	mov    eax,0x4
c001a3ed:	eb 41                	jmp    c001a430 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a3ef:	90                   	nop
c001a3f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a3f4:	50                   	push   eax
c001a3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a3fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a401:	e8 1f 9f fe ff       	call   c0004325 <f_write>
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a40d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a411:	89 c2                	mov    edx,eax
c001a413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a417:	89 10                	mov    DWORD PTR [eax],edx
c001a419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a41d:	85 c0                	test   eax,eax
c001a41f:	75 07                	jne    c001a428 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a421:	b8 00 00 00 00       	mov    eax,0x0
c001a426:	eb 08                	jmp    c001a430 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a428:	b8 01 00 00 00       	mov    eax,0x1
c001a42d:	8d 76 00             	lea    esi,[esi+0x0]
c001a430:	83 c4 1c             	add    esp,0x1c
c001a433:	c3                   	ret    

c001a434 <FAT::close(void*)>:
c001a434:	83 ec 1c             	sub    esp,0x1c
c001a437:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a43c:	75 0a                	jne    c001a448 <FAT::close(void*)+0x14>
c001a43e:	b8 04 00 00 00       	mov    eax,0x4
c001a443:	eb 3f                	jmp    c001a484 <FAT::close(void*)+0x50>
c001a445:	8d 76 00             	lea    esi,[esi+0x0]
c001a448:	83 ec 0c             	sub    esp,0xc
c001a44b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a44f:	e8 dd a1 fe ff       	call   c0004631 <f_close>
c001a454:	83 c4 10             	add    esp,0x10
c001a457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a45b:	83 ec 0c             	sub    esp,0xc
c001a45e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a462:	e8 49 45 ff ff       	call   c000e9b0 <free>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a46e:	85 c0                	test   eax,eax
c001a470:	75 0a                	jne    c001a47c <FAT::close(void*)+0x48>
c001a472:	b8 00 00 00 00       	mov    eax,0x0
c001a477:	eb 0b                	jmp    c001a484 <FAT::close(void*)+0x50>
c001a479:	8d 76 00             	lea    esi,[esi+0x0]
c001a47c:	b8 01 00 00 00       	mov    eax,0x1
c001a481:	8d 76 00             	lea    esi,[esi+0x0]
c001a484:	83 c4 1c             	add    esp,0x1c
c001a487:	c3                   	ret    

c001a488 <FAT::closeDir(void*)>:
c001a488:	83 ec 1c             	sub    esp,0x1c
c001a48b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a490:	75 0a                	jne    c001a49c <FAT::closeDir(void*)+0x14>
c001a492:	b8 04 00 00 00       	mov    eax,0x4
c001a497:	eb 3f                	jmp    c001a4d8 <FAT::closeDir(void*)+0x50>
c001a499:	8d 76 00             	lea    esi,[esi+0x0]
c001a49c:	83 ec 0c             	sub    esp,0xc
c001a49f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4a3:	e8 33 a4 fe ff       	call   c00048db <f_closedir>
c001a4a8:	83 c4 10             	add    esp,0x10
c001a4ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4af:	83 ec 0c             	sub    esp,0xc
c001a4b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4b6:	e8 f5 44 ff ff       	call   c000e9b0 <free>
c001a4bb:	83 c4 10             	add    esp,0x10
c001a4be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4c2:	85 c0                	test   eax,eax
c001a4c4:	75 0a                	jne    c001a4d0 <FAT::closeDir(void*)+0x48>
c001a4c6:	b8 00 00 00 00       	mov    eax,0x0
c001a4cb:	eb 0b                	jmp    c001a4d8 <FAT::closeDir(void*)+0x50>
c001a4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d0:	b8 01 00 00 00       	mov    eax,0x1
c001a4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d8:	83 c4 1c             	add    esp,0x1c
c001a4db:	c3                   	ret    

c001a4dc <FAT::truncate(void*, unsigned long long)>:
c001a4dc:	83 ec 2c             	sub    esp,0x2c
c001a4df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4ef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a4f4:	75 0a                	jne    c001a500 <FAT::truncate(void*, unsigned long long)+0x24>
c001a4f6:	b8 04 00 00 00       	mov    eax,0x4
c001a4fb:	eb 47                	jmp    c001a544 <FAT::truncate(void*, unsigned long long)+0x68>
c001a4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a500:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a504:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a507:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a50b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a513:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a517:	83 ec 08             	sub    esp,0x8
c001a51a:	50                   	push   eax
c001a51b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a51f:	e8 3c a1 fe ff       	call   c0004660 <f_lseek>
c001a524:	83 c4 10             	add    esp,0x10
c001a527:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a52b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a52f:	85 c0                	test   eax,eax
c001a531:	75 09                	jne    c001a53c <FAT::truncate(void*, unsigned long long)+0x60>
c001a533:	b8 00 00 00 00       	mov    eax,0x0
c001a538:	eb 0a                	jmp    c001a544 <FAT::truncate(void*, unsigned long long)+0x68>
c001a53a:	66 90                	xchg   ax,ax
c001a53c:	b8 01 00 00 00       	mov    eax,0x1
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	83 c4 2c             	add    esp,0x2c
c001a547:	c3                   	ret    

c001a548 <FAT::seek(void*, unsigned long long)>:
c001a548:	83 ec 2c             	sub    esp,0x2c
c001a54b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a553:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a557:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a55b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a560:	75 0a                	jne    c001a56c <FAT::seek(void*, unsigned long long)+0x24>
c001a562:	b8 04 00 00 00       	mov    eax,0x4
c001a567:	eb 33                	jmp    c001a59c <FAT::seek(void*, unsigned long long)+0x54>
c001a569:	8d 76 00             	lea    esi,[esi+0x0]
c001a56c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a570:	83 ec 08             	sub    esp,0x8
c001a573:	50                   	push   eax
c001a574:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a578:	e8 e3 a0 fe ff       	call   c0004660 <f_lseek>
c001a57d:	83 c4 10             	add    esp,0x10
c001a580:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a584:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a588:	85 c0                	test   eax,eax
c001a58a:	75 08                	jne    c001a594 <FAT::seek(void*, unsigned long long)+0x4c>
c001a58c:	b8 00 00 00 00       	mov    eax,0x0
c001a591:	eb 09                	jmp    c001a59c <FAT::seek(void*, unsigned long long)+0x54>
c001a593:	90                   	nop
c001a594:	b8 01 00 00 00       	mov    eax,0x1
c001a599:	8d 76 00             	lea    esi,[esi+0x0]
c001a59c:	83 c4 2c             	add    esp,0x2c
c001a59f:	c3                   	ret    

c001a5a0 <fatWrapperReadDisk>:
c001a5a0:	53                   	push   ebx
c001a5a1:	83 ec 18             	sub    esp,0x18
c001a5a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5b1:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a5b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a5bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5c0:	ba 00 00 00 00       	mov    edx,0x0
c001a5c5:	83 ec 0c             	sub    esp,0xc
c001a5c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5cc:	53                   	push   ebx
c001a5cd:	52                   	push   edx
c001a5ce:	50                   	push   eax
c001a5cf:	51                   	push   ecx
c001a5d0:	e8 e7 fa fe ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c001a5d5:	83 c4 20             	add    esp,0x20
c001a5d8:	83 c4 18             	add    esp,0x18
c001a5db:	5b                   	pop    ebx
c001a5dc:	c3                   	ret    
c001a5dd:	8d 76 00             	lea    esi,[esi+0x0]

c001a5e0 <fatWrapperWriteDisk>:
c001a5e0:	53                   	push   ebx
c001a5e1:	83 ec 18             	sub    esp,0x18
c001a5e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5f1:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a5f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a5fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a600:	ba 00 00 00 00       	mov    edx,0x0
c001a605:	83 ec 0c             	sub    esp,0xc
c001a608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a60c:	53                   	push   ebx
c001a60d:	52                   	push   edx
c001a60e:	50                   	push   eax
c001a60f:	51                   	push   ecx
c001a610:	e8 13 fb fe ff       	call   c000a128 <LogicalDisk::write(unsigned long long, int, void*)>
c001a615:	83 c4 20             	add    esp,0x20
c001a618:	83 c4 18             	add    esp,0x18
c001a61b:	5b                   	pop    ebx
c001a61c:	c3                   	ret    
c001a61d:	8d 76 00             	lea    esi,[esi+0x0]

c001a620 <fatWrapperIoctl>:
c001a620:	53                   	push   ebx
c001a621:	83 ec 28             	sub    esp,0x28
c001a624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a628:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a62c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a630:	88 d0                	mov    al,dl
c001a632:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a636:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a63b:	83 f8 02             	cmp    eax,0x2
c001a63e:	75 34                	jne    c001a674 <fatWrapperIoctl+0x54>
c001a640:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a644:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a648:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a64d:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a654:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a65a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a660:	89 c2                	mov    edx,eax
c001a662:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a666:	66 89 10             	mov    WORD PTR [eax],dx
c001a669:	b8 00 00 00 00       	mov    eax,0x0
c001a66e:	e9 c5 00 00 00       	jmp    c001a738 <fatWrapperIoctl+0x118>
c001a673:	90                   	nop
c001a674:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a679:	83 f8 01             	cmp    eax,0x1
c001a67c:	75 6a                	jne    c001a6e8 <fatWrapperIoctl+0xc8>
c001a67e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a686:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a68b:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a692:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a698:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a69e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a6a4:	89 c8                	mov    eax,ecx
c001a6a6:	89 da                	mov    edx,ebx
c001a6a8:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a6ac:	c1 e0 0a             	shl    eax,0xa
c001a6af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a6b4:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001a6bb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a6c1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a6c7:	89 cb                	mov    ebx,ecx
c001a6c9:	c1 fb 1f             	sar    ebx,0x1f
c001a6cc:	53                   	push   ebx
c001a6cd:	51                   	push   ecx
c001a6ce:	52                   	push   edx
c001a6cf:	50                   	push   eax
c001a6d0:	e8 ef 59 00 00       	call   c00200c4 <__udivdi3>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	89 c2                	mov    edx,eax
c001a6da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6de:	89 10                	mov    DWORD PTR [eax],edx
c001a6e0:	b8 00 00 00 00       	mov    eax,0x0
c001a6e5:	eb 51                	jmp    c001a738 <fatWrapperIoctl+0x118>
c001a6e7:	90                   	nop
c001a6e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a6ed:	85 c0                	test   eax,eax
c001a6ef:	75 07                	jne    c001a6f8 <fatWrapperIoctl+0xd8>
c001a6f1:	b8 00 00 00 00       	mov    eax,0x0
c001a6f6:	eb 40                	jmp    c001a738 <fatWrapperIoctl+0x118>
c001a6f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a6fd:	83 f8 03             	cmp    eax,0x3
c001a700:	75 1a                	jne    c001a71c <fatWrapperIoctl+0xfc>
c001a702:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a706:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a70a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a70e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a714:	b8 00 00 00 00       	mov    eax,0x0
c001a719:	eb 1d                	jmp    c001a738 <fatWrapperIoctl+0x118>
c001a71b:	90                   	nop
c001a71c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a721:	83 f8 04             	cmp    eax,0x4
c001a724:	75 0a                	jne    c001a730 <fatWrapperIoctl+0x110>
c001a726:	b8 00 00 00 00       	mov    eax,0x0
c001a72b:	eb 0b                	jmp    c001a738 <fatWrapperIoctl+0x118>
c001a72d:	8d 76 00             	lea    esi,[esi+0x0]
c001a730:	b8 04 00 00 00       	mov    eax,0x4
c001a735:	8d 76 00             	lea    esi,[esi+0x0]
c001a738:	83 c4 28             	add    esp,0x28
c001a73b:	5b                   	pop    ebx
c001a73c:	c3                   	ret    
c001a73d:	90                   	nop
c001a73e:	66 90                	xchg   ax,ax

c001a740 <FAT::FAT()>:
c001a740:	83 ec 1c             	sub    esp,0x1c
c001a743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a747:	83 ec 0c             	sub    esp,0xc
c001a74a:	50                   	push   eax
c001a74b:	e8 06 d6 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	ba cc 3d 02 c0       	mov    edx,0xc0023dcc
c001a758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a75c:	89 10                	mov    DWORD PTR [eax],edx
c001a75e:	c7 05 a0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a0,0x0
c001a768:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a770:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a775:	7f 19                	jg     c001a790 <FAT::FAT()+0x50>
c001a777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a77b:	c7 04 85 c0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2840],0xffffffff
c001a786:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a78b:	eb e3                	jmp    c001a770 <FAT::FAT()+0x30>
c001a78d:	8d 76 00             	lea    esi,[esi+0x0]
c001a790:	90                   	nop
c001a791:	83 c4 1c             	add    esp,0x1c
c001a794:	c3                   	ret    
c001a795:	90                   	nop
c001a796:	66 90                	xchg   ax,ax

c001a798 <FAT::fixFilepath(char*)>:
c001a798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a79c:	8a 00                	mov    al,BYTE PTR [eax]
c001a79e:	0f be c0             	movsx  eax,al
c001a7a1:	83 f8 40             	cmp    eax,0x40
c001a7a4:	7e 2e                	jle    c001a7d4 <FAT::fixFilepath(char*)+0x3c>
c001a7a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a7ac:	83 e8 41             	sub    eax,0x41
c001a7af:	88 c2                	mov    dl,al
c001a7b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7b5:	88 10                	mov    BYTE PTR [eax],dl
c001a7b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7bb:	8a 00                	mov    al,BYTE PTR [eax]
c001a7bd:	0f be c0             	movsx  eax,al
c001a7c0:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a7c7:	83 c0 30             	add    eax,0x30
c001a7ca:	88 c2                	mov    dl,al
c001a7cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7d0:	88 10                	mov    BYTE PTR [eax],dl
c001a7d2:	66 90                	xchg   ax,ax
c001a7d4:	90                   	nop
c001a7d5:	c3                   	ret    
c001a7d6:	66 90                	xchg   ax,ax

c001a7d8 <FAT::open(char const*, void**, FileOpenMode)>:
c001a7d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7e6:	74 0c                	je     c001a7f4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a7e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a7f0:	75 0e                	jne    c001a800 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a7f2:	66 90                	xchg   ax,ax
c001a7f4:	b8 04 00 00 00       	mov    eax,0x4
c001a7f9:	e9 46 01 00 00       	jmp    c001a944 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a7fe:	66 90                	xchg   ax,ax
c001a800:	83 ec 08             	sub    esp,0x8
c001a803:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a80a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a80e:	50                   	push   eax
c001a80f:	e8 3c 5e fe ff       	call   c0000650 <strcpy>
c001a814:	83 c4 10             	add    esp,0x10
c001a817:	83 ec 08             	sub    esp,0x8
c001a81a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a81e:	50                   	push   eax
c001a81f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a826:	e8 6d ff ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001a82b:	83 c4 10             	add    esp,0x10
c001a82e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a836:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a83d:	83 e0 01             	and    eax,0x1
c001a840:	74 12                	je     c001a854 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a842:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a849:	83 c8 01             	or     eax,0x1
c001a84c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a853:	90                   	nop
c001a854:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a85b:	83 e0 04             	and    eax,0x4
c001a85e:	74 24                	je     c001a884 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a860:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a867:	83 c8 30             	or     eax,0x30
c001a86a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a871:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a878:	83 c8 02             	or     eax,0x2
c001a87b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a882:	66 90                	xchg   ax,ax
c001a884:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a88b:	83 e0 02             	and    eax,0x2
c001a88e:	74 14                	je     c001a8a4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a890:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a897:	83 c8 02             	or     eax,0x2
c001a89a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a8ab:	83 e0 08             	and    eax,0x8
c001a8ae:	74 14                	je     c001a8c4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a8b0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a8b7:	83 c8 04             	or     eax,0x4
c001a8ba:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a8cb:	83 e0 10             	and    eax,0x10
c001a8ce:	74 14                	je     c001a8e4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a8d0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a8d7:	83 c8 08             	or     eax,0x8
c001a8da:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e4:	83 ec 0c             	sub    esp,0xc
c001a8e7:	68 28 02 00 00       	push   0x228
c001a8ec:	e8 af 40 ff ff       	call   c000e9a0 <malloc>
c001a8f1:	83 c4 10             	add    esp,0x10
c001a8f4:	89 c2                	mov    edx,eax
c001a8f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8fd:	89 10                	mov    DWORD PTR [eax],edx
c001a8ff:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a907:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a90e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a910:	83 ec 04             	sub    esp,0x4
c001a913:	52                   	push   edx
c001a914:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a918:	52                   	push   edx
c001a919:	50                   	push   eax
c001a91a:	e8 62 95 fe ff       	call   c0003e81 <f_open>
c001a91f:	83 c4 10             	add    esp,0x10
c001a922:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a929:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a931:	74 09                	je     c001a93c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a933:	b8 01 00 00 00       	mov    eax,0x1
c001a938:	eb 0a                	jmp    c001a944 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	b8 00 00 00 00       	mov    eax,0x0
c001a941:	8d 76 00             	lea    esi,[esi+0x0]
c001a944:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a94a:	c3                   	ret    
c001a94b:	90                   	nop

c001a94c <FAT::openDir(char const*, void**)>:
c001a94c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a952:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a95a:	74 0c                	je     c001a968 <FAT::openDir(char const*, void**)+0x1c>
c001a95c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a964:	75 0e                	jne    c001a974 <FAT::openDir(char const*, void**)+0x28>
c001a966:	66 90                	xchg   ax,ax
c001a968:	b8 04 00 00 00       	mov    eax,0x4
c001a96d:	e9 82 00 00 00       	jmp    c001a9f4 <FAT::openDir(char const*, void**)+0xa8>
c001a972:	66 90                	xchg   ax,ax
c001a974:	83 ec 08             	sub    esp,0x8
c001a977:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a97e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a982:	50                   	push   eax
c001a983:	e8 c8 5c fe ff       	call   c0000650 <strcpy>
c001a988:	83 c4 10             	add    esp,0x10
c001a98b:	83 ec 08             	sub    esp,0x8
c001a98e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a992:	50                   	push   eax
c001a993:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a99a:	e8 f9 fd ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001a99f:	83 c4 10             	add    esp,0x10
c001a9a2:	83 ec 0c             	sub    esp,0xc
c001a9a5:	6a 30                	push   0x30
c001a9a7:	e8 f4 3f ff ff       	call   c000e9a0 <malloc>
c001a9ac:	83 c4 10             	add    esp,0x10
c001a9af:	89 c2                	mov    edx,eax
c001a9b1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9b8:	89 10                	mov    DWORD PTR [eax],edx
c001a9ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9c3:	83 ec 08             	sub    esp,0x8
c001a9c6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a9ca:	52                   	push   edx
c001a9cb:	50                   	push   eax
c001a9cc:	e8 3f 9e fe ff       	call   c0004810 <f_opendir>
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a9db:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a9e3:	74 07                	je     c001a9ec <FAT::openDir(char const*, void**)+0xa0>
c001a9e5:	b8 01 00 00 00       	mov    eax,0x1
c001a9ea:	eb 08                	jmp    c001a9f4 <FAT::openDir(char const*, void**)+0xa8>
c001a9ec:	b8 00 00 00 00       	mov    eax,0x0
c001a9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a9fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aa02:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001aa0a:	75 0c                	jne    c001aa18 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001aa0c:	b8 04 00 00 00       	mov    eax,0x4
c001aa11:	e9 d6 00 00 00       	jmp    c001aaec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aa16:	66 90                	xchg   ax,ax
c001aa18:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001aa20:	75 0a                	jne    c001aa2c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001aa22:	b8 04 00 00 00       	mov    eax,0x4
c001aa27:	e9 c0 00 00 00       	jmp    c001aaec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aa2c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001aa34:	75 0a                	jne    c001aa40 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001aa36:	b8 04 00 00 00       	mov    eax,0x4
c001aa3b:	e9 ac 00 00 00       	jmp    c001aaec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aa40:	83 ec 08             	sub    esp,0x8
c001aa43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa4a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aa51:	50                   	push   eax
c001aa52:	e8 f9 5b fe ff       	call   c0000650 <strcpy>
c001aa57:	83 c4 10             	add    esp,0x10
c001aa5a:	83 ec 08             	sub    esp,0x8
c001aa5d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001aa64:	50                   	push   eax
c001aa65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa6c:	e8 27 fd ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001aa71:	83 c4 10             	add    esp,0x10
c001aa74:	83 ec 08             	sub    esp,0x8
c001aa77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa7b:	50                   	push   eax
c001aa7c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aa83:	50                   	push   eax
c001aa84:	e8 06 9f fe ff       	call   c000498f <f_stat>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aa93:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aa9a:	85 c0                	test   eax,eax
c001aa9c:	74 0a                	je     c001aaa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001aa9e:	83 f8 04             	cmp    eax,0x4
c001aaa1:	74 39                	je     c001aadc <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001aaa3:	eb 3f                	jmp    c001aae4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001aaa5:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aaac:	0f b6 c0             	movzx  eax,al
c001aaaf:	83 e0 10             	and    eax,0x10
c001aab2:	0f 95 c2             	setne  dl
c001aab5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001aabc:	88 10                	mov    BYTE PTR [eax],dl
c001aabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac2:	ba 00 00 00 00       	mov    edx,0x0
c001aac7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001aace:	89 01                	mov    DWORD PTR [ecx],eax
c001aad0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aad3:	b8 00 00 00 00       	mov    eax,0x0
c001aad8:	eb 12                	jmp    c001aaec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aada:	66 90                	xchg   ax,ax
c001aadc:	b8 02 00 00 00       	mov    eax,0x2
c001aae1:	eb 09                	jmp    c001aaec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aae3:	90                   	nop
c001aae4:	b8 01 00 00 00       	mov    eax,0x1
c001aae9:	8d 76 00             	lea    esi,[esi+0x0]
c001aaec:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aaf2:	c3                   	ret    
c001aaf3:	90                   	nop

c001aaf4 <FAT::unlink(char const*)>:
c001aaf4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aafa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab02:	75 08                	jne    c001ab0c <FAT::unlink(char const*)+0x18>
c001ab04:	b8 04 00 00 00       	mov    eax,0x4
c001ab09:	eb 61                	jmp    c001ab6c <FAT::unlink(char const*)+0x78>
c001ab0b:	90                   	nop
c001ab0c:	83 ec 08             	sub    esp,0x8
c001ab0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab16:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab1a:	50                   	push   eax
c001ab1b:	e8 30 5b fe ff       	call   c0000650 <strcpy>
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	83 ec 08             	sub    esp,0x8
c001ab26:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab2a:	50                   	push   eax
c001ab2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab32:	e8 61 fc ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	83 ec 0c             	sub    esp,0xc
c001ab3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab41:	50                   	push   eax
c001ab42:	e8 ba a0 fe ff       	call   c0004c01 <f_unlink>
c001ab47:	83 c4 10             	add    esp,0x10
c001ab4a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab51:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ab58:	85 c0                	test   eax,eax
c001ab5a:	75 08                	jne    c001ab64 <FAT::unlink(char const*)+0x70>
c001ab5c:	b8 00 00 00 00       	mov    eax,0x0
c001ab61:	eb 09                	jmp    c001ab6c <FAT::unlink(char const*)+0x78>
c001ab63:	90                   	nop
c001ab64:	b8 01 00 00 00       	mov    eax,0x1
c001ab69:	8d 76 00             	lea    esi,[esi+0x0]
c001ab6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab72:	c3                   	ret    
c001ab73:	90                   	nop

c001ab74 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ab7a:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001ab81:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001ab88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ab8c:	88 d0                	mov    al,dl
c001ab8e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ab92:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ab9a:	75 0c                	jne    c001aba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001ab9c:	b8 04 00 00 00       	mov    eax,0x4
c001aba1:	e9 7e 01 00 00       	jmp    c001ad24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001aba6:	66 90                	xchg   ax,ax
c001aba8:	83 ec 08             	sub    esp,0x8
c001abab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001abb2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001abb6:	50                   	push   eax
c001abb7:	e8 94 5a fe ff       	call   c0000650 <strcpy>
c001abbc:	83 c4 10             	add    esp,0x10
c001abbf:	83 ec 08             	sub    esp,0x8
c001abc2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001abc6:	50                   	push   eax
c001abc7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001abce:	e8 c5 fb ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001abd3:	83 c4 10             	add    esp,0x10
c001abd6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001abde:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001abe6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abeb:	83 e0 01             	and    eax,0x1
c001abee:	74 14                	je     c001ac04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001abf0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001abf7:	83 c8 01             	or     eax,0x1
c001abfa:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ac01:	8d 76 00             	lea    esi,[esi+0x0]
c001ac04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac09:	83 e0 02             	and    eax,0x2
c001ac0c:	74 12                	je     c001ac20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001ac0e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ac15:	83 c8 20             	or     eax,0x20
c001ac18:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ac1f:	90                   	nop
c001ac20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac25:	83 e0 04             	and    eax,0x4
c001ac28:	74 12                	je     c001ac3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ac2a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ac31:	83 c8 04             	or     eax,0x4
c001ac34:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ac3b:	90                   	nop
c001ac3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac41:	83 e0 08             	and    eax,0x8
c001ac44:	74 12                	je     c001ac58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001ac46:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ac4d:	83 c8 02             	or     eax,0x2
c001ac50:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ac57:	90                   	nop
c001ac58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac5d:	83 e0 01             	and    eax,0x1
c001ac60:	74 12                	je     c001ac74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001ac62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ac69:	83 c8 01             	or     eax,0x1
c001ac6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ac73:	90                   	nop
c001ac74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac79:	83 e0 02             	and    eax,0x2
c001ac7c:	74 12                	je     c001ac90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001ac7e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ac85:	83 c8 20             	or     eax,0x20
c001ac88:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ac8f:	90                   	nop
c001ac90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac95:	83 e0 04             	and    eax,0x4
c001ac98:	74 12                	je     c001acac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001ac9a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001aca1:	83 c8 04             	or     eax,0x4
c001aca4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001acab:	90                   	nop
c001acac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001acb1:	83 e0 08             	and    eax,0x8
c001acb4:	74 12                	je     c001acc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001acb6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001acbd:	83 c8 02             	or     eax,0x2
c001acc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001acc7:	90                   	nop
c001acc8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001accf:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001acd6:	09 d0                	or     eax,edx
c001acd8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001acdf:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ace7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001acef:	83 ec 04             	sub    esp,0x4
c001acf2:	52                   	push   edx
c001acf3:	50                   	push   eax
c001acf4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acf8:	50                   	push   eax
c001acf9:	e8 76 a3 fe ff       	call   c0005074 <f_chmod>
c001acfe:	83 c4 10             	add    esp,0x10
c001ad01:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ad08:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ad0f:	85 c0                	test   eax,eax
c001ad11:	75 09                	jne    c001ad1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001ad13:	b8 00 00 00 00       	mov    eax,0x0
c001ad18:	eb 0a                	jmp    c001ad24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001ad1a:	66 90                	xchg   ax,ax
c001ad1c:	b8 01 00 00 00       	mov    eax,0x1
c001ad21:	8d 76 00             	lea    esi,[esi+0x0]
c001ad24:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad2a:	c3                   	ret    
c001ad2b:	90                   	nop

c001ad2c <FAT::rename(char const*, char const*)>:
c001ad2c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ad32:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ad3a:	74 0c                	je     c001ad48 <FAT::rename(char const*, char const*)+0x1c>
c001ad3c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ad44:	75 0e                	jne    c001ad54 <FAT::rename(char const*, char const*)+0x28>
c001ad46:	66 90                	xchg   ax,ax
c001ad48:	b8 04 00 00 00       	mov    eax,0x4
c001ad4d:	e9 9e 00 00 00       	jmp    c001adf0 <FAT::rename(char const*, char const*)+0xc4>
c001ad52:	66 90                	xchg   ax,ax
c001ad54:	83 ec 08             	sub    esp,0x8
c001ad57:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ad5e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ad65:	50                   	push   eax
c001ad66:	e8 e5 58 fe ff       	call   c0000650 <strcpy>
c001ad6b:	83 c4 10             	add    esp,0x10
c001ad6e:	83 ec 08             	sub    esp,0x8
c001ad71:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ad78:	50                   	push   eax
c001ad79:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ad80:	e8 13 fa ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001ad85:	83 c4 10             	add    esp,0x10
c001ad88:	83 ec 08             	sub    esp,0x8
c001ad8b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ad92:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad96:	50                   	push   eax
c001ad97:	e8 b4 58 fe ff       	call   c0000650 <strcpy>
c001ad9c:	83 c4 10             	add    esp,0x10
c001ad9f:	83 ec 08             	sub    esp,0x8
c001ada2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ada6:	50                   	push   eax
c001ada7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001adae:	e8 e5 f9 ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	83 ec 08             	sub    esp,0x8
c001adb9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001adbd:	50                   	push   eax
c001adbe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001adc5:	50                   	push   eax
c001adc6:	e8 f1 a0 fe ff       	call   c0004ebc <f_rename>
c001adcb:	83 c4 10             	add    esp,0x10
c001adce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001add5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001addc:	85 c0                	test   eax,eax
c001adde:	75 08                	jne    c001ade8 <FAT::rename(char const*, char const*)+0xbc>
c001ade0:	b8 00 00 00 00       	mov    eax,0x0
c001ade5:	eb 09                	jmp    c001adf0 <FAT::rename(char const*, char const*)+0xc4>
c001ade7:	90                   	nop
c001ade8:	b8 01 00 00 00       	mov    eax,0x1
c001aded:	8d 76 00             	lea    esi,[esi+0x0]
c001adf0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001adf6:	c3                   	ret    
c001adf7:	90                   	nop

c001adf8 <FAT::mkdir(char const*)>:
c001adf8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001adfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ae06:	75 08                	jne    c001ae10 <FAT::mkdir(char const*)+0x18>
c001ae08:	b8 04 00 00 00       	mov    eax,0x4
c001ae0d:	eb 61                	jmp    c001ae70 <FAT::mkdir(char const*)+0x78>
c001ae0f:	90                   	nop
c001ae10:	83 ec 08             	sub    esp,0x8
c001ae13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae1a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae1e:	50                   	push   eax
c001ae1f:	e8 2c 58 fe ff       	call   c0000650 <strcpy>
c001ae24:	83 c4 10             	add    esp,0x10
c001ae27:	83 ec 08             	sub    esp,0x8
c001ae2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae2e:	50                   	push   eax
c001ae2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae36:	e8 5d f9 ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001ae3b:	83 c4 10             	add    esp,0x10
c001ae3e:	83 ec 0c             	sub    esp,0xc
c001ae41:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae45:	50                   	push   eax
c001ae46:	e8 d6 9e fe ff       	call   c0004d21 <f_mkdir>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ae55:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ae5c:	85 c0                	test   eax,eax
c001ae5e:	75 08                	jne    c001ae68 <FAT::mkdir(char const*)+0x70>
c001ae60:	b8 00 00 00 00       	mov    eax,0x0
c001ae65:	eb 09                	jmp    c001ae70 <FAT::mkdir(char const*)+0x78>
c001ae67:	90                   	nop
c001ae68:	b8 01 00 00 00       	mov    eax,0x1
c001ae6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae70:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ae76:	c3                   	ret    
c001ae77:	90                   	nop

c001ae78 <FAT::exists(char const*)>:
c001ae78:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ae7e:	83 ec 08             	sub    esp,0x8
c001ae81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ae88:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ae8c:	50                   	push   eax
c001ae8d:	e8 be 57 fe ff       	call   c0000650 <strcpy>
c001ae92:	83 c4 10             	add    esp,0x10
c001ae95:	83 ec 08             	sub    esp,0x8
c001ae98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ae9c:	50                   	push   eax
c001ae9d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aea4:	e8 ef f8 ff ff       	call   c001a798 <FAT::fixFilepath(char*)>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	83 ec 08             	sub    esp,0x8
c001aeaf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001aeb6:	50                   	push   eax
c001aeb7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aebb:	50                   	push   eax
c001aebc:	e8 ce 9a fe ff       	call   c000498f <f_stat>
c001aec1:	83 c4 10             	add    esp,0x10
c001aec4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aecb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aed2:	85 c0                	test   eax,eax
c001aed4:	75 06                	jne    c001aedc <FAT::exists(char const*)+0x64>
c001aed6:	b0 01                	mov    al,0x1
c001aed8:	eb 06                	jmp    c001aee0 <FAT::exists(char const*)+0x68>
c001aeda:	66 90                	xchg   ax,ax
c001aedc:	b0 00                	mov    al,0x0
c001aede:	66 90                	xchg   ax,ax
c001aee0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aee6:	c3                   	ret    
c001aee7:	90                   	nop

c001aee8 <isoReadDiscSectorHelper>:
c001aee8:	83 ec 2c             	sub    esp,0x2c
c001aeeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aeef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aef3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001aef8:	83 e8 41             	sub    eax,0x41
c001aefb:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001af02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af06:	ba 00 00 00 00       	mov    edx,0x0
c001af0b:	83 ec 0c             	sub    esp,0xc
c001af0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af12:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af16:	52                   	push   edx
c001af17:	50                   	push   eax
c001af18:	51                   	push   ecx
c001af19:	e8 9e f1 fe ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c001af1e:	83 c4 20             	add    esp,0x20
c001af21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af25:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001af2a:	74 0c                	je     c001af38 <isoReadDiscSectorHelper+0x50>
c001af2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af30:	c1 e0 0b             	shl    eax,0xb
c001af33:	eb 0b                	jmp    c001af40 <isoReadDiscSectorHelper+0x58>
c001af35:	8d 76 00             	lea    esi,[esi+0x0]
c001af38:	b8 00 00 00 00       	mov    eax,0x0
c001af3d:	8d 76 00             	lea    esi,[esi+0x0]
c001af40:	83 c4 2c             	add    esp,0x2c
c001af43:	c3                   	ret    

c001af44 <iso_kprintf>:
c001af44:	83 ec 0c             	sub    esp,0xc
c001af47:	83 ec 08             	sub    esp,0x8
c001af4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af4e:	68 71 3a 02 c0       	push   0xc0023a71
c001af53:	e8 f6 bf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001af58:	83 c4 10             	add    esp,0x10
c001af5b:	90                   	nop
c001af5c:	83 c4 0c             	add    esp,0xc
c001af5f:	c3                   	ret    

c001af60 <iso_kprintfd>:
c001af60:	83 ec 0c             	sub    esp,0xc
c001af63:	83 ec 08             	sub    esp,0x8
c001af66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af6a:	68 29 1b 02 c0       	push   0xc0021b29
c001af6f:	e8 da bf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	90                   	nop
c001af78:	83 c4 0c             	add    esp,0xc
c001af7b:	c3                   	ret    

c001af7c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001af7c:	b8 08 00 00 00       	mov    eax,0x8
c001af81:	c3                   	ret    

c001af82 <ISO9660::truncate(void*, unsigned long long)>:
c001af82:	b8 01 00 00 00       	mov    eax,0x1
c001af87:	c3                   	ret    

c001af88 <ISO9660::getName()>:
c001af88:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c001af8d:	c3                   	ret    

c001af8e <ISO9660::closeDir(void*)>:
c001af8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af92:	8b 00                	mov    eax,DWORD PTR [eax]
c001af94:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001af97:	90                   	nop

c001af98 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001af98:	b8 01 00 00 00       	mov    eax,0x1
c001af9d:	c3                   	ret    

c001af9e <ISO9660::unlink(char const*)>:
c001af9e:	b8 01 00 00 00       	mov    eax,0x1
c001afa3:	c3                   	ret    

c001afa4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001afa4:	b8 03 00 00 00       	mov    eax,0x3
c001afa9:	c3                   	ret    

c001afaa <ISO9660::rename(char const*, char const*)>:
c001afaa:	b8 01 00 00 00       	mov    eax,0x1
c001afaf:	c3                   	ret    

c001afb0 <ISO9660::mkdir(char const*)>:
c001afb0:	b8 01 00 00 00       	mov    eax,0x1
c001afb5:	c3                   	ret    

c001afb6 <ISO9660::~ISO9660()>:
c001afb6:	83 ec 0c             	sub    esp,0xc
c001afb9:	ba 70 3f 02 c0       	mov    edx,0xc0023f70
c001afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc2:	89 10                	mov    DWORD PTR [eax],edx
c001afc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc8:	83 ec 0c             	sub    esp,0xc
c001afcb:	50                   	push   eax
c001afcc:	e8 a9 cd fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001afd1:	83 c4 10             	add    esp,0x10
c001afd4:	90                   	nop
c001afd5:	83 c4 0c             	add    esp,0xc
c001afd8:	c3                   	ret    
c001afd9:	90                   	nop

c001afda <ISO9660::~ISO9660()>:
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	83 ec 0c             	sub    esp,0xc
c001afe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afe4:	e8 cd ff ff ff       	call   c001afb6 <ISO9660::~ISO9660()>
c001afe9:	83 c4 10             	add    esp,0x10
c001afec:	83 ec 08             	sub    esp,0x8
c001afef:	6a 08                	push   0x8
c001aff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aff5:	e8 b1 16 ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c001affa:	83 c4 10             	add    esp,0x10
c001affd:	83 c4 0c             	add    esp,0xc
c001b000:	c3                   	ret    
c001b001:	90                   	nop

c001b002 <ISO9660::exists(char const*)>:
c001b002:	83 ec 18             	sub    esp,0x18
c001b005:	68 4b 3e 02 c0       	push   0xc0023e4b
c001b00a:	e8 d7 3c ff ff       	call   c000ece6 <KePanic(char const*)>
c001b00f:	31 c0                	xor    eax,eax
c001b011:	83 c4 1c             	add    esp,0x1c
c001b014:	c3                   	ret    
c001b015:	90                   	nop

c001b016 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b016:	56                   	push   esi
c001b017:	53                   	push   ebx
c001b018:	53                   	push   ebx
c001b019:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b01d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b021:	85 db                	test   ebx,ebx
c001b023:	0f 84 ca 00 00 00    	je     c001b0f3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b029:	85 f6                	test   esi,esi
c001b02b:	0f 84 c2 00 00 00    	je     c001b0f3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b031:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001b036:	b8 03 00 00 00       	mov    eax,0x3
c001b03b:	0f 85 b7 00 00 00    	jne    c001b0f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b041:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b043:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b049:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b050:	74 1b                	je     c001b06d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b052:	85 c0                	test   eax,eax
c001b054:	74 10                	je     c001b066 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001b056:	83 ec 0c             	sub    esp,0xc
c001b059:	68 69 3e 02 c0       	push   0xc0023e69
c001b05e:	e8 83 3c ff ff       	call   c000ece6 <KePanic(char const*)>
c001b063:	83 c4 10             	add    esp,0x10
c001b066:	8a 03                	mov    al,BYTE PTR [ebx]
c001b068:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b06d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b070:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b077:	85 c0                	test   eax,eax
c001b079:	74 09                	je     c001b084 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001b07b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b082:	74 48                	je     c001b0cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001b084:	83 ec 0c             	sub    esp,0xc
c001b087:	68 79 3e 02 c0       	push   0xc0023e79
c001b08c:	e8 bd be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b091:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b094:	83 c4 10             	add    esp,0x10
c001b097:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b09e:	85 c0                	test   eax,eax
c001b0a0:	74 17                	je     c001b0b9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001b0a2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b0a9:	83 ec 0c             	sub    esp,0xc
c001b0ac:	68 99 3e 02 c0       	push   0xc0023e99
c001b0b1:	e8 98 be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b0b6:	83 c4 10             	add    esp,0x10
c001b0b9:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b0c0:	83 ec 0c             	sub    esp,0xc
c001b0c3:	50                   	push   eax
c001b0c4:	e8 7e bb fe ff       	call   c0006c47 <init_percd>
c001b0c9:	83 c4 10             	add    esp,0x10
c001b0cc:	51                   	push   ecx
c001b0cd:	83 c3 03             	add    ebx,0x3
c001b0d0:	51                   	push   ecx
c001b0d1:	6a 00                	push   0x0
c001b0d3:	53                   	push   ebx
c001b0d4:	e8 31 b6 fe ff       	call   c000670a <iso_open>
c001b0d9:	83 c4 10             	add    esp,0x10
c001b0dc:	89 c2                	mov    edx,eax
c001b0de:	b8 01 00 00 00       	mov    eax,0x1
c001b0e3:	83 fa ff             	cmp    edx,0xffffffff
c001b0e6:	74 10                	je     c001b0f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b0e8:	83 c2 32             	add    edx,0x32
c001b0eb:	31 c0                	xor    eax,eax
c001b0ed:	01 d2                	add    edx,edx
c001b0ef:	89 16                	mov    DWORD PTR [esi],edx
c001b0f1:	eb 05                	jmp    c001b0f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b0f3:	b8 04 00 00 00       	mov    eax,0x4
c001b0f8:	5a                   	pop    edx
c001b0f9:	5b                   	pop    ebx
c001b0fa:	5e                   	pop    esi
c001b0fb:	c3                   	ret    

c001b0fc <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b0fc:	53                   	push   ebx
c001b0fd:	83 ec 08             	sub    esp,0x8
c001b100:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b104:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b108:	85 c0                	test   eax,eax
c001b10a:	74 2d                	je     c001b139 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b10c:	85 db                	test   ebx,ebx
c001b10e:	74 29                	je     c001b139 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b110:	52                   	push   edx
c001b111:	b9 02 00 00 00       	mov    ecx,0x2
c001b116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b11a:	99                   	cdq    
c001b11b:	f7 f9                	idiv   ecx
c001b11d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b121:	83 e8 32             	sub    eax,0x32
c001b124:	50                   	push   eax
c001b125:	e8 88 b6 fe ff       	call   c00067b2 <iso_read>
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	89 03                	mov    DWORD PTR [ebx],eax
c001b12f:	09 d0                	or     eax,edx
c001b131:	0f 94 c0             	sete   al
c001b134:	0f b6 c0             	movzx  eax,al
c001b137:	eb 05                	jmp    c001b13e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001b139:	b8 04 00 00 00       	mov    eax,0x4
c001b13e:	83 c4 08             	add    esp,0x8
c001b141:	5b                   	pop    ebx
c001b142:	c3                   	ret    
c001b143:	90                   	nop

c001b144 <ISO9660::seek(void*, unsigned long long)>:
c001b144:	57                   	push   edi
c001b145:	b8 04 00 00 00       	mov    eax,0x4
c001b14a:	56                   	push   esi
c001b14b:	51                   	push   ecx
c001b14c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b150:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b154:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b158:	85 d2                	test   edx,edx
c001b15a:	74 26                	je     c001b182 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001b15c:	89 d0                	mov    eax,edx
c001b15e:	b9 02 00 00 00       	mov    ecx,0x2
c001b163:	6a 00                	push   0x0
c001b165:	99                   	cdq    
c001b166:	f7 f9                	idiv   ecx
c001b168:	57                   	push   edi
c001b169:	56                   	push   esi
c001b16a:	83 e8 32             	sub    eax,0x32
c001b16d:	50                   	push   eax
c001b16e:	e8 55 b7 fe ff       	call   c00068c8 <iso_seek>
c001b173:	83 c4 10             	add    esp,0x10
c001b176:	31 f0                	xor    eax,esi
c001b178:	31 fa                	xor    edx,edi
c001b17a:	09 d0                	or     eax,edx
c001b17c:	0f 95 c0             	setne  al
c001b17f:	0f b6 c0             	movzx  eax,al
c001b182:	5a                   	pop    edx
c001b183:	5e                   	pop    esi
c001b184:	5f                   	pop    edi
c001b185:	c3                   	ret    

c001b186 <ISO9660::tell(void*, unsigned long long*)>:
c001b186:	53                   	push   ebx
c001b187:	83 ec 08             	sub    esp,0x8
c001b18a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b18e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b192:	85 c0                	test   eax,eax
c001b194:	74 24                	je     c001b1ba <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b196:	85 db                	test   ebx,ebx
c001b198:	74 20                	je     c001b1ba <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b19a:	b9 02 00 00 00       	mov    ecx,0x2
c001b19f:	99                   	cdq    
c001b1a0:	f7 f9                	idiv   ecx
c001b1a2:	83 ec 0c             	sub    esp,0xc
c001b1a5:	83 e8 32             	sub    eax,0x32
c001b1a8:	50                   	push   eax
c001b1a9:	e8 9e b7 fe ff       	call   c000694c <iso_tell>
c001b1ae:	83 c4 10             	add    esp,0x10
c001b1b1:	89 03                	mov    DWORD PTR [ebx],eax
c001b1b3:	31 c0                	xor    eax,eax
c001b1b5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001b1b8:	eb 05                	jmp    c001b1bf <ISO9660::tell(void*, unsigned long long*)+0x39>
c001b1ba:	b8 04 00 00 00       	mov    eax,0x4
c001b1bf:	83 c4 08             	add    esp,0x8
c001b1c2:	5b                   	pop    ebx
c001b1c3:	c3                   	ret    

c001b1c4 <ISO9660::stat(void*, unsigned long long*)>:
c001b1c4:	56                   	push   esi
c001b1c5:	53                   	push   ebx
c001b1c6:	83 ec 10             	sub    esp,0x10
c001b1c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b1d1:	68 bd 3e 02 c0       	push   0xc0023ebd
c001b1d6:	e8 73 bd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b1db:	83 c4 10             	add    esp,0x10
c001b1de:	85 db                	test   ebx,ebx
c001b1e0:	74 2a                	je     c001b20c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b1e2:	85 f6                	test   esi,esi
c001b1e4:	74 26                	je     c001b20c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b1e6:	89 d8                	mov    eax,ebx
c001b1e8:	b9 02 00 00 00       	mov    ecx,0x2
c001b1ed:	99                   	cdq    
c001b1ee:	83 ec 0c             	sub    esp,0xc
c001b1f1:	f7 f9                	idiv   ecx
c001b1f3:	83 e8 32             	sub    eax,0x32
c001b1f6:	50                   	push   eax
c001b1f7:	e8 81 b7 fe ff       	call   c000697d <iso_total>
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001b206:	89 06                	mov    DWORD PTR [esi],eax
c001b208:	31 c0                	xor    eax,eax
c001b20a:	eb 05                	jmp    c001b211 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001b20c:	b8 04 00 00 00       	mov    eax,0x4
c001b211:	5a                   	pop    edx
c001b212:	5b                   	pop    ebx
c001b213:	5e                   	pop    esi
c001b214:	c3                   	ret    
c001b215:	90                   	nop

c001b216 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b216:	55                   	push   ebp
c001b217:	57                   	push   edi
c001b218:	56                   	push   esi
c001b219:	53                   	push   ebx
c001b21a:	83 ec 18             	sub    esp,0x18
c001b21d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b221:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b225:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b229:	68 c5 3e 02 c0       	push   0xc0023ec5
c001b22e:	e8 1b bd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	85 ff                	test   edi,edi
c001b238:	0f 94 c0             	sete   al
c001b23b:	85 f6                	test   esi,esi
c001b23d:	0f 94 c2             	sete   dl
c001b240:	09 d0                	or     eax,edx
c001b242:	a8 01                	test   al,0x1
c001b244:	0f 85 dd 00 00 00    	jne    c001b327 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b24a:	85 db                	test   ebx,ebx
c001b24c:	0f 84 d5 00 00 00    	je     c001b327 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b252:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b255:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001b25b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b262:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b269:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b26b:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b271:	74 1b                	je     c001b28e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001b273:	85 c0                	test   eax,eax
c001b275:	74 10                	je     c001b287 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001b277:	83 ec 0c             	sub    esp,0xc
c001b27a:	68 69 3e 02 c0       	push   0xc0023e69
c001b27f:	e8 62 3a ff ff       	call   c000ece6 <KePanic(char const*)>
c001b284:	83 c4 10             	add    esp,0x10
c001b287:	8a 03                	mov    al,BYTE PTR [ebx]
c001b289:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b28e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b291:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b298:	85 c0                	test   eax,eax
c001b29a:	74 09                	je     c001b2a5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001b29c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b2a3:	74 51                	je     c001b2f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b2a5:	83 ec 0c             	sub    esp,0xc
c001b2a8:	68 cd 3e 02 c0       	push   0xc0023ecd
c001b2ad:	e8 9c bc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b2b2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b2b5:	83 c4 10             	add    esp,0x10
c001b2b8:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001b2c0:	74 21                	je     c001b2e3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001b2c2:	83 ec 0c             	sub    esp,0xc
c001b2c5:	68 ed 3e 02 c0       	push   0xc0023eed
c001b2ca:	e8 7f bc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b2cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b2d2:	83 c4 10             	add    esp,0x10
c001b2d5:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b2dc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b2e3:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b2ea:	83 ec 0c             	sub    esp,0xc
c001b2ed:	50                   	push   eax
c001b2ee:	e8 54 b9 fe ff       	call   c0006c47 <init_percd>
c001b2f3:	83 c4 10             	add    esp,0x10
c001b2f6:	52                   	push   edx
c001b2f7:	83 c3 03             	add    ebx,0x3
c001b2fa:	52                   	push   edx
c001b2fb:	6a 00                	push   0x0
c001b2fd:	53                   	push   ebx
c001b2fe:	e8 07 b4 fe ff       	call   c000670a <iso_open>
c001b303:	83 c4 10             	add    esp,0x10
c001b306:	83 f8 ff             	cmp    eax,0xffffffff
c001b309:	89 c5                	mov    ebp,eax
c001b30b:	75 21                	jne    c001b32e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001b30d:	50                   	push   eax
c001b30e:	50                   	push   eax
c001b30f:	6a 01                	push   0x1
c001b311:	53                   	push   ebx
c001b312:	e8 f3 b3 fe ff       	call   c000670a <iso_open>
c001b317:	83 c4 10             	add    esp,0x10
c001b31a:	ba 02 00 00 00       	mov    edx,0x2
c001b31f:	40                   	inc    eax
c001b320:	74 2b                	je     c001b34d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b322:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001b325:	eb 24                	jmp    c001b34b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001b327:	ba 04 00 00 00       	mov    edx,0x4
c001b32c:	eb 1f                	jmp    c001b34d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	50                   	push   eax
c001b332:	e8 46 b6 fe ff       	call   c000697d <iso_total>
c001b337:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b33e:	89 07                	mov    DWORD PTR [edi],eax
c001b340:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b343:	e8 4c b4 fe ff       	call   c0006794 <iso_close>
c001b348:	83 c4 10             	add    esp,0x10
c001b34b:	31 d2                	xor    edx,edx
c001b34d:	83 c4 0c             	add    esp,0xc
c001b350:	89 d0                	mov    eax,edx
c001b352:	5b                   	pop    ebx
c001b353:	5e                   	pop    esi
c001b354:	5f                   	pop    edi
c001b355:	5d                   	pop    ebp
c001b356:	c3                   	ret    
c001b357:	90                   	nop

c001b358 <ISO9660::close(void*)>:
c001b358:	83 ec 0c             	sub    esp,0xc
c001b35b:	b8 04 00 00 00       	mov    eax,0x4
c001b360:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b364:	85 d2                	test   edx,edx
c001b366:	74 1b                	je     c001b383 <ISO9660::close(void*)+0x2b>
c001b368:	89 d0                	mov    eax,edx
c001b36a:	b9 02 00 00 00       	mov    ecx,0x2
c001b36f:	99                   	cdq    
c001b370:	83 ec 0c             	sub    esp,0xc
c001b373:	f7 f9                	idiv   ecx
c001b375:	83 e8 32             	sub    eax,0x32
c001b378:	50                   	push   eax
c001b379:	e8 16 b4 fe ff       	call   c0006794 <iso_close>
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	31 c0                	xor    eax,eax
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	c3                   	ret    
c001b387:	90                   	nop

c001b388 <ISO9660::openDir(char const*, void**)>:
c001b388:	56                   	push   esi
c001b389:	53                   	push   ebx
c001b38a:	50                   	push   eax
c001b38b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b38f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b393:	85 db                	test   ebx,ebx
c001b395:	0f 84 bd 00 00 00    	je     c001b458 <ISO9660::openDir(char const*, void**)+0xd0>
c001b39b:	85 f6                	test   esi,esi
c001b39d:	0f 84 b5 00 00 00    	je     c001b458 <ISO9660::openDir(char const*, void**)+0xd0>
c001b3a3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b3a5:	38 15 a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,dl
c001b3ab:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b3b2:	74 1b                	je     c001b3cf <ISO9660::openDir(char const*, void**)+0x47>
c001b3b4:	85 c0                	test   eax,eax
c001b3b6:	74 10                	je     c001b3c8 <ISO9660::openDir(char const*, void**)+0x40>
c001b3b8:	83 ec 0c             	sub    esp,0xc
c001b3bb:	68 69 3e 02 c0       	push   0xc0023e69
c001b3c0:	e8 21 39 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	8a 03                	mov    al,BYTE PTR [ebx]
c001b3ca:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b3cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b3d2:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b3d9:	85 c0                	test   eax,eax
c001b3db:	74 10                	je     c001b3ed <ISO9660::openDir(char const*, void**)+0x65>
c001b3dd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b3e4:	74 1a                	je     c001b400 <ISO9660::openDir(char const*, void**)+0x78>
c001b3e6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b3ed:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b3f4:	83 ec 0c             	sub    esp,0xc
c001b3f7:	50                   	push   eax
c001b3f8:	e8 4a b8 fe ff       	call   c0006c47 <init_percd>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	50                   	push   eax
c001b401:	83 c3 03             	add    ebx,0x3
c001b404:	50                   	push   eax
c001b405:	6a 01                	push   0x1
c001b407:	53                   	push   ebx
c001b408:	e8 fd b2 fe ff       	call   c000670a <iso_open>
c001b40d:	83 c4 10             	add    esp,0x10
c001b410:	83 f8 ff             	cmp    eax,0xffffffff
c001b413:	89 c3                	mov    ebx,eax
c001b415:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b41a:	75 1c                	jne    c001b438 <ISO9660::openDir(char const*, void**)+0xb0>
c001b41c:	53                   	push   ebx
c001b41d:	53                   	push   ebx
c001b41e:	68 11 3f 02 c0       	push   0xc0023f11
c001b423:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b429:	e8 a0 60 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001b42e:	83 c4 10             	add    esp,0x10
c001b431:	b8 01 00 00 00       	mov    eax,0x1
c001b436:	eb 25                	jmp    c001b45d <ISO9660::openDir(char const*, void**)+0xd5>
c001b438:	51                   	push   ecx
c001b439:	01 db                	add    ebx,ebx
c001b43b:	51                   	push   ecx
c001b43c:	83 c3 65             	add    ebx,0x65
c001b43f:	68 24 3f 02 c0       	push   0xc0023f24
c001b444:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b44a:	e8 7f 60 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	31 c0                	xor    eax,eax
c001b454:	89 1e                	mov    DWORD PTR [esi],ebx
c001b456:	eb 05                	jmp    c001b45d <ISO9660::openDir(char const*, void**)+0xd5>
c001b458:	b8 04 00 00 00       	mov    eax,0x4
c001b45d:	5a                   	pop    edx
c001b45e:	5b                   	pop    ebx
c001b45f:	5e                   	pop    esi
c001b460:	c3                   	ret    
c001b461:	90                   	nop

c001b462 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b462:	55                   	push   ebp
c001b463:	57                   	push   edi
c001b464:	56                   	push   esi
c001b465:	53                   	push   ebx
c001b466:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b46c:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b473:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b47a:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b481:	85 db                	test   ebx,ebx
c001b483:	0f 84 e4 00 00 00    	je     c001b56d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b489:	85 ed                	test   ebp,ebp
c001b48b:	0f 84 dc 00 00 00    	je     c001b56d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b491:	83 ec 0c             	sub    esp,0xc
c001b494:	68 37 3f 02 c0       	push   0xc0023f37
c001b499:	e8 b0 ba fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b49e:	89 d8                	mov    eax,ebx
c001b4a0:	b9 02 00 00 00       	mov    ecx,0x2
c001b4a5:	99                   	cdq    
c001b4a6:	f7 f9                	idiv   ecx
c001b4a8:	83 e8 32             	sub    eax,0x32
c001b4ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4ae:	e8 1c b5 fe ff       	call   c00069cf <iso_readdir>
c001b4b3:	83 c4 10             	add    esp,0x10
c001b4b6:	85 c0                	test   eax,eax
c001b4b8:	89 c3                	mov    ebx,eax
c001b4ba:	75 38                	jne    c001b4f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b4bc:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b4c1:	53                   	push   ebx
c001b4c2:	53                   	push   ebx
c001b4c3:	68 42 3f 02 c0       	push   0xc0023f42
c001b4c8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b4ce:	e8 fb 5f ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001b4d3:	83 c4 0c             	add    esp,0xc
c001b4d6:	68 10 01 00 00       	push   0x110
c001b4db:	6a 00                	push   0x0
c001b4dd:	57                   	push   edi
c001b4de:	e8 0d 50 fe ff       	call   c00004f0 <memset>
c001b4e3:	83 c4 10             	add    esp,0x10
c001b4e6:	b8 01 00 00 00       	mov    eax,0x1
c001b4eb:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b4f2:	eb 7e                	jmp    c001b572 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b4f4:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b4fa:	8d 70 08             	lea    esi,[eax+0x8]
c001b4fd:	83 ec 0c             	sub    esp,0xc
c001b500:	56                   	push   esi
c001b501:	e8 7a 50 fe ff       	call   c0000580 <strlen>
c001b506:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b50e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b512:	83 c4 10             	add    esp,0x10
c001b515:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b519:	75 0a                	jne    c001b525 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b51b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b51e:	b8 02 00 00 00       	mov    eax,0x2
c001b523:	74 05                	je     c001b52a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b525:	b8 01 00 00 00       	mov    eax,0x1
c001b52a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b52e:	50                   	push   eax
c001b52f:	50                   	push   eax
c001b530:	56                   	push   esi
c001b531:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b535:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b539:	50                   	push   eax
c001b53a:	e8 11 51 fe ff       	call   c0000650 <strcpy>
c001b53f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b546:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b548:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b54f:	5a                   	pop    edx
c001b550:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b555:	59                   	pop    ecx
c001b556:	68 55 3f 02 c0       	push   0xc0023f55
c001b55b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b561:	e8 68 5f ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001b566:	83 c4 10             	add    esp,0x10
c001b569:	31 c0                	xor    eax,eax
c001b56b:	eb 05                	jmp    c001b572 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b56d:	b8 04 00 00 00       	mov    eax,0x4
c001b572:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b578:	5b                   	pop    ebx
c001b579:	5e                   	pop    esi
c001b57a:	5f                   	pop    edi
c001b57b:	5d                   	pop    ebp
c001b57c:	c3                   	ret    

c001b57d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b57d:	57                   	push   edi
c001b57e:	56                   	push   esi
c001b57f:	53                   	push   ebx
c001b580:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b584:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b588:	39 35 a4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a4,esi
c001b58e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b592:	0f be cb             	movsx  ecx,bl
c001b595:	75 0b                	jne    c001b5a2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b597:	0f be 05 04 52 02 c0 	movsx  eax,BYTE PTR ds:0xc0025204
c001b59e:	39 c8                	cmp    eax,ecx
c001b5a0:	74 47                	je     c001b5e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b5a2:	83 ec 0c             	sub    esp,0xc
c001b5a5:	31 d2                	xor    edx,edx
c001b5a7:	68 c0 d8 02 c0       	push   0xc002d8c0
c001b5ac:	6a 01                	push   0x1
c001b5ae:	52                   	push   edx
c001b5af:	56                   	push   esi
c001b5b0:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001b5b7:	e8 00 eb fe ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c001b5bc:	83 c4 20             	add    esp,0x20
c001b5bf:	85 c0                	test   eax,eax
c001b5c1:	75 0e                	jne    c001b5d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b5c3:	89 35 a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,esi
c001b5c9:	88 1d 04 52 02 c0    	mov    BYTE PTR ds:0xc0025204,bl
c001b5cf:	eb 18                	jmp    c001b5e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b5d1:	50                   	push   eax
c001b5d2:	68 00 08 00 00       	push   0x800
c001b5d7:	6a 00                	push   0x0
c001b5d9:	57                   	push   edi
c001b5da:	e8 11 4f fe ff       	call   c00004f0 <memset>
c001b5df:	83 c4 10             	add    esp,0x10
c001b5e2:	b8 01 00 00 00       	mov    eax,0x1
c001b5e7:	eb 0e                	jmp    c001b5f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b5e9:	be c0 d8 02 c0       	mov    esi,0xc002d8c0
c001b5ee:	b9 00 08 00 00       	mov    ecx,0x800
c001b5f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5f5:	31 c0                	xor    eax,eax
c001b5f7:	5b                   	pop    ebx
c001b5f8:	5e                   	pop    esi
c001b5f9:	5f                   	pop    edi
c001b5fa:	c3                   	ret    
c001b5fb:	90                   	nop

c001b5fc <ISO9660::tryMount(LogicalDisk*, int)>:
c001b5fc:	53                   	push   ebx
c001b5fd:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b603:	c7 05 a4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8a4,0xdeadbeef
c001b60d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b614:	8d 58 41             	lea    ebx,[eax+0x41]
c001b617:	0f be db             	movsx  ebx,bl
c001b61a:	53                   	push   ebx
c001b61b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b61f:	50                   	push   eax
c001b620:	6a 10                	push   0x10
c001b622:	e8 56 ff ff ff       	call   c001b57d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b627:	83 c4 10             	add    esp,0x10
c001b62a:	31 d2                	xor    edx,edx
c001b62c:	85 c0                	test   eax,eax
c001b62e:	75 33                	jne    c001b663 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b630:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b635:	75 2c                	jne    c001b663 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b637:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b63c:	75 25                	jne    c001b663 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b63e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b643:	75 1e                	jne    c001b663 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b645:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b64a:	75 17                	jne    c001b663 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b64c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b651:	75 10                	jne    c001b663 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b653:	83 ec 0c             	sub    esp,0xc
c001b656:	53                   	push   ebx
c001b657:	e8 eb b5 fe ff       	call   c0006c47 <init_percd>
c001b65c:	83 c4 10             	add    esp,0x10
c001b65f:	40                   	inc    eax
c001b660:	0f 95 c2             	setne  dl
c001b663:	81 c4 08 08 00 00    	add    esp,0x808
c001b669:	88 d0                	mov    al,dl
c001b66b:	5b                   	pop    ebx
c001b66c:	c3                   	ret    
c001b66d:	90                   	nop

c001b66e <ISO9660::ISO9660()>:
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b675:	83 ec 0c             	sub    esp,0xc
c001b678:	50                   	push   eax
c001b679:	e8 d8 c6 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b67e:	83 c4 10             	add    esp,0x10
c001b681:	ba 70 3f 02 c0       	mov    edx,0xc0023f70
c001b686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b68a:	89 10                	mov    DWORD PTR [eax],edx
c001b68c:	e8 c8 b6 fe ff       	call   c0006d59 <fs_iso9660_init>
c001b691:	90                   	nop
c001b692:	83 c4 0c             	add    esp,0xc
c001b695:	c3                   	ret    

c001b696 <SoundCard::beginPlayback()>:
c001b696:	c7 44 24 04 d4 3f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023fd4
c001b69e:	e9 43 36 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c001b6a3:	90                   	nop

c001b6a4 <SoundCard::stopPlayback()>:
c001b6a4:	c7 44 24 04 d4 3f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023fd4
c001b6ac:	e9 35 36 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c001b6b1:	90                   	nop

c001b6b2 <SoundCard::SoundCard(char const*)>:
c001b6b2:	83 ec 1c             	sub    esp,0x1c
c001b6b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b9:	83 ec 08             	sub    esp,0x8
c001b6bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6c0:	50                   	push   eax
c001b6c1:	e8 02 db fe ff       	call   c00091c8 <Device::Device(char const*)>
c001b6c6:	83 c4 10             	add    esp,0x10
c001b6c9:	ba 20 40 02 c0       	mov    edx,0xc0024020
c001b6ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d2:	89 10                	mov    DWORD PTR [eax],edx
c001b6d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b6df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6e3:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f1:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6ff:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b70d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b717:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b71f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b724:	7f 1a                	jg     c001b740 <SoundCard::SoundCard(char const*)+0x8e>
c001b726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b72a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b72e:	83 c2 54             	add    edx,0x54
c001b731:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b739:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b73e:	eb df                	jmp    c001b71f <SoundCard::SoundCard(char const*)+0x6d>
c001b740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b744:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b74b:	90                   	nop
c001b74c:	83 c4 1c             	add    esp,0x1c
c001b74f:	c3                   	ret    

c001b750 <SoundCard::~SoundCard()>:
c001b750:	83 ec 0c             	sub    esp,0xc
c001b753:	ba 20 40 02 c0       	mov    edx,0xc0024020
c001b758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75c:	89 10                	mov    DWORD PTR [eax],edx
c001b75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	50                   	push   eax
c001b766:	e8 fd d7 fe ff       	call   c0008f68 <Device::~Device()>
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	90                   	nop
c001b76f:	83 c4 0c             	add    esp,0xc
c001b772:	c3                   	ret    
c001b773:	90                   	nop

c001b774 <SoundCard::~SoundCard()>:
c001b774:	83 ec 0c             	sub    esp,0xc
c001b777:	83 ec 0c             	sub    esp,0xc
c001b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b77e:	e8 cd ff ff ff       	call   c001b750 <SoundCard::~SoundCard()>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	83 ec 08             	sub    esp,0x8
c001b789:	68 e8 01 00 00       	push   0x1e8
c001b78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b792:	e8 14 0f ff ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	83 c4 0c             	add    esp,0xc
c001b79d:	c3                   	ret    

c001b79e <SoundCard::configureRates(int, int, int)>:
c001b79e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b7a2:	31 c0                	xor    eax,eax
c001b7a4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b7ab:	75 20                	jne    c001b7cd <SoundCard::configureRates(int, int, int)+0x2f>
c001b7ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7b1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b7b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7bb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b7cb:	b0 01                	mov    al,0x1
c001b7cd:	c3                   	ret    

c001b7ce <SoundCard::getSamples16(int, short*)>:
c001b7ce:	55                   	push   ebp
c001b7cf:	57                   	push   edi
c001b7d0:	31 ff                	xor    edi,edi
c001b7d2:	56                   	push   esi
c001b7d3:	53                   	push   ebx
c001b7d4:	31 db                	xor    ebx,ebx
c001b7d6:	83 ec 10             	sub    esp,0x10
c001b7d9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b7dd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7e1:	8d 04 36             	lea    eax,[esi+esi*1]
c001b7e4:	50                   	push   eax
c001b7e5:	6a 00                	push   0x0
c001b7e7:	55                   	push   ebp
c001b7e8:	e8 03 4d fe ff       	call   c00004f0 <memset>
c001b7ed:	83 c4 10             	add    esp,0x10
c001b7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f4:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001b7fb:	85 c0                	test   eax,eax
c001b7fd:	74 1a                	je     c001b819 <SoundCard::getSamples16(int, short*)+0x4b>
c001b7ff:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b803:	75 14                	jne    c001b819 <SoundCard::getSamples16(int, short*)+0x4b>
c001b805:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b809:	55                   	push   ebp
c001b80a:	56                   	push   esi
c001b80b:	50                   	push   eax
c001b80c:	e8 8f 03 00 00       	call   c001bba0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b811:	83 c4 10             	add    esp,0x10
c001b814:	39 c3                	cmp    ebx,eax
c001b816:	0f 4c d8             	cmovl  ebx,eax
c001b819:	47                   	inc    edi
c001b81a:	83 ff 20             	cmp    edi,0x20
c001b81d:	75 d1                	jne    c001b7f0 <SoundCard::getSamples16(int, short*)+0x22>
c001b81f:	83 c4 0c             	add    esp,0xc
c001b822:	89 d8                	mov    eax,ebx
c001b824:	5b                   	pop    ebx
c001b825:	5e                   	pop    esi
c001b826:	5f                   	pop    edi
c001b827:	5d                   	pop    ebp
c001b828:	c3                   	ret    
c001b829:	90                   	nop

c001b82a <SoundCard::getSamples32(int, int*)>:
c001b82a:	55                   	push   ebp
c001b82b:	57                   	push   edi
c001b82c:	31 ff                	xor    edi,edi
c001b82e:	56                   	push   esi
c001b82f:	31 f6                	xor    esi,esi
c001b831:	53                   	push   ebx
c001b832:	83 ec 10             	sub    esp,0x10
c001b835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b839:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b83d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b841:	c1 e0 02             	shl    eax,0x2
c001b844:	50                   	push   eax
c001b845:	6a 00                	push   0x0
c001b847:	55                   	push   ebp
c001b848:	e8 a3 4c fe ff       	call   c00004f0 <memset>
c001b84d:	83 c4 10             	add    esp,0x10
c001b850:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b857:	85 c0                	test   eax,eax
c001b859:	74 1a                	je     c001b875 <SoundCard::getSamples32(int, int*)+0x4b>
c001b85b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b85f:	75 14                	jne    c001b875 <SoundCard::getSamples32(int, int*)+0x4b>
c001b861:	53                   	push   ebx
c001b862:	55                   	push   ebp
c001b863:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b867:	50                   	push   eax
c001b868:	e8 03 04 00 00       	call   c001bc70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b86d:	83 c4 10             	add    esp,0x10
c001b870:	39 c6                	cmp    esi,eax
c001b872:	0f 4c f0             	cmovl  esi,eax
c001b875:	47                   	inc    edi
c001b876:	83 ff 20             	cmp    edi,0x20
c001b879:	75 d5                	jne    c001b850 <SoundCard::getSamples32(int, int*)+0x26>
c001b87b:	85 f6                	test   esi,esi
c001b87d:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b884:	75 0f                	jne    c001b895 <SoundCard::getSamples32(int, int*)+0x6b>
c001b886:	85 c0                	test   eax,eax
c001b888:	74 1b                	je     c001b8a5 <SoundCard::getSamples32(int, int*)+0x7b>
c001b88a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b88c:	83 ec 0c             	sub    esp,0xc
c001b88f:	53                   	push   ebx
c001b890:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b893:	eb 0d                	jmp    c001b8a2 <SoundCard::getSamples32(int, int*)+0x78>
c001b895:	85 c0                	test   eax,eax
c001b897:	75 0c                	jne    c001b8a5 <SoundCard::getSamples32(int, int*)+0x7b>
c001b899:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b89b:	83 ec 0c             	sub    esp,0xc
c001b89e:	53                   	push   ebx
c001b89f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b8a2:	83 c4 10             	add    esp,0x10
c001b8a5:	83 c4 0c             	add    esp,0xc
c001b8a8:	89 f0                	mov    eax,esi
c001b8aa:	5b                   	pop    ebx
c001b8ab:	5e                   	pop    esi
c001b8ac:	5f                   	pop    edi
c001b8ad:	5d                   	pop    ebp
c001b8ae:	c3                   	ret    
c001b8af:	90                   	nop

c001b8b0 <SoundCard::addChannel(SoundPort*)>:
c001b8b0:	83 ec 0c             	sub    esp,0xc
c001b8b3:	31 c0                	xor    eax,eax
c001b8b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8b9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b8c1:	74 1b                	je     c001b8de <SoundCard::addChannel(SoundPort*)+0x2e>
c001b8c3:	40                   	inc    eax
c001b8c4:	83 f8 20             	cmp    eax,0x20
c001b8c7:	75 f0                	jne    c001b8b9 <SoundCard::addChannel(SoundPort*)+0x9>
c001b8c9:	83 ec 0c             	sub    esp,0xc
c001b8cc:	68 f9 3f 02 c0       	push   0xc0023ff9
c001b8d1:	e8 10 34 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b8d6:	83 c4 10             	add    esp,0x10
c001b8d9:	83 c8 ff             	or     eax,0xffffffff
c001b8dc:	eb 0b                	jmp    c001b8e9 <SoundCard::addChannel(SoundPort*)+0x39>
c001b8de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8e2:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b8e9:	83 c4 0c             	add    esp,0xc
c001b8ec:	c3                   	ret    
c001b8ed:	90                   	nop

c001b8ee <SoundCard::removeChannel(int)>:
c001b8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8f6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b901:	c3                   	ret    
c001b902:	66 90                	xchg   ax,ax

c001b904 <SoundPort::SoundPort(int, int, int, int)>:
c001b904:	83 ec 0c             	sub    esp,0xc
c001b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b916:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b922:	89 10                	mov    DWORD PTR [eax],edx
c001b924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b92c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b933:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b937:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b93a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b93f:	75 13                	jne    c001b954 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b945:	8b 00                	mov    eax,DWORD PTR [eax]
c001b947:	05 a0 0f 00 00       	add    eax,0xfa0
c001b94c:	d1 e0                	shl    eax,1
c001b94e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b952:	66 90                	xchg   ax,ax
c001b954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b958:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b95c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b963:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b96e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b971:	c1 e0 02             	shl    eax,0x2
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	50                   	push   eax
c001b978:	e8 23 30 ff ff       	call   c000e9a0 <malloc>
c001b97d:	83 c4 10             	add    esp,0x10
c001b980:	89 c2                	mov    edx,eax
c001b982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b986:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b989:	90                   	nop
c001b98a:	83 c4 0c             	add    esp,0xc
c001b98d:	c3                   	ret    
c001b98e:	66 90                	xchg   ax,ax

c001b990 <SoundPort::~SoundPort()>:
c001b990:	83 ec 0c             	sub    esp,0xc
c001b993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b997:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b99a:	85 c0                	test   eax,eax
c001b99c:	74 1e                	je     c001b9bc <SoundPort::~SoundPort()+0x2c>
c001b99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b9a5:	83 ec 0c             	sub    esp,0xc
c001b9a8:	50                   	push   eax
c001b9a9:	e8 02 30 ff ff       	call   c000e9b0 <free>
c001b9ae:	83 c4 10             	add    esp,0x10
c001b9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b9bc:	90                   	nop
c001b9bd:	83 c4 0c             	add    esp,0xc
c001b9c0:	c3                   	ret    
c001b9c1:	90                   	nop
c001b9c2:	66 90                	xchg   ax,ax

c001b9c4 <SoundPort::unpause()>:
c001b9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9c8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b9cc:	c3                   	ret    
c001b9cd:	90                   	nop
c001b9ce:	66 90                	xchg   ax,ax

c001b9d0 <SoundPort::pause()>:
c001b9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9d4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b9d8:	c3                   	ret    
c001b9d9:	90                   	nop
c001b9da:	66 90                	xchg   ax,ax

c001b9dc <SoundPort::getBufferUsed()>:
c001b9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b9e3:	c3                   	ret    

c001b9e4 <SoundPort::getBufferSize()>:
c001b9e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b9eb:	c3                   	ret    

c001b9ec <SoundPort::buffer8(signed char*, int)>:
c001b9ec:	55                   	push   ebp
c001b9ed:	57                   	push   edi
c001b9ee:	56                   	push   esi
c001b9ef:	53                   	push   ebx
c001b9f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9f4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b9f8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b9fb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b9fe:	74 70                	je     c001ba70 <SoundPort::buffer8(signed char*, int)+0x84>
c001ba00:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba04:	85 c9                	test   ecx,ecx
c001ba06:	7e 68                	jle    c001ba70 <SoundPort::buffer8(signed char*, int)+0x84>
c001ba08:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001ba0c:	8d 48 01             	lea    ecx,[eax+0x1]
c001ba0f:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ba12:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ba15:	89 f1                	mov    ecx,esi
c001ba17:	c1 e1 18             	shl    ecx,0x18
c001ba1a:	29 f1                	sub    ecx,esi
c001ba1c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ba1f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba22:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba25:	74 51                	je     c001ba78 <SoundPort::buffer8(signed char*, int)+0x8c>
c001ba27:	31 ff                	xor    edi,edi
c001ba29:	eb 25                	jmp    c001ba50 <SoundPort::buffer8(signed char*, int)+0x64>
c001ba2b:	90                   	nop
c001ba2c:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001ba31:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ba34:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ba37:	89 f3                	mov    ebx,esi
c001ba39:	c1 e3 18             	shl    ebx,0x18
c001ba3c:	29 f3                	sub    ebx,esi
c001ba3e:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001ba41:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ba44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba4a:	74 1c                	je     c001ba68 <SoundPort::buffer8(signed char*, int)+0x7c>
c001ba4c:	89 c7                	mov    edi,eax
c001ba4e:	66 90                	xchg   ax,ax
c001ba50:	8d 47 01             	lea    eax,[edi+0x1]
c001ba53:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ba57:	75 d3                	jne    c001ba2c <SoundPort::buffer8(signed char*, int)+0x40>
c001ba59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba60:	5b                   	pop    ebx
c001ba61:	5e                   	pop    esi
c001ba62:	5f                   	pop    edi
c001ba63:	5d                   	pop    ebp
c001ba64:	c3                   	ret    
c001ba65:	8d 76 00             	lea    esi,[esi+0x0]
c001ba68:	5b                   	pop    ebx
c001ba69:	8d 47 02             	lea    eax,[edi+0x2]
c001ba6c:	5e                   	pop    esi
c001ba6d:	5f                   	pop    edi
c001ba6e:	5d                   	pop    ebp
c001ba6f:	c3                   	ret    
c001ba70:	5b                   	pop    ebx
c001ba71:	31 c0                	xor    eax,eax
c001ba73:	5e                   	pop    esi
c001ba74:	5f                   	pop    edi
c001ba75:	5d                   	pop    ebp
c001ba76:	c3                   	ret    
c001ba77:	90                   	nop
c001ba78:	b8 01 00 00 00       	mov    eax,0x1
c001ba7d:	eb e1                	jmp    c001ba60 <SoundPort::buffer8(signed char*, int)+0x74>
c001ba7f:	90                   	nop

c001ba80 <SoundPort::buffer16(short*, int)>:
c001ba80:	55                   	push   ebp
c001ba81:	57                   	push   edi
c001ba82:	56                   	push   esi
c001ba83:	53                   	push   ebx
c001ba84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba88:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ba8c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ba8f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ba92:	74 70                	je     c001bb04 <SoundPort::buffer16(short*, int)+0x84>
c001ba94:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba98:	85 c9                	test   ecx,ecx
c001ba9a:	7e 68                	jle    c001bb04 <SoundPort::buffer16(short*, int)+0x84>
c001ba9c:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001baa0:	8d 48 01             	lea    ecx,[eax+0x1]
c001baa3:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001baa6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001baa9:	89 f1                	mov    ecx,esi
c001baab:	c1 e1 10             	shl    ecx,0x10
c001baae:	29 f1                	sub    ecx,esi
c001bab0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001bab3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bab6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bab9:	74 51                	je     c001bb0c <SoundPort::buffer16(short*, int)+0x8c>
c001babb:	31 ff                	xor    edi,edi
c001babd:	eb 25                	jmp    c001bae4 <SoundPort::buffer16(short*, int)+0x64>
c001babf:	90                   	nop
c001bac0:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001bac5:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bac8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001bacb:	89 f3                	mov    ebx,esi
c001bacd:	c1 e3 10             	shl    ebx,0x10
c001bad0:	29 f3                	sub    ebx,esi
c001bad2:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001bad5:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001bad8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001badb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bade:	74 1c                	je     c001bafc <SoundPort::buffer16(short*, int)+0x7c>
c001bae0:	89 c7                	mov    edi,eax
c001bae2:	66 90                	xchg   ax,ax
c001bae4:	8d 47 01             	lea    eax,[edi+0x1]
c001bae7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001baeb:	75 d3                	jne    c001bac0 <SoundPort::buffer16(short*, int)+0x40>
c001baed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001baf1:	8d 76 00             	lea    esi,[esi+0x0]
c001baf4:	5b                   	pop    ebx
c001baf5:	5e                   	pop    esi
c001baf6:	5f                   	pop    edi
c001baf7:	5d                   	pop    ebp
c001baf8:	c3                   	ret    
c001baf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bafc:	5b                   	pop    ebx
c001bafd:	8d 47 02             	lea    eax,[edi+0x2]
c001bb00:	5e                   	pop    esi
c001bb01:	5f                   	pop    edi
c001bb02:	5d                   	pop    ebp
c001bb03:	c3                   	ret    
c001bb04:	5b                   	pop    ebx
c001bb05:	31 c0                	xor    eax,eax
c001bb07:	5e                   	pop    esi
c001bb08:	5f                   	pop    edi
c001bb09:	5d                   	pop    ebp
c001bb0a:	c3                   	ret    
c001bb0b:	90                   	nop
c001bb0c:	b8 01 00 00 00       	mov    eax,0x1
c001bb11:	eb e1                	jmp    c001baf4 <SoundPort::buffer16(short*, int)+0x74>
c001bb13:	90                   	nop

c001bb14 <SoundPort::buffer32(int*, int)>:
c001bb14:	55                   	push   ebp
c001bb15:	57                   	push   edi
c001bb16:	56                   	push   esi
c001bb17:	53                   	push   ebx
c001bb18:	83 ec 04             	sub    esp,0x4
c001bb1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb23:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bb27:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb2a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bb2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb30:	74 5a                	je     c001bb8c <SoundPort::buffer32(int*, int)+0x78>
c001bb32:	85 c0                	test   eax,eax
c001bb34:	7e 56                	jle    c001bb8c <SoundPort::buffer32(int*, int)+0x78>
c001bb36:	8d 71 01             	lea    esi,[ecx+0x1]
c001bb39:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bb3c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001bb3f:	8b 37                	mov    esi,DWORD PTR [edi]
c001bb41:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001bb44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bb4a:	74 4c                	je     c001bb98 <SoundPort::buffer32(int*, int)+0x84>
c001bb4c:	31 f6                	xor    esi,esi
c001bb4e:	eb 1c                	jmp    c001bb6c <SoundPort::buffer32(int*, int)+0x58>
c001bb50:	8d 69 01             	lea    ebp,[ecx+0x1]
c001bb53:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001bb56:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001bb59:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001bb5c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001bb60:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb63:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bb66:	74 18                	je     c001bb80 <SoundPort::buffer32(int*, int)+0x6c>
c001bb68:	89 de                	mov    esi,ebx
c001bb6a:	66 90                	xchg   ax,ax
c001bb6c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001bb6f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001bb72:	75 dc                	jne    c001bb50 <SoundPort::buffer32(int*, int)+0x3c>
c001bb74:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bb77:	90                   	nop
c001bb78:	83 c4 04             	add    esp,0x4
c001bb7b:	5b                   	pop    ebx
c001bb7c:	5e                   	pop    esi
c001bb7d:	5f                   	pop    edi
c001bb7e:	5d                   	pop    ebp
c001bb7f:	c3                   	ret    
c001bb80:	8d 46 02             	lea    eax,[esi+0x2]
c001bb83:	83 c4 04             	add    esp,0x4
c001bb86:	5b                   	pop    ebx
c001bb87:	5e                   	pop    esi
c001bb88:	5f                   	pop    edi
c001bb89:	5d                   	pop    ebp
c001bb8a:	c3                   	ret    
c001bb8b:	90                   	nop
c001bb8c:	83 c4 04             	add    esp,0x4
c001bb8f:	31 c0                	xor    eax,eax
c001bb91:	5b                   	pop    ebx
c001bb92:	5e                   	pop    esi
c001bb93:	5f                   	pop    edi
c001bb94:	5d                   	pop    ebp
c001bb95:	c3                   	ret    
c001bb96:	66 90                	xchg   ax,ax
c001bb98:	b8 01 00 00 00       	mov    eax,0x1
c001bb9d:	eb d9                	jmp    c001bb78 <SoundPort::buffer32(int*, int)+0x64>
c001bb9f:	90                   	nop

c001bba0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001bba0:	55                   	push   ebp
c001bba1:	57                   	push   edi
c001bba2:	56                   	push   esi
c001bba3:	53                   	push   ebx
c001bba4:	83 ec 0c             	sub    esp,0xc
c001bba7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bbab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbaf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bbb3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bbb7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001bbbd:	39 03                	cmp    DWORD PTR [ebx],eax
c001bbbf:	74 13                	je     c001bbd4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001bbc1:	83 ec 0c             	sub    esp,0xc
c001bbc4:	68 4c 40 02 c0       	push   0xc002404c
c001bbc9:	e8 18 31 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbd4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001bbda:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bbdd:	74 11                	je     c001bbf0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001bbdf:	83 ec 0c             	sub    esp,0xc
c001bbe2:	68 8b 40 02 c0       	push   0xc002408b
c001bbe7:	e8 fa 30 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bbec:	83 c4 10             	add    esp,0x10
c001bbef:	90                   	nop
c001bbf0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001bbf6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bbf9:	74 11                	je     c001bc0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001bbfb:	83 ec 0c             	sub    esp,0xc
c001bbfe:	68 8b 40 02 c0       	push   0xc002408b
c001bc03:	e8 de 30 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bc08:	83 c4 10             	add    esp,0x10
c001bc0b:	90                   	nop
c001bc0c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001bc0f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001bc13:	85 f6                	test   esi,esi
c001bc15:	7e 2d                	jle    c001bc44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001bc17:	31 c0                	xor    eax,eax
c001bc19:	8d 76 00             	lea    esi,[esi+0x0]
c001bc1c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bc1f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001bc22:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001bc28:	85 c9                	test   ecx,ecx
c001bc2a:	0f 49 d1             	cmovns edx,ecx
c001bc2d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001bc31:	c1 fa 0f             	sar    edx,0xf
c001bc34:	01 d1                	add    ecx,edx
c001bc36:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001bc3a:	83 c0 01             	add    eax,0x1
c001bc3d:	39 f0                	cmp    eax,esi
c001bc3f:	75 db                	jne    c001bc1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001bc41:	8d 76 00             	lea    esi,[esi+0x0]
c001bc44:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bc47:	83 ec 04             	sub    esp,0x4
c001bc4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bc4d:	29 f0                	sub    eax,esi
c001bc4f:	c1 e0 02             	shl    eax,0x2
c001bc52:	50                   	push   eax
c001bc53:	8d 04 b2             	lea    eax,[edx+esi*4]
c001bc56:	50                   	push   eax
c001bc57:	52                   	push   edx
c001bc58:	e8 73 47 fe ff       	call   c00003d0 <memmove>
c001bc5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bc60:	29 f0                	sub    eax,esi
c001bc62:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bc65:	83 c4 1c             	add    esp,0x1c
c001bc68:	89 f0                	mov    eax,esi
c001bc6a:	5b                   	pop    ebx
c001bc6b:	5e                   	pop    esi
c001bc6c:	5f                   	pop    edi
c001bc6d:	5d                   	pop    ebp
c001bc6e:	c3                   	ret    
c001bc6f:	90                   	nop

c001bc70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001bc70:	55                   	push   ebp
c001bc71:	57                   	push   edi
c001bc72:	56                   	push   esi
c001bc73:	53                   	push   ebx
c001bc74:	83 ec 0c             	sub    esp,0xc
c001bc77:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bc7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc7f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001bc83:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bc87:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001bc8d:	39 03                	cmp    DWORD PTR [ebx],eax
c001bc8f:	74 13                	je     c001bca4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001bc91:	83 ec 0c             	sub    esp,0xc
c001bc94:	68 6c 40 02 c0       	push   0xc002406c
c001bc99:	e8 48 30 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bc9e:	83 c4 10             	add    esp,0x10
c001bca1:	8d 76 00             	lea    esi,[esi+0x0]
c001bca4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001bcaa:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bcad:	74 11                	je     c001bcc0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001bcaf:	83 ec 0c             	sub    esp,0xc
c001bcb2:	68 a7 40 02 c0       	push   0xc00240a7
c001bcb7:	e8 2a 30 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	90                   	nop
c001bcc0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001bcc6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bcc9:	74 11                	je     c001bcdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001bccb:	83 ec 0c             	sub    esp,0xc
c001bcce:	68 a7 40 02 c0       	push   0xc00240a7
c001bcd3:	e8 0e 30 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bcd8:	83 c4 10             	add    esp,0x10
c001bcdb:	90                   	nop
c001bcdc:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001bcdf:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001bce3:	85 ff                	test   edi,edi
c001bce5:	7e 21                	jle    c001bd08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001bce7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001bcee:	31 c0                	xor    eax,eax
c001bcf0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bcf3:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001bcf6:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001bcf9:	01 d5                	add    ebp,edx
c001bcfb:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001bcfe:	83 c0 04             	add    eax,0x4
c001bd01:	39 c1                	cmp    ecx,eax
c001bd03:	75 eb                	jne    c001bcf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001bd05:	8d 76 00             	lea    esi,[esi+0x0]
c001bd08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bd0b:	83 ec 04             	sub    esp,0x4
c001bd0e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bd11:	29 f8                	sub    eax,edi
c001bd13:	c1 e0 02             	shl    eax,0x2
c001bd16:	50                   	push   eax
c001bd17:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bd1a:	50                   	push   eax
c001bd1b:	52                   	push   edx
c001bd1c:	e8 af 46 fe ff       	call   c00003d0 <memmove>
c001bd21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bd24:	29 f8                	sub    eax,edi
c001bd26:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bd29:	83 c4 1c             	add    esp,0x1c
c001bd2c:	89 f8                	mov    eax,edi
c001bd2e:	5b                   	pop    ebx
c001bd2f:	5e                   	pop    esi
c001bd30:	5f                   	pop    edi
c001bd31:	5d                   	pop    ebp
c001bd32:	c3                   	ret    
c001bd33:	90                   	nop

c001bd34 <PCI::open(int, int, void*)>:
c001bd34:	83 ec 18             	sub    esp,0x18
c001bd37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bd3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bd45:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd47:	50                   	push   eax
c001bd48:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bd4b:	31 c0                	xor    eax,eax
c001bd4d:	83 c4 1c             	add    esp,0x1c
c001bd50:	c3                   	ret    
c001bd51:	90                   	nop

c001bd52 <PCI::close(int, int, void*)>:
c001bd52:	31 c0                	xor    eax,eax
c001bd54:	c3                   	ret    
c001bd55:	90                   	nop

c001bd56 <PCI::PCI()>:
c001bd56:	83 ec 0c             	sub    esp,0xc
c001bd59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5d:	83 ec 08             	sub    esp,0x8
c001bd60:	68 c3 40 02 c0       	push   0xc00240c3
c001bd65:	50                   	push   eax
c001bd66:	e8 9d cb fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001bd6b:	83 c4 10             	add    esp,0x10
c001bd6e:	ba d0 41 02 c0       	mov    edx,0xc00241d0
c001bd73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd77:	89 10                	mov    DWORD PTR [eax],edx
c001bd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001bd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8b:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c001bd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd9a:	0f b6 d0             	movzx  edx,al
c001bd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bda1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bdb2:	0f b6 d0             	movzx  edx,al
c001bdb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdb9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bdc8:	8d 50 01             	lea    edx,[eax+0x1]
c001bdcb:	88 d1                	mov    cl,dl
c001bdcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdd1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001bdd7:	0f b6 d0             	movzx  edx,al
c001bdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdde:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bde2:	83 c9 c0             	or     ecx,0xffffffc0
c001bde5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bde9:	90                   	nop
c001bdea:	83 c4 0c             	add    esp,0xc
c001bded:	c3                   	ret    

c001bdee <PCI::readBAR8(unsigned int, int)>:
c001bdee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdf6:	f6 c2 01             	test   dl,0x1
c001bdf9:	74 07                	je     c001be02 <PCI::readBAR8(unsigned int, int)+0x14>
c001bdfb:	83 e2 fc             	and    edx,0xfffffffc
c001bdfe:	01 c2                	add    edx,eax
c001be00:	ec                   	in     al,dx
c001be01:	c3                   	ret    
c001be02:	83 e2 f0             	and    edx,0xfffffff0
c001be05:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001be08:	c3                   	ret    
c001be09:	90                   	nop

c001be0a <PCI::readBAR16(unsigned int, int)>:
c001be0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be12:	f6 c2 01             	test   dl,0x1
c001be15:	74 08                	je     c001be1f <PCI::readBAR16(unsigned int, int)+0x15>
c001be17:	83 e2 fc             	and    edx,0xfffffffc
c001be1a:	01 c2                	add    edx,eax
c001be1c:	66 ed                	in     ax,dx
c001be1e:	c3                   	ret    
c001be1f:	83 e2 f0             	and    edx,0xfffffff0
c001be22:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001be26:	c3                   	ret    
c001be27:	90                   	nop

c001be28 <PCI::readBAR32(unsigned int, int)>:
c001be28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be30:	f6 c2 01             	test   dl,0x1
c001be33:	74 07                	je     c001be3c <PCI::readBAR32(unsigned int, int)+0x14>
c001be35:	83 e2 fc             	and    edx,0xfffffffc
c001be38:	01 c2                	add    edx,eax
c001be3a:	ed                   	in     eax,dx
c001be3b:	c3                   	ret    
c001be3c:	83 e2 f0             	and    edx,0xfffffff0
c001be3f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001be42:	c3                   	ret    
c001be43:	90                   	nop

c001be44 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001be44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be50:	f6 c2 01             	test   dl,0x1
c001be53:	74 07                	je     c001be5c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001be55:	83 e2 fc             	and    edx,0xfffffffc
c001be58:	01 ca                	add    edx,ecx
c001be5a:	ee                   	out    dx,al
c001be5b:	c3                   	ret    
c001be5c:	83 e2 f0             	and    edx,0xfffffff0
c001be5f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001be62:	c3                   	ret    
c001be63:	90                   	nop

c001be64 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001be64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be70:	f6 c2 01             	test   dl,0x1
c001be73:	74 08                	je     c001be7d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001be75:	83 e2 fc             	and    edx,0xfffffffc
c001be78:	01 ca                	add    edx,ecx
c001be7a:	66 ef                	out    dx,ax
c001be7c:	c3                   	ret    
c001be7d:	83 e2 f0             	and    edx,0xfffffff0
c001be80:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001be84:	c3                   	ret    
c001be85:	90                   	nop

c001be86 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001be86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be92:	f6 c2 01             	test   dl,0x1
c001be95:	74 07                	je     c001be9e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001be97:	83 e2 fc             	and    edx,0xfffffffc
c001be9a:	01 ca                	add    edx,ecx
c001be9c:	ef                   	out    dx,eax
c001be9d:	c3                   	ret    
c001be9e:	83 e2 f0             	and    edx,0xfffffff0
c001bea1:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001bea4:	c3                   	ret    
c001bea5:	90                   	nop

c001bea6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bea6:	55                   	push   ebp
c001bea7:	57                   	push   edi
c001bea8:	56                   	push   esi
c001bea9:	53                   	push   ebx
c001beaa:	83 ec 0c             	sub    esp,0xc
c001bead:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001beb2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001beb6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001beba:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bebe:	83 fe 07             	cmp    esi,0x7
c001bec1:	76 10                	jbe    c001bed3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001bec3:	83 ec 0c             	sub    esp,0xc
c001bec6:	68 cb 40 02 c0       	push   0xc00240cb
c001becb:	e8 16 2e ff ff       	call   c000ece6 <KePanic(char const*)>
c001bed0:	83 c4 10             	add    esp,0x10
c001bed3:	0f b6 db             	movzx  ebx,bl
c001bed6:	83 fb 0f             	cmp    ebx,0xf
c001bed9:	76 10                	jbe    c001beeb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001bedb:	83 ec 0c             	sub    esp,0xc
c001bede:	68 fb 40 02 c0       	push   0xc00240fb
c001bee3:	e8 fe 2d ff ff       	call   c000ece6 <KePanic(char const*)>
c001bee8:	83 c4 10             	add    esp,0x10
c001beeb:	8d 04 36             	lea    eax,[esi+esi*1]
c001beee:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bef3:	83 c8 f0             	or     eax,0xfffffff0
c001bef6:	ee                   	out    dx,al
c001bef7:	ba fa 0c 00 00       	mov    edx,0xcfa
c001befc:	89 e8                	mov    eax,ebp
c001befe:	ee                   	out    dx,al
c001beff:	89 f9                	mov    ecx,edi
c001bf01:	89 d8                	mov    eax,ebx
c001bf03:	0f b6 d9             	movzx  ebx,cl
c001bf06:	83 c4 0c             	add    esp,0xc
c001bf09:	c1 e0 08             	shl    eax,0x8
c001bf0c:	83 e3 fc             	and    ebx,0xfffffffc
c001bf0f:	09 d8                	or     eax,ebx
c001bf11:	5b                   	pop    ebx
c001bf12:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bf17:	5e                   	pop    esi
c001bf18:	5f                   	pop    edi
c001bf19:	5d                   	pop    ebp
c001bf1a:	c3                   	ret    
c001bf1b:	90                   	nop

c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bf1c:	57                   	push   edi
c001bf1d:	56                   	push   esi
c001bf1e:	53                   	push   ebx
c001bf1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf2b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf2f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bf35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf39:	83 ff 01             	cmp    edi,0x1
c001bf3c:	75 3f                	jne    c001bf7d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bf3e:	89 de                	mov    esi,ebx
c001bf40:	0f b6 c0             	movzx  eax,al
c001bf43:	c1 e0 10             	shl    eax,0x10
c001bf46:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bf4c:	0f b6 c9             	movzx  ecx,cl
c001bf4f:	09 f0                	or     eax,esi
c001bf51:	c1 e1 08             	shl    ecx,0x8
c001bf54:	0f b6 d2             	movzx  edx,dl
c001bf57:	c1 e2 0b             	shl    edx,0xb
c001bf5a:	09 c8                	or     eax,ecx
c001bf5c:	09 d0                	or     eax,edx
c001bf5e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bf63:	0d 00 00 00 80       	or     eax,0x80000000
c001bf68:	ef                   	out    dx,eax
c001bf69:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bf6e:	ed                   	in     eax,dx
c001bf6f:	83 e3 02             	and    ebx,0x2
c001bf72:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bf79:	d3 e8                	shr    eax,cl
c001bf7b:	eb 44                	jmp    c001bfc1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bf7d:	83 ff 02             	cmp    edi,0x2
c001bf80:	75 2d                	jne    c001bfaf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bf82:	83 ec 0c             	sub    esp,0xc
c001bf85:	0f b6 fb             	movzx  edi,bl
c001bf88:	57                   	push   edi
c001bf89:	0f b6 c9             	movzx  ecx,cl
c001bf8c:	51                   	push   ecx
c001bf8d:	0f b6 d2             	movzx  edx,dl
c001bf90:	52                   	push   edx
c001bf91:	0f b6 c0             	movzx  eax,al
c001bf94:	50                   	push   eax
c001bf95:	56                   	push   esi
c001bf96:	e8 0b ff ff ff       	call   c001bea6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf9b:	89 c2                	mov    edx,eax
c001bf9d:	ed                   	in     eax,dx
c001bf9e:	83 e3 02             	and    ebx,0x2
c001bfa1:	83 c4 20             	add    esp,0x20
c001bfa4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bfab:	d3 e8                	shr    eax,cl
c001bfad:	eb 12                	jmp    c001bfc1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bfaf:	83 ec 0c             	sub    esp,0xc
c001bfb2:	68 2b 41 02 c0       	push   0xc002412b
c001bfb7:	e8 2a 2d ff ff       	call   c000ece6 <KePanic(char const*)>
c001bfbc:	83 c4 10             	add    esp,0x10
c001bfbf:	31 c0                	xor    eax,eax
c001bfc1:	5b                   	pop    ebx
c001bfc2:	5e                   	pop    esi
c001bfc3:	5f                   	pop    edi
c001bfc4:	c3                   	ret    
c001bfc5:	90                   	nop

c001bfc6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bfc6:	83 ec 18             	sub    esp,0x18
c001bfc9:	6a 00                	push   0x0
c001bfcb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfd0:	50                   	push   eax
c001bfd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfd6:	50                   	push   eax
c001bfd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfdc:	50                   	push   eax
c001bfdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfe1:	e8 36 ff ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfe6:	83 c4 2c             	add    esp,0x2c
c001bfe9:	c3                   	ret    

c001bfea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bfea:	83 ec 18             	sub    esp,0x18
c001bfed:	6a 0e                	push   0xe
c001bfef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bff4:	50                   	push   eax
c001bff5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bffa:	50                   	push   eax
c001bffb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c000:	50                   	push   eax
c001c001:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c005:	e8 12 ff ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c00a:	83 c4 2c             	add    esp,0x2c
c001c00d:	0f b6 c0             	movzx  eax,al
c001c010:	c3                   	ret    
c001c011:	90                   	nop

c001c012 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c012:	55                   	push   ebp
c001c013:	57                   	push   edi
c001c014:	56                   	push   esi
c001c015:	53                   	push   ebx
c001c016:	83 ec 18             	sub    esp,0x18
c001c019:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001c01e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001c023:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001c028:	6a 0a                	push   0xa
c001c02a:	56                   	push   esi
c001c02b:	55                   	push   ebp
c001c02c:	57                   	push   edi
c001c02d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c031:	e8 e6 fe ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c036:	83 c4 14             	add    esp,0x14
c001c039:	6a 0a                	push   0xa
c001c03b:	56                   	push   esi
c001c03c:	55                   	push   ebp
c001c03d:	57                   	push   edi
c001c03e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c042:	89 c3                	mov    ebx,eax
c001c044:	0f b6 db             	movzx  ebx,bl
c001c047:	e8 d0 fe ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c04c:	83 c4 2c             	add    esp,0x2c
c001c04f:	25 00 ff 00 00       	and    eax,0xff00
c001c054:	09 d8                	or     eax,ebx
c001c056:	5b                   	pop    ebx
c001c057:	5e                   	pop    esi
c001c058:	5f                   	pop    edi
c001c059:	5d                   	pop    ebp
c001c05a:	c3                   	ret    
c001c05b:	90                   	nop

c001c05c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c05c:	83 ec 18             	sub    esp,0x18
c001c05f:	6a 08                	push   0x8
c001c061:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c066:	50                   	push   eax
c001c067:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c06c:	50                   	push   eax
c001c06d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c072:	50                   	push   eax
c001c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c077:	e8 a0 fe ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c07c:	83 c4 2c             	add    esp,0x2c
c001c07f:	0f b6 c4             	movzx  eax,ah
c001c082:	c3                   	ret    
c001c083:	90                   	nop

c001c084 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c084:	83 ec 18             	sub    esp,0x18
c001c087:	6a 08                	push   0x8
c001c089:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c08e:	50                   	push   eax
c001c08f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c094:	50                   	push   eax
c001c095:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c09a:	50                   	push   eax
c001c09b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c09f:	e8 78 fe ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0a4:	83 c4 2c             	add    esp,0x2c
c001c0a7:	c3                   	ret    

c001c0a8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c0a8:	83 ec 18             	sub    esp,0x18
c001c0ab:	6a 3c                	push   0x3c
c001c0ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c0b2:	50                   	push   eax
c001c0b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c0b8:	50                   	push   eax
c001c0b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c0be:	50                   	push   eax
c001c0bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0c3:	e8 54 fe ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0c8:	83 c4 2c             	add    esp,0x2c
c001c0cb:	c3                   	ret    

c001c0cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c0cc:	83 ec 18             	sub    esp,0x18
c001c0cf:	6a 18                	push   0x18
c001c0d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c0d6:	50                   	push   eax
c001c0d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c0dc:	50                   	push   eax
c001c0dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c0e2:	50                   	push   eax
c001c0e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0e7:	e8 30 fe ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0ec:	83 c4 2c             	add    esp,0x2c
c001c0ef:	0f b6 c4             	movzx  eax,ah
c001c0f2:	c3                   	ret    
c001c0f3:	90                   	nop

c001c0f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c0f4:	55                   	push   ebp
c001c0f5:	57                   	push   edi
c001c0f6:	56                   	push   esi
c001c0f7:	53                   	push   ebx
c001c0f8:	83 ec 28             	sub    esp,0x28
c001c0fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c0ff:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001c104:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001c109:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001c10e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c115:	8d 43 12             	lea    eax,[ebx+0x12]
c001c118:	83 c3 10             	add    ebx,0x10
c001c11b:	0f b6 c0             	movzx  eax,al
c001c11e:	0f b6 db             	movzx  ebx,bl
c001c121:	50                   	push   eax
c001c122:	51                   	push   ecx
c001c123:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001c127:	57                   	push   edi
c001c128:	55                   	push   ebp
c001c129:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c12d:	e8 ea fd ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c132:	83 c4 14             	add    esp,0x14
c001c135:	53                   	push   ebx
c001c136:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c13a:	51                   	push   ecx
c001c13b:	89 c6                	mov    esi,eax
c001c13d:	57                   	push   edi
c001c13e:	55                   	push   ebp
c001c13f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c143:	c1 e6 10             	shl    esi,0x10
c001c146:	e8 d1 fd ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c14b:	83 c4 3c             	add    esp,0x3c
c001c14e:	5b                   	pop    ebx
c001c14f:	0f b7 c0             	movzx  eax,ax
c001c152:	09 f0                	or     eax,esi
c001c154:	5e                   	pop    esi
c001c155:	5f                   	pop    edi
c001c156:	5d                   	pop    ebp
c001c157:	c3                   	ret    

c001c158 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c158:	55                   	push   ebp
c001c159:	57                   	push   edi
c001c15a:	56                   	push   esi
c001c15b:	53                   	push   ebx
c001c15c:	83 ec 0c             	sub    esp,0xc
c001c15f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c163:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c167:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c16b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001c16f:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001c175:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c179:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c17d:	83 f9 01             	cmp    ecx,0x1
c001c180:	75 5d                	jne    c001c1df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001c182:	0f b6 c8             	movzx  ecx,al
c001c185:	89 f0                	mov    eax,esi
c001c187:	25 fc 00 00 00       	and    eax,0xfc
c001c18c:	0f b6 d2             	movzx  edx,dl
c001c18f:	c1 e1 10             	shl    ecx,0x10
c001c192:	c1 e2 0b             	shl    edx,0xb
c001c195:	09 c1                	or     ecx,eax
c001c197:	89 f8                	mov    eax,edi
c001c199:	0f b6 f8             	movzx  edi,al
c001c19c:	c1 e7 08             	shl    edi,0x8
c001c19f:	09 f9                	or     ecx,edi
c001c1a1:	09 d1                	or     ecx,edx
c001c1a3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c1a8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c1ae:	89 c8                	mov    eax,ecx
c001c1b0:	ef                   	out    dx,eax
c001c1b1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1b6:	ed                   	in     eax,dx
c001c1b7:	83 e6 02             	and    esi,0x2
c001c1ba:	0f b7 db             	movzx  ebx,bx
c001c1bd:	74 0a                	je     c001c1c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001c1bf:	c1 e3 10             	shl    ebx,0x10
c001c1c2:	0f b7 d0             	movzx  edx,ax
c001c1c5:	09 d3                	or     ebx,edx
c001c1c7:	eb 05                	jmp    c001c1ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001c1c9:	66 31 c0             	xor    ax,ax
c001c1cc:	09 c3                	or     ebx,eax
c001c1ce:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c1d3:	89 c8                	mov    eax,ecx
c001c1d5:	ef                   	out    dx,eax
c001c1d6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1db:	89 d8                	mov    eax,ebx
c001c1dd:	eb 41                	jmp    c001c220 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001c1df:	83 f9 02             	cmp    ecx,0x2
c001c1e2:	75 45                	jne    c001c229 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001c1e4:	89 f1                	mov    ecx,esi
c001c1e6:	83 ec 0c             	sub    esp,0xc
c001c1e9:	0f b6 f1             	movzx  esi,cl
c001c1ec:	89 f9                	mov    ecx,edi
c001c1ee:	56                   	push   esi
c001c1ef:	0f b6 f9             	movzx  edi,cl
c001c1f2:	57                   	push   edi
c001c1f3:	0f b6 d2             	movzx  edx,dl
c001c1f6:	52                   	push   edx
c001c1f7:	0f b6 c0             	movzx  eax,al
c001c1fa:	50                   	push   eax
c001c1fb:	55                   	push   ebp
c001c1fc:	e8 a5 fc ff ff       	call   c001bea6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c201:	89 c2                	mov    edx,eax
c001c203:	ed                   	in     eax,dx
c001c204:	83 c4 20             	add    esp,0x20
c001c207:	f6 c2 02             	test   dl,0x2
c001c20a:	0f b7 db             	movzx  ebx,bx
c001c20d:	74 0c                	je     c001c21b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001c20f:	0f b7 c8             	movzx  ecx,ax
c001c212:	89 d8                	mov    eax,ebx
c001c214:	c1 e0 10             	shl    eax,0x10
c001c217:	09 c8                	or     eax,ecx
c001c219:	eb 05                	jmp    c001c220 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001c21b:	66 31 c0             	xor    ax,ax
c001c21e:	09 d8                	or     eax,ebx
c001c220:	ef                   	out    dx,eax
c001c221:	83 c4 0c             	add    esp,0xc
c001c224:	5b                   	pop    ebx
c001c225:	5e                   	pop    esi
c001c226:	5f                   	pop    edi
c001c227:	5d                   	pop    ebp
c001c228:	c3                   	ret    
c001c229:	c7 44 24 20 2b 41 02 c0 	mov    DWORD PTR [esp+0x20],0xc002412b
c001c231:	83 c4 0c             	add    esp,0xc
c001c234:	5b                   	pop    ebx
c001c235:	5e                   	pop    esi
c001c236:	5f                   	pop    edi
c001c237:	5d                   	pop    ebp
c001c238:	e9 a9 2a ff ff       	jmp    c000ece6 <KePanic(char const*)>
c001c23d:	90                   	nop

c001c23e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001c23e:	55                   	push   ebp
c001c23f:	57                   	push   edi
c001c240:	56                   	push   esi
c001c241:	53                   	push   ebx
c001c242:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001c248:	80 3d cc e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cc,0x0
c001c24f:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001c256:	0f 85 bd 00 00 00    	jne    c001c319 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001c25c:	83 ec 0c             	sub    esp,0xc
c001c25f:	68 14 01 00 00       	push   0x114
c001c264:	e8 37 27 ff ff       	call   c000e9a0 <malloc>
c001c269:	83 c4 0c             	add    esp,0xc
c001c26c:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001c272:	68 31 41 02 c0       	push   0xc0024131
c001c277:	50                   	push   eax
c001c278:	89 c3                	mov    ebx,eax
c001c27a:	e8 ad be fe ff       	call   c000812c <File::File(char const*, Process*)>
c001c27f:	83 c4 10             	add    esp,0x10
c001c282:	85 db                	test   ebx,ebx
c001c284:	0f 84 6b 02 00 00    	je     c001c4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c28a:	57                   	push   edi
c001c28b:	57                   	push   edi
c001c28c:	6a 01                	push   0x1
c001c28e:	53                   	push   ebx
c001c28f:	e8 b6 be fe ff       	call   c000814a <File::open(FileOpenMode)>
c001c294:	83 c4 10             	add    esp,0x10
c001c297:	85 c0                	test   eax,eax
c001c299:	0f 85 56 02 00 00    	jne    c001c4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c29f:	52                   	push   edx
c001c2a0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001c2a4:	50                   	push   eax
c001c2a5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c2a9:	50                   	push   eax
c001c2aa:	53                   	push   ebx
c001c2ab:	e8 9c c1 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001c2b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c2b4:	40                   	inc    eax
c001c2b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2b8:	e8 e3 26 ff ff       	call   c000e9a0 <malloc>
c001c2bd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c2c1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001c2c5:	59                   	pop    ecx
c001c2c6:	a3 c8 e0 02 c0       	mov    ds:0xc002e0c8,eax
c001c2cb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2cd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001c2d1:	51                   	push   ecx
c001c2d2:	50                   	push   eax
c001c2d3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c2d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c2db:	53                   	push   ebx
c001c2dc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c2df:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001c2e3:	83 c4 20             	add    esp,0x20
c001c2e6:	89 c8                	mov    eax,ecx
c001c2e8:	99                   	cdq    
c001c2e9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001c2ed:	0f 85 02 02 00 00    	jne    c001c4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c2f3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001c2f7:	0f 85 f8 01 00 00    	jne    c001c4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c2fd:	83 ec 0c             	sub    esp,0xc
c001c300:	53                   	push   ebx
c001c301:	e8 a2 be fe ff       	call   c00081a8 <File::close()>
c001c306:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c30a:	83 c4 10             	add    esp,0x10
c001c30d:	c6 05 cc e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0cc,0x1
c001c314:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c001c319:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001c321:	31 c9                	xor    ecx,ecx
c001c323:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001c32a:	8b 2d c4 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e0c4
c001c330:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001c337:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c001c33d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c342:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001c34a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c34f:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001c357:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c35b:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001c363:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c367:	39 cd                	cmp    ebp,ecx
c001c369:	0f 8e 86 01 00 00    	jle    c001c4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c36f:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001c372:	d4 40                	aam    0x40
c001c374:	d5 39                	aad    0x39
c001c376:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c37a:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001c37e:	d4 40                	aam    0x40
c001c380:	d5 39                	aad    0x39
c001c382:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c386:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001c38a:	d4 40                	aam    0x40
c001c38c:	d5 39                	aad    0x39
c001c38e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c392:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001c396:	d4 40                	aam    0x40
c001c398:	d5 39                	aad    0x39
c001c39a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c39e:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001c3a2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c3a6:	3c 56                	cmp    al,0x56
c001c3a8:	74 47                	je     c001c3f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001c3aa:	d4 40                	aam    0x40
c001c3ac:	d5 39                	aad    0x39
c001c3ae:	8d 58 d0             	lea    ebx,[eax-0x30]
c001c3b1:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001c3b5:	0f b6 db             	movzx  ebx,bl
c001c3b8:	c1 e3 04             	shl    ebx,0x4
c001c3bb:	d4 40                	aam    0x40
c001c3bd:	d5 39                	aad    0x39
c001c3bf:	83 e8 30             	sub    eax,0x30
c001c3c2:	0f b6 c0             	movzx  eax,al
c001c3c5:	09 c3                	or     ebx,eax
c001c3c7:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001c3cb:	c1 e3 04             	shl    ebx,0x4
c001c3ce:	d4 40                	aam    0x40
c001c3d0:	d5 39                	aad    0x39
c001c3d2:	83 e8 30             	sub    eax,0x30
c001c3d5:	0f b6 c0             	movzx  eax,al
c001c3d8:	09 c3                	or     ebx,eax
c001c3da:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001c3de:	c1 e3 04             	shl    ebx,0x4
c001c3e1:	d4 40                	aam    0x40
c001c3e3:	d5 39                	aad    0x39
c001c3e5:	83 e8 30             	sub    eax,0x30
c001c3e8:	0f b6 c0             	movzx  eax,al
c001c3eb:	09 c3                	or     ebx,eax
c001c3ed:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001c3f1:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001c3f5:	80 fb 58             	cmp    bl,0x58
c001c3f8:	74 49                	je     c001c443 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001c3fa:	88 d8                	mov    al,bl
c001c3fc:	d4 40                	aam    0x40
c001c3fe:	d5 39                	aad    0x39
c001c400:	83 e8 30             	sub    eax,0x30
c001c403:	0f b6 f8             	movzx  edi,al
c001c406:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001c40a:	c1 e7 04             	shl    edi,0x4
c001c40d:	d4 40                	aam    0x40
c001c40f:	d5 39                	aad    0x39
c001c411:	83 e8 30             	sub    eax,0x30
c001c414:	0f b6 c0             	movzx  eax,al
c001c417:	09 c7                	or     edi,eax
c001c419:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001c41d:	c1 e7 04             	shl    edi,0x4
c001c420:	d4 40                	aam    0x40
c001c422:	d5 39                	aad    0x39
c001c424:	83 e8 30             	sub    eax,0x30
c001c427:	0f b6 c0             	movzx  eax,al
c001c42a:	09 c7                	or     edi,eax
c001c42c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001c430:	c1 e7 04             	shl    edi,0x4
c001c433:	d4 40                	aam    0x40
c001c435:	d5 39                	aad    0x39
c001c437:	83 e8 30             	sub    eax,0x30
c001c43a:	0f b6 c0             	movzx  eax,al
c001c43d:	09 c7                	or     edi,eax
c001c43f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001c443:	8d 41 10             	lea    eax,[ecx+0x10]
c001c446:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c44a:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001c44e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c452:	83 f9 0a             	cmp    ecx,0xa
c001c455:	74 07                	je     c001c45e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001c457:	47                   	inc    edi
c001c458:	39 c5                	cmp    ebp,eax
c001c45a:	75 16                	jne    c001c472 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001c45c:	89 e8                	mov    eax,ebp
c001c45e:	83 f9 0a             	cmp    ecx,0xa
c001c461:	0f 94 c1             	sete   cl
c001c464:	0f b6 c9             	movzx  ecx,cl
c001c467:	01 c1                	add    ecx,eax
c001c469:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c46e:	75 0f                	jne    c001c47f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001c470:	eb 1c                	jmp    c001c48e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001c472:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c475:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c479:	40                   	inc    eax
c001c47a:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001c47d:	eb cb                	jmp    c001c44a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001c47f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c483:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c488:	0f 85 d9 fe ff ff    	jne    c001c367 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c48e:	80 fb 58             	cmp    bl,0x58
c001c491:	74 10                	je     c001c4a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001c493:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c498:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001c49d:	0f 85 c4 fe ff ff    	jne    c001c367 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c4a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c4ab:	83 e8 30             	sub    eax,0x30
c001c4ae:	c1 e0 04             	shl    eax,0x4
c001c4b1:	83 eb 30             	sub    ebx,0x30
c001c4b4:	09 d8                	or     eax,ebx
c001c4b6:	0f b6 c0             	movzx  eax,al
c001c4b9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c4bd:	0f 85 a4 fe ff ff    	jne    c001c367 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c4c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c4cb:	83 e8 30             	sub    eax,0x30
c001c4ce:	c1 e0 04             	shl    eax,0x4
c001c4d1:	83 eb 30             	sub    ebx,0x30
c001c4d4:	09 d8                	or     eax,ebx
c001c4d6:	0f b6 c0             	movzx  eax,al
c001c4d9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c4dd:	0f 85 84 fe ff ff    	jne    c001c367 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c4e3:	50                   	push   eax
c001c4e4:	50                   	push   eax
c001c4e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c4e9:	50                   	push   eax
c001c4ea:	56                   	push   esi
c001c4eb:	e8 60 41 fe ff       	call   c0000650 <strcpy>
c001c4f0:	83 c4 10             	add    esp,0x10
c001c4f3:	eb 05                	jmp    c001c4fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c4f5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c4f8:	31 f6                	xor    esi,esi
c001c4fa:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c500:	89 f0                	mov    eax,esi
c001c502:	5b                   	pop    ebx
c001c503:	5e                   	pop    esi
c001c504:	5f                   	pop    edi
c001c505:	5d                   	pop    ebp
c001c506:	c3                   	ret    
c001c507:	90                   	nop

c001c508 <PCI::checkBus(unsigned char)>:
c001c508:	56                   	push   esi
c001c509:	53                   	push   ebx
c001c50a:	31 db                	xor    ebx,ebx
c001c50c:	51                   	push   ecx
c001c50d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c512:	52                   	push   edx
c001c513:	53                   	push   ebx
c001c514:	43                   	inc    ebx
c001c515:	56                   	push   esi
c001c516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c51a:	e8 6f 03 00 00       	call   c001c88e <PCI::checkDevice(unsigned char, unsigned char)>
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	83 fb 20             	cmp    ebx,0x20
c001c525:	75 eb                	jne    c001c512 <PCI::checkBus(unsigned char)+0xa>
c001c527:	58                   	pop    eax
c001c528:	5b                   	pop    ebx
c001c529:	5e                   	pop    esi
c001c52a:	c3                   	ret    
c001c52b:	90                   	nop

c001c52c <PCI::foundDevice(PCIDeviceInfo)>:
c001c52c:	55                   	push   ebp
c001c52d:	57                   	push   edi
c001c52e:	56                   	push   esi
c001c52f:	53                   	push   ebx
c001c530:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c536:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c53e:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c545:	3d ff ff 00 00       	cmp    eax,0xffff
c001c54a:	0f 84 b6 01 00 00    	je     c001c706 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c550:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c558:	66 81 fd 06 04       	cmp    bp,0x406
c001c55d:	75 32                	jne    c001c591 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c55f:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c567:	50                   	push   eax
c001c568:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c570:	50                   	push   eax
c001c571:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c579:	50                   	push   eax
c001c57a:	53                   	push   ebx
c001c57b:	e8 4c fb ff ff       	call   c001c0cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c580:	59                   	pop    ecx
c001c581:	5e                   	pop    esi
c001c582:	0f b6 c0             	movzx  eax,al
c001c585:	50                   	push   eax
c001c586:	53                   	push   ebx
c001c587:	e8 7c ff ff ff       	call   c001c508 <PCI::checkBus(unsigned char)>
c001c58c:	e9 15 01 00 00       	jmp    c001c6a6 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c591:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c599:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c59f:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c5a6:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c5ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c5b1:	85 c0                	test   eax,eax
c001c5b3:	74 34                	je     c001c5e9 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c5b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c5b8:	85 d2                	test   edx,edx
c001c5ba:	74 29                	je     c001c5e5 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c5bc:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c5c2:	31 cf                	xor    edi,ecx
c001c5c4:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c5ca:	75 19                	jne    c001c5e5 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c5cc:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c5d2:	75 11                	jne    c001c5e5 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c5d4:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c5db:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c5df:	0f 84 21 01 00 00    	je     c001c706 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5e7:	eb c8                	jmp    c001c5b1 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c5e9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c5ed:	be 64 41 02 c0       	mov    esi,0xc0024164
c001c5f2:	b9 07 00 00 00       	mov    ecx,0x7
c001c5f7:	fc                   	cld    
c001c5f8:	31 d2                	xor    edx,edx
c001c5fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5fc:	b9 12 00 00 00       	mov    ecx,0x12
c001c601:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c608:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c60c:	83 ec 0c             	sub    esp,0xc
c001c60f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c611:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c619:	b9 0a 00 00 00       	mov    ecx,0xa
c001c61e:	f7 f1                	div    ecx
c001c620:	83 c0 30             	add    eax,0x30
c001c623:	83 c2 30             	add    edx,0x30
c001c626:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c62a:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c632:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c636:	31 d2                	xor    edx,edx
c001c638:	f7 f1                	div    ecx
c001c63a:	83 c0 30             	add    eax,0x30
c001c63d:	83 c2 30             	add    edx,0x30
c001c640:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c644:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c648:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c64c:	50                   	push   eax
c001c64d:	e8 99 ff fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001c652:	83 c4 10             	add    esp,0x10
c001c655:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c65b:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c662:	75 47                	jne    c001c6ab <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c664:	83 ec 0c             	sub    esp,0xc
c001c667:	68 64 01 00 00       	push   0x164
c001c66c:	e8 2f 23 ff ff       	call   c000e9a0 <malloc>
c001c671:	89 04 24             	mov    DWORD PTR [esp],eax
c001c674:	89 c5                	mov    ebp,eax
c001c676:	e8 35 11 00 00       	call   c001d7b0 <SATABus::SATABus()>
c001c67b:	58                   	pop    eax
c001c67c:	5a                   	pop    edx
c001c67d:	55                   	push   ebp
c001c67e:	53                   	push   ebx
c001c67f:	e8 e2 c9 fe ff       	call   c0009066 <Device::addChild(Device*)>
c001c684:	83 ec 1c             	sub    esp,0x1c
c001c687:	b9 09 00 00 00       	mov    ecx,0x9
c001c68c:	89 e7                	mov    edi,esp
c001c68e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c690:	55                   	push   ebp
c001c691:	e8 16 c9 fe ff       	call   c0008fac <Device::preOpenPCI(PCIDeviceInfo)>
c001c696:	83 c4 30             	add    esp,0x30
c001c699:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c69c:	6a 00                	push   0x0
c001c69e:	6a 00                	push   0x0
c001c6a0:	6a 00                	push   0x0
c001c6a2:	55                   	push   ebp
c001c6a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6a6:	83 c4 10             	add    esp,0x10
c001c6a9:	eb 5b                	jmp    c001c706 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c6ab:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c6b1:	75 19                	jne    c001c6cc <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c6b3:	83 ec 0c             	sub    esp,0xc
c001c6b6:	68 70 02 00 00       	push   0x270
c001c6bb:	e8 e0 22 ff ff       	call   c000e9a0 <malloc>
c001c6c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6c3:	89 c5                	mov    ebp,eax
c001c6c5:	e8 94 02 00 00       	call   c001c95e <IDE::IDE()>
c001c6ca:	eb af                	jmp    c001c67b <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c6cc:	83 ec 0c             	sub    esp,0xc
c001c6cf:	68 58 01 00 00       	push   0x158
c001c6d4:	e8 c7 22 ff ff       	call   c000e9a0 <malloc>
c001c6d9:	89 c5                	mov    ebp,eax
c001c6db:	58                   	pop    eax
c001c6dc:	5a                   	pop    edx
c001c6dd:	68 4a 41 02 c0       	push   0xc002414a
c001c6e2:	55                   	push   ebp
c001c6e3:	e8 32 cc fe ff       	call   c000931a <DriverlessDevice::DriverlessDevice(char const*)>
c001c6e8:	59                   	pop    ecx
c001c6e9:	5f                   	pop    edi
c001c6ea:	55                   	push   ebp
c001c6eb:	53                   	push   ebx
c001c6ec:	e8 75 c9 fe ff       	call   c0009066 <Device::addChild(Device*)>
c001c6f1:	83 ec 1c             	sub    esp,0x1c
c001c6f4:	b9 09 00 00 00       	mov    ecx,0x9
c001c6f9:	89 e7                	mov    edi,esp
c001c6fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c6fd:	55                   	push   ebp
c001c6fe:	e8 a9 c8 fe ff       	call   c0008fac <Device::preOpenPCI(PCIDeviceInfo)>
c001c703:	83 c4 30             	add    esp,0x30
c001c706:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c70c:	5b                   	pop    ebx
c001c70d:	5e                   	pop    esi
c001c70e:	5f                   	pop    edi
c001c70f:	5d                   	pop    ebp
c001c710:	c3                   	ret    
c001c711:	90                   	nop

c001c712 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c712:	55                   	push   ebp
c001c713:	57                   	push   edi
c001c714:	56                   	push   esi
c001c715:	53                   	push   ebx
c001c716:	83 ec 68             	sub    esp,0x68
c001c719:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c720:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c724:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c728:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c72f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c734:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c738:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c73f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c748:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c74d:	6a 0c                	push   0xc
c001c74f:	57                   	push   edi
c001c750:	53                   	push   ebx
c001c751:	56                   	push   esi
c001c752:	55                   	push   ebp
c001c753:	e8 c4 f7 ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c758:	83 c4 20             	add    esp,0x20
c001c75b:	57                   	push   edi
c001c75c:	53                   	push   ebx
c001c75d:	56                   	push   esi
c001c75e:	55                   	push   ebp
c001c75f:	e8 ae f8 ff ff       	call   c001c012 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c764:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c769:	57                   	push   edi
c001c76a:	53                   	push   ebx
c001c76b:	56                   	push   esi
c001c76c:	55                   	push   ebp
c001c76d:	e8 36 f9 ff ff       	call   c001c0a8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c772:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c776:	83 c4 14             	add    esp,0x14
c001c779:	6a 3c                	push   0x3c
c001c77b:	57                   	push   edi
c001c77c:	53                   	push   ebx
c001c77d:	56                   	push   esi
c001c77e:	55                   	push   ebp
c001c77f:	e8 98 f7 ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c784:	0f b6 c4             	movzx  eax,ah
c001c787:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c78b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c78f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c793:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001c798:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c79e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c7a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c7a8:	83 c4 20             	add    esp,0x20
c001c7ab:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c7b0:	74 30                	je     c001c7e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c7b2:	31 c0                	xor    eax,eax
c001c7b4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c7b8:	7e 28                	jle    c001c7e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c7ba:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c7c2:	39 cb                	cmp    ebx,ecx
c001c7c4:	75 19                	jne    c001c7df <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c7c6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c7ce:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c7d2:	75 0b                	jne    c001c7df <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c7d4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c7db:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c7df:	40                   	inc    eax
c001c7e0:	eb d2                	jmp    c001c7b4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c7e2:	31 d2                	xor    edx,edx
c001c7e4:	83 ec 0c             	sub    esp,0xc
c001c7e7:	57                   	push   edi
c001c7e8:	53                   	push   ebx
c001c7e9:	56                   	push   esi
c001c7ea:	52                   	push   edx
c001c7eb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c7ef:	55                   	push   ebp
c001c7f0:	e8 ff f8 ff ff       	call   c001c0f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c7f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c7f9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c7fd:	42                   	inc    edx
c001c7fe:	83 c4 20             	add    esp,0x20
c001c801:	83 fa 06             	cmp    edx,0x6
c001c804:	75 de                	jne    c001c7e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c806:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c80a:	83 ec 0c             	sub    esp,0xc
c001c80d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c811:	c1 e2 08             	shl    edx,0x8
c001c814:	0f b6 c4             	movzx  eax,ah
c001c817:	09 d0                	or     eax,edx
c001c819:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c81e:	6a 02                	push   0x2
c001c820:	57                   	push   edi
c001c821:	53                   	push   ebx
c001c822:	56                   	push   esi
c001c823:	55                   	push   ebp
c001c824:	e8 f3 f6 ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c829:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c82e:	83 c4 20             	add    esp,0x20
c001c831:	57                   	push   edi
c001c832:	53                   	push   ebx
c001c833:	56                   	push   esi
c001c834:	55                   	push   ebp
c001c835:	e8 22 f8 ff ff       	call   c001c05c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c83a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c83e:	57                   	push   edi
c001c83f:	53                   	push   ebx
c001c840:	56                   	push   esi
c001c841:	55                   	push   ebp
c001c842:	e8 7f f7 ff ff       	call   c001bfc6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c847:	b9 09 00 00 00       	mov    ecx,0x9
c001c84c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c851:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c855:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c859:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c85d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c861:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c865:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c869:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c86d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c871:	83 ec 0c             	sub    esp,0xc
c001c874:	fc                   	cld    
c001c875:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c879:	89 e7                	mov    edi,esp
c001c87b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c87d:	55                   	push   ebp
c001c87e:	e8 a9 fc ff ff       	call   c001c52c <PCI::foundDevice(PCIDeviceInfo)>
c001c883:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c889:	5b                   	pop    ebx
c001c88a:	5e                   	pop    esi
c001c88b:	5f                   	pop    edi
c001c88c:	5d                   	pop    ebp
c001c88d:	c3                   	ret    

c001c88e <PCI::checkDevice(unsigned char, unsigned char)>:
c001c88e:	55                   	push   ebp
c001c88f:	57                   	push   edi
c001c890:	56                   	push   esi
c001c891:	53                   	push   ebx
c001c892:	83 ec 0c             	sub    esp,0xc
c001c895:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c89a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c89f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c8a3:	6a 00                	push   0x0
c001c8a5:	56                   	push   esi
c001c8a6:	57                   	push   edi
c001c8a7:	55                   	push   ebp
c001c8a8:	e8 19 f7 ff ff       	call   c001bfc6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c8ad:	6a 00                	push   0x0
c001c8af:	56                   	push   esi
c001c8b0:	57                   	push   edi
c001c8b1:	55                   	push   ebp
c001c8b2:	e8 5b fe ff ff       	call   c001c712 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c8b7:	83 c4 20             	add    esp,0x20
c001c8ba:	6a 00                	push   0x0
c001c8bc:	56                   	push   esi
c001c8bd:	57                   	push   edi
c001c8be:	55                   	push   ebp
c001c8bf:	e8 26 f7 ff ff       	call   c001bfea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c8c4:	83 c4 10             	add    esp,0x10
c001c8c7:	a8 80                	test   al,0x80
c001c8c9:	74 2d                	je     c001c8f8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c8cb:	bb 01 00 00 00       	mov    ebx,0x1
c001c8d0:	53                   	push   ebx
c001c8d1:	56                   	push   esi
c001c8d2:	57                   	push   edi
c001c8d3:	55                   	push   ebp
c001c8d4:	e8 ed f6 ff ff       	call   c001bfc6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	0f b7 c0             	movzx  eax,ax
c001c8df:	3d ff ff 00 00       	cmp    eax,0xffff
c001c8e4:	74 0c                	je     c001c8f2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c8e6:	53                   	push   ebx
c001c8e7:	56                   	push   esi
c001c8e8:	57                   	push   edi
c001c8e9:	55                   	push   ebp
c001c8ea:	e8 23 fe ff ff       	call   c001c712 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c8ef:	83 c4 10             	add    esp,0x10
c001c8f2:	43                   	inc    ebx
c001c8f3:	83 fb 08             	cmp    ebx,0x8
c001c8f6:	75 d8                	jne    c001c8d0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c8f8:	83 c4 0c             	add    esp,0xc
c001c8fb:	5b                   	pop    ebx
c001c8fc:	5e                   	pop    esi
c001c8fd:	5f                   	pop    edi
c001c8fe:	5d                   	pop    ebp
c001c8ff:	c3                   	ret    

c001c900 <PCI::detect()>:
c001c900:	56                   	push   esi
c001c901:	53                   	push   ebx
c001c902:	53                   	push   ebx
c001c903:	31 db                	xor    ebx,ebx
c001c905:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c909:	6a 00                	push   0x0
c001c90b:	6a 00                	push   0x0
c001c90d:	6a 00                	push   0x0
c001c90f:	56                   	push   esi
c001c910:	e8 d5 f6 ff ff       	call   c001bfea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c915:	83 c4 10             	add    esp,0x10
c001c918:	a8 80                	test   al,0x80
c001c91a:	75 21                	jne    c001c93d <PCI::detect()+0x3d>
c001c91c:	51                   	push   ecx
c001c91d:	51                   	push   ecx
c001c91e:	6a 00                	push   0x0
c001c920:	56                   	push   esi
c001c921:	e8 e2 fb ff ff       	call   c001c508 <PCI::checkBus(unsigned char)>
c001c926:	83 c4 10             	add    esp,0x10
c001c929:	eb 2a                	jmp    c001c955 <PCI::detect()+0x55>
c001c92b:	52                   	push   edx
c001c92c:	52                   	push   edx
c001c92d:	53                   	push   ebx
c001c92e:	43                   	inc    ebx
c001c92f:	56                   	push   esi
c001c930:	e8 d3 fb ff ff       	call   c001c508 <PCI::checkBus(unsigned char)>
c001c935:	83 c4 10             	add    esp,0x10
c001c938:	83 fb 08             	cmp    ebx,0x8
c001c93b:	74 18                	je     c001c955 <PCI::detect()+0x55>
c001c93d:	53                   	push   ebx
c001c93e:	6a 00                	push   0x0
c001c940:	6a 00                	push   0x0
c001c942:	56                   	push   esi
c001c943:	e8 7e f6 ff ff       	call   c001bfc6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c948:	83 c4 10             	add    esp,0x10
c001c94b:	0f b7 c0             	movzx  eax,ax
c001c94e:	3d ff ff 00 00       	cmp    eax,0xffff
c001c953:	74 d6                	je     c001c92b <PCI::detect()+0x2b>
c001c955:	58                   	pop    eax
c001c956:	5b                   	pop    ebx
c001c957:	5e                   	pop    esi
c001c958:	c3                   	ret    
c001c959:	90                   	nop

c001c95a <IDE::close(int, int, void*)>:
c001c95a:	83 c8 ff             	or     eax,0xffffffff
c001c95d:	c3                   	ret    

c001c95e <IDE::IDE()>:
c001c95e:	83 ec 0c             	sub    esp,0xc
c001c961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c965:	83 ec 08             	sub    esp,0x8
c001c968:	68 f4 41 02 c0       	push   0xc00241f4
c001c96d:	50                   	push   eax
c001c96e:	e8 4d ca fe ff       	call   c00093c0 <HardDiskController::HardDiskController(char const*)>
c001c973:	83 c4 10             	add    esp,0x10
c001c976:	ba 20 43 02 c0       	mov    edx,0xc0024320
c001c97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97f:	89 10                	mov    DWORD PTR [eax],edx
c001c981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c985:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c98c:	90                   	nop
c001c98d:	83 c4 0c             	add    esp,0xc
c001c990:	c3                   	ret    
c001c991:	90                   	nop

c001c992 <IDE::prepareInterrupt(unsigned char)>:
c001c992:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c997:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c99b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c9a3:	c3                   	ret    

c001c9a4 <selectDrive(unsigned char, unsigned char)>:
c001c9a4:	c3                   	ret    
c001c9a5:	90                   	nop

c001c9a6 <IDE::getBase(unsigned char)>:
c001c9a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c9ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9af:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c9b7:	c3                   	ret    

c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c9b8:	55                   	push   ebp
c001c9b9:	57                   	push   edi
c001c9ba:	56                   	push   esi
c001c9bb:	53                   	push   ebx
c001c9bc:	83 ec 1c             	sub    esp,0x1c
c001c9bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c9c3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c9cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c9cf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c9d2:	80 f9 03             	cmp    cl,0x3
c001c9d5:	77 4f                	ja     c001ca26 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c9d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9db:	0f b6 f2             	movzx  esi,dl
c001c9de:	0f b6 db             	movzx  ebx,bl
c001c9e1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c9e4:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9e9:	80 ca 80             	or     dl,0x80
c001c9ec:	52                   	push   edx
c001c9ed:	6a 0c                	push   0xc
c001c9ef:	56                   	push   esi
c001c9f0:	57                   	push   edi
c001c9f1:	e8 c2 ff ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c9fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9ff:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ca03:	ee                   	out    dx,al
c001ca04:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ca09:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ca0d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ca11:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ca19:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ca1d:	83 c4 2c             	add    esp,0x2c
c001ca20:	5b                   	pop    ebx
c001ca21:	5e                   	pop    esi
c001ca22:	5f                   	pop    edi
c001ca23:	5d                   	pop    ebp
c001ca24:	eb 92                	jmp    c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca26:	0f b6 cb             	movzx  ecx,bl
c001ca29:	83 f9 07             	cmp    ecx,0x7
c001ca2c:	77 12                	ja     c001ca40 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ca2e:	0f b6 d2             	movzx  edx,dl
c001ca31:	0f b6 db             	movzx  ebx,bl
c001ca34:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001ca3c:	01 da                	add    edx,ebx
c001ca3e:	eb 2f                	jmp    c001ca6f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ca40:	83 f9 0d             	cmp    ecx,0xd
c001ca43:	77 13                	ja     c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ca45:	0f b6 d2             	movzx  edx,dl
c001ca48:	0f b6 db             	movzx  ebx,bl
c001ca4b:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ca52:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ca56:	eb 17                	jmp    c001ca6f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ca58:	83 f9 15             	cmp    ecx,0x15
c001ca5b:	77 13                	ja     c001ca70 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ca5d:	0f b6 d2             	movzx  edx,dl
c001ca60:	0f b6 db             	movzx  ebx,bl
c001ca63:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ca6b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ca6f:	ee                   	out    dx,al
c001ca70:	83 c4 1c             	add    esp,0x1c
c001ca73:	5b                   	pop    ebx
c001ca74:	5e                   	pop    esi
c001ca75:	5f                   	pop    edi
c001ca76:	5d                   	pop    ebp
c001ca77:	c3                   	ret    

c001ca78 <IDE::read(unsigned char, unsigned char)>:
c001ca78:	57                   	push   edi
c001ca79:	56                   	push   esi
c001ca7a:	53                   	push   ebx
c001ca7b:	83 ec 10             	sub    esp,0x10
c001ca7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ca86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ca8a:	8d 42 f8             	lea    eax,[edx-0x8]
c001ca8d:	3c 03                	cmp    al,0x3
c001ca8f:	77 48                	ja     c001cad9 <IDE::read(unsigned char, unsigned char)+0x61>
c001ca91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca95:	0f b6 f1             	movzx  esi,cl
c001ca98:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ca9b:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001caa0:	0c 80                	or     al,0x80
c001caa2:	50                   	push   eax
c001caa3:	6a 0c                	push   0xc
c001caa5:	56                   	push   esi
c001caa6:	53                   	push   ebx
c001caa7:	e8 0c ff ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cab0:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001cab5:	0f b6 d2             	movzx  edx,dl
c001cab8:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cabc:	ec                   	in     al,dx
c001cabd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cac1:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001cac6:	52                   	push   edx
c001cac7:	6a 0c                	push   0xc
c001cac9:	56                   	push   esi
c001caca:	53                   	push   ebx
c001cacb:	e8 e8 fe ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cad0:	83 c4 20             	add    esp,0x20
c001cad3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cad7:	eb 4c                	jmp    c001cb25 <IDE::read(unsigned char, unsigned char)+0xad>
c001cad9:	0f b6 f2             	movzx  esi,dl
c001cadc:	83 fe 07             	cmp    esi,0x7
c001cadf:	77 12                	ja     c001caf3 <IDE::read(unsigned char, unsigned char)+0x7b>
c001cae1:	0f b6 c9             	movzx  ecx,cl
c001cae4:	0f b6 d2             	movzx  edx,dl
c001cae7:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001caef:	01 c2                	add    edx,eax
c001caf1:	eb 31                	jmp    c001cb24 <IDE::read(unsigned char, unsigned char)+0xac>
c001caf3:	83 fe 0d             	cmp    esi,0xd
c001caf6:	77 13                	ja     c001cb0b <IDE::read(unsigned char, unsigned char)+0x93>
c001caf8:	0f b6 c9             	movzx  ecx,cl
c001cafb:	0f b6 d2             	movzx  edx,dl
c001cafe:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001cb05:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cb09:	eb 19                	jmp    c001cb24 <IDE::read(unsigned char, unsigned char)+0xac>
c001cb0b:	31 c0                	xor    eax,eax
c001cb0d:	83 fe 15             	cmp    esi,0x15
c001cb10:	77 13                	ja     c001cb25 <IDE::read(unsigned char, unsigned char)+0xad>
c001cb12:	0f b6 c9             	movzx  ecx,cl
c001cb15:	0f b6 d2             	movzx  edx,dl
c001cb18:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001cb20:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cb24:	ec                   	in     al,dx
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	5b                   	pop    ebx
c001cb29:	5e                   	pop    esi
c001cb2a:	5f                   	pop    edi
c001cb2b:	c3                   	ret    

c001cb2c <IDE::waitInterrupt(unsigned char)>:
c001cb2c:	55                   	push   ebp
c001cb2d:	57                   	push   edi
c001cb2e:	56                   	push   esi
c001cb2f:	53                   	push   ebx
c001cb30:	31 db                	xor    ebx,ebx
c001cb32:	83 ec 0c             	sub    esp,0xc
c001cb35:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cb39:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001cb3e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001cb46:	89 e8                	mov    eax,ebp
c001cb48:	84 c0                	test   al,al
c001cb4a:	75 30                	jne    c001cb7c <IDE::waitInterrupt(unsigned char)+0x50>
c001cb4c:	50                   	push   eax
c001cb4d:	6a 0c                	push   0xc
c001cb4f:	56                   	push   esi
c001cb50:	57                   	push   edi
c001cb51:	e8 22 ff ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	a8 01                	test   al,0x1
c001cb5b:	75 27                	jne    c001cb84 <IDE::waitInterrupt(unsigned char)+0x58>
c001cb5d:	f6 c3 04             	test   bl,0x4
c001cb60:	75 12                	jne    c001cb74 <IDE::waitInterrupt(unsigned char)+0x48>
c001cb62:	83 fb 32             	cmp    ebx,0x32
c001cb65:	7e 0d                	jle    c001cb74 <IDE::waitInterrupt(unsigned char)+0x48>
c001cb67:	83 ec 0c             	sub    esp,0xc
c001cb6a:	6a 64                	push   0x64
c001cb6c:	e8 b7 8d ff ff       	call   c0015928 <milliTenthSleep(unsigned int)>
c001cb71:	83 c4 10             	add    esp,0x10
c001cb74:	83 fb 3c             	cmp    ebx,0x3c
c001cb77:	74 0b                	je     c001cb84 <IDE::waitInterrupt(unsigned char)+0x58>
c001cb79:	43                   	inc    ebx
c001cb7a:	eb c2                	jmp    c001cb3e <IDE::waitInterrupt(unsigned char)+0x12>
c001cb7c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001cb84:	83 c4 0c             	add    esp,0xc
c001cb87:	89 e8                	mov    eax,ebp
c001cb89:	5b                   	pop    ebx
c001cb8a:	5e                   	pop    esi
c001cb8b:	5f                   	pop    edi
c001cb8c:	5d                   	pop    ebp
c001cb8d:	c3                   	ret    

c001cb8e <ideChannel0IRQHandler(regs*, void*)>:
c001cb8e:	83 ec 10             	sub    esp,0x10
c001cb91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb95:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cb9c:	6a 07                	push   0x7
c001cb9e:	6a 00                	push   0x0
c001cba0:	50                   	push   eax
c001cba1:	e8 d2 fe ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001cba6:	83 c4 1c             	add    esp,0x1c
c001cba9:	c3                   	ret    

c001cbaa <ideChannel1IRQHandler(regs*, void*)>:
c001cbaa:	83 ec 10             	sub    esp,0x10
c001cbad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbb1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cbb8:	6a 07                	push   0x7
c001cbba:	6a 01                	push   0x1
c001cbbc:	50                   	push   eax
c001cbbd:	e8 b6 fe ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001cbc2:	83 c4 1c             	add    esp,0x1c
c001cbc5:	c3                   	ret    

c001cbc6 <IDE::enableIRQs(unsigned char, bool)>:
c001cbc6:	57                   	push   edi
c001cbc7:	b8 02 00 00 00       	mov    eax,0x2
c001cbcc:	56                   	push   esi
c001cbcd:	53                   	push   ebx
c001cbce:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cbd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cbd7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cbdb:	74 02                	je     c001cbdf <IDE::enableIRQs(unsigned char, bool)+0x19>
c001cbdd:	31 c0                	xor    eax,eax
c001cbdf:	0f b6 db             	movzx  ebx,bl
c001cbe2:	bf 04 00 00 00       	mov    edi,0x4
c001cbe7:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001cbee:	50                   	push   eax
c001cbef:	6a 0c                	push   0xc
c001cbf1:	53                   	push   ebx
c001cbf2:	56                   	push   esi
c001cbf3:	e8 c0 fd ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbf8:	83 c4 10             	add    esp,0x10
c001cbfb:	50                   	push   eax
c001cbfc:	6a 0c                	push   0xc
c001cbfe:	53                   	push   ebx
c001cbff:	56                   	push   esi
c001cc00:	e8 73 fe ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001cc05:	83 c4 10             	add    esp,0x10
c001cc08:	4f                   	dec    edi
c001cc09:	75 f0                	jne    c001cbfb <IDE::enableIRQs(unsigned char, bool)+0x35>
c001cc0b:	5b                   	pop    ebx
c001cc0c:	5e                   	pop    esi
c001cc0d:	5f                   	pop    edi
c001cc0e:	c3                   	ret    
c001cc0f:	90                   	nop

c001cc10 <IDE::open(int, int, void*)>:
c001cc10:	55                   	push   ebp
c001cc11:	57                   	push   edi
c001cc12:	56                   	push   esi
c001cc13:	53                   	push   ebx
c001cc14:	83 ec 1c             	sub    esp,0x1c
c001cc17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cc1b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cc22:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cc2b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cc34:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cc3b:	0f 85 80 02 00 00    	jne    c001cec1 <IDE::open(int, int, void*)+0x2b1>
c001cc41:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cc47:	a8 70                	test   al,0x70
c001cc49:	75 44                	jne    c001cc8f <IDE::open(int, int, void*)+0x7f>
c001cc4b:	ba 20 84 00 00       	mov    edx,0x8420
c001cc50:	0f a3 c2             	bt     edx,eax
c001cc53:	73 3a                	jae    c001cc8f <IDE::open(int, int, void*)+0x7f>
c001cc55:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cc5b:	83 ec 0c             	sub    esp,0xc
c001cc5e:	83 e0 fc             	and    eax,0xfffffffc
c001cc61:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cc68:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cc6e:	83 e0 fc             	and    eax,0xfffffffc
c001cc71:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cc78:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cc7e:	83 e0 fc             	and    eax,0xfffffffc
c001cc81:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cc88:	68 65 19 02 c0       	push   0xc0021965
c001cc8d:	eb 60                	jmp    c001ccef <IDE::open(int, int, void*)+0xdf>
c001cc8f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cc99:	be 64 00 00 00       	mov    esi,0x64
c001cc9e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cca8:	57                   	push   edi
c001cca9:	57                   	push   edi
c001ccaa:	68 0c 42 02 c0       	push   0xc002420c
c001ccaf:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ccb3:	57                   	push   edi
c001ccb4:	e8 97 39 fe ff       	call   c0000650 <strcpy>
c001ccb9:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001ccc0:	31 d2                	xor    edx,edx
c001ccc2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ccc5:	89 c8                	mov    eax,ecx
c001ccc7:	f7 f6                	div    esi
c001ccc9:	be 0a 00 00 00       	mov    esi,0xa
c001ccce:	31 d2                	xor    edx,edx
c001ccd0:	83 c0 30             	add    eax,0x30
c001ccd3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ccd7:	89 c8                	mov    eax,ecx
c001ccd9:	f7 f6                	div    esi
c001ccdb:	89 d1                	mov    ecx,edx
c001ccdd:	31 d2                	xor    edx,edx
c001ccdf:	f7 f6                	div    esi
c001cce1:	83 c1 30             	add    ecx,0x30
c001cce4:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001cce8:	83 c2 30             	add    edx,0x30
c001cceb:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001ccef:	e8 f7 f8 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001ccf4:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ccfb:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cd00:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	89 fa                	mov    edx,edi
c001cd0c:	c1 e1 10             	shl    ecx,0x10
c001cd0f:	c1 e0 0b             	shl    eax,0xb
c001cd12:	09 c1                	or     ecx,eax
c001cd14:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cd1b:	c1 e0 08             	shl    eax,0x8
c001cd1e:	09 c1                	or     ecx,eax
c001cd20:	89 c8                	mov    eax,ecx
c001cd22:	0d 08 00 00 80       	or     eax,0x80000008
c001cd27:	ef                   	out    dx,eax
c001cd28:	be fc 0c 00 00       	mov    esi,0xcfc
c001cd2d:	89 f2                	mov    edx,esi
c001cd2f:	ed                   	in     eax,dx
c001cd30:	c1 e8 10             	shr    eax,0x10
c001cd33:	3d ff ff 00 00       	cmp    eax,0xffff
c001cd38:	0f 84 e1 00 00 00    	je     c001ce1f <IDE::open(int, int, void*)+0x20f>
c001cd3e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cd44:	89 fa                	mov    edx,edi
c001cd46:	89 c8                	mov    eax,ecx
c001cd48:	ef                   	out    dx,eax
c001cd49:	b0 fe                	mov    al,0xfe
c001cd4b:	89 f2                	mov    edx,esi
c001cd4d:	ee                   	out    dx,al
c001cd4e:	89 c8                	mov    eax,ecx
c001cd50:	89 fa                	mov    edx,edi
c001cd52:	ef                   	out    dx,eax
c001cd53:	89 f2                	mov    edx,esi
c001cd55:	ed                   	in     eax,dx
c001cd56:	3c fe                	cmp    al,0xfe
c001cd58:	0f 85 83 00 00 00    	jne    c001cde1 <IDE::open(int, int, void*)+0x1d1>
c001cd5e:	83 ec 0c             	sub    esp,0xc
c001cd61:	68 9b 19 02 c0       	push   0xc002199b
c001cd66:	e8 80 f8 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001cd6b:	c7 04 24 12 42 02 c0 	mov    DWORD PTR [esp],0xc0024212
c001cd72:	e8 d7 a1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cd77:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cd81:	c7 04 24 cc 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bcc
c001cd88:	e8 5e f8 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001cd8d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cd94:	89 fa                	mov    edx,edi
c001cd96:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cd9d:	c1 e1 10             	shl    ecx,0x10
c001cda0:	c1 e0 08             	shl    eax,0x8
c001cda3:	09 c1                	or     ecx,eax
c001cda5:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cdac:	c1 e0 0b             	shl    eax,0xb
c001cdaf:	09 c1                	or     ecx,eax
c001cdb1:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cdb7:	89 c8                	mov    eax,ecx
c001cdb9:	ef                   	out    dx,eax
c001cdba:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001cdc0:	89 f2                	mov    edx,esi
c001cdc2:	89 e8                	mov    eax,ebp
c001cdc4:	ee                   	out    dx,al
c001cdc5:	89 c8                	mov    eax,ecx
c001cdc7:	89 fa                	mov    edx,edi
c001cdc9:	ef                   	out    dx,eax
c001cdca:	89 f2                	mov    edx,esi
c001cdcc:	ed                   	in     eax,dx
c001cdcd:	0f b6 c0             	movzx  eax,al
c001cdd0:	83 c4 10             	add    esp,0x10
c001cdd3:	39 e8                	cmp    eax,ebp
c001cdd5:	74 58                	je     c001ce2f <IDE::open(int, int, void*)+0x21f>
c001cdd7:	83 ec 0c             	sub    esp,0xc
c001cdda:	68 27 42 02 c0       	push   0xc0024227
c001cddf:	eb 46                	jmp    c001ce27 <IDE::open(int, int, void*)+0x217>
c001cde1:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cdea:	75 29                	jne    c001ce15 <IDE::open(int, int, void*)+0x205>
c001cdec:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001cdf3:	3d 8a 00 00 00       	cmp    eax,0x8a
c001cdf8:	74 05                	je     c001cdff <IDE::open(int, int, void*)+0x1ef>
c001cdfa:	83 c0 80             	add    eax,0xffffff80
c001cdfd:	75 16                	jne    c001ce15 <IDE::open(int, int, void*)+0x205>
c001cdff:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce06:	83 ec 0c             	sub    esp,0xc
c001ce09:	68 f5 2b 02 c0       	push   0xc0022bf5
c001ce0e:	e8 d8 f7 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001ce13:	eb 17                	jmp    c001ce2c <IDE::open(int, int, void*)+0x21c>
c001ce15:	83 ec 0c             	sub    esp,0xc
c001ce18:	68 2f 42 02 c0       	push   0xc002422f
c001ce1d:	eb 08                	jmp    c001ce27 <IDE::open(int, int, void*)+0x217>
c001ce1f:	83 ec 0c             	sub    esp,0xc
c001ce22:	68 60 42 02 c0       	push   0xc0024260
c001ce27:	e8 ba 1e ff ff       	call   c000ece6 <KePanic(char const*)>
c001ce2c:	83 c4 10             	add    esp,0x10
c001ce2f:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ce36:	0f 84 bf 00 00 00    	je     c001cefb <IDE::open(int, int, void*)+0x2eb>
c001ce3c:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ce42:	83 ec 0c             	sub    esp,0xc
c001ce45:	83 e0 fc             	and    eax,0xfffffffc
c001ce48:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ce4f:	83 c0 08             	add    eax,0x8
c001ce52:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ce59:	68 8a 42 02 c0       	push   0xc002428a
c001ce5e:	e8 eb a0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ce63:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ce6a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ce71:	50                   	push   eax
c001ce72:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ce79:	50                   	push   eax
c001ce7a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ce81:	50                   	push   eax
c001ce82:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001ce88:	e8 8f f0 ff ff       	call   c001bf1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce8d:	83 c4 18             	add    esp,0x18
c001ce90:	83 c8 07             	or     eax,0x7
c001ce93:	0f b7 c0             	movzx  eax,ax
c001ce96:	50                   	push   eax
c001ce97:	6a 04                	push   0x4
c001ce99:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cea0:	50                   	push   eax
c001cea1:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cea8:	50                   	push   eax
c001cea9:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ceb0:	50                   	push   eax
c001ceb1:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001ceb7:	e8 9c f2 ff ff       	call   c001c158 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001cebc:	83 c4 20             	add    esp,0x20
c001cebf:	eb 3a                	jmp    c001cefb <IDE::open(int, int, void*)+0x2eb>
c001cec1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cec8:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001cece:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ced5:	05 06 02 00 00       	add    eax,0x206
c001ceda:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cee1:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001cee8:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ceef:	05 06 02 00 00       	add    eax,0x206
c001cef4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cefb:	83 ec 0c             	sub    esp,0xc
c001cefe:	68 cf 21 02 c0       	push   0xc00221cf
c001cf03:	e8 e3 f6 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001cf08:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cf0e:	83 c4 10             	add    esp,0x10
c001cf11:	89 c2                	mov    edx,eax
c001cf13:	83 e2 0f             	and    edx,0xf
c001cf16:	83 fa 08             	cmp    edx,0x8
c001cf19:	75 0a                	jne    c001cf25 <IDE::open(int, int, void*)+0x315>
c001cf1b:	83 e8 02             	sub    eax,0x2
c001cf1e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cf25:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cf2b:	89 c2                	mov    edx,eax
c001cf2d:	83 e2 0f             	and    edx,0xf
c001cf30:	83 fa 08             	cmp    edx,0x8
c001cf33:	75 0a                	jne    c001cf3f <IDE::open(int, int, void*)+0x32f>
c001cf35:	83 e8 02             	sub    eax,0x2
c001cf38:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cf3f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cf46:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cf4d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cf50:	89 d0                	mov    eax,edx
c001cf52:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cf56:	8d 7a 01             	lea    edi,[edx+0x1]
c001cf59:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cf5d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cf61:	83 e1 3f             	and    ecx,0x3f
c001cf64:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cf68:	89 f9                	mov    ecx,edi
c001cf6a:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cf71:	8d 78 02             	lea    edi,[eax+0x2]
c001cf74:	0f b6 c9             	movzx  ecx,cl
c001cf77:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cf7a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cf7e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cf82:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cf86:	83 e2 3f             	and    edx,0x3f
c001cf89:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cf8d:	89 f9                	mov    ecx,edi
c001cf8f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cf95:	8d 78 03             	lea    edi,[eax+0x3]
c001cf98:	0f b6 d1             	movzx  edx,cl
c001cf9b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cf9e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cfa2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cfa6:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cfaa:	83 e1 3f             	and    ecx,0x3f
c001cfad:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cfb1:	89 fa                	mov    edx,edi
c001cfb3:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cfb9:	8d 78 04             	lea    edi,[eax+0x4]
c001cfbc:	0f b6 ca             	movzx  ecx,dl
c001cfbf:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cfc2:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cfc6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cfca:	89 fa                	mov    edx,edi
c001cfcc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cfd2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cfd6:	83 e2 3f             	and    edx,0x3f
c001cfd9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cfdd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cfe4:	66 85 f6             	test   si,si
c001cfe7:	74 24                	je     c001d00d <IDE::open(int, int, void*)+0x3fd>
c001cfe9:	89 f9                	mov    ecx,edi
c001cfeb:	83 c0 05             	add    eax,0x5
c001cfee:	0f b6 d1             	movzx  edx,cl
c001cff1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cff4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cff8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cffc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001d002:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001d006:	83 e0 3f             	and    eax,0x3f
c001d009:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001d00d:	83 ec 0c             	sub    esp,0xc
c001d010:	68 a2 42 02 c0       	push   0xc00242a2
c001d015:	e8 d1 f5 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d01a:	58                   	pop    eax
c001d01b:	5a                   	pop    edx
c001d01c:	6a 00                	push   0x0
c001d01e:	53                   	push   ebx
c001d01f:	e8 6e f9 ff ff       	call   c001c992 <IDE::prepareInterrupt(unsigned char)>
c001d024:	59                   	pop    ecx
c001d025:	5e                   	pop    esi
c001d026:	6a 01                	push   0x1
c001d028:	53                   	push   ebx
c001d029:	e8 64 f9 ff ff       	call   c001c992 <IDE::prepareInterrupt(unsigned char)>
c001d02e:	c7 04 24 f1 3a 02 c0 	mov    DWORD PTR [esp],0xc0023af1
c001d035:	e8 b1 f5 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d03a:	83 c4 0c             	add    esp,0xc
c001d03d:	6a 00                	push   0x0
c001d03f:	6a 00                	push   0x0
c001d041:	53                   	push   ebx
c001d042:	e8 7f fb ff ff       	call   c001cbc6 <IDE::enableIRQs(unsigned char, bool)>
c001d047:	83 c4 0c             	add    esp,0xc
c001d04a:	6a 00                	push   0x0
c001d04c:	6a 01                	push   0x1
c001d04e:	53                   	push   ebx
c001d04f:	e8 72 fb ff ff       	call   c001cbc6 <IDE::enableIRQs(unsigned char, bool)>
c001d054:	c7 04 24 a4 42 02 c0 	mov    DWORD PTR [esp],0xc00242a4
c001d05b:	e8 8b f5 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d060:	83 c4 10             	add    esp,0x10
c001d063:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001d06a:	74 3c                	je     c001d0a8 <IDE::open(int, int, void*)+0x498>
c001d06c:	83 ec 0c             	sub    esp,0xc
c001d06f:	53                   	push   ebx
c001d070:	6a 01                	push   0x1
c001d072:	68 8e cb 01 c0       	push   0xc001cb8e
c001d077:	6a 0e                	push   0xe
c001d079:	53                   	push   ebx
c001d07a:	e8 93 bf fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d07f:	83 c4 14             	add    esp,0x14
c001d082:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d088:	53                   	push   ebx
c001d089:	6a 01                	push   0x1
c001d08b:	68 aa cb 01 c0       	push   0xc001cbaa
c001d090:	6a 0f                	push   0xf
c001d092:	53                   	push   ebx
c001d093:	e8 7a bf fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d098:	83 c4 14             	add    esp,0x14
c001d09b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001d0a1:	68 d2 1d 02 c0       	push   0xc0021dd2
c001d0a6:	eb 40                	jmp    c001d0e8 <IDE::open(int, int, void*)+0x4d8>
c001d0a8:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001d0b2:	83 ec 0c             	sub    esp,0xc
c001d0b5:	53                   	push   ebx
c001d0b6:	6a 00                	push   0x0
c001d0b8:	68 8e cb 01 c0       	push   0xc001cb8e
c001d0bd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001d0c3:	53                   	push   ebx
c001d0c4:	e8 49 bf fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d0c9:	83 c4 14             	add    esp,0x14
c001d0cc:	53                   	push   ebx
c001d0cd:	6a 00                	push   0x0
c001d0cf:	68 aa cb 01 c0       	push   0xc001cbaa
c001d0d4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001d0da:	53                   	push   ebx
c001d0db:	e8 32 bf fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d0e0:	83 c4 14             	add    esp,0x14
c001d0e3:	68 e4 2b 02 c0       	push   0xc0022be4
c001d0e8:	e8 fe f4 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d0ed:	83 c4 10             	add    esp,0x10
c001d0f0:	83 ec 0c             	sub    esp,0xc
c001d0f3:	68 a6 42 02 c0       	push   0xc00242a6
c001d0f8:	e8 ee f4 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d0fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d102:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001d105:	c7 04 24 9d 32 02 c0 	mov    DWORD PTR [esp],0xc002329d
c001d10c:	e8 da f4 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d111:	83 c4 0c             	add    esp,0xc
c001d114:	6a 07                	push   0x7
c001d116:	6a 00                	push   0x0
c001d118:	53                   	push   ebx
c001d119:	e8 5a f9 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d11e:	83 c4 0c             	add    esp,0xc
c001d121:	6a 07                	push   0x7
c001d123:	6a 01                	push   0x1
c001d125:	53                   	push   ebx
c001d126:	e8 4d f9 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d12b:	c7 04 24 4c 29 02 c0 	mov    DWORD PTR [esp],0xc002294c
c001d132:	e8 b4 f4 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d137:	83 c4 0c             	add    esp,0xc
c001d13a:	6a 01                	push   0x1
c001d13c:	6a 00                	push   0x0
c001d13e:	53                   	push   ebx
c001d13f:	e8 82 fa ff ff       	call   c001cbc6 <IDE::enableIRQs(unsigned char, bool)>
c001d144:	83 c4 0c             	add    esp,0xc
c001d147:	6a 01                	push   0x1
c001d149:	6a 01                	push   0x1
c001d14b:	53                   	push   ebx
c001d14c:	e8 75 fa ff ff       	call   c001cbc6 <IDE::enableIRQs(unsigned char, bool)>
c001d151:	c7 04 24 a9 42 02 c0 	mov    DWORD PTR [esp],0xc00242a9
c001d158:	e8 8e f4 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d15d:	83 c4 2c             	add    esp,0x2c
c001d160:	31 c0                	xor    eax,eax
c001d162:	5b                   	pop    ebx
c001d163:	5e                   	pop    esi
c001d164:	5f                   	pop    edi
c001d165:	5d                   	pop    ebp
c001d166:	c3                   	ret    
c001d167:	90                   	nop

c001d168 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001d168:	55                   	push   ebp
c001d169:	57                   	push   edi
c001d16a:	56                   	push   esi
c001d16b:	53                   	push   ebx
c001d16c:	83 ec 1c             	sub    esp,0x1c
c001d16f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d173:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d177:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d17b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d17f:	8d 42 f8             	lea    eax,[edx-0x8]
c001d182:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d186:	3c 03                	cmp    al,0x3
c001d188:	77 5a                	ja     c001d1e4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001d18a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d18e:	0f b6 db             	movzx  ebx,bl
c001d191:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d195:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001d198:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d19d:	0c 80                	or     al,0x80
c001d19f:	50                   	push   eax
c001d1a0:	6a 0c                	push   0xc
c001d1a2:	53                   	push   ebx
c001d1a3:	56                   	push   esi
c001d1a4:	e8 0f f8 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1ad:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d1b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d1b6:	0f b6 d2             	movzx  edx,dl
c001d1b9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d1bd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d1bf:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d1c4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001d1c8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d1cc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d1d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d1d8:	83 c4 2c             	add    esp,0x2c
c001d1db:	5b                   	pop    ebx
c001d1dc:	5e                   	pop    esi
c001d1dd:	5f                   	pop    edi
c001d1de:	5d                   	pop    ebp
c001d1df:	e9 d4 f7 ff ff       	jmp    c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1e4:	0f b6 c2             	movzx  eax,dl
c001d1e7:	83 f8 07             	cmp    eax,0x7
c001d1ea:	77 12                	ja     c001d1fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001d1ec:	0f b6 db             	movzx  ebx,bl
c001d1ef:	0f b6 c2             	movzx  eax,dl
c001d1f2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001d1fa:	01 c2                	add    edx,eax
c001d1fc:	eb 2f                	jmp    c001d22d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d1fe:	83 f8 0d             	cmp    eax,0xd
c001d201:	77 13                	ja     c001d216 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001d203:	0f b6 db             	movzx  ebx,bl
c001d206:	0f b6 d2             	movzx  edx,dl
c001d209:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001d210:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d214:	eb 17                	jmp    c001d22d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d216:	83 f8 15             	cmp    eax,0x15
c001d219:	77 14                	ja     c001d22f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001d21b:	0f b6 db             	movzx  ebx,bl
c001d21e:	0f b6 d2             	movzx  edx,dl
c001d221:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001d229:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d22d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d22f:	83 c4 1c             	add    esp,0x1c
c001d232:	5b                   	pop    ebx
c001d233:	5e                   	pop    esi
c001d234:	5f                   	pop    edi
c001d235:	5d                   	pop    ebp
c001d236:	c3                   	ret    
c001d237:	90                   	nop

c001d238 <IDE::detect()>:
c001d238:	55                   	push   ebp
c001d239:	57                   	push   edi
c001d23a:	56                   	push   esi
c001d23b:	53                   	push   ebx
c001d23c:	81 ec 28 02 00 00    	sub    esp,0x228
c001d242:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001d249:	68 ab 42 02 c0       	push   0xc00242ab
c001d24e:	e8 98 f3 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d253:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001d259:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001d265:	0f 85 26 04 00 00    	jne    c001d691 <IDE::detect()+0x459>
c001d26b:	83 ec 0c             	sub    esp,0xc
c001d26e:	31 f6                	xor    esi,esi
c001d270:	68 ae 42 02 c0       	push   0xc00242ae
c001d275:	31 ff                	xor    edi,edi
c001d277:	e8 6f f3 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d27c:	83 c4 10             	add    esp,0x10
c001d27f:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d286:	83 ec 0c             	sub    esp,0xc
c001d289:	68 b1 42 02 c0       	push   0xc00242b1
c001d28e:	e8 58 f3 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d293:	83 c4 10             	add    esp,0x10
c001d296:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d29d:	83 ec 0c             	sub    esp,0xc
c001d2a0:	31 ed                	xor    ebp,ebp
c001d2a2:	68 b4 42 02 c0       	push   0xc00242b4
c001d2a7:	e8 3f f3 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d2ac:	89 f8                	mov    eax,edi
c001d2ae:	c1 e0 06             	shl    eax,0x6
c001d2b1:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d2b9:	c7 04 24 b7 42 02 c0 	mov    DWORD PTR [esp],0xc00242b7
c001d2c0:	e8 26 f3 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d2c5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d2c9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d1:	c1 e0 04             	shl    eax,0x4
c001d2d4:	83 c8 a0             	or     eax,0xffffffa0
c001d2d7:	0f b6 c0             	movzx  eax,al
c001d2da:	50                   	push   eax
c001d2db:	6a 06                	push   0x6
c001d2dd:	56                   	push   esi
c001d2de:	53                   	push   ebx
c001d2df:	e8 d4 f6 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2e4:	83 c4 1c             	add    esp,0x1c
c001d2e7:	6a 0c                	push   0xc
c001d2e9:	56                   	push   esi
c001d2ea:	53                   	push   ebx
c001d2eb:	e8 88 f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d2f0:	83 c4 0c             	add    esp,0xc
c001d2f3:	6a 0c                	push   0xc
c001d2f5:	56                   	push   esi
c001d2f6:	53                   	push   ebx
c001d2f7:	e8 7c f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d2fc:	83 c4 0c             	add    esp,0xc
c001d2ff:	6a 0c                	push   0xc
c001d301:	56                   	push   esi
c001d302:	53                   	push   ebx
c001d303:	e8 70 f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d308:	83 c4 0c             	add    esp,0xc
c001d30b:	6a 0c                	push   0xc
c001d30d:	56                   	push   esi
c001d30e:	53                   	push   ebx
c001d30f:	e8 64 f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d314:	c7 04 24 ba 42 02 c0 	mov    DWORD PTR [esp],0xc00242ba
c001d31b:	e8 cb f2 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d320:	68 ec 00 00 00       	push   0xec
c001d325:	6a 07                	push   0x7
c001d327:	56                   	push   esi
c001d328:	53                   	push   ebx
c001d329:	e8 8a f6 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d32e:	83 c4 1c             	add    esp,0x1c
c001d331:	6a 0c                	push   0xc
c001d333:	56                   	push   esi
c001d334:	53                   	push   ebx
c001d335:	e8 3e f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d33a:	83 c4 0c             	add    esp,0xc
c001d33d:	6a 0c                	push   0xc
c001d33f:	56                   	push   esi
c001d340:	53                   	push   ebx
c001d341:	e8 32 f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d346:	83 c4 0c             	add    esp,0xc
c001d349:	6a 0c                	push   0xc
c001d34b:	56                   	push   esi
c001d34c:	53                   	push   ebx
c001d34d:	e8 26 f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d352:	83 c4 0c             	add    esp,0xc
c001d355:	6a 0c                	push   0xc
c001d357:	56                   	push   esi
c001d358:	53                   	push   ebx
c001d359:	e8 1a f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d35e:	c7 04 24 bd 42 02 c0 	mov    DWORD PTR [esp],0xc00242bd
c001d365:	e8 81 f2 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d36a:	83 c4 0c             	add    esp,0xc
c001d36d:	6a 0c                	push   0xc
c001d36f:	56                   	push   esi
c001d370:	53                   	push   ebx
c001d371:	e8 02 f7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d376:	83 c4 10             	add    esp,0x10
c001d379:	84 c0                	test   al,al
c001d37b:	75 1f                	jne    c001d39c <IDE::detect()+0x164>
c001d37d:	83 ec 0c             	sub    esp,0xc
c001d380:	68 c0 42 02 c0       	push   0xc00242c0
c001d385:	e8 61 f2 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d38a:	e9 e0 02 00 00       	jmp    c001d66f <IDE::detect()+0x437>
c001d38f:	a8 80                	test   al,0x80
c001d391:	74 21                	je     c001d3b4 <IDE::detect()+0x17c>
c001d393:	45                   	inc    ebp
c001d394:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001d39a:	7f 1e                	jg     c001d3ba <IDE::detect()+0x182>
c001d39c:	50                   	push   eax
c001d39d:	6a 0c                	push   0xc
c001d39f:	56                   	push   esi
c001d3a0:	53                   	push   ebx
c001d3a1:	e8 d2 f6 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d3a6:	83 c4 10             	add    esp,0x10
c001d3a9:	a8 01                	test   al,0x1
c001d3ab:	74 e2                	je     c001d38f <IDE::detect()+0x157>
c001d3ad:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001d3b2:	eb 22                	jmp    c001d3d6 <IDE::detect()+0x19e>
c001d3b4:	a8 08                	test   al,0x8
c001d3b6:	74 db                	je     c001d393 <IDE::detect()+0x15b>
c001d3b8:	eb 17                	jmp    c001d3d1 <IDE::detect()+0x199>
c001d3ba:	83 ec 0c             	sub    esp,0xc
c001d3bd:	6a 32                	push   0x32
c001d3bf:	e8 64 85 ff ff       	call   c0015928 <milliTenthSleep(unsigned int)>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001d3cd:	75 cd                	jne    c001d39c <IDE::detect()+0x164>
c001d3cf:	eb dc                	jmp    c001d3ad <IDE::detect()+0x175>
c001d3d1:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001d3d6:	83 ec 0c             	sub    esp,0xc
c001d3d9:	68 c3 42 02 c0       	push   0xc00242c3
c001d3de:	e8 08 f2 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d3e3:	83 c4 10             	add    esp,0x10
c001d3e6:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d3eb:	74 57                	je     c001d444 <IDE::detect()+0x20c>
c001d3ed:	50                   	push   eax
c001d3ee:	6a 04                	push   0x4
c001d3f0:	56                   	push   esi
c001d3f1:	53                   	push   ebx
c001d3f2:	e8 81 f6 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d3f7:	83 c4 0c             	add    esp,0xc
c001d3fa:	6a 05                	push   0x5
c001d3fc:	56                   	push   esi
c001d3fd:	53                   	push   ebx
c001d3fe:	89 c5                	mov    ebp,eax
c001d400:	e8 73 f6 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d405:	89 e9                	mov    ecx,ebp
c001d407:	83 c4 10             	add    esp,0x10
c001d40a:	0f b6 e9             	movzx  ebp,cl
c001d40d:	83 fd 14             	cmp    ebp,0x14
c001d410:	75 04                	jne    c001d416 <IDE::detect()+0x1de>
c001d412:	3c eb                	cmp    al,0xeb
c001d414:	74 11                	je     c001d427 <IDE::detect()+0x1ef>
c001d416:	83 fd 69             	cmp    ebp,0x69
c001d419:	0f 85 53 02 00 00    	jne    c001d672 <IDE::detect()+0x43a>
c001d41f:	3c 96                	cmp    al,0x96
c001d421:	0f 85 4b 02 00 00    	jne    c001d672 <IDE::detect()+0x43a>
c001d427:	68 a1 00 00 00       	push   0xa1
c001d42c:	6a 07                	push   0x7
c001d42e:	56                   	push   esi
c001d42f:	53                   	push   ebx
c001d430:	e8 83 f5 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d435:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d43c:	e8 e7 84 ff ff       	call   c0015928 <milliTenthSleep(unsigned int)>
c001d441:	83 c4 10             	add    esp,0x10
c001d444:	83 ec 0c             	sub    esp,0xc
c001d447:	89 fd                	mov    ebp,edi
c001d449:	68 c6 42 02 c0       	push   0xc00242c6
c001d44e:	e8 98 f1 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d453:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d457:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d45e:	c1 e5 06             	shl    ebp,0x6
c001d461:	52                   	push   edx
c001d462:	01 dd                	add    ebp,ebx
c001d464:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d468:	6a 00                	push   0x0
c001d46a:	56                   	push   esi
c001d46b:	53                   	push   ebx
c001d46c:	e8 f7 fc ff ff       	call   c001d168 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d471:	83 c4 14             	add    esp,0x14
c001d474:	68 ca 42 02 c0       	push   0xc00242ca
c001d479:	e8 6d f1 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d47e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d483:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d48a:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d491:	89 f0                	mov    eax,esi
c001d493:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d499:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d49d:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d4a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a7:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d4ae:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d4b6:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d4bd:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d4c5:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d4cb:	c7 04 24 ce 42 02 c0 	mov    DWORD PTR [esp],0xc00242ce
c001d4d2:	e8 14 f1 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d4d7:	83 c4 10             	add    esp,0x10
c001d4da:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d4e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d4e5:	74 09                	je     c001d4f0 <IDE::detect()+0x2b8>
c001d4e7:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d4ee:	eb 07                	jmp    c001d4f7 <IDE::detect()+0x2bf>
c001d4f0:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d4f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d4fb:	89 f8                	mov    eax,edi
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	c1 e0 06             	shl    eax,0x6
c001d503:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d506:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d50c:	68 d2 42 02 c0       	push   0xc00242d2
c001d511:	e8 d5 f0 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d516:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d51a:	89 e8                	mov    eax,ebp
c001d51c:	83 c4 10             	add    esp,0x10
c001d51f:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d522:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d525:	83 c2 02             	add    edx,0x2
c001d528:	83 c0 02             	add    eax,0x2
c001d52b:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d531:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d534:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d53a:	39 d5                	cmp    ebp,edx
c001d53c:	75 e4                	jne    c001d522 <IDE::detect()+0x2ea>
c001d53e:	89 f8                	mov    eax,edi
c001d540:	c1 e0 06             	shl    eax,0x6
c001d543:	01 d8                	add    eax,ebx
c001d545:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d54c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d553:	c1 ea 09             	shr    edx,0x9
c001d556:	83 e2 01             	and    edx,0x1
c001d559:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d560:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d566:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d56a:	74 0c                	je     c001d578 <IDE::detect()+0x340>
c001d56c:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d575:	0f 95 c2             	setne  dl
c001d578:	89 fd                	mov    ebp,edi
c001d57a:	83 ec 0c             	sub    esp,0xc
c001d57d:	c1 e5 06             	shl    ebp,0x6
c001d580:	01 dd                	add    ebp,ebx
c001d582:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d588:	68 d6 42 02 c0       	push   0xc00242d6
c001d58d:	e8 59 f0 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d592:	83 c4 10             	add    esp,0x10
c001d595:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d59a:	75 66                	jne    c001d602 <IDE::detect()+0x3ca>
c001d59c:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d5a3:	0f 84 b8 00 00 00    	je     c001d661 <IDE::detect()+0x429>
c001d5a9:	83 ec 0c             	sub    esp,0xc
c001d5ac:	68 da 42 02 c0       	push   0xc00242da
c001d5b1:	e8 35 f0 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d5b6:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d5bd:	e8 de 13 ff ff       	call   c000e9a0 <malloc>
c001d5c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5c5:	89 c5                	mov    ebp,eax
c001d5c7:	e8 44 05 00 00       	call   c001db10 <ATA::ATA()>
c001d5cc:	c7 04 24 de 42 02 c0 	mov    DWORD PTR [esp],0xc00242de
c001d5d3:	e8 13 f0 fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d5d8:	59                   	pop    ecx
c001d5d9:	58                   	pop    eax
c001d5da:	55                   	push   ebp
c001d5db:	53                   	push   ebx
c001d5dc:	e8 85 ba fe ff       	call   c0009066 <Device::addChild(Device*)>
c001d5e1:	c7 04 24 e3 42 02 c0 	mov    DWORD PTR [esp],0xc00242e3
c001d5e8:	e8 fe ef fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d5ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5f0:	53                   	push   ebx
c001d5f1:	57                   	push   edi
c001d5f2:	6a 00                	push   0x0
c001d5f4:	55                   	push   ebp
c001d5f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5f8:	83 c4 14             	add    esp,0x14
c001d5fb:	68 e8 42 02 c0       	push   0xc00242e8
c001d600:	eb 57                	jmp    c001d659 <IDE::detect()+0x421>
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	68 ed 42 02 c0       	push   0xc00242ed
c001d60a:	e8 dc ef fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d60f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d616:	e8 85 13 ff ff       	call   c000e9a0 <malloc>
c001d61b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d61e:	89 c5                	mov    ebp,eax
c001d620:	e8 b1 0c 00 00       	call   c001e2d6 <ATAPI::ATAPI()>
c001d625:	c7 04 24 f3 42 02 c0 	mov    DWORD PTR [esp],0xc00242f3
c001d62c:	e8 ba ef fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d631:	58                   	pop    eax
c001d632:	5a                   	pop    edx
c001d633:	55                   	push   ebp
c001d634:	53                   	push   ebx
c001d635:	e8 2c ba fe ff       	call   c0009066 <Device::addChild(Device*)>
c001d63a:	c7 04 24 fa 42 02 c0 	mov    DWORD PTR [esp],0xc00242fa
c001d641:	e8 a5 ef fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d646:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d649:	53                   	push   ebx
c001d64a:	57                   	push   edi
c001d64b:	6a 00                	push   0x0
c001d64d:	55                   	push   ebp
c001d64e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d651:	83 c4 14             	add    esp,0x14
c001d654:	68 01 43 02 c0       	push   0xc0024301
c001d659:	e8 8d ef fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d65e:	83 c4 10             	add    esp,0x10
c001d661:	83 ec 0c             	sub    esp,0xc
c001d664:	47                   	inc    edi
c001d665:	68 08 43 02 c0       	push   0xc0024308
c001d66a:	e8 7c ef fe ff       	call   c000c5eb <KeSetBootMessage(char const*)>
c001d66f:	83 c4 10             	add    esp,0x10
c001d672:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d676:	74 0c                	je     c001d684 <IDE::detect()+0x44c>
c001d678:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d67f:	e9 19 fc ff ff       	jmp    c001d29d <IDE::detect()+0x65>
c001d684:	4e                   	dec    esi
c001d685:	74 0a                	je     c001d691 <IDE::detect()+0x459>
c001d687:	be 01 00 00 00       	mov    esi,0x1
c001d68c:	e9 f5 fb ff ff       	jmp    c001d286 <IDE::detect()+0x4e>
c001d691:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d697:	5b                   	pop    ebx
c001d698:	5e                   	pop    esi
c001d699:	5f                   	pop    edi
c001d69a:	5d                   	pop    ebp
c001d69b:	c3                   	ret    

c001d69c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d69c:	55                   	push   ebp
c001d69d:	57                   	push   edi
c001d69e:	56                   	push   esi
c001d69f:	53                   	push   ebx
c001d6a0:	83 ec 1c             	sub    esp,0x1c
c001d6a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d6ab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d6af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6b7:	88 c3                	mov    bl,al
c001d6b9:	25 ff 00 00 00       	and    eax,0xff
c001d6be:	0f 84 88 00 00 00    	je     c001d74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	89 c7                	mov    edi,eax
c001d6c9:	68 0c 43 02 c0       	push   0xc002430c
c001d6ce:	e8 7b 98 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d6d3:	83 c4 10             	add    esp,0x10
c001d6d6:	83 ff 01             	cmp    edi,0x1
c001d6d9:	74 6b                	je     c001d746 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d6db:	83 ff 02             	cmp    edi,0x2
c001d6de:	75 58                	jne    c001d738 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d6e0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d6e5:	50                   	push   eax
c001d6e6:	6a 01                	push   0x1
c001d6e8:	01 ff                	add    edi,edi
c001d6ea:	09 fe                	or     esi,edi
c001d6ec:	89 f0                	mov    eax,esi
c001d6ee:	0f b6 f0             	movzx  esi,al
c001d6f1:	c1 e6 06             	shl    esi,0x6
c001d6f4:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d6fc:	50                   	push   eax
c001d6fd:	55                   	push   ebp
c001d6fe:	e8 75 f3 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	a8 01                	test   al,0x1
c001d708:	74 02                	je     c001d70c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d70a:	b3 07                	mov    bl,0x7
c001d70c:	a8 02                	test   al,0x2
c001d70e:	74 02                	je     c001d712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d710:	b3 03                	mov    bl,0x3
c001d712:	a8 04                	test   al,0x4
c001d714:	74 02                	je     c001d718 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d716:	b3 14                	mov    bl,0x14
c001d718:	a8 08                	test   al,0x8
c001d71a:	74 02                	je     c001d71e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d71c:	b3 03                	mov    bl,0x3
c001d71e:	a8 10                	test   al,0x10
c001d720:	74 02                	je     c001d724 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d722:	b3 15                	mov    bl,0x15
c001d724:	a8 20                	test   al,0x20
c001d726:	74 02                	je     c001d72a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d728:	b3 03                	mov    bl,0x3
c001d72a:	a8 40                	test   al,0x40
c001d72c:	74 02                	je     c001d730 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d72e:	b3 16                	mov    bl,0x16
c001d730:	a8 80                	test   al,0x80
c001d732:	74 18                	je     c001d74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d734:	b3 0d                	mov    bl,0xd
c001d736:	eb 14                	jmp    c001d74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d738:	83 ff 03             	cmp    edi,0x3
c001d73b:	74 0d                	je     c001d74a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d73d:	83 ff 04             	cmp    edi,0x4
c001d740:	75 0a                	jne    c001d74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d742:	b3 08                	mov    bl,0x8
c001d744:	eb 06                	jmp    c001d74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d746:	b3 13                	mov    bl,0x13
c001d748:	eb 02                	jmp    c001d74c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d74a:	b3 17                	mov    bl,0x17
c001d74c:	83 c4 1c             	add    esp,0x1c
c001d74f:	88 d8                	mov    al,bl
c001d751:	5b                   	pop    ebx
c001d752:	5e                   	pop    esi
c001d753:	5f                   	pop    edi
c001d754:	5d                   	pop    ebp
c001d755:	c3                   	ret    

c001d756 <IDE::polling(unsigned char, unsigned int)>:
c001d756:	57                   	push   edi
c001d757:	56                   	push   esi
c001d758:	53                   	push   ebx
c001d759:	bb 04 00 00 00       	mov    ebx,0x4
c001d75e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d762:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d767:	52                   	push   edx
c001d768:	6a 0c                	push   0xc
c001d76a:	56                   	push   esi
c001d76b:	57                   	push   edi
c001d76c:	e8 07 f3 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d771:	83 c4 10             	add    esp,0x10
c001d774:	4b                   	dec    ebx
c001d775:	75 f0                	jne    c001d767 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d777:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d77c:	50                   	push   eax
c001d77d:	6a 0c                	push   0xc
c001d77f:	56                   	push   esi
c001d780:	57                   	push   edi
c001d781:	e8 f2 f2 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001d786:	83 c4 10             	add    esp,0x10
c001d789:	a8 01                	test   al,0x1
c001d78b:	75 17                	jne    c001d7a4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d78d:	a8 20                	test   al,0x20
c001d78f:	75 0f                	jne    c001d7a0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d791:	4b                   	dec    ebx
c001d792:	74 10                	je     c001d7a4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d794:	a8 80                	test   al,0x80
c001d796:	75 e4                	jne    c001d77c <IDE::polling(unsigned char, unsigned int)+0x26>
c001d798:	a8 08                	test   al,0x8
c001d79a:	74 e0                	je     c001d77c <IDE::polling(unsigned char, unsigned int)+0x26>
c001d79c:	31 c0                	xor    eax,eax
c001d79e:	eb 06                	jmp    c001d7a6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d7a0:	b0 01                	mov    al,0x1
c001d7a2:	eb 02                	jmp    c001d7a6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d7a4:	b0 02                	mov    al,0x2
c001d7a6:	5b                   	pop    ebx
c001d7a7:	5e                   	pop    esi
c001d7a8:	5f                   	pop    edi
c001d7a9:	c3                   	ret    

c001d7aa <SATABus::close(int, int, void*)>:
c001d7aa:	31 c0                	xor    eax,eax
c001d7ac:	c3                   	ret    
c001d7ad:	90                   	nop

c001d7ae <SATABus::detect()>:
c001d7ae:	c3                   	ret    
c001d7af:	90                   	nop

c001d7b0 <SATABus::SATABus()>:
c001d7b0:	83 ec 0c             	sub    esp,0xc
c001d7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b7:	83 ec 08             	sub    esp,0x8
c001d7ba:	68 44 43 02 c0       	push   0xc0024344
c001d7bf:	50                   	push   eax
c001d7c0:	e8 fb bb fe ff       	call   c00093c0 <HardDiskController::HardDiskController(char const*)>
c001d7c5:	83 c4 10             	add    esp,0x10
c001d7c8:	ba 70 43 02 c0       	mov    edx,0xc0024370
c001d7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d1:	89 10                	mov    DWORD PTR [eax],edx
c001d7d3:	83 ec 0c             	sub    esp,0xc
c001d7d6:	6a 50                	push   0x50
c001d7d8:	e8 e1 17 ff ff       	call   c000efbe <Phys::allocateContiguousPages(int)>
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	89 c2                	mov    edx,eax
c001d7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d7ec:	83 ec 0c             	sub    esp,0xc
c001d7ef:	6a 50                	push   0x50
c001d7f1:	e8 e5 48 ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c001d7f6:	83 c4 10             	add    esp,0x10
c001d7f9:	89 c2                	mov    edx,eax
c001d7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d805:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001d80a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d80e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d814:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d818:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d81e:	83 ec 0c             	sub    esp,0xc
c001d821:	6a 03                	push   0x3
c001d823:	6a 50                	push   0x50
c001d825:	51                   	push   ecx
c001d826:	52                   	push   edx
c001d827:	50                   	push   eax
c001d828:	e8 81 51 ff ff       	call   c00129ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d82d:	83 c4 20             	add    esp,0x20
c001d830:	90                   	nop
c001d831:	83 c4 0c             	add    esp,0xc
c001d834:	c3                   	ret    
c001d835:	90                   	nop

c001d836 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d83a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d83d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d840:	09 c2                	or     edx,eax
c001d842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d846:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d84c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d84e:	31 c0                	xor    eax,eax
c001d850:	c1 e9 08             	shr    ecx,0x8
c001d853:	83 e1 0f             	and    ecx,0xf
c001d856:	39 c8                	cmp    eax,ecx
c001d858:	74 0a                	je     c001d864 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d85a:	f6 c2 01             	test   dl,0x1
c001d85d:	74 08                	je     c001d867 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d85f:	d1 ea                	shr    edx,1
c001d861:	40                   	inc    eax
c001d862:	eb f2                	jmp    c001d856 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d864:	83 c8 ff             	or     eax,0xffffffff
c001d867:	c3                   	ret    

c001d868 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d868:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d86c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d86f:	89 c2                	mov    edx,eax
c001d871:	c1 ea 08             	shr    edx,0x8
c001d874:	83 e2 0f             	and    edx,0xf
c001d877:	4a                   	dec    edx
c001d878:	75 32                	jne    c001d8ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d87a:	83 e0 0f             	and    eax,0xf
c001d87d:	83 f8 03             	cmp    eax,0x3
c001d880:	75 2a                	jne    c001d8ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d882:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d885:	b8 02 00 00 00       	mov    eax,0x2
c001d88a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d890:	74 1c                	je     c001d8ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d892:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d898:	b8 04 00 00 00       	mov    eax,0x4
c001d89d:	74 0f                	je     c001d8ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d89f:	31 c0                	xor    eax,eax
c001d8a1:	83 fa 03             	cmp    edx,0x3
c001d8a4:	0f 94 c0             	sete   al
c001d8a7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d8ab:	c3                   	ret    
c001d8ac:	31 c0                	xor    eax,eax
c001d8ae:	c3                   	ret    
c001d8af:	90                   	nop

c001d8b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d8b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8b7:	0f ba e2 0f          	bt     edx,0xf
c001d8bb:	72 f7                	jb     c001d8b4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d8bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8c0:	83 ca 10             	or     edx,0x10
c001d8c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d8c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8c9:	83 ca 01             	or     edx,0x1
c001d8cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d8cf:	c3                   	ret    

c001d8d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d8d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8d7:	83 e2 fe             	and    edx,0xfffffffe
c001d8da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d8dd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8e0:	83 e2 ef             	and    edx,0xffffffef
c001d8e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d8e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8e9:	0f ba e2 0e          	bt     edx,0xe
c001d8ed:	72 f7                	jb     c001d8e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d8ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8f2:	0f ba e2 0f          	bt     edx,0xf
c001d8f6:	72 ee                	jb     c001d8e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d8f8:	c3                   	ret    
c001d8f9:	90                   	nop

c001d8fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d8fa:	55                   	push   ebp
c001d8fb:	57                   	push   edi
c001d8fc:	56                   	push   esi
c001d8fd:	53                   	push   ebx
c001d8fe:	83 ec 1c             	sub    esp,0x1c
c001d901:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d905:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d909:	53                   	push   ebx
c001d90a:	57                   	push   edi
c001d90b:	e8 c0 ff ff ff       	call   c001d8d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d910:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d914:	83 ec 0c             	sub    esp,0xc
c001d917:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d91d:	c1 e5 0a             	shl    ebp,0xa
c001d920:	01 e8                	add    eax,ebp
c001d922:	89 03                	mov    DWORD PTR [ebx],eax
c001d924:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d926:	68 00 04 00 00       	push   0x400
c001d92b:	6a 00                	push   0x0
c001d92d:	50                   	push   eax
c001d92e:	e8 bd 2b fe ff       	call   c00004f0 <memset>
c001d933:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d939:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001d93d:	83 c4 1c             	add    esp,0x1c
c001d940:	01 e8                	add    eax,ebp
c001d942:	89 03                	mov    DWORD PTR [ebx],eax
c001d944:	c1 e6 08             	shl    esi,0x8
c001d947:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d94e:	81 c6 00 80 00 00    	add    esi,0x8000
c001d954:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d95a:	01 f0                	add    eax,esi
c001d95c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d95f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d962:	68 00 01 00 00       	push   0x100
c001d967:	6a 00                	push   0x0
c001d969:	50                   	push   eax
c001d96a:	e8 81 2b fe ff       	call   c00004f0 <memset>
c001d96f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d975:	31 d2                	xor    edx,edx
c001d977:	01 f0                	add    eax,esi
c001d979:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d97c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d983:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001d989:	01 ee                	add    esi,ebp
c001d98b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	c1 e5 0d             	shl    ebp,0xd
c001d995:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001d99b:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001d9a1:	83 c6 20             	add    esi,0x20
c001d9a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9a8:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d9ae:	01 e8                	add    eax,ebp
c001d9b0:	01 d0                	add    eax,edx
c001d9b2:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d9b5:	52                   	push   edx
c001d9b6:	68 00 01 00 00       	push   0x100
c001d9bb:	6a 00                	push   0x0
c001d9bd:	50                   	push   eax
c001d9be:	e8 2d 2b fe ff       	call   c00004f0 <memset>
c001d9c3:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d9c9:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001d9d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9d4:	83 c4 10             	add    esp,0x10
c001d9d7:	01 e8                	add    eax,ebp
c001d9d9:	01 d0                	add    eax,edx
c001d9db:	81 c2 00 01 00 00    	add    edx,0x100
c001d9e1:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d9e4:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001d9ea:	75 af                	jne    c001d99b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001d9ec:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d9f3:	50                   	push   eax
c001d9f4:	50                   	push   eax
c001d9f5:	53                   	push   ebx
c001d9f6:	57                   	push   edi
c001d9f7:	e8 b4 fe ff ff       	call   c001d8b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d9fc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001da03:	83 c4 2c             	add    esp,0x2c
c001da06:	5b                   	pop    ebx
c001da07:	5e                   	pop    esi
c001da08:	5f                   	pop    edi
c001da09:	5d                   	pop    ebp
c001da0a:	c3                   	ret    
c001da0b:	90                   	nop

c001da0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001da0c:	55                   	push   ebp
c001da0d:	57                   	push   edi
c001da0e:	56                   	push   esi
c001da0f:	53                   	push   ebx
c001da10:	31 db                	xor    ebx,ebx
c001da12:	83 ec 0c             	sub    esp,0xc
c001da15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da19:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001da1d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001da20:	f7 c7 01 00 00 00    	test   edi,0x1
c001da26:	74 7a                	je     c001daa2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001da28:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001da2c:	89 d8                	mov    eax,ebx
c001da2e:	c1 e0 07             	shl    eax,0x7
c001da31:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001da38:	55                   	push   ebp
c001da39:	56                   	push   esi
c001da3a:	e8 29 fe ff ff       	call   c001d868 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001da3f:	5a                   	pop    edx
c001da40:	59                   	pop    ecx
c001da41:	83 f8 01             	cmp    eax,0x1
c001da44:	75 21                	jne    c001da67 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001da46:	50                   	push   eax
c001da47:	53                   	push   ebx
c001da48:	55                   	push   ebp
c001da49:	56                   	push   esi
c001da4a:	e8 ab fe ff ff       	call   c001d8fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001da4f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001da56:	e8 45 0f ff ff       	call   c000e9a0 <malloc>
c001da5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001da5e:	89 c5                	mov    ebp,eax
c001da60:	e8 37 0f 00 00       	call   c001e99c <SATA::SATA()>
c001da65:	eb 24                	jmp    c001da8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001da67:	83 f8 04             	cmp    eax,0x4
c001da6a:	75 36                	jne    c001daa2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001da6c:	51                   	push   ecx
c001da6d:	53                   	push   ebx
c001da6e:	55                   	push   ebp
c001da6f:	56                   	push   esi
c001da70:	e8 85 fe ff ff       	call   c001d8fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001da75:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001da7c:	e8 1f 0f ff ff       	call   c000e9a0 <malloc>
c001da81:	89 04 24             	mov    DWORD PTR [esp],eax
c001da84:	89 c5                	mov    ebp,eax
c001da86:	e8 a7 12 00 00       	call   c001ed32 <SATAPI::SATAPI()>
c001da8b:	58                   	pop    eax
c001da8c:	5a                   	pop    edx
c001da8d:	55                   	push   ebp
c001da8e:	56                   	push   esi
c001da8f:	e8 d2 b5 fe ff       	call   c0009066 <Device::addChild(Device*)>
c001da94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001da97:	56                   	push   esi
c001da98:	6a 00                	push   0x0
c001da9a:	53                   	push   ebx
c001da9b:	55                   	push   ebp
c001da9c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001da9f:	83 c4 20             	add    esp,0x20
c001daa2:	d1 ef                	shr    edi,1
c001daa4:	43                   	inc    ebx
c001daa5:	83 fb 20             	cmp    ebx,0x20
c001daa8:	0f 85 72 ff ff ff    	jne    c001da20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001daae:	83 c4 0c             	add    esp,0xc
c001dab1:	5b                   	pop    ebx
c001dab2:	5e                   	pop    esi
c001dab3:	5f                   	pop    edi
c001dab4:	5d                   	pop    ebp
c001dab5:	c3                   	ret    

c001dab6 <SATABus::open(int, int, void*)>:
c001dab6:	53                   	push   ebx
c001dab7:	83 ec 08             	sub    esp,0x8
c001daba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dabe:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001dac4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001daca:	e8 cd 79 ff ff       	call   c001549c <KeDisablePreemption()>
c001dacf:	52                   	push   edx
c001dad0:	52                   	push   edx
c001dad1:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001dad7:	53                   	push   ebx
c001dad8:	e8 2f ff ff ff       	call   c001da0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001dadd:	e8 e2 79 ff ff       	call   c00154c4 <KeRestorePreemption()>
c001dae2:	83 c4 18             	add    esp,0x18
c001dae5:	31 c0                	xor    eax,eax
c001dae7:	5b                   	pop    ebx
c001dae8:	c3                   	ret    
c001dae9:	90                   	nop

c001daea <ATA::close(int, int, void*)>:
c001daea:	83 ec 0c             	sub    esp,0xc
c001daed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daf1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001daf7:	85 c0                	test   eax,eax
c001daf9:	74 0c                	je     c001db07 <ATA::close(int, int, void*)+0x1d>
c001dafb:	8b 10                	mov    edx,DWORD PTR [eax]
c001dafd:	83 ec 0c             	sub    esp,0xc
c001db00:	50                   	push   eax
c001db01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db04:	83 c4 10             	add    esp,0x10
c001db07:	31 c0                	xor    eax,eax
c001db09:	83 c4 0c             	add    esp,0xc
c001db0c:	c3                   	ret    
c001db0d:	90                   	nop

c001db0e <ATA::powerSaving(PowerSavingLevel)>:
c001db0e:	c3                   	ret    
c001db0f:	90                   	nop

c001db10 <ATA::ATA()>:
c001db10:	83 ec 0c             	sub    esp,0xc
c001db13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db17:	83 ec 04             	sub    esp,0x4
c001db1a:	68 00 02 00 00       	push   0x200
c001db1f:	68 f1 44 02 c0       	push   0xc00244f1
c001db24:	50                   	push   eax
c001db25:	e8 20 b9 fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db2a:	83 c4 10             	add    esp,0x10
c001db2d:	ba 58 44 02 c0       	mov    edx,0xc0024458
c001db32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db36:	89 10                	mov    DWORD PTR [eax],edx
c001db38:	90                   	nop
c001db39:	83 c4 0c             	add    esp,0xc
c001db3c:	c3                   	ret    
c001db3d:	90                   	nop

c001db3e <ATA::flush(bool)>:
c001db3e:	53                   	push   ebx
c001db3f:	83 ec 08             	sub    esp,0x8
c001db42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001db47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db4b:	83 f8 01             	cmp    eax,0x1
c001db4e:	19 c0                	sbb    eax,eax
c001db50:	83 e0 fd             	and    eax,0xfffffffd
c001db53:	05 ea 00 00 00       	add    eax,0xea
c001db58:	50                   	push   eax
c001db59:	6a 07                	push   0x7
c001db5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db62:	50                   	push   eax
c001db63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db69:	e8 4a ee ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db6e:	83 c4 0c             	add    esp,0xc
c001db71:	6a 00                	push   0x0
c001db73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db7a:	50                   	push   eax
c001db7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db81:	e8 d0 fb ff ff       	call   c001d756 <IDE::polling(unsigned char, unsigned int)>
c001db86:	83 c4 18             	add    esp,0x18
c001db89:	5b                   	pop    ebx
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <ATA::readyForCommand()>:
c001db8c:	56                   	push   esi
c001db8d:	53                   	push   ebx
c001db8e:	53                   	push   ebx
c001db8f:	31 db                	xor    ebx,ebx
c001db91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db95:	51                   	push   ecx
c001db96:	6a 0c                	push   0xc
c001db98:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001db9f:	50                   	push   eax
c001dba0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dba6:	e8 cd ee ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001dbab:	83 c4 10             	add    esp,0x10
c001dbae:	a8 88                	test   al,0x88
c001dbb0:	74 1f                	je     c001dbd1 <ATA::readyForCommand()+0x45>
c001dbb2:	43                   	inc    ebx
c001dbb3:	83 fb 63             	cmp    ebx,0x63
c001dbb6:	7e dd                	jle    c001db95 <ATA::readyForCommand()+0x9>
c001dbb8:	83 ec 0c             	sub    esp,0xc
c001dbbb:	6a 0a                	push   0xa
c001dbbd:	e8 66 7d ff ff       	call   c0015928 <milliTenthSleep(unsigned int)>
c001dbc2:	83 c4 10             	add    esp,0x10
c001dbc5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbcb:	75 c8                	jne    c001db95 <ATA::readyForCommand()+0x9>
c001dbcd:	31 c0                	xor    eax,eax
c001dbcf:	eb 02                	jmp    c001dbd3 <ATA::readyForCommand()+0x47>
c001dbd1:	b0 01                	mov    al,0x1
c001dbd3:	5a                   	pop    edx
c001dbd4:	5b                   	pop    ebx
c001dbd5:	5e                   	pop    esi
c001dbd6:	c3                   	ret    
c001dbd7:	90                   	nop

c001dbd8 <ATA::access(unsigned long long, int, void*, bool)>:
c001dbd8:	55                   	push   ebp
c001dbd9:	57                   	push   edi
c001dbda:	56                   	push   esi
c001dbdb:	53                   	push   ebx
c001dbdc:	83 ec 2c             	sub    esp,0x2c
c001dbdf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dbe3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dbe7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dbeb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001dbef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dbf3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001dbf7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001dbfb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001dc01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc05:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dc0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc0f:	c1 e0 06             	shl    eax,0x6
c001dc12:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001dc1a:	74 5b                	je     c001dc77 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001dc1c:	89 fa                	mov    edx,edi
c001dc1e:	89 f0                	mov    eax,esi
c001dc20:	c1 ea 1c             	shr    edx,0x1c
c001dc23:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001dc27:	89 d1                	mov    ecx,edx
c001dc29:	09 c1                	or     ecx,eax
c001dc2b:	74 25                	je     c001dc52 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001dc2d:	31 ed                	xor    ebp,ebp
c001dc2f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001dc36:	89 fa                	mov    edx,edi
c001dc38:	89 f0                	mov    eax,esi
c001dc3a:	0f ad d0             	shrd   eax,edx,cl
c001dc3d:	d3 ea                	shr    edx,cl
c001dc3f:	f6 c1 20             	test   cl,0x20
c001dc42:	74 02                	je     c001dc46 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001dc44:	89 d0                	mov    eax,edx
c001dc46:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001dc4a:	45                   	inc    ebp
c001dc4b:	83 fd 06             	cmp    ebp,0x6
c001dc4e:	75 df                	jne    c001dc2f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001dc50:	eb 71                	jmp    c001dcc3 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001dc52:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001dc57:	89 f0                	mov    eax,esi
c001dc59:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dc60:	0f ac f8 10          	shrd   eax,edi,0x10
c001dc64:	bf 01 00 00 00       	mov    edi,0x1
c001dc69:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dc6d:	c1 ee 18             	shr    esi,0x18
c001dc70:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dc75:	eb 53                	jmp    c001dcca <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001dc77:	6a 00                	push   0x0
c001dc79:	6a 3f                	push   0x3f
c001dc7b:	57                   	push   edi
c001dc7c:	56                   	push   esi
c001dc7d:	e8 42 25 00 00       	call   c00201c4 <__umoddi3>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	40                   	inc    eax
c001dc86:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001dc8a:	6a 00                	push   0x0
c001dc8c:	68 f0 03 00 00       	push   0x3f0
c001dc91:	57                   	push   edi
c001dc92:	56                   	push   esi
c001dc93:	e8 2c 24 00 00       	call   c00200c4 <__udivdi3>
c001dc98:	83 c4 10             	add    esp,0x10
c001dc9b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001dca0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dca7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dcac:	6a 00                	push   0x0
c001dcae:	6a 3f                	push   0x3f
c001dcb0:	57                   	push   edi
c001dcb1:	31 ff                	xor    edi,edi
c001dcb3:	56                   	push   esi
c001dcb4:	e8 0b 24 00 00       	call   c00200c4 <__udivdi3>
c001dcb9:	83 c4 10             	add    esp,0x10
c001dcbc:	83 e0 0f             	and    eax,0xf
c001dcbf:	89 c6                	mov    esi,eax
c001dcc1:	eb 07                	jmp    c001dcca <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001dcc3:	31 f6                	xor    esi,esi
c001dcc5:	bf 02 00 00 00       	mov    edi,0x2
c001dcca:	55                   	push   ebp
c001dccb:	6a 00                	push   0x0
c001dccd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcd4:	50                   	push   eax
c001dcd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dcd9:	e8 e8 ee ff ff       	call   c001cbc6 <IDE::enableIRQs(unsigned char, bool)>
c001dcde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dce1:	e8 a6 fe ff ff       	call   c001db8c <ATA::readyForCommand()>
c001dce6:	83 c4 10             	add    esp,0x10
c001dce9:	84 c0                	test   al,al
c001dceb:	75 0a                	jne    c001dcf7 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001dced:	be 01 00 00 00       	mov    esi,0x1
c001dcf2:	e9 df 02 00 00       	jmp    c001dfd6 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001dcf7:	fa                   	cli    
c001dcf8:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dcfe:	f7 c7 03 00 00 00    	test   edi,0x3
c001dd04:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dd0a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd10:	75 0a                	jne    c001dd1c <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001dd12:	c1 e0 04             	shl    eax,0x4
c001dd15:	09 c6                	or     esi,eax
c001dd17:	83 ce a0             	or     esi,0xffffffa0
c001dd1a:	eb 08                	jmp    c001dd24 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001dd1c:	c1 e0 04             	shl    eax,0x4
c001dd1f:	09 c6                	or     esi,eax
c001dd21:	83 ce e0             	or     esi,0xffffffe0
c001dd24:	89 f0                	mov    eax,esi
c001dd26:	0f b6 d2             	movzx  edx,dl
c001dd29:	0f b6 f0             	movzx  esi,al
c001dd2c:	56                   	push   esi
c001dd2d:	6a 06                	push   0x6
c001dd2f:	52                   	push   edx
c001dd30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd36:	e8 7d ec ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd3b:	83 c4 10             	add    esp,0x10
c001dd3e:	6a 00                	push   0x0
c001dd40:	6a 01                	push   0x1
c001dd42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd49:	50                   	push   eax
c001dd4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd50:	e8 63 ec ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd55:	89 f8                	mov    eax,edi
c001dd57:	83 c4 10             	add    esp,0x10
c001dd5a:	0f b6 f0             	movzx  esi,al
c001dd5d:	83 fe 02             	cmp    esi,0x2
c001dd60:	75 6e                	jne    c001ddd0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001dd62:	6a 00                	push   0x0
c001dd64:	6a 08                	push   0x8
c001dd66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd6d:	50                   	push   eax
c001dd6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd74:	e8 3f ec ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd79:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001dd7e:	50                   	push   eax
c001dd7f:	6a 09                	push   0x9
c001dd81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd88:	50                   	push   eax
c001dd89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd8f:	e8 24 ec ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd94:	83 c4 20             	add    esp,0x20
c001dd97:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001dd9c:	50                   	push   eax
c001dd9d:	6a 0a                	push   0xa
c001dd9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dda6:	50                   	push   eax
c001dda7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddad:	e8 06 ec ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddb2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ddb7:	50                   	push   eax
c001ddb8:	6a 0b                	push   0xb
c001ddba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddc1:	50                   	push   eax
c001ddc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddc8:	e8 eb eb ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddcd:	83 c4 20             	add    esp,0x20
c001ddd0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ddd5:	50                   	push   eax
c001ddd6:	6a 02                	push   0x2
c001ddd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dddf:	50                   	push   eax
c001dde0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dde6:	e8 cd eb ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddeb:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ddf0:	50                   	push   eax
c001ddf1:	6a 03                	push   0x3
c001ddf3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddfa:	50                   	push   eax
c001ddfb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de01:	e8 b2 eb ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de06:	83 c4 20             	add    esp,0x20
c001de09:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001de0e:	50                   	push   eax
c001de0f:	6a 04                	push   0x4
c001de11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de18:	50                   	push   eax
c001de19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de1f:	e8 94 eb ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de24:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de29:	50                   	push   eax
c001de2a:	6a 05                	push   0x5
c001de2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de33:	50                   	push   eax
c001de34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de3a:	e8 79 eb ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de3f:	83 c4 20             	add    esp,0x20
c001de42:	83 fe 02             	cmp    esi,0x2
c001de45:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001de4a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001de4f:	85 c9                	test   ecx,ecx
c001de51:	74 07                	je     c001de5a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001de53:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001de58:	75 45                	jne    c001de9f <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001de5a:	89 f8                	mov    eax,edi
c001de5c:	0f b6 f8             	movzx  edi,al
c001de5f:	31 c0                	xor    eax,eax
c001de61:	4f                   	dec    edi
c001de62:	0f 94 c0             	sete   al
c001de65:	89 c6                	mov    esi,eax
c001de67:	75 0c                	jne    c001de75 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001de69:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001de6e:	b8 30 00 00 00       	mov    eax,0x30
c001de73:	75 2f                	jne    c001dea4 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001de75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001de79:	83 f2 01             	xor    edx,0x1
c001de7c:	85 c9                	test   ecx,ecx
c001de7e:	74 09                	je     c001de89 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001de80:	84 d2                	test   dl,dl
c001de82:	b8 24 00 00 00       	mov    eax,0x24
c001de87:	75 1b                	jne    c001dea4 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001de89:	85 f6                	test   esi,esi
c001de8b:	0f 84 5c fe ff ff    	je     c001dced <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001de91:	84 d2                	test   dl,dl
c001de93:	b8 20 00 00 00       	mov    eax,0x20
c001de98:	75 0a                	jne    c001dea4 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001de9a:	e9 4e fe ff ff       	jmp    c001dced <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001de9f:	b8 34 00 00 00       	mov    eax,0x34
c001dea4:	50                   	push   eax
c001dea5:	6a 07                	push   0x7
c001dea7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001deae:	50                   	push   eax
c001deaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001deb5:	e8 fe ea ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deba:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001dec1:	83 c4 10             	add    esp,0x10
c001dec4:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001decb:	75 01                	jne    c001dece <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001decd:	fb                   	sti    
c001dece:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ded2:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001ded7:	85 f6                	test   esi,esi
c001ded9:	0f 84 dd 00 00 00    	je     c001dfbc <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001dedf:	57                   	push   edi
c001dee0:	6a 01                	push   0x1
c001dee2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dee9:	50                   	push   eax
c001deea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001def0:	e8 61 f8 ff ff       	call   c001d756 <IDE::polling(unsigned char, unsigned int)>
c001def5:	83 c4 10             	add    esp,0x10
c001def8:	0f b6 c0             	movzx  eax,al
c001defb:	85 c0                	test   eax,eax
c001defd:	74 23                	je     c001df22 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001deff:	50                   	push   eax
c001df00:	89 c6                	mov    esi,eax
c001df02:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001df09:	50                   	push   eax
c001df0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df11:	50                   	push   eax
c001df12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df18:	e8 7f f7 ff ff       	call   c001d69c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001df1d:	e9 b1 00 00 00       	jmp    c001dfd3 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001df22:	85 ed                	test   ebp,ebp
c001df24:	74 49                	je     c001df6f <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001df26:	fa                   	cli    
c001df27:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001df2d:	31 ff                	xor    edi,edi
c001df2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001df33:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001df37:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001df3c:	51                   	push   ecx
c001df3d:	51                   	push   ecx
c001df3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df45:	50                   	push   eax
c001df46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df4c:	e8 55 ea ff ff       	call   c001c9a6 <IDE::getBase(unsigned char)>
c001df51:	89 c2                	mov    edx,eax
c001df53:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001df58:	66 ef                	out    dx,ax
c001df5a:	47                   	inc    edi
c001df5b:	83 c4 10             	add    esp,0x10
c001df5e:	81 ff 00 01 00 00    	cmp    edi,0x100
c001df64:	75 c9                	jne    c001df2f <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001df66:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001df6d:	eb 35                	jmp    c001dfa4 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001df6f:	fa                   	cli    
c001df70:	52                   	push   edx
c001df71:	52                   	push   edx
c001df72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df79:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001df7f:	50                   	push   eax
c001df80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df86:	e8 1b ea ff ff       	call   c001c9a6 <IDE::getBase(unsigned char)>
c001df8b:	b9 00 01 00 00       	mov    ecx,0x100
c001df90:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001df94:	89 c2                	mov    edx,eax
c001df96:	fc                   	cld    
c001df97:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001df9a:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001dfa1:	83 c4 10             	add    esp,0x10
c001dfa4:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001dfab:	75 01                	jne    c001dfae <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001dfad:	fb                   	sti    
c001dfae:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001dfb6:	4e                   	dec    esi
c001dfb7:	e9 1b ff ff ff       	jmp    c001ded7 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001dfbc:	31 f6                	xor    esi,esi
c001dfbe:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001dfc3:	74 11                	je     c001dfd6 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001dfc5:	50                   	push   eax
c001dfc6:	50                   	push   eax
c001dfc7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001dfcc:	50                   	push   eax
c001dfcd:	53                   	push   ebx
c001dfce:	e8 6b fb ff ff       	call   c001db3e <ATA::flush(bool)>
c001dfd3:	83 c4 10             	add    esp,0x10
c001dfd6:	83 c4 2c             	add    esp,0x2c
c001dfd9:	89 f0                	mov    eax,esi
c001dfdb:	5b                   	pop    ebx
c001dfdc:	5e                   	pop    esi
c001dfdd:	5f                   	pop    edi
c001dfde:	5d                   	pop    ebp
c001dfdf:	c3                   	ret    

c001dfe0 <ATA::read(unsigned long long, int, void*)>:
c001dfe0:	57                   	push   edi
c001dfe1:	b8 04 00 00 00       	mov    eax,0x4
c001dfe6:	56                   	push   esi
c001dfe7:	53                   	push   ebx
c001dfe8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dff0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dff4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dff8:	8d 7a ff             	lea    edi,[edx-0x1]
c001dffb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e001:	77 25                	ja     c001e028 <ATA::read(unsigned long long, int, void*)+0x48>
c001e003:	85 f6                	test   esi,esi
c001e005:	b8 06 00 00 00       	mov    eax,0x6
c001e00a:	74 1c                	je     c001e028 <ATA::read(unsigned long long, int, void*)+0x48>
c001e00c:	50                   	push   eax
c001e00d:	50                   	push   eax
c001e00e:	6a 00                	push   0x0
c001e010:	56                   	push   esi
c001e011:	52                   	push   edx
c001e012:	53                   	push   ebx
c001e013:	51                   	push   ecx
c001e014:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e018:	e8 bb fb ff ff       	call   c001dbd8 <ATA::access(unsigned long long, int, void*, bool)>
c001e01d:	83 c4 20             	add    esp,0x20
c001e020:	85 c0                	test   eax,eax
c001e022:	0f 95 c0             	setne  al
c001e025:	0f b6 c0             	movzx  eax,al
c001e028:	5b                   	pop    ebx
c001e029:	5e                   	pop    esi
c001e02a:	5f                   	pop    edi
c001e02b:	c3                   	ret    

c001e02c <ATA::write(unsigned long long, int, void*)>:
c001e02c:	57                   	push   edi
c001e02d:	b8 04 00 00 00       	mov    eax,0x4
c001e032:	56                   	push   esi
c001e033:	53                   	push   ebx
c001e034:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e038:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e03c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e040:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e044:	8d 7a ff             	lea    edi,[edx-0x1]
c001e047:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e04d:	77 25                	ja     c001e074 <ATA::write(unsigned long long, int, void*)+0x48>
c001e04f:	85 f6                	test   esi,esi
c001e051:	b8 06 00 00 00       	mov    eax,0x6
c001e056:	74 1c                	je     c001e074 <ATA::write(unsigned long long, int, void*)+0x48>
c001e058:	50                   	push   eax
c001e059:	50                   	push   eax
c001e05a:	6a 01                	push   0x1
c001e05c:	56                   	push   esi
c001e05d:	52                   	push   edx
c001e05e:	53                   	push   ebx
c001e05f:	51                   	push   ecx
c001e060:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e064:	e8 6f fb ff ff       	call   c001dbd8 <ATA::access(unsigned long long, int, void*, bool)>
c001e069:	83 c4 20             	add    esp,0x20
c001e06c:	85 c0                	test   eax,eax
c001e06e:	0f 95 c0             	setne  al
c001e071:	0f b6 c0             	movzx  eax,al
c001e074:	5b                   	pop    ebx
c001e075:	5e                   	pop    esi
c001e076:	5f                   	pop    edi
c001e077:	c3                   	ret    

c001e078 <ATA::detectCHS()>:
c001e078:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e07c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001e082:	c1 e0 06             	shl    eax,0x6
c001e085:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001e08b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001e095:	c7 44 24 04 94 43 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024394
c001e09d:	e9 44 0c ff ff       	jmp    c000ece6 <KePanic(char const*)>

c001e0a2 <ATA::open(int, int, void*)>:
c001e0a2:	53                   	push   ebx
c001e0a3:	83 ec 08             	sub    esp,0x8
c001e0a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e0aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0b2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e0b8:	c1 e0 06             	shl    eax,0x6
c001e0bb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e0c1:	01 d0                	add    eax,edx
c001e0c3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001e0ca:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001e0d0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001e0d7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e0e1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e0e8:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e0ee:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e0f5:	75 0c                	jne    c001e103 <ATA::open(int, int, void*)+0x61>
c001e0f7:	83 ec 0c             	sub    esp,0xc
c001e0fa:	53                   	push   ebx
c001e0fb:	e8 78 ff ff ff       	call   c001e078 <ATA::detectCHS()>
c001e100:	83 c4 10             	add    esp,0x10
c001e103:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e109:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e10f:	c1 e0 06             	shl    eax,0x6
c001e112:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e119:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e123:	d1 e8                	shr    eax,1
c001e125:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e12b:	6a 04                	push   0x4
c001e12d:	6a 0c                	push   0xc
c001e12f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e136:	50                   	push   eax
c001e137:	52                   	push   edx
c001e138:	e8 7b e8 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e13d:	90                   	nop
c001e13e:	90                   	nop
c001e13f:	6a 00                	push   0x0
c001e141:	6a 0c                	push   0xc
c001e143:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e14a:	50                   	push   eax
c001e14b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e151:	e8 62 e8 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e156:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e15c:	83 c4 20             	add    esp,0x20
c001e15f:	c1 e0 06             	shl    eax,0x6
c001e162:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001e168:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001e16f:	0f 84 00 01 00 00    	je     c001e275 <ATA::open(int, int, void*)+0x1d3>
c001e175:	83 ec 0c             	sub    esp,0xc
c001e178:	6a 08                	push   0x8
c001e17a:	e8 3f 0e ff ff       	call   c000efbe <Phys::allocateContiguousPages(int)>
c001e17f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e185:	c7 04 24 a6 43 02 c0 	mov    DWORD PTR [esp],0xc00243a6
c001e18c:	e8 bd 8d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e191:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001e198:	e8 3e 3f ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c001e19d:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e1a3:	6a 03                	push   0x3
c001e1a5:	50                   	push   eax
c001e1a6:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e1ac:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e1b2:	e8 fd 45 ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1b7:	83 c4 20             	add    esp,0x20
c001e1ba:	e8 21 0d ff ff       	call   c000eee0 <Phys::allocatePage()>
c001e1bf:	83 ec 0c             	sub    esp,0xc
c001e1c2:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001e1c8:	6a 01                	push   0x1
c001e1ca:	e8 0c 3f ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c001e1cf:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001e1d5:	6a 03                	push   0x3
c001e1d7:	50                   	push   eax
c001e1d8:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001e1de:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e1e4:	e8 cb 45 ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1e9:	83 c4 14             	add    esp,0x14
c001e1ec:	68 df 43 02 c0       	push   0xc00243df
c001e1f1:	e8 58 8d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e1f6:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001e1fd:	50                   	push   eax
c001e1fe:	6a 12                	push   0x12
c001e200:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e207:	50                   	push   eax
c001e208:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e20e:	e8 a5 e7 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e213:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001e219:	83 c4 20             	add    esp,0x20
c001e21c:	0f b6 c4             	movzx  eax,ah
c001e21f:	50                   	push   eax
c001e220:	6a 13                	push   0x13
c001e222:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e229:	50                   	push   eax
c001e22a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e230:	e8 83 e7 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e235:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001e23c:	50                   	push   eax
c001e23d:	6a 14                	push   0x14
c001e23f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e246:	50                   	push   eax
c001e247:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e24d:	e8 66 e7 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e252:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001e259:	83 c4 20             	add    esp,0x20
c001e25c:	50                   	push   eax
c001e25d:	6a 15                	push   0x15
c001e25f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e266:	50                   	push   eax
c001e267:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e26d:	e8 46 e7 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e272:	83 c4 10             	add    esp,0x10
c001e275:	83 ec 0c             	sub    esp,0xc
c001e278:	53                   	push   ebx
c001e279:	e8 34 b2 fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001e27e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e281:	e8 cc c0 fe ff       	call   c000a352 <createPartitionsForDisk(PhysicalDisk*)>
c001e286:	83 c4 18             	add    esp,0x18
c001e289:	31 c0                	xor    eax,eax
c001e28b:	5b                   	pop    ebx
c001e28c:	c3                   	ret    

c001e28d <combineCharAndColour(char, unsigned char)>:
c001e28d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e292:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001e298:	c1 e0 08             	shl    eax,0x8
c001e29b:	09 d0                	or     eax,edx
c001e29d:	c3                   	ret    

c001e29e <combineColours(unsigned char, unsigned char)>:
c001e29e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e2a3:	c1 e0 04             	shl    eax,0x4
c001e2a6:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001e2aa:	c3                   	ret    
c001e2ab:	90                   	nop

c001e2ac <ATAPI::write(unsigned long long, int, void*)>:
c001e2ac:	b8 03 00 00 00       	mov    eax,0x3
c001e2b1:	c3                   	ret    

c001e2b2 <ATAPI::close(int, int, void*)>:
c001e2b2:	83 ec 0c             	sub    esp,0xc
c001e2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2bf:	85 c0                	test   eax,eax
c001e2c1:	74 0c                	je     c001e2cf <ATAPI::close(int, int, void*)+0x1d>
c001e2c3:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2c5:	83 ec 0c             	sub    esp,0xc
c001e2c8:	50                   	push   eax
c001e2c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e2cc:	83 c4 10             	add    esp,0x10
c001e2cf:	31 c0                	xor    eax,eax
c001e2d1:	83 c4 0c             	add    esp,0xc
c001e2d4:	c3                   	ret    
c001e2d5:	90                   	nop

c001e2d6 <ATAPI::ATAPI()>:
c001e2d6:	83 ec 0c             	sub    esp,0xc
c001e2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2dd:	83 ec 04             	sub    esp,0x4
c001e2e0:	68 00 08 00 00       	push   0x800
c001e2e5:	68 91 45 02 c0       	push   0xc0024591
c001e2ea:	50                   	push   eax
c001e2eb:	e8 5a b1 fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e2f0:	83 c4 10             	add    esp,0x10
c001e2f3:	ba a0 44 02 c0       	mov    edx,0xc00244a0
c001e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fc:	89 10                	mov    DWORD PTR [eax],edx
c001e2fe:	90                   	nop
c001e2ff:	83 c4 0c             	add    esp,0xc
c001e302:	c3                   	ret    
c001e303:	90                   	nop

c001e304 <ATAPI::readyForCommand()>:
c001e304:	56                   	push   esi
c001e305:	53                   	push   ebx
c001e306:	53                   	push   ebx
c001e307:	31 db                	xor    ebx,ebx
c001e309:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e30d:	51                   	push   ecx
c001e30e:	6a 0c                	push   0xc
c001e310:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e317:	50                   	push   eax
c001e318:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e31e:	e8 55 e7 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001e323:	83 c4 10             	add    esp,0x10
c001e326:	a8 88                	test   al,0x88
c001e328:	74 25                	je     c001e34f <ATAPI::readyForCommand()+0x4b>
c001e32a:	43                   	inc    ebx
c001e32b:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001e331:	7e da                	jle    c001e30d <ATAPI::readyForCommand()+0x9>
c001e333:	83 ec 0c             	sub    esp,0xc
c001e336:	68 5e 01 00 00       	push   0x15e
c001e33b:	e8 e8 75 ff ff       	call   c0015928 <milliTenthSleep(unsigned int)>
c001e340:	83 c4 10             	add    esp,0x10
c001e343:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001e349:	75 c2                	jne    c001e30d <ATAPI::readyForCommand()+0x9>
c001e34b:	31 c0                	xor    eax,eax
c001e34d:	eb 02                	jmp    c001e351 <ATAPI::readyForCommand()+0x4d>
c001e34f:	b0 01                	mov    al,0x1
c001e351:	5a                   	pop    edx
c001e352:	5b                   	pop    ebx
c001e353:	5e                   	pop    esi
c001e354:	c3                   	ret    
c001e355:	90                   	nop

c001e356 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001e356:	55                   	push   ebp
c001e357:	57                   	push   edi
c001e358:	56                   	push   esi
c001e359:	53                   	push   ebx
c001e35a:	83 ec 20             	sub    esp,0x20
c001e35d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e361:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e365:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001e369:	6a 01                	push   0x1
c001e36b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e372:	50                   	push   eax
c001e373:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e379:	e8 48 e8 ff ff       	call   c001cbc6 <IDE::enableIRQs(unsigned char, bool)>
c001e37e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e385:	59                   	pop    ecx
c001e386:	5e                   	pop    esi
c001e387:	50                   	push   eax
c001e388:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e38e:	e8 ff e5 ff ff       	call   c001c992 <IDE::prepareInterrupt(unsigned char)>
c001e393:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e396:	e8 69 ff ff ff       	call   c001e304 <ATAPI::readyForCommand()>
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	84 c0                	test   al,al
c001e3a0:	75 0a                	jne    c001e3ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001e3a2:	bb 01 00 00 00       	mov    ebx,0x1
c001e3a7:	e9 5f 02 00 00       	jmp    c001e60b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e3ac:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001e3b2:	c1 e0 04             	shl    eax,0x4
c001e3b5:	0f b6 c0             	movzx  eax,al
c001e3b8:	50                   	push   eax
c001e3b9:	6a 06                	push   0x6
c001e3bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3c2:	50                   	push   eax
c001e3c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3c9:	e8 ea e5 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3ce:	6a 00                	push   0x0
c001e3d0:	6a 01                	push   0x1
c001e3d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3d9:	50                   	push   eax
c001e3da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3e0:	e8 d3 e5 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3e5:	83 c4 20             	add    esp,0x20
c001e3e8:	0f b6 c3             	movzx  eax,bl
c001e3eb:	50                   	push   eax
c001e3ec:	0f b6 df             	movzx  ebx,bh
c001e3ef:	6a 04                	push   0x4
c001e3f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3f8:	50                   	push   eax
c001e3f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3ff:	e8 b4 e5 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e404:	53                   	push   ebx
c001e405:	6a 05                	push   0x5
c001e407:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e40e:	50                   	push   eax
c001e40f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e415:	e8 9e e5 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e41a:	83 c4 20             	add    esp,0x20
c001e41d:	68 a0 00 00 00       	push   0xa0
c001e422:	6a 07                	push   0x7
c001e424:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e42b:	50                   	push   eax
c001e42c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e432:	e8 81 e5 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e437:	83 c4 0c             	add    esp,0xc
c001e43a:	6a 01                	push   0x1
c001e43c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e443:	50                   	push   eax
c001e444:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e44a:	e8 07 f3 ff ff       	call   c001d756 <IDE::polling(unsigned char, unsigned int)>
c001e44f:	83 c4 10             	add    esp,0x10
c001e452:	0f b6 d8             	movzx  ebx,al
c001e455:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e45b:	85 db                	test   ebx,ebx
c001e45d:	74 20                	je     c001e47f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001e45f:	53                   	push   ebx
c001e460:	0f b6 c0             	movzx  eax,al
c001e463:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e46a:	52                   	push   edx
c001e46b:	50                   	push   eax
c001e46c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e472:	e8 25 f2 ff ff       	call   c001d69c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e477:	83 c4 10             	add    esp,0x10
c001e47a:	e9 8c 01 00 00       	jmp    c001e60b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e47f:	52                   	push   edx
c001e480:	0f b6 c0             	movzx  eax,al
c001e483:	52                   	push   edx
c001e484:	50                   	push   eax
c001e485:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e48b:	e8 16 e5 ff ff       	call   c001c9a6 <IDE::getBase(unsigned char)>
c001e490:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e494:	b9 06 00 00 00       	mov    ecx,0x6
c001e499:	89 c2                	mov    edx,eax
c001e49b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e49e:	89 e8                	mov    eax,ebp
c001e4a0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e4a4:	83 c4 10             	add    esp,0x10
c001e4a7:	0f b6 c0             	movzx  eax,al
c001e4aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4ae:	85 db                	test   ebx,ebx
c001e4b0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e4b6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e4bd:	0f 84 eb 00 00 00    	je     c001e5ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001e4c3:	55                   	push   ebp
c001e4c4:	55                   	push   ebp
c001e4c5:	52                   	push   edx
c001e4c6:	50                   	push   eax
c001e4c7:	e8 60 e6 ff ff       	call   c001cb2c <IDE::waitInterrupt(unsigned char)>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	84 c0                	test   al,al
c001e4d1:	0f 84 cb fe ff ff    	je     c001e3a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e4d7:	56                   	push   esi
c001e4d8:	56                   	push   esi
c001e4d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4e0:	50                   	push   eax
c001e4e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4e7:	e8 a6 e4 ff ff       	call   c001c992 <IDE::prepareInterrupt(unsigned char)>
c001e4ec:	83 c4 0c             	add    esp,0xc
c001e4ef:	6a 04                	push   0x4
c001e4f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4f8:	50                   	push   eax
c001e4f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4ff:	e8 74 e5 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001e504:	83 c4 0c             	add    esp,0xc
c001e507:	6a 05                	push   0x5
c001e509:	89 c6                	mov    esi,eax
c001e50b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e512:	50                   	push   eax
c001e513:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e519:	e8 5a e5 ff ff       	call   c001ca78 <IDE::read(unsigned char, unsigned char)>
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	0f b6 e8             	movzx  ebp,al
c001e524:	89 f0                	mov    eax,esi
c001e526:	c1 e5 08             	shl    ebp,0x8
c001e529:	0f b6 f0             	movzx  esi,al
c001e52c:	09 f5                	or     ebp,esi
c001e52e:	31 f6                	xor    esi,esi
c001e530:	d1 fd                	sar    ebp,1
c001e532:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e537:	74 5c                	je     c001e595 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001e539:	39 ee                	cmp    esi,ebp
c001e53b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e541:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e548:	75 0d                	jne    c001e557 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001e54a:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001e54d:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001e551:	4b                   	dec    ebx
c001e552:	e9 57 ff ff ff       	jmp    c001e4ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001e557:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e55b:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001e55f:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001e564:	51                   	push   ecx
c001e565:	51                   	push   ecx
c001e566:	52                   	push   edx
c001e567:	50                   	push   eax
c001e568:	e8 39 e4 ff ff       	call   c001c9a6 <IDE::getBase(unsigned char)>
c001e56d:	89 c2                	mov    edx,eax
c001e56f:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e574:	66 ef                	out    dx,ax
c001e576:	46                   	inc    esi
c001e577:	83 c4 10             	add    esp,0x10
c001e57a:	eb bd                	jmp    c001e539 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001e57c:	51                   	push   ecx
c001e57d:	51                   	push   ecx
c001e57e:	52                   	push   edx
c001e57f:	50                   	push   eax
c001e580:	e8 21 e4 ff ff       	call   c001c9a6 <IDE::getBase(unsigned char)>
c001e585:	89 c2                	mov    edx,eax
c001e587:	66 ed                	in     ax,dx
c001e589:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001e58d:	83 c4 10             	add    esp,0x10
c001e590:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001e594:	46                   	inc    esi
c001e595:	39 ee                	cmp    esi,ebp
c001e597:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e59d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e5a4:	75 d6                	jne    c001e57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001e5a6:	01 f6                	add    esi,esi
c001e5a8:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001e5ac:	eb a3                	jmp    c001e551 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001e5ae:	51                   	push   ecx
c001e5af:	51                   	push   ecx
c001e5b0:	52                   	push   edx
c001e5b1:	50                   	push   eax
c001e5b2:	e8 75 e5 ff ff       	call   c001cb2c <IDE::waitInterrupt(unsigned char)>
c001e5b7:	83 c4 10             	add    esp,0x10
c001e5ba:	84 c0                	test   al,al
c001e5bc:	0f 84 e0 fd ff ff    	je     c001e3a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e5c2:	52                   	push   edx
c001e5c3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e5c8:	52                   	push   edx
c001e5c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e5d0:	50                   	push   eax
c001e5d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e5d7:	e8 b6 e3 ff ff       	call   c001c992 <IDE::prepareInterrupt(unsigned char)>
c001e5dc:	83 c4 10             	add    esp,0x10
c001e5df:	50                   	push   eax
c001e5e0:	50                   	push   eax
c001e5e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e5e8:	50                   	push   eax
c001e5e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e5ef:	e8 b2 e3 ff ff       	call   c001c9a6 <IDE::getBase(unsigned char)>
c001e5f4:	8d 50 07             	lea    edx,[eax+0x7]
c001e5f7:	ec                   	in     al,dx
c001e5f8:	83 c4 10             	add    esp,0x10
c001e5fb:	a8 88                	test   al,0x88
c001e5fd:	74 0a                	je     c001e609 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001e5ff:	4b                   	dec    ebx
c001e600:	75 dd                	jne    c001e5df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001e602:	bb 02 00 00 00       	mov    ebx,0x2
c001e607:	eb 02                	jmp    c001e60b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e609:	31 db                	xor    ebx,ebx
c001e60b:	83 c4 1c             	add    esp,0x1c
c001e60e:	89 d8                	mov    eax,ebx
c001e610:	5b                   	pop    ebx
c001e611:	5e                   	pop    esi
c001e612:	5f                   	pop    edi
c001e613:	5d                   	pop    ebp
c001e614:	c3                   	ret    
c001e615:	90                   	nop

c001e616 <ATAPI::diskRemoved()>:
c001e616:	53                   	push   ebx
c001e617:	83 ec 14             	sub    esp,0x14
c001e61a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e61e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e625:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e62b:	e8 12 ba fe ff       	call   c000a042 <LogicalDisk::unmount()>
c001e630:	58                   	pop    eax
c001e631:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e637:	e8 30 c4 fe ff       	call   c000aa6c <VCache::writeWriteBuffer()>
c001e63c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e646:	83 c4 18             	add    esp,0x18
c001e649:	5b                   	pop    ebx
c001e64a:	e9 0d c4 fe ff       	jmp    c000aa5c <VCache::invalidateReadBuffer()>
c001e64f:	90                   	nop

c001e650 <ATAPI::eject()>:
c001e650:	57                   	push   edi
c001e651:	b9 03 00 00 00       	mov    ecx,0x3
c001e656:	53                   	push   ebx
c001e657:	83 ec 14             	sub    esp,0x14
c001e65a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e65e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e662:	fc                   	cld    
c001e663:	31 c0                	xor    eax,eax
c001e665:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e667:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e66c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e671:	50                   	push   eax
c001e672:	50                   	push   eax
c001e673:	6a 00                	push   0x0
c001e675:	6a 00                	push   0x0
c001e677:	6a 00                	push   0x0
c001e679:	6a 02                	push   0x2
c001e67b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e67f:	50                   	push   eax
c001e680:	53                   	push   ebx
c001e681:	e8 d0 fc ff ff       	call   c001e356 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e686:	83 c4 14             	add    esp,0x14
c001e689:	53                   	push   ebx
c001e68a:	e8 87 ff ff ff       	call   c001e616 <ATAPI::diskRemoved()>
c001e68f:	83 c4 24             	add    esp,0x24
c001e692:	31 c0                	xor    eax,eax
c001e694:	5b                   	pop    ebx
c001e695:	5f                   	pop    edi
c001e696:	c3                   	ret    
c001e697:	90                   	nop

c001e698 <ATAPI::diskInserted()>:
c001e698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e69c:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e6a3:	c3                   	ret    

c001e6a4 <ATAPI::detectMedia()>:
c001e6a4:	56                   	push   esi
c001e6a5:	53                   	push   ebx
c001e6a6:	83 ec 28             	sub    esp,0x28
c001e6a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6ad:	6a 0c                	push   0xc
c001e6af:	6a 00                	push   0x0
c001e6b1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e6b5:	56                   	push   esi
c001e6b6:	e8 35 1e fe ff       	call   c00004f0 <memset>
c001e6bb:	58                   	pop    eax
c001e6bc:	5a                   	pop    edx
c001e6bd:	6a 00                	push   0x0
c001e6bf:	6a 00                	push   0x0
c001e6c1:	6a 00                	push   0x0
c001e6c3:	6a 00                	push   0x0
c001e6c5:	56                   	push   esi
c001e6c6:	53                   	push   ebx
c001e6c7:	e8 8a fc ff ff       	call   c001e356 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e6cc:	83 c4 1c             	add    esp,0x1c
c001e6cf:	6a 0c                	push   0xc
c001e6d1:	6a 00                	push   0x0
c001e6d3:	56                   	push   esi
c001e6d4:	e8 17 1e fe ff       	call   c00004f0 <memset>
c001e6d9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e6de:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e6e3:	59                   	pop    ecx
c001e6e4:	58                   	pop    eax
c001e6e5:	6a 01                	push   0x1
c001e6e7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e6eb:	50                   	push   eax
c001e6ec:	6a 00                	push   0x0
c001e6ee:	6a 12                	push   0x12
c001e6f0:	56                   	push   esi
c001e6f1:	53                   	push   ebx
c001e6f2:	e8 5f fc ff ff       	call   c001e356 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e6f7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e6fb:	83 c4 20             	add    esp,0x20
c001e6fe:	83 e0 7f             	and    eax,0x7f
c001e701:	83 f8 70             	cmp    eax,0x70
c001e704:	74 15                	je     c001e71b <ATAPI::detectMedia()+0x77>
c001e706:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e70d:	75 0c                	jne    c001e71b <ATAPI::detectMedia()+0x77>
c001e70f:	83 ec 0c             	sub    esp,0xc
c001e712:	53                   	push   ebx
c001e713:	e8 80 ff ff ff       	call   c001e698 <ATAPI::diskInserted()>
c001e718:	83 c4 10             	add    esp,0x10
c001e71b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e71f:	83 e0 0f             	and    eax,0xf
c001e722:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e727:	0f b6 c0             	movzx  eax,al
c001e72a:	75 19                	jne    c001e745 <ATAPI::detectMedia()+0xa1>
c001e72c:	83 f8 02             	cmp    eax,0x2
c001e72f:	75 14                	jne    c001e745 <ATAPI::detectMedia()+0xa1>
c001e731:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e738:	74 24                	je     c001e75e <ATAPI::detectMedia()+0xba>
c001e73a:	83 ec 0c             	sub    esp,0xc
c001e73d:	53                   	push   ebx
c001e73e:	e8 d3 fe ff ff       	call   c001e616 <ATAPI::diskRemoved()>
c001e743:	eb 16                	jmp    c001e75b <ATAPI::detectMedia()+0xb7>
c001e745:	85 c0                	test   eax,eax
c001e747:	75 15                	jne    c001e75e <ATAPI::detectMedia()+0xba>
c001e749:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e750:	75 0c                	jne    c001e75e <ATAPI::detectMedia()+0xba>
c001e752:	83 ec 0c             	sub    esp,0xc
c001e755:	53                   	push   ebx
c001e756:	e8 3d ff ff ff       	call   c001e698 <ATAPI::diskInserted()>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	83 c4 24             	add    esp,0x24
c001e761:	5b                   	pop    ebx
c001e762:	5e                   	pop    esi
c001e763:	c3                   	ret    

c001e764 <ATAPI::open(int, int, void*)>:
c001e764:	56                   	push   esi
c001e765:	53                   	push   ebx
c001e766:	50                   	push   eax
c001e767:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e76b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e76f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e773:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e779:	c1 e0 06             	shl    eax,0x6
c001e77c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e782:	01 d0                	add    eax,edx
c001e784:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e78b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e791:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e798:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e7a2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e7a9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e7af:	6a 04                	push   0x4
c001e7b1:	6a 0c                	push   0xc
c001e7b3:	51                   	push   ecx
c001e7b4:	52                   	push   edx
c001e7b5:	e8 fe e1 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7ba:	90                   	nop
c001e7bb:	90                   	nop
c001e7bc:	6a 00                	push   0x0
c001e7be:	6a 0c                	push   0xc
c001e7c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7c7:	50                   	push   eax
c001e7c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7ce:	e8 e5 e1 ff ff       	call   c001c9b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7d3:	83 c4 14             	add    esp,0x14
c001e7d6:	68 78 01 00 00       	push   0x178
c001e7db:	e8 c0 01 ff ff       	call   c000e9a0 <malloc>
c001e7e0:	83 c4 0c             	add    esp,0xc
c001e7e3:	6a 00                	push   0x0
c001e7e5:	68 ff ff ff 7f       	push   0x7fffffff
c001e7ea:	6a 00                	push   0x0
c001e7ec:	6a 00                	push   0x0
c001e7ee:	53                   	push   ebx
c001e7ef:	68 43 46 02 c0       	push   0xc0024643
c001e7f4:	89 c6                	mov    esi,eax
c001e7f6:	50                   	push   eax
c001e7f7:	e8 84 b6 fe ff       	call   c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7fc:	83 c4 14             	add    esp,0x14
c001e7ff:	56                   	push   esi
c001e800:	e8 3b b7 fe ff       	call   c0009f40 <LogicalDisk::assignDriveLetter()>
c001e805:	5a                   	pop    edx
c001e806:	59                   	pop    ecx
c001e807:	0f be c0             	movsx  eax,al
c001e80a:	50                   	push   eax
c001e80b:	68 88 44 02 c0       	push   0xc0024488
c001e810:	e8 39 87 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e815:	58                   	pop    eax
c001e816:	5a                   	pop    edx
c001e817:	56                   	push   esi
c001e818:	53                   	push   ebx
c001e819:	e8 48 a8 fe ff       	call   c0009066 <Device::addChild(Device*)>
c001e81e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e827:	e8 86 ac fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001e82c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e833:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e836:	e8 69 fe ff ff       	call   c001e6a4 <ATAPI::detectMedia()>
c001e83b:	83 c4 14             	add    esp,0x14
c001e83e:	31 c0                	xor    eax,eax
c001e840:	5b                   	pop    ebx
c001e841:	5e                   	pop    esi
c001e842:	c3                   	ret    
c001e843:	90                   	nop

c001e844 <ATAPI::read(unsigned long long, int, void*)>:
c001e844:	55                   	push   ebp
c001e845:	57                   	push   edi
c001e846:	56                   	push   esi
c001e847:	53                   	push   ebx
c001e848:	83 ec 1c             	sub    esp,0x1c
c001e84b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e84f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e853:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e857:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e85e:	74 3c                	je     c001e89c <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e860:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e864:	b9 03 00 00 00       	mov    ecx,0x3
c001e869:	fc                   	cld    
c001e86a:	31 c0                	xor    eax,eax
c001e86c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e86e:	89 e8                	mov    eax,ebp
c001e870:	0f ce                	bswap  esi
c001e872:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e876:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e87b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e87f:	50                   	push   eax
c001e880:	50                   	push   eax
c001e881:	55                   	push   ebp
c001e882:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e886:	c1 e5 0b             	shl    ebp,0xb
c001e889:	6a 00                	push   0x0
c001e88b:	55                   	push   ebp
c001e88c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e890:	50                   	push   eax
c001e891:	53                   	push   ebx
c001e892:	e8 bf fa ff ff       	call   c001e356 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e897:	83 c4 20             	add    esp,0x20
c001e89a:	eb 1a                	jmp    c001e8b6 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	53                   	push   ebx
c001e8a0:	e8 ff fd ff ff       	call   c001e6a4 <ATAPI::detectMedia()>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e8af:	75 af                	jne    c001e860 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e8b1:	b8 02 00 00 00       	mov    eax,0x2
c001e8b6:	83 c4 1c             	add    esp,0x1c
c001e8b9:	5b                   	pop    ebx
c001e8ba:	5e                   	pop    esi
c001e8bb:	5f                   	pop    edi
c001e8bc:	5d                   	pop    ebp
c001e8bd:	c3                   	ret    

c001e8be <SATA::close(int, int, void*)>:
c001e8be:	83 ec 0c             	sub    esp,0xc
c001e8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e8cb:	85 c0                	test   eax,eax
c001e8cd:	74 0c                	je     c001e8db <SATA::close(int, int, void*)+0x1d>
c001e8cf:	8b 10                	mov    edx,DWORD PTR [eax]
c001e8d1:	83 ec 0c             	sub    esp,0xc
c001e8d4:	50                   	push   eax
c001e8d5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e8d8:	83 c4 10             	add    esp,0x10
c001e8db:	31 c0                	xor    eax,eax
c001e8dd:	83 c4 0c             	add    esp,0xc
c001e8e0:	c3                   	ret    
c001e8e1:	90                   	nop

c001e8e2 <SATA::powerSaving(PowerSavingLevel)>:
c001e8e2:	c3                   	ret    
c001e8e3:	90                   	nop

c001e8e4 <SATA::open(int, int, void*)>:
c001e8e4:	56                   	push   esi
c001e8e5:	53                   	push   ebx
c001e8e6:	83 ec 10             	sub    esp,0x10
c001e8e9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e8ed:	68 d0 44 02 c0       	push   0xc00244d0
c001e8f2:	e8 57 86 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e8f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e8fb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e905:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e90f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e915:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e919:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e923:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e92a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e930:	e8 ab 05 ff ff       	call   c000eee0 <Phys::allocatePage()>
c001e935:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e93b:	89 c6                	mov    esi,eax
c001e93d:	e8 9e 05 ff ff       	call   c000eee0 <Phys::allocatePage()>
c001e942:	81 c6 00 10 00 00    	add    esi,0x1000
c001e948:	83 c4 10             	add    esp,0x10
c001e94b:	39 c6                	cmp    esi,eax
c001e94d:	74 10                	je     c001e95f <SATA::open(int, int, void*)+0x7b>
c001e94f:	83 ec 0c             	sub    esp,0xc
c001e952:	68 dc 44 02 c0       	push   0xc00244dc
c001e957:	e8 8a 03 ff ff       	call   c000ece6 <KePanic(char const*)>
c001e95c:	83 c4 10             	add    esp,0x10
c001e95f:	83 ec 0c             	sub    esp,0xc
c001e962:	6a 02                	push   0x2
c001e964:	e8 72 37 ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c001e969:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e96f:	6a 03                	push   0x3
c001e971:	50                   	push   eax
c001e972:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e978:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e97e:	e8 31 3e ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e983:	83 c4 14             	add    esp,0x14
c001e986:	53                   	push   ebx
c001e987:	e8 26 ab fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001e98c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e98f:	e8 be b9 fe ff       	call   c000a352 <createPartitionsForDisk(PhysicalDisk*)>
c001e994:	83 c4 14             	add    esp,0x14
c001e997:	31 c0                	xor    eax,eax
c001e999:	5b                   	pop    ebx
c001e99a:	5e                   	pop    esi
c001e99b:	c3                   	ret    

c001e99c <SATA::SATA()>:
c001e99c:	83 ec 0c             	sub    esp,0xc
c001e99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a3:	83 ec 04             	sub    esp,0x4
c001e9a6:	68 00 02 00 00       	push   0x200
c001e9ab:	68 f0 44 02 c0       	push   0xc00244f0
c001e9b0:	50                   	push   eax
c001e9b1:	e8 94 aa fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	ba 60 45 02 c0       	mov    edx,0xc0024560
c001e9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c2:	89 10                	mov    DWORD PTR [eax],edx
c001e9c4:	90                   	nop
c001e9c5:	83 c4 0c             	add    esp,0xc
c001e9c8:	c3                   	ret    
c001e9c9:	90                   	nop

c001e9ca <SATA::access(unsigned long long, int, void*, bool)>:
c001e9ca:	55                   	push   ebp
c001e9cb:	57                   	push   edi
c001e9cc:	56                   	push   esi
c001e9cd:	53                   	push   ebx
c001e9ce:	83 ec 2c             	sub    esp,0x2c
c001e9d1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e9d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e9d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e9dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e9e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e9e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e9e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9ed:	fa                   	cli    
c001e9ee:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e9f4:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e9f9:	7e 10                	jle    c001ea0b <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001e9fb:	83 ec 0c             	sub    esp,0xc
c001e9fe:	68 00 45 02 c0       	push   0xc0024500
c001ea03:	e8 de 02 ff ff       	call   c000ece6 <KePanic(char const*)>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ea11:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001ea17:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ea1d:	89 e8                	mov    eax,ebp
c001ea1f:	c1 e0 07             	shl    eax,0x7
c001ea22:	01 d0                	add    eax,edx
c001ea24:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ea2e:	8d 45 02             	lea    eax,[ebp+0x2]
c001ea31:	51                   	push   ecx
c001ea32:	c1 e0 07             	shl    eax,0x7
c001ea35:	51                   	push   ecx
c001ea36:	01 d0                	add    eax,edx
c001ea38:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ea3c:	50                   	push   eax
c001ea3d:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ea43:	e8 ee ed ff ff       	call   c001d836 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ea48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ea4c:	83 c4 10             	add    esp,0x10
c001ea4f:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001ea54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea58:	0f 84 a6 01 00 00    	je     c001ec04 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001ea5e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ea62:	c1 e0 09             	shl    eax,0x9
c001ea65:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ea6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ea6e:	74 0e                	je     c001ea7e <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001ea70:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ea76:	89 c1                	mov    ecx,eax
c001ea78:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ea7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ea7e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ea82:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ea88:	8d 45 02             	lea    eax,[ebp+0x2]
c001ea8b:	c1 e0 07             	shl    eax,0x7
c001ea8e:	01 d0                	add    eax,edx
c001ea90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea92:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ea98:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ea9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eaa2:	c1 e1 05             	shl    ecx,0x5
c001eaa5:	01 c8                	add    eax,ecx
c001eaa7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eaab:	83 e1 01             	and    ecx,0x1
c001eaae:	89 ce                	mov    esi,ecx
c001eab0:	8a 08                	mov    cl,BYTE PTR [eax]
c001eab2:	c1 e6 06             	shl    esi,0x6
c001eab5:	83 e1 bf             	and    ecx,0xffffffbf
c001eab8:	09 f1                	or     ecx,esi
c001eaba:	88 08                	mov    BYTE PTR [eax],cl
c001eabc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eabe:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001eac4:	81 c9 05 00 01 00    	or     ecx,0x10005
c001eaca:	89 08                	mov    DWORD PTR [eax],ecx
c001eacc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ead2:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ead8:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001eade:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001eae1:	50                   	push   eax
c001eae2:	68 90 00 00 00       	push   0x90
c001eae7:	6a 00                	push   0x0
c001eae9:	56                   	push   esi
c001eaea:	e8 01 1a fe ff       	call   c00004f0 <memset>
c001eaef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001eaf5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001eafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaff:	83 c4 10             	add    esp,0x10
c001eb02:	48                   	dec    eax
c001eb03:	25 ff ff 3f 00       	and    eax,0x3fffff
c001eb08:	89 c1                	mov    ecx,eax
c001eb0a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001eb10:	25 00 00 c0 ff       	and    eax,0xffc00000
c001eb15:	09 c8                	or     eax,ecx
c001eb17:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001eb1d:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001eb23:	83 c8 80             	or     eax,0xffffff80
c001eb26:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001eb2c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eb2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb33:	25 00 7f 00 00       	and    eax,0x7f00
c001eb38:	0d 27 80 ff ff       	or     eax,0xffff8027
c001eb3d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001eb42:	66 89 06             	mov    WORD PTR [esi],ax
c001eb45:	b0 35                	mov    al,0x35
c001eb47:	75 02                	jne    c001eb4b <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001eb49:	b0 25                	mov    al,0x25
c001eb4b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001eb4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb52:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001eb56:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001eb5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb5e:	c1 e8 10             	shr    eax,0x10
c001eb61:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001eb64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb68:	c1 e8 18             	shr    eax,0x18
c001eb6b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001eb6e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001eb72:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001eb75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb79:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001eb7c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001eb80:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001eb84:	89 ee                	mov    esi,ebp
c001eb86:	31 c0                	xor    eax,eax
c001eb88:	c1 e6 07             	shl    esi,0x7
c001eb8b:	01 d6                	add    esi,edx
c001eb8d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001eb93:	80 e1 88             	and    cl,0x88
c001eb96:	74 0a                	je     c001eba2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001eb98:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eb9d:	74 0a                	je     c001eba9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001eb9f:	40                   	inc    eax
c001eba0:	eb eb                	jmp    c001eb8d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001eba2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eba7:	75 0a                	jne    c001ebb3 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001eba9:	83 ec 0c             	sub    esp,0xc
c001ebac:	68 39 45 02 c0       	push   0xc0024539
c001ebb1:	eb 34                	jmp    c001ebe7 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001ebb3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ebb7:	c1 e5 07             	shl    ebp,0x7
c001ebba:	b8 01 00 00 00       	mov    eax,0x1
c001ebbf:	01 ea                	add    edx,ebp
c001ebc1:	d3 e0                	shl    eax,cl
c001ebc3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ebc9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ebcf:	85 c8                	test   eax,ecx
c001ebd1:	74 25                	je     c001ebf8 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001ebd3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ebd9:	0f ba e1 1e          	bt     ecx,0x1e
c001ebdd:	73 ea                	jae    c001ebc9 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ebdf:	83 ec 0c             	sub    esp,0xc
c001ebe2:	68 47 45 02 c0       	push   0xc0024547
c001ebe7:	e8 62 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ebec:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	eb 13                	jmp    c001ec0b <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001ebf8:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ebfe:	0f ba e0 1e          	bt     eax,0x1e
c001ec02:	73 18                	jae    c001ec1c <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001ec04:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ec0b:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001ec12:	75 01                	jne    c001ec15 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001ec14:	fb                   	sti    
c001ec15:	b8 01 00 00 00       	mov    eax,0x1
c001ec1a:	eb 2c                	jmp    c001ec48 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001ec1c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ec21:	75 10                	jne    c001ec33 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001ec23:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ec29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ec33:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ec3a:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001ec3f:	85 c0                	test   eax,eax
c001ec41:	75 03                	jne    c001ec46 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001ec43:	fb                   	sti    
c001ec44:	eb 02                	jmp    c001ec48 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001ec46:	31 c0                	xor    eax,eax
c001ec48:	83 c4 2c             	add    esp,0x2c
c001ec4b:	5b                   	pop    ebx
c001ec4c:	5e                   	pop    esi
c001ec4d:	5f                   	pop    edi
c001ec4e:	5d                   	pop    ebp
c001ec4f:	c3                   	ret    

c001ec50 <SATA::read(unsigned long long, int, void*)>:
c001ec50:	57                   	push   edi
c001ec51:	b8 04 00 00 00       	mov    eax,0x4
c001ec56:	56                   	push   esi
c001ec57:	53                   	push   ebx
c001ec58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ec60:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ec64:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ec68:	8d 7a ff             	lea    edi,[edx-0x1]
c001ec6b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ec71:	77 25                	ja     c001ec98 <SATA::read(unsigned long long, int, void*)+0x48>
c001ec73:	85 f6                	test   esi,esi
c001ec75:	b8 06 00 00 00       	mov    eax,0x6
c001ec7a:	74 1c                	je     c001ec98 <SATA::read(unsigned long long, int, void*)+0x48>
c001ec7c:	50                   	push   eax
c001ec7d:	50                   	push   eax
c001ec7e:	6a 00                	push   0x0
c001ec80:	56                   	push   esi
c001ec81:	52                   	push   edx
c001ec82:	53                   	push   ebx
c001ec83:	51                   	push   ecx
c001ec84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ec88:	e8 3d fd ff ff       	call   c001e9ca <SATA::access(unsigned long long, int, void*, bool)>
c001ec8d:	83 c4 20             	add    esp,0x20
c001ec90:	85 c0                	test   eax,eax
c001ec92:	0f 95 c0             	setne  al
c001ec95:	0f b6 c0             	movzx  eax,al
c001ec98:	5b                   	pop    ebx
c001ec99:	5e                   	pop    esi
c001ec9a:	5f                   	pop    edi
c001ec9b:	c3                   	ret    

c001ec9c <SATA::write(unsigned long long, int, void*)>:
c001ec9c:	55                   	push   ebp
c001ec9d:	b8 04 00 00 00       	mov    eax,0x4
c001eca2:	57                   	push   edi
c001eca3:	56                   	push   esi
c001eca4:	53                   	push   ebx
c001eca5:	83 ec 0c             	sub    esp,0xc
c001eca8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ecac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ecb0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ecb4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ecb8:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ecbb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ecc1:	77 3d                	ja     c001ed00 <SATA::write(unsigned long long, int, void*)+0x64>
c001ecc3:	85 ed                	test   ebp,ebp
c001ecc5:	b8 06 00 00 00       	mov    eax,0x6
c001ecca:	74 34                	je     c001ed00 <SATA::write(unsigned long long, int, void*)+0x64>
c001eccc:	c1 e3 09             	shl    ebx,0x9
c001eccf:	01 eb                	add    ebx,ebp
c001ecd1:	50                   	push   eax
c001ecd2:	89 d6                	mov    esi,edx
c001ecd4:	50                   	push   eax
c001ecd5:	83 c6 01             	add    esi,0x1
c001ecd8:	6a 01                	push   0x1
c001ecda:	89 cf                	mov    edi,ecx
c001ecdc:	55                   	push   ebp
c001ecdd:	83 d7 00             	adc    edi,0x0
c001ece0:	6a 01                	push   0x1
c001ece2:	81 c5 00 02 00 00    	add    ebp,0x200
c001ece8:	51                   	push   ecx
c001ece9:	52                   	push   edx
c001ecea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ecee:	e8 d7 fc ff ff       	call   c001e9ca <SATA::access(unsigned long long, int, void*, bool)>
c001ecf3:	83 c4 20             	add    esp,0x20
c001ecf6:	39 dd                	cmp    ebp,ebx
c001ecf8:	89 f2                	mov    edx,esi
c001ecfa:	89 f9                	mov    ecx,edi
c001ecfc:	75 d3                	jne    c001ecd1 <SATA::write(unsigned long long, int, void*)+0x35>
c001ecfe:	31 c0                	xor    eax,eax
c001ed00:	83 c4 0c             	add    esp,0xc
c001ed03:	5b                   	pop    ebx
c001ed04:	5e                   	pop    esi
c001ed05:	5f                   	pop    edi
c001ed06:	5d                   	pop    ebp
c001ed07:	c3                   	ret    

c001ed08 <SATAPI::write(unsigned long long, int, void*)>:
c001ed08:	b8 03 00 00 00       	mov    eax,0x3
c001ed0d:	c3                   	ret    

c001ed0e <SATAPI::close(int, int, void*)>:
c001ed0e:	83 ec 0c             	sub    esp,0xc
c001ed11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ed1b:	85 c0                	test   eax,eax
c001ed1d:	74 0c                	je     c001ed2b <SATAPI::close(int, int, void*)+0x1d>
c001ed1f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ed21:	83 ec 0c             	sub    esp,0xc
c001ed24:	50                   	push   eax
c001ed25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ed28:	83 c4 10             	add    esp,0x10
c001ed2b:	31 c0                	xor    eax,eax
c001ed2d:	83 c4 0c             	add    esp,0xc
c001ed30:	c3                   	ret    
c001ed31:	90                   	nop

c001ed32 <SATAPI::SATAPI()>:
c001ed32:	83 ec 0c             	sub    esp,0xc
c001ed35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed39:	83 ec 04             	sub    esp,0x4
c001ed3c:	68 00 08 00 00       	push   0x800
c001ed41:	68 90 45 02 c0       	push   0xc0024590
c001ed46:	50                   	push   eax
c001ed47:	e8 fe a6 fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	ba 84 46 02 c0       	mov    edx,0xc0024684
c001ed54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed58:	89 10                	mov    DWORD PTR [eax],edx
c001ed5a:	90                   	nop
c001ed5b:	83 c4 0c             	add    esp,0xc
c001ed5e:	c3                   	ret    
c001ed5f:	90                   	nop

c001ed60 <SATAPI::diskRemoved()>:
c001ed60:	c3                   	ret    
c001ed61:	90                   	nop

c001ed62 <SATAPI::diskInserted()>:
c001ed62:	83 ec 18             	sub    esp,0x18
c001ed65:	68 9c 45 02 c0       	push   0xc002459c
c001ed6a:	e8 df 81 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ed6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed73:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ed7a:	83 c4 1c             	add    esp,0x1c
c001ed7d:	c3                   	ret    

c001ed7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ed7e:	55                   	push   ebp
c001ed7f:	57                   	push   edi
c001ed80:	56                   	push   esi
c001ed81:	53                   	push   ebx
c001ed82:	83 ec 34             	sub    esp,0x34
c001ed85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ed89:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ed8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ed91:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ed95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ed99:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ed9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eda5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eda9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001edaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001edb3:	83 c0 02             	add    eax,0x2
c001edb6:	c1 e0 07             	shl    eax,0x7
c001edb9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001edbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edc5:	c1 e0 07             	shl    eax,0x7
c001edc8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001edcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edd0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001edda:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001edde:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ede4:	e8 4d ea ff ff       	call   c001d836 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ede9:	83 c4 10             	add    esp,0x10
c001edec:	89 c2                	mov    edx,eax
c001edee:	b8 01 00 00 00       	mov    eax,0x1
c001edf3:	83 fa ff             	cmp    edx,0xffffffff
c001edf6:	0f 84 5f 02 00 00    	je     c001f05b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001edfc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ee00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee04:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ee0a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee0c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ee12:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ee18:	89 d1                	mov    ecx,edx
c001ee1a:	c1 e1 05             	shl    ecx,0x5
c001ee1d:	01 c8                	add    eax,ecx
c001ee1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee21:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ee27:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ee2d:	89 08                	mov    DWORD PTR [eax],ecx
c001ee2f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ee35:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ee3b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ee41:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ee44:	50                   	push   eax
c001ee45:	68 90 00 00 00       	push   0x90
c001ee4a:	6a 00                	push   0x0
c001ee4c:	53                   	push   ebx
c001ee4d:	e8 9e 16 fe ff       	call   c00004f0 <memset>
c001ee52:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ee55:	b9 0c 00 00 00       	mov    ecx,0xc
c001ee5a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ee5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ee60:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ee66:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ee6a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ee6e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ee74:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ee78:	48                   	dec    eax
c001ee79:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ee7e:	89 c1                	mov    ecx,eax
c001ee80:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ee86:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ee8b:	09 c8                	or     eax,ecx
c001ee8d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ee93:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001ee99:	83 c8 80             	or     eax,0xffffff80
c001ee9c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001eea2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001eea5:	25 00 7f 00 00       	and    eax,0x7f00
c001eeaa:	0d 27 80 ff ff       	or     eax,0xffff8027
c001eeaf:	66 89 03             	mov    WORD PTR [ebx],ax
c001eeb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeb6:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001eeba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eebe:	c1 e8 10             	shr    eax,0x10
c001eec1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001eec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eec8:	c1 e8 18             	shr    eax,0x18
c001eecb:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001eece:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001eed2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001eed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eed9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001eedc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eee0:	83 c4 10             	add    esp,0x10
c001eee3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eee7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001eeeb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eeef:	31 c0                	xor    eax,eax
c001eef1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001eef7:	80 e1 88             	and    cl,0x88
c001eefa:	74 0a                	je     c001ef06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001eefc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ef01:	74 0a                	je     c001ef0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001ef03:	40                   	inc    eax
c001ef04:	eb eb                	jmp    c001eef1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001ef06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ef0b:	75 43                	jne    c001ef50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001ef0d:	83 ec 0c             	sub    esp,0xc
c001ef10:	68 b4 45 02 c0       	push   0xc00245b4
c001ef15:	e8 34 80 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ef1a:	58                   	pop    eax
c001ef1b:	5a                   	pop    edx
c001ef1c:	68 c9 45 02 c0       	push   0xc00245c9
c001ef21:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001ef27:	e8 a2 25 ff ff       	call   c00114ce <VgaText::puts(char const*)>
c001ef2c:	59                   	pop    ecx
c001ef2d:	5b                   	pop    ebx
c001ef2e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ef32:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ef38:	e8 93 e9 ff ff       	call   c001d8d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ef3d:	5e                   	pop    esi
c001ef3e:	5f                   	pop    edi
c001ef3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ef43:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ef49:	e8 62 e9 ff ff       	call   c001d8b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ef4e:	eb 48                	jmp    c001ef98 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001ef50:	b8 01 00 00 00       	mov    eax,0x1
c001ef55:	88 d1                	mov    cl,dl
c001ef57:	d3 e0                	shl    eax,cl
c001ef59:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001ef5e:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001ef64:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ef68:	89 c7                	mov    edi,eax
c001ef6a:	c1 e3 07             	shl    ebx,0x7
c001ef6d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001ef71:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001ef77:	85 c7                	test   edi,eax
c001ef79:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001ef7f:	0f 84 a3 00 00 00    	je     c001f028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001ef85:	0f ba e0 1e          	bt     eax,0x1e
c001ef89:	73 1a                	jae    c001efa5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001ef8b:	83 ec 0c             	sub    esp,0xc
c001ef8e:	68 db 45 02 c0       	push   0xc00245db
c001ef93:	e8 b6 7f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ef98:	83 c4 10             	add    esp,0x10
c001ef9b:	b8 01 00 00 00       	mov    eax,0x1
c001efa0:	e9 b6 00 00 00       	jmp    c001f05b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001efa5:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001efab:	83 f8 0d             	cmp    eax,0xd
c001efae:	77 0a                	ja     c001efba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	68 c8 00 00 00       	push   0xc8
c001efb8:	eb 28                	jmp    c001efe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001efba:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001efc0:	83 f8 0d             	cmp    eax,0xd
c001efc3:	77 0a                	ja     c001efcf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001efc5:	83 ec 0c             	sub    esp,0xc
c001efc8:	68 58 02 00 00       	push   0x258
c001efcd:	eb 13                	jmp    c001efe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001efcf:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001efd5:	83 f8 06             	cmp    eax,0x6
c001efd8:	77 10                	ja     c001efea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001efda:	83 ec 0c             	sub    esp,0xc
c001efdd:	68 dc 05 00 00       	push   0x5dc
c001efe2:	e8 41 69 ff ff       	call   c0015928 <milliTenthSleep(unsigned int)>
c001efe7:	83 c4 10             	add    esp,0x10
c001efea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001efee:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001eff1:	75 06                	jne    c001eff9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001eff3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001eff7:	74 15                	je     c001f00e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001eff9:	83 fe 06             	cmp    esi,0x6
c001effc:	77 10                	ja     c001f00e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001effe:	83 ec 0c             	sub    esp,0xc
c001f001:	68 c4 09 00 00       	push   0x9c4
c001f006:	e8 1d 69 ff ff       	call   c0015928 <milliTenthSleep(unsigned int)>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	46                   	inc    esi
c001f00f:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001f015:	0f 85 56 ff ff ff    	jne    c001ef71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001f01b:	83 ec 0c             	sub    esp,0xc
c001f01e:	68 ee 45 02 c0       	push   0xc00245ee
c001f023:	e9 6b ff ff ff       	jmp    c001ef93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001f028:	0f ba e0 1e          	bt     eax,0x1e
c001f02c:	73 0d                	jae    c001f03b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	68 02 46 02 c0       	push   0xc0024602
c001f036:	e9 58 ff ff ff       	jmp    c001ef93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001f03b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f040:	74 17                	je     c001f059 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001f042:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f047:	74 10                	je     c001f059 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001f049:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001f04f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f053:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f059:	31 c0                	xor    eax,eax
c001f05b:	83 c4 2c             	add    esp,0x2c
c001f05e:	5b                   	pop    ebx
c001f05f:	5e                   	pop    esi
c001f060:	5f                   	pop    edi
c001f061:	5d                   	pop    ebp
c001f062:	c3                   	ret    
c001f063:	90                   	nop

c001f064 <SATAPI::eject()>:
c001f064:	57                   	push   edi
c001f065:	b9 03 00 00 00       	mov    ecx,0x3
c001f06a:	83 ec 18             	sub    esp,0x18
c001f06d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f071:	fc                   	cld    
c001f072:	31 c0                	xor    eax,eax
c001f074:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f076:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f07b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f080:	50                   	push   eax
c001f081:	6a 00                	push   0x0
c001f083:	6a 00                	push   0x0
c001f085:	6a 00                	push   0x0
c001f087:	6a 00                	push   0x0
c001f089:	6a 02                	push   0x2
c001f08b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f08f:	50                   	push   eax
c001f090:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f094:	e8 e5 fc ff ff       	call   c001ed7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f099:	83 c4 38             	add    esp,0x38
c001f09c:	31 c0                	xor    eax,eax
c001f09e:	5f                   	pop    edi
c001f09f:	c3                   	ret    

c001f0a0 <SATAPI::detectMedia()>:
c001f0a0:	53                   	push   ebx
c001f0a1:	83 ec 14             	sub    esp,0x14
c001f0a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f0a8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f0ae:	e8 b9 b9 fe ff       	call   c000aa6c <VCache::writeWriteBuffer()>
c001f0b3:	59                   	pop    ecx
c001f0b4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f0ba:	e8 9d b9 fe ff       	call   c000aa5c <VCache::invalidateReadBuffer()>
c001f0bf:	c7 04 24 17 46 02 c0 	mov    DWORD PTR [esp],0xc0024617
c001f0c6:	e8 83 7e fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f0cb:	83 c4 10             	add    esp,0x10
c001f0ce:	31 c0                	xor    eax,eax
c001f0d0:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001f0d7:	85 d2                	test   edx,edx
c001f0d9:	74 0f                	je     c001f0ea <SATAPI::detectMedia()+0x4a>
c001f0db:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001f0e1:	75 07                	jne    c001f0ea <SATAPI::detectMedia()+0x4a>
c001f0e3:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001f0ea:	40                   	inc    eax
c001f0eb:	83 f8 1a             	cmp    eax,0x1a
c001f0ee:	75 e0                	jne    c001f0d0 <SATAPI::detectMedia()+0x30>
c001f0f0:	83 c4 08             	add    esp,0x8
c001f0f3:	5b                   	pop    ebx
c001f0f4:	c3                   	ret    
c001f0f5:	90                   	nop

c001f0f6 <SATAPI::open(int, int, void*)>:
c001f0f6:	56                   	push   esi
c001f0f7:	53                   	push   ebx
c001f0f8:	51                   	push   ecx
c001f0f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f101:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f10b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f111:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f115:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f11f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f129:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f130:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f136:	e8 a5 fd fe ff       	call   c000eee0 <Phys::allocatePage()>
c001f13b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f141:	89 c6                	mov    esi,eax
c001f143:	e8 98 fd fe ff       	call   c000eee0 <Phys::allocatePage()>
c001f148:	81 c6 00 10 00 00    	add    esi,0x1000
c001f14e:	39 c6                	cmp    esi,eax
c001f150:	74 10                	je     c001f162 <SATAPI::open(int, int, void*)+0x6c>
c001f152:	83 ec 0c             	sub    esp,0xc
c001f155:	68 2c 46 02 c0       	push   0xc002462c
c001f15a:	e8 87 fb fe ff       	call   c000ece6 <KePanic(char const*)>
c001f15f:	83 c4 10             	add    esp,0x10
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	6a 02                	push   0x2
c001f167:	e8 6f 2f ff ff       	call   c00120db <Virt::allocateKernelVirtualPages(int)>
c001f16c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f172:	6a 03                	push   0x3
c001f174:	50                   	push   eax
c001f175:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f17b:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001f181:	e8 2e 36 ff ff       	call   c00127b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f186:	83 c4 14             	add    esp,0x14
c001f189:	68 78 01 00 00       	push   0x178
c001f18e:	e8 0d f8 fe ff       	call   c000e9a0 <malloc>
c001f193:	83 c4 0c             	add    esp,0xc
c001f196:	6a 00                	push   0x0
c001f198:	68 ff ff ff 7f       	push   0x7fffffff
c001f19d:	6a 00                	push   0x0
c001f19f:	6a 00                	push   0x0
c001f1a1:	53                   	push   ebx
c001f1a2:	68 42 46 02 c0       	push   0xc0024642
c001f1a7:	89 c6                	mov    esi,eax
c001f1a9:	50                   	push   eax
c001f1aa:	e8 d1 ac fe ff       	call   c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f1af:	83 c4 14             	add    esp,0x14
c001f1b2:	56                   	push   esi
c001f1b3:	e8 88 ad fe ff       	call   c0009f40 <LogicalDisk::assignDriveLetter()>
c001f1b8:	5a                   	pop    edx
c001f1b9:	59                   	pop    ecx
c001f1ba:	0f be c0             	movsx  eax,al
c001f1bd:	50                   	push   eax
c001f1be:	68 88 44 02 c0       	push   0xc0024488
c001f1c3:	e8 86 7d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f1c8:	58                   	pop    eax
c001f1c9:	5a                   	pop    edx
c001f1ca:	56                   	push   esi
c001f1cb:	53                   	push   ebx
c001f1cc:	e8 95 9e fe ff       	call   c0009066 <Device::addChild(Device*)>
c001f1d1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001f1d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1da:	e8 d3 a2 fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001f1df:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f1e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1e9:	e8 b2 fe ff ff       	call   c001f0a0 <SATAPI::detectMedia()>
c001f1ee:	83 c4 14             	add    esp,0x14
c001f1f1:	31 c0                	xor    eax,eax
c001f1f3:	5b                   	pop    ebx
c001f1f4:	5e                   	pop    esi
c001f1f5:	c3                   	ret    

c001f1f6 <SATAPI::read(unsigned long long, int, void*)>:
c001f1f6:	55                   	push   ebp
c001f1f7:	57                   	push   edi
c001f1f8:	56                   	push   esi
c001f1f9:	53                   	push   ebx
c001f1fa:	83 ec 3c             	sub    esp,0x3c
c001f1fd:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001f201:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f205:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f209:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f20d:	83 fd 04             	cmp    ebp,0x4
c001f210:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f214:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f218:	7e 10                	jle    c001f22a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	68 50 46 02 c0       	push   0xc0024650
c001f222:	e8 bf fa fe ff       	call   c000ece6 <KePanic(char const*)>
c001f227:	83 c4 10             	add    esp,0x10
c001f22a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f230:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f236:	51                   	push   ecx
c001f237:	50                   	push   eax
c001f238:	83 c0 02             	add    eax,0x2
c001f23b:	c1 e0 07             	shl    eax,0x7
c001f23e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001f244:	50                   	push   eax
c001f245:	52                   	push   edx
c001f246:	e8 af e6 ff ff       	call   c001d8fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f24b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f24f:	b9 03 00 00 00       	mov    ecx,0x3
c001f254:	fc                   	cld    
c001f255:	31 c0                	xor    eax,eax
c001f257:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f259:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001f25e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001f263:	83 c4 0c             	add    esp,0xc
c001f266:	6a 00                	push   0x0
c001f268:	6a 00                	push   0x0
c001f26a:	6a 00                	push   0x0
c001f26c:	6a 00                	push   0x0
c001f26e:	6a 02                	push   0x2
c001f270:	8d 44 24 30          	lea    eax,[esp+0x30]
c001f274:	50                   	push   eax
c001f275:	53                   	push   ebx
c001f276:	e8 03 fb ff ff       	call   c001ed7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f27b:	83 c4 20             	add    esp,0x20
c001f27e:	85 c0                	test   eax,eax
c001f280:	89 c6                	mov    esi,eax
c001f282:	75 46                	jne    c001f2ca <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001f284:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f288:	b9 03 00 00 00       	mov    ecx,0x3
c001f28d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f28f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f293:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001f298:	0f c8                	bswap  eax
c001f29a:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001f29e:	89 e8                	mov    eax,ebp
c001f2a0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001f2a4:	50                   	push   eax
c001f2a5:	55                   	push   ebp
c001f2a6:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001f2aa:	c1 e5 0b             	shl    ebp,0xb
c001f2ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f2b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f2b5:	55                   	push   ebp
c001f2b6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001f2ba:	50                   	push   eax
c001f2bb:	53                   	push   ebx
c001f2bc:	e8 bd fa ff ff       	call   c001ed7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f2c1:	83 c4 20             	add    esp,0x20
c001f2c4:	85 c0                	test   eax,eax
c001f2c6:	89 c6                	mov    esi,eax
c001f2c8:	74 0c                	je     c001f2d6 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001f2ca:	83 ec 0c             	sub    esp,0xc
c001f2cd:	53                   	push   ebx
c001f2ce:	e8 cd fd ff ff       	call   c001f0a0 <SATAPI::detectMedia()>
c001f2d3:	83 c4 10             	add    esp,0x10
c001f2d6:	83 c4 3c             	add    esp,0x3c
c001f2d9:	89 f0                	mov    eax,esi
c001f2db:	5b                   	pop    ebx
c001f2dc:	5e                   	pop    esi
c001f2dd:	5f                   	pop    edi
c001f2de:	5d                   	pop    ebp
c001f2df:	c3                   	ret    

c001f2e0 <IOAPIC::close(int, int, void*)>:
c001f2e0:	b8 00 00 00 00       	mov    eax,0x0
c001f2e5:	c3                   	ret    

c001f2e6 <apicGetBase()>:
c001f2e6:	55                   	push   ebp
c001f2e7:	89 e5                	mov    ebp,esp
c001f2e9:	83 ec 08             	sub    esp,0x8
c001f2ec:	83 ec 0c             	sub    esp,0xc
c001f2ef:	68 b4 46 02 c0       	push   0xc00246b4
c001f2f4:	e8 ed f9 fe ff       	call   c000ece6 <KePanic(char const*)>
c001f2f9:	83 c4 10             	add    esp,0x10
c001f2fc:	b8 00 00 00 00       	mov    eax,0x0
c001f301:	c9                   	leave  
c001f302:	c3                   	ret    
c001f303:	90                   	nop

c001f304 <IOAPIC::IOAPIC()>:
c001f304:	83 ec 0c             	sub    esp,0xc
c001f307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30b:	83 ec 08             	sub    esp,0x8
c001f30e:	68 c3 46 02 c0       	push   0xc00246c3
c001f313:	50                   	push   eax
c001f314:	e8 af 9e fe ff       	call   c00091c8 <Device::Device(char const*)>
c001f319:	83 c4 10             	add    esp,0x10
c001f31c:	ba e4 46 02 c0       	mov    edx,0xc00246e4
c001f321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f325:	89 10                	mov    DWORD PTR [eax],edx
c001f327:	90                   	nop
c001f328:	83 c4 0c             	add    esp,0xc
c001f32b:	c3                   	ret    

c001f32c <apicOpen()>:
c001f32c:	55                   	push   ebp
c001f32d:	89 e5                	mov    ebp,esp
c001f32f:	53                   	push   ebx
c001f330:	83 ec 34             	sub    esp,0x34
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	68 cb 46 02 c0       	push   0xc00246cb
c001f33b:	e8 0e 7c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f340:	83 c4 10             	add    esp,0x10
c001f343:	a0 20 e1 02 c0       	mov    al,ds:0xc002e120
c001f348:	83 f0 01             	xor    eax,0x1
c001f34b:	0f b6 c0             	movzx  eax,al
c001f34e:	85 c0                	test   eax,eax
c001f350:	0f 84 a3 00 00 00    	je     c001f3f9 <apicOpen()+0xcd>
c001f356:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001f35a:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001f35f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f363:	0f b6 c0             	movzx  eax,al
c001f366:	39 c2                	cmp    edx,eax
c001f368:	0f 83 84 00 00 00    	jae    c001f3f2 <apicOpen()+0xc6>
c001f36e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001f375:	83 ec 0c             	sub    esp,0xc
c001f378:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f37b:	e8 20 f6 fe ff       	call   c000e9a0 <malloc>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	89 c3                	mov    ebx,eax
c001f385:	83 ec 0c             	sub    esp,0xc
c001f388:	53                   	push   ebx
c001f389:	e8 76 ff ff ff       	call   c001f304 <IOAPIC::IOAPIC()>
c001f38e:	83 c4 10             	add    esp,0x10
c001f391:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001f394:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001f398:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001f39b:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001f3a2:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c001f3a7:	83 c0 01             	add    eax,0x1
c001f3aa:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001f3af:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001f3b4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001f3ba:	83 ec 08             	sub    esp,0x8
c001f3bd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f3c0:	50                   	push   eax
c001f3c1:	e8 a0 9c fe ff       	call   c0009066 <Device::addChild(Device*)>
c001f3c6:	83 c4 10             	add    esp,0x10
c001f3c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f3cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3ce:	83 c0 08             	add    eax,0x8
c001f3d1:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3d3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f3d7:	6a 00                	push   0x0
c001f3d9:	6a 00                	push   0x0
c001f3db:	52                   	push   edx
c001f3dc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f3df:	ff d0                	call   eax
c001f3e1:	83 c4 10             	add    esp,0x10
c001f3e4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f3e7:	83 c0 01             	add    eax,0x1
c001f3ea:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f3ed:	e9 68 ff ff ff       	jmp    c001f35a <apicOpen()+0x2e>
c001f3f2:	c6 05 20 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e120,0x1
c001f3f9:	e8 e8 fe ff ff       	call   c001f2e6 <apicGetBase()>
c001f3fe:	05 f0 00 00 00       	add    eax,0xf0
c001f403:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f406:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f409:	8b 00                	mov    eax,DWORD PTR [eax]
c001f40b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f40e:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f415:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f41c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f41f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f422:	89 10                	mov    DWORD PTR [eax],edx
c001f424:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f42b:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001f430:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f433:	7d 7c                	jge    c001f4b1 <apicOpen()+0x185>
c001f435:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f438:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f43f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f442:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f445:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f44c:	c1 e8 08             	shr    eax,0x8
c001f44f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f453:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f456:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f45d:	c1 e8 18             	shr    eax,0x18
c001f460:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f463:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f467:	3d ff 00 00 00       	cmp    eax,0xff
c001f46c:	75 3a                	jne    c001f4a8 <apicOpen()+0x17c>
c001f46e:	e8 73 fe ff ff       	call   c001f2e6 <apicGetBase()>
c001f473:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f477:	83 fa 01             	cmp    edx,0x1
c001f47a:	75 07                	jne    c001f483 <apicOpen()+0x157>
c001f47c:	ba 60 03 00 00       	mov    edx,0x360
c001f481:	eb 05                	jmp    c001f488 <apicOpen()+0x15c>
c001f483:	ba 50 03 00 00       	mov    edx,0x350
c001f488:	01 d0                	add    eax,edx
c001f48a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f48d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f490:	8b 00                	mov    eax,DWORD PTR [eax]
c001f492:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f495:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f49c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f4a0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f4a3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f4a6:	89 10                	mov    DWORD PTR [eax],edx
c001f4a8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f4ac:	e9 7a ff ff ff       	jmp    c001f42b <apicOpen()+0xff>
c001f4b1:	90                   	nop
c001f4b2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f4b5:	c9                   	leave  
c001f4b6:	c3                   	ret    
c001f4b7:	90                   	nop

c001f4b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f4b8:	55                   	push   ebp
c001f4b9:	89 e5                	mov    ebp,esp
c001f4bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f4c4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f4c7:	72 1d                	jb     c001f4e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4cc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4d5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f4db:	01 d0                	add    eax,edx
c001f4dd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f4e0:	73 04                	jae    c001f4e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f4e2:	b0 01                	mov    al,0x1
c001f4e4:	eb 02                	jmp    c001f4e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f4e6:	b0 00                	mov    al,0x0
c001f4e8:	5d                   	pop    ebp
c001f4e9:	c3                   	ret    

c001f4ea <IOAPIC::read(int)>:
c001f4ea:	55                   	push   ebp
c001f4eb:	89 e5                	mov    ebp,esp
c001f4ed:	83 ec 10             	sub    esp,0x10
c001f4f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f4f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f4fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f4ff:	0f b6 d0             	movzx  edx,al
c001f502:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f505:	89 10                	mov    DWORD PTR [eax],edx
c001f507:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f50a:	83 c0 10             	add    eax,0x10
c001f50d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f50f:	c9                   	leave  
c001f510:	c3                   	ret    
c001f511:	90                   	nop

c001f512 <IOAPIC::open(int, int, void*)>:
c001f512:	55                   	push   ebp
c001f513:	89 e5                	mov    ebp,esp
c001f515:	57                   	push   edi
c001f516:	56                   	push   esi
c001f517:	53                   	push   ebx
c001f518:	83 ec 04             	sub    esp,0x4
c001f51b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f51e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f521:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f52a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f530:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c001f537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f53a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f543:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f549:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c001f550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f553:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f55c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f565:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f56b:	0f b6 f0             	movzx  esi,al
c001f56e:	89 d0                	mov    eax,edx
c001f570:	ba 00 00 00 00       	mov    edx,0x0
c001f575:	89 c7                	mov    edi,eax
c001f577:	83 e7 ff             	and    edi,0xffffffff
c001f57a:	89 f9                	mov    ecx,edi
c001f57c:	0f b6 da             	movzx  ebx,dl
c001f57f:	89 c8                	mov    eax,ecx
c001f581:	89 da                	mov    edx,ebx
c001f583:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f586:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f589:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f58d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f591:	83 e0 00             	and    eax,0x0
c001f594:	09 d0                	or     eax,edx
c001f596:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f59a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f59d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f5a3:	8d 50 01             	lea    edx,[eax+0x1]
c001f5a6:	88 d1                	mov    cl,dl
c001f5a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f5ab:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f5b1:	0f b6 d0             	movzx  edx,al
c001f5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5b7:	83 c2 08             	add    edx,0x8
c001f5ba:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f5be:	0f b6 c9             	movzx  ecx,cl
c001f5c1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f5c7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f5cb:	6a 01                	push   0x1
c001f5cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f5d0:	e8 15 ff ff ff       	call   c001f4ea <IOAPIC::read(int)>
c001f5d5:	83 c4 08             	add    esp,0x8
c001f5d8:	c1 f8 10             	sar    eax,0x10
c001f5db:	0f b6 c0             	movzx  eax,al
c001f5de:	8d 50 01             	lea    edx,[eax+0x1]
c001f5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5e4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f5ea:	b8 00 00 00 00       	mov    eax,0x0
c001f5ef:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f5f2:	5b                   	pop    ebx
c001f5f3:	5e                   	pop    esi
c001f5f4:	5f                   	pop    edi
c001f5f5:	5d                   	pop    ebp
c001f5f6:	c3                   	ret    
c001f5f7:	90                   	nop

c001f5f8 <IOAPIC::write(int, int)>:
c001f5f8:	55                   	push   ebp
c001f5f9:	89 e5                	mov    ebp,esp
c001f5fb:	83 ec 10             	sub    esp,0x10
c001f5fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f601:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f607:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f60a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f60d:	0f b6 d0             	movzx  edx,al
c001f610:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f613:	89 10                	mov    DWORD PTR [eax],edx
c001f615:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f618:	8d 50 10             	lea    edx,[eax+0x10]
c001f61b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f61e:	89 02                	mov    DWORD PTR [edx],eax
c001f620:	90                   	nop
c001f621:	c9                   	leave  
c001f622:	c3                   	ret    
c001f623:	90                   	nop

c001f624 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f624:	55                   	push   ebp
c001f625:	89 e5                	mov    ebp,esp
c001f627:	53                   	push   ebx
c001f628:	83 ec 2c             	sub    esp,0x2c
c001f62b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f62e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f631:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f634:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f637:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f63a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f63d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f640:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f643:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f646:	88 d8                	mov    al,bl
c001f648:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f64b:	88 c8                	mov    al,cl
c001f64d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f650:	88 d0                	mov    al,dl
c001f652:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f655:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f659:	83 c0 08             	add    eax,0x8
c001f65c:	d1 e0                	shl    eax,1
c001f65e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f661:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f665:	83 c0 08             	add    eax,0x8
c001f668:	d1 e0                	shl    eax,1
c001f66a:	83 c0 01             	add    eax,0x1
c001f66d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f670:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f673:	50                   	push   eax
c001f674:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f677:	e8 6e fe ff ff       	call   c001f4ea <IOAPIC::read(int)>
c001f67c:	83 c4 08             	add    esp,0x8
c001f67f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f682:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f689:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f68c:	c1 e0 18             	shl    eax,0x18
c001f68f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f692:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f695:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f698:	52                   	push   edx
c001f699:	50                   	push   eax
c001f69a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f69d:	e8 56 ff ff ff       	call   c001f5f8 <IOAPIC::write(int, int)>
c001f6a2:	83 c4 0c             	add    esp,0xc
c001f6a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f6a8:	50                   	push   eax
c001f6a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f6ac:	e8 39 fe ff ff       	call   c001f4ea <IOAPIC::read(int)>
c001f6b1:	83 c4 08             	add    esp,0x8
c001f6b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f6b7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f6be:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f6c5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f6cc:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f6d0:	85 c0                	test   eax,eax
c001f6d2:	74 09                	je     c001f6dd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f6d4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f6db:	eb 07                	jmp    c001f6e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f6dd:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f6e4:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f6e8:	85 c0                	test   eax,eax
c001f6ea:	74 09                	je     c001f6f5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f6ec:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f6f3:	eb 07                	jmp    c001f6fc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f6f5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f6fc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f703:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f707:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f70a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f70d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f710:	52                   	push   edx
c001f711:	50                   	push   eax
c001f712:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f715:	e8 de fe ff ff       	call   c001f5f8 <IOAPIC::write(int, int)>
c001f71a:	83 c4 0c             	add    esp,0xc
c001f71d:	90                   	nop
c001f71e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f721:	c9                   	leave  
c001f722:	c3                   	ret    
c001f723:	90                   	nop

c001f724 <APICTimer::close(int, int, void*)>:
c001f724:	b8 00 00 00 00       	mov    eax,0x0
c001f729:	c3                   	ret    
c001f72a:	66 90                	xchg   ax,ax

c001f72c <apicTimerHandler(regs*, void*)>:
c001f72c:	83 ec 0c             	sub    esp,0xc
c001f72f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f733:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f735:	b8 10 27 00 00       	mov    eax,0x2710
c001f73a:	ba 00 00 00 00       	mov    edx,0x0
c001f73f:	f7 f1                	div    ecx
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	50                   	push   eax
c001f745:	e8 f2 af fe ff       	call   c000a73c <timerHandler(unsigned int)>
c001f74a:	83 c4 10             	add    esp,0x10
c001f74d:	90                   	nop
c001f74e:	83 c4 0c             	add    esp,0xc
c001f751:	c3                   	ret    
c001f752:	66 90                	xchg   ax,ax

c001f754 <APICTimer::open(int, int, void*)>:
c001f754:	83 ec 0c             	sub    esp,0xc
c001f757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f75d:	83 c0 24             	add    eax,0x24
c001f760:	8b 00                	mov    eax,DWORD PTR [eax]
c001f762:	83 ec 08             	sub    esp,0x8
c001f765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f76d:	ff d0                	call   eax
c001f76f:	83 c4 10             	add    esp,0x10
c001f772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f776:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f77a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f784:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f788:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f78e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f792:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f798:	83 ec 0c             	sub    esp,0xc
c001f79b:	51                   	push   ecx
c001f79c:	6a 01                	push   0x1
c001f79e:	68 2c f7 01 c0       	push   0xc001f72c
c001f7a3:	52                   	push   edx
c001f7a4:	50                   	push   eax
c001f7a5:	e8 68 98 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f7aa:	83 c4 20             	add    esp,0x20
c001f7ad:	89 c2                	mov    edx,eax
c001f7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f7b9:	b8 00 00 00 00       	mov    eax,0x0
c001f7be:	83 c4 0c             	add    esp,0xc
c001f7c1:	c3                   	ret    
c001f7c2:	66 90                	xchg   ax,ax

c001f7c4 <APICTimer::write(int)>:
c001f7c4:	83 ec 0c             	sub    esp,0xc
c001f7c7:	83 ec 0c             	sub    esp,0xc
c001f7ca:	68 08 47 02 c0       	push   0xc0024708
c001f7cf:	e8 12 f5 fe ff       	call   c000ece6 <KePanic(char const*)>
c001f7d4:	83 c4 10             	add    esp,0x10
c001f7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f7e5:	90                   	nop
c001f7e6:	83 c4 0c             	add    esp,0xc
c001f7e9:	c3                   	ret    
c001f7ea:	66 90                	xchg   ax,ax

c001f7ec <APICTimer::APICTimer()>:
c001f7ec:	83 ec 0c             	sub    esp,0xc
c001f7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f3:	83 ec 08             	sub    esp,0x8
c001f7f6:	68 18 47 02 c0       	push   0xc0024718
c001f7fb:	50                   	push   eax
c001f7fc:	e8 6f ae fe ff       	call   c000a670 <Timer::Timer(char const*)>
c001f801:	83 c4 10             	add    esp,0x10
c001f804:	ba 2c 47 02 c0       	mov    edx,0xc002472c
c001f809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80d:	89 10                	mov    DWORD PTR [eax],edx
c001f80f:	90                   	nop
c001f810:	83 c4 0c             	add    esp,0xc
c001f813:	c3                   	ret    

c001f814 <PIT::write(int)>:
c001f814:	83 ec 10             	sub    esp,0x10
c001f817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f81b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f81f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f825:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f829:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c001f82e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f833:	89 c2                	mov    edx,eax
c001f835:	c1 fa 1f             	sar    edx,0x1f
c001f838:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f83c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f840:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f847:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f84c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f850:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f855:	ee                   	out    dx,al
c001f856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f85a:	0f b6 c0             	movzx  eax,al
c001f85d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f864:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f868:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f86c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f871:	ee                   	out    dx,al
c001f872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f876:	c1 f8 08             	sar    eax,0x8
c001f879:	0f b6 c0             	movzx  eax,al
c001f87c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f883:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f887:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f88b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f890:	ee                   	out    dx,al
c001f891:	90                   	nop
c001f892:	83 c4 10             	add    esp,0x10
c001f895:	c3                   	ret    
c001f896:	66 90                	xchg   ax,ax

c001f898 <pitHandler(regs*, void*)>:
c001f898:	83 ec 0c             	sub    esp,0xc
c001f89b:	8b 0d 24 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e124
c001f8a1:	b8 10 27 00 00       	mov    eax,0x2710
c001f8a6:	89 c2                	mov    edx,eax
c001f8a8:	c1 fa 1f             	sar    edx,0x1f
c001f8ab:	f7 f9                	idiv   ecx
c001f8ad:	83 ec 0c             	sub    esp,0xc
c001f8b0:	50                   	push   eax
c001f8b1:	e8 86 ae fe ff       	call   c000a73c <timerHandler(unsigned int)>
c001f8b6:	83 c4 10             	add    esp,0x10
c001f8b9:	90                   	nop
c001f8ba:	83 c4 0c             	add    esp,0xc
c001f8bd:	c3                   	ret    
c001f8be:	66 90                	xchg   ax,ax

c001f8c0 <PIT::open(int, int, void*)>:
c001f8c0:	83 ec 0c             	sub    esp,0xc
c001f8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c9:	83 c0 24             	add    eax,0x24
c001f8cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ce:	83 ec 08             	sub    esp,0x8
c001f8d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d9:	ff d0                	call   eax
c001f8db:	83 c4 10             	add    esp,0x10
c001f8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	6a 00                	push   0x0
c001f8e7:	6a 01                	push   0x1
c001f8e9:	68 98 f8 01 c0       	push   0xc001f898
c001f8ee:	6a 00                	push   0x0
c001f8f0:	50                   	push   eax
c001f8f1:	e8 1c 97 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f8f6:	83 c4 20             	add    esp,0x20
c001f8f9:	89 c2                	mov    edx,eax
c001f8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f905:	b8 00 00 00 00       	mov    eax,0x0
c001f90a:	83 c4 0c             	add    esp,0xc
c001f90d:	c3                   	ret    
c001f90e:	66 90                	xchg   ax,ax

c001f910 <PIT::close(int, int, void*)>:
c001f910:	83 ec 0c             	sub    esp,0xc
c001f913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f917:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f925:	6a 01                	push   0x1
c001f927:	68 98 f8 01 c0       	push   0xc001f898
c001f92c:	6a 00                	push   0x0
c001f92e:	50                   	push   eax
c001f92f:	e8 14 97 fe ff       	call   c0009048 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f934:	83 c4 10             	add    esp,0x10
c001f937:	b8 00 00 00 00       	mov    eax,0x0
c001f93c:	83 c4 0c             	add    esp,0xc
c001f93f:	c3                   	ret    

c001f940 <PIT::PIT()>:
c001f940:	83 ec 0c             	sub    esp,0xc
c001f943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f947:	83 ec 08             	sub    esp,0x8
c001f94a:	68 54 47 02 c0       	push   0xc0024754
c001f94f:	50                   	push   eax
c001f950:	e8 1b ad fe ff       	call   c000a670 <Timer::Timer(char const*)>
c001f955:	83 c4 10             	add    esp,0x10
c001f958:	ba 7c 47 02 c0       	mov    edx,0xc002477c
c001f95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f961:	89 10                	mov    DWORD PTR [eax],edx
c001f963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f967:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f96d:	0f b6 d0             	movzx  edx,al
c001f970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f974:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f985:	0f b6 d0             	movzx  edx,al
c001f988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f995:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f99b:	8d 50 01             	lea    edx,[eax+0x1]
c001f99e:	88 d1                	mov    cl,dl
c001f9a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9a4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f9aa:	0f b6 d0             	movzx  edx,al
c001f9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f9b5:	83 e1 3f             	and    ecx,0x3f
c001f9b8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f9bc:	90                   	nop
c001f9bd:	83 c4 0c             	add    esp,0xc
c001f9c0:	c3                   	ret    
c001f9c1:	66 90                	xchg   ax,ax
c001f9c3:	66 90                	xchg   ax,ax
c001f9c5:	66 90                	xchg   ax,ax
c001f9c7:	66 90                	xchg   ax,ax
c001f9c9:	66 90                	xchg   ax,ax
c001f9cb:	66 90                	xchg   ax,ax
c001f9cd:	66 90                	xchg   ax,ax
c001f9cf:	90                   	nop

c001f9d0 <avxDetect>:
c001f9d0:	b8 01 00 00 00       	mov    eax,0x1
c001f9d5:	0f a2                	cpuid  
c001f9d7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f9dd:	74 15                	je     c001f9f4 <avxDetect.noAVX>
c001f9df:	b8 01 00 00 00       	mov    eax,0x1
c001f9e4:	0f a2                	cpuid  
c001f9e6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f9ec:	74 06                	je     c001f9f4 <avxDetect.noAVX>
c001f9ee:	b8 01 00 00 00       	mov    eax,0x1
c001f9f3:	c3                   	ret    

c001f9f4 <avxDetect.noAVX>:
c001f9f4:	b8 00 00 00 00       	mov    eax,0x0
c001f9f9:	c3                   	ret    

c001f9fa <avxSave>:
c001f9fa:	53                   	push   ebx
c001f9fb:	52                   	push   edx
c001f9fc:	31 c0                	xor    eax,eax
c001f9fe:	48                   	dec    eax
c001f9ff:	89 c2                	mov    edx,eax
c001fa01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa05:	0f ae 23             	xsave  [ebx]
c001fa08:	5a                   	pop    edx
c001fa09:	5b                   	pop    ebx
c001fa0a:	c3                   	ret    

c001fa0b <avxLoad>:
c001fa0b:	53                   	push   ebx
c001fa0c:	52                   	push   edx
c001fa0d:	31 c0                	xor    eax,eax
c001fa0f:	48                   	dec    eax
c001fa10:	89 c2                	mov    edx,eax
c001fa12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa16:	0f ae 2b             	xrstor [ebx]
c001fa19:	5a                   	pop    edx
c001fa1a:	5b                   	pop    ebx
c001fa1b:	c3                   	ret    

c001fa1c <avxInit>:
c001fa1c:	e8 47 03 00 00       	call   c001fd68 <sseInit>
c001fa21:	50                   	push   eax
c001fa22:	51                   	push   ecx
c001fa23:	0f 20 e0             	mov    eax,cr4
c001fa26:	0d 00 00 04 00       	or     eax,0x40000
c001fa2b:	0f 22 e0             	mov    cr4,eax
c001fa2e:	31 c9                	xor    ecx,ecx
c001fa30:	0f 01 d0             	xgetbv 
c001fa33:	0d 07 00 00 00       	or     eax,0x7
c001fa38:	0f 01 d1             	xsetbv 
c001fa3b:	59                   	pop    ecx
c001fa3c:	58                   	pop    eax
c001fa3d:	c3                   	ret    

c001fa3e <avxClose>:
c001fa3e:	c3                   	ret    
c001fa3f:	90                   	nop

c001fa40 <isr0>:
c001fa40:	fa                   	cli    
c001fa41:	68 00 00 00 00       	push   0x0
c001fa46:	68 00 00 00 00       	push   0x0
c001fa4b:	e9 56 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa50 <isr1>:
c001fa50:	fa                   	cli    
c001fa51:	6a 00                	push   0x0
c001fa53:	6a 01                	push   0x1
c001fa55:	e9 4c 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa5a <isr2>:
c001fa5a:	fa                   	cli    
c001fa5b:	6a 00                	push   0x0
c001fa5d:	6a 02                	push   0x2
c001fa5f:	e9 42 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa64 <isr3>:
c001fa64:	fa                   	cli    
c001fa65:	6a 00                	push   0x0
c001fa67:	6a 03                	push   0x3
c001fa69:	e9 38 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa6e <isr4>:
c001fa6e:	fa                   	cli    
c001fa6f:	6a 00                	push   0x0
c001fa71:	6a 04                	push   0x4
c001fa73:	e9 2e 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa78 <isr5>:
c001fa78:	fa                   	cli    
c001fa79:	6a 00                	push   0x0
c001fa7b:	6a 05                	push   0x5
c001fa7d:	e9 24 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa82 <isr6>:
c001fa82:	fa                   	cli    
c001fa83:	6a 00                	push   0x0
c001fa85:	6a 06                	push   0x6
c001fa87:	e9 1a 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa8c <isr7>:
c001fa8c:	fa                   	cli    
c001fa8d:	6a 00                	push   0x0
c001fa8f:	6a 07                	push   0x7
c001fa91:	e9 10 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa96 <isr8>:
c001fa96:	fa                   	cli    
c001fa97:	6a 08                	push   0x8
c001fa99:	e9 08 01 00 00       	jmp    c001fba6 <int_common_stub>

c001fa9e <isr9>:
c001fa9e:	fa                   	cli    
c001fa9f:	6a 00                	push   0x0
c001faa1:	6a 09                	push   0x9
c001faa3:	e9 fe 00 00 00       	jmp    c001fba6 <int_common_stub>

c001faa8 <isr10>:
c001faa8:	fa                   	cli    
c001faa9:	6a 0a                	push   0xa
c001faab:	e9 f6 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fab0 <isr11>:
c001fab0:	fa                   	cli    
c001fab1:	6a 0b                	push   0xb
c001fab3:	e9 ee 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fab8 <isr12>:
c001fab8:	fa                   	cli    
c001fab9:	6a 0c                	push   0xc
c001fabb:	e9 e6 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fac0 <isr13>:
c001fac0:	fa                   	cli    
c001fac1:	6a 0d                	push   0xd
c001fac3:	53                   	push   ebx
c001fac4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fac8:	81 fb 96 fc 01 c0    	cmp    ebx,0xc001fc96
c001face:	5b                   	pop    ebx
c001facf:	0f 84 c3 01 00 00    	je     c001fc98 <finishSignal2>
c001fad5:	e9 cc 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fada <isr14>:
c001fada:	fa                   	cli    
c001fadb:	6a 0e                	push   0xe
c001fadd:	e9 c4 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fae2 <isr15>:
c001fae2:	fa                   	cli    
c001fae3:	6a 00                	push   0x0
c001fae5:	6a 0f                	push   0xf
c001fae7:	e9 ba 00 00 00       	jmp    c001fba6 <int_common_stub>

c001faec <isr16>:
c001faec:	fa                   	cli    
c001faed:	6a 00                	push   0x0
c001faef:	6a 10                	push   0x10
c001faf1:	e9 b0 00 00 00       	jmp    c001fba6 <int_common_stub>

c001faf6 <isr17>:
c001faf6:	fa                   	cli    
c001faf7:	6a 00                	push   0x0
c001faf9:	6a 11                	push   0x11
c001fafb:	e9 a6 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb00 <isr18>:
c001fb00:	fa                   	cli    
c001fb01:	6a 00                	push   0x0
c001fb03:	6a 12                	push   0x12
c001fb05:	e9 9c 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb0a <irq3>:
c001fb0a:	fa                   	cli    
c001fb0b:	6a 00                	push   0x0
c001fb0d:	6a 23                	push   0x23
c001fb0f:	e9 92 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb14 <irq4>:
c001fb14:	fa                   	cli    
c001fb15:	6a 00                	push   0x0
c001fb17:	6a 24                	push   0x24
c001fb19:	e9 88 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb1e <irq5>:
c001fb1e:	fa                   	cli    
c001fb1f:	6a 00                	push   0x0
c001fb21:	6a 25                	push   0x25
c001fb23:	e9 7e 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb28 <irq6>:
c001fb28:	fa                   	cli    
c001fb29:	6a 00                	push   0x0
c001fb2b:	6a 26                	push   0x26
c001fb2d:	e9 74 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb32 <irq7>:
c001fb32:	fa                   	cli    
c001fb33:	6a 00                	push   0x0
c001fb35:	6a 27                	push   0x27
c001fb37:	e9 6a 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb3c <irq8>:
c001fb3c:	fa                   	cli    
c001fb3d:	6a 00                	push   0x0
c001fb3f:	6a 28                	push   0x28
c001fb41:	e9 60 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb46 <irq9>:
c001fb46:	fa                   	cli    
c001fb47:	6a 00                	push   0x0
c001fb49:	6a 29                	push   0x29
c001fb4b:	e9 56 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb50 <irq10>:
c001fb50:	fa                   	cli    
c001fb51:	6a 00                	push   0x0
c001fb53:	6a 2a                	push   0x2a
c001fb55:	e9 4c 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb5a <irq11>:
c001fb5a:	fa                   	cli    
c001fb5b:	6a 00                	push   0x0
c001fb5d:	6a 2b                	push   0x2b
c001fb5f:	e9 42 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb64 <irq12>:
c001fb64:	fa                   	cli    
c001fb65:	6a 00                	push   0x0
c001fb67:	6a 2c                	push   0x2c
c001fb69:	e9 38 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb6e <irq13>:
c001fb6e:	fa                   	cli    
c001fb6f:	6a 00                	push   0x0
c001fb71:	6a 2d                	push   0x2d
c001fb73:	e9 2e 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb78 <irq14>:
c001fb78:	fa                   	cli    
c001fb79:	6a 00                	push   0x0
c001fb7b:	6a 2e                	push   0x2e
c001fb7d:	e9 24 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb82 <irq15>:
c001fb82:	fa                   	cli    
c001fb83:	6a 00                	push   0x0
c001fb85:	6a 2f                	push   0x2f
c001fb87:	e9 1a 00 00 00       	jmp    c001fba6 <int_common_stub>

c001fb8c <irq1>:
c001fb8c:	fa                   	cli    
c001fb8d:	6a 00                	push   0x0
c001fb8f:	6a 21                	push   0x21
c001fb91:	eb 13                	jmp    c001fba6 <int_common_stub>

c001fb93 <irq2>:
c001fb93:	fa                   	cli    
c001fb94:	6a 00                	push   0x0
c001fb96:	6a 22                	push   0x22
c001fb98:	eb 0c                	jmp    c001fba6 <int_common_stub>

c001fb9a <isr96>:
c001fb9a:	6a 00                	push   0x0
c001fb9c:	6a 60                	push   0x60
c001fb9e:	fb                   	sti    
c001fb9f:	eb 37                	jmp    c001fbd8 <syscall_common_stub>

c001fba1 <irq0>:
c001fba1:	fa                   	cli    
c001fba2:	6a 00                	push   0x0
c001fba4:	6a 20                	push   0x20

c001fba6 <int_common_stub>:
c001fba6:	60                   	pusha  
c001fba7:	1e                   	push   ds
c001fba8:	06                   	push   es
c001fba9:	0f a0                	push   fs
c001fbab:	0f a8                	push   gs
c001fbad:	66 b8 10 00          	mov    ax,0x10
c001fbb1:	66 8e d8             	mov    ds,ax
c001fbb4:	66 8e c0             	mov    es,ax
c001fbb7:	66 8e e0             	mov    fs,ax
c001fbba:	66 8e e8             	mov    gs,ax
c001fbbd:	54                   	push   esp
c001fbbe:	fc                   	cld    
c001fbbf:	e8 d4 e1 fe ff       	call   c000dd98 <int_handler>
c001fbc4:	81 c4 04 00 00 00    	add    esp,0x4
c001fbca:	0f a9                	pop    gs
c001fbcc:	0f a1                	pop    fs
c001fbce:	07                   	pop    es
c001fbcf:	1f                   	pop    ds
c001fbd0:	61                   	popa   
c001fbd1:	81 c4 08 00 00 00    	add    esp,0x8
c001fbd7:	cf                   	iret   

c001fbd8 <syscall_common_stub>:
c001fbd8:	60                   	pusha  
c001fbd9:	1e                   	push   ds
c001fbda:	06                   	push   es
c001fbdb:	0f a0                	push   fs
c001fbdd:	0f a8                	push   gs
c001fbdf:	66 b8 10 00          	mov    ax,0x10
c001fbe3:	66 8e d8             	mov    ds,ax
c001fbe6:	66 8e c0             	mov    es,ax
c001fbe9:	66 8e e0             	mov    fs,ax
c001fbec:	66 8e e8             	mov    gs,ax
c001fbef:	54                   	push   esp
c001fbf0:	fc                   	cld    
c001fbf1:	e8 a2 e1 fe ff       	call   c000dd98 <int_handler>
c001fbf6:	81 c4 04 00 00 00    	add    esp,0x4
c001fbfc:	0f a9                	pop    gs
c001fbfe:	0f a1                	pop    fs
c001fc00:	07                   	pop    es
c001fc01:	1f                   	pop    ds
c001fc02:	e8 91 03 ff ff       	call   c000ff98 <KiCheckSignalZ>
c001fc07:	3d 00 00 00 00       	cmp    eax,0x0
c001fc0c:	0f 84 c0 00 00 00    	je     c001fcd2 <skipSignals>
c001fc12:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001fc17:	61                   	popa   
c001fc18:	53                   	push   ebx
c001fc19:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001fc1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001fc22:	5b                   	pop    ebx
c001fc23:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001fc28:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001fc2b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001fc2e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fc31:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001fc34:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001fc37:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001fc3a:	81 c4 08 00 00 00    	add    esp,0x8
c001fc40:	5e                   	pop    esi
c001fc41:	5b                   	pop    ebx
c001fc42:	59                   	pop    ecx
c001fc43:	5a                   	pop    edx
c001fc44:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001fc47:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001fc4a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fc4d:	52                   	push   edx
c001fc4e:	51                   	push   ecx
c001fc4f:	53                   	push   ebx
c001fc50:	56                   	push   esi
c001fc51:	81 ec 08 00 00 00    	sub    esp,0x8
c001fc57:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001fc5a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001fc5d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001fc60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fc63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fc66:	60                   	pusha  
c001fc67:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001fc6d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001fc70:	89 e3                	mov    ebx,esp
c001fc72:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001fc75:	52                   	push   edx
c001fc76:	68 96 fc 01 c0       	push   0xc001fc96
c001fc7b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001fc7e:	89 dc                	mov    esp,ebx
c001fc80:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001fc83:	68 23 00 00 00       	push   0x23
c001fc88:	51                   	push   ecx
c001fc89:	68 02 02 00 00       	push   0x202
c001fc8e:	68 1b 00 00 00       	push   0x1b
c001fc93:	ff 36                	push   DWORD PTR [esi]
c001fc95:	cf                   	iret   

c001fc96 <finishSignal>:
c001fc96:	cd 0f                	int    0xf

c001fc98 <finishSignal2>:
c001fc98:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001fc9e:	e8 72 03 ff ff       	call   c0010015 <KiFinishSignalZ>
c001fca3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001fca9:	68 23 00 00 00       	push   0x23
c001fcae:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001fcb1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001fcb4:	68 1b 00 00 00       	push   0x1b
c001fcb9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001fcbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fcbf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001fcc2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001fcc5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001fcc8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001fccb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001fcce:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001fcd1:	cf                   	iret   

c001fcd2 <skipSignals>:
c001fcd2:	61                   	popa   
c001fcd3:	81 c4 08 00 00 00    	add    esp,0x8
c001fcd9:	cf                   	iret   
c001fcda:	90                   	nop
c001fcdb:	90                   	nop

c001fcdc <irq16>:
c001fcdc:	fa                   	cli    
c001fcdd:	6a 00                	push   0x0
c001fcdf:	6a 30                	push   0x30
c001fce1:	e9 c0 fe ff ff       	jmp    c001fba6 <int_common_stub>

c001fce6 <irq17>:
c001fce6:	fa                   	cli    
c001fce7:	6a 00                	push   0x0
c001fce9:	6a 31                	push   0x31
c001fceb:	e9 b6 fe ff ff       	jmp    c001fba6 <int_common_stub>

c001fcf0 <irq18>:
c001fcf0:	fa                   	cli    
c001fcf1:	6a 00                	push   0x0
c001fcf3:	6a 32                	push   0x32
c001fcf5:	e9 ac fe ff ff       	jmp    c001fba6 <int_common_stub>

c001fcfa <irq19>:
c001fcfa:	fa                   	cli    
c001fcfb:	6a 00                	push   0x0
c001fcfd:	6a 33                	push   0x33
c001fcff:	e9 a2 fe ff ff       	jmp    c001fba6 <int_common_stub>

c001fd04 <irq20>:
c001fd04:	fa                   	cli    
c001fd05:	6a 00                	push   0x0
c001fd07:	6a 34                	push   0x34
c001fd09:	e9 98 fe ff ff       	jmp    c001fba6 <int_common_stub>

c001fd0e <irq21>:
c001fd0e:	fa                   	cli    
c001fd0f:	6a 00                	push   0x0
c001fd11:	6a 35                	push   0x35
c001fd13:	e9 8e fe ff ff       	jmp    c001fba6 <int_common_stub>

c001fd18 <irq22>:
c001fd18:	fa                   	cli    
c001fd19:	6a 00                	push   0x0
c001fd1b:	6a 36                	push   0x36
c001fd1d:	e9 84 fe ff ff       	jmp    c001fba6 <int_common_stub>

c001fd22 <irq23>:
c001fd22:	fa                   	cli    
c001fd23:	6a 00                	push   0x0
c001fd25:	6a 37                	push   0x37
c001fd27:	e9 7a fe ff ff       	jmp    c001fba6 <int_common_stub>
c001fd2c:	66 90                	xchg   ax,ax
c001fd2e:	66 90                	xchg   ax,ax

c001fd30 <i386GetRDRAND>:
c001fd30:	b9 64 00 00 00       	mov    ecx,0x64

c001fd35 <retry>:
c001fd35:	0f c7 f0             	rdrand eax
c001fd38:	72 05                	jb     c001fd3f <retry.done>
c001fd3a:	e2 f9                	loop   c001fd35 <retry>

c001fd3c <retry.fail>:
c001fd3c:	31 c0                	xor    eax,eax
c001fd3e:	c3                   	ret    

c001fd3f <retry.done>:
c001fd3f:	c3                   	ret    

c001fd40 <sseDetect>:
c001fd40:	b8 01 00 00 00       	mov    eax,0x1
c001fd45:	0f a2                	cpuid  
c001fd47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001fd4d:	74 06                	je     c001fd55 <sseDetect.noSSE>
c001fd4f:	b8 01 00 00 00       	mov    eax,0x1
c001fd54:	c3                   	ret    

c001fd55 <sseDetect.noSSE>:
c001fd55:	31 c0                	xor    eax,eax
c001fd57:	c3                   	ret    

c001fd58 <sseSave>:
c001fd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd5c:	0f ae 00             	fxsave [eax]
c001fd5f:	c3                   	ret    

c001fd60 <sseLoad>:
c001fd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd64:	0f ae 08             	fxrstor [eax]
c001fd67:	c3                   	ret    

c001fd68 <sseInit>:
c001fd68:	e8 48 00 00 00       	call   c001fdb5 <x87Init>
c001fd6d:	0f 20 e0             	mov    eax,cr4
c001fd70:	66 0d 00 06          	or     ax,0x600
c001fd74:	0f 22 e0             	mov    cr4,eax
c001fd77:	c3                   	ret    

c001fd78 <sseClose>:
c001fd78:	c3                   	ret    
c001fd79:	66 90                	xchg   ax,ax
c001fd7b:	66 90                	xchg   ax,ax
c001fd7d:	66 90                	xchg   ax,ax
c001fd7f:	90                   	nop

c001fd80 <value_37F>:
c001fd80:	7f 03                	jg     c001fd85 <value_37A+0x1>

c001fd82 <value_37E>:
c001fd82:	7e 03                	jle    c001fd87 <x87Detect+0x1>

c001fd84 <value_37A>:
c001fd84:	7a 03                	jp     c001fd89 <x87Detect+0x3>

c001fd86 <x87Detect>:
c001fd86:	53                   	push   ebx
c001fd87:	51                   	push   ecx
c001fd88:	52                   	push   edx
c001fd89:	b8 01 00 00 00       	mov    eax,0x1
c001fd8e:	0f a2                	cpuid  
c001fd90:	f7 c2 01 00 00 00    	test   edx,0x1
c001fd96:	74 06                	je     c001fd9e <x87Detect.nox87>
c001fd98:	b8 01 00 00 00       	mov    eax,0x1
c001fd9d:	c3                   	ret    

c001fd9e <x87Detect.nox87>:
c001fd9e:	b8 00 00 00 00       	mov    eax,0x0
c001fda3:	5a                   	pop    edx
c001fda4:	59                   	pop    ecx
c001fda5:	5b                   	pop    ebx
c001fda6:	c3                   	ret    

c001fda7 <x87Save>:
c001fda7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdab:	dd 30                	fnsave [eax]
c001fdad:	c3                   	ret    

c001fdae <x87Load>:
c001fdae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb2:	dd 20                	frstor [eax]
c001fdb4:	c3                   	ret    

c001fdb5 <x87Init>:
c001fdb5:	0f 20 c0             	mov    eax,cr0
c001fdb8:	66 25 fb ff          	and    ax,0xfffb
c001fdbc:	66 0d 22 00          	or     ax,0x22
c001fdc0:	0f 22 c0             	mov    cr0,eax
c001fdc3:	db e3                	fninit 
c001fdc5:	0f 06                	clts   
c001fdc7:	d9 2d 84 fd 01 c0    	fldcw  WORD PTR ds:0xc001fd84
c001fdcd:	c3                   	ret    

c001fdce <x87Close>:
c001fdce:	c3                   	ret    
c001fdcf:	90                   	nop

c001fdd0 <__do_global_ctors_aux>:
c001fdd0:	a1 84 0d 02 c0       	mov    eax,ds:0xc0020d84
c001fdd5:	83 f8 ff             	cmp    eax,0xffffffff
c001fdd8:	74 1a                	je     c001fdf4 <__do_global_ctors_aux+0x24>
c001fdda:	55                   	push   ebp
c001fddb:	89 e5                	mov    ebp,esp
c001fddd:	53                   	push   ebx
c001fdde:	52                   	push   edx
c001fddf:	bb 84 0d 02 c0       	mov    ebx,0xc0020d84
c001fde4:	ff d0                	call   eax
c001fde6:	83 eb 04             	sub    ebx,0x4
c001fde9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fdeb:	83 f8 ff             	cmp    eax,0xffffffff
c001fdee:	75 f4                	jne    c001fde4 <__do_global_ctors_aux+0x14>
c001fdf0:	58                   	pop    eax
c001fdf1:	5b                   	pop    ebx
c001fdf2:	5d                   	pop    ebp
c001fdf3:	c3                   	ret    
c001fdf4:	c3                   	ret    
c001fdf5:	66 90                	xchg   ax,ax
c001fdf7:	90                   	nop

c001fdf8 <__divdi3>:
c001fdf8:	55                   	push   ebp
c001fdf9:	57                   	push   edi
c001fdfa:	56                   	push   esi
c001fdfb:	53                   	push   ebx
c001fdfc:	83 ec 1c             	sub    esp,0x1c
c001fdff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001fe03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe07:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fe0a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fe0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fe16:	85 db                	test   ebx,ebx
c001fe18:	0f 88 8e 00 00 00    	js     c001feac <__divdi3+0xb4>
c001fe1e:	89 dd                	mov    ebp,ebx
c001fe20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fe28:	89 d3                	mov    ebx,edx
c001fe2a:	85 d2                	test   edx,edx
c001fe2c:	79 0d                	jns    c001fe3b <__divdi3+0x43>
c001fe2e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001fe32:	f7 d8                	neg    eax
c001fe34:	83 d2 00             	adc    edx,0x0
c001fe37:	f7 da                	neg    edx
c001fe39:	89 d3                	mov    ebx,edx
c001fe3b:	89 c7                	mov    edi,eax
c001fe3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fe40:	85 db                	test   ebx,ebx
c001fe42:	75 48                	jne    c001fe8c <__divdi3+0x94>
c001fe44:	39 ef                	cmp    edi,ebp
c001fe46:	76 24                	jbe    c001fe6c <__divdi3+0x74>
c001fe48:	89 ea                	mov    edx,ebp
c001fe4a:	f7 f7                	div    edi
c001fe4c:	89 c1                	mov    ecx,eax
c001fe4e:	31 f6                	xor    esi,esi
c001fe50:	89 c8                	mov    eax,ecx
c001fe52:	89 f2                	mov    edx,esi
c001fe54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe58:	85 c9                	test   ecx,ecx
c001fe5a:	74 07                	je     c001fe63 <__divdi3+0x6b>
c001fe5c:	f7 d8                	neg    eax
c001fe5e:	83 d2 00             	adc    edx,0x0
c001fe61:	f7 da                	neg    edx
c001fe63:	83 c4 1c             	add    esp,0x1c
c001fe66:	5b                   	pop    ebx
c001fe67:	5e                   	pop    esi
c001fe68:	5f                   	pop    edi
c001fe69:	5d                   	pop    ebp
c001fe6a:	c3                   	ret    
c001fe6b:	90                   	nop
c001fe6c:	85 ff                	test   edi,edi
c001fe6e:	75 0b                	jne    c001fe7b <__divdi3+0x83>
c001fe70:	b8 01 00 00 00       	mov    eax,0x1
c001fe75:	31 d2                	xor    edx,edx
c001fe77:	f7 f3                	div    ebx
c001fe79:	89 c7                	mov    edi,eax
c001fe7b:	31 d2                	xor    edx,edx
c001fe7d:	89 e8                	mov    eax,ebp
c001fe7f:	f7 f7                	div    edi
c001fe81:	89 c6                	mov    esi,eax
c001fe83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fe86:	f7 f7                	div    edi
c001fe88:	89 c1                	mov    ecx,eax
c001fe8a:	eb c4                	jmp    c001fe50 <__divdi3+0x58>
c001fe8c:	39 eb                	cmp    ebx,ebp
c001fe8e:	77 3c                	ja     c001fecc <__divdi3+0xd4>
c001fe90:	0f bd f3             	bsr    esi,ebx
c001fe93:	83 f6 1f             	xor    esi,0x1f
c001fe96:	75 40                	jne    c001fed8 <__divdi3+0xe0>
c001fe98:	39 eb                	cmp    ebx,ebp
c001fe9a:	72 09                	jb     c001fea5 <__divdi3+0xad>
c001fe9c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fe9f:	0f 87 97 00 00 00    	ja     c001ff3c <__divdi3+0x144>
c001fea5:	b9 01 00 00 00       	mov    ecx,0x1
c001feaa:	eb a4                	jmp    c001fe50 <__divdi3+0x58>
c001feac:	f7 d9                	neg    ecx
c001feae:	83 d3 00             	adc    ebx,0x0
c001feb1:	f7 db                	neg    ebx
c001feb3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001feb6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001feba:	89 dd                	mov    ebp,ebx
c001febc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001fec4:	e9 5f ff ff ff       	jmp    c001fe28 <__divdi3+0x30>
c001fec9:	8d 76 00             	lea    esi,[esi+0x0]
c001fecc:	31 f6                	xor    esi,esi
c001fece:	31 c9                	xor    ecx,ecx
c001fed0:	e9 7b ff ff ff       	jmp    c001fe50 <__divdi3+0x58>
c001fed5:	8d 76 00             	lea    esi,[esi+0x0]
c001fed8:	b8 20 00 00 00       	mov    eax,0x20
c001fedd:	29 f0                	sub    eax,esi
c001fedf:	89 f1                	mov    ecx,esi
c001fee1:	d3 e3                	shl    ebx,cl
c001fee3:	89 fa                	mov    edx,edi
c001fee5:	88 c1                	mov    cl,al
c001fee7:	d3 ea                	shr    edx,cl
c001fee9:	09 da                	or     edx,ebx
c001feeb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001feef:	89 f1                	mov    ecx,esi
c001fef1:	d3 e7                	shl    edi,cl
c001fef3:	89 eb                	mov    ebx,ebp
c001fef5:	88 c1                	mov    cl,al
c001fef7:	d3 eb                	shr    ebx,cl
c001fef9:	89 f1                	mov    ecx,esi
c001fefb:	d3 e5                	shl    ebp,cl
c001fefd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ff00:	88 c1                	mov    cl,al
c001ff02:	d3 ea                	shr    edx,cl
c001ff04:	09 d5                	or     ebp,edx
c001ff06:	89 e8                	mov    eax,ebp
c001ff08:	89 da                	mov    edx,ebx
c001ff0a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ff0e:	89 d3                	mov    ebx,edx
c001ff10:	89 c5                	mov    ebp,eax
c001ff12:	f7 e7                	mul    edi
c001ff14:	39 d3                	cmp    ebx,edx
c001ff16:	72 18                	jb     c001ff30 <__divdi3+0x138>
c001ff18:	74 0a                	je     c001ff24 <__divdi3+0x12c>
c001ff1a:	89 e9                	mov    ecx,ebp
c001ff1c:	31 f6                	xor    esi,esi
c001ff1e:	e9 2d ff ff ff       	jmp    c001fe50 <__divdi3+0x58>
c001ff23:	90                   	nop
c001ff24:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ff27:	89 f1                	mov    ecx,esi
c001ff29:	d3 e7                	shl    edi,cl
c001ff2b:	39 c7                	cmp    edi,eax
c001ff2d:	73 eb                	jae    c001ff1a <__divdi3+0x122>
c001ff2f:	90                   	nop
c001ff30:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ff33:	31 f6                	xor    esi,esi
c001ff35:	e9 16 ff ff ff       	jmp    c001fe50 <__divdi3+0x58>
c001ff3a:	66 90                	xchg   ax,ax
c001ff3c:	31 c9                	xor    ecx,ecx
c001ff3e:	e9 0d ff ff ff       	jmp    c001fe50 <__divdi3+0x58>
c001ff43:	90                   	nop

c001ff44 <__moddi3>:
c001ff44:	55                   	push   ebp
c001ff45:	57                   	push   edi
c001ff46:	56                   	push   esi
c001ff47:	53                   	push   ebx
c001ff48:	83 ec 2c             	sub    esp,0x2c
c001ff4b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ff4f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ff53:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ff57:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ff5b:	85 db                	test   ebx,ebx
c001ff5d:	0f 88 85 00 00 00    	js     c001ffe8 <__moddi3+0xa4>
c001ff63:	89 de                	mov    esi,ebx
c001ff65:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ff6d:	89 d7                	mov    edi,edx
c001ff6f:	85 d2                	test   edx,edx
c001ff71:	79 09                	jns    c001ff7c <__moddi3+0x38>
c001ff73:	f7 d8                	neg    eax
c001ff75:	83 d2 00             	adc    edx,0x0
c001ff78:	f7 da                	neg    edx
c001ff7a:	89 d7                	mov    edi,edx
c001ff7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff80:	89 cd                	mov    ebp,ecx
c001ff82:	85 ff                	test   edi,edi
c001ff84:	75 52                	jne    c001ffd8 <__moddi3+0x94>
c001ff86:	89 c3                	mov    ebx,eax
c001ff88:	39 f0                	cmp    eax,esi
c001ff8a:	76 24                	jbe    c001ffb0 <__moddi3+0x6c>
c001ff8c:	89 c8                	mov    eax,ecx
c001ff8e:	89 f2                	mov    edx,esi
c001ff90:	f7 f3                	div    ebx
c001ff92:	89 d6                	mov    esi,edx
c001ff94:	89 f0                	mov    eax,esi
c001ff96:	31 d2                	xor    edx,edx
c001ff98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff9c:	85 c9                	test   ecx,ecx
c001ff9e:	74 07                	je     c001ffa7 <__moddi3+0x63>
c001ffa0:	f7 d8                	neg    eax
c001ffa2:	83 d2 00             	adc    edx,0x0
c001ffa5:	f7 da                	neg    edx
c001ffa7:	83 c4 2c             	add    esp,0x2c
c001ffaa:	5b                   	pop    ebx
c001ffab:	5e                   	pop    esi
c001ffac:	5f                   	pop    edi
c001ffad:	5d                   	pop    ebp
c001ffae:	c3                   	ret    
c001ffaf:	90                   	nop
c001ffb0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ffb4:	85 db                	test   ebx,ebx
c001ffb6:	75 0d                	jne    c001ffc5 <__moddi3+0x81>
c001ffb8:	b8 01 00 00 00       	mov    eax,0x1
c001ffbd:	31 d2                	xor    edx,edx
c001ffbf:	f7 f7                	div    edi
c001ffc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffc5:	89 f0                	mov    eax,esi
c001ffc7:	31 d2                	xor    edx,edx
c001ffc9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ffcd:	f7 f7                	div    edi
c001ffcf:	89 e8                	mov    eax,ebp
c001ffd1:	f7 f7                	div    edi
c001ffd3:	89 d6                	mov    esi,edx
c001ffd5:	eb bd                	jmp    c001ff94 <__moddi3+0x50>
c001ffd7:	90                   	nop
c001ffd8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ffdc:	39 f7                	cmp    edi,esi
c001ffde:	76 20                	jbe    c0020000 <__moddi3+0xbc>
c001ffe0:	89 c8                	mov    eax,ecx
c001ffe2:	89 f2                	mov    edx,esi
c001ffe4:	eb b2                	jmp    c001ff98 <__moddi3+0x54>
c001ffe6:	66 90                	xchg   ax,ax
c001ffe8:	f7 d9                	neg    ecx
c001ffea:	83 d3 00             	adc    ebx,0x0
c001ffed:	f7 db                	neg    ebx
c001ffef:	89 de                	mov    esi,ebx
c001fff1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001fff9:	e9 6f ff ff ff       	jmp    c001ff6d <__moddi3+0x29>
c001fffe:	66 90                	xchg   ax,ax
c0020000:	0f bd c7             	bsr    eax,edi
c0020003:	83 f0 1f             	xor    eax,0x1f
c0020006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002000a:	75 24                	jne    c0020030 <__moddi3+0xec>
c002000c:	39 f7                	cmp    edi,esi
c002000e:	72 06                	jb     c0020016 <__moddi3+0xd2>
c0020010:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020014:	77 0c                	ja     c0020022 <__moddi3+0xde>
c0020016:	89 e9                	mov    ecx,ebp
c0020018:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002001c:	19 fe                	sbb    esi,edi
c002001e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020022:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020026:	89 f2                	mov    edx,esi
c0020028:	e9 6b ff ff ff       	jmp    c001ff98 <__moddi3+0x54>
c002002d:	8d 76 00             	lea    esi,[esi+0x0]
c0020030:	b8 20 00 00 00       	mov    eax,0x20
c0020035:	89 c2                	mov    edx,eax
c0020037:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002003b:	29 da                	sub    edx,ebx
c002003d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020041:	88 d9                	mov    cl,bl
c0020043:	d3 e7                	shl    edi,cl
c0020045:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020049:	88 d1                	mov    cl,dl
c002004b:	d3 e8                	shr    eax,cl
c002004d:	09 c7                	or     edi,eax
c002004f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020053:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020057:	89 d8                	mov    eax,ebx
c0020059:	88 d9                	mov    cl,bl
c002005b:	d3 e7                	shl    edi,cl
c002005d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020061:	89 f3                	mov    ebx,esi
c0020063:	88 d1                	mov    cl,dl
c0020065:	d3 eb                	shr    ebx,cl
c0020067:	89 c7                	mov    edi,eax
c0020069:	88 c1                	mov    cl,al
c002006b:	d3 e6                	shl    esi,cl
c002006d:	89 e8                	mov    eax,ebp
c002006f:	88 d1                	mov    cl,dl
c0020071:	d3 e8                	shr    eax,cl
c0020073:	09 f0                	or     eax,esi
c0020075:	89 f9                	mov    ecx,edi
c0020077:	d3 e5                	shl    ebp,cl
c0020079:	89 da                	mov    edx,ebx
c002007b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002007f:	89 d3                	mov    ebx,edx
c0020081:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020085:	89 c6                	mov    esi,eax
c0020087:	89 d1                	mov    ecx,edx
c0020089:	39 d3                	cmp    ebx,edx
c002008b:	72 27                	jb     c00200b4 <__moddi3+0x170>
c002008d:	74 21                	je     c00200b0 <__moddi3+0x16c>
c002008f:	29 f5                	sub    ebp,esi
c0020091:	19 cb                	sbb    ebx,ecx
c0020093:	89 de                	mov    esi,ebx
c0020095:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020099:	d3 e6                	shl    esi,cl
c002009b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002009f:	89 f9                	mov    ecx,edi
c00200a1:	d3 ed                	shr    ebp,cl
c00200a3:	09 ee                	or     esi,ebp
c00200a5:	89 f0                	mov    eax,esi
c00200a7:	d3 eb                	shr    ebx,cl
c00200a9:	89 da                	mov    edx,ebx
c00200ab:	e9 e8 fe ff ff       	jmp    c001ff98 <__moddi3+0x54>
c00200b0:	39 c5                	cmp    ebp,eax
c00200b2:	73 db                	jae    c002008f <__moddi3+0x14b>
c00200b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00200b8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00200bc:	89 d1                	mov    ecx,edx
c00200be:	89 c6                	mov    esi,eax
c00200c0:	eb cd                	jmp    c002008f <__moddi3+0x14b>
c00200c2:	66 90                	xchg   ax,ax

c00200c4 <__udivdi3>:
c00200c4:	55                   	push   ebp
c00200c5:	57                   	push   edi
c00200c6:	56                   	push   esi
c00200c7:	53                   	push   ebx
c00200c8:	83 ec 1c             	sub    esp,0x1c
c00200cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00200cf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00200d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00200d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00200db:	85 d2                	test   edx,edx
c00200dd:	75 41                	jne    c0020120 <__udivdi3+0x5c>
c00200df:	39 f7                	cmp    edi,esi
c00200e1:	76 15                	jbe    c00200f8 <__udivdi3+0x34>
c00200e3:	89 e8                	mov    eax,ebp
c00200e5:	89 f2                	mov    edx,esi
c00200e7:	f7 f7                	div    edi
c00200e9:	31 db                	xor    ebx,ebx
c00200eb:	89 da                	mov    edx,ebx
c00200ed:	83 c4 1c             	add    esp,0x1c
c00200f0:	5b                   	pop    ebx
c00200f1:	5e                   	pop    esi
c00200f2:	5f                   	pop    edi
c00200f3:	5d                   	pop    ebp
c00200f4:	c3                   	ret    
c00200f5:	8d 76 00             	lea    esi,[esi+0x0]
c00200f8:	89 f9                	mov    ecx,edi
c00200fa:	85 ff                	test   edi,edi
c00200fc:	75 0b                	jne    c0020109 <__udivdi3+0x45>
c00200fe:	b8 01 00 00 00       	mov    eax,0x1
c0020103:	31 d2                	xor    edx,edx
c0020105:	f7 f7                	div    edi
c0020107:	89 c1                	mov    ecx,eax
c0020109:	31 d2                	xor    edx,edx
c002010b:	89 f0                	mov    eax,esi
c002010d:	f7 f1                	div    ecx
c002010f:	89 c3                	mov    ebx,eax
c0020111:	89 e8                	mov    eax,ebp
c0020113:	f7 f1                	div    ecx
c0020115:	89 da                	mov    edx,ebx
c0020117:	83 c4 1c             	add    esp,0x1c
c002011a:	5b                   	pop    ebx
c002011b:	5e                   	pop    esi
c002011c:	5f                   	pop    edi
c002011d:	5d                   	pop    ebp
c002011e:	c3                   	ret    
c002011f:	90                   	nop
c0020120:	39 f2                	cmp    edx,esi
c0020122:	77 1c                	ja     c0020140 <__udivdi3+0x7c>
c0020124:	0f bd da             	bsr    ebx,edx
c0020127:	83 f3 1f             	xor    ebx,0x1f
c002012a:	75 24                	jne    c0020150 <__udivdi3+0x8c>
c002012c:	39 f2                	cmp    edx,esi
c002012e:	72 08                	jb     c0020138 <__udivdi3+0x74>
c0020130:	39 ef                	cmp    edi,ebp
c0020132:	0f 87 84 00 00 00    	ja     c00201bc <__udivdi3+0xf8>
c0020138:	b8 01 00 00 00       	mov    eax,0x1
c002013d:	eb ac                	jmp    c00200eb <__udivdi3+0x27>
c002013f:	90                   	nop
c0020140:	31 db                	xor    ebx,ebx
c0020142:	31 c0                	xor    eax,eax
c0020144:	89 da                	mov    edx,ebx
c0020146:	83 c4 1c             	add    esp,0x1c
c0020149:	5b                   	pop    ebx
c002014a:	5e                   	pop    esi
c002014b:	5f                   	pop    edi
c002014c:	5d                   	pop    ebp
c002014d:	c3                   	ret    
c002014e:	66 90                	xchg   ax,ax
c0020150:	b8 20 00 00 00       	mov    eax,0x20
c0020155:	29 d8                	sub    eax,ebx
c0020157:	88 d9                	mov    cl,bl
c0020159:	d3 e2                	shl    edx,cl
c002015b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002015f:	89 fa                	mov    edx,edi
c0020161:	88 c1                	mov    cl,al
c0020163:	d3 ea                	shr    edx,cl
c0020165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020169:	09 d1                	or     ecx,edx
c002016b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002016f:	88 d9                	mov    cl,bl
c0020171:	d3 e7                	shl    edi,cl
c0020173:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020177:	89 f7                	mov    edi,esi
c0020179:	88 c1                	mov    cl,al
c002017b:	d3 ef                	shr    edi,cl
c002017d:	88 d9                	mov    cl,bl
c002017f:	d3 e6                	shl    esi,cl
c0020181:	89 ea                	mov    edx,ebp
c0020183:	88 c1                	mov    cl,al
c0020185:	d3 ea                	shr    edx,cl
c0020187:	09 d6                	or     esi,edx
c0020189:	89 f0                	mov    eax,esi
c002018b:	89 fa                	mov    edx,edi
c002018d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020191:	89 d7                	mov    edi,edx
c0020193:	89 c6                	mov    esi,eax
c0020195:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020199:	39 d7                	cmp    edi,edx
c002019b:	72 13                	jb     c00201b0 <__udivdi3+0xec>
c002019d:	74 09                	je     c00201a8 <__udivdi3+0xe4>
c002019f:	89 f0                	mov    eax,esi
c00201a1:	31 db                	xor    ebx,ebx
c00201a3:	e9 43 ff ff ff       	jmp    c00200eb <__udivdi3+0x27>
c00201a8:	88 d9                	mov    cl,bl
c00201aa:	d3 e5                	shl    ebp,cl
c00201ac:	39 c5                	cmp    ebp,eax
c00201ae:	73 ef                	jae    c002019f <__udivdi3+0xdb>
c00201b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00201b3:	31 db                	xor    ebx,ebx
c00201b5:	e9 31 ff ff ff       	jmp    c00200eb <__udivdi3+0x27>
c00201ba:	66 90                	xchg   ax,ax
c00201bc:	31 c0                	xor    eax,eax
c00201be:	e9 28 ff ff ff       	jmp    c00200eb <__udivdi3+0x27>
c00201c3:	90                   	nop

c00201c4 <__umoddi3>:
c00201c4:	55                   	push   ebp
c00201c5:	57                   	push   edi
c00201c6:	56                   	push   esi
c00201c7:	53                   	push   ebx
c00201c8:	83 ec 1c             	sub    esp,0x1c
c00201cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00201cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00201d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00201d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00201db:	89 da                	mov    edx,ebx
c00201dd:	85 c0                	test   eax,eax
c00201df:	75 37                	jne    c0020218 <__umoddi3+0x54>
c00201e1:	39 df                	cmp    edi,ebx
c00201e3:	76 13                	jbe    c00201f8 <__umoddi3+0x34>
c00201e5:	89 f0                	mov    eax,esi
c00201e7:	f7 f7                	div    edi
c00201e9:	89 d0                	mov    eax,edx
c00201eb:	31 d2                	xor    edx,edx
c00201ed:	83 c4 1c             	add    esp,0x1c
c00201f0:	5b                   	pop    ebx
c00201f1:	5e                   	pop    esi
c00201f2:	5f                   	pop    edi
c00201f3:	5d                   	pop    ebp
c00201f4:	c3                   	ret    
c00201f5:	8d 76 00             	lea    esi,[esi+0x0]
c00201f8:	89 fd                	mov    ebp,edi
c00201fa:	85 ff                	test   edi,edi
c00201fc:	75 0b                	jne    c0020209 <__umoddi3+0x45>
c00201fe:	b8 01 00 00 00       	mov    eax,0x1
c0020203:	31 d2                	xor    edx,edx
c0020205:	f7 f7                	div    edi
c0020207:	89 c5                	mov    ebp,eax
c0020209:	89 d8                	mov    eax,ebx
c002020b:	31 d2                	xor    edx,edx
c002020d:	f7 f5                	div    ebp
c002020f:	89 f0                	mov    eax,esi
c0020211:	f7 f5                	div    ebp
c0020213:	89 d0                	mov    eax,edx
c0020215:	eb d4                	jmp    c00201eb <__umoddi3+0x27>
c0020217:	90                   	nop
c0020218:	89 f1                	mov    ecx,esi
c002021a:	39 d8                	cmp    eax,ebx
c002021c:	76 0a                	jbe    c0020228 <__umoddi3+0x64>
c002021e:	89 f0                	mov    eax,esi
c0020220:	83 c4 1c             	add    esp,0x1c
c0020223:	5b                   	pop    ebx
c0020224:	5e                   	pop    esi
c0020225:	5f                   	pop    edi
c0020226:	5d                   	pop    ebp
c0020227:	c3                   	ret    
c0020228:	0f bd e8             	bsr    ebp,eax
c002022b:	83 f5 1f             	xor    ebp,0x1f
c002022e:	75 1c                	jne    c002024c <__umoddi3+0x88>
c0020230:	39 d8                	cmp    eax,ebx
c0020232:	72 04                	jb     c0020238 <__umoddi3+0x74>
c0020234:	39 f7                	cmp    edi,esi
c0020236:	77 08                	ja     c0020240 <__umoddi3+0x7c>
c0020238:	89 da                	mov    edx,ebx
c002023a:	29 fe                	sub    esi,edi
c002023c:	19 c2                	sbb    edx,eax
c002023e:	89 f1                	mov    ecx,esi
c0020240:	89 c8                	mov    eax,ecx
c0020242:	83 c4 1c             	add    esp,0x1c
c0020245:	5b                   	pop    ebx
c0020246:	5e                   	pop    esi
c0020247:	5f                   	pop    edi
c0020248:	5d                   	pop    ebp
c0020249:	c3                   	ret    
c002024a:	66 90                	xchg   ax,ax
c002024c:	ba 20 00 00 00       	mov    edx,0x20
c0020251:	29 ea                	sub    edx,ebp
c0020253:	89 e9                	mov    ecx,ebp
c0020255:	d3 e0                	shl    eax,cl
c0020257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002025b:	89 f8                	mov    eax,edi
c002025d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020261:	88 d1                	mov    cl,dl
c0020263:	d3 e8                	shr    eax,cl
c0020265:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020269:	09 c1                	or     ecx,eax
c002026b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002026f:	89 e9                	mov    ecx,ebp
c0020271:	d3 e7                	shl    edi,cl
c0020273:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020277:	89 d8                	mov    eax,ebx
c0020279:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002027d:	88 d1                	mov    cl,dl
c002027f:	d3 e8                	shr    eax,cl
c0020281:	89 c7                	mov    edi,eax
c0020283:	89 e9                	mov    ecx,ebp
c0020285:	d3 e3                	shl    ebx,cl
c0020287:	89 f0                	mov    eax,esi
c0020289:	88 d1                	mov    cl,dl
c002028b:	d3 e8                	shr    eax,cl
c002028d:	09 d8                	or     eax,ebx
c002028f:	89 e9                	mov    ecx,ebp
c0020291:	d3 e6                	shl    esi,cl
c0020293:	89 f3                	mov    ebx,esi
c0020295:	89 fa                	mov    edx,edi
c0020297:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002029b:	89 d1                	mov    ecx,edx
c002029d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00202a1:	89 c6                	mov    esi,eax
c00202a3:	89 d7                	mov    edi,edx
c00202a5:	39 d1                	cmp    ecx,edx
c00202a7:	72 27                	jb     c00202d0 <__umoddi3+0x10c>
c00202a9:	74 21                	je     c00202cc <__umoddi3+0x108>
c00202ab:	89 ca                	mov    edx,ecx
c00202ad:	29 f3                	sub    ebx,esi
c00202af:	19 fa                	sbb    edx,edi
c00202b1:	89 d0                	mov    eax,edx
c00202b3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00202b7:	d3 e0                	shl    eax,cl
c00202b9:	89 e9                	mov    ecx,ebp
c00202bb:	d3 eb                	shr    ebx,cl
c00202bd:	09 d8                	or     eax,ebx
c00202bf:	d3 ea                	shr    edx,cl
c00202c1:	83 c4 1c             	add    esp,0x1c
c00202c4:	5b                   	pop    ebx
c00202c5:	5e                   	pop    esi
c00202c6:	5f                   	pop    edi
c00202c7:	5d                   	pop    ebp
c00202c8:	c3                   	ret    
c00202c9:	8d 76 00             	lea    esi,[esi+0x0]
c00202cc:	39 c3                	cmp    ebx,eax
c00202ce:	73 db                	jae    c00202ab <__umoddi3+0xe7>
c00202d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00202d4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00202d8:	89 d7                	mov    edi,edx
c00202da:	89 c6                	mov    esi,eax
c00202dc:	eb cd                	jmp    c00202ab <__umoddi3+0xe7>

Disassembly of section .init:

c00202de <_init>:
c00202de:	55                   	push   ebp
c00202df:	89 e5                	mov    ebp,esp
c00202e1:	e8 0e fe fd ff       	call   c00000f4 <frame_dummy>
c00202e6:	e8 e5 fa ff ff       	call   c001fdd0 <__do_global_ctors_aux>
c00202eb:	5d                   	pop    ebp
c00202ec:	c3                   	ret    

Disassembly of section .fini:

c00202ed <_fini>:
c00202ed:	55                   	push   ebp
c00202ee:	89 e5                	mov    ebp,esp
c00202f0:	e8 8f fd fd ff       	call   c0000084 <__do_global_dtors_aux>
c00202f5:	5d                   	pop    ebp
c00202f6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00202f8 <DriverlessDevice::~DriverlessDevice()>:
c00202f8:	ba 80 1c 02 c0       	mov    edx,0xc0021c80
c00202fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020301:	89 10                	mov    DWORD PTR [eax],edx
c0020303:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020307:	50                   	push   eax
c0020308:	e8 5b 8c fe ff       	call   c0008f68 <Device::~Device()>
c002030d:	83 c4 04             	add    esp,0x4
c0020310:	90                   	nop
c0020311:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0020312 <DriverlessDevice::~DriverlessDevice()>:
c0020312:	83 ec 0c             	sub    esp,0xc
c0020315:	83 ec 0c             	sub    esp,0xc
c0020318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031c:	e8 d7 ff ff ff       	call   c00202f8 <DriverlessDevice::~DriverlessDevice()>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	83 ec 08             	sub    esp,0x8
c0020327:	68 58 01 00 00       	push   0x158
c002032c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020330:	e8 76 c3 fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020335:	83 c4 10             	add    esp,0x10
c0020338:	83 c4 0c             	add    esp,0xc
c002033b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002033c <LinkedList<Device>::addElement(Device*)>:
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020344:	75 10                	jne    c0020356 <LinkedList<Device>::addElement(Device*)+0x1a>
c0020346:	83 ec 0c             	sub    esp,0xc
c0020349:	68 14 1c 02 c0       	push   0xc0021c14
c002034e:	e8 93 e9 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020353:	83 c4 10             	add    esp,0x10
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	8b 00                	mov    eax,DWORD PTR [eax]
c002035c:	85 c0                	test   eax,eax
c002035e:	74 3a                	je     c002039a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020364:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020367:	85 c0                	test   eax,eax
c0020369:	74 2f                	je     c002039a <LinkedList<Device>::addElement(Device*)+0x5e>
c002036b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002036f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020372:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020376:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002037c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002038e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020398:	eb 68                	jmp    c0020402 <LinkedList<Device>::addElement(Device*)+0xc6>
c002039a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002039e:	8b 00                	mov    eax,DWORD PTR [eax]
c00203a0:	85 c0                	test   eax,eax
c00203a2:	75 4e                	jne    c00203f2 <LinkedList<Device>::addElement(Device*)+0xb6>
c00203a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00203ab:	85 c0                	test   eax,eax
c00203ad:	75 43                	jne    c00203f2 <LinkedList<Device>::addElement(Device*)+0xb6>
c00203af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00203b7:	89 10                	mov    DWORD PTR [eax],edx
c00203b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00203c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00203c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00203cb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00203d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203dc:	85 c0                	test   eax,eax
c00203de:	74 22                	je     c0020402 <LinkedList<Device>::addElement(Device*)+0xc6>
c00203e0:	83 ec 0c             	sub    esp,0xc
c00203e3:	68 36 1c 02 c0       	push   0xc0021c36
c00203e8:	e8 f9 e8 fe ff       	call   c000ece6 <KePanic(char const*)>
c00203ed:	83 c4 10             	add    esp,0x10
c00203f0:	eb 10                	jmp    c0020402 <LinkedList<Device>::addElement(Device*)+0xc6>
c00203f2:	83 ec 0c             	sub    esp,0xc
c00203f5:	68 40 1c 02 c0       	push   0xc0021c40
c00203fa:	e8 e7 e8 fe ff       	call   c000ece6 <KePanic(char const*)>
c00203ff:	83 c4 10             	add    esp,0x10
c0020402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020406:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020409:	8d 50 01             	lea    edx,[eax+0x1]
c002040c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020410:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020413:	90                   	nop
c0020414:	83 c4 0c             	add    esp,0xc
c0020417:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020418 <LinkedList<Device>::LinkedList()>:
c0020418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002041c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020426:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002042d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020431:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002043c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020446:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002044d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020451:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020458:	90                   	nop
c0020459:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002045c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002045c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020460:	8b 00                	mov    eax,DWORD PTR [eax]
c0020462:	85 c0                	test   eax,eax
c0020464:	75 0e                	jne    c0020474 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002046a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002046d:	85 c0                	test   eax,eax
c002046f:	75 03                	jne    c0020474 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020471:	b0 01                	mov    al,0x1
c0020473:	c3                   	ret    
c0020474:	b0 00                	mov    al,0x0
c0020476:	90                   	nop
c0020477:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020478 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002047c:	8b 00                	mov    eax,DWORD PTR [eax]
c002047e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020480 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020480:	83 ec 0c             	sub    esp,0xc
c0020483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020487:	8b 00                	mov    eax,DWORD PTR [eax]
c0020489:	85 c0                	test   eax,eax
c002048b:	75 17                	jne    c00204a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002048d:	83 ec 0c             	sub    esp,0xc
c0020490:	68 b0 1e 02 c0       	push   0xc0021eb0
c0020495:	e8 4c e8 fe ff       	call   c000ece6 <KePanic(char const*)>
c002049a:	83 c4 10             	add    esp,0x10
c002049d:	e9 96 00 00 00       	jmp    c0020538 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00204a2:	66 90                	xchg   ax,ax
c00204a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00204ae:	85 c0                	test   eax,eax
c00204b0:	0f 95 c0             	setne  al
c00204b3:	0f b6 c0             	movzx  eax,al
c00204b6:	85 c0                	test   eax,eax
c00204b8:	74 12                	je     c00204cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00204ba:	83 ec 0c             	sub    esp,0xc
c00204bd:	68 fb 1e 02 c0       	push   0xc0021efb
c00204c2:	e8 1f e8 fe ff       	call   c000ece6 <KePanic(char const*)>
c00204c7:	83 c4 10             	add    esp,0x10
c00204ca:	66 90                	xchg   ax,ax
c00204cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00204d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00204d5:	85 c0                	test   eax,eax
c00204d7:	0f 94 c0             	sete   al
c00204da:	0f b6 c0             	movzx  eax,al
c00204dd:	85 c0                	test   eax,eax
c00204df:	74 33                	je     c0020514 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00204e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00204eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00204f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204fd:	83 f8 01             	cmp    eax,0x1
c0020500:	74 22                	je     c0020524 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020502:	83 ec 0c             	sub    esp,0xc
c0020505:	68 d4 1e 02 c0       	push   0xc0021ed4
c002050a:	e8 d7 e7 fe ff       	call   c000ece6 <KePanic(char const*)>
c002050f:	83 c4 10             	add    esp,0x10
c0020512:	eb 10                	jmp    c0020524 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020518:	8b 00                	mov    eax,DWORD PTR [eax]
c002051a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002051d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020521:	89 10                	mov    DWORD PTR [eax],edx
c0020523:	90                   	nop
c0020524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020528:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002052b:	8d 50 ff             	lea    edx,[eax-0x1]
c002052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020532:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020535:	8d 76 00             	lea    esi,[esi+0x0]
c0020538:	83 c4 0c             	add    esp,0xc
c002053b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002053c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002053c:	83 ec 0c             	sub    esp,0xc
c002053f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020544:	75 12                	jne    c0020558 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0020546:	83 ec 0c             	sub    esp,0xc
c0020549:	68 14 1c 02 c0       	push   0xc0021c14
c002054e:	e8 93 e7 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020553:	83 c4 10             	add    esp,0x10
c0020556:	66 90                	xchg   ax,ax
c0020558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002055c:	8b 00                	mov    eax,DWORD PTR [eax]
c002055e:	85 c0                	test   eax,eax
c0020560:	74 36                	je     c0020598 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020569:	85 c0                	test   eax,eax
c002056b:	74 2b                	je     c0020598 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002056d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020571:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020574:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020578:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002057b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002057f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020583:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002058a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002058d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020594:	eb 6a                	jmp    c0020600 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020596:	66 90                	xchg   ax,ax
c0020598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059c:	8b 00                	mov    eax,DWORD PTR [eax]
c002059e:	85 c0                	test   eax,eax
c00205a0:	75 4e                	jne    c00205f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00205a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205a9:	85 c0                	test   eax,eax
c00205ab:	75 43                	jne    c00205f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00205ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00205b5:	89 10                	mov    DWORD PTR [eax],edx
c00205b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00205bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00205c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00205d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205d7:	85 c0                	test   eax,eax
c00205d9:	74 25                	je     c0020600 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00205db:	83 ec 0c             	sub    esp,0xc
c00205de:	68 36 1c 02 c0       	push   0xc0021c36
c00205e3:	e8 fe e6 fe ff       	call   c000ece6 <KePanic(char const*)>
c00205e8:	83 c4 10             	add    esp,0x10
c00205eb:	eb 13                	jmp    c0020600 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00205ed:	8d 76 00             	lea    esi,[esi+0x0]
c00205f0:	83 ec 0c             	sub    esp,0xc
c00205f3:	68 40 1c 02 c0       	push   0xc0021c40
c00205f8:	e8 e9 e6 fe ff       	call   c000ece6 <KePanic(char const*)>
c00205fd:	83 c4 10             	add    esp,0x10
c0020600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020607:	8d 50 01             	lea    edx,[eax+0x1]
c002060a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002060e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020611:	90                   	nop
c0020612:	83 c4 0c             	add    esp,0xc
c0020615:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020618 <ACPI::~ACPI()>:
c0020618:	83 ec 0c             	sub    esp,0xc
c002061b:	ba 58 23 02 c0       	mov    edx,0xc0022358
c0020620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020624:	89 10                	mov    DWORD PTR [eax],edx
c0020626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002062a:	83 ec 0c             	sub    esp,0xc
c002062d:	50                   	push   eax
c002062e:	e8 35 89 fe ff       	call   c0008f68 <Device::~Device()>
c0020633:	83 c4 10             	add    esp,0x10
c0020636:	90                   	nop
c0020637:	83 c4 0c             	add    esp,0xc
c002063a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002063c <ACPI::~ACPI()>:
c002063c:	83 ec 0c             	sub    esp,0xc
c002063f:	83 ec 0c             	sub    esp,0xc
c0020642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020646:	e8 cd ff ff ff       	call   c0020618 <ACPI::~ACPI()>
c002064b:	83 c4 10             	add    esp,0x10
c002064e:	83 ec 08             	sub    esp,0x8
c0020651:	68 64 12 00 00       	push   0x1264
c0020656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002065a:	e8 4c c0 fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c002065f:	83 c4 10             	add    esp,0x10
c0020662:	83 c4 0c             	add    esp,0xc
c0020665:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020668 <LinkedList<Device>::~LinkedList()>:
c0020668:	90                   	nop
c0020669:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002066c <LinkedList<Device>::isEmpty()>:
c002066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020670:	8b 00                	mov    eax,DWORD PTR [eax]
c0020672:	85 c0                	test   eax,eax
c0020674:	75 0e                	jne    c0020684 <LinkedList<Device>::isEmpty()+0x18>
c0020676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002067a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002067d:	85 c0                	test   eax,eax
c002067f:	75 03                	jne    c0020684 <LinkedList<Device>::isEmpty()+0x18>
c0020681:	b0 01                	mov    al,0x1
c0020683:	c3                   	ret    
c0020684:	b0 00                	mov    al,0x0
c0020686:	90                   	nop
c0020687:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020688 <LinkedList<Device>::getFirstElement()>:
c0020688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002068c:	8b 00                	mov    eax,DWORD PTR [eax]
c002068e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020690 <LinkedList<Device>::removeFirst()>:
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020697:	8b 00                	mov    eax,DWORD PTR [eax]
c0020699:	85 c0                	test   eax,eax
c002069b:	75 17                	jne    c00206b4 <LinkedList<Device>::removeFirst()+0x24>
c002069d:	83 ec 0c             	sub    esp,0xc
c00206a0:	68 b0 1e 02 c0       	push   0xc0021eb0
c00206a5:	e8 3c e6 fe ff       	call   c000ece6 <KePanic(char const*)>
c00206aa:	83 c4 10             	add    esp,0x10
c00206ad:	e9 92 00 00 00       	jmp    c0020744 <LinkedList<Device>::removeFirst()+0xb4>
c00206b2:	66 90                	xchg   ax,ax
c00206b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00206bb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00206c1:	85 c0                	test   eax,eax
c00206c3:	74 13                	je     c00206d8 <LinkedList<Device>::removeFirst()+0x48>
c00206c5:	83 ec 0c             	sub    esp,0xc
c00206c8:	68 fb 1e 02 c0       	push   0xc0021efb
c00206cd:	e8 14 e6 fe ff       	call   c000ece6 <KePanic(char const*)>
c00206d2:	83 c4 10             	add    esp,0x10
c00206d5:	8d 76 00             	lea    esi,[esi+0x0]
c00206d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00206de:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00206e4:	85 c0                	test   eax,eax
c00206e6:	75 34                	jne    c002071c <LinkedList<Device>::removeFirst()+0x8c>
c00206e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00206f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00206fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020701:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020704:	83 f8 01             	cmp    eax,0x1
c0020707:	74 27                	je     c0020730 <LinkedList<Device>::removeFirst()+0xa0>
c0020709:	83 ec 0c             	sub    esp,0xc
c002070c:	68 d4 1e 02 c0       	push   0xc0021ed4
c0020711:	e8 d0 e5 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020716:	83 c4 10             	add    esp,0x10
c0020719:	eb 15                	jmp    c0020730 <LinkedList<Device>::removeFirst()+0xa0>
c002071b:	90                   	nop
c002071c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020720:	8b 00                	mov    eax,DWORD PTR [eax]
c0020722:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002072c:	89 10                	mov    DWORD PTR [eax],edx
c002072e:	66 90                	xchg   ax,ax
c0020730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020734:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020737:	8d 50 ff             	lea    edx,[eax-0x1]
c002073a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002073e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020741:	8d 76 00             	lea    esi,[esi+0x0]
c0020744:	83 c4 0c             	add    esp,0xc
c0020747:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020748 <Computer::~Computer()>:
c0020748:	83 ec 0c             	sub    esp,0xc
c002074b:	ba f8 25 02 c0       	mov    edx,0xc00225f8
c0020750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020754:	89 10                	mov    DWORD PTR [eax],edx
c0020756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002075a:	83 ec 0c             	sub    esp,0xc
c002075d:	50                   	push   eax
c002075e:	e8 05 88 fe ff       	call   c0008f68 <Device::~Device()>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	90                   	nop
c0020767:	83 c4 0c             	add    esp,0xc
c002076a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002076c <Computer::~Computer()>:
c002076c:	83 ec 0c             	sub    esp,0xc
c002076f:	83 ec 0c             	sub    esp,0xc
c0020772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020776:	e8 cd ff ff ff       	call   c0020748 <Computer::~Computer()>
c002077b:	83 c4 10             	add    esp,0x10
c002077e:	83 ec 08             	sub    esp,0x8
c0020781:	68 6c 01 00 00       	push   0x16c
c0020786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002078a:	e8 1c bf fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	83 c4 0c             	add    esp,0xc
c0020795:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020796 <idleCommon()>:
c0020796:	83 ec 0c             	sub    esp,0xc
c0020799:	fa                   	cli    
c002079a:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00207a0:	e8 8b 4f ff ff       	call   c0015730 <schedule()>
c00207a5:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00207ac:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00207b3:	75 01                	jne    c00207b6 <idleCommon()+0x20>
c00207b5:	fb                   	sti    
c00207b6:	83 c4 0c             	add    esp,0xc
c00207b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00207ba <LinkedList<UnixFile>::~LinkedList()>:
c00207ba:	90                   	nop
c00207bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00207bc <LinkedList<UnixFile>::LinkedList()>:
c00207bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00207c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00207d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00207dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00207e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00207f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00207fc:	90                   	nop
c00207fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00207fe <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00207fe:	83 ec 0c             	sub    esp,0xc
c0020801:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020806:	75 10                	jne    c0020818 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020808:	83 ec 0c             	sub    esp,0xc
c002080b:	68 14 1c 02 c0       	push   0xc0021c14
c0020810:	e8 d1 e4 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020815:	83 c4 10             	add    esp,0x10
c0020818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002081c:	8b 00                	mov    eax,DWORD PTR [eax]
c002081e:	85 c0                	test   eax,eax
c0020820:	74 34                	je     c0020856 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020829:	85 c0                	test   eax,eax
c002082b:	74 29                	je     c0020856 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002082d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020831:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020834:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020838:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002083b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002083f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020843:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002084a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002084d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020854:	eb 65                	jmp    c00208bb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002085a:	8b 00                	mov    eax,DWORD PTR [eax]
c002085c:	85 c0                	test   eax,eax
c002085e:	75 4b                	jne    c00208ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020864:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020867:	85 c0                	test   eax,eax
c0020869:	75 40                	jne    c00208ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002086b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002086f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020873:	89 10                	mov    DWORD PTR [eax],edx
c0020875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020879:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002087d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020887:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002088e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020892:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020895:	85 c0                	test   eax,eax
c0020897:	74 22                	je     c00208bb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020899:	83 ec 0c             	sub    esp,0xc
c002089c:	68 36 1c 02 c0       	push   0xc0021c36
c00208a1:	e8 40 e4 fe ff       	call   c000ece6 <KePanic(char const*)>
c00208a6:	83 c4 10             	add    esp,0x10
c00208a9:	eb 10                	jmp    c00208bb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00208ab:	83 ec 0c             	sub    esp,0xc
c00208ae:	68 40 1c 02 c0       	push   0xc0021c40
c00208b3:	e8 2e e4 fe ff       	call   c000ece6 <KePanic(char const*)>
c00208b8:	83 c4 10             	add    esp,0x10
c00208bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208c2:	8d 50 01             	lea    edx,[eax+0x1]
c00208c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208cc:	90                   	nop
c00208cd:	83 c4 0c             	add    esp,0xc
c00208d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00208d2 <LinkedList<UnixFile>::getFirstElement()>:
c00208d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00208d8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00208da <LinkedList<UnixFile>::removeFirst()>:
c00208da:	83 ec 0c             	sub    esp,0xc
c00208dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00208e3:	85 c0                	test   eax,eax
c00208e5:	75 12                	jne    c00208f9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00208e7:	83 ec 0c             	sub    esp,0xc
c00208ea:	68 b0 1e 02 c0       	push   0xc0021eb0
c00208ef:	e8 f2 e3 fe ff       	call   c000ece6 <KePanic(char const*)>
c00208f4:	83 c4 10             	add    esp,0x10
c00208f7:	eb 7e                	jmp    c0020977 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00208f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020900:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020903:	85 c0                	test   eax,eax
c0020905:	74 10                	je     c0020917 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020907:	83 ec 0c             	sub    esp,0xc
c002090a:	68 fb 1e 02 c0       	push   0xc0021efb
c002090f:	e8 d2 e3 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020914:	83 c4 10             	add    esp,0x10
c0020917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002091b:	8b 00                	mov    eax,DWORD PTR [eax]
c002091d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020920:	85 c0                	test   eax,eax
c0020922:	75 33                	jne    c0020957 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020928:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020932:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002093d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020940:	83 f8 01             	cmp    eax,0x1
c0020943:	74 21                	je     c0020966 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020945:	83 ec 0c             	sub    esp,0xc
c0020948:	68 d4 1e 02 c0       	push   0xc0021ed4
c002094d:	e8 94 e3 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020952:	83 c4 10             	add    esp,0x10
c0020955:	eb 0f                	jmp    c0020966 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002095b:	8b 00                	mov    eax,DWORD PTR [eax]
c002095d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020964:	89 10                	mov    DWORD PTR [eax],edx
c0020966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002096a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002096d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020974:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020977:	83 c4 0c             	add    esp,0xc
c002097a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002097c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002097c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020980:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020983:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020984 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020984:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020988:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002098b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002098c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002098c:	90                   	nop
c002098d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020990 <ThreadControlBlock::ThreadControlBlock()>:
c0020990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020994:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002099b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002099f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00209a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209aa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00209b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209b5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00209bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209c0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00209c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209cb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00209cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209d3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00209d7:	90                   	nop
c00209d8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00209dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00209dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00209e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00209f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00209fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020a06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a15:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020a1c:	90                   	nop
c0020a1d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0020a1e <CPU::~CPU()>:
c0020a1e:	83 ec 0c             	sub    esp,0xc
c0020a21:	ba 6c 3c 02 c0       	mov    edx,0xc0023c6c
c0020a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a2a:	89 10                	mov    DWORD PTR [eax],edx
c0020a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a30:	83 ec 0c             	sub    esp,0xc
c0020a33:	50                   	push   eax
c0020a34:	e8 2f 85 fe ff       	call   c0008f68 <Device::~Device()>
c0020a39:	83 c4 10             	add    esp,0x10
c0020a3c:	90                   	nop
c0020a3d:	83 c4 0c             	add    esp,0xc
c0020a40:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020a42 <CPU::~CPU()>:
c0020a42:	83 ec 0c             	sub    esp,0xc
c0020a45:	83 ec 0c             	sub    esp,0xc
c0020a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a4c:	e8 cd ff ff ff       	call   c0020a1e <CPU::~CPU()>
c0020a51:	83 c4 10             	add    esp,0x10
c0020a54:	83 ec 08             	sub    esp,0x8
c0020a57:	68 78 11 00 00       	push   0x1178
c0020a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a60:	e8 46 bc fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020a65:	83 c4 10             	add    esp,0x10
c0020a68:	83 c4 0c             	add    esp,0xc
c0020a6b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020a6c <PCI::~PCI()>:
c0020a6c:	83 ec 0c             	sub    esp,0xc
c0020a6f:	ba d0 41 02 c0       	mov    edx,0xc00241d0
c0020a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a78:	89 10                	mov    DWORD PTR [eax],edx
c0020a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a7e:	83 ec 0c             	sub    esp,0xc
c0020a81:	50                   	push   eax
c0020a82:	e8 b9 7e fe ff       	call   c0008940 <Bus::~Bus()>
c0020a87:	83 c4 10             	add    esp,0x10
c0020a8a:	90                   	nop
c0020a8b:	83 c4 0c             	add    esp,0xc
c0020a8e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020a90 <PCI::~PCI()>:
c0020a90:	83 ec 0c             	sub    esp,0xc
c0020a93:	83 ec 0c             	sub    esp,0xc
c0020a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a9a:	e8 cd ff ff ff       	call   c0020a6c <PCI::~PCI()>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	83 ec 08             	sub    esp,0x8
c0020aa5:	68 5c 01 00 00       	push   0x15c
c0020aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aae:	e8 f8 bb fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020ab3:	83 c4 10             	add    esp,0x10
c0020ab6:	83 c4 0c             	add    esp,0xc
c0020ab9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020aba <IDE::~IDE()>:
c0020aba:	83 ec 0c             	sub    esp,0xc
c0020abd:	ba 20 43 02 c0       	mov    edx,0xc0024320
c0020ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac6:	89 10                	mov    DWORD PTR [eax],edx
c0020ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020acc:	83 ec 0c             	sub    esp,0xc
c0020acf:	50                   	push   eax
c0020ad0:	e8 23 89 fe ff       	call   c00093f8 <HardDiskController::~HardDiskController()>
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	90                   	nop
c0020ad9:	83 c4 0c             	add    esp,0xc
c0020adc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020ade <IDE::~IDE()>:
c0020ade:	83 ec 0c             	sub    esp,0xc
c0020ae1:	83 ec 0c             	sub    esp,0xc
c0020ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ae8:	e8 cd ff ff ff       	call   c0020aba <IDE::~IDE()>
c0020aed:	83 c4 10             	add    esp,0x10
c0020af0:	83 ec 08             	sub    esp,0x8
c0020af3:	68 70 02 00 00       	push   0x270
c0020af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020afc:	e8 aa bb fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020b01:	83 c4 10             	add    esp,0x10
c0020b04:	83 c4 0c             	add    esp,0xc
c0020b07:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020b08 <SATABus::~SATABus()>:
c0020b08:	83 ec 0c             	sub    esp,0xc
c0020b0b:	ba 70 43 02 c0       	mov    edx,0xc0024370
c0020b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b14:	89 10                	mov    DWORD PTR [eax],edx
c0020b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1a:	83 ec 0c             	sub    esp,0xc
c0020b1d:	50                   	push   eax
c0020b1e:	e8 d5 88 fe ff       	call   c00093f8 <HardDiskController::~HardDiskController()>
c0020b23:	83 c4 10             	add    esp,0x10
c0020b26:	90                   	nop
c0020b27:	83 c4 0c             	add    esp,0xc
c0020b2a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020b2c <SATABus::~SATABus()>:
c0020b2c:	83 ec 0c             	sub    esp,0xc
c0020b2f:	83 ec 0c             	sub    esp,0xc
c0020b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b36:	e8 cd ff ff ff       	call   c0020b08 <SATABus::~SATABus()>
c0020b3b:	83 c4 10             	add    esp,0x10
c0020b3e:	83 ec 08             	sub    esp,0x8
c0020b41:	68 64 01 00 00       	push   0x164
c0020b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b4a:	e8 5c bb fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020b4f:	83 c4 10             	add    esp,0x10
c0020b52:	83 c4 0c             	add    esp,0xc
c0020b55:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020b56 <ATA::~ATA()>:
c0020b56:	83 ec 0c             	sub    esp,0xc
c0020b59:	ba 58 44 02 c0       	mov    edx,0xc0024458
c0020b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b62:	89 10                	mov    DWORD PTR [eax],edx
c0020b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b68:	83 ec 0c             	sub    esp,0xc
c0020b6b:	50                   	push   eax
c0020b6c:	e8 69 89 fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020b71:	83 c4 10             	add    esp,0x10
c0020b74:	90                   	nop
c0020b75:	83 c4 0c             	add    esp,0xc
c0020b78:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020b7a <ATA::~ATA()>:
c0020b7a:	83 ec 0c             	sub    esp,0xc
c0020b7d:	83 ec 0c             	sub    esp,0xc
c0020b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b84:	e8 cd ff ff ff       	call   c0020b56 <ATA::~ATA()>
c0020b89:	83 c4 10             	add    esp,0x10
c0020b8c:	83 ec 08             	sub    esp,0x8
c0020b8f:	68 8c 01 00 00       	push   0x18c
c0020b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b98:	e8 0e bb fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020b9d:	83 c4 10             	add    esp,0x10
c0020ba0:	83 c4 0c             	add    esp,0xc
c0020ba3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020ba4 <ATAPI::~ATAPI()>:
c0020ba4:	83 ec 0c             	sub    esp,0xc
c0020ba7:	ba a0 44 02 c0       	mov    edx,0xc00244a0
c0020bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb0:	89 10                	mov    DWORD PTR [eax],edx
c0020bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb6:	83 ec 0c             	sub    esp,0xc
c0020bb9:	50                   	push   eax
c0020bba:	e8 1b 89 fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020bbf:	83 c4 10             	add    esp,0x10
c0020bc2:	90                   	nop
c0020bc3:	83 c4 0c             	add    esp,0xc
c0020bc6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020bc8 <ATAPI::~ATAPI()>:
c0020bc8:	83 ec 0c             	sub    esp,0xc
c0020bcb:	83 ec 0c             	sub    esp,0xc
c0020bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bd2:	e8 cd ff ff ff       	call   c0020ba4 <ATAPI::~ATAPI()>
c0020bd7:	83 c4 10             	add    esp,0x10
c0020bda:	83 ec 08             	sub    esp,0x8
c0020bdd:	68 84 01 00 00       	push   0x184
c0020be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020be6:	e8 c0 ba fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020beb:	83 c4 10             	add    esp,0x10
c0020bee:	83 c4 0c             	add    esp,0xc
c0020bf1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020bf2 <SATA::~SATA()>:
c0020bf2:	83 ec 0c             	sub    esp,0xc
c0020bf5:	ba 60 45 02 c0       	mov    edx,0xc0024560
c0020bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bfe:	89 10                	mov    DWORD PTR [eax],edx
c0020c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c04:	83 ec 0c             	sub    esp,0xc
c0020c07:	50                   	push   eax
c0020c08:	e8 cd 88 fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020c0d:	83 c4 10             	add    esp,0x10
c0020c10:	90                   	nop
c0020c11:	83 c4 0c             	add    esp,0xc
c0020c14:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020c16 <SATA::~SATA()>:
c0020c16:	83 ec 0c             	sub    esp,0xc
c0020c19:	83 ec 0c             	sub    esp,0xc
c0020c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c20:	e8 cd ff ff ff       	call   c0020bf2 <SATA::~SATA()>
c0020c25:	83 c4 10             	add    esp,0x10
c0020c28:	83 ec 08             	sub    esp,0x8
c0020c2b:	68 7c 01 00 00       	push   0x17c
c0020c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c34:	e8 72 ba fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020c39:	83 c4 10             	add    esp,0x10
c0020c3c:	83 c4 0c             	add    esp,0xc
c0020c3f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020c40 <SATAPI::~SATAPI()>:
c0020c40:	83 ec 0c             	sub    esp,0xc
c0020c43:	ba 84 46 02 c0       	mov    edx,0xc0024684
c0020c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c4c:	89 10                	mov    DWORD PTR [eax],edx
c0020c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c52:	83 ec 0c             	sub    esp,0xc
c0020c55:	50                   	push   eax
c0020c56:	e8 7f 88 fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020c5b:	83 c4 10             	add    esp,0x10
c0020c5e:	90                   	nop
c0020c5f:	83 c4 0c             	add    esp,0xc
c0020c62:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020c64 <SATAPI::~SATAPI()>:
c0020c64:	83 ec 0c             	sub    esp,0xc
c0020c67:	83 ec 0c             	sub    esp,0xc
c0020c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c6e:	e8 cd ff ff ff       	call   c0020c40 <SATAPI::~SATAPI()>
c0020c73:	83 c4 10             	add    esp,0x10
c0020c76:	83 ec 08             	sub    esp,0x8
c0020c79:	68 84 01 00 00       	push   0x184
c0020c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c82:	e8 24 ba fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020c87:	83 c4 10             	add    esp,0x10
c0020c8a:	83 c4 0c             	add    esp,0xc
c0020c8d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020c8e <IOAPIC::~IOAPIC()>:
c0020c8e:	83 ec 0c             	sub    esp,0xc
c0020c91:	ba e4 46 02 c0       	mov    edx,0xc00246e4
c0020c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c9a:	89 10                	mov    DWORD PTR [eax],edx
c0020c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ca0:	83 ec 0c             	sub    esp,0xc
c0020ca3:	50                   	push   eax
c0020ca4:	e8 bf 82 fe ff       	call   c0008f68 <Device::~Device()>
c0020ca9:	83 c4 10             	add    esp,0x10
c0020cac:	90                   	nop
c0020cad:	83 c4 0c             	add    esp,0xc
c0020cb0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020cb2 <IOAPIC::~IOAPIC()>:
c0020cb2:	83 ec 0c             	sub    esp,0xc
c0020cb5:	83 ec 0c             	sub    esp,0xc
c0020cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cbc:	e8 cd ff ff ff       	call   c0020c8e <IOAPIC::~IOAPIC()>
c0020cc1:	83 c4 10             	add    esp,0x10
c0020cc4:	83 ec 08             	sub    esp,0x8
c0020cc7:	68 68 01 00 00       	push   0x168
c0020ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cd0:	e8 d6 b9 fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020cd5:	83 c4 10             	add    esp,0x10
c0020cd8:	83 c4 0c             	add    esp,0xc
c0020cdb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020cdc <APICTimer::~APICTimer()>:
c0020cdc:	83 ec 0c             	sub    esp,0xc
c0020cdf:	ba 2c 47 02 c0       	mov    edx,0xc002472c
c0020ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ce8:	89 10                	mov    DWORD PTR [eax],edx
c0020cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cee:	83 ec 0c             	sub    esp,0xc
c0020cf1:	50                   	push   eax
c0020cf2:	e8 b1 99 fe ff       	call   c000a6a8 <Timer::~Timer()>
c0020cf7:	83 c4 10             	add    esp,0x10
c0020cfa:	90                   	nop
c0020cfb:	83 c4 0c             	add    esp,0xc
c0020cfe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020d00 <APICTimer::~APICTimer()>:
c0020d00:	83 ec 0c             	sub    esp,0xc
c0020d03:	83 ec 0c             	sub    esp,0xc
c0020d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d0a:	e8 cd ff ff ff       	call   c0020cdc <APICTimer::~APICTimer()>
c0020d0f:	83 c4 10             	add    esp,0x10
c0020d12:	83 ec 08             	sub    esp,0x8
c0020d15:	68 60 01 00 00       	push   0x160
c0020d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d1e:	e8 88 b9 fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020d23:	83 c4 10             	add    esp,0x10
c0020d26:	83 c4 0c             	add    esp,0xc
c0020d29:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020d2c <PIT::~PIT()>:
c0020d2c:	83 ec 0c             	sub    esp,0xc
c0020d2f:	ba 7c 47 02 c0       	mov    edx,0xc002477c
c0020d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d38:	89 10                	mov    DWORD PTR [eax],edx
c0020d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d3e:	83 ec 0c             	sub    esp,0xc
c0020d41:	50                   	push   eax
c0020d42:	e8 61 99 fe ff       	call   c000a6a8 <Timer::~Timer()>
c0020d47:	83 c4 10             	add    esp,0x10
c0020d4a:	90                   	nop
c0020d4b:	83 c4 0c             	add    esp,0xc
c0020d4e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020d50 <PIT::~PIT()>:
c0020d50:	83 ec 0c             	sub    esp,0xc
c0020d53:	83 ec 0c             	sub    esp,0xc
c0020d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d5a:	e8 cd ff ff ff       	call   c0020d2c <PIT::~PIT()>
c0020d5f:	83 c4 10             	add    esp,0x10
c0020d62:	83 ec 08             	sub    esp,0x8
c0020d65:	68 5c 01 00 00       	push   0x15c
c0020d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d6e:	e8 38 b9 fe ff       	call   c000c6ab <operator delete(void*, unsigned long)>
c0020d73:	83 c4 10             	add    esp,0x10
c0020d76:	83 c4 0c             	add    esp,0xc
c0020d79:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be 1f 2a 02 c0       	mov    esi,0xc0022a1f
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 3b 2a 02 c0       	mov    esi,0xc0022a3b
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
