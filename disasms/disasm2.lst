
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bf ea 00 00       	call   c000eadf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 50 02 c0       	mov    eax,0xc0025008
c0000025:	3d 08 50 02 c0       	cmp    eax,0xc0025008
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 50 02 c0       	push   0xc0025008
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 50 02 c0       	mov    eax,0xc0025008
c0000051:	2d 08 50 02 c0       	sub    eax,0xc0025008
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 50 02 c0       	push   0xc0025008
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb a0 0c 02 c0       	mov    ebx,0xc0020ca0
c0000097:	81 eb 9c 0c 02 c0    	sub    ebx,0xc0020c9c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 9c 0c 02 c0       	mov    esi,0xc0020c9c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 50 02 c0       	push   0xc0025008
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 08 50 02 c0       	push   0xc0025008
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cf 4b 01 00       	call   c0014e7c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 20 2f 01 00       	call   c00131e5 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ad 4b 01 00       	call   c0014e7c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ba 50 01 00       	call   c00153a8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 6d 55 01 00       	call   c0015864 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 72 e3 00 00       	jmp    c000e6f1 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 c0 0c 02 c0 02 	test   BYTE PTR [edx-0x3ffdf340],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 c0 0c 02 c0 01 	test   BYTE PTR [edx-0x3ffdf340],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 c0 0c 02 c0 08 	test   BYTE PTR [edx-0x3ffdf340],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 c0 0c 02 c0 08 	test   BYTE PTR [edx-0x3ffdf340],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 c0 0c 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf340],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 c0 0c 02 c0 01 	test   BYTE PTR [edx-0x3ffdf340],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000e2a:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e8e:	e8 9b d9 00 00       	call   c000e82e <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 a8 d8 00 00       	call   c000e7d0 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 83 d7 00 00       	call   c000e79a <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 7e d7 00 00       	call   c000e7d0 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 74 d6 00 00       	call   c000e79a <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 8f d5 00 00       	call   c000e79a <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 79 d5 00 00       	call   c000e79a <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c0001313:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000136a:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c00013b3:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013ce:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c0001488:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c000148e:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001495:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000155b:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001561:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c0001568:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 71 02 c0       	mov    edx,0xc0027100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c00016b6:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 c4 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf23c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 fd 84 01 00       	jmp    c001a4b8 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 27 85 01 00       	jmp    c001a4f8 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 48 85 01 00       	jmp    c001a538 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 20 0f 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf0e0]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 20 0f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf0e0]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba b0 3b 02 c0       	mov    edx,0xc0023bb0
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba dc 0d 02 c0       	mov    edx,0xc0020ddc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 e2 0d 02 c0       	mov    eax,0xc0020de2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf a0 0e 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf160]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 eb 0d 02 c0       	mov    eax,0xc0020deb
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 20 0f 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf0e0]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 70 0e 02 c0       	mov    eax,0xc0020e70
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 60 0e 02 c0       	mov    ebx,0xc0020e60
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 40 0e 02 c0       	mov    eax,0xc0020e40
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 50 0e 02 c0       	mov    eax,0xc0020e50
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba f2 0d 02 c0       	mov    edx,0xc0020df2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba fe 0d 02 c0       	mov    edx,0xc0020dfe
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 12 0e 02 c0       	mov    edx,0xc0020e12
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 6d 8a 00 00       	call   c000e8b0 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 65 8a 00 00       	call   c000e8c0 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 40 12 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021240
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 40 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021240
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 40 10 02 c0       	mov    eax,0xc0021040
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 80 0f 02 c0       	mov    eax,0xc0020f80
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 40 0f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf0c0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 40 13 02 c0       	push   0xc0021340
c0006327:	e8 30 4b 01 00       	call   c001ae5c <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 4e 13 02 c0       	push   0xc002134e
c000635f:	e8 f8 4a 01 00       	call   c001ae5c <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 61 4a 01 00       	call   c001ae00 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 70 02 c0       	mov    eax,0xc0027080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 70 02 c0       	mov    eax,0xc0027020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 5d 13 02 c0       	push   0xc002135d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c000675b:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006765:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c000677d:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067f6:	8b 9d 4c 75 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd8ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c000688d:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068ef:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c000692c:	05 40 75 02 c0       	add    eax,0xc0027540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069ec:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 60 13 02 c0       	push   0xc0021360
c0006a0f:	e8 48 44 01 00       	call   c001ae5c <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 56 44 01 00       	call   c001ae78 <iso_kprintfd>
c0006a22:	c7 04 24 65 13 02 c0 	mov    DWORD PTR [esp],0xc0021365
c0006a29:	e8 2e 44 01 00       	call   c001ae5c <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a35:	e8 3e 44 01 00       	call   c001ae78 <iso_kprintfd>
c0006a3a:	c7 04 24 6b 13 02 c0 	mov    DWORD PTR [esp],0xc002136b
c0006a41:	e8 16 44 01 00       	call   c001ae5c <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a4d:	e8 26 44 01 00       	call   c001ae78 <iso_kprintfd>
c0006a52:	c7 04 24 71 13 02 c0 	mov    DWORD PTR [esp],0xc0021371
c0006a59:	e8 fe 43 01 00       	call   c001ae5c <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a65:	e8 0e 44 01 00       	call   c001ae78 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006acb:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 75 02 c0    	lea    ebp,[edi-0x3ffd8aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 75 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd8aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 5d 13 02 c0       	push   0xc002135d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006c0a:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006c10:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 75 02 c0    	lea    eax,[edi-0x3ffd8ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 7a 13 02 c0       	push   0xc002137a
c0006c32:	e8 25 42 01 00       	call   c001ae5c <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c67:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 85 13 02 c0       	push   0xc0021385
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 8c 13 02 c0       	push   0xc002138c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006d05:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d28:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 93 13 02 c0       	push   0xc0021393
c0006d49:	e8 0e 41 01 00       	call   c001ae5c <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 9e 13 02 c0       	push   0xc002139e
c0006d64:	e8 f3 40 01 00       	call   c001ae5c <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 75 02 c0       	push   0xc0027540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 1d 7b 00 00       	call   c000e8b0 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d9f:	e8 0c 7b 00 00       	call   c000e8b0 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 f7 7a 00 00       	call   c000e8b0 <malloc>
c0006db9:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 de 7a 00 00       	call   c000e8b0 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006dff:	e8 bc 7a 00 00       	call   c000e8c0 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 ae 7a 00 00       	call   c000e8c0 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 94 7a 00 00       	call   c000e8c0 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 7f 7a 00 00       	call   c000e8c0 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 b0 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec50]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 00 15 02 c0       	push   0xc0021500
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 14 15 02 c0       	push   0xc0021514
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 1e 15 02 c0       	push   0xc002151e
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 28 15 02 c0       	push   0xc0021528
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 6c 16 02 c0       	push   0xc002166c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 32 15 02 c0       	push   0xc0021532
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 8c 16 02 c0       	push   0xc002168c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 47 15 02 c0       	push   0xc0021547
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 61 15 02 c0       	push   0xc0021561
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 c0 45 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba40]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 b4 16 02 c0       	push   0xc00216b4
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 6c 16 02 c0       	push   0xc002166c
c00071bc:	e8 35 7a 00 00       	call   c000ebf6 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 fc 16 02 c0       	push   0xc00216fc
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 fc 16 02 c0       	push   0xc00216fc
c00071eb:	e8 06 7a 00 00       	call   c000ebf6 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 6c 15 02 c0       	push   0xc002156c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 6c 15 02 c0       	push   0xc002156c
c0007217:	e8 da 79 00 00       	call   c000ebf6 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 89 15 02 c0       	push   0xc0021589
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 89 15 02 c0       	push   0xc0021589
c0007243:	e8 ae 79 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 1c 17 02 c0       	push   0xc002171c
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 1c 17 02 c0       	push   0xc002171c
c000726f:	e8 82 79 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 40 17 02 c0       	push   0xc0021740
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 40 17 02 c0       	push   0xc0021740
c000729b:	e8 56 79 00 00       	call   c000ebf6 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 a5 15 02 c0       	push   0xc00215a5
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 a5 15 02 c0       	push   0xc00215a5
c00072c7:	e8 2a 79 00 00       	call   c000ebf6 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 c1 15 02 c0       	push   0xc00215c1
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 c1 15 02 c0       	push   0xc00215c1
c00072f3:	e8 fe 78 00 00       	call   c000ebf6 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 60 17 02 c0       	push   0xc0021760
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 60 17 02 c0       	push   0xc0021760
c000731f:	e8 d2 78 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 84 17 02 c0       	push   0xc0021784
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 84 17 02 c0       	push   0xc0021784
c000734b:	e8 a6 78 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 fe 74 00 00       	call   c000e8b0 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00073bb:	68 a3 17 02 c0       	push   0xc00217a3
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 c1 17 02 c0       	push   0xc00217c1
c00073d7:	e8 1a 78 00 00       	call   c000ebf6 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 db 17 02 c0       	push   0xc00217db
c00073f8:	e8 f9 77 00 00       	call   c000ebf6 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 f5 17 02 c0       	push   0xc00217f5
c000743f:	e8 b2 77 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 0f 18 02 c0       	push   0xc002180f
c000746f:	e8 82 77 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 e4 61 00 00       	call   c000d6a5 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 09 81 00 00       	call   c000f5e4 <KeRand()>
c00074db:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 29 18 02 c0       	push   0xc0021829
c0007510:	e8 e1 76 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c000755b:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 83 02 c0       	push   0xc0028300
c00075d0:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075da:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 9e 4e 00 00       	call   c000c495 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 ad 72 00 00       	call   c000e8b0 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000760c:	68 a3 17 02 c0       	push   0xc00217a3
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 32 18 02 c0       	push   0xc0021832
c0007628:	e8 c9 75 00 00       	call   c000ebf6 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 4f 18 02 c0       	push   0xc002184f
c0007659:	e8 98 75 00 00       	call   c000ebf6 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 6c 18 02 c0       	push   0xc002186c
c0007693:	e8 5e 75 00 00       	call   c000ebf6 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007776:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 1e 71 00 00       	call   c000e8b0 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000779b:	68 a3 17 02 c0       	push   0xc00217a3
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 87 18 02 c0       	push   0xc0021887
c00077b7:	e8 3a 74 00 00       	call   c000ebf6 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 a2 18 02 c0       	push   0xc00218a2
c00077ea:	e8 07 74 00 00       	call   c000ebf6 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 f7 6f 00 00       	call   c000e8b0 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 6d 6e 00 00       	call   c000e8b0 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be bd 18 02 c0       	mov    esi,0xc00218bd
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 75 a0 00 00       	call   c0011d4a <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 1a 49 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 27 a0 00 00       	call   c0011d4a <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 cc 48 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 28 19 02 c0       	mov    edx,0xc0021928
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 28 19 02 c0       	mov    edx,0xc0021928
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 76 48 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 d0 6a 00 00       	call   c000e8b0 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 70 28 01 00       	call   c001a658 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 bc 6a 00 00       	call   c000e8b0 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 8a 37 01 00       	call   c001b586 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 52 34 02 c0       	push   0xc0023452
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 c6 18 02 c0       	push   0xc00218c6
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 e1 18 02 c0       	push   0xc00218e1
c0008018:	e8 d9 6b 00 00       	call   c000ebf6 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 1c 9b 00 00       	call   c0011b64 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 07 19 02 c0       	push   0xc0021907
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 d6 1e 00 00       	call   c0009ffa <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 d1 1a 00 00       	call   c0009ffa <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 3e 63 00 00       	call   c000e8b0 <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 46 95 00 00       	call   c0011b64 <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 2e 19 00 00       	call   c0009ffa <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 ac 08 00 00       	call   c00091c8 <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 0d 06 00 00       	call   c0008f68 <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 94 3c 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000899c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	83 ec 0c             	sub    esp,0xc
c00089ac:	50                   	push   eax
c00089ad:	e8 8e ce 00 00       	call   c0015840 <milliTenthSleep(unsigned int)>
c00089b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089b9:	e8 e3 fe 00 00       	call   c00188a1 <HalMakeBeep(int)>
c00089be:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c6:	83 c4 1c             	add    esp,0x1c
c00089c9:	e9 3a cd 00 00       	jmp    c0015708 <blockTask(TaskState)>

c00089ce <KeBeep(int, int, bool)>:
c00089ce:	56                   	push   esi
c00089cf:	53                   	push   ebx
c00089d0:	83 ec 10             	sub    esp,0x10
c00089d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089df:	e8 bd fe 00 00       	call   c00188a1 <HalMakeBeep(int)>
c00089e4:	89 f0                	mov    eax,esi
c00089e6:	83 c4 10             	add    esp,0x10
c00089e9:	84 c0                	test   al,al
c00089eb:	74 1e                	je     c0008a0b <KeBeep(int, int, bool)+0x3d>
c00089ed:	6b db 0a             	imul   ebx,ebx,0xa
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 47 ce 00 00       	call   c0015840 <milliTenthSleep(unsigned int)>
c00089f9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	e9 96 fe 00 00       	jmp    c00188a1 <HalMakeBeep(int)>
c0008a0b:	68 e6 00 00 00       	push   0xe6
c0008a10:	53                   	push   ebx
c0008a11:	68 8e 89 00 c0       	push   0xc000898e
c0008a16:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0008a1c:	e8 db c9 00 00       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c0008a21:	83 c4 14             	add    esp,0x14
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	c3                   	ret    
c0008a27:	90                   	nop

c0008a28 <KeLoadClockSettings()>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a31:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a36:	68 f0 19 02 c0       	push   0xc00219f0
c0008a3b:	e8 30 3c 00 00       	call   c000c670 <CmOpen(char const*)>
c0008a40:	59                   	pop    ecx
c0008a41:	5e                   	pop    esi
c0008a42:	89 c3                	mov    ebx,eax
c0008a44:	68 15 1a 02 c0       	push   0xc0021a15
c0008a49:	50                   	push   eax
c0008a4a:	e8 1c 48 00 00       	call   c000d26b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a4f:	5f                   	pop    edi
c0008a50:	5a                   	pop    edx
c0008a51:	89 c6                	mov    esi,eax
c0008a53:	50                   	push   eax
c0008a54:	68 2a 1a 02 c0       	push   0xc0021a2a
c0008a59:	e8 f0 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	85 f6                	test   esi,esi
c0008a63:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a67:	7e 0c                	jle    c0008a75 <KeLoadClockSettings()+0x4d>
c0008a69:	52                   	push   edx
c0008a6a:	57                   	push   edi
c0008a6b:	56                   	push   esi
c0008a6c:	53                   	push   ebx
c0008a6d:	e8 6e 3d 00 00       	call   c000c7e0 <CmGetString(Reghive_Tag*, int, char*)>
c0008a72:	83 c4 10             	add    esp,0x10
c0008a75:	83 ec 0c             	sub    esp,0xc
c0008a78:	53                   	push   ebx
c0008a79:	e8 10 3d 00 00       	call   c000c78e <CmClose(Reghive_Tag*)>
c0008a7e:	83 c4 0c             	add    esp,0xc
c0008a81:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a86:	50                   	push   eax
c0008a87:	57                   	push   edi
c0008a88:	68 38 1a 02 c0       	push   0xc0021a38
c0008a8d:	e8 bc e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a92:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa0:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa3:	a8 fd                	test   al,0xfd
c0008aa5:	75 51                	jne    c0008af8 <KeLoadClockSettings()+0xd0>
c0008aa7:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008aac:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab1:	83 fb 2e             	cmp    ebx,0x2e
c0008ab4:	75 07                	jne    c0008abd <KeLoadClockSettings()+0x95>
c0008ab6:	83 fa 35             	cmp    edx,0x35
c0008ab9:	b0 01                	mov    al,0x1
c0008abb:	74 0f                	je     c0008acc <KeLoadClockSettings()+0xa4>
c0008abd:	31 c0                	xor    eax,eax
c0008abf:	83 fa 2e             	cmp    edx,0x2e
c0008ac2:	75 08                	jne    c0008acc <KeLoadClockSettings()+0xa4>
c0008ac4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008ac9:	0f 94 c0             	sete   al
c0008acc:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ad6:	83 e8 30             	sub    eax,0x30
c0008ad9:	6b f0 0a             	imul   esi,eax,0xa
c0008adc:	83 fa 2e             	cmp    edx,0x2e
c0008adf:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008ae3:	0f 44 c3             	cmove  eax,ebx
c0008ae6:	80 f9 2d             	cmp    cl,0x2d
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	75 19                	jne    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af0:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af6:	eb 11                	jmp    c0008b09 <KeLoadClockSettings()+0xe1>
c0008af8:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008aff:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b09:	50                   	push   eax
c0008b0a:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b11:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b14:	50                   	push   eax
c0008b15:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1b:	68 4f 1a 02 c0       	push   0xc0021a4f
c0008b20:	e8 29 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b25:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2b:	5b                   	pop    ebx
c0008b2c:	5e                   	pop    esi
c0008b2d:	5f                   	pop    edi
c0008b2e:	c3                   	ret    
c0008b2f:	90                   	nop

c0008b30 <Clock::Clock(char const*)>:
c0008b30:	83 ec 0c             	sub    esp,0xc
c0008b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b37:	83 ec 08             	sub    esp,0x8
c0008b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b3e:	50                   	push   eax
c0008b3f:	e8 84 06 00 00       	call   c00091c8 <Device::Device(char const*)>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c0008b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b50:	89 10                	mov    DWORD PTR [eax],edx
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b60:	90                   	nop
c0008b61:	83 c4 0c             	add    esp,0xc
c0008b64:	c3                   	ret    
c0008b65:	90                   	nop

c0008b66 <Clock::~Clock()>:
c0008b66:	83 ec 0c             	sub    esp,0xc
c0008b69:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c0008b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b72:	89 10                	mov    DWORD PTR [eax],edx
c0008b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	50                   	push   eax
c0008b7c:	e8 e7 03 00 00       	call   c0008f68 <Device::~Device()>
c0008b81:	83 c4 10             	add    esp,0x10
c0008b84:	90                   	nop
c0008b85:	83 c4 0c             	add    esp,0xc
c0008b88:	c3                   	ret    
c0008b89:	90                   	nop

c0008b8a <Clock::~Clock()>:
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b94:	e8 cd ff ff ff       	call   c0008b66 <Clock::~Clock()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	83 ec 08             	sub    esp,0x8
c0008b9f:	68 58 01 00 00       	push   0x158
c0008ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ba8:	e8 6e 3a 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 c4 0c             	add    esp,0xc
c0008bb3:	c3                   	ret    

c0008bb4 <Clock::timeInSecondsLocal()>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 14             	sub    esp,0x14
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bbe:	50                   	push   eax
c0008bbf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc2:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bc9:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bcf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd5:	89 cb                	mov    ebx,ecx
c0008bd7:	c1 fb 1f             	sar    ebx,0x1f
c0008bda:	01 c8                	add    eax,ecx
c0008bdc:	11 da                	adc    edx,ebx
c0008bde:	83 c4 10             	add    esp,0x10
c0008be1:	31 c9                	xor    ecx,ecx
c0008be3:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bea:	74 05                	je     c0008bf1 <Clock::timeInSecondsLocal()+0x3d>
c0008bec:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf1:	31 db                	xor    ebx,ebx
c0008bf3:	01 c8                	add    eax,ecx
c0008bf5:	11 da                	adc    edx,ebx
c0008bf7:	83 c4 08             	add    esp,0x8
c0008bfa:	5b                   	pop    ebx
c0008bfb:	c3                   	ret    

c0008bfc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfc:	57                   	push   edi
c0008bfd:	56                   	push   esi
c0008bfe:	53                   	push   ebx
c0008bff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c10:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c17:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c23:	99                   	cdq    
c0008c24:	29 c6                	sub    esi,eax
c0008c26:	19 d7                	sbb    edi,edx
c0008c28:	89 f0                	mov    eax,esi
c0008c2a:	31 f6                	xor    esi,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c35:	74 05                	je     c0008c3c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c37:	be 08 07 00 00       	mov    esi,0x708
c0008c3c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c40:	31 ff                	xor    edi,edi
c0008c42:	29 f0                	sub    eax,esi
c0008c44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c48:	19 fa                	sbb    edx,edi
c0008c4a:	89 d8                	mov    eax,ebx
c0008c4c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	ff e0                	jmp    eax

c0008c55 <KeDatetimeToSeconds(datetime_t)>:
c0008c55:	55                   	push   ebp
c0008c56:	57                   	push   edi
c0008c57:	56                   	push   esi
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 0c             	sub    esp,0xc
c0008c5c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c64:	89 f7                	mov    edi,esi
c0008c66:	89 f0                	mov    eax,esi
c0008c68:	0f b6 cf             	movzx  ecx,bh
c0008c6b:	0f b6 c4             	movzx  eax,ah
c0008c6e:	c1 ef 10             	shr    edi,0x10
c0008c71:	89 da                	mov    edx,ebx
c0008c73:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c76:	89 f9                	mov    ecx,edi
c0008c78:	0f b6 f9             	movzx  edi,cl
c0008c7b:	89 f1                	mov    ecx,esi
c0008c7d:	6b c0 3c             	imul   eax,eax,0x3c
c0008c80:	0f b6 f1             	movzx  esi,cl
c0008c83:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c89:	0f b6 db             	movzx  ebx,bl
c0008c8c:	c1 ea 10             	shr    edx,0x10
c0008c8f:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c95:	01 f8                	add    eax,edi
c0008c97:	01 f0                	add    eax,esi
c0008c99:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9c:	c1 f8 1f             	sar    eax,0x1f
c0008c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca3:	89 e8                	mov    eax,ebp
c0008ca5:	0f b6 c0             	movzx  eax,al
c0008ca8:	8b 0c 85 a0 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde560]
c0008caf:	83 f8 01             	cmp    eax,0x1
c0008cb2:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008cb6:	0f b7 da             	movzx  ebx,dx
c0008cb9:	76 27                	jbe    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cbb:	80 e2 03             	and    dl,0x3
c0008cbe:	75 22                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cc0:	31 d2                	xor    edx,edx
c0008cc2:	be 64 00 00 00       	mov    esi,0x64
c0008cc7:	89 d8                	mov    eax,ebx
c0008cc9:	f7 f6                	div    esi
c0008ccb:	85 d2                	test   edx,edx
c0008ccd:	75 12                	jne    c0008ce1 <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008ccf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd5:	be 90 01 00 00       	mov    esi,0x190
c0008cda:	99                   	cdq    
c0008cdb:	f7 fe                	idiv   esi
c0008cdd:	85 d2                	test   edx,edx
c0008cdf:	75 01                	jne    c0008ce2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ce1:	41                   	inc    ecx
c0008ce2:	83 fb 46             	cmp    ebx,0x46
c0008ce5:	76 48                	jbe    c0008d2f <KeDatetimeToSeconds(datetime_t)+0xda>
c0008ce7:	be 46 00 00 00       	mov    esi,0x46
c0008cec:	bf 64 00 00 00       	mov    edi,0x64
c0008cf1:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf6:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfc:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d01:	75 23                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d03:	89 f0                	mov    eax,esi
c0008d05:	99                   	cdq    
c0008d06:	f7 ff                	idiv   edi
c0008d08:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d0d:	85 d2                	test   edx,edx
c0008d0f:	75 15                	jne    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008d11:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d17:	99                   	cdq    
c0008d18:	f7 fd                	idiv   ebp
c0008d1a:	83 fa 01             	cmp    edx,0x1
c0008d1d:	19 c0                	sbb    eax,eax
c0008d1f:	f7 d0                	not    eax
c0008d21:	05 6e 01 00 00       	add    eax,0x16e
c0008d26:	46                   	inc    esi
c0008d27:	01 c1                	add    ecx,eax
c0008d29:	39 de                	cmp    esi,ebx
c0008d2b:	7c c9                	jl     c0008cf6 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d2d:	eb 34                	jmp    c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d2f:	74 32                	je     c0008d63 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d31:	b8 45 00 00 00       	mov    eax,0x45
c0008d36:	89 c2                	mov    edx,eax
c0008d38:	83 e2 03             	and    edx,0x3
c0008d3b:	39 d8                	cmp    eax,ebx
c0008d3d:	7e 0f                	jle    c0008d4e <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d3f:	83 fa 01             	cmp    edx,0x1
c0008d42:	19 d2                	sbb    edx,edx
c0008d44:	48                   	dec    eax
c0008d45:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d4c:	eb e8                	jmp    c0008d36 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d4e:	85 d2                	test   edx,edx
c0008d50:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d55:	75 0a                	jne    c0008d61 <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d57:	83 fb 01             	cmp    ebx,0x1
c0008d5a:	19 c0                	sbb    eax,eax
c0008d5c:	05 6e 01 00 00       	add    eax,0x16e
c0008d61:	29 c1                	sub    ecx,eax
c0008d63:	b8 80 51 01 00       	mov    eax,0x15180
c0008d68:	f7 e9                	imul   ecx
c0008d6a:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d6d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d71:	83 c4 0c             	add    esp,0xc
c0008d74:	5b                   	pop    ebx
c0008d75:	5e                   	pop    esi
c0008d76:	5f                   	pop    edi
c0008d77:	5d                   	pop    ebp
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d7a:	57                   	push   edi
c0008d7b:	56                   	push   esi
c0008d7c:	53                   	push   ebx
c0008d7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d81:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d83:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d8e:	e8 c2 fe ff ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c0008d93:	59                   	pop    ecx
c0008d94:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008d9b:	5b                   	pop    ebx
c0008d9c:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008da2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008da8:	89 cb                	mov    ebx,ecx
c0008daa:	c1 fb 1f             	sar    ebx,0x1f
c0008dad:	29 c8                	sub    eax,ecx
c0008daf:	19 da                	sbb    edx,ebx
c0008db1:	31 c9                	xor    ecx,ecx
c0008db3:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008dba:	74 05                	je     c0008dc1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008dbc:	b9 08 07 00 00       	mov    ecx,0x708
c0008dc1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008dc5:	31 db                	xor    ebx,ebx
c0008dc7:	29 c8                	sub    eax,ecx
c0008dc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008dcd:	19 da                	sbb    edx,ebx
c0008dcf:	89 f8                	mov    eax,edi
c0008dd1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008dd5:	5b                   	pop    ebx
c0008dd6:	5e                   	pop    esi
c0008dd7:	5f                   	pop    edi
c0008dd8:	ff e0                	jmp    eax

c0008dda <KeSecondsToDatetime(unsigned long long)>:
c0008dda:	55                   	push   ebp
c0008ddb:	57                   	push   edi
c0008ddc:	56                   	push   esi
c0008ddd:	53                   	push   ebx
c0008dde:	83 ec 1c             	sub    esp,0x1c
c0008de1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008de5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008de9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008ded:	6a 00                	push   0x0
c0008def:	68 80 51 01 00       	push   0x15180
c0008df4:	55                   	push   ebp
c0008df5:	57                   	push   edi
c0008df6:	e8 d9 71 01 00       	call   c001ffd4 <__udivdi3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e02:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e08:	6a 00                	push   0x0
c0008e0a:	68 80 51 01 00       	push   0x15180
c0008e0f:	55                   	push   ebp
c0008e10:	57                   	push   edi
c0008e11:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e16:	e8 b9 72 01 00       	call   c00200d4 <__umoddi3>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	99                   	cdq    
c0008e1f:	f7 ff                	idiv   edi
c0008e21:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e26:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e29:	89 d0                	mov    eax,edx
c0008e2b:	99                   	cdq    
c0008e2c:	f7 ff                	idiv   edi
c0008e2e:	85 db                	test   ebx,ebx
c0008e30:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e33:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e36:	79 11                	jns    c0008e49 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e3c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e42:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e47:	eb 07                	jmp    c0008e50 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e49:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e4e:	89 d8                	mov    eax,ebx
c0008e50:	99                   	cdq    
c0008e51:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e56:	f7 f9                	idiv   ecx
c0008e58:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e5d:	31 d2                	xor    edx,edx
c0008e5f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e68:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e70:	01 c3                	add    ebx,eax
c0008e72:	89 d8                	mov    eax,ebx
c0008e74:	f7 f1                	div    ecx
c0008e76:	31 d2                	xor    edx,edx
c0008e78:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e7b:	89 d8                	mov    eax,ebx
c0008e7d:	f7 f7                	div    edi
c0008e7f:	31 d2                	xor    edx,edx
c0008e81:	29 c1                	sub    ecx,eax
c0008e83:	89 d8                	mov    eax,ebx
c0008e85:	f7 f5                	div    ebp
c0008e87:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e8c:	31 d2                	xor    edx,edx
c0008e8e:	29 c1                	sub    ecx,eax
c0008e90:	89 c8                	mov    eax,ecx
c0008e92:	f7 f5                	div    ebp
c0008e94:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e99:	31 d2                	xor    edx,edx
c0008e9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e9f:	89 c8                	mov    eax,ecx
c0008ea1:	f7 f5                	div    ebp
c0008ea3:	31 d2                	xor    edx,edx
c0008ea5:	01 c3                	add    ebx,eax
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	f7 f7                	div    edi
c0008eab:	bf 99 00 00 00       	mov    edi,0x99
c0008eb0:	31 d2                	xor    edx,edx
c0008eb2:	29 c3                	sub    ebx,eax
c0008eb4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008ebc:	29 c3                	sub    ebx,eax
c0008ebe:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ec1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ec4:	83 c1 02             	add    ecx,0x2
c0008ec7:	89 c8                	mov    eax,ecx
c0008ec9:	bb 05 00 00 00       	mov    ebx,0x5
c0008ece:	f7 f7                	div    edi
c0008ed0:	31 d2                	xor    edx,edx
c0008ed2:	89 c7                	mov    edi,eax
c0008ed4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eda:	83 c0 02             	add    eax,0x2
c0008edd:	f7 f3                	div    ebx
c0008edf:	89 eb                	mov    ebx,ebp
c0008ee1:	29 c3                	sub    ebx,eax
c0008ee3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ee9:	88 1e                	mov    BYTE PTR [esi],bl
c0008eeb:	19 c0                	sbb    eax,eax
c0008eed:	31 d2                	xor    edx,edx
c0008eef:	83 e0 0c             	and    eax,0xc
c0008ef2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ef6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008efe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008f02:	83 f9 01             	cmp    ecx,0x1
c0008f05:	0f 96 c2             	setbe  dl
c0008f08:	41                   	inc    ecx
c0008f09:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008f0c:	01 d0                	add    eax,edx
c0008f0e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f12:	83 c4 1c             	add    esp,0x1c
c0008f15:	89 f0                	mov    eax,esi
c0008f17:	5b                   	pop    ebx
c0008f18:	5e                   	pop    esi
c0008f19:	5f                   	pop    edi
c0008f1a:	5d                   	pop    ebp
c0008f1b:	c2 04 00             	ret    0x4

c0008f1e <Clock::timeInDatetimeLocal()>:
c0008f1e:	53                   	push   ebx
c0008f1f:	83 ec 14             	sub    esp,0x14
c0008f22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f2a:	e8 85 fc ff ff       	call   c0008bb4 <Clock::timeInSecondsLocal()>
c0008f2f:	83 c4 0c             	add    esp,0xc
c0008f32:	52                   	push   edx
c0008f33:	50                   	push   eax
c0008f34:	53                   	push   ebx
c0008f35:	e8 a0 fe ff ff       	call   c0008dda <KeSecondsToDatetime(unsigned long long)>
c0008f3a:	89 d8                	mov    eax,ebx
c0008f3c:	83 c4 14             	add    esp,0x14
c0008f3f:	5b                   	pop    ebx
c0008f40:	c2 04 00             	ret    0x4
c0008f43:	90                   	nop

c0008f44 <Device::hibernate()>:
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop

c0008f46 <Device::wake()>:
c0008f46:	c3                   	ret    
c0008f47:	90                   	nop

c0008f48 <Device::detect()>:
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop

c0008f4a <Device::disableLegacy()>:
c0008f4a:	c3                   	ret    
c0008f4b:	90                   	nop

c0008f4c <Device::powerSaving(PowerSavingLevel)>:
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop

c0008f4e <DriverlessDevice::close(int, int, void*)>:
c0008f4e:	31 c0                	xor    eax,eax
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop

c0008f52 <DriverlessDevice::detect()>:
c0008f52:	c3                   	ret    
c0008f53:	90                   	nop

c0008f54 <DriverlessDevice::open(int, int, void*)>:
c0008f54:	83 ec 18             	sub    esp,0x18
c0008f57:	68 d0 1a 02 c0       	push   0xc0021ad0
c0008f5c:	e8 95 5c 00 00       	call   c000ebf6 <KePanic(char const*)>
c0008f61:	83 c8 ff             	or     eax,0xffffffff
c0008f64:	83 c4 1c             	add    esp,0x1c
c0008f67:	c3                   	ret    

c0008f68 <Device::~Device()>:
c0008f68:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c0008f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f71:	89 10                	mov    DWORD PTR [eax],edx
c0008f73:	90                   	nop
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::~Device()>:
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 e6 ff ff ff       	call   c0008f68 <Device::~Device()>
c0008f82:	83 c4 04             	add    esp,0x4
c0008f85:	83 ec 08             	sub    esp,0x8
c0008f88:	68 58 01 00 00       	push   0x158
c0008f8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f91:	e8 85 36 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	83 c4 0c             	add    esp,0xc
c0008f9c:	c3                   	ret    
c0008f9d:	90                   	nop

c0008f9e <Device::findAndLoadDriver()>:
c0008f9e:	c7 44 24 04 ee 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021aee
c0008fa6:	e9 a3 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008fab:	90                   	nop

c0008fac <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fac:	57                   	push   edi
c0008fad:	b9 09 00 00 00       	mov    ecx,0x9
c0008fb2:	56                   	push   esi
c0008fb3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fb7:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fbb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fc5:	81 c7 18 01 00 00    	add    edi,0x118
c0008fcb:	fc                   	cld    
c0008fcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fce:	5e                   	pop    esi
c0008fcf:	5f                   	pop    edi
c0008fd0:	c3                   	ret    
c0008fd1:	90                   	nop

c0008fd2 <Device::preOpenACPI(void*, char*, char*)>:
c0008fd2:	57                   	push   edi
c0008fd3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fd8:	56                   	push   esi
c0008fd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fe1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fe5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fef:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008ff5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ffd:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009003:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009007:	b9 0e 00 00 00       	mov    ecx,0xe
c000900c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000900e:	5e                   	pop    esi
c000900f:	5f                   	pop    edi
c0009010:	c3                   	ret    
c0009011:	90                   	nop

c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009012:	53                   	push   ebx
c0009013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009017:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000901b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000901f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009023:	0f b6 c0             	movzx  eax,al
c0009026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000902e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009032:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009036:	5b                   	pop    ebx
c0009037:	e9 2d fc 00 00       	jmp    c0018c69 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000903c <Device::getParent()>:
c000903c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009040:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009046:	c3                   	ret    
c0009047:	90                   	nop

c0009048 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000904c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009050:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009055:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009059:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000905d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009061:	e9 74 fd 00 00       	jmp    c0018dda <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009066 <Device::addChild(Device*)>:
c0009066:	53                   	push   ebx
c0009067:	83 ec 08             	sub    esp,0x8
c000906a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000906e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009072:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009078:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000907e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009080:	85 d2                	test   edx,edx
c0009082:	74 04                	je     c0009088 <Device::addChild(Device*)+0x22>
c0009084:	89 d3                	mov    ebx,edx
c0009086:	eb f6                	jmp    c000907e <Device::addChild(Device*)+0x18>
c0009088:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000908b:	83 ec 0c             	sub    esp,0xc
c000908e:	6a 08                	push   0x8
c0009090:	e8 1b 58 00 00       	call   c000e8b0 <malloc>
c0009095:	89 03                	mov    DWORD PTR [ebx],eax
c0009097:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000909d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090a4:	83 c4 18             	add    esp,0x18
c00090a7:	5b                   	pop    ebx
c00090a8:	c3                   	ret    
c00090a9:	90                   	nop

c00090aa <Device::removeAllChildren()>:
c00090aa:	56                   	push   esi
c00090ab:	53                   	push   ebx
c00090ac:	52                   	push   edx
c00090ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090b1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090ba:	74 17                	je     c00090d3 <Device::removeAllChildren()+0x29>
c00090bc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090bf:	85 c0                	test   eax,eax
c00090c1:	74 0c                	je     c00090cf <Device::removeAllChildren()+0x25>
c00090c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00090c5:	83 ec 0c             	sub    esp,0xc
c00090c8:	50                   	push   eax
c00090c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090cc:	83 c4 10             	add    esp,0x10
c00090cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090d1:	eb e4                	jmp    c00090b7 <Device::removeAllChildren()+0xd>
c00090d3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090df:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090ec:	58                   	pop    eax
c00090ed:	5b                   	pop    ebx
c00090ee:	5e                   	pop    esi
c00090ef:	c3                   	ret    

c00090f0 <Device::hibernateAll()>:
c00090f0:	53                   	push   ebx
c00090f1:	83 ec 14             	sub    esp,0x14
c00090f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090fa:	53                   	push   ebx
c00090fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009104:	83 c4 10             	add    esp,0x10
c0009107:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000910a:	74 0f                	je     c000911b <Device::hibernateAll()+0x2b>
c000910c:	83 ec 0c             	sub    esp,0xc
c000910f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009112:	e8 d9 ff ff ff       	call   c00090f0 <Device::hibernateAll()>
c0009117:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009119:	eb e9                	jmp    c0009104 <Device::hibernateAll()+0x14>
c000911b:	83 c4 08             	add    esp,0x8
c000911e:	5b                   	pop    ebx
c000911f:	c3                   	ret    

c0009120 <Device::wakeAll()>:
c0009120:	53                   	push   ebx
c0009121:	83 ec 14             	sub    esp,0x14
c0009124:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009128:	8b 03                	mov    eax,DWORD PTR [ebx]
c000912a:	53                   	push   ebx
c000912b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000912e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000913a:	74 0f                	je     c000914b <Device::wakeAll()+0x2b>
c000913c:	83 ec 0c             	sub    esp,0xc
c000913f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009142:	e8 d9 ff ff ff       	call   c0009120 <Device::wakeAll()>
c0009147:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009149:	eb e9                	jmp    c0009134 <Device::wakeAll()+0x14>
c000914b:	83 c4 08             	add    esp,0x8
c000914e:	5b                   	pop    ebx
c000914f:	c3                   	ret    

c0009150 <Device::detectAll()>:
c0009150:	53                   	push   ebx
c0009151:	83 ec 14             	sub    esp,0x14
c0009154:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009158:	8b 03                	mov    eax,DWORD PTR [ebx]
c000915a:	53                   	push   ebx
c000915b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000915e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000916a:	74 0f                	je     c000917b <Device::detectAll()+0x2b>
c000916c:	83 ec 0c             	sub    esp,0xc
c000916f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009172:	e8 d9 ff ff ff       	call   c0009150 <Device::detectAll()>
c0009177:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009179:	eb e9                	jmp    c0009164 <Device::detectAll()+0x14>
c000917b:	83 c4 08             	add    esp,0x8
c000917e:	5b                   	pop    ebx
c000917f:	c3                   	ret    

c0009180 <Device::disableLegacyAll()>:
c0009180:	c3                   	ret    
c0009181:	90                   	nop

c0009182 <Device::loadDriversForAll()>:
c0009182:	c3                   	ret    
c0009183:	90                   	nop

c0009184 <Device::powerSavingAll(PowerSavingLevel)>:
c0009184:	56                   	push   esi
c0009185:	53                   	push   ebx
c0009186:	83 ec 0c             	sub    esp,0xc
c0009189:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000918d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009191:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009193:	56                   	push   esi
c0009194:	53                   	push   ebx
c0009195:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009198:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000919e:	83 c4 10             	add    esp,0x10
c00091a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091a4:	74 0f                	je     c00091b5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091a6:	52                   	push   edx
c00091a7:	52                   	push   edx
c00091a8:	56                   	push   esi
c00091a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091ac:	e8 d3 ff ff ff       	call   c0009184 <Device::powerSavingAll(PowerSavingLevel)>
c00091b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091b3:	eb e9                	jmp    c000919e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091b5:	58                   	pop    eax
c00091b6:	5b                   	pop    ebx
c00091b7:	5e                   	pop    esi
c00091b8:	c3                   	ret    
c00091b9:	90                   	nop

c00091ba <Device::setName(char const*)>:
c00091ba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091c2:	e9 89 74 ff ff       	jmp    c0000650 <strcpy>
c00091c7:	90                   	nop

c00091c8 <Device::Device(char const*)>:
c00091c8:	83 ec 1c             	sub    esp,0x1c
c00091cb:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c00091d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d4:	89 10                	mov    DWORD PTR [eax],edx
c00091d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091da:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091f6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009204:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000920e:	83 ec 08             	sub    esp,0x8
c0009211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009219:	e8 9c ff ff ff       	call   c00091ba <Device::setName(char const*)>
c000921e:	83 c4 10             	add    esp,0x10
c0009221:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009229:	83 ec 0c             	sub    esp,0xc
c000922c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009230:	e8 7b 56 00 00       	call   c000e8b0 <malloc>
c0009235:	83 c4 10             	add    esp,0x10
c0009238:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009245:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009249:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000924f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009253:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009259:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000925f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009263:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009269:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009274:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000927b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009298:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00092a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b4:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092be:	90                   	nop
c00092bf:	83 c4 1c             	add    esp,0x1c
c00092c2:	c3                   	ret    
c00092c3:	90                   	nop

c00092c4 <Device::getName()>:
c00092c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092c8:	05 d0 00 00 00       	add    eax,0xd0
c00092cd:	c3                   	ret    

c00092ce <Device::closeAll()>:
c00092ce:	53                   	push   ebx
c00092cf:	83 ec 08             	sub    esp,0x8
c00092d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092d6:	53                   	push   ebx
c00092d7:	e8 e8 ff ff ff       	call   c00092c4 <Device::getName()>
c00092dc:	52                   	push   edx
c00092dd:	50                   	push   eax
c00092de:	68 28 1b 02 c0       	push   0xc0021b28
c00092e3:	e8 66 dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00092e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092ea:	6a 00                	push   0x0
c00092ec:	6a 00                	push   0x0
c00092ee:	6a 00                	push   0x0
c00092f0:	53                   	push   ebx
c00092f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092fa:	83 c4 20             	add    esp,0x20
c00092fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009300:	74 12                	je     c0009314 <Device::closeAll()+0x46>
c0009302:	83 ec 0c             	sub    esp,0xc
c0009305:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009308:	e8 c1 ff ff ff       	call   c00092ce <Device::closeAll()>
c000930d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000930f:	83 c4 10             	add    esp,0x10
c0009312:	eb e9                	jmp    c00092fd <Device::closeAll()+0x2f>
c0009314:	83 c4 08             	add    esp,0x8
c0009317:	5b                   	pop    ebx
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <DriverlessDevice::DriverlessDevice(char const*)>:
c000931a:	83 ec 0c             	sub    esp,0xc
c000931d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009321:	83 ec 08             	sub    esp,0x8
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	50                   	push   eax
c0009329:	e8 9a fe ff ff       	call   c00091c8 <Device::Device(char const*)>
c000932e:	83 c4 10             	add    esp,0x10
c0009331:	ba a0 1b 02 c0       	mov    edx,0xc0021ba0
c0009336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000933a:	89 10                	mov    DWORD PTR [eax],edx
c000933c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009340:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000934a:	90                   	nop
c000934b:	83 c4 0c             	add    esp,0xc
c000934e:	c3                   	ret    
c000934f:	90                   	nop

c0009350 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009350:	57                   	push   edi
c0009351:	56                   	push   esi
c0009352:	53                   	push   ebx
c0009353:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009357:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000935b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000935f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009365:	75 0c                	jne    c0009373 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009367:	52                   	push   edx
c0009368:	52                   	push   edx
c0009369:	53                   	push   ebx
c000936a:	56                   	push   esi
c000936b:	e8 dc 6e 01 00       	call   c002024c <LinkedList<Device>::addElement(Device*)>
c0009370:	83 c4 10             	add    esp,0x10
c0009373:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009379:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000937c:	74 12                	je     c0009390 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000937e:	50                   	push   eax
c000937f:	57                   	push   edi
c0009380:	56                   	push   esi
c0009381:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009384:	e8 c7 ff ff ff       	call   c0009350 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009389:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	eb e9                	jmp    c0009379 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009390:	5b                   	pop    ebx
c0009391:	5e                   	pop    esi
c0009392:	5f                   	pop    edi
c0009393:	c3                   	ret    

c0009394 <getDevicesOfType(DeviceType)>:
c0009394:	53                   	push   ebx
c0009395:	83 ec 14             	sub    esp,0x14
c0009398:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000939c:	53                   	push   ebx
c000939d:	e8 86 6f 01 00       	call   c0020328 <LinkedList<Device>::LinkedList()>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093a9:	53                   	push   ebx
c00093aa:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093b0:	e8 9b ff ff ff       	call   c0009350 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b5:	83 c4 18             	add    esp,0x18
c00093b8:	89 d8                	mov    eax,ebx
c00093ba:	5b                   	pop    ebx
c00093bb:	c2 04 00             	ret    0x4
c00093be:	66 90                	xchg   ax,ax

c00093c0 <HardDiskController::HardDiskController(char const*)>:
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c7:	83 ec 08             	sub    esp,0x8
c00093ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ce:	50                   	push   eax
c00093cf:	e8 f4 fd ff ff       	call   c00091c8 <Device::Device(char const*)>
c00093d4:	83 c4 10             	add    esp,0x10
c00093d7:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c00093dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093f0:	90                   	nop
c00093f1:	83 c4 0c             	add    esp,0xc
c00093f4:	c3                   	ret    
c00093f5:	90                   	nop
c00093f6:	66 90                	xchg   ax,ax

c00093f8 <HardDiskController::~HardDiskController()>:
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c0009400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009404:	89 10                	mov    DWORD PTR [eax],edx
c0009406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940a:	83 ec 0c             	sub    esp,0xc
c000940d:	50                   	push   eax
c000940e:	e8 55 fb ff ff       	call   c0008f68 <Device::~Device()>
c0009413:	83 c4 10             	add    esp,0x10
c0009416:	90                   	nop
c0009417:	83 c4 0c             	add    esp,0xc
c000941a:	c3                   	ret    
c000941b:	90                   	nop

c000941c <HardDiskController::~HardDiskController()>:
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	83 ec 0c             	sub    esp,0xc
c0009422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009426:	e8 cd ff ff ff       	call   c00093f8 <HardDiskController::~HardDiskController()>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	68 58 01 00 00       	push   0x158
c0009436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943a:	e8 dc 31 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c000943f:	83 c4 10             	add    esp,0x10
c0009442:	83 c4 0c             	add    esp,0xc
c0009445:	c3                   	ret    

c0009446 <PhysicalDisk::eject()>:
c0009446:	83 c8 ff             	or     eax,0xffffffff
c0009449:	c3                   	ret    

c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000944a:	83 ec 0c             	sub    esp,0xc
c000944d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009451:	83 ec 08             	sub    esp,0x8
c0009454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009458:	50                   	push   eax
c0009459:	e8 6a fd ff ff       	call   c00091c8 <Device::Device(char const*)>
c000945e:	83 c4 10             	add    esp,0x10
c0009461:	ba f8 1b 02 c0       	mov    edx,0xc0021bf8
c0009466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946a:	89 10                	mov    DWORD PTR [eax],edx
c000946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009470:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009486:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009494:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009498:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000949e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094ac:	90                   	nop
c00094ad:	83 c4 0c             	add    esp,0xc
c00094b0:	c3                   	ret    
c00094b1:	90                   	nop

c00094b2 <PhysicalDisk::startCache()>:
c00094b2:	56                   	push   esi
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 10             	sub    esp,0x10
c00094b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094bb:	6a 44                	push   0x44
c00094bd:	e8 ee 53 00 00       	call   c000e8b0 <malloc>
c00094c2:	89 c6                	mov    esi,eax
c00094c4:	58                   	pop    eax
c00094c5:	5a                   	pop    edx
c00094c6:	53                   	push   ebx
c00094c7:	56                   	push   esi
c00094c8:	e8 8f 13 00 00       	call   c000a85c <VCache::VCache(PhysicalDisk*)>
c00094cd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094d3:	83 c4 14             	add    esp,0x14
c00094d6:	5b                   	pop    ebx
c00094d7:	5e                   	pop    esi
c00094d8:	c3                   	ret    
c00094d9:	90                   	nop

c00094da <PhysicalDisk::~PhysicalDisk()>:
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	ba f8 1b 02 c0       	mov    edx,0xc0021bf8
c00094e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094e6:	89 10                	mov    DWORD PTR [eax],edx
c00094e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ec:	83 ec 0c             	sub    esp,0xc
c00094ef:	50                   	push   eax
c00094f0:	e8 73 fa ff ff       	call   c0008f68 <Device::~Device()>
c00094f5:	83 c4 10             	add    esp,0x10
c00094f8:	90                   	nop
c00094f9:	83 c4 0c             	add    esp,0xc
c00094fc:	c3                   	ret    
c00094fd:	90                   	nop

c00094fe <PhysicalDisk::~PhysicalDisk()>:
c00094fe:	83 ec 0c             	sub    esp,0xc
c0009501:	83 ec 0c             	sub    esp,0xc
c0009504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009508:	e8 cd ff ff ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c000950d:	83 c4 10             	add    esp,0x10
c0009510:	83 ec 08             	sub    esp,0x8
c0009513:	68 6c 01 00 00       	push   0x16c
c0009518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000951c:	e8 fa 30 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	83 c4 0c             	add    esp,0xc
c0009527:	c3                   	ret    

c0009528 <startGUI(void*)>:
c0009528:	55                   	push   ebp
c0009529:	89 e5                	mov    ebp,esp
c000952b:	53                   	push   ebx
c000952c:	83 ec 04             	sub    esp,0x4
c000952f:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009537:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000953c:	85 c0                	test   eax,eax
c000953e:	75 01                	jne    c0009541 <startGUI(void*)+0x19>
c0009540:	fb                   	sti    
c0009541:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009547:	83 ec 08             	sub    esp,0x8
c000954a:	6a 01                	push   0x1
c000954c:	68 28 1c 02 c0       	push   0xc0021c28
c0009551:	e8 04 b6 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c0009556:	83 c4 10             	add    esp,0x10
c0009559:	83 ec 08             	sub    esp,0x8
c000955c:	53                   	push   ebx
c000955d:	50                   	push   eax
c000955e:	e8 58 b8 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c0009563:	83 c4 10             	add    esp,0x10
c0009566:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000956c:	83 ec 08             	sub    esp,0x8
c000956f:	6a 01                	push   0x1
c0009571:	68 42 1c 02 c0       	push   0xc0021c42
c0009576:	e8 df b5 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c000957b:	83 c4 10             	add    esp,0x10
c000957e:	83 ec 08             	sub    esp,0x8
c0009581:	53                   	push   ebx
c0009582:	50                   	push   eax
c0009583:	e8 33 b8 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c0009588:	83 c4 10             	add    esp,0x10
c000958b:	eb fe                	jmp    c000958b <startGUI(void*)+0x63>

c000958d <startGUIVESA(void*)>:
c000958d:	55                   	push   ebp
c000958e:	89 e5                	mov    ebp,esp
c0009590:	53                   	push   ebx
c0009591:	83 ec 04             	sub    esp,0x4
c0009594:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000959c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00095a1:	85 c0                	test   eax,eax
c00095a3:	75 01                	jne    c00095a6 <startGUIVESA(void*)+0x19>
c00095a5:	fb                   	sti    
c00095a6:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095ac:	83 ec 08             	sub    esp,0x8
c00095af:	6a 01                	push   0x1
c00095b1:	68 60 1c 02 c0       	push   0xc0021c60
c00095b6:	e8 9f b5 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c00095bb:	83 c4 10             	add    esp,0x10
c00095be:	83 ec 08             	sub    esp,0x8
c00095c1:	53                   	push   ebx
c00095c2:	50                   	push   eax
c00095c3:	e8 f3 b7 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c00095c8:	83 c4 10             	add    esp,0x10
c00095cb:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095d1:	83 ec 08             	sub    esp,0x8
c00095d4:	6a 01                	push   0x1
c00095d6:	68 42 1c 02 c0       	push   0xc0021c42
c00095db:	e8 7a b5 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c00095e0:	83 c4 10             	add    esp,0x10
c00095e3:	83 ec 08             	sub    esp,0x8
c00095e6:	53                   	push   ebx
c00095e7:	50                   	push   eax
c00095e8:	e8 ce b7 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c00095ed:	83 c4 10             	add    esp,0x10
c00095f0:	eb fe                	jmp    c00095f0 <startGUIVESA(void*)+0x63>

c00095f2 <sendKeyToTerminal(unsigned char)>:
c00095f2:	55                   	push   ebp
c00095f3:	89 e5                	mov    ebp,esp
c00095f5:	83 ec 28             	sub    esp,0x28
c00095f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095fe:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0009603:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009607:	83 ec 08             	sub    esp,0x8
c000960a:	52                   	push   edx
c000960b:	50                   	push   eax
c000960c:	e8 e5 80 00 00       	call   c00116f6 <VgaText::receiveKey(unsigned char)>
c0009611:	83 c4 10             	add    esp,0x10
c0009614:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009618:	83 f8 0a             	cmp    eax,0xa
c000961b:	74 16                	je     c0009633 <sendKeyToTerminal(unsigned char)+0x41>
c000961d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009621:	83 f8 03             	cmp    eax,0x3
c0009624:	74 0d                	je     c0009633 <sendKeyToTerminal(unsigned char)+0x41>
c0009626:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000962a:	83 f8 1c             	cmp    eax,0x1c
c000962d:	0f 85 92 00 00 00    	jne    c00096c5 <sendKeyToTerminal(unsigned char)+0xd3>
c0009633:	fa                   	cli    
c0009634:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009639:	83 c0 01             	add    eax,0x1
c000963c:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009641:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009646:	83 c0 01             	add    eax,0x1
c0009649:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000964e:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c0009653:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009656:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c0009660:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009664:	74 1f                	je     c0009685 <sendKeyToTerminal(unsigned char)+0x93>
c0009666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009669:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000966c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000966f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009672:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009675:	83 ec 0c             	sub    esp,0xc
c0009678:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000967b:	e8 d8 c2 00 00       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	eb db                	jmp    c0009660 <sendKeyToTerminal(unsigned char)+0x6e>
c0009685:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000968a:	83 e8 01             	sub    eax,0x1
c000968d:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0009692:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009697:	85 c0                	test   eax,eax
c0009699:	75 18                	jne    c00096b3 <sendKeyToTerminal(unsigned char)+0xc1>
c000969b:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c00096a0:	85 c0                	test   eax,eax
c00096a2:	74 0f                	je     c00096b3 <sendKeyToTerminal(unsigned char)+0xc1>
c00096a4:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00096ae:	e8 95 bf 00 00       	call   c0015648 <schedule()>
c00096b3:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00096bb:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00096c0:	85 c0                	test   eax,eax
c00096c2:	75 01                	jne    c00096c5 <sendKeyToTerminal(unsigned char)+0xd3>
c00096c4:	fb                   	sti    
c00096c5:	90                   	nop
c00096c6:	c9                   	leave  
c00096c7:	c3                   	ret    

c00096c8 <sendKeyboardToken(KeyboardToken)>:
c00096c8:	55                   	push   ebp
c00096c9:	89 e5                	mov    ebp,esp
c00096cb:	83 ec 18             	sub    esp,0x18
c00096ce:	e8 4d 5e 00 00       	call   c000f520 <KeUserIOReceived()>
c00096d3:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096d9:	0f b7 c0             	movzx  eax,ax
c00096dc:	83 f2 01             	xor    edx,0x1
c00096df:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c00096e5:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c00096ea:	85 c0                	test   eax,eax
c00096ec:	74 24                	je     c0009712 <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ee:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c00096f4:	83 ec 04             	sub    esp,0x4
c00096f7:	68 40 a3 02 c0       	push   0xc002a340
c00096fc:	83 ec 08             	sub    esp,0x8
c00096ff:	89 e0                	mov    eax,esp
c0009701:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009704:	89 08                	mov    DWORD PTR [eax],ecx
c0009706:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009709:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000970d:	ff d2                	call   edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009716:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009719:	0f b6 c0             	movzx  eax,al
c000971c:	85 c0                	test   eax,eax
c000971e:	0f 84 da 00 00 00    	je     c00097fe <sendKeyboardToken(KeyboardToken)+0x136>
c0009724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009727:	0f b7 c0             	movzx  eax,ax
c000972a:	3d 18 03 00 00       	cmp    eax,0x318
c000972f:	75 06                	jne    c0009737 <sendKeyboardToken(KeyboardToken)+0x6f>
c0009731:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000973a:	0f b7 c0             	movzx  eax,ax
c000973d:	3d 19 03 00 00       	cmp    eax,0x319
c0009742:	75 06                	jne    c000974a <sendKeyboardToken(KeyboardToken)+0x82>
c0009744:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000974a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000974d:	0f b7 c0             	movzx  eax,ax
c0009750:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009755:	75 06                	jne    c000975d <sendKeyboardToken(KeyboardToken)+0x95>
c0009757:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000975d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009760:	0f b7 c0             	movzx  eax,ax
c0009763:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009768:	75 06                	jne    c0009770 <sendKeyboardToken(KeyboardToken)+0xa8>
c000976a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0009770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009773:	0f b7 c0             	movzx  eax,ax
c0009776:	3d 1c 03 00 00       	cmp    eax,0x31c
c000977b:	75 06                	jne    c0009783 <sendKeyboardToken(KeyboardToken)+0xbb>
c000977d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0009783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009786:	0f b7 c0             	movzx  eax,ax
c0009789:	3d 1d 03 00 00       	cmp    eax,0x31d
c000978e:	75 06                	jne    c0009796 <sendKeyboardToken(KeyboardToken)+0xce>
c0009790:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009799:	0f b7 c0             	movzx  eax,ax
c000979c:	3d 1e 03 00 00       	cmp    eax,0x31e
c00097a1:	75 06                	jne    c00097a9 <sendKeyboardToken(KeyboardToken)+0xe1>
c00097a3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ac:	0f b7 c0             	movzx  eax,ax
c00097af:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097b4:	75 06                	jne    c00097bc <sendKeyboardToken(KeyboardToken)+0xf4>
c00097b6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097bf:	0f b7 c0             	movzx  eax,ax
c00097c2:	3d 20 03 00 00       	cmp    eax,0x320
c00097c7:	75 06                	jne    c00097cf <sendKeyboardToken(KeyboardToken)+0x107>
c00097c9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d2:	0f b7 c0             	movzx  eax,ax
c00097d5:	3d 21 03 00 00       	cmp    eax,0x321
c00097da:	75 06                	jne    c00097e2 <sendKeyboardToken(KeyboardToken)+0x11a>
c00097dc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e5:	0f b7 c0             	movzx  eax,ax
c00097e8:	3d 22 03 00 00       	cmp    eax,0x322
c00097ed:	0f 85 f1 00 00 00    	jne    c00098e4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097f3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097f9:	e9 e6 00 00 00       	jmp    c00098e4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009801:	0f b7 c0             	movzx  eax,ax
c0009804:	3d 18 03 00 00       	cmp    eax,0x318
c0009809:	75 0a                	jne    c0009815 <sendKeyboardToken(KeyboardToken)+0x14d>
c000980b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0009811:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009818:	0f b7 c0             	movzx  eax,ax
c000981b:	3d 19 03 00 00       	cmp    eax,0x319
c0009820:	75 0a                	jne    c000982c <sendKeyboardToken(KeyboardToken)+0x164>
c0009822:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009828:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000982c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982f:	0f b7 c0             	movzx  eax,ax
c0009832:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009837:	75 0a                	jne    c0009843 <sendKeyboardToken(KeyboardToken)+0x17b>
c0009839:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000983f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009846:	0f b7 c0             	movzx  eax,ax
c0009849:	3d 1b 03 00 00       	cmp    eax,0x31b
c000984e:	75 0a                	jne    c000985a <sendKeyboardToken(KeyboardToken)+0x192>
c0009850:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009856:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000985a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985d:	0f b7 c0             	movzx  eax,ax
c0009860:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009865:	75 0a                	jne    c0009871 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009867:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000986d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009874:	0f b7 c0             	movzx  eax,ax
c0009877:	3d 1d 03 00 00       	cmp    eax,0x31d
c000987c:	75 0a                	jne    c0009888 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000987e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009884:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000988b:	0f b7 c0             	movzx  eax,ax
c000988e:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009893:	75 0a                	jne    c000989f <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009895:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000989b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a2:	0f b7 c0             	movzx  eax,ax
c00098a5:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098aa:	75 0a                	jne    c00098b6 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098ac:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b9:	0f b7 c0             	movzx  eax,ax
c00098bc:	3d 20 03 00 00       	cmp    eax,0x320
c00098c1:	75 0a                	jne    c00098cd <sendKeyboardToken(KeyboardToken)+0x205>
c00098c3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	0f b7 c0             	movzx  eax,ax
c00098d3:	3d 21 03 00 00       	cmp    eax,0x321
c00098d8:	75 0a                	jne    c00098e4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098da:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e7:	0f b7 c0             	movzx  eax,ax
c00098ea:	3d 00 02 00 00       	cmp    eax,0x200
c00098ef:	75 2f                	jne    c0009920 <sendKeyboardToken(KeyboardToken)+0x258>
c00098f1:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c00098f6:	83 f0 01             	xor    eax,0x1
c00098f9:	0f b6 c0             	movzx  eax,al
c00098fc:	85 c0                	test   eax,eax
c00098fe:	74 20                	je     c0009920 <sendKeyboardToken(KeyboardToken)+0x258>
c0009900:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009905:	6a 01                	push   0x1
c0009907:	6a 00                	push   0x0
c0009909:	68 28 95 00 c0       	push   0xc0009528
c000990e:	50                   	push   eax
c000990f:	e8 e8 ba 00 00       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c0009914:	83 c4 10             	add    esp,0x10
c0009917:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000991e:	eb 3a                	jmp    c000995a <sendKeyboardToken(KeyboardToken)+0x292>
c0009920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009923:	0f b7 c0             	movzx  eax,ax
c0009926:	3d 01 02 00 00       	cmp    eax,0x201
c000992b:	75 2d                	jne    c000995a <sendKeyboardToken(KeyboardToken)+0x292>
c000992d:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c0009932:	83 f0 01             	xor    eax,0x1
c0009935:	0f b6 c0             	movzx  eax,al
c0009938:	85 c0                	test   eax,eax
c000993a:	74 1e                	je     c000995a <sendKeyboardToken(KeyboardToken)+0x292>
c000993c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009941:	6a 01                	push   0x1
c0009943:	6a 00                	push   0x0
c0009945:	68 8d 95 00 c0       	push   0xc000958d
c000994a:	50                   	push   eax
c000994b:	e8 ac ba 00 00       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c0009950:	83 c4 10             	add    esp,0x10
c0009953:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000995a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000995d:	0f b7 c0             	movzx  eax,ax
c0009960:	3d 25 03 00 00       	cmp    eax,0x325
c0009965:	75 06                	jne    c000996d <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009967:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000996d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009970:	0f b7 c0             	movzx  eax,ax
c0009973:	3d 24 03 00 00       	cmp    eax,0x324
c0009978:	75 06                	jne    c0009980 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000997a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009983:	0f b7 c0             	movzx  eax,ax
c0009986:	3d 23 03 00 00       	cmp    eax,0x323
c000998b:	75 06                	jne    c0009993 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000998d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0009993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009996:	0f b7 c0             	movzx  eax,ax
c0009999:	3d 26 03 00 00       	cmp    eax,0x326
c000999e:	75 06                	jne    c00099a6 <sendKeyboardToken(KeyboardToken)+0x2de>
c00099a0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a9:	0f b7 c0             	movzx  eax,ax
c00099ac:	3d 27 03 00 00       	cmp    eax,0x327
c00099b1:	75 06                	jne    c00099b9 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099b3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099bc:	0f b7 c0             	movzx  eax,ax
c00099bf:	3d 22 03 00 00       	cmp    eax,0x322
c00099c4:	75 06                	jne    c00099cc <sendKeyboardToken(KeyboardToken)+0x304>
c00099c6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099cc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099d0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099d3:	83 f0 01             	xor    eax,0x1
c00099d6:	0f b6 c0             	movzx  eax,al
c00099d9:	85 c0                	test   eax,eax
c00099db:	74 7c                	je     c0009a59 <sendKeyboardToken(KeyboardToken)+0x391>
c00099dd:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c00099e2:	0f b6 c0             	movzx  eax,al
c00099e5:	85 c0                	test   eax,eax
c00099e7:	74 43                	je     c0009a2c <sendKeyboardToken(KeyboardToken)+0x364>
c00099e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099ed:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099f1:	85 c0                	test   eax,eax
c00099f3:	74 2b                	je     c0009a20 <sendKeyboardToken(KeyboardToken)+0x358>
c00099f5:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c00099fb:	89 d0                	mov    eax,edx
c00099fd:	c1 e0 02             	shl    eax,0x2
c0009a00:	01 d0                	add    eax,edx
c0009a02:	d1 e0                	shl    eax,1
c0009a04:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a0c:	0f b7 c0             	movzx  eax,ax
c0009a0f:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a12:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a17:	01 d0                	add    eax,edx
c0009a19:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a1e:	eb 71                	jmp    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a20:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a2a:	eb 65                	jmp    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a2c:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a31:	85 c0                	test   eax,eax
c0009a33:	74 18                	je     c0009a4d <sendKeyboardToken(KeyboardToken)+0x385>
c0009a35:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a3a:	0f b6 c0             	movzx  eax,al
c0009a3d:	83 ec 0c             	sub    esp,0xc
c0009a40:	50                   	push   eax
c0009a41:	e8 ac fb ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a4d:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a57:	eb 38                	jmp    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a5c:	0f b7 c0             	movzx  eax,ax
c0009a5f:	3d 01 01 00 00       	cmp    eax,0x101
c0009a64:	75 2b                	jne    c0009a91 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a66:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a6b:	85 c0                	test   eax,eax
c0009a6d:	74 18                	je     c0009a87 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a6f:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a74:	0f b6 c0             	movzx  eax,al
c0009a77:	83 ec 0c             	sub    esp,0xc
c0009a7a:	50                   	push   eax
c0009a7b:	e8 72 fb ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009a80:	83 c4 10             	add    esp,0x10
c0009a83:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a87:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a91:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a94:	83 f0 01             	xor    eax,0x1
c0009a97:	0f b6 c0             	movzx  eax,al
c0009a9a:	85 c0                	test   eax,eax
c0009a9c:	74 5a                	je     c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a9e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009aa1:	83 f0 01             	xor    eax,0x1
c0009aa4:	0f b6 c0             	movzx  eax,al
c0009aa7:	85 c0                	test   eax,eax
c0009aa9:	74 4d                	je     c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aab:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009ab0:	83 f0 01             	xor    eax,0x1
c0009ab3:	0f b6 c0             	movzx  eax,al
c0009ab6:	85 c0                	test   eax,eax
c0009ab8:	74 3e                	je     c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abd:	0f b7 c0             	movzx  eax,ax
c0009ac0:	83 f8 1f             	cmp    eax,0x1f
c0009ac3:	76 0b                	jbe    c0009ad0 <sendKeyboardToken(KeyboardToken)+0x408>
c0009ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac8:	0f b7 c0             	movzx  eax,ax
c0009acb:	83 f8 7e             	cmp    eax,0x7e
c0009ace:	76 16                	jbe    c0009ae6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad3:	0f b7 c0             	movzx  eax,ax
c0009ad6:	83 f8 0a             	cmp    eax,0xa
c0009ad9:	74 0b                	je     c0009ae6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ade:	0f b7 c0             	movzx  eax,ax
c0009ae1:	83 f8 08             	cmp    eax,0x8
c0009ae4:	75 12                	jne    c0009af8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae9:	0f b6 c0             	movzx  eax,al
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 fd fa ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009afb:	83 f0 01             	xor    eax,0x1
c0009afe:	0f b6 c0             	movzx  eax,al
c0009b01:	85 c0                	test   eax,eax
c0009b03:	74 5d                	je     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b05:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b08:	83 f0 01             	xor    eax,0x1
c0009b0b:	0f b6 c0             	movzx  eax,al
c0009b0e:	85 c0                	test   eax,eax
c0009b10:	74 50                	je     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b12:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b17:	0f b6 c0             	movzx  eax,al
c0009b1a:	85 c0                	test   eax,eax
c0009b1c:	74 44                	je     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b21:	0f b7 c0             	movzx  eax,ax
c0009b24:	83 f8 3f             	cmp    eax,0x3f
c0009b27:	76 39                	jbe    c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b2c:	0f b7 c0             	movzx  eax,ax
c0009b2f:	83 f8 7f             	cmp    eax,0x7f
c0009b32:	77 2e                	ja     c0009b62 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b37:	88 c2                	mov    dl,al
c0009b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b3c:	0f b7 c0             	movzx  eax,ax
c0009b3f:	83 f8 5f             	cmp    eax,0x5f
c0009b42:	76 04                	jbe    c0009b48 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b44:	b0 20                	mov    al,0x20
c0009b46:	eb 02                	jmp    c0009b4a <sendKeyboardToken(KeyboardToken)+0x482>
c0009b48:	b0 00                	mov    al,0x0
c0009b4a:	89 d1                	mov    ecx,edx
c0009b4c:	29 c1                	sub    ecx,eax
c0009b4e:	89 c8                	mov    eax,ecx
c0009b50:	83 e8 40             	sub    eax,0x40
c0009b53:	0f b6 c0             	movzx  eax,al
c0009b56:	83 ec 0c             	sub    esp,0xc
c0009b59:	50                   	push   eax
c0009b5a:	e8 93 fa ff ff       	call   c00095f2 <sendKeyToTerminal(unsigned char)>
c0009b5f:	83 c4 10             	add    esp,0x10
c0009b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b65:	0f b7 c0             	movzx  eax,ax
c0009b68:	3d 00 03 00 00       	cmp    eax,0x300
c0009b6d:	75 12                	jne    c0009b81 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b6f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b72:	83 f0 01             	xor    eax,0x1
c0009b75:	0f b6 c0             	movzx  eax,al
c0009b78:	85 c0                	test   eax,eax
c0009b7a:	74 05                	je     c0009b81 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b7c:	e8 d2 72 00 00       	call   c0010e53 <doTerminalCycle()>
c0009b81:	90                   	nop
c0009b82:	c9                   	leave  
c0009b83:	c3                   	ret    

c0009b84 <clearInternalKeybuffer(VgaText*)>:
c0009b84:	55                   	push   ebp
c0009b85:	89 e5                	mov    ebp,esp
c0009b87:	83 ec 08             	sub    esp,0x8
c0009b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b8d:	05 02 01 00 00       	add    eax,0x102
c0009b92:	83 ec 0c             	sub    esp,0xc
c0009b95:	50                   	push   eax
c0009b96:	e8 e5 69 ff ff       	call   c0000580 <strlen>
c0009b9b:	83 c4 10             	add    esp,0x10
c0009b9e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ba1:	81 c2 02 01 00 00    	add    edx,0x102
c0009ba7:	83 ec 04             	sub    esp,0x4
c0009baa:	50                   	push   eax
c0009bab:	6a 00                	push   0x0
c0009bad:	52                   	push   edx
c0009bae:	e8 3d 69 ff ff       	call   c00004f0 <memset>
c0009bb3:	83 c4 10             	add    esp,0x10
c0009bb6:	90                   	nop
c0009bb7:	c9                   	leave  
c0009bb8:	c3                   	ret    

c0009bb9 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009bb9:	55                   	push   ebp
c0009bba:	89 e5                	mov    ebp,esp
c0009bbc:	83 ec 18             	sub    esp,0x18
c0009bbf:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bc4:	85 c0                	test   eax,eax
c0009bc6:	74 2a                	je     c0009bf2 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bc8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bce:	8b 15 28 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a328
c0009bd4:	83 ec 04             	sub    esp,0x4
c0009bd7:	68 40 a3 02 c0       	push   0xc002a340
c0009bdc:	83 ec 08             	sub    esp,0x8
c0009bdf:	89 e0                	mov    eax,esp
c0009be1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009be4:	89 08                	mov    DWORD PTR [eax],ecx
c0009be6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009be9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009bed:	ff d2                	call   edx
c0009bef:	83 c4 10             	add    esp,0x10
c0009bf2:	fb                   	sti    
c0009bf3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bfa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bfe:	0f 84 08 01 00 00    	je     c0009d0c <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c07:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c0d:	0f be c0             	movsx  eax,al
c0009c10:	85 c0                	test   eax,eax
c0009c12:	75 27                	jne    c0009c3b <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c14:	fa                   	cli    
c0009c15:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c1a:	83 c0 01             	add    eax,0x1
c0009c1d:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009c22:	e8 21 ba 00 00       	call   c0015648 <schedule()>
c0009c27:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009c2f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c34:	85 c0                	test   eax,eax
c0009c36:	75 cc                	jne    c0009c04 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c38:	fb                   	sti    
c0009c39:	eb c9                	jmp    c0009c04 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c3e:	8d 50 01             	lea    edx,[eax+0x1]
c0009c41:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c44:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c47:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c4d:	88 10                	mov    BYTE PTR [eax],dl
c0009c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c52:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c58:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c5b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c5f:	83 f8 03             	cmp    eax,0x3
c0009c62:	75 1e                	jne    c0009c82 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c64:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c6b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c6e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c74:	83 ec 08             	sub    esp,0x8
c0009c77:	6a 02                	push   0x2
c0009c79:	50                   	push   eax
c0009c7a:	e8 b5 60 00 00       	call   c000fd34 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c7f:	83 c4 10             	add    esp,0x10
c0009c82:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c86:	83 f8 1c             	cmp    eax,0x1c
c0009c89:	75 1e                	jne    c0009ca9 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009c8b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c95:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c9b:	83 ec 08             	sub    esp,0x8
c0009c9e:	6a 09                	push   0x9
c0009ca0:	50                   	push   eax
c0009ca1:	e8 8e 60 00 00       	call   c000fd34 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009ca6:	83 c4 10             	add    esp,0x10
c0009ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cac:	05 02 01 00 00       	add    eax,0x102
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 c6 68 ff ff       	call   c0000580 <strlen>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc0:	81 c2 02 01 00 00    	add    edx,0x102
c0009cc6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cc9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ccc:	81 c2 02 01 00 00    	add    edx,0x102
c0009cd2:	83 ec 04             	sub    esp,0x4
c0009cd5:	50                   	push   eax
c0009cd6:	51                   	push   ecx
c0009cd7:	52                   	push   edx
c0009cd8:	e8 f3 66 ff ff       	call   c00003d0 <memmove>
c0009cdd:	83 c4 10             	add    esp,0x10
c0009ce0:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ce4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009ce8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cec:	83 f8 0a             	cmp    eax,0xa
c0009cef:	74 16                	je     c0009d07 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009cf1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf5:	83 f8 03             	cmp    eax,0x3
c0009cf8:	74 0d                	je     c0009d07 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009cfa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfe:	83 f8 1c             	cmp    eax,0x1c
c0009d01:	0f 85 f3 fe ff ff    	jne    c0009bfa <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d0a:	eb 03                	jmp    c0009d0f <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d0f:	c9                   	leave  
c0009d10:	c3                   	ret    
c0009d11:	90                   	nop

c0009d12 <Keyboard::Keyboard(char const*)>:
c0009d12:	83 ec 0c             	sub    esp,0xc
c0009d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d19:	83 ec 08             	sub    esp,0x8
c0009d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d20:	50                   	push   eax
c0009d21:	e8 a2 f4 ff ff       	call   c00091c8 <Device::Device(char const*)>
c0009d26:	83 c4 10             	add    esp,0x10
c0009d29:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0009d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d32:	89 10                	mov    DWORD PTR [eax],edx
c0009d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d38:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d42:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d49:	90                   	nop
c0009d4a:	83 c4 0c             	add    esp,0xc
c0009d4d:	c3                   	ret    

c0009d4e <Keyboard::~Keyboard()>:
c0009d4e:	83 ec 0c             	sub    esp,0xc
c0009d51:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0009d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5a:	89 10                	mov    DWORD PTR [eax],edx
c0009d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d60:	83 ec 0c             	sub    esp,0xc
c0009d63:	50                   	push   eax
c0009d64:	e8 ff f1 ff ff       	call   c0008f68 <Device::~Device()>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	90                   	nop
c0009d6d:	83 c4 0c             	add    esp,0xc
c0009d70:	c3                   	ret    
c0009d71:	90                   	nop

c0009d72 <Keyboard::~Keyboard()>:
c0009d72:	83 ec 0c             	sub    esp,0xc
c0009d75:	83 ec 0c             	sub    esp,0xc
c0009d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d7c:	e8 cd ff ff ff       	call   c0009d4e <Keyboard::~Keyboard()>
c0009d81:	83 c4 10             	add    esp,0x10
c0009d84:	83 ec 08             	sub    esp,0x8
c0009d87:	68 5c 01 00 00       	push   0x15c
c0009d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d90:	e8 86 28 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	83 c4 0c             	add    esp,0xc
c0009d9b:	c3                   	ret    

c0009d9c <LogicalDisk::close(int, int, void*)>:
c0009d9c:	83 c8 ff             	or     eax,0xffffffff
c0009d9f:	c3                   	ret    

c0009da0 <LogicalDisk::~LogicalDisk()>:
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0009da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dac:	89 10                	mov    DWORD PTR [eax],edx
c0009dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db2:	83 ec 0c             	sub    esp,0xc
c0009db5:	50                   	push   eax
c0009db6:	e8 ad f1 ff ff       	call   c0008f68 <Device::~Device()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	90                   	nop
c0009dbf:	83 c4 0c             	add    esp,0xc
c0009dc2:	c3                   	ret    
c0009dc3:	90                   	nop

c0009dc4 <LogicalDisk::~LogicalDisk()>:
c0009dc4:	83 ec 0c             	sub    esp,0xc
c0009dc7:	83 ec 0c             	sub    esp,0xc
c0009dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dce:	e8 cd ff ff ff       	call   c0009da0 <LogicalDisk::~LogicalDisk()>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	83 ec 08             	sub    esp,0x8
c0009dd9:	68 78 01 00 00       	push   0x178
c0009dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de2:	e8 34 28 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	83 c4 0c             	add    esp,0xc
c0009ded:	c3                   	ret    

c0009dee <LogicalDisk::open(int, int, void*)>:
c0009dee:	83 ec 18             	sub    esp,0x18
c0009df1:	68 b0 1c 02 c0       	push   0xc0021cb0
c0009df6:	e8 fb 4d 00 00       	call   c000ebf6 <KePanic(char const*)>
c0009dfb:	83 c8 ff             	or     eax,0xffffffff
c0009dfe:	83 c4 1c             	add    esp,0x1c
c0009e01:	c3                   	ret    

c0009e02 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e02:	53                   	push   ebx
c0009e03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e0f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e15:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e1b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e21:	77 10                	ja     c0009e33 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e23:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e29:	89 d3                	mov    ebx,edx
c0009e2b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e31:	72 05                	jb     c0009e38 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e33:	83 c8 ff             	or     eax,0xffffffff
c0009e36:	89 c2                	mov    edx,eax
c0009e38:	5b                   	pop    ebx
c0009e39:	c3                   	ret    

c0009e3a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e3a:	56                   	push   esi
c0009e3b:	83 c8 ff             	or     eax,0xffffffff
c0009e3e:	53                   	push   ebx
c0009e3f:	89 c2                	mov    edx,eax
c0009e41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e45:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e4d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e53:	77 27                	ja     c0009e7c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e55:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e5b:	89 d8                	mov    eax,ebx
c0009e5d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e68:	89 c2                	mov    edx,eax
c0009e6a:	73 10                	jae    c0009e7c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e6c:	89 c8                	mov    eax,ecx
c0009e6e:	89 da                	mov    edx,ebx
c0009e70:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e76:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e7c:	5b                   	pop    ebx
c0009e7d:	5e                   	pop    esi
c0009e7e:	c3                   	ret    
c0009e7f:	90                   	nop

c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e80:	83 ec 1c             	sub    esp,0x1c
c0009e83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea6:	83 ec 08             	sub    esp,0x8
c0009ea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ead:	50                   	push   eax
c0009eae:	e8 15 f3 ff ff       	call   c00091c8 <Device::Device(char const*)>
c0009eb3:	83 c4 10             	add    esp,0x10
c0009eb6:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0009ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ebf:	89 10                	mov    DWORD PTR [eax],edx
c0009ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009edb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009ef0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009ef4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009efc:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f02:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f08:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f13:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f19:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f27:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f31:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f3b:	90                   	nop
c0009f3c:	83 c4 1c             	add    esp,0x1c
c0009f3f:	c3                   	ret    

c0009f40 <LogicalDisk::assignDriveLetter()>:
c0009f40:	55                   	push   ebp
c0009f41:	57                   	push   edi
c0009f42:	56                   	push   esi
c0009f43:	53                   	push   ebx
c0009f44:	83 ec 14             	sub    esp,0x14
c0009f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f4b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f51:	b0 41                	mov    al,0x41
c0009f53:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f59:	84 d2                	test   dl,dl
c0009f5b:	75 02                	jne    c0009f5f <LogicalDisk::assignDriveLetter()+0x1f>
c0009f5d:	b0 43                	mov    al,0x43
c0009f5f:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f65:	0f b6 ca             	movzx  ecx,dl
c0009f68:	0f be e8             	movsx  ebp,al
c0009f6b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f6f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f73:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009f79:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f7d:	3c 43                	cmp    al,0x43
c0009f7f:	75 10                	jne    c0009f91 <LogicalDisk::assignDriveLetter()+0x51>
c0009f81:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f88:	75 5a                	jne    c0009fe4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f8a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009f8f:	75 53                	jne    c0009fe4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f91:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009f94:	ba 01 00 00 00       	mov    edx,0x1
c0009f99:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f9c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009f9f:	d3 e2                	shl    edx,cl
c0009fa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa5:	89 d7                	mov    edi,edx
c0009fa7:	89 d6                	mov    esi,edx
c0009fa9:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fad:	c1 ff 1f             	sar    edi,0x1f
c0009fb0:	21 f9                	and    ecx,edi
c0009fb2:	09 d1                	or     ecx,edx
c0009fb4:	75 2e                	jne    c0009fe4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fba:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fbe:	09 f2                	or     edx,esi
c0009fc0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fc3:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009fc9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fcd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fd3:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c0009fda:	09 fa                	or     edx,edi
c0009fdc:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c0009fe2:	eb 0d                	jmp    c0009ff1 <LogicalDisk::assignDriveLetter()+0xb1>
c0009fe4:	8d 50 01             	lea    edx,[eax+0x1]
c0009fe7:	45                   	inc    ebp
c0009fe8:	80 fa 5b             	cmp    dl,0x5b
c0009feb:	88 d0                	mov    al,dl
c0009fed:	75 8e                	jne    c0009f7d <LogicalDisk::assignDriveLetter()+0x3d>
c0009fef:	31 c0                	xor    eax,eax
c0009ff1:	83 c4 14             	add    esp,0x14
c0009ff4:	5b                   	pop    ebx
c0009ff5:	5e                   	pop    esi
c0009ff6:	5f                   	pop    edi
c0009ff7:	5d                   	pop    ebp
c0009ff8:	c3                   	ret    
c0009ff9:	90                   	nop

c0009ffa <LogicalDisk::mount()>:
c0009ffa:	56                   	push   esi
c0009ffb:	53                   	push   ebx
c0009ffc:	53                   	push   ebx
c0009ffd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a001:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a007:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a011:	85 db                	test   ebx,ebx
c000a013:	74 27                	je     c000a03c <LogicalDisk::mount()+0x42>
c000a015:	51                   	push   ecx
c000a016:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a01d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a01f:	83 e8 41             	sub    eax,0x41
c000a022:	50                   	push   eax
c000a023:	56                   	push   esi
c000a024:	53                   	push   ebx
c000a025:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a028:	83 c4 10             	add    esp,0x10
c000a02b:	84 c0                	test   al,al
c000a02d:	74 08                	je     c000a037 <LogicalDisk::mount()+0x3d>
c000a02f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a035:	eb 07                	jmp    c000a03e <LogicalDisk::mount()+0x44>
c000a037:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a03a:	eb d5                	jmp    c000a011 <LogicalDisk::mount()+0x17>
c000a03c:	31 c0                	xor    eax,eax
c000a03e:	5a                   	pop    edx
c000a03f:	5b                   	pop    ebx
c000a040:	5e                   	pop    esi
c000a041:	c3                   	ret    

c000a042 <LogicalDisk::unmount()>:
c000a042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a046:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a050:	c3                   	ret    
c000a051:	90                   	nop

c000a052 <LogicalDisk::eject()>:
c000a052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a056:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a05c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a05e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a062:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a065:	90                   	nop

c000a066 <LogicalDisk::unassignDriveLetter()>:
c000a066:	57                   	push   edi
c000a067:	56                   	push   esi
c000a068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a06c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a073:	85 c9                	test   ecx,ecx
c000a075:	75 0f                	jne    c000a086 <LogicalDisk::unassignDriveLetter()+0x20>
c000a077:	c7 44 24 0c d4 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021cd4
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	e9 70 4b 00 00       	jmp    c000ebf6 <KePanic(char const*)>
c000a086:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a08d:	83 e9 41             	sub    ecx,0x41
c000a090:	b8 01 00 00 00       	mov    eax,0x1
c000a095:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a0a0:	d3 e0                	shl    eax,cl
c000a0a2:	89 c7                	mov    edi,eax
c000a0a4:	f7 d0                	not    eax
c000a0a6:	c1 ff 1f             	sar    edi,0x1f
c000a0a9:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0af:	89 fe                	mov    esi,edi
c000a0b1:	f7 d6                	not    esi
c000a0b3:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0b9:	5e                   	pop    esi
c000a0ba:	5f                   	pop    edi
c000a0bb:	c3                   	ret    

c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0bc:	57                   	push   edi
c000a0bd:	56                   	push   esi
c000a0be:	53                   	push   ebx
c000a0bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0c7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0cf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0d5:	77 41                	ja     c000a118 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0d7:	99                   	cdq    
c000a0d8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0de:	01 c8                	add    eax,ecx
c000a0e0:	11 da                	adc    edx,ebx
c000a0e2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0e8:	19 d7                	sbb    edi,edx
c000a0ea:	72 33                	jb     c000a11f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a0ec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a0f2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a0f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0fc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a100:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a106:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a10c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a110:	5b                   	pop    ebx
c000a111:	5e                   	pop    esi
c000a112:	5f                   	pop    edi
c000a113:	e9 8e 0a 00 00       	jmp    c000aba6 <VCache::read(unsigned long long, int, void*)>
c000a118:	b8 05 00 00 00       	mov    eax,0x5
c000a11d:	eb 05                	jmp    c000a124 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a11f:	b8 07 00 00 00       	mov    eax,0x7
c000a124:	5b                   	pop    ebx
c000a125:	5e                   	pop    esi
c000a126:	5f                   	pop    edi
c000a127:	c3                   	ret    

c000a128 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a128:	57                   	push   edi
c000a129:	56                   	push   esi
c000a12a:	53                   	push   ebx
c000a12b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a12f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a133:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a13b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a141:	77 41                	ja     c000a184 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a143:	99                   	cdq    
c000a144:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a14a:	01 c8                	add    eax,ecx
c000a14c:	11 da                	adc    edx,ebx
c000a14e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a154:	19 d7                	sbb    edi,edx
c000a156:	72 33                	jb     c000a18b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a158:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a15e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a164:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a168:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a16c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a172:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a178:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a17c:	5b                   	pop    ebx
c000a17d:	5e                   	pop    esi
c000a17e:	5f                   	pop    edi
c000a17f:	e9 24 09 00 00       	jmp    c000aaa8 <VCache::write(unsigned long long, int, void*)>
c000a184:	b8 05 00 00 00       	mov    eax,0x5
c000a189:	eb 05                	jmp    c000a190 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a18b:	b8 07 00 00 00       	mov    eax,0x7
c000a190:	5b                   	pop    ebx
c000a191:	5e                   	pop    esi
c000a192:	5f                   	pop    edi
c000a193:	c3                   	ret    

c000a194 <Mouse::Mouse(char const*)>:
c000a194:	83 ec 0c             	sub    esp,0xc
c000a197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a19b:	83 ec 08             	sub    esp,0x8
c000a19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1a2:	50                   	push   eax
c000a1a3:	e8 20 f0 ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	ba 28 1d 02 c0       	mov    edx,0xc0021d28
c000a1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b4:	89 10                	mov    DWORD PTR [eax],edx
c000a1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ba:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1c4:	90                   	nop
c000a1c5:	83 c4 0c             	add    esp,0xc
c000a1c8:	c3                   	ret    
c000a1c9:	90                   	nop
c000a1ca:	66 90                	xchg   ax,ax

c000a1cc <Mouse::~Mouse()>:
c000a1cc:	83 ec 0c             	sub    esp,0xc
c000a1cf:	ba 28 1d 02 c0       	mov    edx,0xc0021d28
c000a1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d8:	89 10                	mov    DWORD PTR [eax],edx
c000a1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1de:	83 ec 0c             	sub    esp,0xc
c000a1e1:	50                   	push   eax
c000a1e2:	e8 81 ed ff ff       	call   c0008f68 <Device::~Device()>
c000a1e7:	83 c4 10             	add    esp,0x10
c000a1ea:	90                   	nop
c000a1eb:	83 c4 0c             	add    esp,0xc
c000a1ee:	c3                   	ret    
c000a1ef:	90                   	nop

c000a1f0 <Mouse::~Mouse()>:
c000a1f0:	83 ec 0c             	sub    esp,0xc
c000a1f3:	83 ec 0c             	sub    esp,0xc
c000a1f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1fa:	e8 cd ff ff ff       	call   c000a1cc <Mouse::~Mouse()>
c000a1ff:	83 c4 10             	add    esp,0x10
c000a202:	83 ec 08             	sub    esp,0x8
c000a205:	68 58 01 00 00       	push   0x158
c000a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20e:	e8 08 24 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	83 c4 0c             	add    esp,0xc
c000a219:	c3                   	ret    

c000a21a <NIC::getMAC()>:
c000a21a:	31 c0                	xor    eax,eax
c000a21c:	31 d2                	xor    edx,edx
c000a21e:	c3                   	ret    
c000a21f:	90                   	nop

c000a220 <NIC::write(int, unsigned char*, int*)>:
c000a220:	b8 01 00 00 00       	mov    eax,0x1
c000a225:	c3                   	ret    

c000a226 <NIC::NIC(char const*)>:
c000a226:	83 ec 0c             	sub    esp,0xc
c000a229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a22d:	83 ec 08             	sub    esp,0x8
c000a230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a234:	50                   	push   eax
c000a235:	e8 8e ef ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	ba 54 1d 02 c0       	mov    edx,0xc0021d54
c000a242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a246:	89 10                	mov    DWORD PTR [eax],edx
c000a248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a24c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a256:	90                   	nop
c000a257:	83 c4 0c             	add    esp,0xc
c000a25a:	c3                   	ret    
c000a25b:	90                   	nop

c000a25c <NIC::~NIC()>:
c000a25c:	83 ec 0c             	sub    esp,0xc
c000a25f:	ba 54 1d 02 c0       	mov    edx,0xc0021d54
c000a264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a268:	89 10                	mov    DWORD PTR [eax],edx
c000a26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26e:	83 ec 0c             	sub    esp,0xc
c000a271:	50                   	push   eax
c000a272:	e8 f1 ec ff ff       	call   c0008f68 <Device::~Device()>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	90                   	nop
c000a27b:	83 c4 0c             	add    esp,0xc
c000a27e:	c3                   	ret    
c000a27f:	90                   	nop

c000a280 <NIC::~NIC()>:
c000a280:	83 ec 0c             	sub    esp,0xc
c000a283:	83 ec 0c             	sub    esp,0xc
c000a286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28a:	e8 cd ff ff ff       	call   c000a25c <NIC::~NIC()>
c000a28f:	83 c4 10             	add    esp,0x10
c000a292:	83 ec 08             	sub    esp,0x8
c000a295:	68 58 01 00 00       	push   0x158
c000a29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29e:	e8 78 23 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	83 c4 0c             	add    esp,0xc
c000a2a9:	c3                   	ret    

c000a2aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2aa:	55                   	push   ebp
c000a2ab:	57                   	push   edi
c000a2ac:	56                   	push   esi
c000a2ad:	53                   	push   ebx
c000a2ae:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2b4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2bb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2c2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2c9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2d8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2df:	e8 e0 ef ff ff       	call   c00092c4 <Device::getName()>
c000a2e4:	5a                   	pop    edx
c000a2e5:	59                   	pop    ecx
c000a2e6:	50                   	push   eax
c000a2e7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2eb:	55                   	push   ebp
c000a2ec:	e8 5f 63 ff ff       	call   c0000650 <strcpy>
c000a2f1:	5b                   	pop    ebx
c000a2f2:	58                   	pop    eax
c000a2f3:	68 80 1d 02 c0       	push   0xc0021d80
c000a2f8:	55                   	push   ebp
c000a2f9:	e8 72 65 ff ff       	call   c0000870 <strcat>
c000a2fe:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a305:	e8 a6 45 00 00       	call   c000e8b0 <malloc>
c000a30a:	83 c4 0c             	add    esp,0xc
c000a30d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a311:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a315:	89 c3                	mov    ebx,eax
c000a317:	57                   	push   edi
c000a318:	56                   	push   esi
c000a319:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a320:	55                   	push   ebp
c000a321:	50                   	push   eax
c000a322:	e8 59 fb ff ff       	call   c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a327:	83 c4 14             	add    esp,0x14
c000a32a:	53                   	push   ebx
c000a32b:	e8 10 fc ff ff       	call   c0009f40 <LogicalDisk::assignDriveLetter()>
c000a330:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a333:	e8 c2 fc ff ff       	call   c0009ffa <LogicalDisk::mount()>
c000a338:	58                   	pop    eax
c000a339:	5a                   	pop    edx
c000a33a:	53                   	push   ebx
c000a33b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a342:	e8 1f ed ff ff       	call   c0009066 <Device::addChild(Device*)>
c000a347:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a34d:	5b                   	pop    ebx
c000a34e:	5e                   	pop    esi
c000a34f:	5f                   	pop    edi
c000a350:	5d                   	pop    ebp
c000a351:	c3                   	ret    

c000a352 <createPartitionsForDisk(PhysicalDisk*)>:
c000a352:	55                   	push   ebp
c000a353:	57                   	push   edi
c000a354:	56                   	push   esi
c000a355:	53                   	push   ebx
c000a356:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a35c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a363:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a369:	3d 00 02 00 00       	cmp    eax,0x200
c000a36e:	74 27                	je     c000a397 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a370:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a376:	83 ec 10             	sub    esp,0x10
c000a379:	99                   	cdq    
c000a37a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a380:	52                   	push   edx
c000a381:	50                   	push   eax
c000a382:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a386:	c1 e6 0a             	shl    esi,0xa
c000a389:	89 fd                	mov    ebp,edi
c000a38b:	55                   	push   ebp
c000a38c:	56                   	push   esi
c000a38d:	e8 42 5c 01 00       	call   c001ffd4 <__udivdi3>
c000a392:	e9 b9 00 00 00       	jmp    c000a450 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a397:	83 ec 0c             	sub    esp,0xc
c000a39a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a39c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3a0:	56                   	push   esi
c000a3a1:	6a 01                	push   0x1
c000a3a3:	6a 00                	push   0x0
c000a3a5:	6a 00                	push   0x0
c000a3a7:	53                   	push   ebx
c000a3a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3ab:	83 c4 20             	add    esp,0x20
c000a3ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3b6:	75 0a                	jne    c000a3c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3c0:	74 2c                	je     c000a3ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3c8:	83 ec 10             	sub    esp,0x10
c000a3cb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3d1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3d7:	89 f7                	mov    edi,esi
c000a3d9:	c1 ff 1f             	sar    edi,0x1f
c000a3dc:	57                   	push   edi
c000a3dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3e1:	56                   	push   esi
c000a3e2:	c1 e0 0a             	shl    eax,0xa
c000a3e5:	52                   	push   edx
c000a3e6:	50                   	push   eax
c000a3e7:	e8 e8 5b 01 00       	call   c001ffd4 <__udivdi3>
c000a3ec:	eb 62                	jmp    c000a450 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a3f5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a3fc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a403:	89 cf                	mov    edi,ecx
c000a405:	83 e2 7f             	and    edx,0x7f
c000a408:	83 e7 7f             	and    edi,0x7f
c000a40b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a40e:	83 e0 7f             	and    eax,0x7f
c000a411:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a414:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a41b:	83 e0 7f             	and    eax,0x7f
c000a41e:	01 d0                	add    eax,edx
c000a420:	84 c0                	test   al,al
c000a422:	89 c5                	mov    ebp,eax
c000a424:	74 41                	je     c000a467 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a426:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a42c:	83 ec 10             	sub    esp,0x10
c000a42f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a435:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a43b:	89 f7                	mov    edi,esi
c000a43d:	c1 ff 1f             	sar    edi,0x1f
c000a440:	57                   	push   edi
c000a441:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a445:	56                   	push   esi
c000a446:	c1 e0 0a             	shl    eax,0xa
c000a449:	52                   	push   edx
c000a44a:	50                   	push   eax
c000a44b:	e8 84 5b 01 00       	call   c001ffd4 <__udivdi3>
c000a450:	83 c4 14             	add    esp,0x14
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	6a 00                	push   0x0
c000a457:	6a 00                	push   0x0
c000a459:	53                   	push   ebx
c000a45a:	e8 4b fe ff ff       	call   c000a2aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a45f:	83 c4 20             	add    esp,0x20
c000a462:	e9 73 01 00 00       	jmp    c000a5da <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a467:	89 f0                	mov    eax,esi
c000a469:	31 c9                	xor    ecx,ecx
c000a46b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a472:	75 02                	jne    c000a476 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a474:	89 cd                	mov    ebp,ecx
c000a476:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a47e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a485:	83 c0 10             	add    eax,0x10
c000a488:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a490:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a497:	c1 e2 08             	shl    edx,0x8
c000a49a:	c1 e6 10             	shl    esi,0x10
c000a49d:	09 f2                	or     edx,esi
c000a49f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4a6:	09 f2                	or     edx,esi
c000a4a8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4af:	c1 e6 18             	shl    esi,0x18
c000a4b2:	09 f2                	or     edx,esi
c000a4b4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4bb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4bf:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4c6:	c1 e6 10             	shl    esi,0x10
c000a4c9:	c1 e2 08             	shl    edx,0x8
c000a4cc:	09 f2                	or     edx,esi
c000a4ce:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4d5:	09 f2                	or     edx,esi
c000a4d7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4de:	c1 e6 18             	shl    esi,0x18
c000a4e1:	09 f2                	or     edx,esi
c000a4e3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4e7:	41                   	inc    ecx
c000a4e8:	83 f9 04             	cmp    ecx,0x4
c000a4eb:	0f 85 7a ff ff ff    	jne    c000a46b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4f5:	83 f0 01             	xor    eax,0x1
c000a4f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a4fc:	75 4f                	jne    c000a54d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a4fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a502:	83 f0 01             	xor    eax,0x1
c000a505:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a509:	75 42                	jne    c000a54d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a50b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a511:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a519:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a51f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a527:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a52d:	89 f7                	mov    edi,esi
c000a52f:	c1 ff 1f             	sar    edi,0x1f
c000a532:	57                   	push   edi
c000a533:	56                   	push   esi
c000a534:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a538:	52                   	push   edx
c000a539:	c1 e0 0a             	shl    eax,0xa
c000a53c:	50                   	push   eax
c000a53d:	e8 92 5a 01 00       	call   c001ffd4 <__udivdi3>
c000a542:	83 c4 10             	add    esp,0x10
c000a545:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a549:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a54d:	89 e8                	mov    eax,ebp
c000a54f:	0f b6 e8             	movzx  ebp,al
c000a552:	85 ed                	test   ebp,ebp
c000a554:	74 50                	je     c000a5a6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a55a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a55e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a562:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a566:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a56a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a56e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a572:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a576:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a57a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a57e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a586:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a58a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a58e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a592:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a596:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a59a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a59e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5a2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5a6:	31 ed                	xor    ebp,ebp
c000a5a8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5ac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5b0:	89 f8                	mov    eax,edi
c000a5b2:	09 f0                	or     eax,esi
c000a5b4:	74 1e                	je     c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5be:	89 d1                	mov    ecx,edx
c000a5c0:	09 c1                	or     ecx,eax
c000a5c2:	74 10                	je     c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5c4:	83 ec 0c             	sub    esp,0xc
c000a5c7:	57                   	push   edi
c000a5c8:	56                   	push   esi
c000a5c9:	52                   	push   edx
c000a5ca:	50                   	push   eax
c000a5cb:	53                   	push   ebx
c000a5cc:	e8 d9 fc ff ff       	call   c000a2aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5d1:	83 c4 20             	add    esp,0x20
c000a5d4:	45                   	inc    ebp
c000a5d5:	83 fd 04             	cmp    ebp,0x4
c000a5d8:	75 ce                	jne    c000a5a8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5da:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5e0:	5b                   	pop    ebx
c000a5e1:	5e                   	pop    esi
c000a5e2:	5f                   	pop    edi
c000a5e3:	5d                   	pop    ebp
c000a5e4:	c3                   	ret    
c000a5e5:	66 90                	xchg   ax,ax
c000a5e7:	90                   	nop

c000a5e8 <Serial::Serial(char const*)>:
c000a5e8:	83 ec 0c             	sub    esp,0xc
c000a5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5ef:	83 ec 08             	sub    esp,0x8
c000a5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5f6:	50                   	push   eax
c000a5f7:	e8 cc eb ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a5fc:	83 c4 10             	add    esp,0x10
c000a5ff:	ba 94 1d 02 c0       	mov    edx,0xc0021d94
c000a604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a608:	89 10                	mov    DWORD PTR [eax],edx
c000a60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a60e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a618:	90                   	nop
c000a619:	83 c4 0c             	add    esp,0xc
c000a61c:	c3                   	ret    
c000a61d:	90                   	nop
c000a61e:	66 90                	xchg   ax,ax

c000a620 <Serial::~Serial()>:
c000a620:	83 ec 0c             	sub    esp,0xc
c000a623:	ba 94 1d 02 c0       	mov    edx,0xc0021d94
c000a628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62c:	89 10                	mov    DWORD PTR [eax],edx
c000a62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a632:	83 ec 0c             	sub    esp,0xc
c000a635:	50                   	push   eax
c000a636:	e8 2d e9 ff ff       	call   c0008f68 <Device::~Device()>
c000a63b:	83 c4 10             	add    esp,0x10
c000a63e:	90                   	nop
c000a63f:	83 c4 0c             	add    esp,0xc
c000a642:	c3                   	ret    
c000a643:	90                   	nop

c000a644 <Serial::~Serial()>:
c000a644:	83 ec 0c             	sub    esp,0xc
c000a647:	83 ec 0c             	sub    esp,0xc
c000a64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64e:	e8 cd ff ff ff       	call   c000a620 <Serial::~Serial()>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	68 58 01 00 00       	push   0x158
c000a65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a662:	e8 b4 1f 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	83 c4 0c             	add    esp,0xc
c000a66d:	c3                   	ret    
c000a66e:	66 90                	xchg   ax,ax

c000a670 <Timer::Timer(char const*)>:
c000a670:	83 ec 0c             	sub    esp,0xc
c000a673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a677:	83 ec 08             	sub    esp,0x8
c000a67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67e:	50                   	push   eax
c000a67f:	e8 44 eb ff ff       	call   c00091c8 <Device::Device(char const*)>
c000a684:	83 c4 10             	add    esp,0x10
c000a687:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000a68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a690:	89 10                	mov    DWORD PTR [eax],edx
c000a692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a696:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6a0:	90                   	nop
c000a6a1:	83 c4 0c             	add    esp,0xc
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop
c000a6a6:	66 90                	xchg   ax,ax

c000a6a8 <Timer::~Timer()>:
c000a6a8:	83 ec 0c             	sub    esp,0xc
c000a6ab:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000a6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b4:	89 10                	mov    DWORD PTR [eax],edx
c000a6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ba:	83 ec 0c             	sub    esp,0xc
c000a6bd:	50                   	push   eax
c000a6be:	e8 a5 e8 ff ff       	call   c0008f68 <Device::~Device()>
c000a6c3:	83 c4 10             	add    esp,0x10
c000a6c6:	90                   	nop
c000a6c7:	83 c4 0c             	add    esp,0xc
c000a6ca:	c3                   	ret    
c000a6cb:	90                   	nop

c000a6cc <Timer::~Timer()>:
c000a6cc:	83 ec 0c             	sub    esp,0xc
c000a6cf:	83 ec 0c             	sub    esp,0xc
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	e8 cd ff ff ff       	call   c000a6a8 <Timer::~Timer()>
c000a6db:	83 c4 10             	add    esp,0x10
c000a6de:	83 ec 08             	sub    esp,0x8
c000a6e1:	68 5c 01 00 00       	push   0x15c
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 2c 1f 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 c4 0c             	add    esp,0xc
c000a6f5:	c3                   	ret    

c000a6f6 <Timer::read()>:
c000a6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a700:	c3                   	ret    

c000a701 <setupTimer(int)>:
c000a701:	53                   	push   ebx
c000a702:	83 ec 14             	sub    esp,0x14
c000a705:	68 5c 01 00 00       	push   0x15c
c000a70a:	e8 a1 41 00 00       	call   c000e8b0 <malloc>
c000a70f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a712:	89 c3                	mov    ebx,eax
c000a714:	e8 3f 51 01 00       	call   c001f858 <PIT::PIT()>
c000a719:	58                   	pop    eax
c000a71a:	5a                   	pop    edx
c000a71b:	53                   	push   ebx
c000a71c:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a722:	e8 3f e9 ff ff       	call   c0009066 <Device::addChild(Device*)>
c000a727:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a729:	6a 00                	push   0x0
c000a72b:	6a 00                	push   0x0
c000a72d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a731:	53                   	push   ebx
c000a732:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a735:	83 c4 28             	add    esp,0x28
c000a738:	89 d8                	mov    eax,ebx
c000a73a:	5b                   	pop    ebx
c000a73b:	c3                   	ret    

c000a73c <timerHandler(unsigned int)>:
c000a73c:	57                   	push   edi
c000a73d:	56                   	push   esi
c000a73e:	53                   	push   ebx
c000a73f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a743:	01 3d ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,edi
c000a749:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a750:	0f 84 02 01 00 00    	je     c000a858 <timerHandler(unsigned int)+0x11c>
c000a756:	fa                   	cli    
c000a757:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000a75d:	83 ec 0c             	sub    esp,0xc
c000a760:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a765:	e8 02 5c 01 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	84 c0                	test   al,al
c000a76f:	0f 85 9f 00 00 00    	jne    c000a814 <timerHandler(unsigned int)+0xd8>
c000a775:	83 ec 0c             	sub    esp,0xc
c000a778:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a77d:	e8 06 5c 01 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 c6                	mov    esi,eax
c000a787:	90                   	nop
c000a788:	83 ec 0c             	sub    esp,0xc
c000a78b:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a790:	e8 f3 5b 01 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a795:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a79c:	89 c3                	mov    ebx,eax
c000a79e:	e8 ed 5b 01 00       	call   c0020390 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7a3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7a6:	83 c4 10             	add    esp,0x10
c000a7a9:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7af:	77 23                	ja     c000a7d4 <timerHandler(unsigned int)+0x98>
c000a7b1:	83 ec 0c             	sub    esp,0xc
c000a7b4:	53                   	push   ebx
c000a7b5:	e8 9e b1 00 00       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c000a7ba:	83 c4 10             	add    esp,0x10
c000a7bd:	39 de                	cmp    esi,ebx
c000a7bf:	75 27                	jne    c000a7e8 <timerHandler(unsigned int)+0xac>
c000a7c1:	83 ec 0c             	sub    esp,0xc
c000a7c4:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7c9:	e8 ba 5b 01 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ce:	89 c6                	mov    esi,eax
c000a7d0:	eb 12                	jmp    c000a7e4 <timerHandler(unsigned int)+0xa8>
c000a7d2:	66 90                	xchg   ax,ax
c000a7d4:	50                   	push   eax
c000a7d5:	50                   	push   eax
c000a7d6:	53                   	push   ebx
c000a7d7:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7dc:	e8 6b 5c 01 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a7e1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7e4:	83 c4 10             	add    esp,0x10
c000a7e7:	90                   	nop
c000a7e8:	83 ec 0c             	sub    esp,0xc
c000a7eb:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7f0:	e8 77 5b 01 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7f5:	83 c4 10             	add    esp,0x10
c000a7f8:	84 c0                	test   al,al
c000a7fa:	75 18                	jne    c000a814 <timerHandler(unsigned int)+0xd8>
c000a7fc:	83 ec 0c             	sub    esp,0xc
c000a7ff:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a804:	e8 7f 5b 01 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	39 f0                	cmp    eax,esi
c000a80e:	0f 85 74 ff ff ff    	jne    c000a788 <timerHandler(unsigned int)+0x4c>
c000a814:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a81a:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a81d:	85 c0                	test   eax,eax
c000a81f:	74 23                	je     c000a844 <timerHandler(unsigned int)+0x108>
c000a821:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a828:	74 1a                	je     c000a844 <timerHandler(unsigned int)+0x108>
c000a82a:	29 f8                	sub    eax,edi
c000a82c:	8b 0d ec a7 02 c0    	mov    ecx,DWORD PTR ds:0xc002a7ec
c000a832:	89 42 34             	mov    DWORD PTR [edx+0x34],eax
c000a835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a83a:	39 48 34             	cmp    DWORD PTR [eax+0x34],ecx
c000a83d:	77 05                	ja     c000a844 <timerHandler(unsigned int)+0x108>
c000a83f:	e8 04 ae 00 00       	call   c0015648 <schedule()>
c000a844:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000a84b:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000a852:	75 04                	jne    c000a858 <timerHandler(unsigned int)+0x11c>
c000a854:	fb                   	sti    
c000a855:	8d 76 00             	lea    esi,[esi+0x0]
c000a858:	5b                   	pop    ebx
c000a859:	5e                   	pop    esi
c000a85a:	5f                   	pop    edi
c000a85b:	c3                   	ret    

c000a85c <VCache::VCache(PhysicalDisk*)>:
c000a85c:	53                   	push   ebx
c000a85d:	83 ec 18             	sub    esp,0x18
c000a860:	ba 9c 1e 02 c0       	mov    edx,0xc0021e9c
c000a865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a869:	89 10                	mov    DWORD PTR [eax],edx
c000a86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a885:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a88c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a897:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a89e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a8a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8a9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a8b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a8c3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a8ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8de:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a8e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a8ed:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a8f5:	83 ec 0c             	sub    esp,0xc
c000a8f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a8fc:	e8 af 3f 00 00       	call   c000e8b0 <malloc>
c000a901:	83 c4 10             	add    esp,0x10
c000a904:	89 c3                	mov    ebx,eax
c000a906:	83 ec 0c             	sub    esp,0xc
c000a909:	53                   	push   ebx
c000a90a:	e8 cd 42 00 00       	call   c000ebdc <Mutex::Mutex()>
c000a90f:	83 c4 10             	add    esp,0x10
c000a912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a916:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a921:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a928:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a92f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a933:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a940:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a944:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a94a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a950:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a954:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a957:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a962:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a966:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a96c:	05 00 01 00 00       	add    eax,0x100
c000a971:	c1 e0 04             	shl    eax,0x4
c000a974:	83 ec 0c             	sub    esp,0xc
c000a977:	50                   	push   eax
c000a978:	e8 33 3f 00 00       	call   c000e8b0 <malloc>
c000a97d:	83 c4 10             	add    esp,0x10
c000a980:	89 c2                	mov    edx,eax
c000a982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a986:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a98d:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a998:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a99c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9a6:	89 d0                	mov    eax,edx
c000a9a8:	c1 e0 02             	shl    eax,0x2
c000a9ab:	01 d0                	add    eax,edx
c000a9ad:	c1 e0 04             	shl    eax,0x4
c000a9b0:	83 ec 0c             	sub    esp,0xc
c000a9b3:	50                   	push   eax
c000a9b4:	e8 f7 3e 00 00       	call   c000e8b0 <malloc>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 c2                	mov    edx,eax
c000a9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a9c5:	90                   	nop
c000a9c6:	83 c4 18             	add    esp,0x18
c000a9c9:	5b                   	pop    ebx
c000a9ca:	c3                   	ret    
c000a9cb:	90                   	nop

c000a9cc <VCache::invalidateReadBuffer()>:
c000a9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9d0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000a9d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a9da:	c3                   	ret    
c000a9db:	90                   	nop

c000a9dc <VCache::writeWriteBuffer()>:
c000a9dc:	53                   	push   ebx
c000a9dd:	83 ec 08             	sub    esp,0x8
c000a9e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a9e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000a9e8:	74 1e                	je     c000aa08 <VCache::writeWriteBuffer()+0x2c>
c000a9ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a9ed:	83 ec 0c             	sub    esp,0xc
c000a9f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000a9f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000a9f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000a9fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000a9fe:	50                   	push   eax
c000a9ff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa02:	83 c4 20             	add    esp,0x20
c000aa05:	8d 76 00             	lea    esi,[esi+0x0]
c000aa08:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa0f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa16:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa1a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa21:	83 c4 08             	add    esp,0x8
c000aa24:	5b                   	pop    ebx
c000aa25:	c3                   	ret    
c000aa26:	66 90                	xchg   ax,ax

c000aa28 <VCache::~VCache()>:
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	ba 9c 1e 02 c0       	mov    edx,0xc0021e9c
c000aa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa34:	89 10                	mov    DWORD PTR [eax],edx
c000aa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa3d:	0f b6 c0             	movzx  eax,al
c000aa40:	85 c0                	test   eax,eax
c000aa42:	74 10                	je     c000aa54 <VCache::~VCache()+0x2c>
c000aa44:	83 ec 0c             	sub    esp,0xc
c000aa47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa4b:	e8 8c ff ff ff       	call   c000a9dc <VCache::writeWriteBuffer()>
c000aa50:	83 c4 10             	add    esp,0x10
c000aa53:	90                   	nop
c000aa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa58:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	50                   	push   eax
c000aa5f:	e8 5c 3e 00 00       	call   c000e8c0 <free>
c000aa64:	83 c4 10             	add    esp,0x10
c000aa67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aa6e:	83 ec 0c             	sub    esp,0xc
c000aa71:	50                   	push   eax
c000aa72:	e8 49 3e 00 00       	call   c000e8c0 <free>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	90                   	nop
c000aa7b:	83 c4 0c             	add    esp,0xc
c000aa7e:	c3                   	ret    
c000aa7f:	90                   	nop

c000aa80 <VCache::~VCache()>:
c000aa80:	83 ec 0c             	sub    esp,0xc
c000aa83:	83 ec 0c             	sub    esp,0xc
c000aa86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8a:	e8 99 ff ff ff       	call   c000aa28 <VCache::~VCache()>
c000aa8f:	83 c4 10             	add    esp,0x10
c000aa92:	83 ec 08             	sub    esp,0x8
c000aa95:	6a 44                	push   0x44
c000aa97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa9b:	e8 7b 1b 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c000aaa0:	83 c4 10             	add    esp,0x10
c000aaa3:	83 c4 0c             	add    esp,0xc
c000aaa6:	c3                   	ret    
c000aaa7:	90                   	nop

c000aaa8 <VCache::write(unsigned long long, int, void*)>:
c000aaa8:	55                   	push   ebp
c000aaa9:	57                   	push   edi
c000aaaa:	56                   	push   esi
c000aaab:	53                   	push   ebx
c000aaac:	83 ec 1c             	sub    esp,0x1c
c000aaaf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aab3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000aab7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000aabb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000aabf:	e8 f0 a8 00 00       	call   c00153b4 <KeDisablePreemption()>
c000aac4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000aac8:	74 0e                	je     c000aad8 <VCache::write(unsigned long long, int, void*)+0x30>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	53                   	push   ebx
c000aace:	e8 f9 fe ff ff       	call   c000a9cc <VCache::invalidateReadBuffer()>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	66 90                	xchg   ax,ax
c000aad8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aadc:	74 5e                	je     c000ab3c <VCache::write(unsigned long long, int, void*)+0x94>
c000aade:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000aae1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aae5:	99                   	cdq    
c000aae6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000aae9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000aaec:	89 c1                	mov    ecx,eax
c000aaee:	31 f1                	xor    ecx,esi
c000aaf0:	89 d0                	mov    eax,edx
c000aaf2:	31 f8                	xor    eax,edi
c000aaf4:	09 c1                	or     ecx,eax
c000aaf6:	75 38                	jne    c000ab30 <VCache::write(unsigned long long, int, void*)+0x88>
c000aaf8:	83 fd 01             	cmp    ebp,0x1
c000aafb:	75 33                	jne    c000ab30 <VCache::write(unsigned long long, int, void*)+0x88>
c000aafd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab00:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab04:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab08:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab0e:	0f af f9             	imul   edi,ecx
c000ab11:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab19:	40                   	inc    eax
c000ab1a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab1d:	83 f8 50             	cmp    eax,0x50
c000ab20:	75 72                	jne    c000ab94 <VCache::write(unsigned long long, int, void*)+0xec>
c000ab22:	83 ec 0c             	sub    esp,0xc
c000ab25:	53                   	push   ebx
c000ab26:	e8 b1 fe ff ff       	call   c000a9dc <VCache::writeWriteBuffer()>
c000ab2b:	83 c4 10             	add    esp,0x10
c000ab2e:	eb 64                	jmp    c000ab94 <VCache::write(unsigned long long, int, void*)+0xec>
c000ab30:	83 ec 0c             	sub    esp,0xc
c000ab33:	53                   	push   ebx
c000ab34:	e8 a3 fe ff ff       	call   c000a9dc <VCache::writeWriteBuffer()>
c000ab39:	83 c4 10             	add    esp,0x10
c000ab3c:	83 fd 4f             	cmp    ebp,0x4f
c000ab3f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab42:	7f 20                	jg     c000ab64 <VCache::write(unsigned long long, int, void*)+0xbc>
c000ab44:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000ab47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab4b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000ab4e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000ab51:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000ab54:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000ab58:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab60:	eb 32                	jmp    c000ab94 <VCache::write(unsigned long long, int, void*)+0xec>
c000ab62:	66 90                	xchg   ax,ax
c000ab64:	83 ec 0c             	sub    esp,0xc
c000ab67:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab6d:	55                   	push   ebp
c000ab6e:	57                   	push   edi
c000ab6f:	56                   	push   esi
c000ab70:	50                   	push   eax
c000ab71:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ab74:	83 c4 20             	add    esp,0x20
c000ab77:	89 c3                	mov    ebx,eax
c000ab79:	e8 5e a8 00 00       	call   c00153dc <KeRestorePreemption()>
c000ab7e:	85 db                	test   ebx,ebx
c000ab80:	74 1a                	je     c000ab9c <VCache::write(unsigned long long, int, void*)+0xf4>
c000ab82:	83 ec 0c             	sub    esp,0xc
c000ab85:	68 54 1e 02 c0       	push   0xc0021e54
c000ab8a:	e8 bf c3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ab8f:	83 c4 10             	add    esp,0x10
c000ab92:	eb 08                	jmp    c000ab9c <VCache::write(unsigned long long, int, void*)+0xf4>
c000ab94:	e8 43 a8 00 00       	call   c00153dc <KeRestorePreemption()>
c000ab99:	31 db                	xor    ebx,ebx
c000ab9b:	90                   	nop
c000ab9c:	83 c4 1c             	add    esp,0x1c
c000ab9f:	89 d8                	mov    eax,ebx
c000aba1:	5b                   	pop    ebx
c000aba2:	5e                   	pop    esi
c000aba3:	5f                   	pop    edi
c000aba4:	5d                   	pop    ebp
c000aba5:	c3                   	ret    

c000aba6 <VCache::read(unsigned long long, int, void*)>:
c000aba6:	55                   	push   ebp
c000aba7:	57                   	push   edi
c000aba8:	56                   	push   esi
c000aba9:	53                   	push   ebx
c000abaa:	83 ec 1c             	sub    esp,0x1c
c000abad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000abb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000abb5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000abb9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000abbd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000abc1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abc4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc8:	e8 e7 a7 00 00       	call   c00153b4 <KeDisablePreemption()>
c000abcd:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000abd1:	74 0d                	je     c000abe0 <VCache::read(unsigned long long, int, void*)+0x3a>
c000abd3:	83 ec 0c             	sub    esp,0xc
c000abd6:	53                   	push   ebx
c000abd7:	e8 00 fe ff ff       	call   c000a9dc <VCache::writeWriteBuffer()>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	90                   	nop
c000abe0:	83 fe 01             	cmp    esi,0x1
c000abe3:	0f 85 a7 00 00 00    	jne    c000ac90 <VCache::read(unsigned long long, int, void*)+0xea>
c000abe9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000abec:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000abf3:	0f 85 97 00 00 00    	jne    c000ac90 <VCache::read(unsigned long long, int, void*)+0xea>
c000abf9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000abfc:	89 d1                	mov    ecx,edx
c000abfe:	f7 d9                	neg    ecx
c000ac00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac04:	89 cf                	mov    edi,ecx
c000ac06:	23 0c 24             	and    ecx,DWORD PTR [esp]
c000ac09:	c1 ff 1f             	sar    edi,0x1f
c000ac0c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ac10:	89 ce                	mov    esi,ecx
c000ac12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac16:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000ac1a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac1e:	89 cf                	mov    edi,ecx
c000ac20:	74 0a                	je     c000ac2c <VCache::read(unsigned long long, int, void*)+0x86>
c000ac22:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac25:	75 05                	jne    c000ac2c <VCache::read(unsigned long long, int, void*)+0x86>
c000ac27:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ac2a:	74 3c                	je     c000ac68 <VCache::read(unsigned long long, int, void*)+0xc2>
c000ac2c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000ac2f:	83 ec 0c             	sub    esp,0xc
c000ac32:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ac36:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c000ac39:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac3b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ac3e:	52                   	push   edx
c000ac3f:	57                   	push   edi
c000ac40:	56                   	push   esi
c000ac41:	50                   	push   eax
c000ac42:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ac45:	83 c4 20             	add    esp,0x20
c000ac48:	85 c0                	test   eax,eax
c000ac4a:	89 c6                	mov    esi,eax
c000ac4c:	74 1a                	je     c000ac68 <VCache::read(unsigned long long, int, void*)+0xc2>
c000ac4e:	83 ec 0c             	sub    esp,0xc
c000ac51:	68 6c 1e 02 c0       	push   0xc0021e6c
c000ac56:	e8 f3 c2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ac5b:	e8 7c a7 00 00       	call   c00153dc <KeRestorePreemption()>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	eb 53                	jmp    c000acb8 <VCache::read(unsigned long long, int, void*)+0x112>
c000ac65:	8d 76 00             	lea    esi,[esi+0x0]
c000ac68:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac6b:	89 ef                	mov    edi,ebp
c000ac6d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac73:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac76:	8d 70 ff             	lea    esi,[eax-0x1]
c000ac79:	23 34 24             	and    esi,DWORD PTR [esp]
c000ac7c:	0f af f1             	imul   esi,ecx
c000ac7f:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac84:	e8 53 a7 00 00       	call   c00153dc <KeRestorePreemption()>
c000ac89:	31 f6                	xor    esi,esi
c000ac8b:	eb 2b                	jmp    c000acb8 <VCache::read(unsigned long long, int, void*)+0x112>
c000ac8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	53                   	push   ebx
c000ac94:	e8 33 fd ff ff       	call   c000a9cc <VCache::invalidateReadBuffer()>
c000ac99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac9c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aca1:	56                   	push   esi
c000aca2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	50                   	push   eax
c000acab:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000acae:	83 c4 20             	add    esp,0x20
c000acb1:	89 c6                	mov    esi,eax
c000acb3:	e8 24 a7 00 00       	call   c00153dc <KeRestorePreemption()>
c000acb8:	83 c4 1c             	add    esp,0x1c
c000acbb:	89 f0                	mov    eax,esi
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	5f                   	pop    edi
c000acc0:	5d                   	pop    ebp
c000acc1:	c3                   	ret    

c000acc2 <Video::putrect(int, int, int, int, unsigned int)>:
c000acc2:	55                   	push   ebp
c000acc3:	57                   	push   edi
c000acc4:	56                   	push   esi
c000acc5:	53                   	push   ebx
c000acc6:	83 ec 1c             	sub    esp,0x1c
c000acc9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000accd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000acd1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000acd5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000acd9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000acdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ace1:	01 df                	add    edi,ebx
c000ace3:	39 fb                	cmp    ebx,edi
c000ace5:	7d 1f                	jge    c000ad06 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ace7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aceb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000acef:	7d 12                	jge    c000ad03 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000acf1:	8b 16                	mov    edx,DWORD PTR [esi]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	53                   	push   ebx
c000acf8:	55                   	push   ebp
c000acf9:	45                   	inc    ebp
c000acfa:	56                   	push   esi
c000acfb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000acfe:	83 c4 10             	add    esp,0x10
c000ad01:	eb e8                	jmp    c000aceb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad03:	43                   	inc    ebx
c000ad04:	eb dd                	jmp    c000ace3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad06:	83 c4 1c             	add    esp,0x1c
c000ad09:	5b                   	pop    ebx
c000ad0a:	5e                   	pop    esi
c000ad0b:	5f                   	pop    edi
c000ad0c:	5d                   	pop    ebp
c000ad0d:	c3                   	ret    

c000ad0e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad0e:	55                   	push   ebp
c000ad0f:	57                   	push   edi
c000ad10:	31 ff                	xor    edi,edi
c000ad12:	56                   	push   esi
c000ad13:	53                   	push   ebx
c000ad14:	83 ec 1c             	sub    esp,0x1c
c000ad17:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad1f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad26:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad33:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad37:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad3a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad3e:	01 f9                	add    ecx,edi
c000ad40:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad44:	7d 2f                	jge    c000ad75 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad46:	31 f6                	xor    esi,esi
c000ad48:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad4c:	01 f2                	add    edx,esi
c000ad4e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad52:	7d 1a                	jge    c000ad6e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad57:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad5a:	46                   	inc    esi
c000ad5b:	51                   	push   ecx
c000ad5c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ad60:	52                   	push   edx
c000ad61:	55                   	push   ebp
c000ad62:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad65:	83 c4 10             	add    esp,0x10
c000ad68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ad6c:	eb da                	jmp    c000ad48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ad6e:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ad72:	47                   	inc    edi
c000ad73:	eb c5                	jmp    c000ad3a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ad75:	83 c4 1c             	add    esp,0x1c
c000ad78:	5b                   	pop    ebx
c000ad79:	5e                   	pop    esi
c000ad7a:	5f                   	pop    edi
c000ad7b:	5d                   	pop    ebp
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <Video::blit(unsigned int*, int, int, int, int)>:
c000ad7e:	55                   	push   ebp
c000ad7f:	ba 00 00 00 00       	mov    edx,0x0
c000ad84:	57                   	push   edi
c000ad85:	56                   	push   esi
c000ad86:	53                   	push   ebx
c000ad87:	83 ec 1c             	sub    esp,0x1c
c000ad8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ad8e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ad92:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad96:	85 c0                	test   eax,eax
c000ad98:	0f 49 d0             	cmovns edx,eax
c000ad9b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ada2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ada6:	89 eb                	mov    ebx,ebp
c000ada8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000adac:	01 ea                	add    edx,ebp
c000adae:	39 da                	cmp    edx,ebx
c000adb0:	7e 54                	jle    c000ae06 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adb2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adb8:	7c 4c                	jl     c000ae06 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adba:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adbe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000adc2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000adc6:	01 c1                	add    ecx,eax
c000adc8:	39 f9                	cmp    ecx,edi
c000adca:	7e 2f                	jle    c000adfb <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000adcc:	83 c2 04             	add    edx,0x4
c000adcf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000add5:	7c 21                	jl     c000adf8 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000add7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000addb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000addd:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ade0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ade4:	55                   	push   ebp
c000ade5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ade9:	56                   	push   esi
c000adea:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000aded:	83 c4 10             	add    esp,0x10
c000adf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adf8:	47                   	inc    edi
c000adf9:	eb c7                	jmp    c000adc2 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000adfb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000adff:	43                   	inc    ebx
c000ae00:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ae04:	eb a2                	jmp    c000ada8 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ae06:	83 c4 1c             	add    esp,0x1c
c000ae09:	5b                   	pop    ebx
c000ae0a:	5e                   	pop    esi
c000ae0b:	5f                   	pop    edi
c000ae0c:	5d                   	pop    ebp
c000ae0d:	c3                   	ret    

c000ae0e <Video::clearScreen(unsigned int)>:
c000ae0e:	57                   	push   edi
c000ae0f:	56                   	push   esi
c000ae10:	53                   	push   ebx
c000ae11:	31 db                	xor    ebx,ebx
c000ae13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae17:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae1d:	7e 1f                	jle    c000ae3e <Video::clearScreen(unsigned int)+0x30>
c000ae1f:	31 ff                	xor    edi,edi
c000ae21:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae27:	7e 12                	jle    c000ae3b <Video::clearScreen(unsigned int)+0x2d>
c000ae29:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae2f:	53                   	push   ebx
c000ae30:	57                   	push   edi
c000ae31:	47                   	inc    edi
c000ae32:	56                   	push   esi
c000ae33:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	eb e6                	jmp    c000ae21 <Video::clearScreen(unsigned int)+0x13>
c000ae3b:	43                   	inc    ebx
c000ae3c:	eb d9                	jmp    c000ae17 <Video::clearScreen(unsigned int)+0x9>
c000ae3e:	5b                   	pop    ebx
c000ae3f:	5e                   	pop    esi
c000ae40:	5f                   	pop    edi
c000ae41:	c3                   	ret    

c000ae42 <Video::putpixel(int, int, unsigned int)>:
c000ae42:	c7 44 24 04 a4 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ea4
c000ae4a:	e9 a7 3d 00 00       	jmp    c000ebf6 <KePanic(char const*)>
c000ae4f:	90                   	nop

c000ae50 <Video::readPixelApprox(int, int)>:
c000ae50:	83 ec 18             	sub    esp,0x18
c000ae53:	68 c5 1e 02 c0       	push   0xc0021ec5
c000ae58:	e8 99 3d 00 00       	call   c000ebf6 <KePanic(char const*)>
c000ae5d:	31 c0                	xor    eax,eax
c000ae5f:	83 c4 1c             	add    esp,0x1c
c000ae62:	c3                   	ret    
c000ae63:	90                   	nop

c000ae64 <Video::Video(char const*)>:
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6b:	83 ec 08             	sub    esp,0x8
c000ae6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae72:	50                   	push   eax
c000ae73:	e8 50 e3 ff ff       	call   c00091c8 <Device::Device(char const*)>
c000ae78:	83 c4 10             	add    esp,0x10
c000ae7b:	ba 68 1f 02 c0       	mov    edx,0xc0021f68
c000ae80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae84:	89 10                	mov    DWORD PTR [eax],edx
c000ae86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ae94:	90                   	nop
c000ae95:	83 c4 0c             	add    esp,0xc
c000ae98:	c3                   	ret    
c000ae99:	90                   	nop

c000ae9a <Video::~Video()>:
c000ae9a:	83 ec 0c             	sub    esp,0xc
c000ae9d:	ba 68 1f 02 c0       	mov    edx,0xc0021f68
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	89 10                	mov    DWORD PTR [eax],edx
c000aea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeac:	83 ec 0c             	sub    esp,0xc
c000aeaf:	50                   	push   eax
c000aeb0:	e8 b3 e0 ff ff       	call   c0008f68 <Device::~Device()>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	90                   	nop
c000aeb9:	83 c4 0c             	add    esp,0xc
c000aebc:	c3                   	ret    
c000aebd:	90                   	nop

c000aebe <Video::~Video()>:
c000aebe:	83 ec 0c             	sub    esp,0xc
c000aec1:	83 ec 0c             	sub    esp,0xc
c000aec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec8:	e8 cd ff ff ff       	call   c000ae9a <Video::~Video()>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	83 ec 08             	sub    esp,0x8
c000aed3:	68 64 01 00 00       	push   0x164
c000aed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aedc:	e8 3a 17 00 00       	call   c000c61b <operator delete(void*, unsigned long)>
c000aee1:	83 c4 10             	add    esp,0x10
c000aee4:	83 c4 0c             	add    esp,0xc
c000aee7:	c3                   	ret    

c000aee8 <Video::isMonochrome()>:
c000aee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeec:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000aef2:	c3                   	ret    
c000aef3:	90                   	nop

c000aef4 <Video::getWidth()>:
c000aef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aef8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Video::getHeight()>:
c000af00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af04:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af0a:	c3                   	ret    
c000af0b:	90                   	nop

c000af0c <Video::drawCursor(int, int, unsigned int*, int)>:
c000af0c:	55                   	push   ebp
c000af0d:	57                   	push   edi
c000af0e:	56                   	push   esi
c000af0f:	53                   	push   ebx
c000af10:	83 ec 2c             	sub    esp,0x2c
c000af13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000af1b:	83 f8 01             	cmp    eax,0x1
c000af1e:	19 c9                	sbb    ecx,ecx
c000af20:	31 db                	xor    ebx,ebx
c000af22:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af26:	89 ce                	mov    esi,ecx
c000af28:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af30:	f7 d6                	not    esi
c000af32:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000af38:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af3c:	01 d8                	add    eax,ebx
c000af3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af42:	57                   	push   edi
c000af43:	e8 b8 ff ff ff       	call   c000af00 <Video::getHeight()>
c000af48:	59                   	pop    ecx
c000af49:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af4d:	7e 70                	jle    c000afbf <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af4f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af53:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000af57:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af5e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af62:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000af69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af6d:	89 e8                	mov    eax,ebp
c000af6f:	83 c0 20             	add    eax,0x20
c000af72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af76:	57                   	push   edi
c000af77:	e8 78 ff ff ff       	call   c000aef4 <Video::getWidth()>
c000af7c:	5a                   	pop    edx
c000af7d:	39 c5                	cmp    ebp,eax
c000af7f:	7d 34                	jge    c000afb5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000af81:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000af86:	74 05                	je     c000af8d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000af88:	8b 07                	mov    eax,DWORD PTR [edi]
c000af8a:	56                   	push   esi
c000af8b:	eb 0d                	jmp    c000af9a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000af8d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000af92:	74 12                	je     c000afa6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000af94:	8b 07                	mov    eax,DWORD PTR [edi]
c000af96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af9e:	55                   	push   ebp
c000af9f:	57                   	push   edi
c000afa0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afa3:	83 c4 10             	add    esp,0x10
c000afa6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afaa:	45                   	inc    ebp
c000afab:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afaf:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000afb3:	75 c1                	jne    c000af76 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000afb5:	43                   	inc    ebx
c000afb6:	83 fb 20             	cmp    ebx,0x20
c000afb9:	0f 85 79 ff ff ff    	jne    c000af38 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000afbf:	83 c4 2c             	add    esp,0x2c
c000afc2:	5b                   	pop    ebx
c000afc3:	5e                   	pop    esi
c000afc4:	5f                   	pop    edi
c000afc5:	5d                   	pop    ebp
c000afc6:	c3                   	ret    
c000afc7:	90                   	nop

c000afc8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000afc8:	55                   	push   ebp
c000afc9:	57                   	push   edi
c000afca:	56                   	push   esi
c000afcb:	53                   	push   ebx
c000afcc:	83 ec 48             	sub    esp,0x48
c000afcf:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000afd3:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000afd7:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000afdb:	c1 e0 08             	shl    eax,0x8
c000afde:	01 d0                	add    eax,edx
c000afe0:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000afe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afe8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000afec:	c1 e0 08             	shl    eax,0x8
c000afef:	01 d0                	add    eax,edx
c000aff1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff9:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000affe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b006:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b00d:	50                   	push   eax
c000b00e:	e8 9d 38 00 00       	call   c000e8b0 <malloc>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	85 c0                	test   eax,eax
c000b018:	89 c5                	mov    ebp,eax
c000b01a:	75 10                	jne    c000b02c <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b01c:	83 ec 0c             	sub    esp,0xc
c000b01f:	68 f0 1e 02 c0       	push   0xc0021ef0
c000b024:	e8 cd 3b 00 00       	call   c000ebf6 <KePanic(char const*)>
c000b029:	83 c4 10             	add    esp,0x10
c000b02c:	52                   	push   edx
c000b02d:	bf 12 00 00 00       	mov    edi,0x12
c000b032:	52                   	push   edx
c000b033:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b037:	50                   	push   eax
c000b038:	68 00 1f 02 c0       	push   0xc0021f00
c000b03d:	e8 0c bf ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b042:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b045:	83 e0 20             	and    eax,0x20
c000b048:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b04c:	85 c0                	test   eax,eax
c000b04e:	59                   	pop    ecx
c000b04f:	0f 94 c0             	sete   al
c000b052:	0f b6 c0             	movzx  eax,al
c000b055:	5e                   	pop    esi
c000b056:	50                   	push   eax
c000b057:	68 0a 1f 02 c0       	push   0xc0021f0a
c000b05c:	e8 ed be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b061:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	85 c0                	test   eax,eax
c000b06a:	89 c2                	mov    edx,eax
c000b06c:	74 11                	je     c000b07f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b06e:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b072:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b076:	c1 ff 03             	sar    edi,0x3
c000b079:	0f af f9             	imul   edi,ecx
c000b07c:	83 c7 12             	add    edi,0x12
c000b07f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b084:	74 07                	je     c000b08d <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b086:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b08b:	75 12                	jne    c000b09f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b08d:	83 ec 0c             	sub    esp,0xc
c000b090:	68 18 1f 02 c0       	push   0xc0021f18
c000b095:	e8 b4 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b09a:	e9 aa 02 00 00       	jmp    c000b349 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b09f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0a3:	83 f9 02             	cmp    ecx,0x2
c000b0a6:	74 0e                	je     c000b0b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b0a8:	83 f9 0a             	cmp    ecx,0xa
c000b0ab:	0f 84 d1 00 00 00    	je     c000b182 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b0b1:	e9 7e 02 00 00       	jmp    c000b334 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b0b6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0bb:	75 0e                	jne    c000b0cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0bd:	84 d2                	test   dl,dl
c000b0bf:	75 0a                	jne    c000b0cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0c1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b0c4:	83 e8 18             	sub    eax,0x18
c000b0c7:	a8 f7                	test   al,0xf7
c000b0c9:	74 0d                	je     c000b0d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b0cb:	83 ec 0c             	sub    esp,0xc
c000b0ce:	68 2d 1f 02 c0       	push   0xc0021f2d
c000b0d3:	e9 64 02 00 00       	jmp    c000b33c <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b0d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b0e0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b0e5:	31 c0                	xor    eax,eax
c000b0e7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b0eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b0f3:	89 c6                	mov    esi,eax
c000b0f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b0fa:	75 15                	jne    c000b111 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b0fc:	99                   	cdq    
c000b0fd:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b101:	85 d2                	test   edx,edx
c000b103:	75 0c                	jne    c000b111 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b105:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b109:	29 c6                	sub    esi,eax
c000b10b:	4e                   	dec    esi
c000b10c:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b111:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b115:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b11d:	75 0c                	jne    c000b12b <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b11f:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b124:	c1 e2 18             	shl    edx,0x18
c000b127:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b12b:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b130:	8d 46 01             	lea    eax,[esi+0x1]
c000b133:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b137:	c1 e1 10             	shl    ecx,0x10
c000b13a:	89 ca                	mov    edx,ecx
c000b13c:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b141:	c1 e1 08             	shl    ecx,0x8
c000b144:	09 d1                	or     ecx,edx
c000b146:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b14a:	09 d1                	or     ecx,edx
c000b14c:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b150:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b154:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b158:	c1 fa 03             	sar    edx,0x3
c000b15b:	01 d7                	add    edi,edx
c000b15d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b161:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b165:	7e 04                	jle    c000b16b <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b167:	89 c6                	mov    esi,eax
c000b169:	eb 8a                	jmp    c000b0f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b16b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b16f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b173:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b177:	0f 8f 6e ff ff ff    	jg     c000b0eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b17d:	e9 ce 01 00 00       	jmp    c000b350 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b182:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b187:	75 0e                	jne    c000b197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b189:	85 c0                	test   eax,eax
c000b18b:	75 0a                	jne    c000b197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b18d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b190:	83 e8 18             	sub    eax,0x18
c000b193:	a8 f7                	test   al,0xf7
c000b195:	74 0d                	je     c000b1a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b197:	83 ec 0c             	sub    esp,0xc
c000b19a:	68 3b 1f 02 c0       	push   0xc0021f3b
c000b19f:	e9 98 01 00 00       	jmp    c000b33c <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b1a4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b1ac:	31 c9                	xor    ecx,ecx
c000b1ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b1b6:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b1ba:	0f 8d 90 01 00 00    	jge    c000b350 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b1c4:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b1c8:	0f 8e 82 01 00 00    	jle    c000b350 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1ce:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b1d2:	8d 77 01             	lea    esi,[edi+0x1]
c000b1d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1d9:	83 fa 7f             	cmp    edx,0x7f
c000b1dc:	89 d0                	mov    eax,edx
c000b1de:	0f 8e a3 00 00 00    	jle    c000b287 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b1e4:	83 e0 7f             	and    eax,0x7f
c000b1e7:	31 d2                	xor    edx,edx
c000b1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b1ed:	40                   	inc    eax
c000b1ee:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b1f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b1f6:	75 08                	jne    c000b200 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b1f8:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b1fd:	c1 e2 18             	shl    edx,0x18
c000b200:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b205:	c1 e0 10             	shl    eax,0x10
c000b208:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b20c:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b211:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b215:	c1 e0 08             	shl    eax,0x8
c000b218:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b21c:	09 f8                	or     eax,edi
c000b21e:	31 ff                	xor    edi,edi
c000b220:	09 d0                	or     eax,edx
c000b222:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b22b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b22f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b234:	75 1d                	jne    c000b253 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b236:	89 c8                	mov    eax,ecx
c000b238:	99                   	cdq    
c000b239:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b23d:	85 d2                	test   edx,edx
c000b23f:	75 12                	jne    c000b253 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b241:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b245:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b249:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b24d:	49                   	dec    ecx
c000b24e:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b253:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b257:	8d 51 01             	lea    edx,[ecx+0x1]
c000b25a:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b25e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b262:	8d 47 01             	lea    eax,[edi+0x1]
c000b265:	7e 06                	jle    c000b26d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b267:	89 c7                	mov    edi,eax
c000b269:	89 d1                	mov    ecx,edx
c000b26b:	eb c2                	jmp    c000b22f <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b26d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b271:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b275:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b279:	c1 f8 03             	sar    eax,0x3
c000b27c:	01 c6                	add    esi,eax
c000b27e:	89 d1                	mov    ecx,edx
c000b280:	89 f7                	mov    edi,esi
c000b282:	e9 2f ff ff ff       	jmp    c000b1b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b287:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b28f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b293:	40                   	inc    eax
c000b294:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b298:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b29d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2a1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2a6:	75 1d                	jne    c000b2c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2a8:	89 c8                	mov    eax,ecx
c000b2aa:	99                   	cdq    
c000b2ab:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2af:	85 d2                	test   edx,edx
c000b2b1:	75 12                	jne    c000b2c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2b7:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b2bb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b2bf:	49                   	dec    ecx
c000b2c0:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b2c5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2c9:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b2d1:	75 0c                	jne    c000b2df <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b2d3:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b2d8:	c1 e7 18             	shl    edi,0x18
c000b2db:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b2df:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b2e4:	8d 51 01             	lea    edx,[ecx+0x1]
c000b2e7:	c1 e0 10             	shl    eax,0x10
c000b2ea:	89 c7                	mov    edi,eax
c000b2ec:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b2f1:	c1 e0 08             	shl    eax,0x8
c000b2f4:	09 f8                	or     eax,edi
c000b2f6:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b2fa:	09 f8                	or     eax,edi
c000b2fc:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b300:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b304:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b308:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b30c:	c1 f8 03             	sar    eax,0x3
c000b30f:	01 c6                	add    esi,eax
c000b311:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b315:	40                   	inc    eax
c000b316:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b31a:	7e 0b                	jle    c000b327 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b31c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b320:	89 d1                	mov    ecx,edx
c000b322:	e9 7a ff ff ff       	jmp    c000b2a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b327:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b32b:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b32f:	e9 4a ff ff ff       	jmp    c000b27e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b334:	50                   	push   eax
c000b335:	50                   	push   eax
c000b336:	51                   	push   ecx
c000b337:	68 4a 1f 02 c0       	push   0xc0021f4a
c000b33c:	e8 0d bc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b341:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b344:	e8 77 35 00 00       	call   c000e8c0 <free>
c000b349:	83 c4 10             	add    esp,0x10
c000b34c:	31 ed                	xor    ebp,ebp
c000b34e:	eb 14                	jmp    c000b364 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b350:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b354:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b358:	89 18                	mov    DWORD PTR [eax],ebx
c000b35a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b35e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b362:	89 18                	mov    DWORD PTR [eax],ebx
c000b364:	83 c4 3c             	add    esp,0x3c
c000b367:	89 e8                	mov    eax,ebp
c000b369:	5b                   	pop    ebx
c000b36a:	5e                   	pop    esi
c000b36b:	5f                   	pop    edi
c000b36c:	5d                   	pop    ebp
c000b36d:	c3                   	ret    

c000b36e <Video::putTGA(int, int, unsigned char*, int)>:
c000b36e:	55                   	push   ebp
c000b36f:	57                   	push   edi
c000b370:	56                   	push   esi
c000b371:	53                   	push   ebx
c000b372:	83 ec 28             	sub    esp,0x28
c000b375:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b379:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b37d:	50                   	push   eax
c000b37e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b382:	50                   	push   eax
c000b383:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b387:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b38b:	55                   	push   ebp
c000b38c:	e8 37 fc ff ff       	call   c000afc8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b391:	83 c4 20             	add    esp,0x20
c000b394:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b398:	85 c0                	test   eax,eax
c000b39a:	74 3b                	je     c000b3d7 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b39c:	89 c6                	mov    esi,eax
c000b39e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3a2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3a6:	39 d8                	cmp    eax,ebx
c000b3a8:	7e 2d                	jle    c000b3d7 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3aa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b3ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3b2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3b6:	39 f8                	cmp    eax,edi
c000b3b8:	7e 1a                	jle    c000b3d4 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b3ba:	83 c6 04             	add    esi,0x4
c000b3bd:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3c0:	85 c0                	test   eax,eax
c000b3c2:	79 0d                	jns    c000b3d1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b3c4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b3c7:	50                   	push   eax
c000b3c8:	53                   	push   ebx
c000b3c9:	57                   	push   edi
c000b3ca:	55                   	push   ebp
c000b3cb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	47                   	inc    edi
c000b3d2:	eb da                	jmp    c000b3ae <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b3d4:	43                   	inc    ebx
c000b3d5:	eb c7                	jmp    c000b39e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b3d7:	83 c4 1c             	add    esp,0x1c
c000b3da:	5b                   	pop    ebx
c000b3db:	5e                   	pop    esi
c000b3dc:	5f                   	pop    edi
c000b3dd:	5d                   	pop    ebp
c000b3de:	c3                   	ret    
c000b3df:	90                   	nop

c000b3e0 <ACPI::close(int, int, void*)>:
c000b3e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b3e5:	c3                   	ret    
c000b3e6:	66 90                	xchg   ax,ax

c000b3e8 <loadACPITables(unsigned char*)>:
c000b3e8:	57                   	push   edi
c000b3e9:	56                   	push   esi
c000b3ea:	53                   	push   ebx
c000b3eb:	83 ec 60             	sub    esp,0x60
c000b3ee:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b3f3:	0f 84 43 02 00 00    	je     c000b63c <loadACPITables(unsigned char*)+0x254>
c000b3f9:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b3fe:	0f b6 c0             	movzx  eax,al
c000b401:	85 c0                	test   eax,eax
c000b403:	74 7b                	je     c000b480 <loadACPITables(unsigned char*)+0x98>
c000b405:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b409:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b40d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b411:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b414:	83 e8 24             	sub    eax,0x24
c000b417:	c1 e8 03             	shr    eax,0x3
c000b41a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b41e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b426:	66 90                	xchg   ax,ax
c000b428:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b42c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b430:	0f 8d ba 00 00 00    	jge    c000b4f0 <loadACPITables(unsigned char*)+0x108>
c000b436:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b43a:	83 c0 24             	add    eax,0x24
c000b43d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b441:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b445:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b449:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b44d:	c1 e0 03             	shl    eax,0x3
c000b450:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b454:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b458:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b45b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b45d:	89 c1                	mov    ecx,eax
c000b45f:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b464:	8d 50 01             	lea    edx,[eax+0x1]
c000b467:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b46d:	89 ca                	mov    edx,ecx
c000b46f:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b476:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b47b:	eb ab                	jmp    c000b428 <loadACPITables(unsigned char*)+0x40>
c000b47d:	8d 76 00             	lea    esi,[esi+0x0]
c000b480:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b484:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b488:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b48c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b48f:	83 e8 24             	sub    eax,0x24
c000b492:	c1 e8 02             	shr    eax,0x2
c000b495:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b499:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4a4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4a8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4ac:	7d 42                	jge    c000b4f0 <loadACPITables(unsigned char*)+0x108>
c000b4ae:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4b2:	83 c0 24             	add    eax,0x24
c000b4b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b4c1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4c5:	c1 e0 02             	shl    eax,0x2
c000b4c8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b4cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b4d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b4d2:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b4d7:	8d 50 01             	lea    edx,[eax+0x1]
c000b4da:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b4e0:	89 ca                	mov    edx,ecx
c000b4e2:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b4e9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b4ee:	eb b4                	jmp    c000b4a4 <loadACPITables(unsigned char*)+0xbc>
c000b4f0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b4f8:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b4fd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b501:	0f 8d 39 01 00 00    	jge    c000b640 <loadACPITables(unsigned char*)+0x258>
c000b507:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b50b:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b512:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b516:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b51a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b51e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b522:	25 ff 0f 00 00       	and    eax,0xfff
c000b527:	89 c6                	mov    esi,eax
c000b529:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b52f:	83 ec 0c             	sub    esp,0xc
c000b532:	6a 01                	push   0x1
c000b534:	e8 ba 6a 00 00       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c000b539:	83 c4 10             	add    esp,0x10
c000b53c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b540:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	6a 01                	push   0x1
c000b54b:	6a 01                	push   0x1
c000b54d:	50                   	push   eax
c000b54e:	52                   	push   edx
c000b54f:	53                   	push   ebx
c000b550:	e8 71 73 00 00       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b555:	83 c4 20             	add    esp,0x20
c000b558:	09 f0                	or     eax,esi
c000b55a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b55e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b562:	c1 e0 03             	shl    eax,0x3
c000b565:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b56a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b56e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b576:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b57e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b582:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b586:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b58a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b58e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b592:	89 c6                	mov    esi,eax
c000b594:	89 d7                	mov    edi,edx
c000b596:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b598:	89 c8                	mov    eax,ecx
c000b59a:	89 fa                	mov    edx,edi
c000b59c:	89 f3                	mov    ebx,esi
c000b59e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5b9:	05 00 10 00 00       	add    eax,0x1000
c000b5be:	c1 e8 0c             	shr    eax,0xc
c000b5c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b5c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b5cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5d1:	25 ff 0f 00 00       	and    eax,0xfff
c000b5d6:	89 c6                	mov    esi,eax
c000b5d8:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b5de:	83 ec 0c             	sub    esp,0xc
c000b5e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b5e5:	e8 09 6a 00 00       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c000b5ea:	83 c4 10             	add    esp,0x10
c000b5ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b5f1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b5f7:	83 ec 0c             	sub    esp,0xc
c000b5fa:	6a 01                	push   0x1
c000b5fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b600:	50                   	push   eax
c000b601:	52                   	push   edx
c000b602:	53                   	push   ebx
c000b603:	e8 be 72 00 00       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b608:	83 c4 20             	add    esp,0x20
c000b60b:	09 f0                	or     eax,esi
c000b60d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b615:	83 ec 0c             	sub    esp,0xc
c000b618:	50                   	push   eax
c000b619:	e8 d3 6c 00 00       	call   c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b625:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b629:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b630:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b635:	e9 be fe ff ff       	jmp    c000b4f8 <loadACPITables(unsigned char*)+0x110>
c000b63a:	66 90                	xchg   ax,ax
c000b63c:	90                   	nop
c000b63d:	8d 76 00             	lea    esi,[esi+0x0]
c000b640:	83 c4 60             	add    esp,0x60
c000b643:	5b                   	pop    ebx
c000b644:	5e                   	pop    esi
c000b645:	5f                   	pop    edi
c000b646:	c3                   	ret    
c000b647:	90                   	nop

c000b648 <findRSDT(unsigned char*)>:
c000b648:	57                   	push   edi
c000b649:	56                   	push   esi
c000b64a:	53                   	push   ebx
c000b64b:	83 ec 50             	sub    esp,0x50
c000b64e:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b653:	85 c0                	test   eax,eax
c000b655:	75 0d                	jne    c000b664 <findRSDT(unsigned char*)+0x1c>
c000b657:	b8 00 00 00 00       	mov    eax,0x0
c000b65c:	e9 2b 01 00 00       	jmp    c000b78c <findRSDT(unsigned char*)+0x144>
c000b661:	8d 76 00             	lea    esi,[esi+0x0]
c000b664:	89 e0                	mov    eax,esp
c000b666:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b66a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b66e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b672:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b67a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b67e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b682:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b686:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b68a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b68e:	89 c6                	mov    esi,eax
c000b690:	89 d7                	mov    edi,edx
c000b692:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b694:	89 c8                	mov    eax,ecx
c000b696:	89 fa                	mov    edx,edi
c000b698:	89 f3                	mov    ebx,esi
c000b69a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b69e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6a6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6aa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6ae:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b6ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6ce:	25 ff 0f 00 00       	and    eax,0xfff
c000b6d3:	89 c6                	mov    esi,eax
c000b6d5:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b6db:	83 ec 0c             	sub    esp,0xc
c000b6de:	6a 02                	push   0x2
c000b6e0:	e8 0e 69 00 00       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c000b6e5:	83 c4 10             	add    esp,0x10
c000b6e8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b6ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b6f2:	83 ec 0c             	sub    esp,0xc
c000b6f5:	6a 01                	push   0x1
c000b6f7:	6a 02                	push   0x2
c000b6f9:	50                   	push   eax
c000b6fa:	52                   	push   edx
c000b6fb:	53                   	push   ebx
c000b6fc:	e8 c5 71 00 00       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b701:	83 c4 20             	add    esp,0x20
c000b704:	09 f0                	or     eax,esi
c000b706:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b70a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b70e:	25 ff 0f 00 00       	and    eax,0xfff
c000b713:	89 c6                	mov    esi,eax
c000b715:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b71b:	83 ec 0c             	sub    esp,0xc
c000b71e:	6a 02                	push   0x2
c000b720:	e8 ce 68 00 00       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b72c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b732:	83 ec 0c             	sub    esp,0xc
c000b735:	6a 01                	push   0x1
c000b737:	6a 02                	push   0x2
c000b739:	50                   	push   eax
c000b73a:	52                   	push   edx
c000b73b:	53                   	push   ebx
c000b73c:	e8 85 71 00 00       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b741:	83 c4 20             	add    esp,0x20
c000b744:	09 f0                	or     eax,esi
c000b746:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b74a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b74f:	85 c0                	test   eax,eax
c000b751:	75 11                	jne    c000b764 <findRSDT(unsigned char*)+0x11c>
c000b753:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b75a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b75e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b762:	eb 24                	jmp    c000b788 <findRSDT(unsigned char*)+0x140>
c000b764:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b769:	83 f8 02             	cmp    eax,0x2
c000b76c:	75 12                	jne    c000b780 <findRSDT(unsigned char*)+0x138>
c000b76e:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b775:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b779:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b77d:	eb 09                	jmp    c000b788 <findRSDT(unsigned char*)+0x140>
c000b77f:	90                   	nop
c000b780:	b8 00 00 00 00       	mov    eax,0x0
c000b785:	eb 05                	jmp    c000b78c <findRSDT(unsigned char*)+0x144>
c000b787:	90                   	nop
c000b788:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b78c:	83 c4 50             	add    esp,0x50
c000b78f:	5b                   	pop    ebx
c000b790:	5e                   	pop    esi
c000b791:	5f                   	pop    edi
c000b792:	c3                   	ret    
c000b793:	90                   	nop

c000b794 <findDataTable(unsigned char*, char*)>:
c000b794:	83 ec 1c             	sub    esp,0x1c
c000b797:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b79c:	75 0a                	jne    c000b7a8 <findDataTable(unsigned char*, char*)+0x14>
c000b79e:	b8 00 00 00 00       	mov    eax,0x0
c000b7a3:	eb 5f                	jmp    c000b804 <findDataTable(unsigned char*, char*)+0x70>
c000b7a5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7b0:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b7b5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7b9:	7d 41                	jge    c000b7fc <findDataTable(unsigned char*, char*)+0x68>
c000b7bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7bf:	c1 e0 03             	shl    eax,0x3
c000b7c2:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b7c7:	83 ec 04             	sub    esp,0x4
c000b7ca:	6a 04                	push   0x4
c000b7cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b7d0:	50                   	push   eax
c000b7d1:	e8 aa 4b ff ff       	call   c0000380 <memcmp>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	85 c0                	test   eax,eax
c000b7db:	0f 94 c0             	sete   al
c000b7de:	0f b6 c0             	movzx  eax,al
c000b7e1:	85 c0                	test   eax,eax
c000b7e3:	74 0f                	je     c000b7f4 <findDataTable(unsigned char*, char*)+0x60>
c000b7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7e9:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b7f0:	eb 12                	jmp    c000b804 <findDataTable(unsigned char*, char*)+0x70>
c000b7f2:	66 90                	xchg   ax,ax
c000b7f4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b7f9:	eb b5                	jmp    c000b7b0 <findDataTable(unsigned char*, char*)+0x1c>
c000b7fb:	90                   	nop
c000b7fc:	b8 00 00 00 00       	mov    eax,0x0
c000b801:	8d 76 00             	lea    esi,[esi+0x0]
c000b804:	83 c4 1c             	add    esp,0x1c
c000b807:	c3                   	ret    

c000b808 <scanMADT()>:
c000b808:	53                   	push   ebx
c000b809:	83 ec 38             	sub    esp,0x38
c000b80c:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000b816:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000b820:	e8 71 c6 00 00       	call   c0017e96 <HalFindRSDP()>
c000b825:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000b82a:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b82f:	85 c0                	test   eax,eax
c000b831:	0f 84 11 04 00 00    	je     c000bc48 <scanMADT()+0x440>
c000b837:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b83c:	83 ec 0c             	sub    esp,0xc
c000b83f:	50                   	push   eax
c000b840:	e8 03 fe ff ff       	call   c000b648 <findRSDT(unsigned char*)>
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000b84d:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b852:	85 c0                	test   eax,eax
c000b854:	0f 84 f2 03 00 00    	je     c000bc4c <scanMADT()+0x444>
c000b85a:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b85f:	83 ec 0c             	sub    esp,0xc
c000b862:	50                   	push   eax
c000b863:	e8 80 fb ff ff       	call   c000b3e8 <loadACPITables(unsigned char*)>
c000b868:	83 c4 10             	add    esp,0x10
c000b86b:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b870:	83 ec 08             	sub    esp,0x8
c000b873:	68 ac 1f 02 c0       	push   0xc0021fac
c000b878:	50                   	push   eax
c000b879:	e8 16 ff ff ff       	call   c000b794 <findDataTable(unsigned char*, char*)>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b885:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b88a:	0f 84 c0 03 00 00    	je     c000bc50 <scanMADT()+0x448>
c000b890:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b898:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b89c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b89f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8a3:	0f 87 af 03 00 00    	ja     c000bc58 <scanMADT()+0x450>
c000b8a9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8b1:	0f 87 a1 03 00 00    	ja     c000bc58 <scanMADT()+0x450>
c000b8b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8c3:	8d 50 01             	lea    edx,[eax+0x1]
c000b8c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b8ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b8d2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b8d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8da:	8d 50 01             	lea    edx,[eax+0x1]
c000b8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b8e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b8e9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b8ed:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b8f2:	83 f8 02             	cmp    eax,0x2
c000b8f5:	0f 86 59 03 00 00    	jbe    c000bc54 <scanMADT()+0x44c>
c000b8fb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b900:	85 c0                	test   eax,eax
c000b902:	75 58                	jne    c000b95c <scanMADT()+0x154>
c000b904:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b908:	8d 50 01             	lea    edx,[eax+0x1]
c000b90b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b90f:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b915:	0f b6 d2             	movzx  edx,dl
c000b918:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b91c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b920:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000b926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b92a:	8d 50 01             	lea    edx,[eax+0x1]
c000b92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b931:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b937:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b93a:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000b940:	0f b6 d2             	movzx  edx,dl
c000b943:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b947:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b94b:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000b951:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b956:	e9 d9 02 00 00       	jmp    c000bc34 <scanMADT()+0x42c>
c000b95b:	90                   	nop
c000b95c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b961:	83 f8 01             	cmp    eax,0x1
c000b964:	0f 85 1a 01 00 00    	jne    c000ba84 <scanMADT()+0x27c>
c000b96a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b96e:	8d 50 01             	lea    edx,[eax+0x1]
c000b971:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b975:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000b97b:	0f b6 d2             	movzx  edx,dl
c000b97e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b982:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b986:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000b98c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b991:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b995:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b999:	01 d0                	add    eax,edx
c000b99b:	83 c0 2c             	add    eax,0x2c
c000b99e:	8a 00                	mov    al,BYTE PTR [eax]
c000b9a0:	0f b6 d0             	movzx  edx,al
c000b9a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9a7:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9b2:	0f b6 c0             	movzx  eax,al
c000b9b5:	c1 e0 08             	shl    eax,0x8
c000b9b8:	89 d1                	mov    ecx,edx
c000b9ba:	09 c1                	or     ecx,eax
c000b9bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9c0:	8d 50 02             	lea    edx,[eax+0x2]
c000b9c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9cb:	0f b6 c0             	movzx  eax,al
c000b9ce:	c1 e0 10             	shl    eax,0x10
c000b9d1:	09 c1                	or     ecx,eax
c000b9d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9d7:	8d 50 03             	lea    edx,[eax+0x3]
c000b9da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9e2:	0f b6 c0             	movzx  eax,al
c000b9e5:	c1 e0 18             	shl    eax,0x18
c000b9e8:	09 c1                	or     ecx,eax
c000b9ea:	89 ca                	mov    edx,ecx
c000b9ec:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000b9f1:	0f b6 c0             	movzx  eax,al
c000b9f4:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000b9fb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba08:	01 d0                	add    eax,edx
c000ba0a:	83 c0 2c             	add    eax,0x2c
c000ba0d:	8a 00                	mov    al,BYTE PTR [eax]
c000ba0f:	0f b6 d0             	movzx  edx,al
c000ba12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba16:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba1d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba21:	0f b6 c0             	movzx  eax,al
c000ba24:	c1 e0 08             	shl    eax,0x8
c000ba27:	89 d1                	mov    ecx,edx
c000ba29:	09 c1                	or     ecx,eax
c000ba2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba2f:	8d 50 02             	lea    edx,[eax+0x2]
c000ba32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba36:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba3a:	0f b6 c0             	movzx  eax,al
c000ba3d:	c1 e0 10             	shl    eax,0x10
c000ba40:	09 c1                	or     ecx,eax
c000ba42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba46:	8d 50 03             	lea    edx,[eax+0x3]
c000ba49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba51:	0f b6 c0             	movzx  eax,al
c000ba54:	c1 e0 18             	shl    eax,0x18
c000ba57:	09 c1                	or     ecx,eax
c000ba59:	89 ca                	mov    edx,ecx
c000ba5b:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000ba60:	0f b6 c0             	movzx  eax,al
c000ba63:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000ba6a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba6f:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000ba74:	83 c0 01             	add    eax,0x1
c000ba77:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000ba7c:	e9 b3 01 00 00       	jmp    c000bc34 <scanMADT()+0x42c>
c000ba81:	8d 76 00             	lea    esi,[esi+0x0]
c000ba84:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ba89:	83 f8 02             	cmp    eax,0x2
c000ba8c:	0f 85 ea 00 00 00    	jne    c000bb7c <scanMADT()+0x374>
c000ba92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba96:	8d 50 01             	lea    edx,[eax+0x1]
c000ba99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baa1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000baa5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000baa9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baad:	8d 50 01             	lea    edx,[eax+0x1]
c000bab0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bab4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bab8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000babc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bac0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bac4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bac8:	01 d0                	add    eax,edx
c000baca:	83 c0 2c             	add    eax,0x2c
c000bacd:	8a 00                	mov    al,BYTE PTR [eax]
c000bacf:	0f b6 d0             	movzx  edx,al
c000bad2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad6:	8d 48 01             	lea    ecx,[eax+0x1]
c000bad9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000badd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bae1:	0f b6 c0             	movzx  eax,al
c000bae4:	c1 e0 08             	shl    eax,0x8
c000bae7:	89 d1                	mov    ecx,edx
c000bae9:	09 c1                	or     ecx,eax
c000baeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baef:	8d 50 02             	lea    edx,[eax+0x2]
c000baf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000baf6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bafa:	0f b6 c0             	movzx  eax,al
c000bafd:	c1 e0 10             	shl    eax,0x10
c000bb00:	09 c1                	or     ecx,eax
c000bb02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb06:	8d 50 03             	lea    edx,[eax+0x3]
c000bb09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb11:	0f b6 c0             	movzx  eax,al
c000bb14:	c1 e0 18             	shl    eax,0x18
c000bb17:	09 c8                	or     eax,ecx
c000bb19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb1d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb2a:	01 d0                	add    eax,edx
c000bb2c:	83 c0 2c             	add    eax,0x2c
c000bb2f:	8a 00                	mov    al,BYTE PTR [eax]
c000bb31:	0f b6 d0             	movzx  edx,al
c000bb34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb38:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb3f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb43:	0f b6 c0             	movzx  eax,al
c000bb46:	c1 e0 08             	shl    eax,0x8
c000bb49:	09 d0                	or     eax,edx
c000bb4b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb50:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb55:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb5e:	88 90 e8 45 02 c0    	mov    BYTE PTR [eax-0x3ffdba18],dl
c000bb64:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb69:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bb6e:	66 89 94 00 c0 aa 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd5540],dx
c000bb76:	e9 b9 00 00 00       	jmp    c000bc34 <scanMADT()+0x42c>
c000bb7b:	90                   	nop
c000bb7c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb81:	83 f8 04             	cmp    eax,0x4
c000bb84:	0f 85 9a 00 00 00    	jne    c000bc24 <scanMADT()+0x41c>
c000bb8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb8e:	8d 50 01             	lea    edx,[eax+0x1]
c000bb91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb99:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb9d:	0f b6 c0             	movzx  eax,al
c000bba0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bba4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbac:	01 d0                	add    eax,edx
c000bbae:	83 c0 2c             	add    eax,0x2c
c000bbb1:	8a 00                	mov    al,BYTE PTR [eax]
c000bbb3:	0f b6 d0             	movzx  edx,al
c000bbb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbba:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbc1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbc5:	0f b6 c0             	movzx  eax,al
c000bbc8:	c1 e0 08             	shl    eax,0x8
c000bbcb:	09 d0                	or     eax,edx
c000bbcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbd1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bbd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbda:	8d 50 01             	lea    edx,[eax+0x1]
c000bbdd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbe1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbe5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbe9:	0f b6 c0             	movzx  eax,al
c000bbec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbf4:	c1 e0 08             	shl    eax,0x8
c000bbf7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bbfb:	89 c1                	mov    ecx,eax
c000bbfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc01:	c1 e0 18             	shl    eax,0x18
c000bc04:	89 c3                	mov    ebx,eax
c000bc06:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bc0b:	8d 50 01             	lea    edx,[eax+0x1]
c000bc0e:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000bc14:	09 d9                	or     ecx,ebx
c000bc16:	89 ca                	mov    edx,ecx
c000bc18:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000bc1f:	eb 13                	jmp    c000bc34 <scanMADT()+0x42c>
c000bc21:	8d 76 00             	lea    esi,[esi+0x0]
c000bc24:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc29:	83 f8 05             	cmp    eax,0x5
c000bc2c:	75 06                	jne    c000bc34 <scanMADT()+0x42c>
c000bc2e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc33:	90                   	nop
c000bc34:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc3d:	01 d0                	add    eax,edx
c000bc3f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc43:	e9 50 fc ff ff       	jmp    c000b898 <scanMADT()+0x90>
c000bc48:	90                   	nop
c000bc49:	eb 0d                	jmp    c000bc58 <scanMADT()+0x450>
c000bc4b:	90                   	nop
c000bc4c:	90                   	nop
c000bc4d:	eb 09                	jmp    c000bc58 <scanMADT()+0x450>
c000bc4f:	90                   	nop
c000bc50:	90                   	nop
c000bc51:	eb 05                	jmp    c000bc58 <scanMADT()+0x450>
c000bc53:	90                   	nop
c000bc54:	90                   	nop
c000bc55:	8d 76 00             	lea    esi,[esi+0x0]
c000bc58:	83 c4 38             	add    esp,0x38
c000bc5b:	5b                   	pop    ebx
c000bc5c:	c3                   	ret    
c000bc5d:	90                   	nop
c000bc5e:	66 90                	xchg   ax,ax

c000bc60 <ACPI::ACPI()>:
c000bc60:	83 ec 0c             	sub    esp,0xc
c000bc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc67:	83 ec 08             	sub    esp,0x8
c000bc6a:	68 b1 1f 02 c0       	push   0xc0021fb1
c000bc6f:	50                   	push   eax
c000bc70:	e8 53 d5 ff ff       	call   c00091c8 <Device::Device(char const*)>
c000bc75:	83 c4 10             	add    esp,0x10
c000bc78:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c000bc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc81:	89 10                	mov    DWORD PTR [eax],edx
c000bc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc87:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc92:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcaa:	e8 59 fb ff ff       	call   c000b808 <scanMADT()>
c000bcaf:	90                   	nop
c000bcb0:	83 c4 0c             	add    esp,0xc
c000bcb3:	c3                   	ret    

c000bcb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bcb4:	83 ec 2c             	sub    esp,0x2c
c000bcb7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bcbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcbf:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000bcc3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000bcc7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bccc:	88 c8                	mov    al,cl
c000bcce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bcd2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bcd7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcdf:	90                   	nop
c000bce0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bce4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bcea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bcee:	0f 8d b0 00 00 00    	jge    c000bda4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bcf4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bcf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcfc:	83 c2 2a             	add    edx,0x2a
c000bcff:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd03:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd08:	0f b7 c0             	movzx  eax,ax
c000bd0b:	39 c2                	cmp    edx,eax
c000bd0d:	0f 85 85 00 00 00    	jne    c000bd98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd1b:	83 c2 2a             	add    edx,0x2a
c000bd1e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd22:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd27:	0f b6 c0             	movzx  eax,al
c000bd2a:	39 c2                	cmp    edx,eax
c000bd2c:	75 6a                	jne    c000bd98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd2e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd33:	85 c0                	test   eax,eax
c000bd35:	74 3d                	je     c000bd74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd3f:	83 c2 2a             	add    edx,0x2a
c000bd42:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd4d:	39 c2                	cmp    edx,eax
c000bd4f:	74 13                	je     c000bd64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd51:	83 ec 0c             	sub    esp,0xc
c000bd54:	68 2c 21 02 c0       	push   0xc002212c
c000bd59:	e8 98 2e 00 00       	call   c000ebf6 <KePanic(char const*)>
c000bd5e:	83 c4 10             	add    esp,0x10
c000bd61:	8d 76 00             	lea    esi,[esi+0x0]
c000bd64:	83 ec 0c             	sub    esp,0xc
c000bd67:	68 b6 1f 02 c0       	push   0xc0021fb6
c000bd6c:	e8 85 2e 00 00       	call   c000ebf6 <KePanic(char const*)>
c000bd71:	83 c4 10             	add    esp,0x10
c000bd74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bd78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd80:	83 c2 2a             	add    edx,0x2a
c000bd83:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bd87:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd89:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bd8c:	89 01                	mov    DWORD PTR [ecx],eax
c000bd8e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bd91:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bd96:	66 90                	xchg   ax,ax
c000bd98:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bd9d:	e9 3e ff ff ff       	jmp    c000bce0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bda2:	66 90                	xchg   ax,ax
c000bda4:	90                   	nop
c000bda5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bda9:	83 c4 2c             	add    esp,0x2c
c000bdac:	c2 04 00             	ret    0x4
c000bdaf:	90                   	nop

c000bdb0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bdb0:	83 ec 1c             	sub    esp,0x1c
c000bdb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdb7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bdbb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdbf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bdc4:	88 c8                	mov    al,cl
c000bdc6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bdca:	88 d0                	mov    al,dl
c000bdcc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bdd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdd4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bdda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdde:	83 c2 2a             	add    edx,0x2a
c000bde1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bde5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000bde9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bded:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bdf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdf7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bdfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdfe:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000be03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be07:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be0d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be11:	83 c0 01             	add    eax,0x1
c000be14:	88 c1                	mov    cl,al
c000be16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1a:	83 c2 2a             	add    edx,0x2a
c000be1d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be25:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be2f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be36:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be3e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be44:	8d 50 01             	lea    edx,[eax+0x1]
c000be47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be4b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be55:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be5b:	3d 00 02 00 00       	cmp    eax,0x200
c000be60:	75 12                	jne    c000be74 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000be62:	83 ec 0c             	sub    esp,0xc
c000be65:	68 c5 1f 02 c0       	push   0xc0021fc5
c000be6a:	e8 87 2d 00 00       	call   c000ebf6 <KePanic(char const*)>
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	66 90                	xchg   ax,ax
c000be74:	90                   	nop
c000be75:	83 c4 1c             	add    esp,0x1c
c000be78:	c3                   	ret    
c000be79:	90                   	nop
c000be7a:	66 90                	xchg   ax,ax

c000be7c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000be7c:	b8 00 00 00 00       	mov    eax,0x0
c000be81:	c3                   	ret    
c000be82:	66 90                	xchg   ax,ax

c000be84 <ACPI::detectPCI()>:
c000be84:	53                   	push   ebx
c000be85:	83 ec 28             	sub    esp,0x28
c000be88:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000be8d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000be92:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000be97:	83 ec 08             	sub    esp,0x8
c000be9a:	68 e2 1f 02 c0       	push   0xc0021fe2
c000be9f:	50                   	push   eax
c000bea0:	e8 ef f8 ff ff       	call   c000b794 <findDataTable(unsigned char*, char*)>
c000bea5:	83 c4 10             	add    esp,0x10
c000bea8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000beb1:	74 0d                	je     c000bec0 <ACPI::detectPCI()+0x3c>
c000beb3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000beb8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bebd:	8d 76 00             	lea    esi,[esi+0x0]
c000bec0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bec8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000becc:	8a 00                	mov    al,BYTE PTR [eax]
c000bece:	0f b6 c0             	movzx  eax,al
c000bed1:	83 f8 01             	cmp    eax,0x1
c000bed4:	75 0e                	jne    c000bee4 <ACPI::detectPCI()+0x60>
c000bed6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bedb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bee0:	eb 2e                	jmp    c000bf10 <ACPI::detectPCI()+0x8c>
c000bee2:	66 90                	xchg   ax,ax
c000bee4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bee8:	8a 00                	mov    al,BYTE PTR [eax]
c000beea:	0f b6 c0             	movzx  eax,al
c000beed:	83 f8 02             	cmp    eax,0x2
c000bef0:	75 1e                	jne    c000bf10 <ACPI::detectPCI()+0x8c>
c000bef2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bef7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000befc:	85 c0                	test   eax,eax
c000befe:	74 10                	je     c000bf10 <ACPI::detectPCI()+0x8c>
c000bf00:	83 ec 0c             	sub    esp,0xc
c000bf03:	68 5c 21 02 c0       	push   0xc002215c
c000bf08:	e8 e9 2c 00 00       	call   c000ebf6 <KePanic(char const*)>
c000bf0d:	83 c4 10             	add    esp,0x10
c000bf10:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf14:	83 f0 01             	xor    eax,0x1
c000bf17:	0f b6 c0             	movzx  eax,al
c000bf1a:	85 c0                	test   eax,eax
c000bf1c:	74 46                	je     c000bf64 <ACPI::detectPCI()+0xe0>
c000bf1e:	e8 0d 42 ff ff       	call   c0000130 <manualPCIProbe>
c000bf23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf27:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf2c:	75 0e                	jne    c000bf3c <ACPI::detectPCI()+0xb8>
c000bf2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf33:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf38:	eb 2a                	jmp    c000bf64 <ACPI::detectPCI()+0xe0>
c000bf3a:	66 90                	xchg   ax,ax
c000bf3c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf41:	75 21                	jne    c000bf64 <ACPI::detectPCI()+0xe0>
c000bf43:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf48:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf4d:	85 c0                	test   eax,eax
c000bf4f:	74 13                	je     c000bf64 <ACPI::detectPCI()+0xe0>
c000bf51:	83 ec 0c             	sub    esp,0xc
c000bf54:	68 5c 21 02 c0       	push   0xc002215c
c000bf59:	e8 98 2c 00 00       	call   c000ebf6 <KePanic(char const*)>
c000bf5e:	83 c4 10             	add    esp,0x10
c000bf61:	8d 76 00             	lea    esi,[esi+0x0]
c000bf64:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf69:	85 c0                	test   eax,eax
c000bf6b:	0f 84 87 00 00 00    	je     c000bff8 <ACPI::detectPCI()+0x174>
c000bf71:	83 ec 0c             	sub    esp,0xc
c000bf74:	68 e7 1f 02 c0       	push   0xc0021fe7
c000bf79:	e8 dd 05 00 00       	call   c000c55b <KeSetBootMessage(char const*)>
c000bf7e:	83 c4 10             	add    esp,0x10
c000bf81:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bf89:	83 ec 0c             	sub    esp,0xc
c000bf8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf90:	e8 1b 29 00 00       	call   c000e8b0 <malloc>
c000bf95:	83 c4 10             	add    esp,0x10
c000bf98:	89 c3                	mov    ebx,eax
c000bf9a:	83 ec 0c             	sub    esp,0xc
c000bf9d:	53                   	push   ebx
c000bf9e:	e8 cb fc 00 00       	call   c001bc6e <PCI::PCI()>
c000bfa3:	83 c4 10             	add    esp,0x10
c000bfa6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfae:	83 ec 08             	sub    esp,0x8
c000bfb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfb5:	50                   	push   eax
c000bfb6:	e8 ab d0 ff ff       	call   c0009066 <Device::addChild(Device*)>
c000bfbb:	83 c4 10             	add    esp,0x10
c000bfbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc4:	83 c0 08             	add    eax,0x8
c000bfc7:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000bfce:	85 d2                	test   edx,edx
c000bfd0:	74 0a                	je     c000bfdc <ACPI::detectPCI()+0x158>
c000bfd2:	ba 01 00 00 00       	mov    edx,0x1
c000bfd7:	eb 0b                	jmp    c000bfe4 <ACPI::detectPCI()+0x160>
c000bfd9:	8d 76 00             	lea    esi,[esi+0x0]
c000bfdc:	ba 02 00 00 00       	mov    edx,0x2
c000bfe1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe4:	6a 00                	push   0x0
c000bfe6:	6a 00                	push   0x0
c000bfe8:	52                   	push   edx
c000bfe9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfed:	ff d0                	call   eax
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	e9 91 00 00 00       	jmp    c000c088 <ACPI::detectPCI()+0x204>
c000bff7:	90                   	nop
c000bff8:	83 ec 0c             	sub    esp,0xc
c000bffb:	68 ff 1f 02 c0       	push   0xc0021fff
c000c000:	e8 56 05 00 00       	call   c000c55b <KeSetBootMessage(char const*)>
c000c005:	83 c4 10             	add    esp,0x10
c000c008:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c016:	e8 95 28 00 00       	call   c000e8b0 <malloc>
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	89 c3                	mov    ebx,eax
c000c020:	83 ec 0c             	sub    esp,0xc
c000c023:	53                   	push   ebx
c000c024:	e8 4d 08 01 00       	call   c001c876 <IDE::IDE()>
c000c029:	83 c4 10             	add    esp,0x10
c000c02c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c030:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c034:	83 ec 08             	sub    esp,0x8
c000c037:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c03b:	50                   	push   eax
c000c03c:	e8 25 d0 ff ff       	call   c0009066 <Device::addChild(Device*)>
c000c041:	83 c4 10             	add    esp,0x10
c000c044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c048:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c056:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c05f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c063:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c06c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c070:	8b 00                	mov    eax,DWORD PTR [eax]
c000c072:	83 c0 08             	add    eax,0x8
c000c075:	8b 00                	mov    eax,DWORD PTR [eax]
c000c077:	6a 00                	push   0x0
c000c079:	6a 00                	push   0x0
c000c07b:	6a 00                	push   0x0
c000c07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c081:	ff d0                	call   eax
c000c083:	83 c4 10             	add    esp,0x10
c000c086:	66 90                	xchg   ax,ax
c000c088:	90                   	nop
c000c089:	83 c4 28             	add    esp,0x28
c000c08c:	5b                   	pop    ebx
c000c08d:	c3                   	ret    
c000c08e:	66 90                	xchg   ax,ax

c000c090 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c090:	83 ec 0c             	sub    esp,0xc
c000c093:	83 ec 0c             	sub    esp,0xc
c000c096:	68 14 20 02 c0       	push   0xc0022014
c000c09b:	e8 56 2b 00 00       	call   c000ebf6 <KePanic(char const*)>
c000c0a0:	83 c4 10             	add    esp,0x10
c000c0a3:	90                   	nop
c000c0a4:	83 c4 0c             	add    esp,0xc
c000c0a7:	c3                   	ret    

c000c0a8 <ACPI::open(int, int, void*)>:
c000c0a8:	55                   	push   ebp
c000c0a9:	89 e5                	mov    ebp,esp
c000c0ab:	53                   	push   ebx
c000c0ac:	81 ec 74 01 00 00    	sub    esp,0x174
c000c0b2:	83 ec 0c             	sub    esp,0xc
c000c0b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c0b8:	e8 c7 fd ff ff       	call   c000be84 <ACPI::detectPCI()>
c000c0bd:	83 c4 10             	add    esp,0x10
c000c0c0:	83 ec 0c             	sub    esp,0xc
c000c0c3:	68 84 21 02 c0       	push   0xc0022184
c000c0c8:	e8 8e 04 00 00       	call   c000c55b <KeSetBootMessage(char const*)>
c000c0cd:	83 c4 10             	add    esp,0x10
c000c0d0:	b8 4c 05 00 00       	mov    eax,0x54c
c000c0d5:	8a 00                	mov    al,BYTE PTR [eax]
c000c0d7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c0da:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c0de:	83 f8 01             	cmp    eax,0x1
c000c0e1:	75 15                	jne    c000c0f8 <ACPI::open(int, int, void*)+0x50>
c000c0e3:	83 ec 0c             	sub    esp,0xc
c000c0e6:	68 25 20 02 c0       	push   0xc0022025
c000c0eb:	e8 e8 7f 00 00       	call   c00140d8 <Thr::loadKernelSymbolTable(char const*)>
c000c0f0:	83 c4 10             	add    esp,0x10
c000c0f3:	eb 33                	jmp    c000c128 <ACPI::open(int, int, void*)+0x80>
c000c0f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c0f8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c0fc:	3d bb 00 00 00       	cmp    eax,0xbb
c000c101:	75 15                	jne    c000c118 <ACPI::open(int, int, void*)+0x70>
c000c103:	83 ec 0c             	sub    esp,0xc
c000c106:	68 43 20 02 c0       	push   0xc0022043
c000c10b:	e8 c8 7f 00 00       	call   c00140d8 <Thr::loadKernelSymbolTable(char const*)>
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	eb 13                	jmp    c000c128 <ACPI::open(int, int, void*)+0x80>
c000c115:	8d 76 00             	lea    esi,[esi+0x0]
c000c118:	83 ec 0c             	sub    esp,0xc
c000c11b:	68 61 20 02 c0       	push   0xc0022061
c000c120:	e8 d1 2a 00 00       	call   c000ebf6 <KePanic(char const*)>
c000c125:	83 c4 10             	add    esp,0x10
c000c128:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c12c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c133:	83 ec 0c             	sub    esp,0xc
c000c136:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c139:	e8 72 27 00 00       	call   c000e8b0 <malloc>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	89 c3                	mov    ebx,eax
c000c143:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c148:	83 ec 04             	sub    esp,0x4
c000c14b:	50                   	push   eax
c000c14c:	68 7b 20 02 c0       	push   0xc002207b
c000c151:	53                   	push   ebx
c000c152:	e8 d5 bf ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c157:	83 c4 10             	add    esp,0x10
c000c15a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c15d:	83 ec 08             	sub    esp,0x8
c000c160:	6a 01                	push   0x1
c000c162:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c165:	e8 e0 bf ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c16a:	83 c4 10             	add    esp,0x10
c000c16d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c170:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c174:	75 12                	jne    c000c188 <ACPI::open(int, int, void*)+0xe0>
c000c176:	83 ec 0c             	sub    esp,0xc
c000c179:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c17c:	e8 27 c0 ff ff       	call   c00081a8 <File::close()>
c000c181:	83 c4 10             	add    esp,0x10
c000c184:	eb 06                	jmp    c000c18c <ACPI::open(int, int, void*)+0xe4>
c000c186:	66 90                	xchg   ax,ax
c000c188:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c18c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c190:	74 16                	je     c000c1a8 <ACPI::open(int, int, void*)+0x100>
c000c192:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c195:	8b 00                	mov    eax,DWORD PTR [eax]
c000c197:	83 c0 08             	add    eax,0x8
c000c19a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c19c:	83 ec 0c             	sub    esp,0xc
c000c19f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1a2:	ff d0                	call   eax
c000c1a4:	83 c4 10             	add    esp,0x10
c000c1a7:	90                   	nop
c000c1a8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c1ab:	83 f0 01             	xor    eax,0x1
c000c1ae:	0f b6 c0             	movzx  eax,al
c000c1b1:	85 c0                	test   eax,eax
c000c1b3:	74 27                	je     c000c1dc <ACPI::open(int, int, void*)+0x134>
c000c1b5:	83 ec 0c             	sub    esp,0xc
c000c1b8:	68 99 20 02 c0       	push   0xc0022099
c000c1bd:	e8 99 03 00 00       	call   c000c55b <KeSetBootMessage(char const*)>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c1d2:	e8 41 60 00 00       	call   c0012218 <Virt::setupPageSwapping(int)>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	66 90                	xchg   ax,ax
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	68 b4 20 02 c0       	push   0xc00220b4
c000c1e4:	e8 72 03 00 00       	call   c000c55b <KeSetBootMessage(char const*)>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c1ef:	83 ec 08             	sub    esp,0x8
c000c1f2:	6a 13                	push   0x13
c000c1f4:	50                   	push   eax
c000c1f5:	e8 9a d1 ff ff       	call   c0009394 <getDevicesOfType(DeviceType)>
c000c1fa:	83 c4 0c             	add    esp,0xc
c000c1fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c200:	83 ec 0c             	sub    esp,0xc
c000c203:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c206:	50                   	push   eax
c000c207:	e8 70 43 01 00       	call   c002057c <LinkedList<Device>::isEmpty()>
c000c20c:	83 c4 10             	add    esp,0x10
c000c20f:	83 f0 01             	xor    eax,0x1
c000c212:	0f b6 c0             	movzx  eax,al
c000c215:	85 c0                	test   eax,eax
c000c217:	0f 84 1f 01 00 00    	je     c000c33c <ACPI::open(int, int, void*)+0x294>
c000c21d:	83 ec 0c             	sub    esp,0xc
c000c220:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c223:	50                   	push   eax
c000c224:	e8 6f 43 01 00       	call   c0020598 <LinkedList<Device>::getFirstElement()>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c22f:	83 ec 0c             	sub    esp,0xc
c000c232:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c235:	50                   	push   eax
c000c236:	e8 65 43 01 00       	call   c00205a0 <LinkedList<Device>::removeFirst()>
c000c23b:	83 c4 10             	add    esp,0x10
c000c23e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c241:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c244:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c247:	b8 24 00 00 00       	mov    eax,0x24
c000c24c:	83 e0 fc             	and    eax,0xfffffffc
c000c24f:	89 c3                	mov    ebx,eax
c000c251:	b8 00 00 00 00       	mov    eax,0x0
c000c256:	66 90                	xchg   ax,ax
c000c258:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c25f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c266:	83 c0 04             	add    eax,0x4
c000c269:	39 d8                	cmp    eax,ebx
c000c26b:	72 eb                	jb     c000c258 <ACPI::open(int, int, void*)+0x1b0>
c000c26d:	83 ec 08             	sub    esp,0x8
c000c270:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c276:	50                   	push   eax
c000c277:	83 ec 24             	sub    esp,0x24
c000c27a:	89 e1                	mov    ecx,esp
c000c27c:	b8 24 00 00 00       	mov    eax,0x24
c000c281:	83 e0 fc             	and    eax,0xfffffffc
c000c284:	89 c3                	mov    ebx,eax
c000c286:	b8 00 00 00 00       	mov    eax,0x0
c000c28b:	90                   	nop
c000c28c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c293:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c296:	83 c0 04             	add    eax,0x4
c000c299:	39 d8                	cmp    eax,ebx
c000c29b:	72 ef                	jb     c000c28c <ACPI::open(int, int, void*)+0x1e4>
c000c29d:	e8 b4 fe 00 00       	call   c001c156 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c2a2:	83 c4 30             	add    esp,0x30
c000c2a5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c2a8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c2ac:	0f 84 4e ff ff ff    	je     c000c200 <ACPI::open(int, int, void*)+0x158>
c000c2b2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c2b9:	83 ec 0c             	sub    esp,0xc
c000c2bc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c2bf:	e8 ec 25 00 00       	call   c000e8b0 <malloc>
c000c2c4:	83 c4 10             	add    esp,0x10
c000c2c7:	89 c3                	mov    ebx,eax
c000c2c9:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c2ce:	83 ec 04             	sub    esp,0x4
c000c2d1:	50                   	push   eax
c000c2d2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c2d5:	53                   	push   ebx
c000c2d6:	e8 51 be ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c2db:	83 c4 10             	add    esp,0x10
c000c2de:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c2e1:	83 ec 0c             	sub    esp,0xc
c000c2e4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c2e7:	e8 22 c1 ff ff       	call   c000840e <File::exists()>
c000c2ec:	83 c4 10             	add    esp,0x10
c000c2ef:	0f b6 c0             	movzx  eax,al
c000c2f2:	85 c0                	test   eax,eax
c000c2f4:	74 22                	je     c000c318 <ACPI::open(int, int, void*)+0x270>
c000c2f6:	83 ec 08             	sub    esp,0x8
c000c2f9:	6a 01                	push   0x1
c000c2fb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c2fe:	e8 57 88 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	83 ec 08             	sub    esp,0x8
c000c309:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c30c:	50                   	push   eax
c000c30d:	e8 a9 8a 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	8d 76 00             	lea    esi,[esi+0x0]
c000c318:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c31c:	0f 84 de fe ff ff    	je     c000c200 <ACPI::open(int, int, void*)+0x158>
c000c322:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c325:	8b 00                	mov    eax,DWORD PTR [eax]
c000c327:	83 c0 08             	add    eax,0x8
c000c32a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c32c:	83 ec 0c             	sub    esp,0xc
c000c32f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c332:	ff d0                	call   eax
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	e9 c4 fe ff ff       	jmp    c000c200 <ACPI::open(int, int, void*)+0x158>
c000c33c:	83 ec 0c             	sub    esp,0xc
c000c33f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c342:	50                   	push   eax
c000c343:	e8 30 42 01 00       	call   c0020578 <LinkedList<Device>::~LinkedList()>
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c351:	83 ec 08             	sub    esp,0x8
c000c354:	6a 01                	push   0x1
c000c356:	68 ce 20 02 c0       	push   0xc00220ce
c000c35b:	e8 fa 87 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c000c360:	83 c4 10             	add    esp,0x10
c000c363:	83 ec 08             	sub    esp,0x8
c000c366:	53                   	push   ebx
c000c367:	50                   	push   eax
c000c368:	e8 4e 8a 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c375:	85 c0                	test   eax,eax
c000c377:	0f 84 ef 00 00 00    	je     c000c46c <ACPI::open(int, int, void*)+0x3c4>
c000c37d:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c382:	85 c0                	test   eax,eax
c000c384:	0f 84 e2 00 00 00    	je     c000c46c <ACPI::open(int, int, void*)+0x3c4>
c000c38a:	83 ec 0c             	sub    esp,0xc
c000c38d:	68 eb 20 02 c0       	push   0xc00220eb
c000c392:	e8 c4 01 00 00       	call   c000c55b <KeSetBootMessage(char const*)>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c3a7:	e8 04 25 00 00       	call   c000e8b0 <malloc>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	89 c3                	mov    ebx,eax
c000c3b1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c3b6:	83 ec 04             	sub    esp,0x4
c000c3b9:	50                   	push   eax
c000c3ba:	68 08 21 02 c0       	push   0xc0022108
c000c3bf:	53                   	push   ebx
c000c3c0:	e8 67 bd ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c3cb:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c3cf:	74 1b                	je     c000c3ec <ACPI::open(int, int, void*)+0x344>
c000c3d1:	83 ec 0c             	sub    esp,0xc
c000c3d4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c3d7:	e8 32 c0 ff ff       	call   c000840e <File::exists()>
c000c3dc:	83 c4 10             	add    esp,0x10
c000c3df:	0f b6 c0             	movzx  eax,al
c000c3e2:	85 c0                	test   eax,eax
c000c3e4:	74 06                	je     c000c3ec <ACPI::open(int, int, void*)+0x344>
c000c3e6:	b0 01                	mov    al,0x1
c000c3e8:	eb 06                	jmp    c000c3f0 <ACPI::open(int, int, void*)+0x348>
c000c3ea:	66 90                	xchg   ax,ax
c000c3ec:	b0 00                	mov    al,0x0
c000c3ee:	66 90                	xchg   ax,ax
c000c3f0:	0f b6 c0             	movzx  eax,al
c000c3f3:	85 c0                	test   eax,eax
c000c3f5:	74 21                	je     c000c418 <ACPI::open(int, int, void*)+0x370>
c000c3f7:	83 ec 08             	sub    esp,0x8
c000c3fa:	6a 01                	push   0x1
c000c3fc:	68 08 21 02 c0       	push   0xc0022108
c000c401:	e8 54 87 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c000c406:	83 c4 10             	add    esp,0x10
c000c409:	83 ec 08             	sub    esp,0x8
c000c40c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c40f:	50                   	push   eax
c000c410:	e8 a6 89 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c000c415:	83 c4 10             	add    esp,0x10
c000c418:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c41c:	74 1e                	je     c000c43c <ACPI::open(int, int, void*)+0x394>
c000c41e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c422:	74 18                	je     c000c43c <ACPI::open(int, int, void*)+0x394>
c000c424:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c427:	8b 00                	mov    eax,DWORD PTR [eax]
c000c429:	83 c0 08             	add    eax,0x8
c000c42c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c42e:	83 ec 0c             	sub    esp,0xc
c000c431:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c434:	ff d0                	call   eax
c000c436:	83 c4 10             	add    esp,0x10
c000c439:	8d 76 00             	lea    esi,[esi+0x0]
c000c43c:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c441:	83 ec 08             	sub    esp,0x8
c000c444:	68 25 21 02 c0       	push   0xc0022125
c000c449:	50                   	push   eax
c000c44a:	e8 45 f3 ff ff       	call   c000b794 <findDataTable(unsigned char*, char*)>
c000c44f:	83 c4 10             	add    esp,0x10
c000c452:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c455:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c459:	74 11                	je     c000c46c <ACPI::open(int, int, void*)+0x3c4>
c000c45b:	83 ec 08             	sub    esp,0x8
c000c45e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c461:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c464:	e8 27 fc ff ff       	call   c000c090 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c469:	83 c4 10             	add    esp,0x10
c000c46c:	b8 00 00 00 00       	mov    eax,0x0
c000c471:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c474:	c9                   	leave  
c000c475:	c3                   	ret    

c000c476 <KeInitialiseAtexit()>:
c000c476:	83 ec 10             	sub    esp,0x10
c000c479:	6a 60                	push   0x60
c000c47b:	6a 00                	push   0x0
c000c47d:	68 00 ad 02 c0       	push   0xc002ad00
c000c482:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c48c:	e8 5f 40 ff ff       	call   c00004f0 <memset>
c000c491:	83 c4 1c             	add    esp,0x1c
c000c494:	c3                   	ret    

c000c495 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c495:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c49a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c49e:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c4a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4a9:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c4b0:	40                   	inc    eax
c000c4b1:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c4b6:	83 f8 17             	cmp    eax,0x17
c000c4b9:	7e 0d                	jle    c000c4c8 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c4bb:	c7 44 24 04 d0 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc00221d0
c000c4c3:	e9 2e 27 00 00       	jmp    c000ebf6 <KePanic(char const*)>
c000c4c8:	c3                   	ret    

c000c4c9 <KeExecuteAtexit()>:
c000c4c9:	53                   	push   ebx
c000c4ca:	31 db                	xor    ebx,ebx
c000c4cc:	83 ec 08             	sub    esp,0x8
c000c4cf:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c4d5:	7e 50                	jle    c000c527 <KeExecuteAtexit()+0x5e>
c000c4d7:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c4de:	85 c0                	test   eax,eax
c000c4e0:	74 42                	je     c000c524 <KeExecuteAtexit()+0x5b>
c000c4e2:	51                   	push   ecx
c000c4e3:	50                   	push   eax
c000c4e4:	53                   	push   ebx
c000c4e5:	68 e9 21 02 c0       	push   0xc00221e9
c000c4ea:	e8 5f aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c4ef:	58                   	pop    eax
c000c4f0:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c4f7:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c4fe:	c7 04 24 0b 22 02 c0 	mov    DWORD PTR [esp],0xc002220b
c000c505:	e8 44 aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c50a:	c7 04 24 9b 25 02 c0 	mov    DWORD PTR [esp],0xc002259b
c000c511:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c51c:	e8 2d aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c521:	83 c4 10             	add    esp,0x10
c000c524:	43                   	inc    ebx
c000c525:	eb a8                	jmp    c000c4cf <KeExecuteAtexit()+0x6>
c000c527:	83 c4 08             	add    esp,0x8
c000c52a:	5b                   	pop    ebx
c000c52b:	c3                   	ret    

c000c52c <KeDisplaySplashScreen()>:
c000c52c:	53                   	push   ebx
c000c52d:	bb 01 00 00 00       	mov    ebx,0x1
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	43                   	inc    ebx
c000c536:	0f be 83 0e 22 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdddf2]
c000c53d:	85 c0                	test   eax,eax
c000c53f:	74 15                	je     c000c556 <KeDisplaySplashScreen()+0x2a>
c000c541:	83 ec 0c             	sub    esp,0xc
c000c544:	6a 01                	push   0x1
c000c546:	53                   	push   ebx
c000c547:	6a 00                	push   0x0
c000c549:	6a 0f                	push   0xf
c000c54b:	50                   	push   eax
c000c54c:	e8 cf d2 00 00       	call   c0019820 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c551:	83 c4 20             	add    esp,0x20
c000c554:	eb df                	jmp    c000c535 <KeDisplaySplashScreen()+0x9>
c000c556:	83 c4 08             	add    esp,0x8
c000c559:	5b                   	pop    ebx
c000c55a:	c3                   	ret    

c000c55b <KeSetBootMessage(char const*)>:
c000c55b:	57                   	push   edi
c000c55c:	56                   	push   esi
c000c55d:	53                   	push   ebx
c000c55e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c564:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c56b:	68 9e 00 00 00       	push   0x9e
c000c570:	6a 00                	push   0x0
c000c572:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c576:	56                   	push   esi
c000c577:	e8 74 3f ff ff       	call   c00004f0 <memset>
c000c57c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c57f:	e8 fc 3f ff ff       	call   c0000580 <strlen>
c000c584:	ba 50 00 00 00       	mov    edx,0x50
c000c589:	83 c4 10             	add    esp,0x10
c000c58c:	31 c9                	xor    ecx,ecx
c000c58e:	29 c2                	sub    edx,eax
c000c590:	83 e2 fe             	and    edx,0xfffffffe
c000c593:	01 f2                	add    edx,esi
c000c595:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c59a:	84 c0                	test   al,al
c000c59c:	74 0a                	je     c000c5a8 <KeSetBootMessage(char const*)+0x4d>
c000c59e:	80 cc 07             	or     ah,0x7
c000c5a1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c5a5:	41                   	inc    ecx
c000c5a6:	eb ed                	jmp    c000c595 <KeSetBootMessage(char const*)+0x3a>
c000c5a8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c5ad:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c5b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5b4:	50                   	push   eax
c000c5b5:	50                   	push   eax
c000c5b6:	53                   	push   ebx
c000c5b7:	68 23 22 02 c0       	push   0xc0022223
c000c5bc:	e8 8d a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c5c1:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c5c7:	5b                   	pop    ebx
c000c5c8:	5e                   	pop    esi
c000c5c9:	5f                   	pop    edi
c000c5ca:	c3                   	ret    

c000c5cb <__cxa_atexit>:
c000c5cb:	31 c0                	xor    eax,eax
c000c5cd:	c3                   	ret    

c000c5ce <__cxa_finalize>:
c000c5ce:	c3                   	ret    

c000c5cf <__stack_chk_fail>:
c000c5cf:	55                   	push   ebp
c000c5d0:	89 e5                	mov    ebp,esp
c000c5d2:	83 ec 10             	sub    esp,0x10
c000c5d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c5d8:	68 31 22 02 c0       	push   0xc0022231
c000c5dd:	e8 6c a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c5e2:	58                   	pop    eax
c000c5e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e6:	5a                   	pop    edx
c000c5e7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5ea:	68 31 22 02 c0       	push   0xc0022231
c000c5ef:	e8 5a a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c5f4:	c7 04 24 39 22 02 c0 	mov    DWORD PTR [esp],0xc0022239
c000c5fb:	e8 f6 25 00 00       	call   c000ebf6 <KePanic(char const*)>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	c9                   	leave  
c000c604:	c3                   	ret    

c000c605 <__cxa_pure_virtual>:
c000c605:	83 ec 18             	sub    esp,0x18
c000c608:	68 51 22 02 c0       	push   0xc0022251
c000c60d:	e8 e4 25 00 00       	call   c000ebf6 <KePanic(char const*)>
c000c612:	83 c4 1c             	add    esp,0x1c
c000c615:	c3                   	ret    

c000c616 <operator new[](unsigned long)>:
c000c616:	e9 95 22 00 00       	jmp    c000e8b0 <malloc>

c000c61b <operator delete(void*, unsigned long)>:
c000c61b:	e9 b0 22 00 00       	jmp    c000e8d0 <rfree>

c000c620 <operator delete[](void*)>:
c000c620:	e9 ab 22 00 00       	jmp    c000e8d0 <rfree>

c000c625 <operator delete[](void*, unsigned long)>:
c000c625:	e9 a6 22 00 00       	jmp    c000e8d0 <rfree>
c000c62a:	66 90                	xchg   ax,ax

c000c62c <CUnlockScheduler>:
c000c62c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000c634:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c639:	85 c0                	test   eax,eax
c000c63b:	75 03                	jne    c000c640 <CUnlockScheduler+0x14>
c000c63d:	fb                   	sti    
c000c63e:	66 90                	xchg   ax,ax
c000c640:	90                   	nop
c000c641:	c3                   	ret    
c000c642:	66 90                	xchg   ax,ax

c000c644 <CLockScheduler>:
c000c644:	fa                   	cli    
c000c645:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c64a:	83 c0 01             	add    eax,0x1
c000c64d:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000c652:	90                   	nop
c000c653:	c3                   	ret    

c000c654 <CPrintf>:
c000c654:	83 ec 0c             	sub    esp,0xc
c000c657:	83 ec 08             	sub    esp,0x8
c000c65a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c65e:	68 64 22 02 c0       	push   0xc0022264
c000c663:	e8 e6 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	90                   	nop
c000c66c:	83 c4 0c             	add    esp,0xc
c000c66f:	c3                   	ret    

c000c670 <CmOpen(char const*)>:
c000c670:	57                   	push   edi
c000c671:	56                   	push   esi
c000c672:	53                   	push   ebx
c000c673:	83 ec 1c             	sub    esp,0x1c
c000c676:	6a 30                	push   0x30
c000c678:	e8 33 22 00 00       	call   c000e8b0 <malloc>
c000c67d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c684:	89 c3                	mov    ebx,eax
c000c686:	e8 25 22 00 00       	call   c000e8b0 <malloc>
c000c68b:	83 c4 0c             	add    esp,0xc
c000c68e:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000c694:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c698:	89 c6                	mov    esi,eax
c000c69a:	50                   	push   eax
c000c69b:	e8 8c ba ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c6a0:	83 c4 0c             	add    esp,0xc
c000c6a3:	89 33                	mov    DWORD PTR [ebx],esi
c000c6a5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c6a9:	50                   	push   eax
c000c6aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6ae:	50                   	push   eax
c000c6af:	56                   	push   esi
c000c6b0:	e8 97 bd ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000c6b5:	5a                   	pop    edx
c000c6b6:	59                   	pop    ecx
c000c6b7:	6a 01                	push   0x1
c000c6b9:	ff 33                	push   DWORD PTR [ebx]
c000c6bb:	e8 8a ba ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c6c0:	5e                   	pop    esi
c000c6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c5:	e8 e6 21 00 00       	call   c000e8b0 <malloc>
c000c6ca:	5a                   	pop    edx
c000c6cb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c6cf:	89 c7                	mov    edi,eax
c000c6d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6d3:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6d5:	56                   	push   esi
c000c6d6:	57                   	push   edi
c000c6d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c6db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c6df:	50                   	push   eax
c000c6e0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c6e3:	83 c4 14             	add    esp,0x14
c000c6e6:	ff 33                	push   DWORD PTR [ebx]
c000c6e8:	e8 bb ba ff ff       	call   c00081a8 <File::close()>
c000c6ed:	59                   	pop    ecx
c000c6ee:	58                   	pop    eax
c000c6ef:	6a 13                	push   0x13
c000c6f1:	ff 33                	push   DWORD PTR [ebx]
c000c6f3:	e8 52 ba ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c6f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6fa:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6fc:	89 34 24             	mov    DWORD PTR [esp],esi
c000c6ff:	57                   	push   edi
c000c700:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c704:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c708:	50                   	push   eax
c000c709:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c70c:	83 c4 14             	add    esp,0x14
c000c70f:	57                   	push   edi
c000c710:	e8 ab 21 00 00       	call   c000e8c0 <free>
c000c715:	83 c4 10             	add    esp,0x10
c000c718:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c71b:	75 10                	jne    c000c72d <CmOpen(char const*)+0xbd>
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	68 67 22 02 c0       	push   0xc0022267
c000c725:	e8 cc 24 00 00       	call   c000ebf6 <KePanic(char const*)>
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	50                   	push   eax
c000c72e:	6a 00                	push   0x0
c000c730:	6a 00                	push   0x0
c000c732:	ff 33                	push   DWORD PTR [ebx]
c000c734:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c737:	e8 cc ba ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c73c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c73e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c740:	89 34 24             	mov    DWORD PTR [esp],esi
c000c743:	57                   	push   edi
c000c744:	6a 00                	push   0x0
c000c746:	6a 2b                	push   0x2b
c000c748:	50                   	push   eax
c000c749:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c74c:	83 c4 1c             	add    esp,0x1c
c000c74f:	6a 00                	push   0x0
c000c751:	6a 00                	push   0x0
c000c753:	ff 33                	push   DWORD PTR [ebx]
c000c755:	e8 ae ba ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c75a:	83 c4 0c             	add    esp,0xc
c000c75d:	6a 08                	push   0x8
c000c75f:	68 78 22 02 c0       	push   0xc0022278
c000c764:	57                   	push   edi
c000c765:	e8 16 3c ff ff       	call   c0000380 <memcmp>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	85 c0                	test   eax,eax
c000c76f:	74 10                	je     c000c781 <CmOpen(char const*)+0x111>
c000c771:	83 ec 0c             	sub    esp,0xc
c000c774:	68 81 22 02 c0       	push   0xc0022281
c000c779:	e8 78 24 00 00       	call   c000ebf6 <KePanic(char const*)>
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c785:	83 c4 10             	add    esp,0x10
c000c788:	89 d8                	mov    eax,ebx
c000c78a:	5b                   	pop    ebx
c000c78b:	5e                   	pop    esi
c000c78c:	5f                   	pop    edi
c000c78d:	c3                   	ret    

c000c78e <CmClose(Reghive_Tag*)>:
c000c78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c792:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c796:	74 0b                	je     c000c7a3 <CmClose(Reghive_Tag*)+0x15>
c000c798:	8b 00                	mov    eax,DWORD PTR [eax]
c000c79a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c79e:	e9 05 ba ff ff       	jmp    c00081a8 <File::close()>
c000c7a3:	c3                   	ret    

c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c7a4:	53                   	push   ebx
c000c7a5:	83 ec 18             	sub    esp,0x18
c000c7a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c7ac:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c7b0:	74 29                	je     c000c7db <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c7b2:	50                   	push   eax
c000c7b3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c7b8:	99                   	cdq    
c000c7b9:	52                   	push   edx
c000c7ba:	50                   	push   eax
c000c7bb:	ff 33                	push   DWORD PTR [ebx]
c000c7bd:	e8 46 ba ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c7c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7c4:	5a                   	pop    edx
c000c7c5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c7c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7cb:	51                   	push   ecx
c000c7cc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c7d0:	6a 00                	push   0x0
c000c7d2:	6a 2b                	push   0x2b
c000c7d4:	50                   	push   eax
c000c7d5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c7d8:	83 c4 20             	add    esp,0x20
c000c7db:	83 c4 18             	add    esp,0x18
c000c7de:	5b                   	pop    ebx
c000c7df:	c3                   	ret    

c000c7e0 <CmGetString(Reghive_Tag*, int, char*)>:
c000c7e0:	55                   	push   ebp
c000c7e1:	57                   	push   edi
c000c7e2:	56                   	push   esi
c000c7e3:	53                   	push   ebx
c000c7e4:	31 db                	xor    ebx,ebx
c000c7e6:	83 ec 70             	sub    esp,0x70
c000c7e9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c7ed:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c7f4:	50                   	push   eax
c000c7f5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c7fc:	55                   	push   ebp
c000c7fd:	e8 a2 ff ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c802:	83 c4 10             	add    esp,0x10
c000c805:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c80a:	c1 e0 08             	shl    eax,0x8
c000c80d:	89 c2                	mov    edx,eax
c000c80f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c814:	09 d0                	or     eax,edx
c000c816:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c81b:	c1 e0 08             	shl    eax,0x8
c000c81e:	09 d0                	or     eax,edx
c000c820:	74 25                	je     c000c847 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c822:	52                   	push   edx
c000c823:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c827:	52                   	push   edx
c000c828:	6b fb 0d             	imul   edi,ebx,0xd
c000c82b:	50                   	push   eax
c000c82c:	55                   	push   ebp
c000c82d:	e8 72 ff ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c832:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c836:	b9 27 00 00 00       	mov    ecx,0x27
c000c83b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c842:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c844:	83 c4 10             	add    esp,0x10
c000c847:	83 c3 03             	add    ebx,0x3
c000c84a:	83 fb 15             	cmp    ebx,0x15
c000c84d:	75 b6                	jne    c000c805 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c84f:	83 c4 6c             	add    esp,0x6c
c000c852:	5b                   	pop    ebx
c000c853:	5e                   	pop    esi
c000c854:	5f                   	pop    edi
c000c855:	5d                   	pop    ebp
c000c856:	c3                   	ret    

c000c857 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c857:	83 ec 40             	sub    esp,0x40
c000c85a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c85e:	50                   	push   eax
c000c85f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c863:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c867:	e8 38 ff ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c86c:	83 c4 10             	add    esp,0x10
c000c86f:	83 c8 ff             	or     eax,0xffffffff
c000c872:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c877:	75 19                	jne    c000c892 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c879:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c87e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c883:	c1 e0 08             	shl    eax,0x8
c000c886:	09 c2                	or     edx,eax
c000c888:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c88d:	c1 e0 10             	shl    eax,0x10
c000c890:	09 d0                	or     eax,edx
c000c892:	83 c4 3c             	add    esp,0x3c
c000c895:	c3                   	ret    

c000c896 <CmGetNext(Reghive_Tag*, int)>:
c000c896:	83 ec 40             	sub    esp,0x40
c000c899:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c89d:	50                   	push   eax
c000c89e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a6:	e8 f9 fe ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8ab:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c8b0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c8b5:	c1 e0 08             	shl    eax,0x8
c000c8b8:	09 c2                	or     edx,eax
c000c8ba:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c8bf:	83 c4 4c             	add    esp,0x4c
c000c8c2:	c1 e0 10             	shl    eax,0x10
c000c8c5:	09 d0                	or     eax,edx
c000c8c7:	c3                   	ret    

c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c8c8:	53                   	push   ebx
c000c8c9:	83 ec 18             	sub    esp,0x18
c000c8cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c8d0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c8d4:	74 29                	je     c000c8ff <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c8d6:	50                   	push   eax
c000c8d7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c8dc:	99                   	cdq    
c000c8dd:	52                   	push   edx
c000c8de:	50                   	push   eax
c000c8df:	ff 33                	push   DWORD PTR [ebx]
c000c8e1:	e8 22 b9 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c8e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8e8:	5a                   	pop    edx
c000c8e9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c8ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ef:	51                   	push   ecx
c000c8f0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c8f4:	6a 00                	push   0x0
c000c8f6:	6a 2b                	push   0x2b
c000c8f8:	50                   	push   eax
c000c8f9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c8fc:	83 c4 20             	add    esp,0x20
c000c8ff:	83 c4 18             	add    esp,0x18
c000c902:	5b                   	pop    ebx
c000c903:	c3                   	ret    

c000c904 <CmFreeExtent(Reghive_Tag*, int)>:
c000c904:	53                   	push   ebx
c000c905:	83 ec 3c             	sub    esp,0x3c
c000c908:	6a 2b                	push   0x2b
c000c90a:	6a 00                	push   0x0
c000c90c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c910:	53                   	push   ebx
c000c911:	e8 da 3b ff ff       	call   c00004f0 <memset>
c000c916:	83 c4 0c             	add    esp,0xc
c000c919:	53                   	push   ebx
c000c91a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c91e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c922:	e8 a1 ff ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c927:	83 c4 48             	add    esp,0x48
c000c92a:	5b                   	pop    ebx
c000c92b:	c3                   	ret    

c000c92c <CmUpdateHeader(Reghive_Tag*)>:
c000c92c:	83 ec 0c             	sub    esp,0xc
c000c92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c933:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c937:	74 10                	je     c000c949 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c939:	52                   	push   edx
c000c93a:	8d 50 05             	lea    edx,[eax+0x5]
c000c93d:	52                   	push   edx
c000c93e:	6a 00                	push   0x0
c000c940:	50                   	push   eax
c000c941:	e8 82 ff ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	83 c4 0c             	add    esp,0xc
c000c94c:	c3                   	ret    

c000c94d <CmExpand(Reghive_Tag*, int)>:
c000c94d:	55                   	push   ebp
c000c94e:	57                   	push   edi
c000c94f:	83 cf ff             	or     edi,0xffffffff
c000c952:	56                   	push   esi
c000c953:	53                   	push   ebx
c000c954:	83 ec 3c             	sub    esp,0x3c
c000c957:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000c95b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000c95f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c963:	74 59                	je     c000c9be <CmExpand(Reghive_Tag*, int)+0x71>
c000c965:	50                   	push   eax
c000c966:	31 d2                	xor    edx,edx
c000c968:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000c96c:	31 ff                	xor    edi,edi
c000c96e:	52                   	push   edx
c000c96f:	50                   	push   eax
c000c970:	ff 33                	push   DWORD PTR [ebx]
c000c972:	e8 91 b8 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c977:	83 c4 0c             	add    esp,0xc
c000c97a:	6a 2b                	push   0x2b
c000c97c:	6a 00                	push   0x0
c000c97e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000c982:	55                   	push   ebp
c000c983:	e8 68 3b ff ff       	call   c00004f0 <memset>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	39 f7                	cmp    edi,esi
c000c98d:	7d 1b                	jge    c000c9aa <CmExpand(Reghive_Tag*, int)+0x5d>
c000c98f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c991:	83 ec 0c             	sub    esp,0xc
c000c994:	47                   	inc    edi
c000c995:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000c999:	8b 10                	mov    edx,DWORD PTR [eax]
c000c99b:	51                   	push   ecx
c000c99c:	55                   	push   ebp
c000c99d:	6a 00                	push   0x0
c000c99f:	6a 2b                	push   0x2b
c000c9a1:	50                   	push   eax
c000c9a2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9a5:	83 c4 20             	add    esp,0x20
c000c9a8:	eb e1                	jmp    c000c98b <CmExpand(Reghive_Tag*, int)+0x3e>
c000c9aa:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000c9ad:	83 ec 0c             	sub    esp,0xc
c000c9b0:	01 fe                	add    esi,edi
c000c9b2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000c9b5:	53                   	push   ebx
c000c9b6:	e8 71 ff ff ff       	call   c000c92c <CmUpdateHeader(Reghive_Tag*)>
c000c9bb:	83 c4 10             	add    esp,0x10
c000c9be:	83 c4 3c             	add    esp,0x3c
c000c9c1:	89 f8                	mov    eax,edi
c000c9c3:	5b                   	pop    ebx
c000c9c4:	5e                   	pop    esi
c000c9c5:	5f                   	pop    edi
c000c9c6:	5d                   	pop    ebp
c000c9c7:	c3                   	ret    

c000c9c8 <CmFindUnusedExtent(Reghive_Tag*)>:
c000c9c8:	55                   	push   ebp
c000c9c9:	57                   	push   edi
c000c9ca:	56                   	push   esi
c000c9cb:	53                   	push   ebx
c000c9cc:	83 cb ff             	or     ebx,0xffffffff
c000c9cf:	83 ec 1c             	sub    esp,0x1c
c000c9d2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c9d6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000c9da:	74 68                	je     c000ca44 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000c9dc:	51                   	push   ecx
c000c9dd:	be 2b 00 00 00       	mov    esi,0x2b
c000c9e2:	6a 00                	push   0x0
c000c9e4:	31 ff                	xor    edi,edi
c000c9e6:	6a 00                	push   0x0
c000c9e8:	31 db                	xor    ebx,ebx
c000c9ea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9ed:	e8 16 b8 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000c9f2:	83 c4 10             	add    esp,0x10
c000c9f5:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000c9f8:	76 3b                	jbe    c000ca35 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000c9fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9fd:	83 ec 0c             	sub    esp,0xc
c000ca00:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca04:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca06:	51                   	push   ecx
c000ca07:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ca0b:	51                   	push   ecx
c000ca0c:	6a 00                	push   0x0
c000ca0e:	6a 01                	push   0x1
c000ca10:	50                   	push   eax
c000ca11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca14:	83 c4 20             	add    esp,0x20
c000ca17:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ca1c:	74 26                	je     c000ca44 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca1e:	52                   	push   edx
c000ca1f:	43                   	inc    ebx
c000ca20:	57                   	push   edi
c000ca21:	56                   	push   esi
c000ca22:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca25:	e8 de b7 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ca2a:	83 c6 2b             	add    esi,0x2b
c000ca2d:	83 d7 00             	adc    edi,0x0
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	eb c0                	jmp    c000c9f5 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000ca35:	50                   	push   eax
c000ca36:	50                   	push   eax
c000ca37:	6a 40                	push   0x40
c000ca39:	55                   	push   ebp
c000ca3a:	e8 0e ff ff ff       	call   c000c94d <CmExpand(Reghive_Tag*, int)>
c000ca3f:	83 c4 10             	add    esp,0x10
c000ca42:	89 c3                	mov    ebx,eax
c000ca44:	83 c4 1c             	add    esp,0x1c
c000ca47:	89 d8                	mov    eax,ebx
c000ca49:	5b                   	pop    ebx
c000ca4a:	5e                   	pop    esi
c000ca4b:	5f                   	pop    edi
c000ca4c:	5d                   	pop    ebp
c000ca4d:	c3                   	ret    

c000ca4e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000ca4e:	55                   	push   ebp
c000ca4f:	57                   	push   edi
c000ca50:	56                   	push   esi
c000ca51:	53                   	push   ebx
c000ca52:	81 ec 88 00 00 00    	sub    esp,0x88
c000ca58:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000ca5f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ca66:	e8 5d ff ff ff       	call   c000c9c8 <CmFindUnusedExtent(Reghive_Tag*)>
c000ca6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ca6f:	83 c4 0c             	add    esp,0xc
c000ca72:	6a 2b                	push   0x2b
c000ca74:	6a 00                	push   0x0
c000ca76:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000ca7a:	55                   	push   ebp
c000ca7b:	e8 70 3a ff ff       	call   c00004f0 <memset>
c000ca80:	83 c4 10             	add    esp,0x10
c000ca83:	85 db                	test   ebx,ebx
c000ca85:	74 12                	je     c000ca99 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000ca87:	51                   	push   ecx
c000ca88:	55                   	push   ebp
c000ca89:	53                   	push   ebx
c000ca8a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ca91:	e8 0e fd ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ca96:	83 c4 10             	add    esp,0x10
c000ca99:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000ca9d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000caa4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000caa9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caab:	85 db                	test   ebx,ebx
c000caad:	74 49                	je     c000caf8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000caaf:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cab4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cab9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cabd:	c1 e0 08             	shl    eax,0x8
c000cac0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cac6:	09 c8                	or     eax,ecx
c000cac8:	74 11                	je     c000cadb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000caca:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cace:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cad2:	c1 e8 10             	shr    eax,0x10
c000cad5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cad9:	eb 0f                	jmp    c000caea <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cadb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cae0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cae5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000caea:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000caee:	c1 ea 08             	shr    edx,0x8
c000caf1:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000caf6:	eb 0f                	jmp    c000cb07 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000caf8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cafd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb02:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb07:	52                   	push   edx
c000cb08:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cb0c:	50                   	push   eax
c000cb0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb11:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb18:	e8 ab fd ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb1d:	83 c4 10             	add    esp,0x10
c000cb20:	85 db                	test   ebx,ebx
c000cb22:	74 12                	je     c000cb36 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cb24:	50                   	push   eax
c000cb25:	55                   	push   ebp
c000cb26:	53                   	push   ebx
c000cb27:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb2e:	e8 95 fd ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb33:	83 c4 10             	add    esp,0x10
c000cb36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb3a:	83 c4 7c             	add    esp,0x7c
c000cb3d:	5b                   	pop    ebx
c000cb3e:	5e                   	pop    esi
c000cb3f:	5f                   	pop    edi
c000cb40:	5d                   	pop    ebp
c000cb41:	c3                   	ret    

c000cb42 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cb42:	55                   	push   ebp
c000cb43:	57                   	push   edi
c000cb44:	56                   	push   esi
c000cb45:	53                   	push   ebx
c000cb46:	bb 27 00 00 00       	mov    ebx,0x27
c000cb4b:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb51:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cb58:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cb5f:	e8 1c 3a ff ff       	call   c0000580 <strlen>
c000cb64:	8d 48 26             	lea    ecx,[eax+0x26]
c000cb67:	89 c8                	mov    eax,ecx
c000cb69:	99                   	cdq    
c000cb6a:	f7 fb                	idiv   ebx
c000cb6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cb79:	7e 10                	jle    c000cb8b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cb7b:	83 ec 0c             	sub    esp,0xc
c000cb7e:	68 92 22 02 c0       	push   0xc0022292
c000cb83:	e8 6e 20 00 00       	call   c000ebf6 <KePanic(char const*)>
c000cb88:	83 c4 10             	add    esp,0x10
c000cb8b:	53                   	push   ebx
c000cb8c:	31 ed                	xor    ebp,ebp
c000cb8e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cb92:	53                   	push   ebx
c000cb93:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb9a:	57                   	push   edi
c000cb9b:	e8 04 fc ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cba0:	83 c4 10             	add    esp,0x10
c000cba3:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cba7:	89 f0                	mov    eax,esi
c000cba9:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cbad:	c1 e0 08             	shl    eax,0x8
c000cbb0:	09 c6                	or     esi,eax
c000cbb2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cbb6:	c1 e6 08             	shl    esi,0x8
c000cbb9:	09 c6                	or     esi,eax
c000cbbb:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cbbf:	7e 72                	jle    c000cc33 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cbc1:	85 f6                	test   esi,esi
c000cbc3:	75 25                	jne    c000cbea <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cbc5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cbca:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cbce:	50                   	push   eax
c000cbcf:	6a 00                	push   0x0
c000cbd1:	6a 00                	push   0x0
c000cbd3:	57                   	push   edi
c000cbd4:	e8 75 fe ff ff       	call   c000ca4e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cbdf:	89 c6                	mov    esi,eax
c000cbe1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cbe4:	c1 f8 10             	sar    eax,0x10
c000cbe7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cbea:	51                   	push   ecx
c000cbeb:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cbef:	52                   	push   edx
c000cbf0:	56                   	push   esi
c000cbf1:	57                   	push   edi
c000cbf2:	e8 ad fb ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbf7:	83 c4 0c             	add    esp,0xc
c000cbfa:	6a 27                	push   0x27
c000cbfc:	6a 00                	push   0x0
c000cbfe:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc02:	51                   	push   ecx
c000cc03:	e8 e8 38 ff ff       	call   c00004f0 <memset>
c000cc08:	6b c5 27             	imul   eax,ebp,0x27
c000cc0b:	83 c4 0c             	add    esp,0xc
c000cc0e:	6a 27                	push   0x27
c000cc10:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cc17:	50                   	push   eax
c000cc18:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc1c:	51                   	push   ecx
c000cc1d:	e8 6e 3a ff ff       	call   c0000690 <strncpy>
c000cc22:	83 c4 0c             	add    esp,0xc
c000cc25:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc29:	52                   	push   edx
c000cc2a:	56                   	push   esi
c000cc2b:	57                   	push   edi
c000cc2c:	e8 97 fc ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc31:	eb 19                	jmp    c000cc4c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000cc33:	85 f6                	test   esi,esi
c000cc35:	74 18                	je     c000cc4f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000cc37:	52                   	push   edx
c000cc38:	52                   	push   edx
c000cc39:	56                   	push   esi
c000cc3a:	57                   	push   edi
c000cc3b:	e8 c4 fc ff ff       	call   c000c904 <CmFreeExtent(Reghive_Tag*, int)>
c000cc40:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cc44:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cc48:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cc4c:	83 c4 10             	add    esp,0x10
c000cc4f:	45                   	inc    ebp
c000cc50:	83 c3 03             	add    ebx,0x3
c000cc53:	83 fd 07             	cmp    ebp,0x7
c000cc56:	0f 85 47 ff ff ff    	jne    c000cba3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cc5c:	50                   	push   eax
c000cc5d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cc61:	50                   	push   eax
c000cc62:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc69:	57                   	push   edi
c000cc6a:	e8 59 fc ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc6f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cc75:	5b                   	pop    ebx
c000cc76:	5e                   	pop    esi
c000cc77:	5f                   	pop    edi
c000cc78:	5d                   	pop    ebp
c000cc79:	c3                   	ret    

c000cc7a <CmGetMatch(char*, char*, bool, bool*)>:
c000cc7a:	56                   	push   esi
c000cc7b:	53                   	push   ebx
c000cc7c:	50                   	push   eax
c000cc7d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cc82:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cc86:	74 25                	je     c000ccad <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cc88:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cc8b:	31 db                	xor    ebx,ebx
c000cc8d:	50                   	push   eax
c000cc8e:	50                   	push   eax
c000cc8f:	8d 04 9d 00 46 02 c0 	lea    eax,[ebx*4-0x3ffdba00]
c000cc96:	50                   	push   eax
c000cc97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9b:	e8 e0 3a ff ff       	call   c0000780 <strcmp>
c000cca0:	83 c4 10             	add    esp,0x10
c000cca3:	85 c0                	test   eax,eax
c000cca5:	74 2e                	je     c000ccd5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cca7:	43                   	inc    ebx
c000cca8:	83 fb 3f             	cmp    ebx,0x3f
c000ccab:	75 e0                	jne    c000cc8d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000ccad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ccb0:	31 db                	xor    ebx,ebx
c000ccb2:	51                   	push   ecx
c000ccb3:	51                   	push   ecx
c000ccb4:	8d 04 9d 00 46 02 c0 	lea    eax,[ebx*4-0x3ffdba00]
c000ccbb:	50                   	push   eax
c000ccbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ccc0:	e8 bb 3a ff ff       	call   c0000780 <strcmp>
c000ccc5:	83 c4 10             	add    esp,0x10
c000ccc8:	85 c0                	test   eax,eax
c000ccca:	74 09                	je     c000ccd5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cccc:	43                   	inc    ebx
c000cccd:	83 fb 3f             	cmp    ebx,0x3f
c000ccd0:	75 e0                	jne    c000ccb2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000ccd2:	83 cb ff             	or     ebx,0xffffffff
c000ccd5:	5a                   	pop    edx
c000ccd6:	89 d8                	mov    eax,ebx
c000ccd8:	5b                   	pop    ebx
c000ccd9:	5e                   	pop    esi
c000ccda:	c3                   	ret    

c000ccdb <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000ccdb:	55                   	push   ebp
c000ccdc:	31 c0                	xor    eax,eax
c000ccde:	57                   	push   edi
c000ccdf:	56                   	push   esi
c000cce0:	53                   	push   ebx
c000cce1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cce5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cce9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cced:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccf1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000ccf3:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000ccf6:	83 fd 1f             	cmp    ebp,0x1f
c000ccf9:	7f 0b                	jg     c000cd06 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000ccfb:	0f b6 c2             	movzx  eax,dl
c000ccfe:	d3 e0                	shl    eax,cl
c000cd00:	09 07                	or     DWORD PTR [edi],eax
c000cd02:	b0 01                	mov    al,0x1
c000cd04:	01 33                	add    DWORD PTR [ebx],esi
c000cd06:	5b                   	pop    ebx
c000cd07:	5e                   	pop    esi
c000cd08:	5f                   	pop    edi
c000cd09:	5d                   	pop    ebp
c000cd0a:	c3                   	ret    

c000cd0b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cd0b:	57                   	push   edi
c000cd0c:	56                   	push   esi
c000cd0d:	53                   	push   ebx
c000cd0e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd12:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cd16:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cd1a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd1e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cd20:	7c 17                	jl     c000cd39 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cd22:	8b 17                	mov    edx,DWORD PTR [edi]
c000cd24:	b8 01 00 00 00       	mov    eax,0x1
c000cd29:	d3 e0                	shl    eax,cl
c000cd2b:	48                   	dec    eax
c000cd2c:	21 d0                	and    eax,edx
c000cd2e:	d3 ea                	shr    edx,cl
c000cd30:	89 17                	mov    DWORD PTR [edi],edx
c000cd32:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cd34:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd37:	eb 05                	jmp    c000cd3e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cd39:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd3c:	31 c0                	xor    eax,eax
c000cd3e:	5b                   	pop    ebx
c000cd3f:	5e                   	pop    esi
c000cd40:	5f                   	pop    edi
c000cd41:	c3                   	ret    

c000cd42 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cd42:	83 ec 40             	sub    esp,0x40
c000cd45:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd49:	50                   	push   eax
c000cd4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd52:	e8 4d fa ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd57:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cd5b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cd5f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cd63:	89 10                	mov    DWORD PTR [eax],edx
c000cd65:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cd68:	83 c4 4c             	add    esp,0x4c
c000cd6b:	c3                   	ret    

c000cd6c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cd6c:	55                   	push   ebp
c000cd6d:	57                   	push   edi
c000cd6e:	56                   	push   esi
c000cd6f:	53                   	push   ebx
c000cd70:	83 ec 40             	sub    esp,0x40
c000cd73:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cd77:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cd7b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000cd7f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cd83:	53                   	push   ebx
c000cd84:	56                   	push   esi
c000cd85:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cd89:	e8 16 fa ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd8e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cd92:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000cd96:	83 c4 0c             	add    esp,0xc
c000cd99:	53                   	push   ebx
c000cd9a:	56                   	push   esi
c000cd9b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cd9f:	e8 24 fb ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cda4:	83 c4 4c             	add    esp,0x4c
c000cda7:	5b                   	pop    ebx
c000cda8:	5e                   	pop    esi
c000cda9:	5f                   	pop    edi
c000cdaa:	5d                   	pop    ebp
c000cdab:	c3                   	ret    

c000cdac <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cdac:	55                   	push   ebp
c000cdad:	57                   	push   edi
c000cdae:	56                   	push   esi
c000cdaf:	31 f6                	xor    esi,esi
c000cdb1:	53                   	push   ebx
c000cdb2:	31 db                	xor    ebx,ebx
c000cdb4:	83 ec 40             	sub    esp,0x40
c000cdb7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cdbf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cdc7:	6a 12                	push   0x12
c000cdc9:	68 ee 00 00 00       	push   0xee
c000cdce:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cdd2:	e8 19 37 ff ff       	call   c00004f0 <memset>
c000cdd7:	83 c4 10             	add    esp,0x10
c000cdda:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000cdde:	6a 08                	push   0x8
c000cde0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cde4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000cde8:	50                   	push   eax
c000cde9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cded:	55                   	push   ebp
c000cdee:	57                   	push   edi
c000cdef:	e8 e7 fe ff ff       	call   c000ccdb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cdfb:	50                   	push   eax
c000cdfc:	6a 06                	push   0x6
c000cdfe:	55                   	push   ebp
c000cdff:	57                   	push   edi
c000ce00:	e8 06 ff ff ff       	call   c000cd0b <CmGetShift(unsigned int*, int*, int, bool*)>
c000ce05:	83 c4 10             	add    esp,0x10
c000ce08:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ce0d:	74 07                	je     c000ce16 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000ce0f:	46                   	inc    esi
c000ce10:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000ce14:	eb e1                	jmp    c000cdf7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000ce16:	43                   	inc    ebx
c000ce17:	83 fb 12             	cmp    ebx,0x12
c000ce1a:	75 c2                	jne    c000cdde <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000ce1c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce20:	31 f6                	xor    esi,esi
c000ce22:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ce25:	50                   	push   eax
c000ce26:	50                   	push   eax
c000ce27:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000ce2c:	46                   	inc    esi
c000ce2d:	8d 04 85 00 46 02 c0 	lea    eax,[eax*4-0x3ffdba00]
c000ce34:	50                   	push   eax
c000ce35:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce39:	e8 32 3a ff ff       	call   c0000870 <strcat>
c000ce3e:	83 c4 10             	add    esp,0x10
c000ce41:	83 fe 18             	cmp    esi,0x18
c000ce44:	75 df                	jne    c000ce25 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000ce46:	83 c4 3c             	add    esp,0x3c
c000ce49:	31 c0                	xor    eax,eax
c000ce4b:	5b                   	pop    ebx
c000ce4c:	5e                   	pop    esi
c000ce4d:	5f                   	pop    edi
c000ce4e:	5d                   	pop    ebp
c000ce4f:	c3                   	ret    

c000ce50 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000ce50:	83 ec 40             	sub    esp,0x40
c000ce53:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce57:	50                   	push   eax
c000ce58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce60:	e8 3f f9 ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce65:	58                   	pop    eax
c000ce66:	5a                   	pop    edx
c000ce67:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000ce6b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000ce6f:	50                   	push   eax
c000ce70:	e8 37 ff ff ff       	call   c000cdac <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000ce75:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	c3                   	ret    

c000ce7e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000ce7e:	55                   	push   ebp
c000ce7f:	57                   	push   edi
c000ce80:	56                   	push   esi
c000ce81:	53                   	push   ebx
c000ce82:	31 db                	xor    ebx,ebx
c000ce84:	83 ec 70             	sub    esp,0x70
c000ce87:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000ce8e:	6a 30                	push   0x30
c000ce90:	6a 00                	push   0x0
c000ce92:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000ce96:	56                   	push   esi
c000ce97:	e8 54 36 ff ff       	call   c00004f0 <memset>
c000ce9c:	83 c4 10             	add    esp,0x10
c000ce9f:	83 ec 0c             	sub    esp,0xc
c000cea2:	57                   	push   edi
c000cea3:	e8 d8 36 ff ff       	call   c0000580 <strlen>
c000cea8:	83 c4 10             	add    esp,0x10
c000ceab:	39 d8                	cmp    eax,ebx
c000cead:	76 16                	jbe    c000cec5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000ceaf:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000ceb3:	83 ec 0c             	sub    esp,0xc
c000ceb6:	50                   	push   eax
c000ceb7:	e8 a4 3a ff ff       	call   c0000960 <toupper>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cec2:	43                   	inc    ebx
c000cec3:	eb da                	jmp    c000ce9f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cec5:	52                   	push   edx
c000cec6:	31 db                	xor    ebx,ebx
c000cec8:	6a 18                	push   0x18
c000ceca:	31 ff                	xor    edi,edi
c000cecc:	6a 3f                	push   0x3f
c000cece:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ced2:	50                   	push   eax
c000ced3:	e8 18 36 ff ff       	call   c00004f0 <memset>
c000ced8:	83 c4 10             	add    esp,0x10
c000cedb:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000cedf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cee3:	84 c0                	test   al,al
c000cee5:	0f 84 af 00 00 00    	je     c000cf9a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000ceeb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000ceef:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000cefa:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cefe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000cf02:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000cf07:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cf0b:	56                   	push   esi
c000cf0c:	e8 6f 36 ff ff       	call   c0000580 <strlen>
c000cf11:	83 c4 10             	add    esp,0x10
c000cf14:	85 c0                	test   eax,eax
c000cf16:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cf1a:	74 0b                	je     c000cf27 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cf1c:	50                   	push   eax
c000cf1d:	6a 01                	push   0x1
c000cf1f:	56                   	push   esi
c000cf20:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cf24:	50                   	push   eax
c000cf25:	eb 0a                	jmp    c000cf31 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cf27:	50                   	push   eax
c000cf28:	6a 00                	push   0x0
c000cf2a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cf2e:	50                   	push   eax
c000cf2f:	6a 00                	push   0x0
c000cf31:	e8 44 fd ff ff       	call   c000cc7a <CmGetMatch(char*, char*, bool, bool*)>
c000cf36:	83 c4 10             	add    esp,0x10
c000cf39:	83 f8 ff             	cmp    eax,0xffffffff
c000cf3c:	75 1a                	jne    c000cf58 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cf3e:	83 ec 0c             	sub    esp,0xc
c000cf41:	68 a7 22 02 c0       	push   0xc00222a7
c000cf46:	e8 ab 1c 00 00       	call   c000ebf6 <KePanic(char const*)>
c000cf4b:	83 c4 10             	add    esp,0x10
c000cf4e:	b8 02 00 00 00       	mov    eax,0x2
c000cf53:	e9 bb 00 00 00       	jmp    c000d013 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cf58:	83 ff 18             	cmp    edi,0x18
c000cf5b:	75 1a                	jne    c000cf77 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000cf5d:	83 ec 0c             	sub    esp,0xc
c000cf60:	68 bc 22 02 c0       	push   0xc00222bc
c000cf65:	e8 8c 1c 00 00       	call   c000ebf6 <KePanic(char const*)>
c000cf6a:	83 c4 10             	add    esp,0x10
c000cf6d:	b8 01 00 00 00       	mov    eax,0x1
c000cf72:	e9 9c 00 00 00       	jmp    c000d013 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cf77:	47                   	inc    edi
c000cf78:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cf7d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000cf81:	0f 45 dd             	cmovne ebx,ebp
c000cf84:	83 ec 0c             	sub    esp,0xc
c000cf87:	56                   	push   esi
c000cf88:	e8 f3 35 ff ff       	call   c0000580 <strlen>
c000cf8d:	83 c4 10             	add    esp,0x10
c000cf90:	85 c0                	test   eax,eax
c000cf92:	74 06                	je     c000cf9a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cf94:	43                   	inc    ebx
c000cf95:	e9 41 ff ff ff       	jmp    c000cedb <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000cf9a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfa2:	31 db                	xor    ebx,ebx
c000cfa4:	31 ff                	xor    edi,edi
c000cfa6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfae:	50                   	push   eax
c000cfaf:	6a 12                	push   0x12
c000cfb1:	68 ee 00 00 00       	push   0xee
c000cfb6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000cfbd:	e8 2e 35 ff ff       	call   c00004f0 <memset>
c000cfc2:	83 c4 10             	add    esp,0x10
c000cfc5:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000cfc9:	83 fb 17             	cmp    ebx,0x17
c000cfcc:	7e 26                	jle    c000cff4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000cfce:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cfd2:	50                   	push   eax
c000cfd3:	6a 08                	push   0x8
c000cfd5:	55                   	push   ebp
c000cfd6:	56                   	push   esi
c000cfd7:	e8 2f fd ff ff       	call   c000cd0b <CmGetShift(unsigned int*, int*, int, bool*)>
c000cfdc:	83 c4 10             	add    esp,0x10
c000cfdf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cfe4:	74 26                	je     c000d00c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000cfe6:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000cfed:	4b                   	dec    ebx
c000cfee:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000cff1:	47                   	inc    edi
c000cff2:	eb 1c                	jmp    c000d010 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000cff4:	6a 06                	push   0x6
c000cff6:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000cffb:	50                   	push   eax
c000cffc:	55                   	push   ebp
c000cffd:	56                   	push   esi
c000cffe:	e8 d8 fc ff ff       	call   c000ccdb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	84 c0                	test   al,al
c000d008:	75 06                	jne    c000d010 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d00a:	eb c2                	jmp    c000cfce <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d00c:	31 c0                	xor    eax,eax
c000d00e:	eb 03                	jmp    c000d013 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d010:	43                   	inc    ebx
c000d011:	eb b2                	jmp    c000cfc5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d013:	83 c4 6c             	add    esp,0x6c
c000d016:	5b                   	pop    ebx
c000d017:	5e                   	pop    esi
c000d018:	5f                   	pop    edi
c000d019:	5d                   	pop    ebp
c000d01a:	c3                   	ret    

c000d01b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d01b:	53                   	push   ebx
c000d01c:	83 ec 3c             	sub    esp,0x3c
c000d01f:	6a 2b                	push   0x2b
c000d021:	6a 00                	push   0x0
c000d023:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d027:	53                   	push   ebx
c000d028:	e8 c3 34 ff ff       	call   c00004f0 <memset>
c000d02d:	58                   	pop    eax
c000d02e:	5a                   	pop    edx
c000d02f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d033:	50                   	push   eax
c000d034:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d038:	e8 41 fe ff ff       	call   c000ce7e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d03d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d042:	83 c4 0c             	add    esp,0xc
c000d045:	6a 15                	push   0x15
c000d047:	6a 00                	push   0x0
c000d049:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d04d:	50                   	push   eax
c000d04e:	e8 9d 34 ff ff       	call   c00004f0 <memset>
c000d053:	53                   	push   ebx
c000d054:	6a 00                	push   0x0
c000d056:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d05a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d05e:	e8 eb f9 ff ff       	call   c000ca4e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d063:	83 c4 58             	add    esp,0x58
c000d066:	5b                   	pop    ebx
c000d067:	c3                   	ret    

c000d068 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d068:	56                   	push   esi
c000d069:	53                   	push   ebx
c000d06a:	83 ec 48             	sub    esp,0x48
c000d06d:	6a 12                	push   0x12
c000d06f:	68 ff 00 00 00       	push   0xff
c000d074:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d078:	56                   	push   esi
c000d079:	e8 72 34 ff ff       	call   c00004f0 <memset>
c000d07e:	5a                   	pop    edx
c000d07f:	59                   	pop    ecx
c000d080:	56                   	push   esi
c000d081:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d085:	e8 f4 fd ff ff       	call   c000ce7e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d08a:	83 c4 10             	add    esp,0x10
c000d08d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d091:	85 db                	test   ebx,ebx
c000d093:	74 42                	je     c000d0d7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d095:	50                   	push   eax
c000d096:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d09a:	50                   	push   eax
c000d09b:	53                   	push   ebx
c000d09c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0a0:	e8 ff f6 ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0a5:	83 c4 0c             	add    esp,0xc
c000d0a8:	6a 12                	push   0x12
c000d0aa:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d0ae:	50                   	push   eax
c000d0af:	56                   	push   esi
c000d0b0:	e8 cb 32 ff ff       	call   c0000380 <memcmp>
c000d0b5:	83 c4 10             	add    esp,0x10
c000d0b8:	85 c0                	test   eax,eax
c000d0ba:	74 1e                	je     c000d0da <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d0bc:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d0c1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d0c6:	c1 e3 08             	shl    ebx,0x8
c000d0c9:	09 d8                	or     eax,ebx
c000d0cb:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d0d0:	c1 e3 10             	shl    ebx,0x10
c000d0d3:	09 c3                	or     ebx,eax
c000d0d5:	eb ba                	jmp    c000d091 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d0d7:	83 cb ff             	or     ebx,0xffffffff
c000d0da:	83 c4 44             	add    esp,0x44
c000d0dd:	89 d8                	mov    eax,ebx
c000d0df:	5b                   	pop    ebx
c000d0e0:	5e                   	pop    esi
c000d0e1:	c3                   	ret    

c000d0e2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d0e2:	57                   	push   edi
c000d0e3:	56                   	push   esi
c000d0e4:	53                   	push   ebx
c000d0e5:	83 ec 34             	sub    esp,0x34
c000d0e8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d0ec:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d0f0:	6a 2b                	push   0x2b
c000d0f2:	6a 00                	push   0x0
c000d0f4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d0f8:	53                   	push   ebx
c000d0f9:	e8 f2 33 ff ff       	call   c00004f0 <memset>
c000d0fe:	58                   	pop    eax
c000d0ff:	5a                   	pop    edx
c000d100:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d104:	50                   	push   eax
c000d105:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d109:	e8 70 fd ff ff       	call   c000ce7e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d10e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d112:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d116:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d11a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d11e:	53                   	push   ebx
c000d11f:	6a 00                	push   0x0
c000d121:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d125:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d129:	e8 20 f9 ff ff       	call   c000ca4e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d12e:	83 c4 50             	add    esp,0x50
c000d131:	5b                   	pop    ebx
c000d132:	5e                   	pop    esi
c000d133:	5f                   	pop    edi
c000d134:	c3                   	ret    

c000d135 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d135:	55                   	push   ebp
c000d136:	57                   	push   edi
c000d137:	56                   	push   esi
c000d138:	53                   	push   ebx
c000d139:	83 ec 40             	sub    esp,0x40
c000d13c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d140:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d144:	6a 2b                	push   0x2b
c000d146:	6a 00                	push   0x0
c000d148:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d14c:	56                   	push   esi
c000d14d:	e8 9e 33 ff ff       	call   c00004f0 <memset>
c000d152:	5f                   	pop    edi
c000d153:	89 ef                	mov    edi,ebp
c000d155:	58                   	pop    eax
c000d156:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d15a:	50                   	push   eax
c000d15b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d15f:	e8 1a fd ff ff       	call   c000ce7e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d164:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d169:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d16e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d173:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d178:	83 c4 10             	add    esp,0x10
c000d17b:	85 ed                	test   ebp,ebp
c000d17d:	74 14                	je     c000d193 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d17f:	51                   	push   ecx
c000d180:	51                   	push   ecx
c000d181:	57                   	push   edi
c000d182:	53                   	push   ebx
c000d183:	e8 0e f7 ff ff       	call   c000c896 <CmGetNext(Reghive_Tag*, int)>
c000d188:	83 c4 10             	add    esp,0x10
c000d18b:	85 c0                	test   eax,eax
c000d18d:	74 04                	je     c000d193 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d18f:	89 c7                	mov    edi,eax
c000d191:	eb e8                	jmp    c000d17b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d193:	56                   	push   esi
c000d194:	6a 00                	push   0x0
c000d196:	57                   	push   edi
c000d197:	53                   	push   ebx
c000d198:	e8 b1 f8 ff ff       	call   c000ca4e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d19d:	83 c4 0c             	add    esp,0xc
c000d1a0:	56                   	push   esi
c000d1a1:	50                   	push   eax
c000d1a2:	89 c7                	mov    edi,eax
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 fa f5 ff ff       	call   c000c7a4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1aa:	58                   	pop    eax
c000d1ab:	5a                   	pop    edx
c000d1ac:	6a 6c                	push   0x6c
c000d1ae:	6a 00                	push   0x0
c000d1b0:	6a 00                	push   0x0
c000d1b2:	68 cd 22 02 c0       	push   0xc00222cd
c000d1b7:	57                   	push   edi
c000d1b8:	53                   	push   ebx
c000d1b9:	e8 24 ff ff ff       	call   c000d0e2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d1be:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d1c2:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d1c6:	c1 e8 10             	shr    eax,0x10
c000d1c9:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d1cd:	83 c4 1c             	add    esp,0x1c
c000d1d0:	56                   	push   esi
c000d1d1:	57                   	push   edi
c000d1d2:	53                   	push   ebx
c000d1d3:	e8 f0 f6 ff ff       	call   c000c8c8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d1d8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d1dd:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d1e2:	c1 e0 08             	shl    eax,0x8
c000d1e5:	09 c2                	or     edx,eax
c000d1e7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d1ec:	83 c4 4c             	add    esp,0x4c
c000d1ef:	5b                   	pop    ebx
c000d1f0:	5e                   	pop    esi
c000d1f1:	c1 e0 10             	shl    eax,0x10
c000d1f4:	09 d0                	or     eax,edx
c000d1f6:	5f                   	pop    edi
c000d1f7:	5d                   	pop    ebp
c000d1f8:	c3                   	ret    

c000d1f9 <zStrtok(char*, char const*)>:
c000d1f9:	55                   	push   ebp
c000d1fa:	57                   	push   edi
c000d1fb:	56                   	push   esi
c000d1fc:	53                   	push   ebx
c000d1fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d201:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d205:	85 db                	test   ebx,ebx
c000d207:	74 2f                	je     c000d238 <zStrtok(char*, char const*)+0x3f>
c000d209:	85 c0                	test   eax,eax
c000d20b:	75 09                	jne    c000d216 <zStrtok(char*, char const*)+0x1d>
c000d20d:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d212:	85 c0                	test   eax,eax
c000d214:	74 50                	je     c000d266 <zStrtok(char*, char const*)+0x6d>
c000d216:	31 c9                	xor    ecx,ecx
c000d218:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d21c:	74 03                	je     c000d221 <zStrtok(char*, char const*)+0x28>
c000d21e:	41                   	inc    ecx
c000d21f:	eb f7                	jmp    c000d218 <zStrtok(char*, char const*)+0x1f>
c000d221:	31 d2                	xor    edx,edx
c000d223:	39 ca                	cmp    edx,ecx
c000d225:	74 15                	je     c000d23c <zStrtok(char*, char const*)+0x43>
c000d227:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d22b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d22e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d231:	39 ee                	cmp    esi,ebp
c000d233:	74 13                	je     c000d248 <zStrtok(char*, char const*)+0x4f>
c000d235:	42                   	inc    edx
c000d236:	eb eb                	jmp    c000d223 <zStrtok(char*, char const*)+0x2a>
c000d238:	31 c0                	xor    eax,eax
c000d23a:	eb 2a                	jmp    c000d266 <zStrtok(char*, char const*)+0x6d>
c000d23c:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d246:	eb 1e                	jmp    c000d266 <zStrtok(char*, char const*)+0x6d>
c000d248:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d24b:	39 ce                	cmp    esi,ecx
c000d24d:	75 0a                	jne    c000d259 <zStrtok(char*, char const*)+0x60>
c000d24f:	40                   	inc    eax
c000d250:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d255:	89 d8                	mov    eax,ebx
c000d257:	eb 0d                	jmp    c000d266 <zStrtok(char*, char const*)+0x6d>
c000d259:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d25c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d260:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d266:	5b                   	pop    ebx
c000d267:	5e                   	pop    esi
c000d268:	5f                   	pop    edi
c000d269:	5d                   	pop    ebp
c000d26a:	c3                   	ret    

c000d26b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d26b:	57                   	push   edi
c000d26c:	56                   	push   esi
c000d26d:	53                   	push   ebx
c000d26e:	81 ec 08 01 00 00    	sub    esp,0x108
c000d274:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d27b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d282:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d286:	53                   	push   ebx
c000d287:	e8 c4 33 ff ff       	call   c0000650 <strcpy>
c000d28c:	59                   	pop    ecx
c000d28d:	5e                   	pop    esi
c000d28e:	68 52 34 02 c0       	push   0xc0023452
c000d293:	53                   	push   ebx
c000d294:	bb 01 00 00 00       	mov    ebx,0x1
c000d299:	e8 5b ff ff ff       	call   c000d1f9 <zStrtok(char*, char const*)>
c000d29e:	83 c4 10             	add    esp,0x10
c000d2a1:	85 c0                	test   eax,eax
c000d2a3:	74 3b                	je     c000d2e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2a5:	52                   	push   edx
c000d2a6:	50                   	push   eax
c000d2a7:	6a 01                	push   0x1
c000d2a9:	57                   	push   edi
c000d2aa:	e8 b9 fd ff ff       	call   c000d068 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d2af:	59                   	pop    ecx
c000d2b0:	5e                   	pop    esi
c000d2b1:	89 c3                	mov    ebx,eax
c000d2b3:	68 52 34 02 c0       	push   0xc0023452
c000d2b8:	6a 00                	push   0x0
c000d2ba:	e8 3a ff ff ff       	call   c000d1f9 <zStrtok(char*, char const*)>
c000d2bf:	83 c4 10             	add    esp,0x10
c000d2c2:	85 c0                	test   eax,eax
c000d2c4:	89 c6                	mov    esi,eax
c000d2c6:	74 18                	je     c000d2e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2c8:	52                   	push   edx
c000d2c9:	52                   	push   edx
c000d2ca:	53                   	push   ebx
c000d2cb:	57                   	push   edi
c000d2cc:	e8 86 f5 ff ff       	call   c000c857 <CmEnterDirectory(Reghive_Tag*, int)>
c000d2d1:	83 c4 10             	add    esp,0x10
c000d2d4:	83 f8 ff             	cmp    eax,0xffffffff
c000d2d7:	89 c3                	mov    ebx,eax
c000d2d9:	74 05                	je     c000d2e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2db:	50                   	push   eax
c000d2dc:	56                   	push   esi
c000d2dd:	53                   	push   ebx
c000d2de:	eb c9                	jmp    c000d2a9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d2e0:	81 c4 00 01 00 00    	add    esp,0x100
c000d2e6:	89 d8                	mov    eax,ebx
c000d2e8:	5b                   	pop    ebx
c000d2e9:	5e                   	pop    esi
c000d2ea:	5f                   	pop    edi
c000d2eb:	c3                   	ret    

c000d2ec <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d2ec:	55                   	push   ebp
c000d2ed:	57                   	push   edi
c000d2ee:	56                   	push   esi
c000d2ef:	53                   	push   ebx
c000d2f0:	83 ec 5c             	sub    esp,0x5c
c000d2f3:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d2f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d2fb:	85 db                	test   ebx,ebx
c000d2fd:	0f 8e 84 00 00 00    	jle    c000d387 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d303:	57                   	push   edi
c000d304:	31 ed                	xor    ebp,ebp
c000d306:	6a 32                	push   0x32
c000d308:	6a 00                	push   0x0
c000d30a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d30e:	57                   	push   edi
c000d30f:	e8 dc 31 ff ff       	call   c00004f0 <memset>
c000d314:	83 c4 0c             	add    esp,0xc
c000d317:	57                   	push   edi
c000d318:	53                   	push   ebx
c000d319:	56                   	push   esi
c000d31a:	e8 31 fb ff ff       	call   c000ce50 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d31f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d32a:	7d 13                	jge    c000d33f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	45                   	inc    ebp
c000d330:	68 60 39 02 c0       	push   0xc0023960
c000d335:	e8 14 9c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d33a:	83 c4 10             	add    esp,0x10
c000d33d:	eb e7                	jmp    c000d326 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d33f:	51                   	push   ecx
c000d340:	57                   	push   edi
c000d341:	53                   	push   ebx
c000d342:	68 d3 22 02 c0       	push   0xc00222d3
c000d347:	e8 02 9c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d34c:	83 c4 10             	add    esp,0x10
c000d34f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d354:	75 1e                	jne    c000d374 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d356:	52                   	push   edx
c000d357:	52                   	push   edx
c000d358:	53                   	push   ebx
c000d359:	56                   	push   esi
c000d35a:	e8 f8 f4 ff ff       	call   c000c857 <CmEnterDirectory(Reghive_Tag*, int)>
c000d35f:	83 c4 0c             	add    esp,0xc
c000d362:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d366:	8d 51 04             	lea    edx,[ecx+0x4]
c000d369:	52                   	push   edx
c000d36a:	50                   	push   eax
c000d36b:	56                   	push   esi
c000d36c:	e8 7b ff ff ff       	call   c000d2ec <CmDisplayTree(Reghive_Tag*, int, int)>
c000d371:	83 c4 10             	add    esp,0x10
c000d374:	50                   	push   eax
c000d375:	50                   	push   eax
c000d376:	53                   	push   ebx
c000d377:	56                   	push   esi
c000d378:	e8 19 f5 ff ff       	call   c000c896 <CmGetNext(Reghive_Tag*, int)>
c000d37d:	83 c4 10             	add    esp,0x10
c000d380:	89 c3                	mov    ebx,eax
c000d382:	e9 74 ff ff ff       	jmp    c000d2fb <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d387:	83 c4 5c             	add    esp,0x5c
c000d38a:	5b                   	pop    ebx
c000d38b:	5e                   	pop    esi
c000d38c:	5f                   	pop    edi
c000d38d:	5d                   	pop    ebp
c000d38e:	c3                   	ret    

c000d38f <CmSplitFinalSlashInPlace(char*)>:
c000d38f:	53                   	push   ebx
c000d390:	83 ec 14             	sub    esp,0x14
c000d393:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d397:	53                   	push   ebx
c000d398:	e8 e3 31 ff ff       	call   c0000580 <strlen>
c000d39d:	83 c4 10             	add    esp,0x10
c000d3a0:	48                   	dec    eax
c000d3a1:	85 c0                	test   eax,eax
c000d3a3:	74 15                	je     c000d3ba <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d3a5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d3a9:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d3ac:	75 09                	jne    c000d3b7 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d3ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d3b1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d3b5:	eb 05                	jmp    c000d3bc <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d3b7:	48                   	dec    eax
c000d3b8:	eb e7                	jmp    c000d3a1 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d3ba:	31 c0                	xor    eax,eax
c000d3bc:	83 c4 08             	add    esp,0x8
c000d3bf:	5b                   	pop    ebx
c000d3c0:	c3                   	ret    
c000d3c1:	66 90                	xchg   ax,ax
c000d3c3:	90                   	nop

c000d3c4 <Krnl::handlePowerButton()>:
c000d3c4:	83 ec 0c             	sub    esp,0xc
c000d3c7:	e8 5f 21 00 00       	call   c000f52b <KeHandlePowerButton()>
c000d3cc:	90                   	nop
c000d3cd:	83 c4 0c             	add    esp,0xc
c000d3d0:	c3                   	ret    
c000d3d1:	8d 76 00             	lea    esi,[esi+0x0]

c000d3d4 <Krnl::handleSleepButton()>:
c000d3d4:	83 ec 0c             	sub    esp,0xc
c000d3d7:	e8 67 21 00 00       	call   c000f543 <KeHandleSleepButton()>
c000d3dc:	90                   	nop
c000d3dd:	83 c4 0c             	add    esp,0xc
c000d3e0:	c3                   	ret    
c000d3e1:	90                   	nop

c000d3e2 <Computer::close(int, int, void*)>:
c000d3e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d3e7:	c3                   	ret    

c000d3e8 <Computer::open(int, int, void*)>:
c000d3e8:	56                   	push   esi
c000d3e9:	53                   	push   ebx
c000d3ea:	83 ec 04             	sub    esp,0x4
c000d3ed:	f6 05 90 cd 02 c0 04 	test   BYTE PTR ds:0xc002cd90,0x4
c000d3f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d3f8:	0f 94 05 e0 4c 02 c0 	sete   BYTE PTR ds:0xc0024ce0
c000d3ff:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d405:	74 10                	je     c000d417 <Computer::open(int, int, void*)+0x2f>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	68 e0 22 02 c0       	push   0xc00222e0
c000d40f:	e8 e2 17 00 00       	call   c000ebf6 <KePanic(char const*)>
c000d414:	83 c4 10             	add    esp,0x10
c000d417:	83 ec 0c             	sub    esp,0xc
c000d41a:	68 98 23 02 c0       	push   0xc0022398
c000d41f:	e8 37 f1 ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d424:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d42b:	e8 80 14 00 00       	call   c000e8b0 <malloc>
c000d430:	89 04 24             	mov    DWORD PTR [esp],eax
c000d433:	89 c6                	mov    esi,eax
c000d435:	e8 26 e8 ff ff       	call   c000bc60 <ACPI::ACPI()>
c000d43a:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d440:	58                   	pop    eax
c000d441:	5a                   	pop    edx
c000d442:	56                   	push   esi
c000d443:	53                   	push   ebx
c000d444:	e8 1d bc ff ff       	call   c0009066 <Device::addChild(Device*)>
c000d449:	c7 04 24 b0 23 02 c0 	mov    DWORD PTR [esp],0xc00223b0
c000d450:	e8 06 f1 ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d455:	e8 77 a9 00 00       	call   c0017dd1 <HalEnableNMI()>
c000d45a:	e8 a7 9b 00 00       	call   c0017006 <HalDetectFeatures()>
c000d45f:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d466:	e8 45 14 00 00       	call   c000e8b0 <malloc>
c000d46b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d46e:	89 c6                	mov    esi,eax
c000d470:	e8 97 b4 00 00       	call   c001890c <CPU::CPU()>
c000d475:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d47b:	59                   	pop    ecx
c000d47c:	58                   	pop    eax
c000d47d:	56                   	push   esi
c000d47e:	53                   	push   ebx
c000d47f:	e8 e2 bb ff ff       	call   c0009066 <Device::addChild(Device*)>
c000d484:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d488:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d48e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d490:	51                   	push   ecx
c000d491:	6a 00                	push   0x0
c000d493:	6a 00                	push   0x0
c000d495:	50                   	push   eax
c000d496:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d499:	83 c4 14             	add    esp,0x14
c000d49c:	68 0c 23 02 c0       	push   0xc002230c
c000d4a1:	e8 b5 f0 ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d4a6:	e8 bc b0 00 00       	call   c0018567 <HalInitialiseCoprocessor()>
c000d4ab:	c7 04 24 ca 23 02 c0 	mov    DWORD PTR [esp],0xc00223ca
c000d4b2:	e8 a4 f0 ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d4b7:	c7 04 24 ce d4 00 c0 	mov    DWORD PTR [esp],0xc000d4ce
c000d4be:	e8 61 80 00 00       	call   c0015524 <setupMultitasking(void (*)())>
c000d4c3:	83 c4 14             	add    esp,0x14
c000d4c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d4cb:	5b                   	pop    ebx
c000d4cc:	5e                   	pop    esi
c000d4cd:	c3                   	ret    

c000d4ce <KeFirstTask()>:
c000d4ce:	53                   	push   ebx
c000d4cf:	83 ec 14             	sub    esp,0x14
c000d4d2:	fb                   	sti    
c000d4d3:	68 e5 23 02 c0       	push   0xc00223e5
c000d4d8:	e8 7e f0 ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d4dd:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d4e4:	e8 c7 13 00 00       	call   c000e8b0 <malloc>
c000d4e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d4f0:	89 c3                	mov    ebx,eax
c000d4f2:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000d4f7:	50                   	push   eax
c000d4f8:	68 fe 23 02 c0       	push   0xc00223fe
c000d4fd:	6a 01                	push   0x1
c000d4ff:	53                   	push   ebx
c000d500:	e8 cf 7c 00 00       	call   c00151d4 <Process::Process(bool, char const*, Process*, char**)>
c000d505:	83 c4 20             	add    esp,0x20
c000d508:	68 ff 00 00 00       	push   0xff
c000d50d:	6a 00                	push   0x0
c000d50f:	68 dd e1 00 c0       	push   0xc000e1dd
c000d514:	53                   	push   ebx
c000d515:	e8 e2 7e 00 00       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c000d51a:	8b 15 d8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d8
c000d520:	6a 7a                	push   0x7a
c000d522:	6a 00                	push   0x0
c000d524:	68 e0 5c 01 c0       	push   0xc0015ce0
c000d529:	52                   	push   edx
c000d52a:	e8 cd 7e 00 00       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c000d52f:	83 c4 14             	add    esp,0x14
c000d532:	68 30 23 02 c0       	push   0xc0022330
c000d537:	a3 90 d6 02 c0       	mov    ds:0xc002d690,eax
c000d53c:	e8 1a f0 ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d541:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d548:	e8 00 21 00 00       	call   c000f64d <KeInitRand()>
c000d54d:	e8 68 8b 00 00       	call   c00160ba <Vm::initialise8086()>
c000d552:	e8 7f a8 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d557:	c7 04 24 b4 20 02 c0 	mov    DWORD PTR [esp],0xc00220b4
c000d55e:	e8 f8 ef ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d563:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d568:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d56e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d570:	6a 00                	push   0x0
c000d572:	6a 00                	push   0x0
c000d574:	6a 00                	push   0x0
c000d576:	50                   	push   eax
c000d577:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d57a:	83 c4 14             	add    esp,0x14
c000d57d:	68 30 23 02 c0       	push   0xc0022330
c000d582:	e8 d4 ef ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d587:	e8 2f a0 ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d58c:	e8 f5 05 00 00       	call   c000db86 <KeLoadSystemEnv()>
c000d591:	e8 c5 1f 00 00       	call   c000f55b <KeSetupPowerManager()>
c000d596:	c7 04 24 54 23 02 c0 	mov    DWORD PTR [esp],0xc0022354
c000d59d:	e8 b9 ef ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d5a2:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d5a7:	59                   	pop    ecx
c000d5a8:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d5ae:	53                   	push   ebx
c000d5af:	e8 ce bb ff ff       	call   c0009182 <Device::loadDriversForAll()>
c000d5b4:	c7 04 24 0b 24 02 c0 	mov    DWORD PTR [esp],0xc002240b
c000d5bb:	e8 9b ef ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c000d5c0:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d5c6:	58                   	pop    eax
c000d5c7:	5a                   	pop    edx
c000d5c8:	6a 01                	push   0x1
c000d5ca:	68 1c 24 02 c0       	push   0xc002241c
c000d5cf:	e8 86 75 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c000d5d4:	59                   	pop    ecx
c000d5d5:	5a                   	pop    edx
c000d5d6:	53                   	push   ebx
c000d5d7:	50                   	push   eax
c000d5d8:	e8 de 77 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c000d5dd:	83 c4 10             	add    esp,0x10
c000d5e0:	83 ec 0c             	sub    esp,0xc
c000d5e3:	6a 02                	push   0x2
c000d5e5:	e8 1e 81 00 00       	call   c0015708 <blockTask(TaskState)>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	eb f1                	jmp    c000d5e0 <KeFirstTask()+0x112>
c000d5ef:	90                   	nop

c000d5f0 <Computer::Computer()>:
c000d5f0:	83 ec 0c             	sub    esp,0xc
c000d5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f7:	83 ec 08             	sub    esp,0x8
c000d5fa:	68 38 24 02 c0       	push   0xc0022438
c000d5ff:	50                   	push   eax
c000d600:	e8 c3 bb ff ff       	call   c00091c8 <Device::Device(char const*)>
c000d605:	83 c4 10             	add    esp,0x10
c000d608:	ba 4c 24 02 c0       	mov    edx,0xc002244c
c000d60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d611:	89 10                	mov    DWORD PTR [eax],edx
c000d613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d617:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d625:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d62f:	90                   	nop
c000d630:	83 c4 0c             	add    esp,0xc
c000d633:	c3                   	ret    

c000d634 <KePrepareShutdown()>:
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	e8 8d ee ff ff       	call   c000c4c9 <KeExecuteAtexit()>
c000d63c:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d641:	83 ec 0c             	sub    esp,0xc
c000d644:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d64a:	50                   	push   eax
c000d64b:	e8 7e bc ff ff       	call   c00092ce <Device::closeAll()>
c000d650:	83 c4 1c             	add    esp,0x1c
c000d653:	c3                   	ret    

c000d654 <KeShutdown()>:
c000d654:	83 ec 0c             	sub    esp,0xc
c000d657:	e8 d8 ff ff ff       	call   c000d634 <KePrepareShutdown()>
c000d65c:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d661:	85 c0                	test   eax,eax
c000d663:	74 02                	je     c000d667 <KeShutdown()+0x13>
c000d665:	ff d0                	call   eax
c000d667:	83 ec 0c             	sub    esp,0xc
c000d66a:	68 74 23 02 c0       	push   0xc0022374
c000d66f:	e8 82 15 00 00       	call   c000ebf6 <KePanic(char const*)>
c000d674:	83 c4 1c             	add    esp,0x1c
c000d677:	c3                   	ret    

c000d678 <KeSleep()>:
c000d678:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d67d:	85 c0                	test   eax,eax
c000d67f:	74 02                	je     c000d683 <KeSleep()+0xb>
c000d681:	ff e0                	jmp    eax
c000d683:	c3                   	ret    

c000d684 <KeRestart()>:
c000d684:	83 ec 0c             	sub    esp,0xc
c000d687:	e8 a8 ff ff ff       	call   c000d634 <KePrepareShutdown()>
c000d68c:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000d691:	85 c0                	test   eax,eax
c000d693:	74 02                	je     c000d697 <KeRestart()+0x13>
c000d695:	ff d0                	call   eax
c000d697:	e4 64                	in     al,0x64
c000d699:	a8 02                	test   al,0x2
c000d69b:	75 fa                	jne    c000d697 <KeRestart()+0x13>
c000d69d:	b0 fe                	mov    al,0xfe
c000d69f:	e6 64                	out    0x64,al
c000d6a1:	83 c4 0c             	add    esp,0xc
c000d6a4:	c3                   	ret    

c000d6a5 <KeCalculateCRC32(unsigned char*, int)>:
c000d6a5:	53                   	push   ebx
c000d6a6:	83 c8 ff             	or     eax,0xffffffff
c000d6a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6b1:	01 cb                	add    ebx,ecx
c000d6b3:	39 d9                	cmp    ecx,ebx
c000d6b5:	74 15                	je     c000d6cc <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d6b7:	41                   	inc    ecx
c000d6b8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d6bb:	31 c2                	xor    edx,eax
c000d6bd:	c1 e8 08             	shr    eax,0x8
c000d6c0:	0f b6 d2             	movzx  edx,dl
c000d6c3:	33 04 95 00 47 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdb900]
c000d6ca:	eb e7                	jmp    c000d6b3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d6cc:	5b                   	pop    ebx
c000d6cd:	f7 d0                	not    eax
c000d6cf:	c3                   	ret    

c000d6d0 <EnvVarContainer::getEnv(char const*)>:
c000d6d0:	57                   	push   edi
c000d6d1:	56                   	push   esi
c000d6d2:	53                   	push   ebx
c000d6d3:	31 db                	xor    ebx,ebx
c000d6d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6d9:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d6db:	7e 2b                	jle    c000d708 <EnvVarContainer::getEnv(char const*)+0x38>
c000d6dd:	50                   	push   eax
c000d6de:	50                   	push   eax
c000d6df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d6e2:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d6e9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d6ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d6f0:	e8 8b 30 ff ff       	call   c0000780 <strcmp>
c000d6f5:	83 c4 10             	add    esp,0x10
c000d6f8:	85 c0                	test   eax,eax
c000d6fa:	75 09                	jne    c000d705 <EnvVarContainer::getEnv(char const*)+0x35>
c000d6fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d6ff:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d703:	eb 05                	jmp    c000d70a <EnvVarContainer::getEnv(char const*)+0x3a>
c000d705:	43                   	inc    ebx
c000d706:	eb d1                	jmp    c000d6d9 <EnvVarContainer::getEnv(char const*)+0x9>
c000d708:	31 c0                	xor    eax,eax
c000d70a:	5b                   	pop    ebx
c000d70b:	5e                   	pop    esi
c000d70c:	5f                   	pop    edi
c000d70d:	c3                   	ret    

c000d70e <EnvVarContainer::setEnv(char const*, char const*)>:
c000d70e:	55                   	push   ebp
c000d70f:	57                   	push   edi
c000d710:	56                   	push   esi
c000d711:	53                   	push   ebx
c000d712:	83 ec 28             	sub    esp,0x28
c000d715:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d719:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d71d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d721:	56                   	push   esi
c000d722:	e8 59 2e ff ff       	call   c0000580 <strlen>
c000d727:	40                   	inc    eax
c000d728:	89 04 24             	mov    DWORD PTR [esp],eax
c000d72b:	e8 80 11 00 00       	call   c000e8b0 <malloc>
c000d730:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d733:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d737:	e8 44 2e ff ff       	call   c0000580 <strlen>
c000d73c:	40                   	inc    eax
c000d73d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d740:	e8 6b 11 00 00       	call   c000e8b0 <malloc>
c000d745:	89 34 24             	mov    DWORD PTR [esp],esi
c000d748:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d74c:	e8 2f 2e ff ff       	call   c0000580 <strlen>
c000d751:	83 c4 0c             	add    esp,0xc
c000d754:	40                   	inc    eax
c000d755:	50                   	push   eax
c000d756:	6a 00                	push   0x0
c000d758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75c:	e8 8f 2d ff ff       	call   c00004f0 <memset>
c000d761:	89 34 24             	mov    DWORD PTR [esp],esi
c000d764:	e8 17 2e ff ff       	call   c0000580 <strlen>
c000d769:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d76d:	8d 48 01             	lea    ecx,[eax+0x1]
c000d770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d775:	89 de                	mov    esi,ebx
c000d777:	e8 04 2e ff ff       	call   c0000580 <strlen>
c000d77c:	83 c4 0c             	add    esp,0xc
c000d77f:	40                   	inc    eax
c000d780:	50                   	push   eax
c000d781:	6a 00                	push   0x0
c000d783:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d787:	e8 64 2d ff ff       	call   c00004f0 <memset>
c000d78c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d78f:	e8 ec 2d ff ff       	call   c0000580 <strlen>
c000d794:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d798:	8d 48 01             	lea    ecx,[eax+0x1]
c000d79b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d79d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7a0:	40                   	inc    eax
c000d7a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d7a4:	c1 e0 03             	shl    eax,0x3
c000d7a7:	5a                   	pop    edx
c000d7a8:	59                   	pop    ecx
c000d7a9:	50                   	push   eax
c000d7aa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d7ad:	e8 ea 10 00 00       	call   c000e89c <realloc>
c000d7b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d7b5:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d7b9:	b9 08 00 00 00       	mov    ecx,0x8
c000d7be:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d7c1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d7c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7c7:	83 c4 2c             	add    esp,0x2c
c000d7ca:	5b                   	pop    ebx
c000d7cb:	5e                   	pop    esi
c000d7cc:	5f                   	pop    edi
c000d7cd:	5d                   	pop    ebp
c000d7ce:	c3                   	ret    
c000d7cf:	90                   	nop

c000d7d0 <EnvVarContainer::deleteEnv(char const*)>:
c000d7d0:	c3                   	ret    
c000d7d1:	90                   	nop

c000d7d2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d7d2:	55                   	push   ebp
c000d7d3:	57                   	push   edi
c000d7d4:	56                   	push   esi
c000d7d5:	53                   	push   ebx
c000d7d6:	81 ec 38 01 00 00    	sub    esp,0x138
c000d7dc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d7e3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d7ea:	68 14 01 00 00       	push   0x114
c000d7ef:	e8 bc 10 00 00       	call   c000e8b0 <malloc>
c000d7f4:	83 c4 0c             	add    esp,0xc
c000d7f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d7fa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d801:	89 c3                	mov    ebx,eax
c000d803:	50                   	push   eax
c000d804:	e8 23 a9 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000d809:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d80c:	e8 fd ab ff ff       	call   c000840e <File::exists()>
c000d811:	83 c4 10             	add    esp,0x10
c000d814:	84 c0                	test   al,al
c000d816:	75 31                	jne    c000d849 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d818:	50                   	push   eax
c000d819:	50                   	push   eax
c000d81a:	6a 12                	push   0x12
c000d81c:	53                   	push   ebx
c000d81d:	e8 28 a9 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d822:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d824:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d827:	89 34 24             	mov    DWORD PTR [esp],esi
c000d82a:	e8 51 2d ff ff       	call   c0000580 <strlen>
c000d82f:	5a                   	pop    edx
c000d830:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d834:	52                   	push   edx
c000d835:	31 d2                	xor    edx,edx
c000d837:	56                   	push   esi
c000d838:	52                   	push   edx
c000d839:	50                   	push   eax
c000d83a:	53                   	push   ebx
c000d83b:	ff d7                	call   edi
c000d83d:	83 c4 14             	add    esp,0x14
c000d840:	53                   	push   ebx
c000d841:	e8 62 a9 ff ff       	call   c00081a8 <File::close()>
c000d846:	83 c4 10             	add    esp,0x10
c000d849:	56                   	push   esi
c000d84a:	31 f6                	xor    esi,esi
c000d84c:	68 00 01 00 00       	push   0x100
c000d851:	6a 00                	push   0x0
c000d853:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d857:	50                   	push   eax
c000d858:	e8 93 2c ff ff       	call   c00004f0 <memset>
c000d85d:	5f                   	pop    edi
c000d85e:	58                   	pop    eax
c000d85f:	6a 01                	push   0x1
c000d861:	53                   	push   ebx
c000d862:	e8 e3 a8 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d872:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d87a:	83 ec 0c             	sub    esp,0xc
c000d87d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d881:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d883:	52                   	push   edx
c000d884:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000d888:	51                   	push   ecx
c000d889:	6a 00                	push   0x0
c000d88b:	6a 01                	push   0x1
c000d88d:	53                   	push   ebx
c000d88e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d891:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d896:	83 c4 20             	add    esp,0x20
c000d899:	85 c0                	test   eax,eax
c000d89b:	89 c1                	mov    ecx,eax
c000d89d:	0f 84 36 01 00 00    	je     c000d9d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d8a3:	83 f8 0d             	cmp    eax,0xd
c000d8a6:	0f 84 22 01 00 00    	je     c000d9ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d8ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d8b1:	0f 84 f0 00 00 00    	je     c000d9a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d8b7:	83 f8 0a             	cmp    eax,0xa
c000d8ba:	74 13                	je     c000d8cf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d8bc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d8c1:	74 0c                	je     c000d8cf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d8c3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d8c9:	0f 8e f6 00 00 00    	jle    c000d9c5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d8cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	8d 78 01             	lea    edi,[eax+0x1]
c000d8d9:	57                   	push   edi
c000d8da:	e8 d1 0f 00 00       	call   c000e8b0 <malloc>
c000d8df:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d8e3:	8d 56 04             	lea    edx,[esi+0x4]
c000d8e6:	89 14 24             	mov    DWORD PTR [esp],edx
c000d8e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d8ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8f1:	e8 ba 0f 00 00       	call   c000e8b0 <malloc>
c000d8f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d8fa:	83 c4 0c             	add    esp,0xc
c000d8fd:	57                   	push   edi
c000d8fe:	6a 00                	push   0x0
c000d900:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d904:	e8 e7 2b ff ff       	call   c00004f0 <memset>
c000d909:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d90d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d911:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d915:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d917:	83 c4 0c             	add    esp,0xc
c000d91a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d91e:	52                   	push   edx
c000d91f:	6a 00                	push   0x0
c000d921:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d925:	e8 c6 2b ff ff       	call   c00004f0 <memset>
c000d92a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d92e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d932:	89 34 24             	mov    DWORD PTR [esp],esi
c000d935:	e8 46 2c ff ff       	call   c0000580 <strlen>
c000d93a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d93e:	89 c1                	mov    ecx,eax
c000d940:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d942:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d945:	83 c4 10             	add    esp,0x10
c000d948:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d94b:	40                   	inc    eax
c000d94c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d94f:	85 d2                	test   edx,edx
c000d951:	75 0c                	jne    c000d95f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d953:	83 ec 0c             	sub    esp,0xc
c000d956:	6a 08                	push   0x8
c000d958:	e8 53 0f 00 00       	call   c000e8b0 <malloc>
c000d95d:	eb 0c                	jmp    c000d96b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000d95f:	51                   	push   ecx
c000d960:	51                   	push   ecx
c000d961:	c1 e0 03             	shl    eax,0x3
c000d964:	50                   	push   eax
c000d965:	52                   	push   edx
c000d966:	e8 31 0f 00 00       	call   c000e89c <realloc>
c000d96b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d96e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000d977:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d97b:	b9 08 00 00 00       	mov    ecx,0x8
c000d980:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d984:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d986:	50                   	push   eax
c000d987:	31 f6                	xor    esi,esi
c000d989:	68 00 01 00 00       	push   0x100
c000d98e:	6a 00                	push   0x0
c000d990:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d994:	50                   	push   eax
c000d995:	e8 56 2b ff ff       	call   c00004f0 <memset>
c000d99a:	83 c4 10             	add    esp,0x10
c000d99d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9a5:	eb 27                	jmp    c000d9ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9a7:	83 f8 3d             	cmp    eax,0x3d
c000d9aa:	74 1e                	je     c000d9ca <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000d9ac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9b2:	7f 07                	jg     c000d9bb <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000d9b4:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000d9b8:	46                   	inc    esi
c000d9b9:	eb 13                	jmp    c000d9ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9bb:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000d9c3:	eb 09                	jmp    c000d9ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9c5:	83 f8 3d             	cmp    eax,0x3d
c000d9c8:	75 ea                	jne    c000d9b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000d9ca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000d9ce:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d9d3:	0f 85 99 fe ff ff    	jne    c000d872 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000d9d9:	83 ec 0c             	sub    esp,0xc
c000d9dc:	53                   	push   ebx
c000d9dd:	e8 c6 a7 ff ff       	call   c00081a8 <File::close()>
c000d9e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d9e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d9e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d9ea:	81 c4 3c 01 00 00    	add    esp,0x13c
c000d9f0:	5b                   	pop    ebx
c000d9f1:	5e                   	pop    esi
c000d9f2:	5f                   	pop    edi
c000d9f3:	5d                   	pop    ebp
c000d9f4:	c3                   	ret    
c000d9f5:	90                   	nop

c000d9f6 <EnvVarContainer::__loadSystem()>:
c000d9f6:	83 ec 10             	sub    esp,0x10
c000d9f9:	68 00 4b 02 c0       	push   0xc0024b00
c000d9fe:	68 70 24 02 c0       	push   0xc0022470
c000da03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da07:	e8 c6 fd ff ff       	call   c000d7d2 <EnvVarContainer::loadFrom(char const*, char const*)>
c000da0c:	83 c4 1c             	add    esp,0x1c
c000da0f:	c3                   	ret    

c000da10 <EnvVarContainer::__loadUser()>:
c000da10:	c3                   	ret    
c000da11:	90                   	nop

c000da12 <EnvVarContainer::EnvVarContainer(Process*)>:
c000da12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000da1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da32:	90                   	nop
c000da33:	c3                   	ret    

c000da34 <EnvVarContainer::~EnvVarContainer()>:
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da3e:	85 c0                	test   eax,eax
c000da40:	74 1d                	je     c000da5f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da46:	8b 00                	mov    eax,DWORD PTR [eax]
c000da48:	85 c0                	test   eax,eax
c000da4a:	74 13                	je     c000da5f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da53:	83 ec 0c             	sub    esp,0xc
c000da56:	50                   	push   eax
c000da57:	e8 64 0e 00 00       	call   c000e8c0 <free>
c000da5c:	83 c4 10             	add    esp,0x10
c000da5f:	90                   	nop
c000da60:	83 c4 0c             	add    esp,0xc
c000da63:	c3                   	ret    

c000da64 <KeGetEnv(Process*, char const*)>:
c000da64:	53                   	push   ebx
c000da65:	83 ec 08             	sub    esp,0x8
c000da68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da6c:	39 05 d8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d8,eax
c000da72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000da76:	74 04                	je     c000da7c <KeGetEnv(Process*, char const*)+0x18>
c000da78:	85 c0                	test   eax,eax
c000da7a:	75 0b                	jne    c000da87 <KeGetEnv(Process*, char const*)+0x23>
c000da7c:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000da81:	85 c0                	test   eax,eax
c000da83:	75 19                	jne    c000da9e <KeGetEnv(Process*, char const*)+0x3a>
c000da85:	eb 27                	jmp    c000daae <KeGetEnv(Process*, char const*)+0x4a>
c000da87:	52                   	push   edx
c000da88:	52                   	push   edx
c000da89:	53                   	push   ebx
c000da8a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000da90:	e8 3b fc ff ff       	call   c000d6d0 <EnvVarContainer::getEnv(char const*)>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	85 c0                	test   eax,eax
c000da9a:	75 28                	jne    c000dac4 <KeGetEnv(Process*, char const*)+0x60>
c000da9c:	eb de                	jmp    c000da7c <KeGetEnv(Process*, char const*)+0x18>
c000da9e:	52                   	push   edx
c000da9f:	52                   	push   edx
c000daa0:	53                   	push   ebx
c000daa1:	50                   	push   eax
c000daa2:	e8 29 fc ff ff       	call   c000d6d0 <EnvVarContainer::getEnv(char const*)>
c000daa7:	83 c4 10             	add    esp,0x10
c000daaa:	85 c0                	test   eax,eax
c000daac:	75 16                	jne    c000dac4 <KeGetEnv(Process*, char const*)+0x60>
c000daae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dab2:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dab7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dabb:	83 c4 08             	add    esp,0x8
c000dabe:	5b                   	pop    ebx
c000dabf:	e9 0c fc ff ff       	jmp    c000d6d0 <EnvVarContainer::getEnv(char const*)>
c000dac4:	83 c4 08             	add    esp,0x8
c000dac7:	5b                   	pop    ebx
c000dac8:	c3                   	ret    

c000dac9 <KeSetEnvSystem(char const*, char const*)>:
c000dac9:	83 ec 10             	sub    esp,0x10
c000dacc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dad0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dad4:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000dada:	e8 2f fc ff ff       	call   c000d70e <EnvVarContainer::setEnv(char const*, char const*)>
c000dadf:	83 c4 1c             	add    esp,0x1c
c000dae2:	c3                   	ret    

c000dae3 <KeSetEnvUser(char const*, char const*)>:
c000dae3:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dae8:	85 c0                	test   eax,eax
c000daea:	74 15                	je     c000db01 <KeSetEnvUser(char const*, char const*)+0x1e>
c000daec:	83 ec 10             	sub    esp,0x10
c000daef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000daf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000daf7:	50                   	push   eax
c000daf8:	e8 11 fc ff ff       	call   c000d70e <EnvVarContainer::setEnv(char const*, char const*)>
c000dafd:	83 c4 1c             	add    esp,0x1c
c000db00:	c3                   	ret    
c000db01:	c3                   	ret    

c000db02 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000db02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db06:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000db0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db10:	e9 f9 fb ff ff       	jmp    c000d70e <EnvVarContainer::setEnv(char const*, char const*)>

c000db15 <KeDeleteEnvSystem(char const*)>:
c000db15:	c3                   	ret    

c000db16 <KeDeleteEnvUser(char const*)>:
c000db16:	c3                   	ret    

c000db17 <KeDeleteEnvProcess(Process*, char const*)>:
c000db17:	c3                   	ret    

c000db18 <KeNewProcessEnv(Process*)>:
c000db18:	83 ec 28             	sub    esp,0x28
c000db1b:	6a 0c                	push   0xc
c000db1d:	e8 8e 0d 00 00       	call   c000e8b0 <malloc>
c000db22:	5a                   	pop    edx
c000db23:	59                   	pop    ecx
c000db24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db28:	50                   	push   eax
c000db29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db2d:	e8 e0 fe ff ff       	call   c000da12 <EnvVarContainer::EnvVarContainer(Process*)>
c000db32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db36:	83 c4 2c             	add    esp,0x2c
c000db39:	c3                   	ret    

c000db3a <KeCopyProcessEnv(Process*, Process*)>:
c000db3a:	57                   	push   edi
c000db3b:	56                   	push   esi
c000db3c:	53                   	push   ebx
c000db3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db41:	83 ec 0c             	sub    esp,0xc
c000db44:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000db4a:	6a 0c                	push   0xc
c000db4c:	e8 5f 0d 00 00       	call   c000e8b0 <malloc>
c000db51:	89 c3                	mov    ebx,eax
c000db53:	58                   	pop    eax
c000db54:	5a                   	pop    edx
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	53                   	push   ebx
c000db5a:	e8 b3 fe ff ff       	call   c000da12 <EnvVarContainer::EnvVarContainer(Process*)>
c000db5f:	8b 07                	mov    eax,DWORD PTR [edi]
c000db61:	89 03                	mov    DWORD PTR [ebx],eax
c000db63:	c1 e0 03             	shl    eax,0x3
c000db66:	89 04 24             	mov    DWORD PTR [esp],eax
c000db69:	e8 42 0d 00 00       	call   c000e8b0 <malloc>
c000db6e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000db71:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000db73:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000db76:	89 c7                	mov    edi,eax
c000db78:	c1 e1 03             	shl    ecx,0x3
c000db7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	89 d8                	mov    eax,ebx
c000db82:	5b                   	pop    ebx
c000db83:	5e                   	pop    esi
c000db84:	5f                   	pop    edi
c000db85:	c3                   	ret    

c000db86 <KeLoadSystemEnv()>:
c000db86:	53                   	push   ebx
c000db87:	83 ec 14             	sub    esp,0x14
c000db8a:	6a 0c                	push   0xc
c000db8c:	e8 1f 0d 00 00       	call   c000e8b0 <malloc>
c000db91:	89 c3                	mov    ebx,eax
c000db93:	58                   	pop    eax
c000db94:	5a                   	pop    edx
c000db95:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000db9b:	53                   	push   ebx
c000db9c:	e8 71 fe ff ff       	call   c000da12 <EnvVarContainer::EnvVarContainer(Process*)>
c000dba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dba4:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000dbaa:	e8 47 fe ff ff       	call   c000d9f6 <EnvVarContainer::__loadSystem()>
c000dbaf:	83 c4 18             	add    esp,0x18
c000dbb2:	5b                   	pop    ebx
c000dbb3:	c3                   	ret    

c000dbb4 <KeLoadUserEnv()>:
c000dbb4:	53                   	push   ebx
c000dbb5:	83 ec 14             	sub    esp,0x14
c000dbb8:	6a 0c                	push   0xc
c000dbba:	e8 f1 0c 00 00       	call   c000e8b0 <malloc>
c000dbbf:	89 c3                	mov    ebx,eax
c000dbc1:	58                   	pop    eax
c000dbc2:	5a                   	pop    edx
c000dbc3:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dbc9:	53                   	push   ebx
c000dbca:	e8 43 fe ff ff       	call   c000da12 <EnvVarContainer::EnvVarContainer(Process*)>
c000dbcf:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000dbd5:	83 c4 18             	add    esp,0x18
c000dbd8:	5b                   	pop    ebx
c000dbd9:	c3                   	ret    

c000dbda <KeFlushEnv()>:
c000dbda:	c3                   	ret    

c000dbdb <KeGetProcessTotalEnvCount(Process*)>:
c000dbdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbdf:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000dbe5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dbeb:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dbf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbf2:	03 01                	add    eax,DWORD PTR [ecx]
c000dbf4:	85 d2                	test   edx,edx
c000dbf6:	74 02                	je     c000dbfa <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dbf8:	03 02                	add    eax,DWORD PTR [edx]
c000dbfa:	c3                   	ret    

c000dbfb <KeGetProcessEnvPair(Process*, int)>:
c000dbfb:	57                   	push   edi
c000dbfc:	56                   	push   esi
c000dbfd:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000dc03:	53                   	push   ebx
c000dc04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc0c:	85 f6                	test   esi,esi
c000dc0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc12:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc18:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc1a:	75 16                	jne    c000dc32 <KeGetProcessEnvPair(Process*, int)+0x37>
c000dc1c:	39 c2                	cmp    edx,eax
c000dc1e:	7c 16                	jl     c000dc36 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc20:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000dc26:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dc28:	01 c6                	add    esi,eax
c000dc2a:	39 d6                	cmp    esi,edx
c000dc2c:	7e 3c                	jle    c000dc6a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc2e:	29 c2                	sub    edx,eax
c000dc30:	eb 04                	jmp    c000dc36 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc32:	39 c2                	cmp    edx,eax
c000dc34:	7d 05                	jge    c000dc3b <KeGetProcessEnvPair(Process*, int)+0x40>
c000dc36:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dc39:	eb 20                	jmp    c000dc5b <KeGetProcessEnvPair(Process*, int)+0x60>
c000dc3b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dc3d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dc40:	39 d1                	cmp    ecx,edx
c000dc42:	7e 04                	jle    c000dc48 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dc44:	29 c2                	sub    edx,eax
c000dc46:	eb 10                	jmp    c000dc58 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dc48:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000dc4e:	03 0e                	add    ecx,DWORD PTR [esi]
c000dc50:	39 d1                	cmp    ecx,edx
c000dc52:	7e 16                	jle    c000dc6a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc54:	29 c2                	sub    edx,eax
c000dc56:	29 fa                	sub    edx,edi
c000dc58:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dc5b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dc5e:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc60:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dc63:	89 03                	mov    DWORD PTR [ebx],eax
c000dc65:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dc68:	eb 1d                	jmp    c000dc87 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dc6a:	83 ec 0c             	sub    esp,0xc
c000dc6d:	68 92 24 02 c0       	push   0xc0022492
c000dc72:	e8 7f 0f 00 00       	call   c000ebf6 <KePanic(char const*)>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc80:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dc87:	89 d8                	mov    eax,ebx
c000dc89:	5b                   	pop    ebx
c000dc8a:	5e                   	pop    esi
c000dc8b:	5f                   	pop    edi
c000dc8c:	c2 04 00             	ret    0x4
c000dc8f:	90                   	nop

c000dc90 <KeSetupInterrupts()>:
c000dc90:	83 ec 10             	sub    esp,0x10
c000dc93:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc9b:	90                   	nop
c000dc9c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dca4:	7f 5a                	jg     c000dd00 <KeSetupInterrupts()+0x70>
c000dca6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dcae:	66 90                	xchg   ax,ax
c000dcb0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dcb5:	7f 41                	jg     c000dcf8 <KeSetupInterrupts()+0x68>
c000dcb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcbb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dcc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dcc6:	01 d0                	add    eax,edx
c000dcc8:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000dcd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcd7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dcde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dce2:	01 d0                	add    eax,edx
c000dce4:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dcef:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dcf4:	eb ba                	jmp    c000dcb0 <KeSetupInterrupts()+0x20>
c000dcf6:	66 90                	xchg   ax,ax
c000dcf8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dcfd:	eb 9d                	jmp    c000dc9c <KeSetupInterrupts()+0xc>
c000dcff:	90                   	nop
c000dd00:	90                   	nop
c000dd01:	83 c4 10             	add    esp,0x10
c000dd04:	c3                   	ret    
c000dd05:	8d 76 00             	lea    esi,[esi+0x0]

c000dd08 <int_handler>:
c000dd08:	83 ec 2c             	sub    esp,0x2c
c000dd0b:	90                   	nop
c000dd0c:	a0 94 cd 02 c0       	mov    al,ds:0xc002cd94
c000dd11:	0f b6 c0             	movzx  eax,al
c000dd14:	85 c0                	test   eax,eax
c000dd16:	74 04                	je     c000dd1c <int_handler+0x14>
c000dd18:	fa                   	cli    
c000dd19:	f4                   	hlt    
c000dd1a:	eb f0                	jmp    c000dd0c <int_handler+0x4>
c000dd1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd20:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dd23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd27:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000dd2c:	7e 1a                	jle    c000dd48 <int_handler+0x40>
c000dd2e:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dd33:	7f 13                	jg     c000dd48 <int_handler+0x40>
c000dd35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd39:	83 e8 20             	sub    eax,0x20
c000dd3c:	83 ec 0c             	sub    esp,0xc
c000dd3f:	50                   	push   eax
c000dd40:	e8 99 ab 00 00       	call   c00188de <HalEndOfInterrupt(int)>
c000dd45:	83 c4 10             	add    esp,0x10
c000dd48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd4c:	c1 e0 04             	shl    eax,0x4
c000dd4f:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000dd54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd5c:	c1 e0 04             	shl    eax,0x4
c000dd5f:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dd64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd68:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dd70:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000dd75:	0f 8f ad 00 00 00    	jg     c000de28 <int_handler+0x120>
c000dd7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd7f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dd8a:	01 d0                	add    eax,edx
c000dd8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd8e:	85 c0                	test   eax,eax
c000dd90:	0f 84 86 00 00 00    	je     c000de1c <int_handler+0x114>
c000dd96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd9a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dd9d:	83 f8 60             	cmp    eax,0x60
c000dda0:	75 46                	jne    c000dde8 <int_handler+0xe0>
c000dda2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dda6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddb1:	01 d0                	add    eax,edx
c000ddb3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ddb9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ddc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddc4:	01 ca                	add    edx,ecx
c000ddc6:	8b 12                	mov    edx,DWORD PTR [edx]
c000ddc8:	83 ec 08             	sub    esp,0x8
c000ddcb:	52                   	push   edx
c000ddcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ddd0:	ff d0                	call   eax
c000ddd2:	83 c4 10             	add    esp,0x10
c000ddd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dddd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dde1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dde5:	eb 5d                	jmp    c000de44 <int_handler+0x13c>
c000dde7:	90                   	nop
c000dde8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddec:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddf7:	01 d0                	add    eax,edx
c000ddf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ddff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de0a:	01 ca                	add    edx,ecx
c000de0c:	8b 12                	mov    edx,DWORD PTR [edx]
c000de0e:	83 ec 08             	sub    esp,0x8
c000de11:	52                   	push   edx
c000de12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de16:	ff d0                	call   eax
c000de18:	83 c4 10             	add    esp,0x10
c000de1b:	90                   	nop
c000de1c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000de21:	e9 4a ff ff ff       	jmp    c000dd70 <int_handler+0x68>
c000de26:	66 90                	xchg   ax,ax
c000de28:	83 ec 0c             	sub    esp,0xc
c000de2b:	68 ac 24 02 c0       	push   0xc00224ac
c000de30:	e8 19 91 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de35:	83 c4 10             	add    esp,0x10
c000de38:	b8 00 00 00 00       	mov    eax,0x0
c000de3d:	ba 00 00 00 00       	mov    edx,0x0
c000de42:	66 90                	xchg   ax,ax
c000de44:	83 c4 2c             	add    esp,0x2c
c000de47:	c3                   	ret    

c000de48 <KeDisplayProgramFault(char const*)>:
c000de48:	83 ec 0c             	sub    esp,0xc
c000de4b:	83 ec 0c             	sub    esp,0xc
c000de4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de52:	e8 f7 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de57:	83 c4 10             	add    esp,0x10
c000de5a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000de5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000de61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000de64:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000de6a:	85 c0                	test   eax,eax
c000de6c:	74 22                	je     c000de90 <KeDisplayProgramFault(char const*)+0x48>
c000de6e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000de73:	8b 00                	mov    eax,DWORD PTR [eax]
c000de75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000de78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000de7e:	6a 04                	push   0x4
c000de80:	6a 0f                	push   0xf
c000de82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de86:	50                   	push   eax
c000de87:	e8 cc 35 00 00       	call   c0011458 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000de8c:	83 c4 10             	add    esp,0x10
c000de8f:	90                   	nop
c000de90:	90                   	nop
c000de91:	83 c4 0c             	add    esp,0xc
c000de94:	c3                   	ret    
c000de95:	8d 76 00             	lea    esi,[esi+0x0]

c000de98 <KeGeneralProtectionFault(void*, void*)>:
c000de98:	83 ec 0c             	sub    esp,0xc
c000de9b:	83 ec 08             	sub    esp,0x8
c000de9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea6:	e8 d5 9f 00 00       	call   c0017e80 <HalHandleGeneralProtectionFault(void*, void*)>
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	0f b6 c0             	movzx  eax,al
c000deb1:	85 c0                	test   eax,eax
c000deb3:	75 2f                	jne    c000dee4 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000deb5:	83 ec 0c             	sub    esp,0xc
c000deb8:	68 af 24 02 c0       	push   0xc00224af
c000debd:	e8 86 ff ff ff       	call   c000de48 <KeDisplayProgramFault(char const*)>
c000dec2:	83 c4 10             	add    esp,0x10
c000dec5:	83 ec 0c             	sub    esp,0xc
c000dec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000decc:	e8 49 a1 00 00       	call   c001801a <HalDisplayDebugInfo(void*)>
c000ded1:	83 c4 10             	add    esp,0x10
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	6a 00                	push   0x0
c000ded9:	e8 36 80 00 00       	call   c0015f14 <Thr::terminateFromIRQ(int)>
c000dede:	83 c4 10             	add    esp,0x10
c000dee1:	eb 05                	jmp    c000dee8 <KeGeneralProtectionFault(void*, void*)+0x50>
c000dee3:	90                   	nop
c000dee4:	90                   	nop
c000dee5:	8d 76 00             	lea    esi,[esi+0x0]
c000dee8:	83 c4 0c             	add    esp,0xc
c000deeb:	c3                   	ret    

c000deec <KePageFault(void*, void*)>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	83 ec 0c             	sub    esp,0xc
c000def2:	68 c8 24 02 c0       	push   0xc00224c8
c000def7:	e8 52 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000defc:	83 c4 10             	add    esp,0x10
c000deff:	83 ec 08             	sub    esp,0x8
c000df02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df0a:	e8 1c a0 00 00       	call   c0017f2b <HalHandlePageFault(void*, void*)>
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	0f b6 c0             	movzx  eax,al
c000df15:	85 c0                	test   eax,eax
c000df17:	75 2f                	jne    c000df48 <KePageFault(void*, void*)+0x5c>
c000df19:	83 ec 0c             	sub    esp,0xc
c000df1c:	68 d5 24 02 c0       	push   0xc00224d5
c000df21:	e8 22 ff ff ff       	call   c000de48 <KeDisplayProgramFault(char const*)>
c000df26:	83 c4 10             	add    esp,0x10
c000df29:	83 ec 0c             	sub    esp,0xc
c000df2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df30:	e8 e5 a0 00 00       	call   c001801a <HalDisplayDebugInfo(void*)>
c000df35:	83 c4 10             	add    esp,0x10
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	6a 00                	push   0x0
c000df3d:	e8 d2 7f 00 00       	call   c0015f14 <Thr::terminateFromIRQ(int)>
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	eb 05                	jmp    c000df4c <KePageFault(void*, void*)+0x60>
c000df47:	90                   	nop
c000df48:	90                   	nop
c000df49:	8d 76 00             	lea    esi,[esi+0x0]
c000df4c:	83 c4 0c             	add    esp,0xc
c000df4f:	c3                   	ret    

c000df50 <KeNonMaskableInterrupt(void*, void*)>:
c000df50:	83 ec 0c             	sub    esp,0xc
c000df53:	e8 50 a4 00 00       	call   c00183a8 <HalReceivedNMI()>
c000df58:	90                   	nop
c000df59:	83 c4 0c             	add    esp,0xc
c000df5c:	c3                   	ret    
c000df5d:	8d 76 00             	lea    esi,[esi+0x0]

c000df60 <KeOtherFault(void*, void*)>:
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	83 ec 0c             	sub    esp,0xc
c000df66:	68 e0 24 02 c0       	push   0xc00224e0
c000df6b:	e8 d8 fe ff ff       	call   c000de48 <KeDisplayProgramFault(char const*)>
c000df70:	83 c4 10             	add    esp,0x10
c000df73:	83 ec 0c             	sub    esp,0xc
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	e8 9b a0 00 00       	call   c001801a <HalDisplayDebugInfo(void*)>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	83 ec 0c             	sub    esp,0xc
c000df85:	6a 00                	push   0x0
c000df87:	e8 88 7f 00 00       	call   c0015f14 <Thr::terminateFromIRQ(int)>
c000df8c:	83 c4 10             	add    esp,0x10
c000df8f:	90                   	nop
c000df90:	83 c4 0c             	add    esp,0xc
c000df93:	c3                   	ret    

c000df94 <KeOpcodeFault(void*, void*)>:
c000df94:	55                   	push   ebp
c000df95:	89 e5                	mov    ebp,esp
c000df97:	83 ec 08             	sub    esp,0x8
c000df9a:	83 ec 08             	sub    esp,0x8
c000df9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dfa0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfa3:	e8 30 a0 00 00       	call   c0017fd8 <HalHandleOpcodeFault(void*, void*)>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	0f b6 c0             	movzx  eax,al
c000dfae:	85 c0                	test   eax,eax
c000dfb0:	75 2e                	jne    c000dfe0 <KeOpcodeFault(void*, void*)+0x4c>
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	68 08 25 02 c0       	push   0xc0022508
c000dfba:	e8 89 fe ff ff       	call   c000de48 <KeDisplayProgramFault(char const*)>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfc8:	e8 4d a0 00 00       	call   c001801a <HalDisplayDebugInfo(void*)>
c000dfcd:	83 c4 10             	add    esp,0x10
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	6a 00                	push   0x0
c000dfd5:	e8 3a 7f 00 00       	call   c0015f14 <Thr::terminateFromIRQ(int)>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	eb 05                	jmp    c000dfe4 <KeOpcodeFault(void*, void*)+0x50>
c000dfdf:	90                   	nop
c000dfe0:	90                   	nop
c000dfe1:	8d 76 00             	lea    esi,[esi+0x0]
c000dfe4:	c9                   	leave  
c000dfe5:	c3                   	ret    
c000dfe6:	66 90                	xchg   ax,ax

c000dfe8 <KeDoubleFault(void*, void*)>:
c000dfe8:	55                   	push   ebp
c000dfe9:	89 e5                	mov    ebp,esp
c000dfeb:	83 ec 08             	sub    esp,0x8
c000dfee:	83 ec 0c             	sub    esp,0xc
c000dff1:	68 15 25 02 c0       	push   0xc0022515
c000dff6:	e8 fb 0b 00 00       	call   c000ebf6 <KePanic(char const*)>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	90                   	nop
c000dfff:	c9                   	leave  
c000e000:	c3                   	ret    
c000e001:	90                   	nop

c000e002 <GDTEntry::setBase(unsigned int)>:
c000e002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e006:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e00a:	89 c1                	mov    ecx,eax
c000e00c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e010:	c1 e9 10             	shr    ecx,0x10
c000e013:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e016:	c1 e8 18             	shr    eax,0x18
c000e019:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e01c:	c3                   	ret    
c000e01d:	90                   	nop

c000e01e <GDTEntry::setLimit(unsigned int)>:
c000e01e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e026:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e029:	66 89 01             	mov    WORD PTR [ecx],ax
c000e02c:	c1 e8 10             	shr    eax,0x10
c000e02f:	83 e0 0f             	and    eax,0xf
c000e032:	83 e2 f0             	and    edx,0xfffffff0
c000e035:	09 d0                	or     eax,edx
c000e037:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e03a:	c3                   	ret    
c000e03b:	90                   	nop

c000e03c <GDT::GDT()>:
c000e03c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e040:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e04a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e050:	90                   	nop
c000e051:	c3                   	ret    

c000e052 <GDT::addEntry(GDTEntry)>:
c000e052:	53                   	push   ebx
c000e053:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e057:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e05b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e05f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e061:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e065:	8d 48 01             	lea    ecx,[eax+0x1]
c000e068:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e06c:	c1 e0 03             	shl    eax,0x3
c000e06f:	89 0a                	mov    DWORD PTR [edx],ecx
c000e071:	5b                   	pop    ebx
c000e072:	c3                   	ret    
c000e073:	90                   	nop

c000e074 <GDT::getNumberOfEntries()>:
c000e074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e078:	8b 00                	mov    eax,DWORD PTR [eax]
c000e07a:	c3                   	ret    
c000e07b:	90                   	nop

c000e07c <GDT::flush()>:
c000e07c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e080:	8b 10                	mov    edx,DWORD PTR [eax]
c000e082:	83 c0 04             	add    eax,0x4
c000e085:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e08a:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e091:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e098:	e9 bd 22 ff ff       	jmp    c000035a <loadGDT>
c000e09d:	90                   	nop

c000e09e <GDT::setup()>:
c000e09e:	57                   	push   edi
c000e09f:	56                   	push   esi
c000e0a0:	53                   	push   ebx
c000e0a1:	83 ec 30             	sub    esp,0x30
c000e0a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0a8:	6a 00                	push   0x0
c000e0aa:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e0ae:	56                   	push   esi
c000e0af:	e8 4e ff ff ff       	call   c000e002 <GDTEntry::setBase(unsigned int)>
c000e0b4:	6a 00                	push   0x0
c000e0b6:	56                   	push   esi
c000e0b7:	e8 62 ff ff ff       	call   c000e01e <GDTEntry::setLimit(unsigned int)>
c000e0bc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e0c4:	6a 00                	push   0x0
c000e0c6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e0ca:	56                   	push   esi
c000e0cb:	e8 32 ff ff ff       	call   c000e002 <GDTEntry::setBase(unsigned int)>
c000e0d0:	68 ff ff ff 00       	push   0xffffff
c000e0d5:	56                   	push   esi
c000e0d6:	e8 43 ff ff ff       	call   c000e01e <GDTEntry::setLimit(unsigned int)>
c000e0db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e0df:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e0e3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e0e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e0ec:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e0f1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e0f5:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e0f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e0fd:	89 f8                	mov    eax,edi
c000e0ff:	89 fa                	mov    edx,edi
c000e101:	80 e4 f7             	and    ah,0xf7
c000e104:	80 ce 60             	or     dh,0x60
c000e107:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e10b:	89 c7                	mov    edi,eax
c000e10d:	80 cc 60             	or     ah,0x60
c000e110:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e114:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e118:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e11c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e120:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e124:	83 c4 20             	add    esp,0x20
c000e127:	6a 00                	push   0x0
c000e129:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e12d:	50                   	push   eax
c000e12e:	e8 cf fe ff ff       	call   c000e002 <GDTEntry::setBase(unsigned int)>
c000e133:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e137:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e13b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e13f:	83 e0 3f             	and    eax,0x3f
c000e142:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e146:	6a 00                	push   0x0
c000e148:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e14c:	50                   	push   eax
c000e14d:	e8 b0 fe ff ff       	call   c000e002 <GDTEntry::setBase(unsigned int)>
c000e152:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e156:	83 e0 3f             	and    eax,0x3f
c000e159:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e15d:	83 c4 0c             	add    esp,0xc
c000e160:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e164:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e168:	53                   	push   ebx
c000e169:	e8 e4 fe ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c000e16e:	83 c4 0c             	add    esp,0xc
c000e171:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e175:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e179:	53                   	push   ebx
c000e17a:	e8 d3 fe ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c000e17f:	83 c4 0c             	add    esp,0xc
c000e182:	57                   	push   edi
c000e183:	56                   	push   esi
c000e184:	53                   	push   ebx
c000e185:	e8 c8 fe ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c000e18a:	83 c4 0c             	add    esp,0xc
c000e18d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e191:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e195:	53                   	push   ebx
c000e196:	e8 b7 fe ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c000e19b:	83 c4 0c             	add    esp,0xc
c000e19e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1a6:	53                   	push   ebx
c000e1a7:	e8 a6 fe ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c000e1ac:	83 c4 0c             	add    esp,0xc
c000e1af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1b7:	53                   	push   ebx
c000e1b8:	e8 95 fe ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c000e1bd:	83 c4 0c             	add    esp,0xc
c000e1c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1c8:	53                   	push   ebx
c000e1c9:	e8 84 fe ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c000e1ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1d1:	e8 a6 fe ff ff       	call   c000e07c <GDT::flush()>
c000e1d6:	83 c4 40             	add    esp,0x40
c000e1d9:	5b                   	pop    ebx
c000e1da:	5e                   	pop    esi
c000e1db:	5f                   	pop    edi
c000e1dc:	c3                   	ret    

c000e1dd <idleFunction(void*)>:
c000e1dd:	83 ec 0c             	sub    esp,0xc
c000e1e0:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e1e7:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e1ee:	75 01                	jne    c000e1f1 <idleFunction(void*)+0x14>
c000e1f0:	fb                   	sti    
c000e1f1:	e8 4d a2 00 00       	call   c0018443 <HalSystemIdle()>
c000e1f6:	e8 ab 24 01 00       	call   c00206a6 <idleCommon()>
c000e1fb:	eb f4                	jmp    c000e1f1 <idleFunction(void*)+0x14>
c000e1fd:	66 90                	xchg   ax,ax
c000e1ff:	90                   	nop

c000e200 <IDTEntry::IDTEntry(bool)>:
c000e200:	53                   	push   ebx
c000e201:	83 ec 04             	sub    esp,0x4
c000e204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e208:	88 04 24             	mov    BYTE PTR [esp],al
c000e20b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e20f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e219:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e21d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e221:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e224:	83 e2 f0             	and    edx,0xfffffff0
c000e227:	83 ca 0e             	or     edx,0xe
c000e22a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e22d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e231:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e234:	83 e2 ef             	and    edx,0xffffffef
c000e237:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e23a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e23e:	85 c0                	test   eax,eax
c000e240:	74 06                	je     c000e248 <IDTEntry::IDTEntry(bool)+0x48>
c000e242:	b2 03                	mov    dl,0x3
c000e244:	eb 06                	jmp    c000e24c <IDTEntry::IDTEntry(bool)+0x4c>
c000e246:	66 90                	xchg   ax,ax
c000e248:	b2 00                	mov    dl,0x0
c000e24a:	66 90                	xchg   ax,ax
c000e24c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e250:	83 e2 03             	and    edx,0x3
c000e253:	89 d3                	mov    ebx,edx
c000e255:	c1 e3 05             	shl    ebx,0x5
c000e258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e25b:	83 e2 9f             	and    edx,0xffffff9f
c000e25e:	88 d1                	mov    cl,dl
c000e260:	88 da                	mov    dl,bl
c000e262:	09 ca                	or     edx,ecx
c000e264:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e267:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e26b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e26e:	83 ca 80             	or     edx,0xffffff80
c000e271:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e274:	90                   	nop
c000e275:	83 c4 04             	add    esp,0x4
c000e278:	5b                   	pop    ebx
c000e279:	c3                   	ret    

c000e27a <IDTEntry::setOffset(unsigned int)>:
c000e27a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e27e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e282:	66 89 02             	mov    WORD PTR [edx],ax
c000e285:	c1 e8 10             	shr    eax,0x10
c000e288:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e28c:	c3                   	ret    
c000e28d:	90                   	nop
c000e28e:	66 90                	xchg   ax,ax

c000e290 <IDT::IDT()>:
c000e290:	90                   	nop
c000e291:	c3                   	ret    

c000e292 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e296:	83 c0 30             	add    eax,0x30
c000e299:	c3                   	ret    

c000e29a <IDT::addEntry(IDTEntry, int)>:
c000e29a:	53                   	push   ebx
c000e29b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e29f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e2a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ab:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e2ae:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e2b2:	5b                   	pop    ebx
c000e2b3:	c3                   	ret    

c000e2b4 <IDT::addEntry(int, void (*)(), bool)>:
c000e2b4:	53                   	push   ebx
c000e2b5:	83 ec 10             	sub    esp,0x10
c000e2b8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e2bd:	50                   	push   eax
c000e2be:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e2c2:	53                   	push   ebx
c000e2c3:	e8 38 ff ff ff       	call   c000e200 <IDTEntry::IDTEntry(bool)>
c000e2c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2cc:	53                   	push   ebx
c000e2cd:	e8 a8 ff ff ff       	call   c000e27a <IDTEntry::setOffset(unsigned int)>
c000e2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e2e2:	e8 b3 ff ff ff       	call   c000e29a <IDT::addEntry(IDTEntry, int)>
c000e2e7:	83 c4 30             	add    esp,0x30
c000e2ea:	5b                   	pop    ebx
c000e2eb:	c3                   	ret    

c000e2ec <IDT::flush()>:
c000e2ec:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e2f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2f9:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e2fe:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e305:	c3                   	ret    

c000e306 <IDT::setup()>:
c000e306:	57                   	push   edi
c000e307:	56                   	push   esi
c000e308:	53                   	push   ebx
c000e309:	83 ec 10             	sub    esp,0x10
c000e30c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e310:	6a 00                	push   0x0
c000e312:	68 50 f9 01 c0       	push   0xc001f950
c000e317:	6a 00                	push   0x0
c000e319:	53                   	push   ebx
c000e31a:	e8 95 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e31f:	6a 00                	push   0x0
c000e321:	68 60 f9 01 c0       	push   0xc001f960
c000e326:	6a 01                	push   0x1
c000e328:	53                   	push   ebx
c000e329:	e8 86 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e32e:	83 c4 20             	add    esp,0x20
c000e331:	6a 00                	push   0x0
c000e333:	68 6a f9 01 c0       	push   0xc001f96a
c000e338:	6a 02                	push   0x2
c000e33a:	53                   	push   ebx
c000e33b:	e8 74 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e340:	6a 00                	push   0x0
c000e342:	68 74 f9 01 c0       	push   0xc001f974
c000e347:	6a 03                	push   0x3
c000e349:	53                   	push   ebx
c000e34a:	e8 65 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e34f:	83 c4 20             	add    esp,0x20
c000e352:	6a 00                	push   0x0
c000e354:	68 7e f9 01 c0       	push   0xc001f97e
c000e359:	6a 04                	push   0x4
c000e35b:	53                   	push   ebx
c000e35c:	e8 53 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e361:	6a 00                	push   0x0
c000e363:	68 88 f9 01 c0       	push   0xc001f988
c000e368:	6a 05                	push   0x5
c000e36a:	53                   	push   ebx
c000e36b:	e8 44 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e370:	83 c4 20             	add    esp,0x20
c000e373:	6a 00                	push   0x0
c000e375:	68 92 f9 01 c0       	push   0xc001f992
c000e37a:	6a 06                	push   0x6
c000e37c:	53                   	push   ebx
c000e37d:	e8 32 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e382:	6a 00                	push   0x0
c000e384:	68 9c f9 01 c0       	push   0xc001f99c
c000e389:	6a 07                	push   0x7
c000e38b:	53                   	push   ebx
c000e38c:	e8 23 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e391:	83 c4 20             	add    esp,0x20
c000e394:	6a 00                	push   0x0
c000e396:	68 a6 f9 01 c0       	push   0xc001f9a6
c000e39b:	6a 08                	push   0x8
c000e39d:	53                   	push   ebx
c000e39e:	e8 11 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e3a3:	6a 00                	push   0x0
c000e3a5:	68 ae f9 01 c0       	push   0xc001f9ae
c000e3aa:	6a 09                	push   0x9
c000e3ac:	53                   	push   ebx
c000e3ad:	e8 02 ff ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e3b2:	83 c4 20             	add    esp,0x20
c000e3b5:	6a 00                	push   0x0
c000e3b7:	68 b8 f9 01 c0       	push   0xc001f9b8
c000e3bc:	6a 0a                	push   0xa
c000e3be:	53                   	push   ebx
c000e3bf:	e8 f0 fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e3c4:	6a 00                	push   0x0
c000e3c6:	68 c0 f9 01 c0       	push   0xc001f9c0
c000e3cb:	6a 0b                	push   0xb
c000e3cd:	53                   	push   ebx
c000e3ce:	e8 e1 fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e3d3:	83 c4 20             	add    esp,0x20
c000e3d6:	6a 00                	push   0x0
c000e3d8:	68 c8 f9 01 c0       	push   0xc001f9c8
c000e3dd:	6a 0c                	push   0xc
c000e3df:	53                   	push   ebx
c000e3e0:	e8 cf fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e3e5:	6a 00                	push   0x0
c000e3e7:	68 d0 f9 01 c0       	push   0xc001f9d0
c000e3ec:	6a 0d                	push   0xd
c000e3ee:	53                   	push   ebx
c000e3ef:	e8 c0 fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e3f4:	83 c4 20             	add    esp,0x20
c000e3f7:	6a 00                	push   0x0
c000e3f9:	68 ea f9 01 c0       	push   0xc001f9ea
c000e3fe:	6a 0e                	push   0xe
c000e400:	53                   	push   ebx
c000e401:	e8 ae fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e406:	6a 00                	push   0x0
c000e408:	68 f2 f9 01 c0       	push   0xc001f9f2
c000e40d:	6a 0f                	push   0xf
c000e40f:	53                   	push   ebx
c000e410:	e8 9f fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e415:	83 c4 20             	add    esp,0x20
c000e418:	6a 00                	push   0x0
c000e41a:	68 fc f9 01 c0       	push   0xc001f9fc
c000e41f:	6a 10                	push   0x10
c000e421:	53                   	push   ebx
c000e422:	e8 8d fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e427:	6a 00                	push   0x0
c000e429:	68 06 fa 01 c0       	push   0xc001fa06
c000e42e:	6a 11                	push   0x11
c000e430:	53                   	push   ebx
c000e431:	e8 7e fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e436:	83 c4 20             	add    esp,0x20
c000e439:	6a 00                	push   0x0
c000e43b:	68 10 fa 01 c0       	push   0xc001fa10
c000e440:	6a 12                	push   0x12
c000e442:	53                   	push   ebx
c000e443:	e8 6c fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e448:	6a 01                	push   0x1
c000e44a:	68 aa fa 01 c0       	push   0xc001faaa
c000e44f:	6a 60                	push   0x60
c000e451:	53                   	push   ebx
c000e452:	e8 5d fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e457:	83 c4 20             	add    esp,0x20
c000e45a:	6a 00                	push   0x0
c000e45c:	68 b1 fa 01 c0       	push   0xc001fab1
c000e461:	6a 20                	push   0x20
c000e463:	53                   	push   ebx
c000e464:	e8 4b fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e469:	6a 00                	push   0x0
c000e46b:	68 9c fa 01 c0       	push   0xc001fa9c
c000e470:	6a 21                	push   0x21
c000e472:	53                   	push   ebx
c000e473:	e8 3c fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	6a 00                	push   0x0
c000e47d:	68 a3 fa 01 c0       	push   0xc001faa3
c000e482:	6a 22                	push   0x22
c000e484:	53                   	push   ebx
c000e485:	e8 2a fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e48a:	6a 00                	push   0x0
c000e48c:	68 1a fa 01 c0       	push   0xc001fa1a
c000e491:	6a 23                	push   0x23
c000e493:	53                   	push   ebx
c000e494:	e8 1b fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e499:	83 c4 20             	add    esp,0x20
c000e49c:	6a 00                	push   0x0
c000e49e:	68 24 fa 01 c0       	push   0xc001fa24
c000e4a3:	6a 24                	push   0x24
c000e4a5:	53                   	push   ebx
c000e4a6:	e8 09 fe ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e4ab:	6a 00                	push   0x0
c000e4ad:	68 2e fa 01 c0       	push   0xc001fa2e
c000e4b2:	6a 25                	push   0x25
c000e4b4:	53                   	push   ebx
c000e4b5:	e8 fa fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e4ba:	83 c4 20             	add    esp,0x20
c000e4bd:	6a 00                	push   0x0
c000e4bf:	68 38 fa 01 c0       	push   0xc001fa38
c000e4c4:	6a 26                	push   0x26
c000e4c6:	53                   	push   ebx
c000e4c7:	e8 e8 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e4cc:	6a 00                	push   0x0
c000e4ce:	68 42 fa 01 c0       	push   0xc001fa42
c000e4d3:	6a 27                	push   0x27
c000e4d5:	53                   	push   ebx
c000e4d6:	e8 d9 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e4db:	83 c4 20             	add    esp,0x20
c000e4de:	6a 00                	push   0x0
c000e4e0:	68 4c fa 01 c0       	push   0xc001fa4c
c000e4e5:	6a 28                	push   0x28
c000e4e7:	53                   	push   ebx
c000e4e8:	e8 c7 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e4ed:	6a 00                	push   0x0
c000e4ef:	68 56 fa 01 c0       	push   0xc001fa56
c000e4f4:	6a 29                	push   0x29
c000e4f6:	53                   	push   ebx
c000e4f7:	e8 b8 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e4fc:	83 c4 20             	add    esp,0x20
c000e4ff:	6a 00                	push   0x0
c000e501:	68 60 fa 01 c0       	push   0xc001fa60
c000e506:	6a 2a                	push   0x2a
c000e508:	53                   	push   ebx
c000e509:	e8 a6 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e50e:	6a 00                	push   0x0
c000e510:	68 6a fa 01 c0       	push   0xc001fa6a
c000e515:	6a 2b                	push   0x2b
c000e517:	53                   	push   ebx
c000e518:	e8 97 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e51d:	83 c4 20             	add    esp,0x20
c000e520:	6a 00                	push   0x0
c000e522:	68 74 fa 01 c0       	push   0xc001fa74
c000e527:	6a 2c                	push   0x2c
c000e529:	53                   	push   ebx
c000e52a:	e8 85 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e52f:	6a 00                	push   0x0
c000e531:	68 7e fa 01 c0       	push   0xc001fa7e
c000e536:	6a 2d                	push   0x2d
c000e538:	53                   	push   ebx
c000e539:	e8 76 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e53e:	83 c4 20             	add    esp,0x20
c000e541:	6a 00                	push   0x0
c000e543:	68 88 fa 01 c0       	push   0xc001fa88
c000e548:	6a 2e                	push   0x2e
c000e54a:	53                   	push   ebx
c000e54b:	e8 64 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e550:	6a 00                	push   0x0
c000e552:	68 92 fa 01 c0       	push   0xc001fa92
c000e557:	6a 2f                	push   0x2f
c000e559:	53                   	push   ebx
c000e55a:	e8 55 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e55f:	83 c4 20             	add    esp,0x20
c000e562:	6a 00                	push   0x0
c000e564:	68 ec fb 01 c0       	push   0xc001fbec
c000e569:	6a 30                	push   0x30
c000e56b:	53                   	push   ebx
c000e56c:	e8 43 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e571:	6a 00                	push   0x0
c000e573:	68 f6 fb 01 c0       	push   0xc001fbf6
c000e578:	6a 31                	push   0x31
c000e57a:	53                   	push   ebx
c000e57b:	e8 34 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e580:	83 c4 20             	add    esp,0x20
c000e583:	6a 00                	push   0x0
c000e585:	68 00 fc 01 c0       	push   0xc001fc00
c000e58a:	6a 32                	push   0x32
c000e58c:	53                   	push   ebx
c000e58d:	e8 22 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e592:	6a 00                	push   0x0
c000e594:	68 0a fc 01 c0       	push   0xc001fc0a
c000e599:	6a 33                	push   0x33
c000e59b:	53                   	push   ebx
c000e59c:	e8 13 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e5a1:	83 c4 20             	add    esp,0x20
c000e5a4:	6a 00                	push   0x0
c000e5a6:	68 14 fc 01 c0       	push   0xc001fc14
c000e5ab:	6a 34                	push   0x34
c000e5ad:	53                   	push   ebx
c000e5ae:	e8 01 fd ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e5b3:	6a 00                	push   0x0
c000e5b5:	68 1e fc 01 c0       	push   0xc001fc1e
c000e5ba:	6a 35                	push   0x35
c000e5bc:	53                   	push   ebx
c000e5bd:	e8 f2 fc ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e5c2:	83 c4 20             	add    esp,0x20
c000e5c5:	6a 00                	push   0x0
c000e5c7:	68 28 fc 01 c0       	push   0xc001fc28
c000e5cc:	6a 36                	push   0x36
c000e5ce:	53                   	push   ebx
c000e5cf:	e8 e0 fc ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e5d4:	6a 00                	push   0x0
c000e5d6:	68 32 fc 01 c0       	push   0xc001fc32
c000e5db:	6a 37                	push   0x37
c000e5dd:	53                   	push   ebx
c000e5de:	e8 d1 fc ff ff       	call   c000e2b4 <IDT::addEntry(int, void (*)(), bool)>
c000e5e3:	83 c4 1c             	add    esp,0x1c
c000e5e6:	6a 03                	push   0x3
c000e5e8:	6a 02                	push   0x2
c000e5ea:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e5f0:	e8 df 41 00 00       	call   c00127d4 <VAS::allocatePages(int, int)>
c000e5f5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e5fc:	89 c6                	mov    esi,eax
c000e5fe:	e8 ad 02 00 00       	call   c000e8b0 <malloc>
c000e603:	81 c6 00 20 00 00    	add    esi,0x2000
c000e609:	89 04 24             	mov    DWORD PTR [esp],eax
c000e60c:	89 c7                	mov    edi,eax
c000e60e:	e8 55 32 00 00       	call   c0011868 <TSS::TSS()>
c000e613:	83 c4 0c             	add    esp,0xc
c000e616:	68 a6 f9 01 c0       	push   0xc001f9a6
c000e61b:	56                   	push   esi
c000e61c:	57                   	push   edi
c000e61d:	e8 8a 32 00 00       	call   c00118ac <TSS::setup(unsigned long, unsigned long)>
c000e622:	89 c6                	mov    esi,eax
c000e624:	58                   	pop    eax
c000e625:	5a                   	pop    edx
c000e626:	6a 00                	push   0x0
c000e628:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e62c:	50                   	push   eax
c000e62d:	e8 ce fb ff ff       	call   c000e200 <IDTEntry::IDTEntry(bool)>
c000e632:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e636:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e63b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e642:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e646:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e64c:	80 ce 05             	or     dh,0x5
c000e64f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e653:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e65a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e65d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e660:	e8 87 fc ff ff       	call   c000e2ec <IDT::flush()>
c000e665:	83 c4 20             	add    esp,0x20
c000e668:	5b                   	pop    ebx
c000e669:	5e                   	pop    esi
c000e66a:	5f                   	pop    edi
c000e66b:	c3                   	ret    

c000e66c <CPU::current()>:
c000e66c:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e671:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e677:	c3                   	ret    

c000e678 <operator new(unsigned long)>:
c000e678:	e9 33 02 00 00       	jmp    c000e8b0 <malloc>

c000e67d <operator delete(void*)>:
c000e67d:	e9 4e 02 00 00       	jmp    c000e8d0 <rfree>

c000e682 <disableIRQs()>:
c000e682:	fa                   	cli    
c000e683:	c3                   	ret    

c000e684 <enableIRQs()>:
c000e684:	fb                   	sti    
c000e685:	c3                   	ret    

c000e686 <lockScheduler()>:
c000e686:	fa                   	cli    
c000e687:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e68d:	c3                   	ret    

c000e68e <unlockScheduler()>:
c000e68e:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e695:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e69c:	75 01                	jne    c000e69f <unlockScheduler()+0x11>
c000e69e:	fb                   	sti    
c000e69f:	c3                   	ret    

c000e6a0 <lockStuff()>:
c000e6a0:	fa                   	cli    
c000e6a1:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e6a7:	ff 05 ac d6 02 c0    	inc    DWORD PTR ds:0xc002d6ac
c000e6ad:	c3                   	ret    

c000e6ae <unlockStuff()>:
c000e6ae:	83 ec 0c             	sub    esp,0xc
c000e6b1:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000e6b6:	48                   	dec    eax
c000e6b7:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000e6bc:	75 18                	jne    c000e6d6 <unlockStuff()+0x28>
c000e6be:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c000e6c5:	74 0f                	je     c000e6d6 <unlockStuff()+0x28>
c000e6c7:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000e6d1:	e8 72 6f 00 00       	call   c0015648 <schedule()>
c000e6d6:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e6dd:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e6e4:	75 01                	jne    c000e6e7 <unlockStuff()+0x39>
c000e6e6:	fb                   	sti    
c000e6e7:	83 c4 0c             	add    esp,0xc
c000e6ea:	c3                   	ret    

c000e6eb <Virt::getAKernelVAS()>:
c000e6eb:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c000e6f0:	c3                   	ret    

c000e6f1 <__not_memcpy>:
c000e6f1:	57                   	push   edi
c000e6f2:	56                   	push   esi
c000e6f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6ff:	89 c7                	mov    edi,eax
c000e701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e703:	5e                   	pop    esi
c000e704:	5f                   	pop    edi
c000e705:	c3                   	ret    

c000e706 <sbrk>:
c000e706:	55                   	push   ebp
c000e707:	57                   	push   edi
c000e708:	56                   	push   esi
c000e709:	53                   	push   ebx
c000e70a:	83 ec 1c             	sub    esp,0x1c
c000e70d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e711:	85 c0                	test   eax,eax
c000e713:	74 66                	je     c000e77b <sbrk+0x75>
c000e715:	78 6b                	js     c000e782 <sbrk+0x7c>
c000e717:	8b 15 50 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b50
c000e71d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e721:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e727:	05 ff 0f 00 00       	add    eax,0xfff
c000e72c:	0f 49 e8             	cmovns ebp,eax
c000e72f:	c1 fd 0c             	sar    ebp,0xc
c000e732:	bb 00 00 00 00       	mov    ebx,0x0
c000e737:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e73d:	8b 3d 50 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b50
c000e743:	e8 a8 06 00 00       	call   c000edf0 <Phys::allocatePage()>
c000e748:	68 01 04 00 00       	push   0x401
c000e74d:	57                   	push   edi
c000e74e:	50                   	push   eax
c000e74f:	56                   	push   esi
c000e750:	e8 77 3f 00 00       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c000e755:	81 05 50 4b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024b50,0x1000
c000e75f:	83 c3 01             	add    ebx,0x1
c000e762:	83 c4 10             	add    esp,0x10
c000e765:	39 dd                	cmp    ebp,ebx
c000e767:	75 ce                	jne    c000e737 <sbrk+0x31>
c000e769:	0f 20 d8             	mov    eax,cr3
c000e76c:	0f 22 d8             	mov    cr3,eax
c000e76f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e773:	83 c4 1c             	add    esp,0x1c
c000e776:	5b                   	pop    ebx
c000e777:	5e                   	pop    esi
c000e778:	5f                   	pop    edi
c000e779:	5d                   	pop    ebp
c000e77a:	c3                   	ret    
c000e77b:	a1 50 4b 02 c0       	mov    eax,ds:0xc0024b50
c000e780:	eb f1                	jmp    c000e773 <sbrk+0x6d>
c000e782:	83 ec 08             	sub    esp,0x8
c000e785:	50                   	push   eax
c000e786:	68 24 25 02 c0       	push   0xc0022524
c000e78b:	e8 be 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e790:	83 c4 10             	add    esp,0x10
c000e793:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e798:	eb d9                	jmp    c000e773 <sbrk+0x6d>

c000e79a <sbrk_thunk>:
c000e79a:	83 ec 0c             	sub    esp,0xc
c000e79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a1:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e7a6:	7f 10                	jg     c000e7b8 <sbrk_thunk+0x1e>
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	50                   	push   eax
c000e7ac:	e8 55 ff ff ff       	call   c000e706 <sbrk>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	83 c4 0c             	add    esp,0xc
c000e7b7:	c3                   	ret    
c000e7b8:	83 ec 08             	sub    esp,0x8
c000e7bb:	50                   	push   eax
c000e7bc:	68 54 25 02 c0       	push   0xc0022554
c000e7c1:	e8 88 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7c6:	83 c4 10             	add    esp,0x10
c000e7c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7ce:	eb e4                	jmp    c000e7b4 <sbrk_thunk+0x1a>

c000e7d0 <mmap>:
c000e7d0:	55                   	push   ebp
c000e7d1:	57                   	push   edi
c000e7d2:	56                   	push   esi
c000e7d3:	53                   	push   ebx
c000e7d4:	83 ec 18             	sub    esp,0x18
c000e7d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7db:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e7e1:	89 fb                	mov    ebx,edi
c000e7e3:	c1 eb 0c             	shr    ebx,0xc
c000e7e6:	53                   	push   ebx
c000e7e7:	e8 07 38 00 00       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c000e7ec:	89 c5                	mov    ebp,eax
c000e7ee:	83 c4 10             	add    esp,0x10
c000e7f1:	85 db                	test   ebx,ebx
c000e7f3:	7e 2f                	jle    c000e824 <mmap+0x54>
c000e7f5:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e7fb:	01 c7                	add    edi,eax
c000e7fd:	89 c3                	mov    ebx,eax
c000e7ff:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e805:	e8 e6 05 00 00       	call   c000edf0 <Phys::allocatePage()>
c000e80a:	68 01 04 00 00       	push   0x401
c000e80f:	53                   	push   ebx
c000e810:	50                   	push   eax
c000e811:	56                   	push   esi
c000e812:	e8 b5 3e 00 00       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c000e817:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e81d:	83 c4 10             	add    esp,0x10
c000e820:	39 fb                	cmp    ebx,edi
c000e822:	75 db                	jne    c000e7ff <mmap+0x2f>
c000e824:	89 e8                	mov    eax,ebp
c000e826:	83 c4 0c             	add    esp,0xc
c000e829:	5b                   	pop    ebx
c000e82a:	5e                   	pop    esi
c000e82b:	5f                   	pop    edi
c000e82c:	5d                   	pop    ebp
c000e82d:	c3                   	ret    

c000e82e <munmap>:
c000e82e:	83 ec 18             	sub    esp,0x18
c000e831:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e835:	e8 b7 3a 00 00       	call   c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e83a:	b8 00 00 00 00       	mov    eax,0x0
c000e83f:	83 c4 1c             	add    esp,0x1c
c000e842:	c3                   	ret    

c000e843 <liballoc_lock()>:
c000e843:	fa                   	cli    
c000e844:	83 05 b0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6b0,0x1
c000e84b:	b8 00 00 00 00       	mov    eax,0x0
c000e850:	c3                   	ret    

c000e851 <liballoc_unlock()>:
c000e851:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000e859:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e860:	75 01                	jne    c000e863 <liballoc_unlock()+0x12>
c000e862:	fb                   	sti    
c000e863:	b8 00 00 00 00       	mov    eax,0x0
c000e868:	c3                   	ret    

c000e869 <liballoc_alloc(int)>:
c000e869:	83 ec 10             	sub    esp,0x10
c000e86c:	6a 01                	push   0x1
c000e86e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e872:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e878:	e8 57 3f 00 00       	call   c00127d4 <VAS::allocatePages(int, int)>
c000e87d:	83 c4 1c             	add    esp,0x1c
c000e880:	c3                   	ret    

c000e881 <liballoc_free(void*, int)>:
c000e881:	83 ec 14             	sub    esp,0x14
c000e884:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e888:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e88e:	e8 9b 3b 00 00       	call   c001242e <VAS::freeAllocatedPages(unsigned long)>
c000e893:	b8 00 00 00 00       	mov    eax,0x0
c000e898:	83 c4 1c             	add    esp,0x1c
c000e89b:	c3                   	ret    

c000e89c <realloc>:
c000e89c:	83 ec 14             	sub    esp,0x14
c000e89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8a7:	e8 d9 2e ff ff       	call   c0001785 <dlrealloc>
c000e8ac:	83 c4 1c             	add    esp,0x1c
c000e8af:	c3                   	ret    

c000e8b0 <malloc>:
c000e8b0:	83 ec 18             	sub    esp,0x18
c000e8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8b7:	e8 8c 29 ff ff       	call   c0001248 <dlmalloc>
c000e8bc:	83 c4 1c             	add    esp,0x1c
c000e8bf:	c3                   	ret    

c000e8c0 <free>:
c000e8c0:	83 ec 18             	sub    esp,0x18
c000e8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c7:	e8 ba 24 ff ff       	call   c0000d86 <dlfree>
c000e8cc:	83 c4 1c             	add    esp,0x1c
c000e8cf:	c3                   	ret    

c000e8d0 <rfree>:
c000e8d0:	83 ec 18             	sub    esp,0x18
c000e8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d7:	e8 aa 24 ff ff       	call   c0000d86 <dlfree>
c000e8dc:	83 c4 1c             	add    esp,0x1c
c000e8df:	c3                   	ret    

c000e8e0 <calloc>:
c000e8e0:	56                   	push   esi
c000e8e1:	53                   	push   ebx
c000e8e2:	83 ec 10             	sub    esp,0x10
c000e8e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e8e9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e8ee:	53                   	push   ebx
c000e8ef:	e8 bc ff ff ff       	call   c000e8b0 <malloc>
c000e8f4:	89 c6                	mov    esi,eax
c000e8f6:	83 c4 0c             	add    esp,0xc
c000e8f9:	53                   	push   ebx
c000e8fa:	6a 00                	push   0x0
c000e8fc:	50                   	push   eax
c000e8fd:	e8 ee 1b ff ff       	call   c00004f0 <memset>
c000e902:	89 f0                	mov    eax,esi
c000e904:	83 c4 14             	add    esp,0x14
c000e907:	5b                   	pop    ebx
c000e908:	5e                   	pop    esi
c000e909:	c3                   	ret    
c000e90a:	66 90                	xchg   ax,ax

c000e90c <KeMailboxTryPost(Mailbox*, void*)>:
c000e90c:	83 ec 10             	sub    esp,0x10
c000e90f:	fa                   	cli    
c000e910:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000e915:	83 c0 01             	add    eax,0x1
c000e918:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000e91d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e929:	85 c0                	test   eax,eax
c000e92b:	75 23                	jne    c000e950 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e92d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e931:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e935:	89 10                	mov    DWORD PTR [eax],edx
c000e937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e93b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e93e:	8d 50 01             	lea    edx,[eax+0x1]
c000e941:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e945:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e948:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e94d:	8d 76 00             	lea    esi,[esi+0x0]
c000e950:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000e958:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000e95d:	85 c0                	test   eax,eax
c000e95f:	75 03                	jne    c000e964 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000e961:	fb                   	sti    
c000e962:	66 90                	xchg   ax,ax
c000e964:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e968:	83 c4 10             	add    esp,0x10
c000e96b:	c3                   	ret    

c000e96c <KeMailboxTryGet(Mailbox*, void**)>:
c000e96c:	83 ec 10             	sub    esp,0x10
c000e96f:	fa                   	cli    
c000e970:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000e975:	83 c0 01             	add    eax,0x1
c000e978:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000e97d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e982:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e989:	83 f8 01             	cmp    eax,0x1
c000e98c:	75 22                	jne    c000e9b0 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000e98e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e992:	8b 10                	mov    edx,DWORD PTR [eax]
c000e994:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e998:	89 10                	mov    DWORD PTR [eax],edx
c000e99a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9a1:	8d 50 ff             	lea    edx,[eax-0x1]
c000e9a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e9b0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000e9b8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000e9bd:	85 c0                	test   eax,eax
c000e9bf:	75 03                	jne    c000e9c4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000e9c1:	fb                   	sti    
c000e9c2:	66 90                	xchg   ax,ax
c000e9c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9c8:	83 c4 10             	add    esp,0x10
c000e9cb:	c3                   	ret    

c000e9cc <KeMailboxCreate()>:
c000e9cc:	83 ec 1c             	sub    esp,0x1c
c000e9cf:	83 ec 0c             	sub    esp,0xc
c000e9d2:	6a 08                	push   0x8
c000e9d4:	e8 d7 fe ff ff       	call   c000e8b0 <malloc>
c000e9d9:	83 c4 10             	add    esp,0x10
c000e9dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e9ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e9f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9f9:	83 c4 1c             	add    esp,0x1c
c000e9fc:	c3                   	ret    
c000e9fd:	8d 76 00             	lea    esi,[esi+0x0]

c000ea00 <KeMailboxPost(Mailbox*, void*)>:
c000ea00:	83 ec 1c             	sub    esp,0x1c
c000ea03:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea10:	e8 f7 fe ff ff       	call   c000e90c <KeMailboxTryPost(Mailbox*, void*)>
c000ea15:	83 c4 08             	add    esp,0x8
c000ea18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea1c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea20:	83 f0 01             	xor    eax,0x1
c000ea23:	0f b6 c0             	movzx  eax,al
c000ea26:	85 c0                	test   eax,eax
c000ea28:	74 26                	je     c000ea50 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea2a:	fa                   	cli    
c000ea2b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea30:	83 c0 01             	add    eax,0x1
c000ea33:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ea38:	e8 0b 6c 00 00       	call   c0015648 <schedule()>
c000ea3d:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ea45:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea4a:	85 c0                	test   eax,eax
c000ea4c:	75 02                	jne    c000ea50 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea4e:	fb                   	sti    
c000ea4f:	90                   	nop
c000ea50:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ea55:	85 c0                	test   eax,eax
c000ea57:	75 03                	jne    c000ea5c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ea59:	eb ad                	jmp    c000ea08 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ea5b:	90                   	nop
c000ea5c:	90                   	nop
c000ea5d:	83 c4 1c             	add    esp,0x1c
c000ea60:	c3                   	ret    
c000ea61:	8d 76 00             	lea    esi,[esi+0x0]

c000ea64 <KeMailboxGet(Mailbox*, void**)>:
c000ea64:	83 ec 1c             	sub    esp,0x1c
c000ea67:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea74:	e8 f3 fe ff ff       	call   c000e96c <KeMailboxTryGet(Mailbox*, void**)>
c000ea79:	83 c4 08             	add    esp,0x8
c000ea7c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea84:	83 f0 01             	xor    eax,0x1
c000ea87:	0f b6 c0             	movzx  eax,al
c000ea8a:	85 c0                	test   eax,eax
c000ea8c:	74 26                	je     c000eab4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ea8e:	fa                   	cli    
c000ea8f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea94:	83 c0 01             	add    eax,0x1
c000ea97:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ea9c:	e8 a7 6b 00 00       	call   c0015648 <schedule()>
c000eaa1:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eaa9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eaae:	85 c0                	test   eax,eax
c000eab0:	75 02                	jne    c000eab4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eab2:	fb                   	sti    
c000eab3:	90                   	nop
c000eab4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eab9:	85 c0                	test   eax,eax
c000eabb:	75 03                	jne    c000eac0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000eabd:	eb ad                	jmp    c000ea6c <KeMailboxGet(Mailbox*, void**)+0x8>
c000eabf:	90                   	nop
c000eac0:	90                   	nop
c000eac1:	83 c4 1c             	add    esp,0x1c
c000eac4:	c3                   	ret    
c000eac5:	8d 76 00             	lea    esi,[esi+0x0]

c000eac8 <KeMailboxDestroy(Mailbox*)>:
c000eac8:	83 ec 0c             	sub    esp,0xc
c000eacb:	83 ec 0c             	sub    esp,0xc
c000eace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead2:	e8 e9 fd ff ff       	call   c000e8c0 <free>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	90                   	nop
c000eadb:	83 c4 0c             	add    esp,0xc
c000eade:	c3                   	ret    

c000eadf <KeEntryPoint>:
c000eadf:	57                   	push   edi
c000eae0:	bf f9 03 00 00       	mov    edi,0x3f9
c000eae5:	56                   	push   esi
c000eae6:	31 f6                	xor    esi,esi
c000eae8:	53                   	push   ebx
c000eae9:	89 fa                	mov    edx,edi
c000eaeb:	83 ec 2c             	sub    esp,0x2c
c000eaee:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eaf3:	a3 90 cd 02 c0       	mov    ds:0xc002cd90,eax
c000eaf8:	89 f0                	mov    eax,esi
c000eafa:	ee                   	out    dx,al
c000eafb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000eb00:	b0 80                	mov    al,0x80
c000eb02:	89 da                	mov    edx,ebx
c000eb04:	ee                   	out    dx,al
c000eb05:	b1 03                	mov    cl,0x3
c000eb07:	ba f8 03 00 00       	mov    edx,0x3f8
c000eb0c:	88 c8                	mov    al,cl
c000eb0e:	ee                   	out    dx,al
c000eb0f:	89 f0                	mov    eax,esi
c000eb11:	89 fa                	mov    edx,edi
c000eb13:	ee                   	out    dx,al
c000eb14:	88 c8                	mov    al,cl
c000eb16:	89 da                	mov    edx,ebx
c000eb18:	ee                   	out    dx,al
c000eb19:	b0 c7                	mov    al,0xc7
c000eb1b:	ba fa 03 00 00       	mov    edx,0x3fa
c000eb20:	ee                   	out    dx,al
c000eb21:	b0 0b                	mov    al,0xb
c000eb23:	ba fc 03 00 00       	mov    edx,0x3fc
c000eb28:	ee                   	out    dx,al
c000eb29:	68 63 25 02 c0       	push   0xc0022563
c000eb2e:	e8 1b 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb33:	e8 f4 d9 ff ff       	call   c000c52c <KeDisplaySplashScreen()>
c000eb38:	a1 24 05 00 00       	mov    eax,ds:0x524
c000eb3d:	05 ff 0f 00 00       	add    eax,0xfff
c000eb42:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb47:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb4a:	e8 32 04 00 00       	call   c000ef81 <Phys::physicalMemorySetup(unsigned int)>
c000eb4f:	e8 73 36 00 00       	call   c00121c7 <Virt::virtualMemorySetup()>
c000eb54:	e8 1d d9 ff ff       	call   c000c476 <KeInitialiseAtexit()>
c000eb59:	c7 04 24 7a 25 02 c0 	mov    DWORD PTR [esp],0xc002257a
c000eb60:	e8 e9 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb65:	58                   	pop    eax
c000eb66:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000eb6a:	53                   	push   ebx
c000eb6b:	e8 3e 39 00 00       	call   c00124ae <VAS::VAS()>
c000eb70:	c7 04 24 8a 25 02 c0 	mov    DWORD PTR [esp],0xc002258a
c000eb77:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c000eb7d:	e8 cc 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb82:	e8 67 16 01 00       	call   c00201ee <_init>
c000eb87:	c7 04 24 9e 25 02 c0 	mov    DWORD PTR [esp],0xc002259e
c000eb8e:	e8 bb 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb93:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000eb9a:	e8 11 fd ff ff       	call   c000e8b0 <malloc>
c000eb9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eba2:	89 c6                	mov    esi,eax
c000eba4:	e8 47 ea ff ff       	call   c000d5f0 <Computer::Computer()>
c000eba9:	5a                   	pop    edx
c000ebaa:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000ebb0:	59                   	pop    ecx
c000ebb1:	56                   	push   esi
c000ebb2:	68 ad 25 02 c0       	push   0xc00225ad
c000ebb7:	e8 92 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebbc:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000ebc1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebc3:	53                   	push   ebx
c000ebc4:	6a 00                	push   0x0
c000ebc6:	6a 00                	push   0x0
c000ebc8:	50                   	push   eax
c000ebc9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebcc:	83 c4 14             	add    esp,0x14
c000ebcf:	53                   	push   ebx
c000ebd0:	e8 8f 39 00 00       	call   c0012564 <VAS::~VAS()>
c000ebd5:	83 c4 30             	add    esp,0x30
c000ebd8:	5b                   	pop    ebx
c000ebd9:	5e                   	pop    esi
c000ebda:	5f                   	pop    edi
c000ebdb:	c3                   	ret    

c000ebdc <Mutex::Mutex()>:
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe3:	83 ec 08             	sub    esp,0x8
c000ebe6:	6a 01                	push   0x1
c000ebe8:	50                   	push   eax
c000ebe9:	e8 4e 0c 00 00       	call   c000f83c <Semaphore::Semaphore(int)>
c000ebee:	83 c4 10             	add    esp,0x10
c000ebf1:	90                   	nop
c000ebf2:	83 c4 0c             	add    esp,0xc
c000ebf5:	c3                   	ret    

c000ebf6 <KePanic(char const*)>:
c000ebf6:	c6 05 94 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd94,0x1
c000ebfd:	e9 e9 99 00 00       	jmp    c00185eb <HalPanic(char const*)>

c000ec02 <Phys::allocateDMA(unsigned long)>:
c000ec02:	55                   	push   ebp
c000ec03:	31 ed                	xor    ebp,ebp
c000ec05:	57                   	push   edi
c000ec06:	56                   	push   esi
c000ec07:	31 f6                	xor    esi,esi
c000ec09:	53                   	push   ebx
c000ec0a:	31 db                	xor    ebx,ebx
c000ec0c:	83 ec 1c             	sub    esp,0x1c
c000ec0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec13:	05 ff 0f 00 00       	add    eax,0xfff
c000ec18:	c1 e8 0c             	shr    eax,0xc
c000ec1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec1f:	31 c0                	xor    eax,eax
c000ec21:	eb 1b                	jmp    c000ec3e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec23:	8d 78 01             	lea    edi,[eax+0x1]
c000ec26:	85 c0                	test   eax,eax
c000ec28:	0f 44 eb             	cmove  ebp,ebx
c000ec2b:	0f 44 f3             	cmove  esi,ebx
c000ec2e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ec32:	74 37                	je     c000ec6b <Phys::allocateDMA(unsigned long)+0x69>
c000ec34:	89 f8                	mov    eax,edi
c000ec36:	83 c3 01             	add    ebx,0x1
c000ec39:	83 fb 0f             	cmp    ebx,0xf
c000ec3c:	7f 13                	jg     c000ec51 <Phys::allocateDMA(unsigned long)+0x4f>
c000ec3e:	80 bb b0 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3250],0x0
c000ec45:	74 dc                	je     c000ec23 <Phys::allocateDMA(unsigned long)+0x21>
c000ec47:	31 c0                	xor    eax,eax
c000ec49:	83 c3 01             	add    ebx,0x1
c000ec4c:	83 fb 0f             	cmp    ebx,0xf
c000ec4f:	7e ed                	jle    c000ec3e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec51:	83 ec 0c             	sub    esp,0xc
c000ec54:	68 c4 25 02 c0       	push   0xc00225c4
c000ec59:	e8 98 ff ff ff       	call   c000ebf6 <KePanic(char const*)>
c000ec5e:	83 c4 10             	add    esp,0x10
c000ec61:	31 c0                	xor    eax,eax
c000ec63:	83 c4 1c             	add    esp,0x1c
c000ec66:	5b                   	pop    ebx
c000ec67:	5e                   	pop    esi
c000ec68:	5f                   	pop    edi
c000ec69:	5d                   	pop    ebp
c000ec6a:	c3                   	ret    
c000ec6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ec6f:	89 f2                	mov    edx,esi
c000ec71:	c1 fa 04             	sar    edx,0x4
c000ec74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec78:	01 f1                	add    ecx,esi
c000ec7a:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ec7d:	83 e9 01             	sub    ecx,0x1
c000ec80:	0f 48 ca             	cmovs  ecx,edx
c000ec83:	c1 f9 04             	sar    ecx,0x4
c000ec86:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ec8a:	74 06                	je     c000ec92 <Phys::allocateDMA(unsigned long)+0x90>
c000ec8c:	89 eb                	mov    ebx,ebp
c000ec8e:	31 c0                	xor    eax,eax
c000ec90:	eb b7                	jmp    c000ec49 <Phys::allocateDMA(unsigned long)+0x47>
c000ec92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec96:	85 d2                	test   edx,edx
c000ec98:	74 17                	je     c000ecb1 <Phys::allocateDMA(unsigned long)+0xaf>
c000ec9a:	8d 96 b0 cd 02 c0    	lea    edx,[esi-0x3ffd3250]
c000eca0:	8d 84 06 b1 cd 02 c0 	lea    eax,[esi+eax*1-0x3ffd324f]
c000eca7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ecaa:	83 c2 01             	add    edx,0x1
c000ecad:	39 d0                	cmp    eax,edx
c000ecaf:	75 f6                	jne    c000eca7 <Phys::allocateDMA(unsigned long)+0xa5>
c000ecb1:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000ecb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecbf:	01 c2                	add    edx,eax
c000ecc1:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000ecc7:	85 c9                	test   ecx,ecx
c000ecc9:	74 17                	je     c000ece2 <Phys::allocateDMA(unsigned long)+0xe0>
c000eccb:	83 ec 0c             	sub    esp,0xc
c000ecce:	68 c4 25 02 c0       	push   0xc00225c4
c000ecd3:	e8 1e ff ff ff       	call   c000ebf6 <KePanic(char const*)>
c000ecd8:	83 c4 10             	add    esp,0x10
c000ecdb:	89 f8                	mov    eax,edi
c000ecdd:	e9 54 ff ff ff       	jmp    c000ec36 <Phys::allocateDMA(unsigned long)+0x34>
c000ece2:	c1 e6 0c             	shl    esi,0xc
c000ece5:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000eceb:	e9 73 ff ff ff       	jmp    c000ec63 <Phys::allocateDMA(unsigned long)+0x61>

c000ecf0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ecf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecf4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ecfa:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ecff:	c1 ea 0c             	shr    edx,0xc
c000ed02:	29 d0                	sub    eax,edx
c000ed04:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ed09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed0d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ed12:	c1 e8 0c             	shr    eax,0xc
c000ed15:	85 d2                	test   edx,edx
c000ed17:	74 11                	je     c000ed2a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ed19:	05 b0 cd 02 c0       	add    eax,0xc002cdb0
c000ed1e:	01 c2                	add    edx,eax
c000ed20:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ed23:	83 c0 01             	add    eax,0x1
c000ed26:	39 d0                	cmp    eax,edx
c000ed28:	75 f6                	jne    c000ed20 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ed2a:	c3                   	ret    

c000ed2b <Phys::setPageState(unsigned long, bool)>:
c000ed2b:	57                   	push   edi
c000ed2c:	56                   	push   esi
c000ed2d:	8b 35 54 4b 02 c0    	mov    esi,DWORD PTR ds:0xc0024b54
c000ed33:	53                   	push   ebx
c000ed34:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ed39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed41:	89 ca                	mov    edx,ecx
c000ed43:	83 e1 07             	and    ecx,0x7
c000ed46:	c1 ea 03             	shr    edx,0x3
c000ed49:	0f b6 c0             	movzx  eax,al
c000ed4c:	d3 c3                	rol    ebx,cl
c000ed4e:	01 d6                	add    esi,edx
c000ed50:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ed53:	d3 e0                	shl    eax,cl
c000ed55:	21 fb                	and    ebx,edi
c000ed57:	88 1e                	mov    BYTE PTR [esi],bl
c000ed59:	8b 1d 54 4b 02 c0    	mov    ebx,DWORD PTR ds:0xc0024b54
c000ed5f:	01 da                	add    edx,ebx
c000ed61:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ed63:	09 c8                	or     eax,ecx
c000ed65:	88 02                	mov    BYTE PTR [edx],al
c000ed67:	5b                   	pop    ebx
c000ed68:	5e                   	pop    esi
c000ed69:	5f                   	pop    edi
c000ed6a:	c3                   	ret    

c000ed6b <Phys::getPageState(unsigned long)>:
c000ed6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed6f:	8b 15 54 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b54
c000ed75:	89 c8                	mov    eax,ecx
c000ed77:	83 e1 07             	and    ecx,0x7
c000ed7a:	c1 e8 03             	shr    eax,0x3
c000ed7d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ed81:	d3 f8                	sar    eax,cl
c000ed83:	83 e0 01             	and    eax,0x1
c000ed86:	c3                   	ret    

c000ed87 <Phys::freePage(unsigned long)>:
c000ed87:	53                   	push   ebx
c000ed88:	83 ec 08             	sub    esp,0x8
c000ed8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed8f:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ed95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ed9b:	76 41                	jbe    c000edde <Phys::freePage(unsigned long)+0x57>
c000ed9d:	c1 e8 0c             	shr    eax,0xc
c000eda0:	50                   	push   eax
c000eda1:	89 c3                	mov    ebx,eax
c000eda3:	e8 c3 ff ff ff       	call   c000ed6b <Phys::getPageState(unsigned long)>
c000eda8:	5a                   	pop    edx
c000eda9:	84 c0                	test   al,al
c000edab:	74 20                	je     c000edcd <Phys::freePage(unsigned long)+0x46>
c000edad:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000edb2:	83 ec 08             	sub    esp,0x8
c000edb5:	6a 00                	push   0x0
c000edb7:	53                   	push   ebx
c000edb8:	83 e8 01             	sub    eax,0x1
c000edbb:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000edc0:	e8 66 ff ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000edc5:	83 c4 10             	add    esp,0x10
c000edc8:	83 c4 08             	add    esp,0x8
c000edcb:	5b                   	pop    ebx
c000edcc:	c3                   	ret    
c000edcd:	c7 44 24 10 c9 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc00226c9
c000edd5:	83 c4 08             	add    esp,0x8
c000edd8:	5b                   	pop    ebx
c000edd9:	e9 18 fe ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c000edde:	68 00 10 00 00       	push   0x1000
c000ede3:	50                   	push   eax
c000ede4:	e8 07 ff ff ff       	call   c000ecf0 <Phys::freeDMA(unsigned long, unsigned long)>
c000ede9:	59                   	pop    ecx
c000edea:	5b                   	pop    ebx
c000edeb:	83 c4 08             	add    esp,0x8
c000edee:	5b                   	pop    ebx
c000edef:	c3                   	ret    

c000edf0 <Phys::allocatePage()>:
c000edf0:	56                   	push   esi
c000edf1:	53                   	push   ebx
c000edf2:	83 ec 14             	sub    esp,0x14
c000edf5:	8b 35 9c cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd9c
c000edfb:	89 f3                	mov    ebx,esi
c000edfd:	eb 0a                	jmp    c000ee09 <Phys::allocatePage()+0x19>
c000edff:	89 1d 9c cd 02 c0    	mov    DWORD PTR ds:0xc002cd9c,ebx
c000ee05:	39 de                	cmp    esi,ebx
c000ee07:	74 26                	je     c000ee2f <Phys::allocatePage()+0x3f>
c000ee09:	53                   	push   ebx
c000ee0a:	e8 5c ff ff ff       	call   c000ed6b <Phys::getPageState(unsigned long)>
c000ee0f:	59                   	pop    ecx
c000ee10:	84 c0                	test   al,al
c000ee12:	74 67                	je     c000ee7b <Phys::allocatePage()+0x8b>
c000ee14:	83 c3 01             	add    ebx,0x1
c000ee17:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ee1d:	75 e0                	jne    c000edff <Phys::allocatePage()+0xf>
c000ee1f:	c7 05 9c cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd9c,0x0
c000ee29:	31 db                	xor    ebx,ebx
c000ee2b:	39 de                	cmp    esi,ebx
c000ee2d:	75 da                	jne    c000ee09 <Phys::allocatePage()+0x19>
c000ee2f:	a0 c0 cd 02 c0       	mov    al,ds:0xc002cdc0
c000ee34:	83 ec 0c             	sub    esp,0xc
c000ee37:	83 f0 01             	xor    eax,0x1
c000ee3a:	a2 c0 cd 02 c0       	mov    ds:0xc002cdc0,al
c000ee3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee47:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000ee4d:	51                   	push   ecx
c000ee4e:	e8 59 42 00 00       	call   c00130ac <VAS::scanForEviction()>
c000ee53:	83 c4 10             	add    esp,0x10
c000ee56:	85 c0                	test   eax,eax
c000ee58:	75 48                	jne    c000eea2 <Phys::allocatePage()+0xb2>
c000ee5a:	83 ec 0c             	sub    esp,0xc
c000ee5d:	68 ec 25 02 c0       	push   0xc00225ec
c000ee62:	e8 8f fd ff ff       	call   c000ebf6 <KePanic(char const*)>
c000ee67:	8b 1d 9c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd9c
c000ee6d:	83 c4 10             	add    esp,0x10
c000ee70:	53                   	push   ebx
c000ee71:	e8 f5 fe ff ff       	call   c000ed6b <Phys::getPageState(unsigned long)>
c000ee76:	59                   	pop    ecx
c000ee77:	84 c0                	test   al,al
c000ee79:	75 99                	jne    c000ee14 <Phys::allocatePage()+0x24>
c000ee7b:	6a 01                	push   0x1
c000ee7d:	53                   	push   ebx
c000ee7e:	e8 a8 fe ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000ee83:	8b 1d a8 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cda8
c000ee89:	5e                   	pop    esi
c000ee8a:	a1 9c cd 02 c0       	mov    eax,ds:0xc002cd9c
c000ee8f:	5a                   	pop    edx
c000ee90:	83 c3 01             	add    ebx,0x1
c000ee93:	89 1d a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,ebx
c000ee99:	c1 e0 0c             	shl    eax,0xc
c000ee9c:	83 c4 14             	add    esp,0x14
c000ee9f:	5b                   	pop    ebx
c000eea0:	5e                   	pop    esi
c000eea1:	c3                   	ret    
c000eea2:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000eea8:	83 ec 08             	sub    esp,0x8
c000eeab:	6a 01                	push   0x1
c000eead:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eeb1:	83 c2 01             	add    edx,0x1
c000eeb4:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000eeba:	89 c2                	mov    edx,eax
c000eebc:	c1 ea 0c             	shr    edx,0xc
c000eebf:	52                   	push   edx
c000eec0:	e8 66 fe ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000eec5:	83 c4 10             	add    esp,0x10
c000eec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eecc:	eb ce                	jmp    c000ee9c <Phys::allocatePage()+0xac>

c000eece <Phys::allocateContiguousPages(int)>:
c000eece:	57                   	push   edi
c000eecf:	56                   	push   esi
c000eed0:	53                   	push   ebx
c000eed1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000eed5:	fa                   	cli    
c000eed6:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c000eedc:	83 ec 0c             	sub    esp,0xc
c000eedf:	31 db                	xor    ebx,ebx
c000eee1:	68 1c 26 02 c0       	push   0xc002261c
c000eee6:	83 c2 01             	add    edx,0x1
c000eee9:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c000eeef:	e8 5a 80 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eef4:	83 c4 10             	add    esp,0x10
c000eef7:	85 db                	test   ebx,ebx
c000eef9:	75 11                	jne    c000ef0c <Phys::allocateContiguousPages(int)+0x3e>
c000eefb:	e8 f0 fe ff ff       	call   c000edf0 <Phys::allocatePage()>
c000ef00:	83 ff 01             	cmp    edi,0x1
c000ef03:	89 c6                	mov    esi,eax
c000ef05:	74 21                	je     c000ef28 <Phys::allocateContiguousPages(int)+0x5a>
c000ef07:	bb 01 00 00 00       	mov    ebx,0x1
c000ef0c:	e8 df fe ff ff       	call   c000edf0 <Phys::allocatePage()>
c000ef11:	89 da                	mov    edx,ebx
c000ef13:	c1 e2 0c             	shl    edx,0xc
c000ef16:	01 f2                	add    edx,esi
c000ef18:	39 c2                	cmp    edx,eax
c000ef1a:	74 24                	je     c000ef40 <Phys::allocateContiguousPages(int)+0x72>
c000ef1c:	83 ff 01             	cmp    edi,0x1
c000ef1f:	bb 01 00 00 00       	mov    ebx,0x1
c000ef24:	89 c6                	mov    esi,eax
c000ef26:	75 e4                	jne    c000ef0c <Phys::allocateContiguousPages(int)+0x3e>
c000ef28:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ef30:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ef35:	85 c0                	test   eax,eax
c000ef37:	75 01                	jne    c000ef3a <Phys::allocateContiguousPages(int)+0x6c>
c000ef39:	fb                   	sti    
c000ef3a:	5b                   	pop    ebx
c000ef3b:	89 f0                	mov    eax,esi
c000ef3d:	5e                   	pop    esi
c000ef3e:	5f                   	pop    edi
c000ef3f:	c3                   	ret    
c000ef40:	83 c3 01             	add    ebx,0x1
c000ef43:	39 fb                	cmp    ebx,edi
c000ef45:	75 b0                	jne    c000eef7 <Phys::allocateContiguousPages(int)+0x29>
c000ef47:	eb df                	jmp    c000ef28 <Phys::allocateContiguousPages(int)+0x5a>

c000ef49 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ef49:	56                   	push   esi
c000ef4a:	53                   	push   ebx
c000ef4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef4f:	39 1d a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,ebx
c000ef55:	73 06                	jae    c000ef5d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ef57:	89 1d a0 cd 02 c0    	mov    DWORD PTR ds:0xc002cda0,ebx
c000ef5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef61:	c1 eb 0c             	shr    ebx,0xc
c000ef64:	c1 e8 0c             	shr    eax,0xc
c000ef67:	39 d8                	cmp    eax,ebx
c000ef69:	73 13                	jae    c000ef7e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ef6b:	6a 00                	push   0x0
c000ef6d:	50                   	push   eax
c000ef6e:	8d 70 01             	lea    esi,[eax+0x1]
c000ef71:	e8 b5 fd ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000ef76:	39 f3                	cmp    ebx,esi
c000ef78:	89 f0                	mov    eax,esi
c000ef7a:	5a                   	pop    edx
c000ef7b:	59                   	pop    ecx
c000ef7c:	75 ed                	jne    c000ef6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ef7e:	5b                   	pop    ebx
c000ef7f:	5e                   	pop    esi
c000ef80:	c3                   	ret    

c000ef81 <Phys::physicalMemorySetup(unsigned int)>:
c000ef81:	55                   	push   ebp
c000ef82:	57                   	push   edi
c000ef83:	56                   	push   esi
c000ef84:	53                   	push   ebx
c000ef85:	31 db                	xor    ebx,ebx
c000ef87:	83 ec 40             	sub    esp,0x40
c000ef8a:	6a 10                	push   0x10
c000ef8c:	6a 00                	push   0x0
c000ef8e:	68 b0 cd 02 c0       	push   0xc002cdb0
c000ef93:	e8 58 15 ff ff       	call   c00004f0 <memset>
c000ef98:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000efa1:	05 00 10 00 00       	add    eax,0x1000
c000efa6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efaa:	5a                   	pop    edx
c000efab:	59                   	pop    ecx
c000efac:	50                   	push   eax
c000efad:	68 df 26 02 c0       	push   0xc00226df
c000efb2:	e8 97 7f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000efb7:	83 c4 10             	add    esp,0x10
c000efba:	83 ec 08             	sub    esp,0x8
c000efbd:	6a 01                	push   0x1
c000efbf:	53                   	push   ebx
c000efc0:	83 c3 01             	add    ebx,0x1
c000efc3:	e8 63 fd ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000efd1:	75 e7                	jne    c000efba <Phys::physicalMemorySetup(unsigned int)+0x39>
c000efd3:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000efda:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000efe1:	c1 e0 08             	shl    eax,0x8
c000efe4:	09 c2                	or     edx,eax
c000efe6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000efea:	0f 84 43 01 00 00    	je     c000f133 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000eff0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000eff8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000effd:	e9 82 00 00 00       	jmp    c000f084 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f002:	ba 00 00 08 00       	mov    edx,0x80000
c000f007:	89 c1                	mov    ecx,eax
c000f009:	39 f2                	cmp    edx,esi
c000f00b:	19 f9                	sbb    ecx,edi
c000f00d:	0f 82 c0 00 00 00    	jb     c000f0d3 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f013:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f017:	89 c5                	mov    ebp,eax
c000f019:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f01d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f021:	19 cd                	sbb    ebp,ecx
c000f023:	0f 83 af 00 00 00    	jae    c000f0d8 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f029:	89 d6                	mov    esi,edx
c000f02b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f030:	39 f2                	cmp    edx,esi
c000f032:	89 cf                	mov    edi,ecx
c000f034:	19 c8                	sbb    eax,ecx
c000f036:	73 07                	jae    c000f03f <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f038:	be 00 00 0a 00       	mov    esi,0xa0000
c000f03d:	31 ff                	xor    edi,edi
c000f03f:	89 f2                	mov    edx,esi
c000f041:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f046:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f04c:	89 f9                	mov    ecx,edi
c000f04e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f052:	83 d1 ff             	adc    ecx,0xffffffff
c000f055:	39 d0                	cmp    eax,edx
c000f057:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f05b:	b8 00 00 00 00       	mov    eax,0x0
c000f060:	19 c8                	sbb    eax,ecx
c000f062:	0f 82 9d 01 00 00    	jb     c000f205 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f068:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f06c:	83 c3 18             	add    ebx,0x18
c000f06f:	83 c6 01             	add    esi,0x1
c000f072:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f076:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f07a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f07e:	0f 84 bf 00 00 00    	je     c000f143 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f084:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f086:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f089:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f08c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f08f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f093:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f096:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f09a:	01 f0                	add    eax,esi
c000f09c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f0a4:	55                   	push   ebp
c000f0a5:	11 fa                	adc    edx,edi
c000f0a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0b3:	50                   	push   eax
c000f0b4:	56                   	push   esi
c000f0b5:	68 7c 26 02 c0       	push   0xc002267c
c000f0ba:	e8 8f 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0c3:	83 c4 10             	add    esp,0x10
c000f0c6:	09 f8                	or     eax,edi
c000f0c8:	75 79                	jne    c000f143 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f0ca:	83 fd 01             	cmp    ebp,0x1
c000f0cd:	0f 84 2f ff ff ff    	je     c000f002 <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f0d3:	83 fd 01             	cmp    ebp,0x1
c000f0d6:	75 90                	jne    c000f068 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0d8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0dc:	31 d2                	xor    edx,edx
c000f0de:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f0e2:	89 c8                	mov    eax,ecx
c000f0e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0e8:	19 d1                	sbb    ecx,edx
c000f0ea:	0f 82 78 ff ff ff    	jb     c000f068 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0f0:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f0f5:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f0f9:	b9 00 00 00 00       	mov    ecx,0x0
c000f0fe:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f102:	0f 83 60 ff ff ff    	jae    c000f068 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f108:	39 c6                	cmp    esi,eax
c000f10a:	19 d7                	sbb    edi,edx
c000f10c:	0f 83 ff 00 00 00    	jae    c000f211 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f112:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f116:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f11a:	29 c7                	sub    edi,eax
c000f11c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f120:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f124:	19 d5                	sbb    ebp,edx
c000f126:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f12a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f12e:	e9 de 00 00 00       	jmp    c000f211 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f133:	83 ec 0c             	sub    esp,0xc
c000f136:	68 f7 26 02 c0       	push   0xc00226f7
c000f13b:	e8 b6 fa ff ff       	call   c000ebf6 <KePanic(char const*)>
c000f140:	83 c4 10             	add    esp,0x10
c000f143:	83 ec 08             	sub    esp,0x8
c000f146:	bb 60 00 00 00       	mov    ebx,0x60
c000f14b:	6a 00                	push   0x0
c000f14d:	6a 06                	push   0x6
c000f14f:	e8 d7 fb ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000f154:	58                   	pop    eax
c000f155:	5a                   	pop    edx
c000f156:	6a 00                	push   0x0
c000f158:	6a 07                	push   0x7
c000f15a:	e8 cc fb ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000f15f:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c000f165:	83 c4 10             	add    esp,0x10
c000f168:	83 c1 02             	add    ecx,0x2
c000f16b:	89 0d ac cd 02 c0    	mov    DWORD PTR ds:0xc002cdac,ecx
c000f171:	83 ec 08             	sub    esp,0x8
c000f174:	6a 00                	push   0x0
c000f176:	53                   	push   ebx
c000f177:	83 c3 01             	add    ebx,0x1
c000f17a:	e8 ac fb ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000f17f:	83 c4 10             	add    esp,0x10
c000f182:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f188:	75 e7                	jne    c000f171 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f18a:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f18f:	bb 40 01 00 00       	mov    ebx,0x140
c000f194:	83 c0 20             	add    eax,0x20
c000f197:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f19c:	eb 26                	jmp    c000f1c4 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f19e:	83 ec 08             	sub    esp,0x8
c000f1a1:	6a 00                	push   0x0
c000f1a3:	53                   	push   ebx
c000f1a4:	83 c3 01             	add    ebx,0x1
c000f1a7:	e8 7f fb ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000f1ac:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f1b1:	83 c4 10             	add    esp,0x10
c000f1b4:	83 c0 01             	add    eax,0x1
c000f1b7:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f1bd:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f1c2:	74 07                	je     c000f1cb <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f1c4:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f1c9:	7e d3                	jle    c000f19e <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f1cb:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f1d0:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f1d5:	7f 26                	jg     c000f1fd <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f1d7:	83 ec 08             	sub    esp,0x8
c000f1da:	6a 00                	push   0x0
c000f1dc:	53                   	push   ebx
c000f1dd:	83 c3 01             	add    ebx,0x1
c000f1e0:	e8 46 fb ff ff       	call   c000ed2b <Phys::setPageState(unsigned long, bool)>
c000f1e5:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f1ea:	83 c4 10             	add    esp,0x10
c000f1ed:	83 c0 01             	add    eax,0x1
c000f1f0:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f1f6:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f1fb:	75 d3                	jne    c000f1d0 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f1fd:	83 c4 3c             	add    esp,0x3c
c000f200:	5b                   	pop    ebx
c000f201:	5e                   	pop    esi
c000f202:	5f                   	pop    edi
c000f203:	5d                   	pop    ebp
c000f204:	c3                   	ret    
c000f205:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f209:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f211:	83 ec 04             	sub    esp,0x4
c000f214:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f218:	56                   	push   esi
c000f219:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f21d:	57                   	push   edi
c000f21e:	68 a0 26 02 c0       	push   0xc00226a0
c000f223:	e8 26 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f228:	5d                   	pop    ebp
c000f229:	58                   	pop    eax
c000f22a:	56                   	push   esi
c000f22b:	57                   	push   edi
c000f22c:	e8 18 fd ff ff       	call   c000ef49 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f231:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f235:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f239:	83 c4 0c             	add    esp,0xc
c000f23c:	8b 35 ac cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cdac
c000f242:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f246:	01 f0                	add    eax,esi
c000f248:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f24d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f254:	52                   	push   edx
c000f255:	50                   	push   eax
c000f256:	68 05 27 02 c0       	push   0xc0022705
c000f25b:	e8 ee 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f260:	83 c4 10             	add    esp,0x10
c000f263:	e9 00 fe ff ff       	jmp    c000f068 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000f268 <Pipe::isAtty()>:
c000f268:	31 c0                	xor    eax,eax
c000f26a:	c3                   	ret    
c000f26b:	90                   	nop

c000f26c <Pipe::~Pipe()>:
c000f26c:	83 ec 0c             	sub    esp,0xc
c000f26f:	ba 64 27 02 c0       	mov    edx,0xc0022764
c000f274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f278:	89 10                	mov    DWORD PTR [eax],edx
c000f27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27e:	83 ec 0c             	sub    esp,0xc
c000f281:	50                   	push   eax
c000f282:	e8 c3 2a 00 00       	call   c0011d4a <UnixFile::~UnixFile()>
c000f287:	83 c4 10             	add    esp,0x10
c000f28a:	90                   	nop
c000f28b:	83 c4 0c             	add    esp,0xc
c000f28e:	c3                   	ret    
c000f28f:	90                   	nop

c000f290 <Pipe::~Pipe()>:
c000f290:	83 ec 0c             	sub    esp,0xc
c000f293:	83 ec 0c             	sub    esp,0xc
c000f296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f29a:	e8 cd ff ff ff       	call   c000f26c <Pipe::~Pipe()>
c000f29f:	83 c4 10             	add    esp,0x10
c000f2a2:	83 ec 08             	sub    esp,0x8
c000f2a5:	6a 20                	push   0x20
c000f2a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2ab:	e8 6b d3 ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c000f2b0:	83 c4 10             	add    esp,0x10
c000f2b3:	83 c4 0c             	add    esp,0xc
c000f2b6:	c3                   	ret    
c000f2b7:	90                   	nop

c000f2b8 <Pipe::write(unsigned long long, void*, int*)>:
c000f2b8:	55                   	push   ebp
c000f2b9:	57                   	push   edi
c000f2ba:	56                   	push   esi
c000f2bb:	53                   	push   ebx
c000f2bc:	83 ec 1c             	sub    esp,0x1c
c000f2bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f2c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f2cb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f2ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2d2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f2d5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f2dc:	89 d8                	mov    eax,ebx
c000f2de:	89 d6                	mov    esi,edx
c000f2e0:	89 d7                	mov    edi,edx
c000f2e2:	c1 ff 1f             	sar    edi,0x1f
c000f2e5:	03 34 24             	add    esi,DWORD PTR [esp]
c000f2e8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f2ec:	c1 f8 1f             	sar    eax,0x1f
c000f2ef:	39 f3                	cmp    ebx,esi
c000f2f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2f9:	19 f8                	sbb    eax,edi
c000f2fb:	b8 01 00 00 00       	mov    eax,0x1
c000f300:	72 72                	jb     c000f374 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f302:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f305:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f309:	01 d0                	add    eax,edx
c000f30b:	99                   	cdq    
c000f30c:	f7 fb                	idiv   ebx
c000f30e:	89 d8                	mov    eax,ebx
c000f310:	29 d0                	sub    eax,edx
c000f312:	89 d6                	mov    esi,edx
c000f314:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f317:	89 c3                	mov    ebx,eax
c000f319:	c1 fb 1f             	sar    ebx,0x1f
c000f31c:	39 c2                	cmp    edx,eax
c000f31e:	19 df                	sbb    edi,ebx
c000f320:	bb 00 00 00 00       	mov    ebx,0x0
c000f325:	72 04                	jb     c000f32b <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f327:	89 d3                	mov    ebx,edx
c000f329:	29 c3                	sub    ebx,eax
c000f32b:	89 d0                	mov    eax,edx
c000f32d:	29 d8                	sub    eax,ebx
c000f32f:	74 0d                	je     c000f33e <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f331:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f334:	89 c1                	mov    ecx,eax
c000f336:	01 f7                	add    edi,esi
c000f338:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f33c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f33e:	85 db                	test   ebx,ebx
c000f340:	74 0d                	je     c000f34f <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f342:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f346:	89 d9                	mov    ecx,ebx
c000f348:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f34b:	89 c6                	mov    esi,eax
c000f34d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f34f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f352:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f357:	75 10                	jne    c000f369 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f359:	83 ec 0c             	sub    esp,0xc
c000f35c:	68 21 27 02 c0       	push   0xc0022721
c000f361:	e8 90 f8 ff ff       	call   c000ebf6 <KePanic(char const*)>
c000f366:	83 c4 10             	add    esp,0x10
c000f369:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f36d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f370:	89 08                	mov    DWORD PTR [eax],ecx
c000f372:	31 c0                	xor    eax,eax
c000f374:	83 c4 1c             	add    esp,0x1c
c000f377:	5b                   	pop    ebx
c000f378:	5e                   	pop    esi
c000f379:	5f                   	pop    edi
c000f37a:	5d                   	pop    ebp
c000f37b:	c3                   	ret    

c000f37c <Pipe::read(unsigned long long, void*, int*)>:
c000f37c:	55                   	push   ebp
c000f37d:	57                   	push   edi
c000f37e:	56                   	push   esi
c000f37f:	53                   	push   ebx
c000f380:	83 ec 1c             	sub    esp,0x1c
c000f383:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f387:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f38b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f38f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f392:	89 c8                	mov    eax,ecx
c000f394:	99                   	cdq    
c000f395:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f399:	74 27                	je     c000f3c2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f39b:	39 f9                	cmp    ecx,edi
c000f39d:	89 d1                	mov    ecx,edx
c000f39f:	19 f1                	sbb    ecx,esi
c000f3a1:	73 1f                	jae    c000f3c2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f3a3:	fa                   	cli    
c000f3a4:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000f3aa:	e8 99 62 00 00       	call   c0015648 <schedule()>
c000f3af:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f3b6:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f3bd:	75 d0                	jne    c000f38f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3bf:	fb                   	sti    
c000f3c0:	eb cd                	jmp    c000f38f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3c2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f3c6:	39 f8                	cmp    eax,edi
c000f3c8:	89 d1                	mov    ecx,edx
c000f3ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f3ce:	19 f1                	sbb    ecx,esi
c000f3d0:	73 08                	jae    c000f3da <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000f3d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3da:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f3dd:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f3e0:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f3e4:	29 f7                	sub    edi,esi
c000f3e6:	89 f8                	mov    eax,edi
c000f3e8:	99                   	cdq    
c000f3e9:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f3ed:	89 d0                	mov    eax,edx
c000f3ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f3f3:	19 c2                	sbb    edx,eax
c000f3f5:	89 f8                	mov    eax,edi
c000f3f7:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f3fc:	89 ea                	mov    edx,ebp
c000f3fe:	29 c2                	sub    edx,eax
c000f400:	85 c0                	test   eax,eax
c000f402:	74 0b                	je     c000f40f <Pipe::read(unsigned long long, void*, int*)+0x93>
c000f404:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f407:	89 c1                	mov    ecx,eax
c000f409:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f40d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f40f:	85 d2                	test   edx,edx
c000f411:	74 0d                	je     c000f420 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000f413:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f417:	89 d1                	mov    ecx,edx
c000f419:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f41c:	89 c7                	mov    edi,eax
c000f41e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f420:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f423:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f426:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f429:	99                   	cdq    
c000f42a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f42e:	89 f7                	mov    edi,esi
c000f430:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f434:	c1 ff 1f             	sar    edi,0x1f
c000f437:	57                   	push   edi
c000f438:	56                   	push   esi
c000f439:	52                   	push   edx
c000f43a:	50                   	push   eax
c000f43b:	e8 94 0c 01 00       	call   c00200d4 <__umoddi3>
c000f440:	83 c4 10             	add    esp,0x10
c000f443:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f448:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f44b:	75 10                	jne    c000f45d <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000f44d:	83 ec 0c             	sub    esp,0xc
c000f450:	68 3e 27 02 c0       	push   0xc002273e
c000f455:	e8 9c f7 ff ff       	call   c000ebf6 <KePanic(char const*)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f465:	89 10                	mov    DWORD PTR [eax],edx
c000f467:	83 c4 1c             	add    esp,0x1c
c000f46a:	31 c0                	xor    eax,eax
c000f46c:	5b                   	pop    ebx
c000f46d:	5e                   	pop    esi
c000f46e:	5f                   	pop    edi
c000f46f:	5d                   	pop    ebp
c000f470:	c3                   	ret    
c000f471:	90                   	nop

c000f472 <Pipe::Pipe(int)>:
c000f472:	83 ec 0c             	sub    esp,0xc
c000f475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f479:	83 ec 08             	sub    esp,0x8
c000f47c:	6a 00                	push   0x0
c000f47e:	50                   	push   eax
c000f47f:	e8 e0 26 00 00       	call   c0011b64 <UnixFile::UnixFile(int)>
c000f484:	83 c4 10             	add    esp,0x10
c000f487:	ba 64 27 02 c0       	mov    edx,0xc0022764
c000f48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f490:	89 10                	mov    DWORD PTR [eax],edx
c000f492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f496:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f49a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ac:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f4b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4b7:	83 ec 0c             	sub    esp,0xc
c000f4ba:	50                   	push   eax
c000f4bb:	e8 f0 f3 ff ff       	call   c000e8b0 <malloc>
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	89 c2                	mov    edx,eax
c000f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f4d4:	90                   	nop
c000f4d5:	83 c4 0c             	add    esp,0xc
c000f4d8:	c3                   	ret    

c000f4d9 <KePowerThread(void*)>:
c000f4d9:	83 ec 0c             	sub    esp,0xc
c000f4dc:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f4e3:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f4ea:	75 01                	jne    c000f4ed <KePowerThread(void*)+0x14>
c000f4ec:	fb                   	sti    
c000f4ed:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f4f4:	83 ec 0c             	sub    esp,0xc
c000f4f7:	6a 0a                	push   0xa
c000f4f9:	e8 56 63 00 00       	call   c0015854 <sleep(unsigned int)>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	83 05 24 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce24,0xa
c000f508:	eb e3                	jmp    c000f4ed <KePowerThread(void*)+0x14>

c000f50a <KeChangePowerSettings(PowerSettings)>:
c000f50a:	57                   	push   edi
c000f50b:	b9 09 00 00 00       	mov    ecx,0x9
c000f510:	56                   	push   esi
c000f511:	bf 00 ce 02 c0       	mov    edi,0xc002ce00
c000f516:	fc                   	cld    
c000f517:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f51b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f51d:	5e                   	pop    esi
c000f51e:	5f                   	pop    edi
c000f51f:	c3                   	ret    

c000f520 <KeUserIOReceived()>:
c000f520:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f52a:	c3                   	ret    

c000f52b <KeHandlePowerButton()>:
c000f52b:	a1 00 ce 02 c0       	mov    eax,ds:0xc002ce00
c000f530:	83 f8 02             	cmp    eax,0x2
c000f533:	75 05                	jne    c000f53a <KeHandlePowerButton()+0xf>
c000f535:	e9 1a e1 ff ff       	jmp    c000d654 <KeShutdown()>
c000f53a:	48                   	dec    eax
c000f53b:	75 05                	jne    c000f542 <KeHandlePowerButton()+0x17>
c000f53d:	e9 36 e1 ff ff       	jmp    c000d678 <KeSleep()>
c000f542:	c3                   	ret    

c000f543 <KeHandleSleepButton()>:
c000f543:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c000f548:	83 f8 02             	cmp    eax,0x2
c000f54b:	75 05                	jne    c000f552 <KeHandleSleepButton()+0xf>
c000f54d:	e9 02 e1 ff ff       	jmp    c000d654 <KeShutdown()>
c000f552:	48                   	dec    eax
c000f553:	75 05                	jne    c000f55a <KeHandleSleepButton()+0x17>
c000f555:	e9 1e e1 ff ff       	jmp    c000d678 <KeSleep()>
c000f55a:	c3                   	ret    

c000f55b <KeSetupPowerManager()>:
c000f55b:	83 ec 0c             	sub    esp,0xc
c000f55e:	68 f0 00 00 00       	push   0xf0
c000f563:	6a 00                	push   0x0
c000f565:	68 d9 f4 00 c0       	push   0xc000f4d9
c000f56a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000f570:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f57a:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f581:	e8 76 5e 00 00       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c000f586:	c7 05 00 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce00,0x2
c000f590:	c7 05 04 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce04,0x1
c000f59a:	c7 05 08 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce08,0x3
c000f5a4:	c7 05 0c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce0c,0x0
c000f5ae:	c7 05 18 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce18,0x0
c000f5b8:	c7 05 10 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce10,0x0
c000f5c2:	c7 05 1c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce1c,0x0
c000f5cc:	c7 05 14 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x3c
c000f5d6:	c7 05 20 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x3c
c000f5e0:	83 c4 1c             	add    esp,0x1c
c000f5e3:	c3                   	ret    

c000f5e4 <KeRand()>:
c000f5e4:	69 05 28 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce28,0x2875
c000f5ee:	69 0d 2c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce2c,0xa2e7b175
c000f5f8:	53                   	push   ebx
c000f5f9:	01 c1                	add    ecx,eax
c000f5fb:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f600:	f7 25 28 ce 02 c0    	mul    DWORD PTR ds:0xc002ce28
c000f606:	01 ca                	add    edx,ecx
c000f608:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f60d:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f612:	83 d2 00             	adc    edx,0x0
c000f615:	0f b7 da             	movzx  ebx,dx
c000f618:	89 1d 2c ce 02 c0    	mov    DWORD PTR ds:0xc002ce2c,ebx
c000f61e:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f622:	5b                   	pop    ebx
c000f623:	c3                   	ret    

c000f624 <KeSeedRand(unsigned int)>:
c000f624:	53                   	push   ebx
c000f625:	83 ec 08             	sub    esp,0x8
c000f628:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f62c:	e8 aa 92 00 00       	call   c00188db <HalGetRand()>
c000f631:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c000f63b:	31 d8                	xor    eax,ebx
c000f63d:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f642:	e8 9d ff ff ff       	call   c000f5e4 <KeRand()>
c000f647:	83 c4 08             	add    esp,0x8
c000f64a:	5b                   	pop    ebx
c000f64b:	eb 97                	jmp    c000f5e4 <KeRand()>

c000f64d <KeInitRand()>:
c000f64d:	83 ec 0c             	sub    esp,0xc
c000f650:	e8 aa 90 00 00       	call   c00186ff <HalQueryPerformanceCounter()>
c000f655:	0f 20 da             	mov    edx,cr3
c000f658:	0f 22 da             	mov    cr3,edx
c000f65b:	0f 20 da             	mov    edx,cr3
c000f65e:	0f 22 da             	mov    cr3,edx
c000f661:	0f 20 da             	mov    edx,cr3
c000f664:	0f 22 da             	mov    cr3,edx
c000f667:	0f 20 da             	mov    edx,cr3
c000f66a:	0f 22 da             	mov    cr3,edx
c000f66d:	83 ec 0c             	sub    esp,0xc
c000f670:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f675:	50                   	push   eax
c000f676:	e8 a9 ff ff ff       	call   c000f624 <KeSeedRand(unsigned int)>
c000f67b:	83 c4 1c             	add    esp,0x1c
c000f67e:	c3                   	ret    
c000f67f:	90                   	nop

c000f680 <KeResolveCompatibilitySymbol(char*)>:
c000f680:	83 ec 0c             	sub    esp,0xc
c000f683:	83 ec 08             	sub    esp,0x8
c000f686:	68 78 27 02 c0       	push   0xc0022778
c000f68b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f68f:	e8 ec 10 ff ff       	call   c0000780 <strcmp>
c000f694:	83 c4 10             	add    esp,0x10
c000f697:	85 c0                	test   eax,eax
c000f699:	0f 94 c0             	sete   al
c000f69c:	0f b6 c0             	movzx  eax,al
c000f69f:	85 c0                	test   eax,eax
c000f6a1:	74 0d                	je     c000f6b0 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f6a3:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c000f6a8:	e9 8b 01 00 00       	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f6b0:	83 ec 08             	sub    esp,0x8
c000f6b3:	68 81 27 02 c0       	push   0xc0022781
c000f6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6bc:	e8 bf 10 ff ff       	call   c0000780 <strcmp>
c000f6c1:	83 c4 10             	add    esp,0x10
c000f6c4:	85 c0                	test   eax,eax
c000f6c6:	0f 94 c0             	sete   al
c000f6c9:	0f b6 c0             	movzx  eax,al
c000f6cc:	85 c0                	test   eax,eax
c000f6ce:	74 0c                	je     c000f6dc <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f6d0:	b8 d4 ff 01 c0       	mov    eax,0xc001ffd4
c000f6d5:	e9 5e 01 00 00       	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6da:	66 90                	xchg   ax,ax
c000f6dc:	83 ec 08             	sub    esp,0x8
c000f6df:	68 8b 27 02 c0       	push   0xc002278b
c000f6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6e8:	e8 93 10 ff ff       	call   c0000780 <strcmp>
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	85 c0                	test   eax,eax
c000f6f2:	0f 94 c0             	sete   al
c000f6f5:	0f b6 c0             	movzx  eax,al
c000f6f8:	85 c0                	test   eax,eax
c000f6fa:	74 0c                	je     c000f708 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f6fc:	b8 08 fd 01 c0       	mov    eax,0xc001fd08
c000f701:	e9 32 01 00 00       	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f706:	66 90                	xchg   ax,ax
c000f708:	83 ec 08             	sub    esp,0x8
c000f70b:	68 94 27 02 c0       	push   0xc0022794
c000f710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f714:	e8 67 10 ff ff       	call   c0000780 <strcmp>
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	85 c0                	test   eax,eax
c000f71e:	0f 94 c0             	sete   al
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	85 c0                	test   eax,eax
c000f726:	74 0c                	je     c000f734 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f728:	b8 f6 eb 00 c0       	mov    eax,0xc000ebf6
c000f72d:	e9 06 01 00 00       	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f732:	66 90                	xchg   ax,ax
c000f734:	83 ec 08             	sub    esp,0x8
c000f737:	68 a7 27 02 c0       	push   0xc00227a7
c000f73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f740:	e8 3b 10 ff ff       	call   c0000780 <strcmp>
c000f745:	83 c4 10             	add    esp,0x10
c000f748:	85 c0                	test   eax,eax
c000f74a:	0f 94 c0             	sete   al
c000f74d:	0f b6 c0             	movzx  eax,al
c000f750:	85 c0                	test   eax,eax
c000f752:	74 0c                	je     c000f760 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f754:	b8 5b c5 00 c0       	mov    eax,0xc000c55b
c000f759:	e9 da 00 00 00       	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f75e:	66 90                	xchg   ax,ax
c000f760:	83 ec 08             	sub    esp,0x8
c000f763:	68 c4 27 02 c0       	push   0xc00227c4
c000f768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f76c:	e8 0f 10 ff ff       	call   c0000780 <strcmp>
c000f771:	83 c4 10             	add    esp,0x10
c000f774:	85 c0                	test   eax,eax
c000f776:	0f 94 c0             	sete   al
c000f779:	0f b6 c0             	movzx  eax,al
c000f77c:	85 c0                	test   eax,eax
c000f77e:	74 0c                	je     c000f78c <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f780:	b8 d4 00 02 c0       	mov    eax,0xc00200d4
c000f785:	e9 ae 00 00 00       	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f78a:	66 90                	xchg   ax,ax
c000f78c:	83 ec 08             	sub    esp,0x8
c000f78f:	68 ce 27 02 c0       	push   0xc00227ce
c000f794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f798:	e8 e3 0f ff ff       	call   c0000780 <strcmp>
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	85 c0                	test   eax,eax
c000f7a2:	0f 94 c0             	sete   al
c000f7a5:	0f b6 c0             	movzx  eax,al
c000f7a8:	85 c0                	test   eax,eax
c000f7aa:	74 0c                	je     c000f7b8 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f7ac:	b8 54 fe 01 c0       	mov    eax,0xc001fe54
c000f7b1:	e9 82 00 00 00       	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7b6:	66 90                	xchg   ax,ax
c000f7b8:	83 ec 08             	sub    esp,0x8
c000f7bb:	68 d7 27 02 c0       	push   0xc00227d7
c000f7c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7c4:	e8 b7 0f ff ff       	call   c0000780 <strcmp>
c000f7c9:	83 c4 10             	add    esp,0x10
c000f7cc:	85 c0                	test   eax,eax
c000f7ce:	0f 94 c0             	sete   al
c000f7d1:	0f b6 c0             	movzx  eax,al
c000f7d4:	85 c0                	test   eax,eax
c000f7d6:	74 08                	je     c000f7e0 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f7d8:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f7dd:	eb 59                	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7df:	90                   	nop
c000f7e0:	83 ec 08             	sub    esp,0x8
c000f7e3:	68 ef 27 02 c0       	push   0xc00227ef
c000f7e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7ec:	e8 8f 0f ff ff       	call   c0000780 <strcmp>
c000f7f1:	83 c4 10             	add    esp,0x10
c000f7f4:	85 c0                	test   eax,eax
c000f7f6:	0f 94 c0             	sete   al
c000f7f9:	0f b6 c0             	movzx  eax,al
c000f7fc:	85 c0                	test   eax,eax
c000f7fe:	74 08                	je     c000f808 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f800:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f805:	eb 31                	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f807:	90                   	nop
c000f808:	83 ec 08             	sub    esp,0x8
c000f80b:	68 fc 27 02 c0       	push   0xc00227fc
c000f810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f814:	e8 67 0f ff ff       	call   c0000780 <strcmp>
c000f819:	83 c4 10             	add    esp,0x10
c000f81c:	85 c0                	test   eax,eax
c000f81e:	0f 94 c0             	sete   al
c000f821:	0f b6 c0             	movzx  eax,al
c000f824:	85 c0                	test   eax,eax
c000f826:	74 08                	je     c000f830 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f828:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c000f82d:	eb 09                	jmp    c000f838 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f82f:	90                   	nop
c000f830:	b8 00 00 00 00       	mov    eax,0x0
c000f835:	8d 76 00             	lea    esi,[esi+0x0]
c000f838:	83 c4 0c             	add    esp,0xc
c000f83b:	c3                   	ret    

c000f83c <Semaphore::Semaphore(int)>:
c000f83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f840:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f844:	89 10                	mov    DWORD PTR [eax],edx
c000f846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f84a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f855:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f860:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f867:	90                   	nop
c000f868:	c3                   	ret    
c000f869:	90                   	nop
c000f86a:	66 90                	xchg   ax,ax

c000f86c <Semaphore::tryAcquire()>:
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	fa                   	cli    
c000f870:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f875:	83 c0 01             	add    eax,0x1
c000f878:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000f87d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f882:	83 c0 01             	add    eax,0x1
c000f885:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	8b 00                	mov    eax,DWORD PTR [eax]
c000f897:	39 c2                	cmp    edx,eax
c000f899:	7d 59                	jge    c000f8f4 <Semaphore::tryAcquire()+0x88>
c000f89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f8ac:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f8b1:	83 e8 01             	sub    eax,0x1
c000f8b4:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f8b9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f8be:	85 c0                	test   eax,eax
c000f8c0:	75 1a                	jne    c000f8dc <Semaphore::tryAcquire()+0x70>
c000f8c2:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000f8c7:	85 c0                	test   eax,eax
c000f8c9:	74 11                	je     c000f8dc <Semaphore::tryAcquire()+0x70>
c000f8cb:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000f8d5:	e8 6e 5d 00 00       	call   c0015648 <schedule()>
c000f8da:	66 90                	xchg   ax,ax
c000f8dc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f8e4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f8e9:	85 c0                	test   eax,eax
c000f8eb:	75 03                	jne    c000f8f0 <Semaphore::tryAcquire()+0x84>
c000f8ed:	fb                   	sti    
c000f8ee:	66 90                	xchg   ax,ax
c000f8f0:	b0 01                	mov    al,0x1
c000f8f2:	eb 48                	jmp    c000f93c <Semaphore::tryAcquire()+0xd0>
c000f8f4:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f8f9:	83 e8 01             	sub    eax,0x1
c000f8fc:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f901:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f906:	85 c0                	test   eax,eax
c000f908:	75 1a                	jne    c000f924 <Semaphore::tryAcquire()+0xb8>
c000f90a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000f90f:	85 c0                	test   eax,eax
c000f911:	74 11                	je     c000f924 <Semaphore::tryAcquire()+0xb8>
c000f913:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000f91d:	e8 26 5d 00 00       	call   c0015648 <schedule()>
c000f922:	66 90                	xchg   ax,ax
c000f924:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f92c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f931:	85 c0                	test   eax,eax
c000f933:	75 03                	jne    c000f938 <Semaphore::tryAcquire()+0xcc>
c000f935:	fb                   	sti    
c000f936:	66 90                	xchg   ax,ax
c000f938:	b0 00                	mov    al,0x0
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	83 c4 0c             	add    esp,0xc
c000f93f:	c3                   	ret    

c000f940 <Semaphore::assertLocked(char const*)>:
c000f940:	83 ec 0c             	sub    esp,0xc
c000f943:	fa                   	cli    
c000f944:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f949:	83 c0 01             	add    eax,0x1
c000f94c:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000f951:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f956:	83 c0 01             	add    eax,0x1
c000f959:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f962:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f969:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96b:	39 c2                	cmp    edx,eax
c000f96d:	7d 11                	jge    c000f980 <Semaphore::assertLocked(char const*)+0x40>
c000f96f:	83 ec 0c             	sub    esp,0xc
c000f972:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f976:	e8 7b f2 ff ff       	call   c000ebf6 <KePanic(char const*)>
c000f97b:	83 c4 10             	add    esp,0x10
c000f97e:	66 90                	xchg   ax,ax
c000f980:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f985:	83 e8 01             	sub    eax,0x1
c000f988:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f98d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f992:	85 c0                	test   eax,eax
c000f994:	75 1a                	jne    c000f9b0 <Semaphore::assertLocked(char const*)+0x70>
c000f996:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000f99b:	85 c0                	test   eax,eax
c000f99d:	74 11                	je     c000f9b0 <Semaphore::assertLocked(char const*)+0x70>
c000f99f:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000f9a9:	e8 9a 5c 00 00       	call   c0015648 <schedule()>
c000f9ae:	66 90                	xchg   ax,ax
c000f9b0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f9b8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f9bd:	85 c0                	test   eax,eax
c000f9bf:	75 03                	jne    c000f9c4 <Semaphore::assertLocked(char const*)+0x84>
c000f9c1:	fb                   	sti    
c000f9c2:	66 90                	xchg   ax,ax
c000f9c4:	90                   	nop
c000f9c5:	83 c4 0c             	add    esp,0xc
c000f9c8:	c3                   	ret    
c000f9c9:	90                   	nop
c000f9ca:	66 90                	xchg   ax,ax

c000f9cc <Semaphore::acquire(int)>:
c000f9cc:	83 ec 1c             	sub    esp,0x1c
c000f9cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000f9d4:	0f 84 9a 00 00 00    	je     c000fa74 <Semaphore::acquire(int)+0xa8>
c000f9da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f9e2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000f9e7:	90                   	nop
c000f9e8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000f9ed:	85 c0                	test   eax,eax
c000f9ef:	74 77                	je     c000fa68 <Semaphore::acquire(int)+0x9c>
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f9f8:	e8 6f fe ff ff       	call   c000f86c <Semaphore::tryAcquire()>
c000f9fd:	83 c4 10             	add    esp,0x10
c000fa00:	83 f0 01             	xor    eax,0x1
c000fa03:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fa07:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fa0b:	83 f0 01             	xor    eax,0x1
c000fa0e:	0f b6 c0             	movzx  eax,al
c000fa11:	85 c0                	test   eax,eax
c000fa13:	75 4f                	jne    c000fa64 <Semaphore::acquire(int)+0x98>
c000fa15:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fa1a:	7f 2c                	jg     c000fa48 <Semaphore::acquire(int)+0x7c>
c000fa1c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa20:	89 d0                	mov    eax,edx
c000fa22:	c1 e0 02             	shl    eax,0x2
c000fa25:	01 d0                	add    eax,edx
c000fa27:	d1 e0                	shl    eax,1
c000fa29:	83 ec 0c             	sub    esp,0xc
c000fa2c:	50                   	push   eax
c000fa2d:	e8 0e 5e 00 00       	call   c0015840 <milliTenthSleep(unsigned int)>
c000fa32:	83 c4 10             	add    esp,0x10
c000fa35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa39:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fa3d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fa45:	eb a1                	jmp    c000f9e8 <Semaphore::acquire(int)+0x1c>
c000fa47:	90                   	nop
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	68 90 01 00 00       	push   0x190
c000fa50:	e8 eb 5d 00 00       	call   c0015840 <milliTenthSleep(unsigned int)>
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fa5d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fa62:	eb 84                	jmp    c000f9e8 <Semaphore::acquire(int)+0x1c>
c000fa64:	90                   	nop
c000fa65:	8d 76 00             	lea    esi,[esi+0x0]
c000fa68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa6c:	e9 fb 00 00 00       	jmp    c000fb6c <Semaphore::acquire(int)+0x1a0>
c000fa71:	8d 76 00             	lea    esi,[esi+0x0]
c000fa74:	fa                   	cli    
c000fa75:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa7a:	83 c0 01             	add    eax,0x1
c000fa7d:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fa82:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa87:	83 c0 01             	add    eax,0x1
c000fa8a:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa93:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa9c:	39 c2                	cmp    edx,eax
c000fa9e:	7d 14                	jge    c000fab4 <Semaphore::acquire(int)+0xe8>
c000faa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000faa7:	8d 50 01             	lea    edx,[eax+0x1]
c000faaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fab1:	eb 6d                	jmp    c000fb20 <Semaphore::acquire(int)+0x154>
c000fab3:	90                   	nop
c000fab4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fab9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fabb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fac9:	85 c0                	test   eax,eax
c000facb:	75 13                	jne    c000fae0 <Semaphore::acquire(int)+0x114>
c000facd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fad2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fadb:	eb 17                	jmp    c000faf4 <Semaphore::acquire(int)+0x128>
c000fadd:	8d 76 00             	lea    esi,[esi+0x0]
c000fae0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000faec:	8b 12                	mov    edx,DWORD PTR [edx]
c000faee:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000faf1:	8d 76 00             	lea    esi,[esi+0x0]
c000faf4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000faf9:	8b 10                	mov    edx,DWORD PTR [eax]
c000fafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fb02:	83 ec 0c             	sub    esp,0xc
c000fb05:	68 0c 28 02 c0       	push   0xc002280c
c000fb0a:	e8 3f 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fb0f:	83 c4 10             	add    esp,0x10
c000fb12:	83 ec 0c             	sub    esp,0xc
c000fb15:	6a 05                	push   0x5
c000fb17:	e8 ec 5b 00 00       	call   c0015708 <blockTask(TaskState)>
c000fb1c:	83 c4 10             	add    esp,0x10
c000fb1f:	90                   	nop
c000fb20:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb25:	83 e8 01             	sub    eax,0x1
c000fb28:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb2d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb32:	85 c0                	test   eax,eax
c000fb34:	75 1a                	jne    c000fb50 <Semaphore::acquire(int)+0x184>
c000fb36:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fb3b:	85 c0                	test   eax,eax
c000fb3d:	74 11                	je     c000fb50 <Semaphore::acquire(int)+0x184>
c000fb3f:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fb49:	e8 fa 5a 00 00       	call   c0015648 <schedule()>
c000fb4e:	66 90                	xchg   ax,ax
c000fb50:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fb58:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb5d:	85 c0                	test   eax,eax
c000fb5f:	75 03                	jne    c000fb64 <Semaphore::acquire(int)+0x198>
c000fb61:	fb                   	sti    
c000fb62:	66 90                	xchg   ax,ax
c000fb64:	b8 00 00 00 00       	mov    eax,0x0
c000fb69:	8d 76 00             	lea    esi,[esi+0x0]
c000fb6c:	83 c4 1c             	add    esp,0x1c
c000fb6f:	c3                   	ret    

c000fb70 <Semaphore::acquire()>:
c000fb70:	83 ec 0c             	sub    esp,0xc
c000fb73:	83 ec 08             	sub    esp,0x8
c000fb76:	6a 00                	push   0x0
c000fb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb7c:	e8 4b fe ff ff       	call   c000f9cc <Semaphore::acquire(int)>
c000fb81:	83 c4 10             	add    esp,0x10
c000fb84:	90                   	nop
c000fb85:	83 c4 0c             	add    esp,0xc
c000fb88:	c3                   	ret    
c000fb89:	90                   	nop
c000fb8a:	66 90                	xchg   ax,ax

c000fb8c <Semaphore::release()>:
c000fb8c:	83 ec 1c             	sub    esp,0x1c
c000fb8f:	fa                   	cli    
c000fb90:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb95:	83 c0 01             	add    eax,0x1
c000fb98:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fb9d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fba2:	83 c0 01             	add    eax,0x1
c000fba5:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbb1:	85 c0                	test   eax,eax
c000fbb3:	74 2b                	je     c000fbe0 <Semaphore::release()+0x54>
c000fbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbc4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbcb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbce:	83 ec 0c             	sub    esp,0xc
c000fbd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbd5:	e8 7e 5d 00 00       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	eb 15                	jmp    c000fbf4 <Semaphore::release()+0x68>
c000fbdf:	90                   	nop
c000fbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbe4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbe7:	8d 50 ff             	lea    edx,[eax-0x1]
c000fbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fbf1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbf4:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fbf9:	83 e8 01             	sub    eax,0x1
c000fbfc:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fc01:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc06:	85 c0                	test   eax,eax
c000fc08:	75 1a                	jne    c000fc24 <Semaphore::release()+0x98>
c000fc0a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fc0f:	85 c0                	test   eax,eax
c000fc11:	74 11                	je     c000fc24 <Semaphore::release()+0x98>
c000fc13:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fc1d:	e8 26 5a 00 00       	call   c0015648 <schedule()>
c000fc22:	66 90                	xchg   ax,ax
c000fc24:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fc2c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc31:	85 c0                	test   eax,eax
c000fc33:	75 03                	jne    c000fc38 <Semaphore::release()+0xac>
c000fc35:	fb                   	sti    
c000fc36:	66 90                	xchg   ax,ax
c000fc38:	90                   	nop
c000fc39:	83 c4 1c             	add    esp,0x1c
c000fc3c:	c3                   	ret    

c000fc3d <KiSigKill(int)>:
c000fc3d:	83 ec 0c             	sub    esp,0xc
c000fc40:	6a 00                	push   0x0
c000fc42:	6a 00                	push   0x0
c000fc44:	6a ff                	push   0xffffffff
c000fc46:	6a 01                	push   0x1
c000fc48:	e8 05 64 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc4d:	83 c4 1c             	add    esp,0x1c
c000fc50:	c3                   	ret    

c000fc51 <KiDefaultSignalHandlerIgnore(int)>:
c000fc51:	c3                   	ret    

c000fc52 <KiDefaultSignalHandlerPause(int)>:
c000fc52:	57                   	push   edi
c000fc53:	b9 07 00 00 00       	mov    ecx,0x7
c000fc58:	56                   	push   esi
c000fc59:	be 67 28 02 c0       	mov    esi,0xc0022867
c000fc5e:	83 ec 24             	sub    esp,0x24
c000fc61:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fc65:	fc                   	cld    
c000fc66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc68:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fc6c:	50                   	push   eax
c000fc6d:	6a 00                	push   0x0
c000fc6f:	6a 00                	push   0x0
c000fc71:	6a 27                	push   0x27
c000fc73:	e8 da 63 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc78:	83 c4 34             	add    esp,0x34
c000fc7b:	5e                   	pop    esi
c000fc7c:	5f                   	pop    edi
c000fc7d:	c3                   	ret    

c000fc7e <KiDefaultSignalHandlerResume(int)>:
c000fc7e:	57                   	push   edi
c000fc7f:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fc84:	56                   	push   esi
c000fc85:	be 83 28 02 c0       	mov    esi,0xc0022883
c000fc8a:	83 ec 24             	sub    esp,0x24
c000fc8d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fc91:	fc                   	cld    
c000fc92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc94:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fc98:	50                   	push   eax
c000fc99:	6a 00                	push   0x0
c000fc9b:	6a 00                	push   0x0
c000fc9d:	6a 27                	push   0x27
c000fc9f:	e8 ae 63 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fca4:	83 c4 34             	add    esp,0x34
c000fca7:	5e                   	pop    esi
c000fca8:	5f                   	pop    edi
c000fca9:	c3                   	ret    

c000fcaa <KeDeinitSignals(SigHandlerBlock*)>:
c000fcaa:	e9 11 ec ff ff       	jmp    c000e8c0 <free>

c000fcaf <KeInitSignals()>:
c000fcaf:	53                   	push   ebx
c000fcb0:	83 ec 14             	sub    esp,0x14
c000fcb3:	68 c8 00 00 00       	push   0xc8
c000fcb8:	e8 f3 eb ff ff       	call   c000e8b0 <malloc>
c000fcbd:	83 c4 0c             	add    esp,0xc
c000fcc0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fcca:	89 c3                	mov    ebx,eax
c000fccc:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fcd6:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fcdc:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000fce0:	6a 20                	push   0x20
c000fce2:	6a 00                	push   0x0
c000fce4:	50                   	push   eax
c000fce5:	e8 06 08 ff ff       	call   c00004f0 <memset>
c000fcea:	83 c4 0c             	add    esp,0xc
c000fced:	6a 44                	push   0x44
c000fcef:	6a 00                	push   0x0
c000fcf1:	53                   	push   ebx
c000fcf2:	e8 f9 07 ff ff       	call   c00004f0 <memset>
c000fcf7:	83 c4 18             	add    esp,0x18
c000fcfa:	89 d8                	mov    eax,ebx
c000fcfc:	5b                   	pop    ebx
c000fcfd:	c3                   	ret    

c000fcfe <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fcfe:	53                   	push   ebx
c000fcff:	b8 01 00 00 00       	mov    eax,0x1
c000fd04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd0c:	83 f9 10             	cmp    ecx,0x10
c000fd0f:	7f 21                	jg     c000fd32 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd15:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fd18:	89 03                	mov    DWORD PTR [ebx],eax
c000fd1a:	b8 01 00 00 00       	mov    eax,0x1
c000fd1f:	d3 e0                	shl    eax,cl
c000fd21:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fd25:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fd28:	31 c0                	xor    eax,eax
c000fd2a:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fd32:	5b                   	pop    ebx
c000fd33:	c3                   	ret    

c000fd34 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fd34:	55                   	push   ebp
c000fd35:	57                   	push   edi
c000fd36:	bf 08 00 00 00       	mov    edi,0x8
c000fd3b:	56                   	push   esi
c000fd3c:	53                   	push   ebx
c000fd3d:	83 ec 18             	sub    esp,0x18
c000fd40:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd44:	68 a0 28 02 c0       	push   0xc00228a0
c000fd49:	e8 00 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd4e:	83 c4 10             	add    esp,0x10
c000fd51:	31 c9                	xor    ecx,ecx
c000fd53:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fd5a:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fd60:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fd64:	99                   	cdq    
c000fd65:	f7 ff                	idiv   edi
c000fd67:	8d 42 24             	lea    eax,[edx+0x24]
c000fd6a:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fd6e:	85 f6                	test   esi,esi
c000fd70:	75 1a                	jne    c000fd8c <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fd72:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fd76:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fd7a:	50                   	push   eax
c000fd7b:	50                   	push   eax
c000fd7c:	52                   	push   edx
c000fd7d:	68 b1 28 02 c0       	push   0xc00228b1
c000fd82:	e8 c7 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd87:	83 c4 10             	add    esp,0x10
c000fd8a:	eb 1b                	jmp    c000fda7 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fd8c:	41                   	inc    ecx
c000fd8d:	83 f9 08             	cmp    ecx,0x8
c000fd90:	75 ce                	jne    c000fd60 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fd92:	83 ec 0c             	sub    esp,0xc
c000fd95:	be 01 00 00 00       	mov    esi,0x1
c000fd9a:	68 d2 28 02 c0       	push   0xc00228d2
c000fd9f:	e8 aa 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fda4:	83 c4 10             	add    esp,0x10
c000fda7:	83 c4 0c             	add    esp,0xc
c000fdaa:	89 f0                	mov    eax,esi
c000fdac:	5b                   	pop    ebx
c000fdad:	5e                   	pop    esi
c000fdae:	5f                   	pop    edi
c000fdaf:	5d                   	pop    ebp
c000fdb0:	c3                   	ret    

c000fdb1 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fdb1:	55                   	push   ebp
c000fdb2:	57                   	push   edi
c000fdb3:	56                   	push   esi
c000fdb4:	53                   	push   ebx
c000fdb5:	51                   	push   ecx
c000fdb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fdba:	85 db                	test   ebx,ebx
c000fdbc:	0f 84 bc 00 00 00    	je     c000fe7e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdc2:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fdc9:	0f 84 af 00 00 00    	je     c000fe7e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdcf:	31 c9                	xor    ecx,ecx
c000fdd1:	bf 08 00 00 00       	mov    edi,0x8
c000fdd6:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fddc:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fddf:	99                   	cdq    
c000fde0:	f7 ff                	idiv   edi
c000fde2:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fde9:	85 ed                	test   ebp,ebp
c000fdeb:	0f 84 9e 00 00 00    	je     c000fe8f <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fdf1:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fdf7:	89 e9                	mov    ecx,ebp
c000fdf9:	bf 01 00 00 00       	mov    edi,0x1
c000fdfe:	d3 e7                	shl    edi,cl
c000fe00:	31 c9                	xor    ecx,ecx
c000fe02:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe05:	b8 01 00 00 00       	mov    eax,0x1
c000fe0a:	d3 e0                	shl    eax,cl
c000fe0c:	85 04 24             	test   DWORD PTR [esp],eax
c000fe0f:	74 06                	je     c000fe17 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fe11:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fe15:	75 67                	jne    c000fe7e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe17:	41                   	inc    ecx
c000fe18:	83 f9 11             	cmp    ecx,0x11
c000fe1b:	75 e8                	jne    c000fe05 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fe1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe20:	46                   	inc    esi
c000fe21:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe27:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000fe32:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fe39:	09 f8                	or     eax,edi
c000fe3b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fe41:	31 c0                	xor    eax,eax
c000fe43:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000fe4b:	74 09                	je     c000fe56 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000fe4d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe54:	eb 06                	jmp    c000fe5c <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000fe56:	40                   	inc    eax
c000fe57:	83 f8 08             	cmp    eax,0x8
c000fe5a:	75 e7                	jne    c000fe43 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000fe5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fe60:	83 fd 09             	cmp    ebp,0x9
c000fe63:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000fe66:	89 2a                	mov    DWORD PTR [edx],ebp
c000fe68:	75 07                	jne    c000fe71 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000fe6a:	b8 3d fc 00 c0       	mov    eax,0xc000fc3d
c000fe6f:	eb 31                	jmp    c000fea2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe71:	83 f8 01             	cmp    eax,0x1
c000fe74:	75 0c                	jne    c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000fe76:	f7 d7                	not    edi
c000fe78:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000fe7e:	31 c0                	xor    eax,eax
c000fe80:	eb 20                	jmp    c000fea2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe82:	85 c0                	test   eax,eax
c000fe84:	75 1c                	jne    c000fea2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe86:	8b 04 ad 60 4b 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdb4a0]
c000fe8d:	eb 13                	jmp    c000fea2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe8f:	41                   	inc    ecx
c000fe90:	46                   	inc    esi
c000fe91:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe97:	83 f9 08             	cmp    ecx,0x8
c000fe9a:	0f 85 36 ff ff ff    	jne    c000fdd6 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000fea0:	eb dc                	jmp    c000fe7e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fea2:	5a                   	pop    edx
c000fea3:	5b                   	pop    ebx
c000fea4:	5e                   	pop    esi
c000fea5:	5f                   	pop    edi
c000fea6:	5d                   	pop    ebp
c000fea7:	c3                   	ret    

c000fea8 <KiCheckSignalZ>:
c000fea8:	83 ec 10             	sub    esp,0x10
c000feab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000feaf:	50                   	push   eax
c000feb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000feb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000feb8:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000febe:	e8 ee fe ff ff       	call   c000fdb1 <KeCheckSignal(SigHandlerBlock*, int*)>
c000fec3:	5a                   	pop    edx
c000fec4:	31 d2                	xor    edx,edx
c000fec6:	59                   	pop    ecx
c000fec7:	85 c0                	test   eax,eax
c000fec9:	74 19                	je     c000fee4 <KiCheckSignalZ+0x3c>
c000fecb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fed1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fed4:	89 02                	mov    DWORD PTR [edx],eax
c000fed6:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000fedd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fee1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000fee4:	89 d0                	mov    eax,edx
c000fee6:	83 c4 10             	add    esp,0x10
c000fee9:	c3                   	ret    

c000feea <KeCompleteSignal(SigHandlerBlock*, int)>:
c000feea:	56                   	push   esi
c000feeb:	53                   	push   ebx
c000feec:	bb 01 00 00 00       	mov    ebx,0x1
c000fef1:	52                   	push   edx
c000fef2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fef6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fefa:	d3 e3                	shl    ebx,cl
c000fefc:	83 f9 10             	cmp    ecx,0x10
c000feff:	7f 08                	jg     c000ff09 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ff01:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ff07:	75 10                	jne    c000ff19 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ff09:	83 ec 0c             	sub    esp,0xc
c000ff0c:	68 e3 28 02 c0       	push   0xc00228e3
c000ff11:	e8 e0 ec ff ff       	call   c000ebf6 <KePanic(char const*)>
c000ff16:	83 c4 10             	add    esp,0x10
c000ff19:	f7 d3                	not    ebx
c000ff1b:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ff21:	58                   	pop    eax
c000ff22:	5b                   	pop    ebx
c000ff23:	5e                   	pop    esi
c000ff24:	c3                   	ret    

c000ff25 <KiFinishSignalZ>:
c000ff25:	53                   	push   ebx
c000ff26:	83 ec 10             	sub    esp,0x10
c000ff29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff2d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ff30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff35:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff38:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff3e:	e8 a7 ff ff ff       	call   c000feea <KeCompleteSignal(SigHandlerBlock*, int)>
c000ff43:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ff49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ff50:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ff57:	83 c4 18             	add    esp,0x18
c000ff5a:	5b                   	pop    ebx
c000ff5b:	c3                   	ret    

c000ff5c <SysSeekDir(regs*)>:
c000ff5c:	31 c0                	xor    eax,eax
c000ff5e:	31 d2                	xor    edx,edx
c000ff60:	c3                   	ret    

c000ff61 <SysTellDir(regs*)>:
c000ff61:	31 c0                	xor    eax,eax
c000ff63:	31 d2                	xor    edx,edx
c000ff65:	c3                   	ret    

c000ff66 <SysVerify(regs*)>:
c000ff66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6a:	31 d2                	xor    edx,edx
c000ff6c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff6f:	c3                   	ret    

c000ff70 <SysGetArgc(regs*)>:
c000ff70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff78:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c000ff7e:	89 c2                	mov    edx,eax
c000ff80:	c1 fa 1f             	sar    edx,0x1f
c000ff83:	c3                   	ret    

c000ff84 <SysTTYName(regs*)>:
c000ff84:	b8 01 00 00 00       	mov    eax,0x1
c000ff89:	31 d2                	xor    edx,edx
c000ff8b:	c3                   	ret    

c000ff8c <SysFormatDisk(regs*)>:
c000ff8c:	56                   	push   esi
c000ff8d:	53                   	push   ebx
c000ff8e:	83 ec 04             	sub    esp,0x4
c000ff91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff95:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000ff9b:	eb 2a                	jmp    c000ffc7 <SysFormatDisk(regs*)+0x3b>
c000ff9d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c000ffa0:	83 ec 0c             	sub    esp,0xc
c000ffa3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ffa6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ffa8:	51                   	push   ecx
c000ffa9:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c000ffac:	51                   	push   ecx
c000ffad:	50                   	push   eax
c000ffae:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c000ffb5:	50                   	push   eax
c000ffb6:	53                   	push   ebx
c000ffb7:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c000ffba:	83 c4 20             	add    esp,0x20
c000ffbd:	83 f8 08             	cmp    eax,0x8
c000ffc0:	89 c1                	mov    ecx,eax
c000ffc2:	75 14                	jne    c000ffd8 <SysFormatDisk(regs*)+0x4c>
c000ffc4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ffc7:	85 db                	test   ebx,ebx
c000ffc9:	75 d2                	jne    c000ff9d <SysFormatDisk(regs*)+0x11>
c000ffcb:	b8 03 00 00 00       	mov    eax,0x3
c000ffd0:	31 d2                	xor    edx,edx
c000ffd2:	83 c4 04             	add    esp,0x4
c000ffd5:	5b                   	pop    ebx
c000ffd6:	5e                   	pop    esi
c000ffd7:	c3                   	ret    
c000ffd8:	85 c0                	test   eax,eax
c000ffda:	74 13                	je     c000ffef <SysFormatDisk(regs*)+0x63>
c000ffdc:	31 d2                	xor    edx,edx
c000ffde:	83 f9 09             	cmp    ecx,0x9
c000ffe1:	b8 01 00 00 00       	mov    eax,0x1
c000ffe6:	74 ea                	je     c000ffd2 <SysFormatDisk(regs*)+0x46>
c000ffe8:	b8 02 00 00 00       	mov    eax,0x2
c000ffed:	eb e1                	jmp    c000ffd0 <SysFormatDisk(regs*)+0x44>
c000ffef:	31 c0                	xor    eax,eax
c000fff1:	eb dd                	jmp    c000ffd0 <SysFormatDisk(regs*)+0x44>

c000fff3 <SysSetDiskVolumeLabel(regs*)>:
c000fff3:	56                   	push   esi
c000fff4:	53                   	push   ebx
c000fff5:	83 ec 04             	sub    esp,0x4
c000fff8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fffc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000ffff:	83 f8 19             	cmp    eax,0x19
c0010002:	77 33                	ja     c0010037 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010004:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001000b:	85 c9                	test   ecx,ecx
c001000d:	74 28                	je     c0010037 <SysSetDiskVolumeLabel(regs*)+0x44>
c001000f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010012:	85 db                	test   ebx,ebx
c0010014:	74 21                	je     c0010037 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010016:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001001c:	85 d2                	test   edx,edx
c001001e:	74 17                	je     c0010037 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010020:	8b 32                	mov    esi,DWORD PTR [edx]
c0010022:	53                   	push   ebx
c0010023:	50                   	push   eax
c0010024:	51                   	push   ecx
c0010025:	52                   	push   edx
c0010026:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010029:	83 c4 10             	add    esp,0x10
c001002c:	83 c4 04             	add    esp,0x4
c001002f:	5b                   	pop    ebx
c0010030:	5e                   	pop    esi
c0010031:	89 c2                	mov    edx,eax
c0010033:	c1 fa 1f             	sar    edx,0x1f
c0010036:	c3                   	ret    
c0010037:	83 c4 04             	add    esp,0x4
c001003a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001003f:	5b                   	pop    ebx
c0010040:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010045:	5e                   	pop    esi
c0010046:	c3                   	ret    

c0010047 <SysGetDiskVolumeLabel(regs*)>:
c0010047:	57                   	push   edi
c0010048:	56                   	push   esi
c0010049:	53                   	push   ebx
c001004a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010051:	83 fa 19             	cmp    edx,0x19
c0010054:	77 3c                	ja     c0010092 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010056:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c001005d:	85 c9                	test   ecx,ecx
c001005f:	74 31                	je     c0010092 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010061:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010064:	85 db                	test   ebx,ebx
c0010066:	74 2a                	je     c0010092 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010068:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001006b:	85 f6                	test   esi,esi
c001006d:	74 23                	je     c0010092 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001006f:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010075:	85 c0                	test   eax,eax
c0010077:	74 19                	je     c0010092 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010079:	83 ec 0c             	sub    esp,0xc
c001007c:	8b 38                	mov    edi,DWORD PTR [eax]
c001007e:	56                   	push   esi
c001007f:	53                   	push   ebx
c0010080:	52                   	push   edx
c0010081:	51                   	push   ecx
c0010082:	50                   	push   eax
c0010083:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010086:	83 c4 20             	add    esp,0x20
c0010089:	5b                   	pop    ebx
c001008a:	5e                   	pop    esi
c001008b:	89 c2                	mov    edx,eax
c001008d:	c1 fa 1f             	sar    edx,0x1f
c0010090:	5f                   	pop    edi
c0010091:	c3                   	ret    
c0010092:	5b                   	pop    ebx
c0010093:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010098:	ba ff ff ff ff       	mov    edx,0xffffffff
c001009d:	5e                   	pop    esi
c001009e:	5f                   	pop    edi
c001009f:	c3                   	ret    

c00100a0 <SysRealpath(regs*)>:
c00100a0:	53                   	push   ebx
c00100a1:	83 ec 08             	sub    esp,0x8
c00100a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00100ab:	85 c9                	test   ecx,ecx
c00100ad:	74 36                	je     c00100e5 <SysRealpath(regs*)+0x45>
c00100af:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00100b2:	31 d2                	xor    edx,edx
c00100b4:	b8 01 00 00 00       	mov    eax,0x1
c00100b9:	85 db                	test   ebx,ebx
c00100bb:	75 05                	jne    c00100c2 <SysRealpath(regs*)+0x22>
c00100bd:	83 c4 08             	add    esp,0x8
c00100c0:	5b                   	pop    ebx
c00100c1:	c3                   	ret    
c00100c2:	6a 00                	push   0x0
c00100c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100cc:	05 0c 01 00 00       	add    eax,0x10c
c00100d1:	50                   	push   eax
c00100d2:	51                   	push   ecx
c00100d3:	53                   	push   ebx
c00100d4:	e8 27 7d ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	31 c0                	xor    eax,eax
c00100de:	31 d2                	xor    edx,edx
c00100e0:	83 c4 08             	add    esp,0x8
c00100e3:	5b                   	pop    ebx
c00100e4:	c3                   	ret    
c00100e5:	b8 01 00 00 00       	mov    eax,0x1
c00100ea:	31 d2                	xor    edx,edx
c00100ec:	eb f2                	jmp    c00100e0 <SysRealpath(regs*)+0x40>

c00100ee <SysReadDir(regs*)>:
c00100ee:	53                   	push   ebx
c00100ef:	83 ec 18             	sub    esp,0x18
c00100f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00100f6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00100f9:	83 f8 02             	cmp    eax,0x2
c00100fc:	76 4f                	jbe    c001014d <SysReadDir(regs*)+0x5f>
c00100fe:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010105:	77 52                	ja     c0010159 <SysReadDir(regs*)+0x6b>
c0010107:	83 ec 0c             	sub    esp,0xc
c001010a:	50                   	push   eax
c001010b:	e8 49 1d 00 00       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c0010110:	83 c4 10             	add    esp,0x10
c0010113:	85 c0                	test   eax,eax
c0010115:	74 42                	je     c0010159 <SysReadDir(regs*)+0x6b>
c0010117:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001011f:	83 ec 0c             	sub    esp,0xc
c0010122:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010126:	8b 10                	mov    edx,DWORD PTR [eax]
c0010128:	51                   	push   ecx
c0010129:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001012c:	51                   	push   ecx
c001012d:	6a 00                	push   0x0
c001012f:	68 10 01 00 00       	push   0x110
c0010134:	50                   	push   eax
c0010135:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010138:	83 c4 20             	add    esp,0x20
c001013b:	85 c0                	test   eax,eax
c001013d:	89 c1                	mov    ecx,eax
c001013f:	74 27                	je     c0010168 <SysReadDir(regs*)+0x7a>
c0010141:	31 d2                	xor    edx,edx
c0010143:	83 f9 07             	cmp    ecx,0x7
c0010146:	b8 02 00 00 00       	mov    eax,0x2
c001014b:	75 16                	jne    c0010163 <SysReadDir(regs*)+0x75>
c001014d:	b8 01 00 00 00       	mov    eax,0x1
c0010152:	31 d2                	xor    edx,edx
c0010154:	83 c4 18             	add    esp,0x18
c0010157:	5b                   	pop    ebx
c0010158:	c3                   	ret    
c0010159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001015e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010163:	83 c4 18             	add    esp,0x18
c0010166:	5b                   	pop    ebx
c0010167:	c3                   	ret    
c0010168:	31 c0                	xor    eax,eax
c001016a:	31 d2                	xor    edx,edx
c001016c:	eb e6                	jmp    c0010154 <SysReadDir(regs*)+0x66>

c001016e <SysIsATTY(regs*)>:
c001016e:	83 ec 0c             	sub    esp,0xc
c0010171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010175:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010178:	83 f8 02             	cmp    eax,0x2
c001017b:	76 07                	jbe    c0010184 <SysIsATTY(regs*)+0x16>
c001017d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010182:	75 26                	jne    c00101aa <SysIsATTY(regs*)+0x3c>
c0010184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010189:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001018c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010192:	85 c0                	test   eax,eax
c0010194:	74 24                	je     c00101ba <SysIsATTY(regs*)+0x4c>
c0010196:	8b 10                	mov    edx,DWORD PTR [eax]
c0010198:	83 ec 0c             	sub    esp,0xc
c001019b:	50                   	push   eax
c001019c:	ff 12                	call   DWORD PTR [edx]
c001019e:	83 c4 10             	add    esp,0x10
c00101a1:	31 d2                	xor    edx,edx
c00101a3:	83 c4 0c             	add    esp,0xc
c00101a6:	0f b6 c0             	movzx  eax,al
c00101a9:	c3                   	ret    
c00101aa:	83 ec 0c             	sub    esp,0xc
c00101ad:	50                   	push   eax
c00101ae:	e8 a6 1c 00 00       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c00101b3:	83 c4 10             	add    esp,0x10
c00101b6:	85 c0                	test   eax,eax
c00101b8:	75 dc                	jne    c0010196 <SysIsATTY(regs*)+0x28>
c00101ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101c4:	83 c4 0c             	add    esp,0xc
c00101c7:	c3                   	ret    

c00101c8 <SysSeek(regs*)>:
c00101c8:	56                   	push   esi
c00101c9:	53                   	push   ebx
c00101ca:	83 ec 04             	sub    esp,0x4
c00101cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101d1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00101d4:	8d 71 fd             	lea    esi,[ecx-0x3]
c00101d7:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00101dd:	77 33                	ja     c0010212 <SysSeek(regs*)+0x4a>
c00101df:	83 ec 0c             	sub    esp,0xc
c00101e2:	51                   	push   ecx
c00101e3:	e8 71 1c 00 00       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c00101e8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00101eb:	83 c4 0c             	add    esp,0xc
c00101ee:	31 db                	xor    ebx,ebx
c00101f0:	53                   	push   ebx
c00101f1:	51                   	push   ecx
c00101f2:	50                   	push   eax
c00101f3:	e8 10 80 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00101f8:	83 c4 10             	add    esp,0x10
c00101fb:	85 c0                	test   eax,eax
c00101fd:	0f 95 c0             	setne  al
c0010200:	31 d2                	xor    edx,edx
c0010202:	0f b6 c0             	movzx  eax,al
c0010205:	f7 d8                	neg    eax
c0010207:	83 d2 00             	adc    edx,0x0
c001020a:	83 c4 04             	add    esp,0x4
c001020d:	5b                   	pop    ebx
c001020e:	f7 da                	neg    edx
c0010210:	5e                   	pop    esi
c0010211:	c3                   	ret    
c0010212:	83 c4 04             	add    esp,0x4
c0010215:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001021a:	5b                   	pop    ebx
c001021b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010220:	5e                   	pop    esi
c0010221:	c3                   	ret    

c0010222 <SysTell(regs*)>:
c0010222:	53                   	push   ebx
c0010223:	83 ec 08             	sub    esp,0x8
c0010226:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001022a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001022d:	83 f8 02             	cmp    eax,0x2
c0010230:	76 4e                	jbe    c0010280 <SysTell(regs*)+0x5e>
c0010232:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010237:	76 19                	jbe    c0010252 <SysTell(regs*)+0x30>
c0010239:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001023c:	31 d2                	xor    edx,edx
c001023e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010244:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001024b:	83 c4 08             	add    esp,0x8
c001024e:	31 c0                	xor    eax,eax
c0010250:	5b                   	pop    ebx
c0010251:	c3                   	ret    
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	50                   	push   eax
c0010256:	e8 fe 1b 00 00       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c001025b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001025e:	5a                   	pop    edx
c001025f:	59                   	pop    ecx
c0010260:	53                   	push   ebx
c0010261:	50                   	push   eax
c0010262:	e8 4d 80 ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c0010267:	83 c4 10             	add    esp,0x10
c001026a:	85 c0                	test   eax,eax
c001026c:	0f 95 c0             	setne  al
c001026f:	31 d2                	xor    edx,edx
c0010271:	0f b6 c0             	movzx  eax,al
c0010274:	f7 d8                	neg    eax
c0010276:	83 d2 00             	adc    edx,0x0
c0010279:	83 c4 08             	add    esp,0x8
c001027c:	5b                   	pop    ebx
c001027d:	f7 da                	neg    edx
c001027f:	c3                   	ret    
c0010280:	83 c4 08             	add    esp,0x8
c0010283:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010288:	5b                   	pop    ebx
c0010289:	ba ff ff ff ff       	mov    edx,0xffffffff
c001028e:	c3                   	ret    

c001028f <SysSize(regs*)>:
c001028f:	53                   	push   ebx
c0010290:	83 ec 18             	sub    esp,0x18
c0010293:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010297:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001029a:	83 f8 02             	cmp    eax,0x2
c001029d:	76 5b                	jbe    c00102fa <SysSize(regs*)+0x6b>
c001029f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102a4:	76 19                	jbe    c00102bf <SysSize(regs*)+0x30>
c00102a6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102a9:	31 d2                	xor    edx,edx
c00102ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00102b8:	83 c4 18             	add    esp,0x18
c00102bb:	31 c0                	xor    eax,eax
c00102bd:	5b                   	pop    ebx
c00102be:	c3                   	ret    
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	50                   	push   eax
c00102c3:	e8 91 1b 00 00       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	85 c0                	test   eax,eax
c00102cd:	74 2b                	je     c00102fa <SysSize(regs*)+0x6b>
c00102cf:	83 ec 04             	sub    esp,0x4
c00102d2:	8d 54 24 13          	lea    edx,[esp+0x13]
c00102d6:	52                   	push   edx
c00102d7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00102da:	52                   	push   edx
c00102db:	50                   	push   eax
c00102dc:	e8 6b 81 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	85 c0                	test   eax,eax
c00102e6:	0f 95 c0             	setne  al
c00102e9:	31 d2                	xor    edx,edx
c00102eb:	0f b6 c0             	movzx  eax,al
c00102ee:	f7 d8                	neg    eax
c00102f0:	83 d2 00             	adc    edx,0x0
c00102f3:	83 c4 18             	add    esp,0x18
c00102f6:	5b                   	pop    ebx
c00102f7:	f7 da                	neg    edx
c00102f9:	c3                   	ret    
c00102fa:	83 c4 18             	add    esp,0x18
c00102fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010302:	5b                   	pop    ebx
c0010303:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010308:	c3                   	ret    

c0010309 <SysSizeFromFilename(regs*)>:
c0010309:	55                   	push   ebp
c001030a:	57                   	push   edi
c001030b:	56                   	push   esi
c001030c:	53                   	push   ebx
c001030d:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010313:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001031a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001031d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010320:	85 f6                	test   esi,esi
c0010322:	89 f8                	mov    eax,edi
c0010324:	74 09                	je     c001032f <SysSizeFromFilename(regs*)+0x26>
c0010326:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001032c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001032f:	83 f8 02             	cmp    eax,0x2
c0010332:	0f 86 ca 00 00 00    	jbe    c0010402 <SysSizeFromFilename(regs*)+0xf9>
c0010338:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001033d:	76 1f                	jbe    c001035e <SysSizeFromFilename(regs*)+0x55>
c001033f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010342:	31 d2                	xor    edx,edx
c0010344:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001034a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010351:	31 c0                	xor    eax,eax
c0010353:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010359:	5b                   	pop    ebx
c001035a:	5e                   	pop    esi
c001035b:	5f                   	pop    edi
c001035c:	5d                   	pop    ebp
c001035d:	c3                   	ret    
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	68 14 01 00 00       	push   0x114
c0010366:	e8 45 e5 ff ff       	call   c000e8b0 <malloc>
c001036b:	6a 01                	push   0x1
c001036d:	89 c5                	mov    ebp,eax
c001036f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010374:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010377:	51                   	push   ecx
c0010378:	57                   	push   edi
c0010379:	55                   	push   ebp
c001037a:	e8 af 7c ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001037f:	83 c4 1c             	add    esp,0x1c
c0010382:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010386:	50                   	push   eax
c0010387:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001038a:	53                   	push   ebx
c001038b:	55                   	push   ebp
c001038c:	e8 bb 80 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	85 ed                	test   ebp,ebp
c0010396:	89 c3                	mov    ebx,eax
c0010398:	74 0d                	je     c00103a7 <SysSizeFromFilename(regs*)+0x9e>
c001039a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001039d:	83 ec 0c             	sub    esp,0xc
c00103a0:	55                   	push   ebp
c00103a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00103a4:	83 c4 10             	add    esp,0x10
c00103a7:	85 db                	test   ebx,ebx
c00103a9:	75 57                	jne    c0010402 <SysSizeFromFilename(regs*)+0xf9>
c00103ab:	6a 00                	push   0x0
c00103ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103b5:	05 0c 01 00 00       	add    eax,0x10c
c00103ba:	50                   	push   eax
c00103bb:	57                   	push   edi
c00103bc:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00103c3:	53                   	push   ebx
c00103c4:	e8 37 7a ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00103c9:	58                   	pop    eax
c00103ca:	5a                   	pop    edx
c00103cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00103cf:	50                   	push   eax
c00103d0:	53                   	push   ebx
c00103d1:	e8 b1 74 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00103d6:	83 c4 10             	add    esp,0x10
c00103d9:	ba 00 00 00 00       	mov    edx,0x0
c00103de:	83 f8 01             	cmp    eax,0x1
c00103e1:	b8 00 00 00 00       	mov    eax,0x0
c00103e6:	74 2f                	je     c0010417 <SysSizeFromFilename(regs*)+0x10e>
c00103e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00103ed:	74 3b                	je     c001042a <SysSizeFromFilename(regs*)+0x121>
c00103ef:	85 f6                	test   esi,esi
c00103f1:	0f 84 5c ff ff ff    	je     c0010353 <SysSizeFromFilename(regs*)+0x4a>
c00103f7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00103fd:	e9 51 ff ff ff       	jmp    c0010353 <SysSizeFromFilename(regs*)+0x4a>
c0010402:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010408:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001040d:	5b                   	pop    ebx
c001040e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010413:	5e                   	pop    esi
c0010414:	5f                   	pop    edi
c0010415:	5d                   	pop    ebp
c0010416:	c3                   	ret    
c0010417:	85 f6                	test   esi,esi
c0010419:	0f 84 34 ff ff ff    	je     c0010353 <SysSizeFromFilename(regs*)+0x4a>
c001041f:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010425:	e9 29 ff ff ff       	jmp    c0010353 <SysSizeFromFilename(regs*)+0x4a>
c001042a:	85 f6                	test   esi,esi
c001042c:	0f 84 21 ff ff ff    	je     c0010353 <SysSizeFromFilename(regs*)+0x4a>
c0010432:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010438:	e9 16 ff ff ff       	jmp    c0010353 <SysSizeFromFilename(regs*)+0x4a>

c001043d <SysSizeFromFilenameNoSymlink(regs*)>:
c001043d:	55                   	push   ebp
c001043e:	57                   	push   edi
c001043f:	56                   	push   esi
c0010440:	53                   	push   ebx
c0010441:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010447:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001044e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010451:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010454:	85 f6                	test   esi,esi
c0010456:	89 f8                	mov    eax,edi
c0010458:	74 09                	je     c0010463 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001045a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010460:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010463:	83 f8 02             	cmp    eax,0x2
c0010466:	0f 86 ca 00 00 00    	jbe    c0010536 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c001046c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010471:	76 1f                	jbe    c0010492 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010473:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010476:	31 d2                	xor    edx,edx
c0010478:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001047e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010485:	31 c0                	xor    eax,eax
c0010487:	81 c4 4c 02 00 00    	add    esp,0x24c
c001048d:	5b                   	pop    ebx
c001048e:	5e                   	pop    esi
c001048f:	5f                   	pop    edi
c0010490:	5d                   	pop    ebp
c0010491:	c3                   	ret    
c0010492:	83 ec 0c             	sub    esp,0xc
c0010495:	68 14 01 00 00       	push   0x114
c001049a:	e8 11 e4 ff ff       	call   c000e8b0 <malloc>
c001049f:	6a 00                	push   0x0
c00104a1:	89 c5                	mov    ebp,eax
c00104a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104a8:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00104ab:	51                   	push   ecx
c00104ac:	57                   	push   edi
c00104ad:	55                   	push   ebp
c00104ae:	e8 7b 7b ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00104b3:	83 c4 1c             	add    esp,0x1c
c00104b6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00104ba:	50                   	push   eax
c00104bb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00104be:	53                   	push   ebx
c00104bf:	55                   	push   ebp
c00104c0:	e8 87 7f ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	85 ed                	test   ebp,ebp
c00104ca:	89 c3                	mov    ebx,eax
c00104cc:	74 0d                	je     c00104db <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00104ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104d1:	83 ec 0c             	sub    esp,0xc
c00104d4:	55                   	push   ebp
c00104d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00104d8:	83 c4 10             	add    esp,0x10
c00104db:	85 db                	test   ebx,ebx
c00104dd:	75 57                	jne    c0010536 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00104df:	6a 00                	push   0x0
c00104e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00104e9:	05 0c 01 00 00       	add    eax,0x10c
c00104ee:	50                   	push   eax
c00104ef:	57                   	push   edi
c00104f0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00104f7:	53                   	push   ebx
c00104f8:	e8 03 79 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00104fd:	58                   	pop    eax
c00104fe:	5a                   	pop    edx
c00104ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010503:	50                   	push   eax
c0010504:	53                   	push   ebx
c0010505:	e8 7d 73 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	ba 00 00 00 00       	mov    edx,0x0
c0010512:	83 f8 01             	cmp    eax,0x1
c0010515:	b8 00 00 00 00       	mov    eax,0x0
c001051a:	74 2f                	je     c001054b <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c001051c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010521:	74 3b                	je     c001055e <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0010523:	85 f6                	test   esi,esi
c0010525:	0f 84 5c ff ff ff    	je     c0010487 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001052b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010531:	e9 51 ff ff ff       	jmp    c0010487 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010536:	81 c4 4c 02 00 00    	add    esp,0x24c
c001053c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010541:	5b                   	pop    ebx
c0010542:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010547:	5e                   	pop    esi
c0010548:	5f                   	pop    edi
c0010549:	5d                   	pop    ebp
c001054a:	c3                   	ret    
c001054b:	85 f6                	test   esi,esi
c001054d:	0f 84 34 ff ff ff    	je     c0010487 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010553:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010559:	e9 29 ff ff ff       	jmp    c0010487 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001055e:	85 f6                	test   esi,esi
c0010560:	0f 84 21 ff ff ff    	je     c0010487 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010566:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001056c:	e9 16 ff ff ff       	jmp    c0010487 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0010571 <SysClose(regs*)>:
c0010571:	55                   	push   ebp
c0010572:	57                   	push   edi
c0010573:	56                   	push   esi
c0010574:	53                   	push   ebx
c0010575:	83 ec 0c             	sub    esp,0xc
c0010578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001057c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001057f:	83 f8 02             	cmp    eax,0x2
c0010582:	76 6d                	jbe    c00105f1 <SysClose(regs*)+0x80>
c0010584:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001058a:	31 f6                	xor    esi,esi
c001058c:	31 ff                	xor    edi,edi
c001058e:	83 fa 01             	cmp    edx,0x1
c0010591:	76 3e                	jbe    c00105d1 <SysClose(regs*)+0x60>
c0010593:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010598:	77 57                	ja     c00105f1 <SysClose(regs*)+0x80>
c001059a:	83 ec 0c             	sub    esp,0xc
c001059d:	50                   	push   eax
c001059e:	e8 b6 18 00 00       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c00105a3:	83 c4 10             	add    esp,0x10
c00105a6:	85 c0                	test   eax,eax
c00105a8:	89 c5                	mov    ebp,eax
c00105aa:	74 31                	je     c00105dd <SysClose(regs*)+0x6c>
c00105ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00105af:	83 ec 08             	sub    esp,0x8
c00105b2:	50                   	push   eax
c00105b3:	68 66 29 02 c0       	push   0xc0022966
c00105b8:	e8 91 69 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00105bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00105c0:	e8 e3 7b ff ff       	call   c00081a8 <File::close()>
c00105c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00105c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00105cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105ce:	83 c4 10             	add    esp,0x10
c00105d1:	83 c4 0c             	add    esp,0xc
c00105d4:	89 f0                	mov    eax,esi
c00105d6:	5b                   	pop    ebx
c00105d7:	89 fa                	mov    edx,edi
c00105d9:	5e                   	pop    esi
c00105da:	5f                   	pop    edi
c00105db:	5d                   	pop    ebp
c00105dc:	c3                   	ret    
c00105dd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00105e0:	83 ec 08             	sub    esp,0x8
c00105e3:	52                   	push   edx
c00105e4:	68 f4 28 02 c0       	push   0xc00228f4
c00105e9:	e8 60 69 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00105ee:	83 c4 10             	add    esp,0x10
c00105f1:	83 c4 0c             	add    esp,0xc
c00105f4:	be ff ff ff ff       	mov    esi,0xffffffff
c00105f9:	5b                   	pop    ebx
c00105fa:	89 f0                	mov    eax,esi
c00105fc:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010601:	89 fa                	mov    edx,edi
c0010603:	5e                   	pop    esi
c0010604:	5f                   	pop    edi
c0010605:	5d                   	pop    ebp
c0010606:	c3                   	ret    

c0010607 <SysOpenDir(regs*)>:
c0010607:	56                   	push   esi
c0010608:	53                   	push   ebx
c0010609:	83 ec 04             	sub    esp,0x4
c001060c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010610:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010613:	85 c9                	test   ecx,ecx
c0010615:	74 5d                	je     c0010674 <SysOpenDir(regs*)+0x6d>
c0010617:	83 ec 0c             	sub    esp,0xc
c001061a:	68 14 01 00 00       	push   0x114
c001061f:	e8 8c e2 ff ff       	call   c000e8b0 <malloc>
c0010624:	83 c4 0c             	add    esp,0xc
c0010627:	89 c6                	mov    esi,eax
c0010629:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001062e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010631:	50                   	push   eax
c0010632:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010635:	52                   	push   edx
c0010636:	56                   	push   esi
c0010637:	e8 d0 7f ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	85 f6                	test   esi,esi
c0010641:	74 31                	je     c0010674 <SysOpenDir(regs*)+0x6d>
c0010643:	83 ec 0c             	sub    esp,0xc
c0010646:	56                   	push   esi
c0010647:	e8 88 80 ff ff       	call   c00086d4 <Directory::open()>
c001064c:	83 c4 10             	add    esp,0x10
c001064f:	85 c0                	test   eax,eax
c0010651:	75 21                	jne    c0010674 <SysOpenDir(regs*)+0x6d>
c0010653:	83 ec 0c             	sub    esp,0xc
c0010656:	56                   	push   esi
c0010657:	e8 00 15 00 00       	call   c0011b5c <UnixFile::getFileDescriptor()>
c001065c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001065f:	83 c4 10             	add    esp,0x10
c0010662:	89 02                	mov    DWORD PTR [edx],eax
c0010664:	c1 f8 1f             	sar    eax,0x1f
c0010667:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001066a:	83 c4 04             	add    esp,0x4
c001066d:	31 c0                	xor    eax,eax
c001066f:	5b                   	pop    ebx
c0010670:	31 d2                	xor    edx,edx
c0010672:	5e                   	pop    esi
c0010673:	c3                   	ret    
c0010674:	83 c4 04             	add    esp,0x4
c0010677:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001067c:	5b                   	pop    ebx
c001067d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010682:	5e                   	pop    esi
c0010683:	c3                   	ret    

c0010684 <SysMakeDir(regs*)>:
c0010684:	56                   	push   esi
c0010685:	53                   	push   ebx
c0010686:	83 ec 10             	sub    esp,0x10
c0010689:	68 14 01 00 00       	push   0x114
c001068e:	e8 1d e2 ff ff       	call   c000e8b0 <malloc>
c0010693:	83 c4 0c             	add    esp,0xc
c0010696:	89 c3                	mov    ebx,eax
c0010698:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001069d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106a0:	50                   	push   eax
c00106a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00106a5:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00106a8:	52                   	push   edx
c00106a9:	53                   	push   ebx
c00106aa:	e8 5d 7f ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	85 db                	test   ebx,ebx
c00106b4:	74 2c                	je     c00106e2 <SysMakeDir(regs*)+0x5e>
c00106b6:	83 ec 0c             	sub    esp,0xc
c00106b9:	53                   	push   ebx
c00106ba:	e8 f5 81 ff ff       	call   c00088b4 <Directory::create()>
c00106bf:	89 c6                	mov    esi,eax
c00106c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106c9:	83 c4 10             	add    esp,0x10
c00106cc:	31 c0                	xor    eax,eax
c00106ce:	85 f6                	test   esi,esi
c00106d0:	0f 95 c0             	setne  al
c00106d3:	31 d2                	xor    edx,edx
c00106d5:	f7 d8                	neg    eax
c00106d7:	83 d2 00             	adc    edx,0x0
c00106da:	83 c4 04             	add    esp,0x4
c00106dd:	5b                   	pop    ebx
c00106de:	f7 da                	neg    edx
c00106e0:	5e                   	pop    esi
c00106e1:	c3                   	ret    
c00106e2:	83 c4 04             	add    esp,0x4
c00106e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106ea:	5b                   	pop    ebx
c00106eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106f0:	5e                   	pop    esi
c00106f1:	c3                   	ret    

c00106f2 <SysCloseDir(regs*)>:
c00106f2:	55                   	push   ebp
c00106f3:	57                   	push   edi
c00106f4:	bf ff ff ff ff       	mov    edi,0xffffffff
c00106f9:	56                   	push   esi
c00106fa:	be ff ff ff ff       	mov    esi,0xffffffff
c00106ff:	53                   	push   ebx
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010707:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001070a:	8d 50 fd             	lea    edx,[eax-0x3]
c001070d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010713:	77 3b                	ja     c0010750 <SysCloseDir(regs*)+0x5e>
c0010715:	83 ec 0c             	sub    esp,0xc
c0010718:	50                   	push   eax
c0010719:	e8 3b 17 00 00       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c001071e:	83 c4 10             	add    esp,0x10
c0010721:	85 c0                	test   eax,eax
c0010723:	89 c5                	mov    ebp,eax
c0010725:	74 35                	je     c001075c <SysCloseDir(regs*)+0x6a>
c0010727:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001072a:	83 ec 08             	sub    esp,0x8
c001072d:	31 f6                	xor    esi,esi
c001072f:	31 ff                	xor    edi,edi
c0010731:	50                   	push   eax
c0010732:	68 71 29 02 c0       	push   0xc0022971
c0010737:	e8 12 68 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001073c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001073f:	e8 ec 7f ff ff       	call   c0008730 <Directory::close()>
c0010744:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010747:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001074a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001074d:	83 c4 10             	add    esp,0x10
c0010750:	83 c4 0c             	add    esp,0xc
c0010753:	89 f0                	mov    eax,esi
c0010755:	5b                   	pop    ebx
c0010756:	89 fa                	mov    edx,edi
c0010758:	5e                   	pop    esi
c0010759:	5f                   	pop    edi
c001075a:	5d                   	pop    ebp
c001075b:	c3                   	ret    
c001075c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001075f:	83 ec 08             	sub    esp,0x8
c0010762:	52                   	push   edx
c0010763:	68 2c 29 02 c0       	push   0xc002292c
c0010768:	e8 e1 67 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001076d:	83 c4 10             	add    esp,0x10
c0010770:	eb de                	jmp    c0010750 <SysCloseDir(regs*)+0x5e>

c0010772 <SysWait(regs*)>:
c0010772:	83 ec 10             	sub    esp,0x10
c0010775:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010779:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001077c:	52                   	push   edx
c001077d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010780:	51                   	push   ecx
c0010781:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010784:	50                   	push   eax
c0010785:	e8 ca 4f 00 00       	call   c0015754 <waitTask(int, int*, int)>
c001078a:	83 c4 1c             	add    esp,0x1c
c001078d:	89 c2                	mov    edx,eax
c001078f:	c1 fa 1f             	sar    edx,0x1f
c0010792:	c3                   	ret    

c0010793 <SysNotImpl(regs*)>:
c0010793:	83 ec 18             	sub    esp,0x18
c0010796:	68 7f 29 02 c0       	push   0xc002297f
c001079b:	e8 56 e4 ff ff       	call   c000ebf6 <KePanic(char const*)>
c00107a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107aa:	83 c4 1c             	add    esp,0x1c
c00107ad:	c3                   	ret    

c00107ae <SysPanic(regs*)>:
c00107ae:	83 ec 18             	sub    esp,0x18
c00107b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107b5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107b8:	50                   	push   eax
c00107b9:	e8 38 e4 ff ff       	call   c000ebf6 <KePanic(char const*)>
c00107be:	b8 01 00 00 00       	mov    eax,0x1
c00107c3:	31 d2                	xor    edx,edx
c00107c5:	83 c4 1c             	add    esp,0x1c
c00107c8:	c3                   	ret    

c00107c9 <SysRmdir(regs*)>:
c00107c9:	56                   	push   esi
c00107ca:	53                   	push   ebx
c00107cb:	83 ec 10             	sub    esp,0x10
c00107ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107d2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00107d5:	68 14 01 00 00       	push   0x114
c00107da:	e8 d1 e0 ff ff       	call   c000e8b0 <malloc>
c00107df:	6a 00                	push   0x0
c00107e1:	89 c3                	mov    ebx,eax
c00107e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107eb:	50                   	push   eax
c00107ec:	56                   	push   esi
c00107ed:	53                   	push   ebx
c00107ee:	e8 3b 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00107f3:	83 c4 14             	add    esp,0x14
c00107f6:	53                   	push   ebx
c00107f7:	e8 1c 7b ff ff       	call   c0008318 <File::unlink()>
c00107fc:	83 c4 10             	add    esp,0x10
c00107ff:	85 db                	test   ebx,ebx
c0010801:	89 c6                	mov    esi,eax
c0010803:	74 0c                	je     c0010811 <SysRmdir(regs*)+0x48>
c0010805:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010807:	83 ec 0c             	sub    esp,0xc
c001080a:	53                   	push   ebx
c001080b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	31 c0                	xor    eax,eax
c0010813:	85 f6                	test   esi,esi
c0010815:	0f 95 c0             	setne  al
c0010818:	31 d2                	xor    edx,edx
c001081a:	f7 d8                	neg    eax
c001081c:	83 d2 00             	adc    edx,0x0
c001081f:	83 c4 04             	add    esp,0x4
c0010822:	5b                   	pop    ebx
c0010823:	f7 da                	neg    edx
c0010825:	5e                   	pop    esi
c0010826:	c3                   	ret    

c0010827 <SysUnlink(regs*)>:
c0010827:	56                   	push   esi
c0010828:	53                   	push   ebx
c0010829:	83 ec 10             	sub    esp,0x10
c001082c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010830:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010833:	68 14 01 00 00       	push   0x114
c0010838:	e8 73 e0 ff ff       	call   c000e8b0 <malloc>
c001083d:	6a 00                	push   0x0
c001083f:	89 c3                	mov    ebx,eax
c0010841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010846:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010849:	50                   	push   eax
c001084a:	56                   	push   esi
c001084b:	53                   	push   ebx
c001084c:	e8 dd 77 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010851:	83 c4 14             	add    esp,0x14
c0010854:	53                   	push   ebx
c0010855:	e8 be 7a ff ff       	call   c0008318 <File::unlink()>
c001085a:	83 c4 10             	add    esp,0x10
c001085d:	85 db                	test   ebx,ebx
c001085f:	89 c6                	mov    esi,eax
c0010861:	74 0c                	je     c001086f <SysUnlink(regs*)+0x48>
c0010863:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010865:	83 ec 0c             	sub    esp,0xc
c0010868:	53                   	push   ebx
c0010869:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001086c:	83 c4 10             	add    esp,0x10
c001086f:	31 c0                	xor    eax,eax
c0010871:	85 f6                	test   esi,esi
c0010873:	0f 95 c0             	setne  al
c0010876:	31 d2                	xor    edx,edx
c0010878:	f7 d8                	neg    eax
c001087a:	83 d2 00             	adc    edx,0x0
c001087d:	83 c4 04             	add    esp,0x4
c0010880:	5b                   	pop    ebx
c0010881:	f7 da                	neg    edx
c0010883:	5e                   	pop    esi
c0010884:	c3                   	ret    

c0010885 <SysGetArgv(regs*)>:
c0010885:	83 ec 0c             	sub    esp,0xc
c0010888:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001088c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001088f:	85 c0                	test   eax,eax
c0010891:	78 2c                	js     c00108bf <SysGetArgv(regs*)+0x3a>
c0010893:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010899:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001089c:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00108a2:	7d 1b                	jge    c00108bf <SysGetArgv(regs*)+0x3a>
c00108a4:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00108ab:	85 c0                	test   eax,eax
c00108ad:	74 18                	je     c00108c7 <SysGetArgv(regs*)+0x42>
c00108af:	83 ec 08             	sub    esp,0x8
c00108b2:	50                   	push   eax
c00108b3:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00108b6:	50                   	push   eax
c00108b7:	e8 94 fd fe ff       	call   c0000650 <strcpy>
c00108bc:	83 c4 10             	add    esp,0x10
c00108bf:	31 c0                	xor    eax,eax
c00108c1:	31 d2                	xor    edx,edx
c00108c3:	83 c4 0c             	add    esp,0xc
c00108c6:	c3                   	ret    
c00108c7:	b8 01 00 00 00       	mov    eax,0x1
c00108cc:	31 d2                	xor    edx,edx
c00108ce:	83 c4 0c             	add    esp,0xc
c00108d1:	c3                   	ret    

c00108d2 <SysUSleep(regs*)>:
c00108d2:	83 ec 1c             	sub    esp,0x1c
c00108d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00108d9:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00108dc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00108df:	6a 00                	push   0x0
c00108e1:	6a 64                	push   0x64
c00108e3:	52                   	push   edx
c00108e4:	50                   	push   eax
c00108e5:	e8 ea f6 00 00       	call   c001ffd4 <__udivdi3>
c00108ea:	83 c4 14             	add    esp,0x14
c00108ed:	50                   	push   eax
c00108ee:	e8 4d 4f 00 00       	call   c0015840 <milliTenthSleep(unsigned int)>
c00108f3:	31 c0                	xor    eax,eax
c00108f5:	31 d2                	xor    edx,edx
c00108f7:	83 c4 1c             	add    esp,0x1c
c00108fa:	c3                   	ret    

c00108fb <SysSpawn(regs*)>:
c00108fb:	56                   	push   esi
c00108fc:	53                   	push   ebx
c00108fd:	83 ec 04             	sub    esp,0x4
c0010900:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010904:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010907:	85 f6                	test   esi,esi
c0010909:	75 0a                	jne    c0010915 <SysSpawn(regs*)+0x1a>
c001090b:	83 c4 04             	add    esp,0x4
c001090e:	31 c0                	xor    eax,eax
c0010910:	5b                   	pop    ebx
c0010911:	31 d2                	xor    edx,edx
c0010913:	5e                   	pop    esi
c0010914:	c3                   	ret    
c0010915:	83 ec 0c             	sub    esp,0xc
c0010918:	68 24 07 00 00       	push   0x724
c001091d:	e8 8e df ff ff       	call   c000e8b0 <malloc>
c0010922:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010925:	83 c4 10             	add    esp,0x10
c0010928:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001092b:	89 c6                	mov    esi,eax
c001092d:	31 c0                	xor    eax,eax
c001092f:	85 c9                	test   ecx,ecx
c0010931:	75 08                	jne    c001093b <SysSpawn(regs*)+0x40>
c0010933:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010938:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001093b:	52                   	push   edx
c001093c:	50                   	push   eax
c001093d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010940:	50                   	push   eax
c0010941:	56                   	push   esi
c0010942:	e8 81 46 00 00       	call   c0014fc8 <Process::Process(char const*, Process*, char**)>
c0010947:	83 c4 10             	add    esp,0x10
c001094a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010951:	75 b8                	jne    c001090b <SysSpawn(regs*)+0x10>
c0010953:	83 ec 0c             	sub    esp,0xc
c0010956:	56                   	push   esi
c0010957:	e8 a8 4b 00 00       	call   c0015504 <Process::createUserThread()>
c001095c:	8b 06                	mov    eax,DWORD PTR [esi]
c001095e:	83 c4 10             	add    esp,0x10
c0010961:	83 c4 04             	add    esp,0x4
c0010964:	5b                   	pop    ebx
c0010965:	89 c2                	mov    edx,eax
c0010967:	c1 fa 1f             	sar    edx,0x1f
c001096a:	5e                   	pop    esi
c001096b:	c3                   	ret    

c001096c <SysGetEnv(regs*)>:
c001096c:	57                   	push   edi
c001096d:	56                   	push   esi
c001096e:	53                   	push   ebx
c001096f:	83 ec 1c             	sub    esp,0x1c
c0010972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010977:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001097b:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001097e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010981:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010984:	51                   	push   ecx
c0010985:	e8 51 d2 ff ff       	call   c000dbdb <KeGetProcessTotalEnvCount(Process*)>
c001098a:	83 c4 10             	add    esp,0x10
c001098d:	39 c7                	cmp    edi,eax
c001098f:	7c 12                	jl     c00109a3 <SysGetEnv(regs*)+0x37>
c0010991:	31 c0                	xor    eax,eax
c0010993:	31 d2                	xor    edx,edx
c0010995:	85 f6                	test   esi,esi
c0010997:	74 03                	je     c001099c <SysGetEnv(regs*)+0x30>
c0010999:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	5b                   	pop    ebx
c00109a0:	5e                   	pop    esi
c00109a1:	5f                   	pop    edi
c00109a2:	c3                   	ret    
c00109a3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00109a7:	83 ec 04             	sub    esp,0x4
c00109aa:	57                   	push   edi
c00109ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00109b1:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00109b4:	57                   	push   edi
c00109b5:	50                   	push   eax
c00109b6:	e8 40 d2 ff ff       	call   c000dbfb <KeGetProcessEnvPair(Process*, int)>
c00109bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00109be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109c2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00109c6:	83 c4 0c             	add    esp,0xc
c00109c9:	85 d2                	test   edx,edx
c00109cb:	75 23                	jne    c00109f0 <SysGetEnv(regs*)+0x84>
c00109cd:	83 ec 0c             	sub    esp,0xc
c00109d0:	50                   	push   eax
c00109d1:	e8 aa fb fe ff       	call   c0000580 <strlen>
c00109d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109d9:	89 c3                	mov    ebx,eax
c00109db:	e8 a0 fb fe ff       	call   c0000580 <strlen>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	31 d2                	xor    edx,edx
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00109ec:	5b                   	pop    ebx
c00109ed:	5e                   	pop    esi
c00109ee:	5f                   	pop    edi
c00109ef:	c3                   	ret    
c00109f0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109f3:	83 ec 08             	sub    esp,0x8
c00109f6:	50                   	push   eax
c00109f7:	56                   	push   esi
c00109f8:	e8 53 fc fe ff       	call   c0000650 <strcpy>
c00109fd:	58                   	pop    eax
c00109fe:	5a                   	pop    edx
c00109ff:	68 99 29 02 c0       	push   0xc0022999
c0010a04:	56                   	push   esi
c0010a05:	e8 66 fe fe ff       	call   c0000870 <strcat>
c0010a0a:	59                   	pop    ecx
c0010a0b:	5b                   	pop    ebx
c0010a0c:	57                   	push   edi
c0010a0d:	56                   	push   esi
c0010a0e:	e8 5d fe fe ff       	call   c0000870 <strcat>
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	31 c0                	xor    eax,eax
c0010a18:	83 c4 10             	add    esp,0x10
c0010a1b:	31 d2                	xor    edx,edx
c0010a1d:	5b                   	pop    ebx
c0010a1e:	5e                   	pop    esi
c0010a1f:	5f                   	pop    edi
c0010a20:	c3                   	ret    

c0010a21 <SysSetFatAttrib(regs*)>:
c0010a21:	57                   	push   edi
c0010a22:	56                   	push   esi
c0010a23:	53                   	push   ebx
c0010a24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010a2e:	68 14 01 00 00       	push   0x114
c0010a33:	e8 78 de ff ff       	call   c000e8b0 <malloc>
c0010a38:	83 c4 0c             	add    esp,0xc
c0010a3b:	89 c3                	mov    ebx,eax
c0010a3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a45:	50                   	push   eax
c0010a46:	57                   	push   edi
c0010a47:	53                   	push   ebx
c0010a48:	e8 df 76 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0010a4d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010a50:	83 c4 0c             	add    esp,0xc
c0010a53:	0f b6 d4             	movzx  edx,ah
c0010a56:	0f b6 c0             	movzx  eax,al
c0010a59:	52                   	push   edx
c0010a5a:	50                   	push   eax
c0010a5b:	53                   	push   ebx
c0010a5c:	e8 51 79 ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c0010a61:	83 c4 10             	add    esp,0x10
c0010a64:	85 db                	test   ebx,ebx
c0010a66:	89 c6                	mov    esi,eax
c0010a68:	74 0c                	je     c0010a76 <SysSetFatAttrib(regs*)+0x55>
c0010a6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a6c:	83 ec 0c             	sub    esp,0xc
c0010a6f:	53                   	push   ebx
c0010a70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a73:	83 c4 10             	add    esp,0x10
c0010a76:	5b                   	pop    ebx
c0010a77:	31 c0                	xor    eax,eax
c0010a79:	85 f6                	test   esi,esi
c0010a7b:	0f 95 c0             	setne  al
c0010a7e:	31 d2                	xor    edx,edx
c0010a80:	5e                   	pop    esi
c0010a81:	f7 d8                	neg    eax
c0010a83:	83 d2 00             	adc    edx,0x0
c0010a86:	f7 da                	neg    edx
c0010a88:	5f                   	pop    edi
c0010a89:	c3                   	ret    

c0010a8a <SysShutdown(regs*)>:
c0010a8a:	83 ec 1c             	sub    esp,0x1c
c0010a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a91:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010a94:	85 c9                	test   ecx,ecx
c0010a96:	74 18                	je     c0010ab0 <SysShutdown(regs*)+0x26>
c0010a98:	83 f9 01             	cmp    ecx,0x1
c0010a9b:	74 26                	je     c0010ac3 <SysShutdown(regs*)+0x39>
c0010a9d:	83 f9 02             	cmp    ecx,0x2
c0010aa0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aa5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010aaa:	74 24                	je     c0010ad0 <SysShutdown(regs*)+0x46>
c0010aac:	83 c4 1c             	add    esp,0x1c
c0010aaf:	c3                   	ret    
c0010ab0:	e8 9f cb ff ff       	call   c000d654 <KeShutdown()>
c0010ab5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aba:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010abf:	83 c4 1c             	add    esp,0x1c
c0010ac2:	c3                   	ret    
c0010ac3:	e8 b0 cb ff ff       	call   c000d678 <KeSleep()>
c0010ac8:	31 c0                	xor    eax,eax
c0010aca:	31 d2                	xor    edx,edx
c0010acc:	83 c4 1c             	add    esp,0x1c
c0010acf:	c3                   	ret    
c0010ad0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ad4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010ad8:	e8 a7 cb ff ff       	call   c000d684 <KeRestart()>
c0010add:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ae1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ae5:	eb c5                	jmp    c0010aac <SysShutdown(regs*)+0x22>

c0010ae7 <SysPipe(regs*)>:
c0010ae7:	57                   	push   edi
c0010ae8:	56                   	push   esi
c0010ae9:	53                   	push   ebx
c0010aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010af4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010af7:	6a 20                	push   0x20
c0010af9:	e8 b2 dd ff ff       	call   c000e8b0 <malloc>
c0010afe:	89 c3                	mov    ebx,eax
c0010b00:	58                   	pop    eax
c0010b01:	5a                   	pop    edx
c0010b02:	68 00 50 00 00       	push   0x5000
c0010b07:	53                   	push   ebx
c0010b08:	e8 65 e9 ff ff       	call   c000f472 <Pipe::Pipe(int)>
c0010b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b10:	e8 47 10 00 00       	call   c0011b5c <UnixFile::getFileDescriptor()>
c0010b15:	89 07                	mov    DWORD PTR [edi],eax
c0010b17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b1a:	e8 3d 10 00 00       	call   c0011b5c <UnixFile::getFileDescriptor()>
c0010b1f:	83 c4 10             	add    esp,0x10
c0010b22:	31 d2                	xor    edx,edx
c0010b24:	89 06                	mov    DWORD PTR [esi],eax
c0010b26:	31 c0                	xor    eax,eax
c0010b28:	5b                   	pop    ebx
c0010b29:	5e                   	pop    esi
c0010b2a:	5f                   	pop    edi
c0010b2b:	c3                   	ret    

c0010b2c <SysGetUnixTime(regs*)>:
c0010b2c:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0010b31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b3b:	e9 74 80 ff ff       	jmp    c0008bb4 <Clock::timeInSecondsLocal()>

c0010b40 <string_ends_with(char const*, char const*)>:
c0010b40:	57                   	push   edi
c0010b41:	56                   	push   esi
c0010b42:	53                   	push   ebx
c0010b43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b47:	83 ec 0c             	sub    esp,0xc
c0010b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010b4e:	53                   	push   ebx
c0010b4f:	e8 2c fa fe ff       	call   c0000580 <strlen>
c0010b54:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b57:	89 c6                	mov    esi,eax
c0010b59:	e8 22 fa fe ff       	call   c0000580 <strlen>
c0010b5e:	83 c4 10             	add    esp,0x10
c0010b61:	31 d2                	xor    edx,edx
c0010b63:	39 c6                	cmp    esi,eax
c0010b65:	7d 06                	jge    c0010b6d <string_ends_with(char const*, char const*)+0x2d>
c0010b67:	5b                   	pop    ebx
c0010b68:	89 d0                	mov    eax,edx
c0010b6a:	5e                   	pop    esi
c0010b6b:	5f                   	pop    edi
c0010b6c:	c3                   	ret    
c0010b6d:	83 ec 08             	sub    esp,0x8
c0010b70:	29 c6                	sub    esi,eax
c0010b72:	57                   	push   edi
c0010b73:	01 f3                	add    ebx,esi
c0010b75:	53                   	push   ebx
c0010b76:	e8 05 fc fe ff       	call   c0000780 <strcmp>
c0010b7b:	83 c4 10             	add    esp,0x10
c0010b7e:	31 d2                	xor    edx,edx
c0010b80:	5b                   	pop    ebx
c0010b81:	5e                   	pop    esi
c0010b82:	85 c0                	test   eax,eax
c0010b84:	5f                   	pop    edi
c0010b85:	0f 94 c2             	sete   dl
c0010b88:	89 d0                	mov    eax,edx
c0010b8a:	c3                   	ret    

c0010b8b <SysOpen(regs*)>:
c0010b8b:	56                   	push   esi
c0010b8c:	53                   	push   ebx
c0010b8d:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b93:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b9a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b9d:	85 c0                	test   eax,eax
c0010b9f:	0f 84 c4 01 00 00    	je     c0010d69 <SysOpen(regs*)+0x1de>
c0010ba5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ba8:	85 c0                	test   eax,eax
c0010baa:	0f 84 b9 01 00 00    	je     c0010d69 <SysOpen(regs*)+0x1de>
c0010bb0:	6a 00                	push   0x0
c0010bb2:	68 9b 29 02 c0       	push   0xc002299b
c0010bb7:	50                   	push   eax
c0010bb8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010bbc:	56                   	push   esi
c0010bbd:	e8 3e 72 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010bc2:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bc5:	e8 b6 f9 fe ff       	call   c0000580 <strlen>
c0010bca:	83 c4 10             	add    esp,0x10
c0010bcd:	83 e8 01             	sub    eax,0x1
c0010bd0:	74 29                	je     c0010bfb <SysOpen(regs*)+0x70>
c0010bd2:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010bd6:	83 fa 2e             	cmp    edx,0x2e
c0010bd9:	74 1c                	je     c0010bf7 <SysOpen(regs*)+0x6c>
c0010bdb:	83 fa 3a             	cmp    edx,0x3a
c0010bde:	74 17                	je     c0010bf7 <SysOpen(regs*)+0x6c>
c0010be0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010be4:	83 e8 01             	sub    eax,0x1
c0010be7:	74 12                	je     c0010bfb <SysOpen(regs*)+0x70>
c0010be9:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010bed:	83 fa 3a             	cmp    edx,0x3a
c0010bf0:	74 05                	je     c0010bf7 <SysOpen(regs*)+0x6c>
c0010bf2:	83 fa 2e             	cmp    edx,0x2e
c0010bf5:	75 e9                	jne    c0010be0 <SysOpen(regs*)+0x55>
c0010bf7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010bfb:	83 ec 08             	sub    esp,0x8
c0010bfe:	68 9f 29 02 c0       	push   0xc002299f
c0010c03:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c06:	50                   	push   eax
c0010c07:	e8 34 ff ff ff       	call   c0010b40 <string_ends_with(char const*, char const*)>
c0010c0c:	83 c4 10             	add    esp,0x10
c0010c0f:	85 c0                	test   eax,eax
c0010c11:	74 1d                	je     c0010c30 <SysOpen(regs*)+0xa5>
c0010c13:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c16:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010c1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c23:	81 c4 04 01 00 00    	add    esp,0x104
c0010c29:	31 c0                	xor    eax,eax
c0010c2b:	5b                   	pop    ebx
c0010c2c:	31 d2                	xor    edx,edx
c0010c2e:	5e                   	pop    esi
c0010c2f:	c3                   	ret    
c0010c30:	83 ec 08             	sub    esp,0x8
c0010c33:	68 a4 29 02 c0       	push   0xc00229a4
c0010c38:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c3b:	50                   	push   eax
c0010c3c:	e8 ff fe ff ff       	call   c0010b40 <string_ends_with(char const*, char const*)>
c0010c41:	83 c4 10             	add    esp,0x10
c0010c44:	85 c0                	test   eax,eax
c0010c46:	75 cb                	jne    c0010c13 <SysOpen(regs*)+0x88>
c0010c48:	83 ec 08             	sub    esp,0x8
c0010c4b:	68 a0 29 02 c0       	push   0xc00229a0
c0010c50:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c53:	50                   	push   eax
c0010c54:	e8 27 fb fe ff       	call   c0000780 <strcmp>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	85 c0                	test   eax,eax
c0010c5e:	74 b3                	je     c0010c13 <SysOpen(regs*)+0x88>
c0010c60:	83 ec 08             	sub    esp,0x8
c0010c63:	68 9f 29 02 c0       	push   0xc002299f
c0010c68:	56                   	push   esi
c0010c69:	e8 d2 fe ff ff       	call   c0010b40 <string_ends_with(char const*, char const*)>
c0010c6e:	83 c4 10             	add    esp,0x10
c0010c71:	85 c0                	test   eax,eax
c0010c73:	75 9e                	jne    c0010c13 <SysOpen(regs*)+0x88>
c0010c75:	83 ec 08             	sub    esp,0x8
c0010c78:	68 a9 29 02 c0       	push   0xc00229a9
c0010c7d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c80:	50                   	push   eax
c0010c81:	e8 ba fe ff ff       	call   c0010b40 <string_ends_with(char const*, char const*)>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	85 c0                	test   eax,eax
c0010c8b:	0f 85 eb 00 00 00    	jne    c0010d7c <SysOpen(regs*)+0x1f1>
c0010c91:	83 ec 08             	sub    esp,0x8
c0010c94:	68 ae 29 02 c0       	push   0xc00229ae
c0010c99:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c9c:	50                   	push   eax
c0010c9d:	e8 9e fe ff ff       	call   c0010b40 <string_ends_with(char const*, char const*)>
c0010ca2:	83 c4 10             	add    esp,0x10
c0010ca5:	85 c0                	test   eax,eax
c0010ca7:	0f 85 cf 00 00 00    	jne    c0010d7c <SysOpen(regs*)+0x1f1>
c0010cad:	83 ec 08             	sub    esp,0x8
c0010cb0:	68 aa 29 02 c0       	push   0xc00229aa
c0010cb5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cb8:	51                   	push   ecx
c0010cb9:	e8 c2 fa fe ff       	call   c0000780 <strcmp>
c0010cbe:	83 c4 10             	add    esp,0x10
c0010cc1:	85 c0                	test   eax,eax
c0010cc3:	0f 84 b3 00 00 00    	je     c0010d7c <SysOpen(regs*)+0x1f1>
c0010cc9:	83 ec 08             	sub    esp,0x8
c0010ccc:	68 a9 29 02 c0       	push   0xc00229a9
c0010cd1:	56                   	push   esi
c0010cd2:	e8 69 fe ff ff       	call   c0010b40 <string_ends_with(char const*, char const*)>
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	85 c0                	test   eax,eax
c0010cdc:	0f 85 9a 00 00 00    	jne    c0010d7c <SysOpen(regs*)+0x1f1>
c0010ce2:	83 ec 0c             	sub    esp,0xc
c0010ce5:	68 14 01 00 00       	push   0x114
c0010cea:	e8 c1 db ff ff       	call   c000e8b0 <malloc>
c0010cef:	83 c4 0c             	add    esp,0xc
c0010cf2:	89 c6                	mov    esi,eax
c0010cf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cf9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cfc:	50                   	push   eax
c0010cfd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010d00:	52                   	push   edx
c0010d01:	56                   	push   esi
c0010d02:	e8 25 74 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	85 f6                	test   esi,esi
c0010d0c:	74 5b                	je     c0010d69 <SysOpen(regs*)+0x1de>
c0010d0e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d11:	0f b6 c2             	movzx  eax,dl
c0010d14:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d17:	89 d0                	mov    eax,edx
c0010d19:	83 e0 01             	and    eax,0x1
c0010d1c:	f6 c2 02             	test   dl,0x2
c0010d1f:	74 03                	je     c0010d24 <SysOpen(regs*)+0x199>
c0010d21:	83 c8 02             	or     eax,0x2
c0010d24:	f6 c2 04             	test   dl,0x4
c0010d27:	74 03                	je     c0010d2c <SysOpen(regs*)+0x1a1>
c0010d29:	83 c8 04             	or     eax,0x4
c0010d2c:	f6 c2 08             	test   dl,0x8
c0010d2f:	74 03                	je     c0010d34 <SysOpen(regs*)+0x1a9>
c0010d31:	83 c8 0a             	or     eax,0xa
c0010d34:	80 e2 10             	and    dl,0x10
c0010d37:	74 03                	je     c0010d3c <SysOpen(regs*)+0x1b1>
c0010d39:	83 c8 12             	or     eax,0x12
c0010d3c:	83 ec 08             	sub    esp,0x8
c0010d3f:	50                   	push   eax
c0010d40:	56                   	push   esi
c0010d41:	e8 04 74 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	85 c0                	test   eax,eax
c0010d4b:	75 1c                	jne    c0010d69 <SysOpen(regs*)+0x1de>
c0010d4d:	83 ec 0c             	sub    esp,0xc
c0010d50:	56                   	push   esi
c0010d51:	e8 06 0e 00 00       	call   c0011b5c <UnixFile::getFileDescriptor()>
c0010d56:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	89 02                	mov    DWORD PTR [edx],eax
c0010d5e:	c1 f8 1f             	sar    eax,0x1f
c0010d61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d64:	e9 ba fe ff ff       	jmp    c0010c23 <SysOpen(regs*)+0x98>
c0010d69:	81 c4 04 01 00 00    	add    esp,0x104
c0010d6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d74:	5b                   	pop    ebx
c0010d75:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d7a:	5e                   	pop    esi
c0010d7b:	c3                   	ret    
c0010d7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d7f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d85:	e9 92 fe ff ff       	jmp    c0010c1c <SysOpen(regs*)+0x91>

c0010d8a <KeSystemCall(regs*, void*)>:
c0010d8a:	53                   	push   ebx
c0010d8b:	83 ec 08             	sub    esp,0x8
c0010d8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d92:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010d95:	83 f8 40             	cmp    eax,0x40
c0010d98:	77 29                	ja     c0010dc3 <KeSystemCall(regs*, void*)+0x39>
c0010d9a:	83 3c 85 c0 4b 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdb440],0x0
c0010da2:	74 1f                	je     c0010dc3 <KeSystemCall(regs*, void*)+0x39>
c0010da4:	51                   	push   ecx
c0010da5:	51                   	push   ecx
c0010da6:	50                   	push   eax
c0010da7:	68 b3 29 02 c0       	push   0xc00229b3
c0010dac:	e8 9d 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010db1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010db4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db7:	ff 14 85 c0 4b 02 c0 	call   DWORD PTR [eax*4-0x3ffdb440]
c0010dbe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010dc1:	eb 0d                	jmp    c0010dd0 <KeSystemCall(regs*, void*)+0x46>
c0010dc3:	52                   	push   edx
c0010dc4:	52                   	push   edx
c0010dc5:	50                   	push   eax
c0010dc6:	68 d0 29 02 c0       	push   0xc00229d0
c0010dcb:	e8 7e 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010dd0:	83 c4 10             	add    esp,0x10
c0010dd3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010dd8:	83 c4 08             	add    esp,0x8
c0010ddb:	31 d2                	xor    edx,edx
c0010ddd:	5b                   	pop    ebx
c0010dde:	c3                   	ret    
c0010ddf:	90                   	nop

c0010de0 <VgaText::isAtty()>:
c0010de0:	b0 01                	mov    al,0x1
c0010de2:	c3                   	ret    
c0010de3:	90                   	nop

c0010de4 <VgaText::~VgaText()>:
c0010de4:	83 ec 0c             	sub    esp,0xc
c0010de7:	ba 18 2a 02 c0       	mov    edx,0xc0022a18
c0010dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df0:	89 10                	mov    DWORD PTR [eax],edx
c0010df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df6:	83 ec 0c             	sub    esp,0xc
c0010df9:	50                   	push   eax
c0010dfa:	e8 4b 0f 00 00       	call   c0011d4a <UnixFile::~UnixFile()>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	90                   	nop
c0010e03:	83 c4 0c             	add    esp,0xc
c0010e06:	c3                   	ret    
c0010e07:	90                   	nop

c0010e08 <VgaText::~VgaText()>:
c0010e08:	83 ec 0c             	sub    esp,0xc
c0010e0b:	83 ec 0c             	sub    esp,0xc
c0010e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e12:	e8 cd ff ff ff       	call   c0010de4 <VgaText::~VgaText()>
c0010e17:	83 c4 10             	add    esp,0x10
c0010e1a:	83 ec 08             	sub    esp,0x8
c0010e1d:	68 84 01 00 00       	push   0x184
c0010e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e26:	e8 f0 b7 ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	83 c4 0c             	add    esp,0xc
c0010e31:	c3                   	ret    

c0010e32 <VgaText::read(unsigned long long, void*, int*)>:
c0010e32:	83 ec 10             	sub    esp,0x10
c0010e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e41:	e8 73 8d ff ff       	call   c0009bb9 <readKeyboard(VgaText*, char*, unsigned long)>
c0010e46:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e4a:	89 02                	mov    DWORD PTR [edx],eax
c0010e4c:	31 c0                	xor    eax,eax
c0010e4e:	83 c4 1c             	add    esp,0x1c
c0010e51:	c3                   	ret    

c0010e52 <setTerminalScrollLock(bool)>:
c0010e52:	c3                   	ret    

c0010e53 <doTerminalCycle()>:
c0010e53:	c3                   	ret    

c0010e54 <addToTerminalCycle(VgaText*)>:
c0010e54:	c3                   	ret    

c0010e55 <scrollTerminalScrollLock(int)>:
c0010e55:	c3                   	ret    

c0010e56 <VgaText::updateTitle()>:
c0010e56:	c3                   	ret    
c0010e57:	90                   	nop

c0010e58 <VgaText::load()>:
c0010e58:	c3                   	ret    
c0010e59:	90                   	nop

c0010e5a <VgaText::updateCursor()>:
c0010e5a:	83 ec 14             	sub    esp,0x14
c0010e5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e61:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010e64:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010e67:	e8 18 8a 00 00       	call   c0019884 <HalConsoleCursorUpdate(int, int)>
c0010e6c:	83 c4 1c             	add    esp,0x1c
c0010e6f:	c3                   	ret    

c0010e70 <VgaText::doANSI_SGR(int)>:
c0010e70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e78:	85 d2                	test   edx,edx
c0010e7a:	75 0b                	jne    c0010e87 <VgaText::doANSI_SGR(int)+0x17>
c0010e7c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010e7f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e82:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e85:	eb 59                	jmp    c0010ee0 <VgaText::doANSI_SGR(int)+0x70>
c0010e87:	83 fa 07             	cmp    edx,0x7
c0010e8a:	75 0b                	jne    c0010e97 <VgaText::doANSI_SGR(int)+0x27>
c0010e8c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010e8f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010e92:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010e95:	eb 49                	jmp    c0010ee0 <VgaText::doANSI_SGR(int)+0x70>
c0010e97:	83 fa 1b             	cmp    edx,0x1b
c0010e9a:	74 e0                	je     c0010e7c <VgaText::doANSI_SGR(int)+0xc>
c0010e9c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010e9f:	83 f9 07             	cmp    ecx,0x7
c0010ea2:	77 09                	ja     c0010ead <VgaText::doANSI_SGR(int)+0x3d>
c0010ea4:	8b 14 8d 00 4d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb300]
c0010eab:	eb 20                	jmp    c0010ecd <VgaText::doANSI_SGR(int)+0x5d>
c0010ead:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010eb0:	83 f9 07             	cmp    ecx,0x7
c0010eb3:	77 09                	ja     c0010ebe <VgaText::doANSI_SGR(int)+0x4e>
c0010eb5:	8b 14 8d 00 4d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb300]
c0010ebc:	eb 22                	jmp    c0010ee0 <VgaText::doANSI_SGR(int)+0x70>
c0010ebe:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010ec1:	83 f9 07             	cmp    ecx,0x7
c0010ec4:	77 0b                	ja     c0010ed1 <VgaText::doANSI_SGR(int)+0x61>
c0010ec6:	8b 14 95 b8 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb448]
c0010ecd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010ed0:	c3                   	ret    
c0010ed1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010ed4:	83 f9 07             	cmp    ecx,0x7
c0010ed7:	77 0a                	ja     c0010ee3 <VgaText::doANSI_SGR(int)+0x73>
c0010ed9:	8b 14 95 90 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb470]
c0010ee0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010ee3:	c3                   	ret    

c0010ee4 <VgaText::setDefaultBgColour(VgaColour)>:
c0010ee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010eef:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010ef2:	c3                   	ret    
c0010ef3:	90                   	nop

c0010ef4 <VgaText::setDefaultFgColour(VgaColour)>:
c0010ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010efc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010eff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f02:	c3                   	ret    
c0010f03:	90                   	nop

c0010f04 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010f04:	53                   	push   ebx
c0010f05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f11:	51                   	push   ecx
c0010f12:	e8 cd ff ff ff       	call   c0010ee4 <VgaText::setDefaultBgColour(VgaColour)>
c0010f17:	58                   	pop    eax
c0010f18:	5a                   	pop    edx
c0010f19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010f21:	5b                   	pop    ebx
c0010f22:	eb d0                	jmp    c0010ef4 <VgaText::setDefaultFgColour(VgaColour)>

c0010f24 <VgaText::setTitleTextColour(VgaColour)>:
c0010f24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f2c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010f2f:	c3                   	ret    

c0010f30 <VgaText::setTitleColour(VgaColour)>:
c0010f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f38:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f3b:	c3                   	ret    

c0010f3c <VgaText::setTitle(char*)>:
c0010f3c:	c3                   	ret    
c0010f3d:	90                   	nop

c0010f3e <VgaText::combineColours(unsigned char, unsigned char)>:
c0010f3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f42:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010f47:	83 e0 0f             	and    eax,0xf
c0010f4a:	c1 e2 04             	shl    edx,0x4
c0010f4d:	09 d0                	or     eax,edx
c0010f4f:	c3                   	ret    

c0010f50 <VgaText::scrollScreen()>:
c0010f50:	55                   	push   ebp
c0010f51:	57                   	push   edi
c0010f52:	56                   	push   esi
c0010f53:	be 01 00 00 00       	mov    esi,0x1
c0010f58:	53                   	push   ebx
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f60:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010f63:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010f69:	31 ff                	xor    edi,edi
c0010f6b:	01 e9                	add    ecx,ebp
c0010f6d:	8a 01                	mov    al,BYTE PTR [ecx]
c0010f6f:	83 fe 18             	cmp    esi,0x18
c0010f72:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010f78:	75 20                	jne    c0010f9a <VgaText::scrollScreen()+0x4a>
c0010f7a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010f80:	74 15                	je     c0010f97 <VgaText::scrollScreen()+0x47>
c0010f82:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f86:	50                   	push   eax
c0010f87:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f8b:	50                   	push   eax
c0010f8c:	e8 ad ff ff ff       	call   c0010f3e <VgaText::combineColours(unsigned char, unsigned char)>
c0010f91:	5a                   	pop    edx
c0010f92:	5a                   	pop    edx
c0010f93:	88 01                	mov    BYTE PTR [ecx],al
c0010f95:	eb 03                	jmp    c0010f9a <VgaText::scrollScreen()+0x4a>
c0010f97:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010f9a:	47                   	inc    edi
c0010f9b:	41                   	inc    ecx
c0010f9c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010fa2:	75 c9                	jne    c0010f6d <VgaText::scrollScreen()+0x1d>
c0010fa4:	46                   	inc    esi
c0010fa5:	83 fe 19             	cmp    esi,0x19
c0010fa8:	75 b9                	jne    c0010f63 <VgaText::scrollScreen()+0x13>
c0010faa:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c0010fb0:	75 1f                	jne    c0010fd1 <VgaText::scrollScreen()+0x81>
c0010fb2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010fb6:	74 05                	je     c0010fbd <VgaText::scrollScreen()+0x6d>
c0010fb8:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010fbb:	eb 14                	jmp    c0010fd1 <VgaText::scrollScreen()+0x81>
c0010fbd:	50                   	push   eax
c0010fbe:	50                   	push   eax
c0010fbf:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010fc3:	50                   	push   eax
c0010fc4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010fc8:	50                   	push   eax
c0010fc9:	e8 4a 87 00 00       	call   c0019718 <HalConsoleScroll(int, int)>
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010fd5:	83 c4 0c             	add    esp,0xc
c0010fd8:	5b                   	pop    ebx
c0010fd9:	5e                   	pop    esi
c0010fda:	5f                   	pop    edi
c0010fdb:	5d                   	pop    ebp
c0010fdc:	e9 79 fe ff ff       	jmp    c0010e5a <VgaText::updateCursor()>
c0010fe1:	90                   	nop

c0010fe2 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010fe2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010fe7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0010fec:	c1 e0 08             	shl    eax,0x8
c0010fef:	09 d0                	or     eax,edx
c0010ff1:	c3                   	ret    

c0010ff2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010ff2:	55                   	push   ebp
c0010ff3:	57                   	push   edi
c0010ff4:	56                   	push   esi
c0010ff5:	53                   	push   ebx
c0010ff6:	83 ec 1c             	sub    esp,0x1c
c0010ff9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010ffd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011001:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011005:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011009:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001100d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011011:	0f b6 c3             	movzx  eax,bl
c0011014:	50                   	push   eax
c0011015:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001101a:	50                   	push   eax
c001101b:	e8 1e ff ff ff       	call   c0010f3e <VgaText::combineColours(unsigned char, unsigned char)>
c0011020:	5a                   	pop    edx
c0011021:	59                   	pop    ecx
c0011022:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0011027:	0f b6 c0             	movzx  eax,al
c001102a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001102e:	50                   	push   eax
c001102f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011033:	e8 aa ff ff ff       	call   c0010fe2 <VgaText::combineCharAndColour(char, unsigned char)>
c0011038:	5a                   	pop    edx
c0011039:	6b d7 50             	imul   edx,edi,0x50
c001103c:	59                   	pop    ecx
c001103d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0011040:	01 f2                	add    edx,esi
c0011042:	0f b7 d2             	movzx  edx,dx
c0011045:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0011049:	39 2d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebp
c001104f:	75 28                	jne    c0011079 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0011051:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0011055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011059:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c001105d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0011061:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011069:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001106d:	83 c4 1c             	add    esp,0x1c
c0011070:	5b                   	pop    ebx
c0011071:	5e                   	pop    esi
c0011072:	5f                   	pop    edi
c0011073:	5d                   	pop    ebp
c0011074:	e9 a7 87 00 00       	jmp    c0019820 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011079:	83 c4 1c             	add    esp,0x1c
c001107c:	5b                   	pop    ebx
c001107d:	5e                   	pop    esi
c001107e:	5f                   	pop    edi
c001107f:	5d                   	pop    ebp
c0011080:	c3                   	ret    
c0011081:	90                   	nop

c0011082 <VgaText::getCursorX()>:
c0011082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011086:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011089:	c3                   	ret    

c001108a <VgaText::getCursorY()>:
c001108a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001108e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011091:	c3                   	ret    

c0011092 <VgaText::setCursor(int, int)>:
c0011092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011096:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001109a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001109d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00110a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00110a4:	e9 b1 fd ff ff       	jmp    c0010e5a <VgaText::updateCursor()>

c00110a9 <setActiveTerminal(VgaText*)>:
c00110a9:	53                   	push   ebx
c00110aa:	83 ec 08             	sub    esp,0x8
c00110ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110b1:	85 db                	test   ebx,ebx
c00110b3:	75 11                	jne    c00110c6 <setActiveTerminal(VgaText*)+0x1d>
c00110b5:	c7 44 24 10 e4 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc00229e4
c00110bd:	83 c4 08             	add    esp,0x8
c00110c0:	5b                   	pop    ebx
c00110c1:	e9 30 db ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c00110c6:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c00110cb:	85 c0                	test   eax,eax
c00110cd:	74 0c                	je     c00110db <setActiveTerminal(VgaText*)+0x32>
c00110cf:	83 ec 0c             	sub    esp,0xc
c00110d2:	50                   	push   eax
c00110d3:	e8 82 fd ff ff       	call   c0010e5a <VgaText::updateCursor()>
c00110d8:	83 c4 10             	add    esp,0x10
c00110db:	50                   	push   eax
c00110dc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110df:	89 1d 34 ce 02 c0    	mov    DWORD PTR ds:0xc002ce34,ebx
c00110e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110e8:	53                   	push   ebx
c00110e9:	e8 a4 ff ff ff       	call   c0011092 <VgaText::setCursor(int, int)>
c00110ee:	83 c4 18             	add    esp,0x18
c00110f1:	5b                   	pop    ebx
c00110f2:	c3                   	ret    
c00110f3:	90                   	nop

c00110f4 <VgaText::clearScreen()>:
c00110f4:	57                   	push   edi
c00110f5:	56                   	push   esi
c00110f6:	31 f6                	xor    esi,esi
c00110f8:	53                   	push   ebx
c00110f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110fd:	52                   	push   edx
c00110fe:	6a 00                	push   0x0
c0011100:	6a 00                	push   0x0
c0011102:	53                   	push   ebx
c0011103:	e8 8a ff ff ff       	call   c0011092 <VgaText::setCursor(int, int)>
c0011108:	83 c4 10             	add    esp,0x10
c001110b:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0011112:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011115:	7e 20                	jle    c0011137 <VgaText::clearScreen()+0x43>
c0011117:	31 ff                	xor    edi,edi
c0011119:	50                   	push   eax
c001111a:	50                   	push   eax
c001111b:	56                   	push   esi
c001111c:	57                   	push   edi
c001111d:	47                   	inc    edi
c001111e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011121:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011124:	6a 20                	push   0x20
c0011126:	53                   	push   ebx
c0011127:	e8 c6 fe ff ff       	call   c0010ff2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001112c:	83 c4 20             	add    esp,0x20
c001112f:	83 ff 50             	cmp    edi,0x50
c0011132:	75 e5                	jne    c0011119 <VgaText::clearScreen()+0x25>
c0011134:	46                   	inc    esi
c0011135:	eb db                	jmp    c0011112 <VgaText::clearScreen()+0x1e>
c0011137:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001113e:	5b                   	pop    ebx
c001113f:	5e                   	pop    esi
c0011140:	5f                   	pop    edi
c0011141:	c3                   	ret    

c0011142 <VgaText::setCursorX(int)>:
c0011142:	83 ec 10             	sub    esp,0x10
c0011145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011149:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001114c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011150:	50                   	push   eax
c0011151:	e8 3c ff ff ff       	call   c0011092 <VgaText::setCursor(int, int)>
c0011156:	83 c4 1c             	add    esp,0x1c
c0011159:	c3                   	ret    

c001115a <VgaText::setCursorY(int)>:
c001115a:	83 ec 10             	sub    esp,0x10
c001115d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011165:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011168:	50                   	push   eax
c0011169:	e8 24 ff ff ff       	call   c0011092 <VgaText::setCursor(int, int)>
c001116e:	83 c4 1c             	add    esp,0x1c
c0011171:	c3                   	ret    

c0011172 <VgaText::incrementCursor(bool)>:
c0011172:	56                   	push   esi
c0011173:	53                   	push   ebx
c0011174:	51                   	push   ecx
c0011175:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011179:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001117d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011180:	40                   	inc    eax
c0011181:	83 f8 50             	cmp    eax,0x50
c0011184:	74 05                	je     c001118b <VgaText::incrementCursor(bool)+0x19>
c0011186:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011189:	eb 24                	jmp    c00111af <VgaText::incrementCursor(bool)+0x3d>
c001118b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011192:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011195:	8d 50 01             	lea    edx,[eax+0x1]
c0011198:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001119b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001119e:	75 0f                	jne    c00111af <VgaText::incrementCursor(bool)+0x3d>
c00111a0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00111a3:	83 ec 0c             	sub    esp,0xc
c00111a6:	53                   	push   ebx
c00111a7:	e8 a4 fd ff ff       	call   c0010f50 <VgaText::scrollScreen()>
c00111ac:	83 c4 10             	add    esp,0x10
c00111af:	89 f0                	mov    eax,esi
c00111b1:	84 c0                	test   al,al
c00111b3:	74 0c                	je     c00111c1 <VgaText::incrementCursor(bool)+0x4f>
c00111b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00111b9:	5a                   	pop    edx
c00111ba:	5b                   	pop    ebx
c00111bb:	5e                   	pop    esi
c00111bc:	e9 99 fc ff ff       	jmp    c0010e5a <VgaText::updateCursor()>
c00111c1:	58                   	pop    eax
c00111c2:	5b                   	pop    ebx
c00111c3:	5e                   	pop    esi
c00111c4:	c3                   	ret    
c00111c5:	90                   	nop

c00111c6 <VgaText::decrementCursor(bool)>:
c00111c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00111ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111ce:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00111d1:	85 c0                	test   eax,eax
c00111d3:	74 04                	je     c00111d9 <VgaText::decrementCursor(bool)+0x13>
c00111d5:	48                   	dec    eax
c00111d6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00111d9:	84 c9                	test   cl,cl
c00111db:	74 09                	je     c00111e6 <VgaText::decrementCursor(bool)+0x20>
c00111dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00111e1:	e9 74 fc ff ff       	jmp    c0010e5a <VgaText::updateCursor()>
c00111e6:	c3                   	ret    
c00111e7:	90                   	nop

c00111e8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00111e8:	53                   	push   ebx
c00111e9:	83 ec 08             	sub    esp,0x8
c00111ec:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00111f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00111fd:	83 f8 07             	cmp    eax,0x7
c0011200:	75 21                	jne    c0011223 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011202:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001120a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011212:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001121a:	83 c4 08             	add    esp,0x8
c001121d:	5b                   	pop    ebx
c001121e:	e9 ab 77 ff ff       	jmp    c00089ce <KeBeep(int, int, bool)>
c0011223:	83 f8 0d             	cmp    eax,0xd
c0011226:	75 09                	jne    c0011231 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011228:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001122f:	eb 2d                	jmp    c001125e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011231:	83 f8 0a             	cmp    eax,0xa
c0011234:	75 31                	jne    c0011267 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011236:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001123d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011240:	8d 50 01             	lea    edx,[eax+0x1]
c0011243:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011246:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011249:	75 0f                	jne    c001125a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001124b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001124e:	83 ec 0c             	sub    esp,0xc
c0011251:	53                   	push   ebx
c0011252:	e8 f9 fc ff ff       	call   c0010f50 <VgaText::scrollScreen()>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001125e:	83 c4 08             	add    esp,0x8
c0011261:	5b                   	pop    ebx
c0011262:	e9 f3 fb ff ff       	jmp    c0010e5a <VgaText::updateCursor()>
c0011267:	83 f8 08             	cmp    eax,0x8
c001126a:	75 25                	jne    c0011291 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001126c:	50                   	push   eax
c001126d:	50                   	push   eax
c001126e:	6a 01                	push   0x1
c0011270:	53                   	push   ebx
c0011271:	e8 50 ff ff ff       	call   c00111c6 <VgaText::decrementCursor(bool)>
c0011276:	5a                   	pop    edx
c0011277:	59                   	pop    ecx
c0011278:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001127b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001127e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011281:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011284:	6a 20                	push   0x20
c0011286:	53                   	push   ebx
c0011287:	e8 66 fd ff ff       	call   c0010ff2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001128c:	83 c4 28             	add    esp,0x28
c001128f:	5b                   	pop    ebx
c0011290:	c3                   	ret    
c0011291:	83 ec 08             	sub    esp,0x8
c0011294:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011297:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001129a:	51                   	push   ecx
c001129b:	52                   	push   edx
c001129c:	50                   	push   eax
c001129d:	53                   	push   ebx
c001129e:	e8 4f fd ff ff       	call   c0010ff2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00112a3:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00112a7:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00112af:	83 c4 28             	add    esp,0x28
c00112b2:	5b                   	pop    ebx
c00112b3:	e9 ba fe ff ff       	jmp    c0011172 <VgaText::incrementCursor(bool)>

c00112b8 <VgaText::putchar(char)>:
c00112b8:	57                   	push   edi
c00112b9:	56                   	push   esi
c00112ba:	53                   	push   ebx
c00112bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112c3:	0f be c2             	movsx  eax,dl
c00112c6:	83 f8 5b             	cmp    eax,0x5b
c00112c9:	75 18                	jne    c00112e3 <VgaText::putchar(char)+0x2b>
c00112cb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00112cf:	74 20                	je     c00112f1 <VgaText::putchar(char)+0x39>
c00112d1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00112d7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00112de:	e9 b8 00 00 00       	jmp    c001139b <VgaText::putchar(char)+0xe3>
c00112e3:	83 f8 1b             	cmp    eax,0x1b
c00112e6:	75 09                	jne    c00112f1 <VgaText::putchar(char)+0x39>
c00112e8:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00112ec:	e9 aa 00 00 00       	jmp    c001139b <VgaText::putchar(char)+0xe3>
c00112f1:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00112f5:	89 f9                	mov    ecx,edi
c00112f7:	84 c9                	test   cl,cl
c00112f9:	0f 84 8c 00 00 00    	je     c001138b <VgaText::putchar(char)+0xd3>
c00112ff:	8d 4a c0             	lea    ecx,[edx-0x40]
c0011302:	80 f9 3e             	cmp    cl,0x3e
c0011305:	77 70                	ja     c0011377 <VgaText::putchar(char)+0xbf>
c0011307:	83 f8 6d             	cmp    eax,0x6d
c001130a:	75 3f                	jne    c001134b <VgaText::putchar(char)+0x93>
c001130c:	31 f6                	xor    esi,esi
c001130e:	31 d2                	xor    edx,edx
c0011310:	31 c0                	xor    eax,eax
c0011312:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011315:	7e 25                	jle    c001133c <VgaText::putchar(char)+0x84>
c0011317:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001131c:	83 fa 3b             	cmp    edx,0x3b
c001131f:	75 0f                	jne    c0011330 <VgaText::putchar(char)+0x78>
c0011321:	50                   	push   eax
c0011322:	53                   	push   ebx
c0011323:	e8 48 fb ff ff       	call   c0010e70 <VgaText::doANSI_SGR(int)>
c0011328:	31 d2                	xor    edx,edx
c001132a:	59                   	pop    ecx
c001132b:	58                   	pop    eax
c001132c:	31 c0                	xor    eax,eax
c001132e:	eb 09                	jmp    c0011339 <VgaText::putchar(char)+0x81>
c0011330:	6b c0 0a             	imul   eax,eax,0xa
c0011333:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011337:	89 fa                	mov    edx,edi
c0011339:	46                   	inc    esi
c001133a:	eb d6                	jmp    c0011312 <VgaText::putchar(char)+0x5a>
c001133c:	84 d2                	test   dl,dl
c001133e:	74 2f                	je     c001136f <VgaText::putchar(char)+0xb7>
c0011340:	50                   	push   eax
c0011341:	53                   	push   ebx
c0011342:	e8 29 fb ff ff       	call   c0010e70 <VgaText::doANSI_SGR(int)>
c0011347:	58                   	pop    eax
c0011348:	5a                   	pop    edx
c0011349:	eb 24                	jmp    c001136f <VgaText::putchar(char)+0xb7>
c001134b:	83 f8 4a             	cmp    eax,0x4a
c001134e:	75 1f                	jne    c001136f <VgaText::putchar(char)+0xb7>
c0011350:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011354:	75 19                	jne    c001136f <VgaText::putchar(char)+0xb7>
c0011356:	83 ec 0c             	sub    esp,0xc
c0011359:	53                   	push   ebx
c001135a:	e8 95 fd ff ff       	call   c00110f4 <VgaText::clearScreen()>
c001135f:	83 c4 0c             	add    esp,0xc
c0011362:	6a 00                	push   0x0
c0011364:	6a 00                	push   0x0
c0011366:	53                   	push   ebx
c0011367:	e8 26 fd ff ff       	call   c0011092 <VgaText::setCursor(int, int)>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011375:	eb 24                	jmp    c001139b <VgaText::putchar(char)+0xe3>
c0011377:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001137a:	83 f8 0e             	cmp    eax,0xe
c001137d:	7f 1c                	jg     c001139b <VgaText::putchar(char)+0xe3>
c001137f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011382:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011385:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011389:	eb 10                	jmp    c001139b <VgaText::putchar(char)+0xe3>
c001138b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001138e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011391:	50                   	push   eax
c0011392:	53                   	push   ebx
c0011393:	e8 50 fe ff ff       	call   c00111e8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	5b                   	pop    ebx
c001139c:	5e                   	pop    esi
c001139d:	5f                   	pop    edi
c001139e:	c3                   	ret    
c001139f:	90                   	nop

c00113a0 <VgaText::putx(unsigned int)>:
c00113a0:	57                   	push   edi
c00113a1:	b9 11 00 00 00       	mov    ecx,0x11
c00113a6:	56                   	push   esi
c00113a7:	be f2 29 02 c0       	mov    esi,0xc00229f2
c00113ac:	53                   	push   ebx
c00113ad:	83 ec 20             	sub    esp,0x20
c00113b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00113b4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00113b8:	fc                   	cld    
c00113b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113bb:	be 08 00 00 00       	mov    esi,0x8
c00113c0:	50                   	push   eax
c00113c1:	50                   	push   eax
c00113c2:	89 d8                	mov    eax,ebx
c00113c4:	c1 e8 1c             	shr    eax,0x1c
c00113c7:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00113cc:	c1 e3 04             	shl    ebx,0x4
c00113cf:	50                   	push   eax
c00113d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113d4:	e8 df fe ff ff       	call   c00112b8 <VgaText::putchar(char)>
c00113d9:	83 c4 10             	add    esp,0x10
c00113dc:	4e                   	dec    esi
c00113dd:	75 e1                	jne    c00113c0 <VgaText::putx(unsigned int)+0x20>
c00113df:	83 c4 20             	add    esp,0x20
c00113e2:	5b                   	pop    ebx
c00113e3:	5e                   	pop    esi
c00113e4:	5f                   	pop    edi
c00113e5:	c3                   	ret    

c00113e6 <VgaText::puts(char const*)>:
c00113e6:	53                   	push   ebx
c00113e7:	83 ec 08             	sub    esp,0x8
c00113ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113ee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00113f1:	85 c0                	test   eax,eax
c00113f3:	74 12                	je     c0011407 <VgaText::puts(char const*)+0x21>
c00113f5:	51                   	push   ecx
c00113f6:	43                   	inc    ebx
c00113f7:	51                   	push   ecx
c00113f8:	50                   	push   eax
c00113f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113fd:	e8 b6 fe ff ff       	call   c00112b8 <VgaText::putchar(char)>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	eb e7                	jmp    c00113ee <VgaText::puts(char const*)+0x8>
c0011407:	83 c4 08             	add    esp,0x8
c001140a:	5b                   	pop    ebx
c001140b:	c3                   	ret    

c001140c <VgaText::write(unsigned long long, void*, int*)>:
c001140c:	55                   	push   ebp
c001140d:	57                   	push   edi
c001140e:	56                   	push   esi
c001140f:	53                   	push   ebx
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011417:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001141b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001141f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011426:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011429:	39 eb                	cmp    ebx,ebp
c001142b:	74 13                	je     c0011440 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001142d:	50                   	push   eax
c001142e:	43                   	inc    ebx
c001142f:	50                   	push   eax
c0011430:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011434:	50                   	push   eax
c0011435:	56                   	push   esi
c0011436:	e8 7d fe ff ff       	call   c00112b8 <VgaText::putchar(char)>
c001143b:	83 c4 10             	add    esp,0x10
c001143e:	eb e9                	jmp    c0011429 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011440:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011447:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001144b:	89 38                	mov    DWORD PTR [eax],edi
c001144d:	83 c4 0c             	add    esp,0xc
c0011450:	31 c0                	xor    eax,eax
c0011452:	5b                   	pop    ebx
c0011453:	5e                   	pop    esi
c0011454:	5f                   	pop    edi
c0011455:	5d                   	pop    ebp
c0011456:	c3                   	ret    
c0011457:	90                   	nop

c0011458 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011458:	55                   	push   ebp
c0011459:	57                   	push   edi
c001145a:	56                   	push   esi
c001145b:	53                   	push   ebx
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0011463:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011468:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c001146f:	50                   	push   eax
c0011470:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011475:	50                   	push   eax
c0011476:	e8 c3 fa ff ff       	call   c0010f3e <VgaText::combineColours(unsigned char, unsigned char)>
c001147b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001147f:	5a                   	pop    edx
c0011480:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0011483:	59                   	pop    ecx
c0011484:	0f b6 f8             	movzx  edi,al
c0011487:	0f b7 db             	movzx  ebx,bx
c001148a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001148e:	01 db                	add    ebx,ebx
c0011490:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011493:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011496:	85 c0                	test   eax,eax
c0011498:	0f 84 ef 00 00 00    	je     c001158d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001149e:	83 f8 0d             	cmp    eax,0xd
c00114a1:	75 0c                	jne    c00114af <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c00114a3:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c00114aa:	e9 d8 00 00 00       	jmp    c0011587 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00114af:	83 f8 0a             	cmp    eax,0xa
c00114b2:	75 44                	jne    c00114f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c00114b4:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c00114bb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00114be:	8d 48 01             	lea    ecx,[eax+0x1]
c00114c1:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c00114c4:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00114c7:	75 0f                	jne    c00114d8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00114c9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00114cc:	83 ec 0c             	sub    esp,0xc
c00114cf:	55                   	push   ebp
c00114d0:	e8 7b fa ff ff       	call   c0010f50 <VgaText::scrollScreen()>
c00114d5:	83 c4 10             	add    esp,0x10
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	55                   	push   ebp
c00114dc:	e8 79 f9 ff ff       	call   c0010e5a <VgaText::updateCursor()>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00114e8:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00114eb:	0f b7 db             	movzx  ebx,bx
c00114ee:	01 db                	add    ebx,ebx
c00114f0:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00114f3:	e9 8f 00 00 00       	jmp    c0011587 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00114f8:	83 f8 08             	cmp    eax,0x8
c00114fb:	75 34                	jne    c0011531 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00114fd:	51                   	push   ecx
c00114fe:	51                   	push   ecx
c00114ff:	6a 01                	push   0x1
c0011501:	55                   	push   ebp
c0011502:	e8 bf fc ff ff       	call   c00111c6 <VgaText::decrementCursor(bool)>
c0011507:	5b                   	pop    ebx
c0011508:	58                   	pop    eax
c0011509:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001150c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c001150f:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0011512:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0011515:	6a 20                	push   0x20
c0011517:	55                   	push   ebp
c0011518:	e8 d5 fa ff ff       	call   c0010ff2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001151d:	83 c4 20             	add    esp,0x20
c0011520:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011524:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0011527:	0f b7 db             	movzx  ebx,bx
c001152a:	01 db                	add    ebx,ebx
c001152c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001152f:	eb 56                	jmp    c0011587 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011531:	52                   	push   edx
c0011532:	52                   	push   edx
c0011533:	57                   	push   edi
c0011534:	50                   	push   eax
c0011535:	e8 a8 fa ff ff       	call   c0010fe2 <VgaText::combineCharAndColour(char, unsigned char)>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	66 89 03             	mov    WORD PTR [ebx],ax
c0011540:	39 2d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebp
c0011546:	75 1d                	jne    c0011565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0011548:	83 ec 0c             	sub    esp,0xc
c001154b:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001154e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0011551:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011555:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011559:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001155c:	50                   	push   eax
c001155d:	e8 be 82 00 00       	call   c0019820 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011562:	83 c4 20             	add    esp,0x20
c0011565:	50                   	push   eax
c0011566:	83 c3 02             	add    ebx,0x2
c0011569:	50                   	push   eax
c001156a:	6a 00                	push   0x0
c001156c:	55                   	push   ebp
c001156d:	e8 00 fc ff ff       	call   c0011172 <VgaText::incrementCursor(bool)>
c0011572:	83 c4 10             	add    esp,0x10
c0011575:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0011579:	75 0c                	jne    c0011587 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001157b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001157f:	0f b7 db             	movzx  ebx,bx
c0011582:	01 db                	add    ebx,ebx
c0011584:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011587:	46                   	inc    esi
c0011588:	e9 06 ff ff ff       	jmp    c0011493 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001158d:	83 ec 0c             	sub    esp,0xc
c0011590:	55                   	push   ebp
c0011591:	e8 c4 f8 ff ff       	call   c0010e5a <VgaText::updateCursor()>
c0011596:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001159d:	83 c4 1c             	add    esp,0x1c
c00115a0:	5b                   	pop    ebx
c00115a1:	5e                   	pop    esi
c00115a2:	5f                   	pop    edi
c00115a3:	5d                   	pop    ebp
c00115a4:	c3                   	ret    
c00115a5:	90                   	nop

c00115a6 <VgaText::VgaText(char const*)>:
c00115a6:	56                   	push   esi
c00115a7:	53                   	push   ebx
c00115a8:	83 ec 04             	sub    esp,0x4
c00115ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115af:	83 ec 08             	sub    esp,0x8
c00115b2:	6a 00                	push   0x0
c00115b4:	50                   	push   eax
c00115b5:	e8 aa 05 00 00       	call   c0011b64 <UnixFile::UnixFile(int)>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	ba 18 2a 02 c0       	mov    edx,0xc0022a18
c00115c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c6:	89 10                	mov    DWORD PTR [eax],edx
c00115c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115cc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00115d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00115de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115e2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00115e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ea:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00115ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00115f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011608:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001160f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011613:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001161a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001161e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0011625:	83 ec 0c             	sub    esp,0xc
c0011628:	6a 01                	push   0x1
c001162a:	e8 c4 09 00 00       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c001162f:	83 c4 10             	add    esp,0x10
c0011632:	89 c2                	mov    edx,eax
c0011634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011638:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001163b:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0011641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011645:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011648:	89 c6                	mov    esi,eax
c001164a:	e8 a1 d7 ff ff       	call   c000edf0 <Phys::allocatePage()>
c001164f:	68 05 0c 00 00       	push   0xc05
c0011654:	56                   	push   esi
c0011655:	50                   	push   eax
c0011656:	53                   	push   ebx
c0011657:	e8 70 10 00 00       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c001165c:	83 c4 10             	add    esp,0x10
c001165f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011663:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011666:	83 ec 04             	sub    esp,0x4
c0011669:	68 a0 0f 00 00       	push   0xfa0
c001166e:	6a 00                	push   0x0
c0011670:	50                   	push   eax
c0011671:	e8 7a ee fe ff       	call   c00004f0 <memset>
c0011676:	83 c4 10             	add    esp,0x10
c0011679:	83 ec 04             	sub    esp,0x4
c001167c:	6a 00                	push   0x0
c001167e:	6a 07                	push   0x7
c0011680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011684:	e8 7b f8 ff ff       	call   c0010f04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	83 ec 04             	sub    esp,0x4
c001168f:	6a 00                	push   0x0
c0011691:	6a 00                	push   0x0
c0011693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011697:	e8 f6 f9 ff ff       	call   c0011092 <VgaText::setCursor(int, int)>
c001169c:	83 c4 10             	add    esp,0x10
c001169f:	83 ec 0c             	sub    esp,0xc
c00116a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a6:	e8 49 fa ff ff       	call   c00110f4 <VgaText::clearScreen()>
c00116ab:	83 c4 10             	add    esp,0x10
c00116ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116b2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00116b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ba:	05 82 00 00 00       	add    eax,0x82
c00116bf:	83 ec 04             	sub    esp,0x4
c00116c2:	68 80 00 00 00       	push   0x80
c00116c7:	6a 00                	push   0x0
c00116c9:	50                   	push   eax
c00116ca:	e8 21 ee fe ff       	call   c00004f0 <memset>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d6:	05 02 01 00 00       	add    eax,0x102
c00116db:	83 ec 04             	sub    esp,0x4
c00116de:	68 80 00 00 00       	push   0x80
c00116e3:	6a 00                	push   0x0
c00116e5:	50                   	push   eax
c00116e6:	e8 05 ee fe ff       	call   c00004f0 <memset>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	90                   	nop
c00116ef:	83 c4 04             	add    esp,0x4
c00116f2:	5b                   	pop    ebx
c00116f3:	5e                   	pop    esi
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <VgaText::receiveKey(unsigned char)>:
c00116f6:	55                   	push   ebp
c00116f7:	57                   	push   edi
c00116f8:	56                   	push   esi
c00116f9:	53                   	push   ebx
c00116fa:	83 ec 2c             	sub    esp,0x2c
c00116fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011701:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011705:	89 fd                	mov    ebp,edi
c0011707:	81 e5 ff 00 00 00    	and    ebp,0xff
c001170d:	0f 84 48 01 00 00    	je     c001185b <VgaText::receiveKey(unsigned char)+0x165>
c0011713:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0011719:	83 fd 08             	cmp    ebp,0x8
c001171c:	75 6a                	jne    c0011788 <VgaText::receiveKey(unsigned char)+0x92>
c001171e:	83 ec 0c             	sub    esp,0xc
c0011721:	56                   	push   esi
c0011722:	e8 59 ee fe ff       	call   c0000580 <strlen>
c0011727:	83 c4 10             	add    esp,0x10
c001172a:	85 c0                	test   eax,eax
c001172c:	0f 84 ef 00 00 00    	je     c0011821 <VgaText::receiveKey(unsigned char)+0x12b>
c0011732:	50                   	push   eax
c0011733:	50                   	push   eax
c0011734:	6a 08                	push   0x8
c0011736:	53                   	push   ebx
c0011737:	e8 7c fb ff ff       	call   c00112b8 <VgaText::putchar(char)>
c001173c:	89 34 24             	mov    DWORD PTR [esp],esi
c001173f:	e8 3c ee fe ff       	call   c0000580 <strlen>
c0011744:	83 c4 10             	add    esp,0x10
c0011747:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001174f:	83 fa 1f             	cmp    edx,0x1f
c0011752:	89 d0                	mov    eax,edx
c0011754:	7f 1c                	jg     c0011772 <VgaText::receiveKey(unsigned char)+0x7c>
c0011756:	83 e8 08             	sub    eax,0x8
c0011759:	3c 02                	cmp    al,0x2
c001175b:	76 15                	jbe    c0011772 <VgaText::receiveKey(unsigned char)+0x7c>
c001175d:	83 fa 0d             	cmp    edx,0xd
c0011760:	74 10                	je     c0011772 <VgaText::receiveKey(unsigned char)+0x7c>
c0011762:	57                   	push   edi
c0011763:	57                   	push   edi
c0011764:	68 03 2a 02 c0       	push   0xc0022a03
c0011769:	53                   	push   ebx
c001176a:	e8 77 fc ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001176f:	83 c4 10             	add    esp,0x10
c0011772:	83 ec 0c             	sub    esp,0xc
c0011775:	56                   	push   esi
c0011776:	e8 05 ee fe ff       	call   c0000580 <strlen>
c001177b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011783:	e9 96 00 00 00       	jmp    c001181e <VgaText::receiveKey(unsigned char)+0x128>
c0011788:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	50                   	push   eax
c0011792:	e8 e9 ed fe ff       	call   c0000580 <strlen>
c0011797:	89 34 24             	mov    DWORD PTR [esp],esi
c001179a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001179e:	e8 dd ed fe ff       	call   c0000580 <strlen>
c00117a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00117ae:	3d 80 00 00 00       	cmp    eax,0x80
c00117b3:	0f 87 a2 00 00 00    	ja     c001185b <VgaText::receiveKey(unsigned char)+0x165>
c00117b9:	8d 47 ff             	lea    eax,[edi-0x1]
c00117bc:	3c 1e                	cmp    al,0x1e
c00117be:	77 35                	ja     c00117f5 <VgaText::receiveKey(unsigned char)+0xff>
c00117c0:	8d 47 f7             	lea    eax,[edi-0x9]
c00117c3:	3c 01                	cmp    al,0x1
c00117c5:	76 2e                	jbe    c00117f5 <VgaText::receiveKey(unsigned char)+0xff>
c00117c7:	83 fd 0d             	cmp    ebp,0xd
c00117ca:	74 29                	je     c00117f5 <VgaText::receiveKey(unsigned char)+0xff>
c00117cc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00117cf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00117d2:	68 09 2a 02 c0       	push   0xc0022a09
c00117d7:	53                   	push   ebx
c00117d8:	e8 7b fc ff ff       	call   c0011458 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00117dd:	8d 47 40             	lea    eax,[edi+0x40]
c00117e0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00117e3:	0f b6 c0             	movzx  eax,al
c00117e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00117e9:	50                   	push   eax
c00117ea:	53                   	push   ebx
c00117eb:	e8 f8 f9 ff ff       	call   c00111e8 <VgaText::putchar(char, VgaColour, VgaColour)>
c00117f0:	83 c4 20             	add    esp,0x20
c00117f3:	eb 11                	jmp    c0011806 <VgaText::receiveKey(unsigned char)+0x110>
c00117f5:	51                   	push   ecx
c00117f6:	89 f8                	mov    eax,edi
c00117f8:	51                   	push   ecx
c00117f9:	0f be c0             	movsx  eax,al
c00117fc:	50                   	push   eax
c00117fd:	53                   	push   ebx
c00117fe:	e8 b5 fa ff ff       	call   c00112b8 <VgaText::putchar(char)>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001180b:	89 f8                	mov    eax,edi
c001180d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011811:	52                   	push   edx
c0011812:	52                   	push   edx
c0011813:	8d 44 24 26          	lea    eax,[esp+0x26]
c0011817:	50                   	push   eax
c0011818:	56                   	push   esi
c0011819:	e8 52 f0 fe ff       	call   c0000870 <strcat>
c001181e:	83 c4 10             	add    esp,0x10
c0011821:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0011828:	75 0f                	jne    c0011839 <VgaText::receiveKey(unsigned char)+0x143>
c001182a:	83 fd 1c             	cmp    ebp,0x1c
c001182d:	77 2c                	ja     c001185b <VgaText::receiveKey(unsigned char)+0x165>
c001182f:	b8 08 04 00 10       	mov    eax,0x10000408
c0011834:	0f a3 e8             	bt     eax,ebp
c0011837:	73 22                	jae    c001185b <VgaText::receiveKey(unsigned char)+0x165>
c0011839:	50                   	push   eax
c001183a:	81 c3 02 01 00 00    	add    ebx,0x102
c0011840:	50                   	push   eax
c0011841:	56                   	push   esi
c0011842:	53                   	push   ebx
c0011843:	e8 28 f0 fe ff       	call   c0000870 <strcat>
c0011848:	83 c4 0c             	add    esp,0xc
c001184b:	68 80 00 00 00       	push   0x80
c0011850:	6a 00                	push   0x0
c0011852:	56                   	push   esi
c0011853:	e8 98 ec fe ff       	call   c00004f0 <memset>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	83 c4 2c             	add    esp,0x2c
c001185e:	5b                   	pop    ebx
c001185f:	5e                   	pop    esi
c0011860:	5f                   	pop    edi
c0011861:	5d                   	pop    ebp
c0011862:	c3                   	ret    
c0011863:	90                   	nop

c0011864 <VgaText::doUpdate()>:
c0011864:	c3                   	ret    
c0011865:	66 90                	xchg   ax,ax
c0011867:	90                   	nop

c0011868 <TSS::TSS()>:
c0011868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001186c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011873:	90                   	nop
c0011874:	c3                   	ret    
c0011875:	90                   	nop
c0011876:	66 90                	xchg   ax,ax

c0011878 <TSS::setESP(unsigned long)>:
c0011878:	55                   	push   ebp
c0011879:	89 e5                	mov    ebp,esp
c001187b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001187e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011881:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011884:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011887:	90                   	nop
c0011888:	5d                   	pop    ebp
c0011889:	c3                   	ret    
c001188a:	66 90                	xchg   ax,ax

c001188c <TSS::flush()>:
c001188c:	55                   	push   ebp
c001188d:	89 e5                	mov    ebp,esp
c001188f:	83 ec 10             	sub    esp,0x10
c0011892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011895:	8b 00                	mov    eax,DWORD PTR [eax]
c0011897:	83 c8 03             	or     eax,0x3
c001189a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001189e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00118a2:	66 89 d0             	mov    ax,dx
c00118a5:	0f 00 d8             	ltr    ax
c00118a8:	90                   	nop
c00118a9:	c9                   	leave  
c00118aa:	c3                   	ret    
c00118ab:	90                   	nop

c00118ac <TSS::setup(unsigned long, unsigned long)>:
c00118ac:	55                   	push   ebp
c00118ad:	89 e5                	mov    ebp,esp
c00118af:	83 ec 18             	sub    esp,0x18
c00118b2:	83 ec 0c             	sub    esp,0xc
c00118b5:	6a 68                	push   0x68
c00118b7:	e8 f4 cf ff ff       	call   c000e8b0 <malloc>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	89 c2                	mov    edx,eax
c00118c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118cd:	83 ec 08             	sub    esp,0x8
c00118d0:	50                   	push   eax
c00118d1:	68 2c 2a 02 c0       	push   0xc0022a2c
c00118d6:	e8 73 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00118db:	83 c4 10             	add    esp,0x10
c00118de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118e4:	83 ec 04             	sub    esp,0x4
c00118e7:	6a 68                	push   0x68
c00118e9:	6a 00                	push   0x0
c00118eb:	50                   	push   eax
c00118ec:	e8 ff eb fe ff       	call   c00004f0 <memset>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118fa:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011903:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011906:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001190c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011912:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011915:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001191e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011927:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011933:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011936:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001193c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011942:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001194e:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011957:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001195a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011963:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011966:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011969:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001196c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011972:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011975:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001197e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	68 43 2a 02 c0       	push   0xc0022a43
c001198d:	e8 bc 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001199b:	0f 20 da             	mov    edx,cr3
c001199e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00119a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00119a4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	68 46 2a 02 c0       	push   0xc0022a46
c00119af:	e8 9a 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119bd:	83 ec 08             	sub    esp,0x8
c00119c0:	50                   	push   eax
c00119c1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00119c4:	50                   	push   eax
c00119c5:	e8 38 c6 ff ff       	call   c000e002 <GDTEntry::setBase(unsigned int)>
c00119ca:	83 c4 10             	add    esp,0x10
c00119cd:	83 ec 08             	sub    esp,0x8
c00119d0:	6a 68                	push   0x68
c00119d2:	8d 45 ec             	lea    eax,[ebp-0x14]
c00119d5:	50                   	push   eax
c00119d6:	e8 43 c6 ff ff       	call   c000e01e <GDTEntry::setLimit(unsigned int)>
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00119e2:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00119e5:	83 e0 0f             	and    eax,0xf
c00119e8:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00119eb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00119ee:	83 c8 40             	or     eax,0x40
c00119f1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00119f4:	83 ec 0c             	sub    esp,0xc
c00119f7:	68 49 2a 02 c0       	push   0xc0022a49
c00119fc:	e8 4d 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011a09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a0f:	83 ec 08             	sub    esp,0x8
c0011a12:	50                   	push   eax
c0011a13:	68 4c 2a 02 c0       	push   0xc0022a4c
c0011a18:	e8 31 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011a25:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a2b:	05 64 01 00 00       	add    eax,0x164
c0011a30:	83 ec 04             	sub    esp,0x4
c0011a33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011a36:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011a39:	50                   	push   eax
c0011a3a:	e8 13 c6 ff ff       	call   c000e052 <GDT::addEntry(GDTEntry)>
c0011a3f:	83 c4 10             	add    esp,0x10
c0011a42:	89 c2                	mov    edx,eax
c0011a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a47:	89 10                	mov    DWORD PTR [eax],edx
c0011a49:	83 ec 0c             	sub    esp,0xc
c0011a4c:	68 61 2a 02 c0       	push   0xc0022a61
c0011a51:	e8 f8 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011a5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a64:	05 64 01 00 00       	add    eax,0x164
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	50                   	push   eax
c0011a6d:	e8 0a c6 ff ff       	call   c000e07c <GDT::flush()>
c0011a72:	83 c4 10             	add    esp,0x10
c0011a75:	83 ec 0c             	sub    esp,0xc
c0011a78:	68 64 2a 02 c0       	push   0xc0022a64
c0011a7d:	e8 cc 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a82:	83 c4 10             	add    esp,0x10
c0011a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a8a:	c9                   	leave  
c0011a8b:	c3                   	ret    

c0011a8c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a97:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011a9c:	75 08                	jne    c0011aa6 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011a9e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011aa4:	eb 38                	jmp    c0011ade <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011aa6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011aab:	75 17                	jne    c0011ac4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011aad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011abb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011abd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ac1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011ac4:	89 c1                	mov    ecx,eax
c0011ac6:	83 e1 fd             	and    ecx,0xfffffffd
c0011ac9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011acf:	74 cd                	je     c0011a9e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011ad1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011ad6:	83 e0 ef             	and    eax,0xffffffef
c0011ad9:	83 f8 08             	cmp    eax,0x8
c0011adc:	76 c0                	jbe    c0011a9e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011ade:	31 c0                	xor    eax,eax
c0011ae0:	c3                   	ret    
c0011ae1:	90                   	nop

c0011ae2 <ReservedFilename::isAtty()>:
c0011ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ae6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011ae9:	31 c0                	xor    eax,eax
c0011aeb:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011af1:	74 09                	je     c0011afc <ReservedFilename::isAtty()+0x1a>
c0011af3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011af9:	0f 94 c0             	sete   al
c0011afc:	c3                   	ret    
c0011afd:	90                   	nop

c0011afe <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b0d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b12:	75 08                	jne    c0011b1c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011b14:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b1a:	eb 3d                	jmp    c0011b59 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011b1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b21:	75 17                	jne    c0011b3a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011b23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b31:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b37:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011b3a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b3f:	75 04                	jne    c0011b45 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011b41:	89 0a                	mov    DWORD PTR [edx],ecx
c0011b43:	eb 14                	jmp    c0011b59 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011b45:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011b4a:	74 c8                	je     c0011b14 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011b4c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011b51:	83 e0 ef             	and    eax,0xffffffef
c0011b54:	83 f8 08             	cmp    eax,0x8
c0011b57:	76 bb                	jbe    c0011b14 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011b59:	31 c0                	xor    eax,eax
c0011b5b:	c3                   	ret    

c0011b5c <UnixFile::getFileDescriptor()>:
c0011b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b63:	c3                   	ret    

c0011b64 <UnixFile::UnixFile(int)>:
c0011b64:	53                   	push   ebx
c0011b65:	83 ec 28             	sub    esp,0x28
c0011b68:	ba d8 2a 02 c0       	mov    edx,0xc0022ad8
c0011b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b71:	89 10                	mov    DWORD PTR [eax],edx
c0011b73:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011b7b:	0f 8f 90 01 00 00    	jg     c0011d11 <UnixFile::UnixFile(int)+0x1ad>
c0011b81:	a1 40 4d 02 c0       	mov    eax,ds:0xc0024d40
c0011b86:	8d 50 01             	lea    edx,[eax+0x1]
c0011b89:	89 15 40 4d 02 c0    	mov    DWORD PTR ds:0xc0024d40,edx
c0011b8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011b93:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b96:	83 ec 08             	sub    esp,0x8
c0011b99:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011b9d:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011ba2:	e8 67 eb 00 00       	call   c002070e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011ba7:	83 c4 10             	add    esp,0x10
c0011baa:	a0 b4 ce 02 c0       	mov    al,ds:0xc002ceb4
c0011baf:	83 f0 01             	xor    eax,0x1
c0011bb2:	0f b6 c0             	movzx  eax,al
c0011bb5:	85 c0                	test   eax,eax
c0011bb7:	0f 84 55 01 00 00    	je     c0011d12 <UnixFile::UnixFile(int)+0x1ae>
c0011bbd:	c6 05 b4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ceb4,0x1
c0011bc4:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011bcc:	83 ec 0c             	sub    esp,0xc
c0011bcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011bd3:	e8 d8 cc ff ff       	call   c000e8b0 <malloc>
c0011bd8:	83 c4 10             	add    esp,0x10
c0011bdb:	89 c3                	mov    ebx,eax
c0011bdd:	83 ec 08             	sub    esp,0x8
c0011be0:	68 03 ff ff 0f       	push   0xfffff03
c0011be5:	53                   	push   ebx
c0011be6:	e8 2d 01 00 00       	call   c0011d18 <ReservedFilename::ReservedFilename(int)>
c0011beb:	83 c4 10             	add    esp,0x10
c0011bee:	89 1d ac ce 02 c0    	mov    DWORD PTR ds:0xc002ceac,ebx
c0011bf4:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011bfc:	83 ec 0c             	sub    esp,0xc
c0011bff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c03:	e8 a8 cc ff ff       	call   c000e8b0 <malloc>
c0011c08:	83 c4 10             	add    esp,0x10
c0011c0b:	89 c3                	mov    ebx,eax
c0011c0d:	83 ec 08             	sub    esp,0x8
c0011c10:	68 01 ff ff 0f       	push   0xfffff01
c0011c15:	53                   	push   ebx
c0011c16:	e8 fd 00 00 00       	call   c0011d18 <ReservedFilename::ReservedFilename(int)>
c0011c1b:	83 c4 10             	add    esp,0x10
c0011c1e:	89 1d b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,ebx
c0011c24:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011c2c:	83 ec 0c             	sub    esp,0xc
c0011c2f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c33:	e8 78 cc ff ff       	call   c000e8b0 <malloc>
c0011c38:	83 c4 10             	add    esp,0x10
c0011c3b:	89 c3                	mov    ebx,eax
c0011c3d:	83 ec 08             	sub    esp,0x8
c0011c40:	68 00 ff ff 0f       	push   0xfffff00
c0011c45:	53                   	push   ebx
c0011c46:	e8 cd 00 00 00       	call   c0011d18 <ReservedFilename::ReservedFilename(int)>
c0011c4b:	83 c4 10             	add    esp,0x10
c0011c4e:	89 1d a4 ce 02 c0    	mov    DWORD PTR ds:0xc002cea4,ebx
c0011c54:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011c5c:	83 ec 0c             	sub    esp,0xc
c0011c5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011c63:	e8 48 cc ff ff       	call   c000e8b0 <malloc>
c0011c68:	83 c4 10             	add    esp,0x10
c0011c6b:	89 c3                	mov    ebx,eax
c0011c6d:	83 ec 08             	sub    esp,0x8
c0011c70:	68 02 ff ff 0f       	push   0xfffff02
c0011c75:	53                   	push   ebx
c0011c76:	e8 9d 00 00 00       	call   c0011d18 <ReservedFilename::ReservedFilename(int)>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	89 1d a8 ce 02 c0    	mov    DWORD PTR ds:0xc002cea8,ebx
c0011c84:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c8c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011c91:	7f 7f                	jg     c0011d12 <UnixFile::UnixFile(int)+0x1ae>
c0011c93:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011c9b:	83 ec 0c             	sub    esp,0xc
c0011c9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ca2:	e8 09 cc ff ff       	call   c000e8b0 <malloc>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	89 c3                	mov    ebx,eax
c0011cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cb0:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011cb5:	83 ec 08             	sub    esp,0x8
c0011cb8:	50                   	push   eax
c0011cb9:	53                   	push   ebx
c0011cba:	e8 59 00 00 00       	call   c0011d18 <ReservedFilename::ReservedFilename(int)>
c0011cbf:	83 c4 10             	add    esp,0x10
c0011cc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc6:	89 1c 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],ebx
c0011ccd:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011cd5:	83 ec 0c             	sub    esp,0xc
c0011cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cdc:	e8 cf cb ff ff       	call   c000e8b0 <malloc>
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	89 c3                	mov    ebx,eax
c0011ce6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cea:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011cef:	83 ec 08             	sub    esp,0x8
c0011cf2:	50                   	push   eax
c0011cf3:	53                   	push   ebx
c0011cf4:	e8 1f 00 00 00       	call   c0011d18 <ReservedFilename::ReservedFilename(int)>
c0011cf9:	83 c4 10             	add    esp,0x10
c0011cfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d00:	89 1c 85 40 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31c0],ebx
c0011d07:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011d0c:	e9 7b ff ff ff       	jmp    c0011c8c <UnixFile::UnixFile(int)+0x128>
c0011d11:	90                   	nop
c0011d12:	83 c4 28             	add    esp,0x28
c0011d15:	5b                   	pop    ebx
c0011d16:	c3                   	ret    
c0011d17:	90                   	nop

c0011d18 <ReservedFilename::ReservedFilename(int)>:
c0011d18:	83 ec 0c             	sub    esp,0xc
c0011d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d1f:	83 ec 08             	sub    esp,0x8
c0011d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d26:	50                   	push   eax
c0011d27:	e8 38 fe ff ff       	call   c0011b64 <UnixFile::UnixFile(int)>
c0011d2c:	83 c4 10             	add    esp,0x10
c0011d2f:	ba f4 2a 02 c0       	mov    edx,0xc0022af4
c0011d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d38:	89 10                	mov    DWORD PTR [eax],edx
c0011d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d42:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011d45:	90                   	nop
c0011d46:	83 c4 0c             	add    esp,0xc
c0011d49:	c3                   	ret    

c0011d4a <UnixFile::~UnixFile()>:
c0011d4a:	83 ec 1c             	sub    esp,0x1c
c0011d4d:	ba d8 2a 02 c0       	mov    edx,0xc0022ad8
c0011d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d56:	89 10                	mov    DWORD PTR [eax],edx
c0011d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d5f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011d64:	7f 76                	jg     c0011ddc <UnixFile::~UnixFile()+0x92>
c0011d66:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d6e:	83 ec 0c             	sub    esp,0xc
c0011d71:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011d76:	e8 67 ea 00 00       	call   c00207e2 <LinkedList<UnixFile>::getFirstElement()>
c0011d7b:	83 c4 10             	add    esp,0x10
c0011d7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011d8a:	e8 5b ea 00 00       	call   c00207ea <LinkedList<UnixFile>::removeFirst()>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d96:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011d9a:	74 43                	je     c0011ddf <UnixFile::~UnixFile()+0x95>
c0011d9c:	83 ec 08             	sub    esp,0x8
c0011d9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011da3:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011da8:	e8 61 e9 00 00       	call   c002070e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011dad:	83 c4 10             	add    esp,0x10
c0011db0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011db4:	8d 50 01             	lea    edx,[eax+0x1]
c0011db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dbb:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011dc0:	0f 94 c0             	sete   al
c0011dc3:	0f b6 c0             	movzx  eax,al
c0011dc6:	85 c0                	test   eax,eax
c0011dc8:	74 a4                	je     c0011d6e <UnixFile::~UnixFile()+0x24>
c0011dca:	83 ec 0c             	sub    esp,0xc
c0011dcd:	68 68 2a 02 c0       	push   0xc0022a68
c0011dd2:	e8 1f ce ff ff       	call   c000ebf6 <KePanic(char const*)>
c0011dd7:	83 c4 10             	add    esp,0x10
c0011dda:	eb 92                	jmp    c0011d6e <UnixFile::~UnixFile()+0x24>
c0011ddc:	90                   	nop
c0011ddd:	eb 01                	jmp    c0011de0 <UnixFile::~UnixFile()+0x96>
c0011ddf:	90                   	nop
c0011de0:	90                   	nop
c0011de1:	83 c4 1c             	add    esp,0x1c
c0011de4:	c3                   	ret    
c0011de5:	90                   	nop

c0011de6 <UnixFile::~UnixFile()>:
c0011de6:	83 ec 0c             	sub    esp,0xc
c0011de9:	83 ec 0c             	sub    esp,0xc
c0011dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011df0:	e8 55 ff ff ff       	call   c0011d4a <UnixFile::~UnixFile()>
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	83 ec 08             	sub    esp,0x8
c0011dfb:	6a 0c                	push   0xc
c0011dfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e01:	e8 15 a8 ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0011e06:	83 c4 10             	add    esp,0x10
c0011e09:	83 c4 0c             	add    esp,0xc
c0011e0c:	c3                   	ret    
c0011e0d:	90                   	nop

c0011e0e <ReservedFilename::~ReservedFilename()>:
c0011e0e:	83 ec 0c             	sub    esp,0xc
c0011e11:	ba f4 2a 02 c0       	mov    edx,0xc0022af4
c0011e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1a:	89 10                	mov    DWORD PTR [eax],edx
c0011e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e20:	83 ec 0c             	sub    esp,0xc
c0011e23:	50                   	push   eax
c0011e24:	e8 21 ff ff ff       	call   c0011d4a <UnixFile::~UnixFile()>
c0011e29:	83 c4 10             	add    esp,0x10
c0011e2c:	90                   	nop
c0011e2d:	83 c4 0c             	add    esp,0xc
c0011e30:	c3                   	ret    
c0011e31:	90                   	nop

c0011e32 <ReservedFilename::~ReservedFilename()>:
c0011e32:	83 ec 0c             	sub    esp,0xc
c0011e35:	83 ec 0c             	sub    esp,0xc
c0011e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e3c:	e8 cd ff ff ff       	call   c0011e0e <ReservedFilename::~ReservedFilename()>
c0011e41:	83 c4 10             	add    esp,0x10
c0011e44:	83 ec 08             	sub    esp,0x8
c0011e47:	6a 0c                	push   0xc
c0011e49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e4d:	e8 c9 a7 ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0011e52:	83 c4 10             	add    esp,0x10
c0011e55:	83 c4 0c             	add    esp,0xc
c0011e58:	c3                   	ret    

c0011e59 <KeGetFileFromDescriptor(int)>:
c0011e59:	56                   	push   esi
c0011e5a:	53                   	push   ebx
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011e62:	81 e6 ff ff ff 0f    	and    esi,0xfffffff
c0011e68:	56                   	push   esi
c0011e69:	68 88 2a 02 c0       	push   0xc0022a88
c0011e6e:	e8 db 50 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	81 fe ff fe ff 0f    	cmp    esi,0xffffeff
c0011e7c:	7f 54                	jg     c0011ed2 <KeGetFileFromDescriptor(int)+0x79>
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e86:	e8 57 e9 00 00       	call   c00207e2 <LinkedList<UnixFile>::getFirstElement()>
c0011e8b:	89 c3                	mov    ebx,eax
c0011e8d:	58                   	pop    eax
c0011e8e:	5a                   	pop    edx
c0011e8f:	53                   	push   ebx
c0011e90:	68 aa 2a 02 c0       	push   0xc0022aaa
c0011e95:	e8 b4 50 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011e9a:	8d 43 ff             	lea    eax,[ebx-0x1]
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	83 f8 fd             	cmp    eax,0xfffffffd
c0011ea3:	76 07                	jbe    c0011eac <KeGetFileFromDescriptor(int)+0x53>
c0011ea5:	31 db                	xor    ebx,ebx
c0011ea7:	e9 88 00 00 00       	jmp    c0011f34 <KeGetFileFromDescriptor(int)+0xdb>
c0011eac:	50                   	push   eax
c0011ead:	50                   	push   eax
c0011eae:	53                   	push   ebx
c0011eaf:	68 be 2a 02 c0       	push   0xc0022abe
c0011eb4:	e8 95 50 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	39 73 04             	cmp    DWORD PTR [ebx+0x4],esi
c0011ebf:	74 73                	je     c0011f34 <KeGetFileFromDescriptor(int)+0xdb>
c0011ec1:	51                   	push   ecx
c0011ec2:	51                   	push   ecx
c0011ec3:	53                   	push   ebx
c0011ec4:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011ec9:	e8 be e9 00 00       	call   c002088c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011ece:	89 c3                	mov    ebx,eax
c0011ed0:	eb c8                	jmp    c0011e9a <KeGetFileFromDescriptor(int)+0x41>
c0011ed2:	81 fe 03 ff ff 0f    	cmp    esi,0xfffff03
c0011ed8:	8b 1d ac ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ceac
c0011ede:	74 54                	je     c0011f34 <KeGetFileFromDescriptor(int)+0xdb>
c0011ee0:	81 fe 01 ff ff 0f    	cmp    esi,0xfffff01
c0011ee6:	8b 1d b0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ceb0
c0011eec:	74 46                	je     c0011f34 <KeGetFileFromDescriptor(int)+0xdb>
c0011eee:	81 fe 02 ff ff 0f    	cmp    esi,0xfffff02
c0011ef4:	8b 1d a8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cea8
c0011efa:	74 38                	je     c0011f34 <KeGetFileFromDescriptor(int)+0xdb>
c0011efc:	81 fe 00 ff ff 0f    	cmp    esi,0xfffff00
c0011f02:	8b 1d a4 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cea4
c0011f08:	74 2a                	je     c0011f34 <KeGetFileFromDescriptor(int)+0xdb>
c0011f0a:	8d 86 f0 00 00 f0    	lea    eax,[esi-0xfffff10]
c0011f10:	83 f8 08             	cmp    eax,0x8
c0011f13:	77 09                	ja     c0011f1e <KeGetFileFromDescriptor(int)+0xc5>
c0011f15:	8b 1c 85 80 ce 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd3180]
c0011f1c:	eb 16                	jmp    c0011f34 <KeGetFileFromDescriptor(int)+0xdb>
c0011f1e:	81 ee 20 ff ff 0f    	sub    esi,0xfffff20
c0011f24:	83 fe 08             	cmp    esi,0x8
c0011f27:	0f 87 78 ff ff ff    	ja     c0011ea5 <KeGetFileFromDescriptor(int)+0x4c>
c0011f2d:	8b 1c b5 40 ce 02 c0 	mov    ebx,DWORD PTR [esi*4-0x3ffd31c0]
c0011f34:	5a                   	pop    edx
c0011f35:	89 d8                	mov    eax,ebx
c0011f37:	5b                   	pop    ebx
c0011f38:	5e                   	pop    esi
c0011f39:	c3                   	ret    

c0011f3a <__static_initialization_and_destruction_0(int, int)>:
c0011f3a:	83 ec 0c             	sub    esp,0xc
c0011f3d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011f42:	75 34                	jne    c0011f78 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f44:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011f4c:	75 2a                	jne    c0011f78 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f56:	e8 71 e7 00 00       	call   c00206cc <LinkedList<UnixFile>::LinkedList()>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	83 ec 04             	sub    esp,0x4
c0011f61:	68 b0 45 02 c0       	push   0xc00245b0
c0011f66:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f6b:	68 ca 06 02 c0       	push   0xc00206ca
c0011f70:	e8 56 a6 ff ff       	call   c000c5cb <__cxa_atexit>
c0011f75:	83 c4 10             	add    esp,0x10
c0011f78:	90                   	nop
c0011f79:	83 c4 0c             	add    esp,0xc
c0011f7c:	c3                   	ret    

c0011f7d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011f7d:	83 ec 0c             	sub    esp,0xc
c0011f80:	83 ec 08             	sub    esp,0x8
c0011f83:	68 ff ff 00 00       	push   0xffff
c0011f88:	6a 01                	push   0x1
c0011f8a:	e8 ab ff ff ff       	call   c0011f3a <__static_initialization_and_destruction_0(int, int)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	83 c4 0c             	add    esp,0xc
c0011f95:	c3                   	ret    

c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011f96:	53                   	push   ebx
c0011f97:	8b 15 48 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d48
c0011f9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fa1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011fa5:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011fab:	89 d8                	mov    eax,ebx
c0011fad:	d1 e8                	shr    eax,1
c0011faf:	01 d0                	add    eax,edx
c0011fb1:	80 e3 01             	and    bl,0x1
c0011fb4:	8a 10                	mov    dl,BYTE PTR [eax]
c0011fb6:	75 09                	jne    c0011fc1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0011fb8:	83 e2 f0             	and    edx,0xfffffff0
c0011fbb:	09 ca                	or     edx,ecx
c0011fbd:	88 10                	mov    BYTE PTR [eax],dl
c0011fbf:	5b                   	pop    ebx
c0011fc0:	c3                   	ret    
c0011fc1:	0f b6 c9             	movzx  ecx,cl
c0011fc4:	83 e2 0f             	and    edx,0xf
c0011fc7:	c1 e1 04             	shl    ecx,0x4
c0011fca:	09 ca                	or     edx,ecx
c0011fcc:	88 10                	mov    BYTE PTR [eax],dl
c0011fce:	5b                   	pop    ebx
c0011fcf:	c3                   	ret    

c0011fd0 <Virt::getPageState(unsigned long)>:
c0011fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fd4:	8b 0d 48 4d 02 c0    	mov    ecx,DWORD PTR ds:0xc0024d48
c0011fda:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011fe0:	89 d0                	mov    eax,edx
c0011fe2:	d1 e8                	shr    eax,1
c0011fe4:	80 e2 01             	and    dl,0x1
c0011fe7:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011fea:	74 03                	je     c0011fef <Virt::getPageState(unsigned long)+0x1f>
c0011fec:	c1 e8 04             	shr    eax,0x4
c0011fef:	83 e0 0f             	and    eax,0xf
c0011ff2:	c3                   	ret    

c0011ff3 <Virt::allocateKernelVirtualPages(int)>:
c0011ff3:	55                   	push   ebp
c0011ff4:	57                   	push   edi
c0011ff5:	56                   	push   esi
c0011ff6:	31 f6                	xor    esi,esi
c0011ff8:	53                   	push   ebx
c0011ff9:	31 db                	xor    ebx,ebx
c0011ffb:	83 ec 1c             	sub    esp,0x1c
c0011ffe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0012003:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012007:	8b 2d 44 4d 02 c0    	mov    ebp,DWORD PTR ds:0xc0024d44
c001200d:	55                   	push   ebp
c001200e:	e8 bd ff ff ff       	call   c0011fd0 <Virt::getPageState(unsigned long)>
c0012013:	5a                   	pop    edx
c0012014:	84 c0                	test   al,al
c0012016:	75 3d                	jne    c0012055 <Virt::allocateKernelVirtualPages(int)+0x62>
c0012018:	85 db                	test   ebx,ebx
c001201a:	0f 44 f5             	cmove  esi,ebp
c001201d:	83 c3 01             	add    ebx,0x1
c0012020:	39 fb                	cmp    ebx,edi
c0012022:	74 5e                	je     c0012082 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0012024:	83 c5 01             	add    ebp,0x1
c0012027:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001202d:	76 33                	jbe    c0012062 <Virt::allocateKernelVirtualPages(int)+0x6f>
c001202f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0012034:	c7 05 44 4d 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024d44,0xc8000
c001203e:	75 2a                	jne    c001206a <Virt::allocateKernelVirtualPages(int)+0x77>
c0012040:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0012045:	bd 00 80 0c 00       	mov    ebp,0xc8000
c001204a:	55                   	push   ebp
c001204b:	e8 80 ff ff ff       	call   c0011fd0 <Virt::getPageState(unsigned long)>
c0012050:	5a                   	pop    edx
c0012051:	84 c0                	test   al,al
c0012053:	74 c3                	je     c0012018 <Virt::allocateKernelVirtualPages(int)+0x25>
c0012055:	83 c5 01             	add    ebp,0x1
c0012058:	31 db                	xor    ebx,ebx
c001205a:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0012060:	77 cd                	ja     c001202f <Virt::allocateKernelVirtualPages(int)+0x3c>
c0012062:	89 2d 44 4d 02 c0    	mov    DWORD PTR ds:0xc0024d44,ebp
c0012068:	eb a3                	jmp    c001200d <Virt::allocateKernelVirtualPages(int)+0x1a>
c001206a:	83 ec 0c             	sub    esp,0xc
c001206d:	68 08 2b 02 c0       	push   0xc0022b08
c0012072:	e8 7f cb ff ff       	call   c000ebf6 <KePanic(char const*)>
c0012077:	8b 2d 44 4d 02 c0    	mov    ebp,DWORD PTR ds:0xc0024d44
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	eb 8b                	jmp    c001200d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012082:	89 35 44 4d 02 c0    	mov    DWORD PTR ds:0xc0024d44,esi
c0012088:	83 fb 01             	cmp    ebx,0x1
c001208b:	74 63                	je     c00120f0 <Virt::allocateKernelVirtualPages(int)+0xfd>
c001208d:	85 ff                	test   edi,edi
c001208f:	74 41                	je     c00120d2 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012091:	89 f0                	mov    eax,esi
c0012093:	31 db                	xor    ebx,ebx
c0012095:	8d 6f ff             	lea    ebp,[edi-0x1]
c0012098:	eb 16                	jmp    c00120b0 <Virt::allocateKernelVirtualPages(int)+0xbd>
c001209a:	6a 01                	push   0x1
c001209c:	83 c3 01             	add    ebx,0x1
c001209f:	50                   	push   eax
c00120a0:	e8 f1 fe ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120a5:	39 fb                	cmp    ebx,edi
c00120a7:	58                   	pop    eax
c00120a8:	5a                   	pop    edx
c00120a9:	74 27                	je     c00120d2 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00120ab:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00120b0:	8d 50 01             	lea    edx,[eax+0x1]
c00120b3:	85 db                	test   ebx,ebx
c00120b5:	89 15 44 4d 02 c0    	mov    DWORD PTR ds:0xc0024d44,edx
c00120bb:	74 22                	je     c00120df <Virt::allocateKernelVirtualPages(int)+0xec>
c00120bd:	39 dd                	cmp    ebp,ebx
c00120bf:	75 d9                	jne    c001209a <Virt::allocateKernelVirtualPages(int)+0xa7>
c00120c1:	6a 03                	push   0x3
c00120c3:	83 c3 01             	add    ebx,0x1
c00120c6:	50                   	push   eax
c00120c7:	e8 ca fe ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120cc:	39 fb                	cmp    ebx,edi
c00120ce:	59                   	pop    ecx
c00120cf:	58                   	pop    eax
c00120d0:	75 d9                	jne    c00120ab <Virt::allocateKernelVirtualPages(int)+0xb8>
c00120d2:	83 c4 1c             	add    esp,0x1c
c00120d5:	89 f0                	mov    eax,esi
c00120d7:	5b                   	pop    ebx
c00120d8:	c1 e0 0c             	shl    eax,0xc
c00120db:	5e                   	pop    esi
c00120dc:	5f                   	pop    edi
c00120dd:	5d                   	pop    ebp
c00120de:	c3                   	ret    
c00120df:	6a 02                	push   0x2
c00120e1:	bb 01 00 00 00       	mov    ebx,0x1
c00120e6:	50                   	push   eax
c00120e7:	e8 aa fe ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120ec:	58                   	pop    eax
c00120ed:	5a                   	pop    edx
c00120ee:	eb bb                	jmp    c00120ab <Virt::allocateKernelVirtualPages(int)+0xb8>
c00120f0:	6a 04                	push   0x4
c00120f2:	56                   	push   esi
c00120f3:	8d 46 01             	lea    eax,[esi+0x1]
c00120f6:	a3 44 4d 02 c0       	mov    ds:0xc0024d44,eax
c00120fb:	e8 96 fe ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012100:	89 f0                	mov    eax,esi
c0012102:	59                   	pop    ecx
c0012103:	c1 e0 0c             	shl    eax,0xc
c0012106:	5b                   	pop    ebx
c0012107:	83 c4 1c             	add    esp,0x1c
c001210a:	5b                   	pop    ebx
c001210b:	5e                   	pop    esi
c001210c:	5f                   	pop    edi
c001210d:	5d                   	pop    ebp
c001210e:	c3                   	ret    

c001210f <Virt::freeSwapfilePage(unsigned long)>:
c001210f:	53                   	push   ebx
c0012110:	8b 15 cc ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cecc
c0012116:	b8 01 00 00 00       	mov    eax,0x1
c001211b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001211f:	d3 e0                	shl    eax,cl
c0012121:	89 cb                	mov    ebx,ecx
c0012123:	c1 eb 05             	shr    ebx,0x5
c0012126:	f7 d0                	not    eax
c0012128:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001212b:	21 c1                	and    ecx,eax
c001212d:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012130:	5b                   	pop    ebx
c0012131:	c3                   	ret    

c0012132 <Virt::swapIDToSector(unsigned long)>:
c0012132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012136:	8b 15 4c 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d4c
c001213c:	8b 0d 54 4d 02 c0    	mov    ecx,DWORD PTR ds:0xc0024d54
c0012142:	0f af c2             	imul   eax,edx
c0012145:	01 c8                	add    eax,ecx
c0012147:	c3                   	ret    

c0012148 <Virt::allocateSwapfilePage()>:
c0012148:	55                   	push   ebp
c0012149:	31 d2                	xor    edx,edx
c001214b:	57                   	push   edi
c001214c:	56                   	push   esi
c001214d:	53                   	push   ebx
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	8b 1d 50 4d 02 c0    	mov    ebx,DWORD PTR ds:0xc0024d50
c0012157:	8b 0d 4c 4d 02 c0    	mov    ecx,DWORD PTR ds:0xc0024d4c
c001215d:	89 d8                	mov    eax,ebx
c001215f:	f7 f1                	div    ecx
c0012161:	39 cb                	cmp    ebx,ecx
c0012163:	72 2f                	jb     c0012194 <Virt::allocateSwapfilePage()+0x4c>
c0012165:	8b 35 cc ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cecc
c001216b:	8b 16                	mov    edx,DWORD PTR [esi]
c001216d:	f6 c2 01             	test   dl,0x1
c0012170:	74 3e                	je     c00121b0 <Virt::allocateSwapfilePage()+0x68>
c0012172:	31 c9                	xor    ecx,ecx
c0012174:	bf 01 00 00 00       	mov    edi,0x1
c0012179:	eb 12                	jmp    c001218d <Virt::allocateSwapfilePage()+0x45>
c001217b:	89 ca                	mov    edx,ecx
c001217d:	89 fd                	mov    ebp,edi
c001217f:	c1 ea 05             	shr    edx,0x5
c0012182:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012185:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012187:	d3 e5                	shl    ebp,cl
c0012189:	85 ea                	test   edx,ebp
c001218b:	74 2c                	je     c00121b9 <Virt::allocateSwapfilePage()+0x71>
c001218d:	83 c1 01             	add    ecx,0x1
c0012190:	39 c8                	cmp    eax,ecx
c0012192:	77 e7                	ja     c001217b <Virt::allocateSwapfilePage()+0x33>
c0012194:	83 ec 0c             	sub    esp,0xc
c0012197:	68 2b 30 02 c0       	push   0xc002302b
c001219c:	e8 55 ca ff ff       	call   c000ebf6 <KePanic(char const*)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	31 c9                	xor    ecx,ecx
c00121a6:	83 c4 0c             	add    esp,0xc
c00121a9:	89 c8                	mov    eax,ecx
c00121ab:	5b                   	pop    ebx
c00121ac:	5e                   	pop    esi
c00121ad:	5f                   	pop    edi
c00121ae:	5d                   	pop    ebp
c00121af:	c3                   	ret    
c00121b0:	89 f3                	mov    ebx,esi
c00121b2:	bd 01 00 00 00       	mov    ebp,0x1
c00121b7:	31 c9                	xor    ecx,ecx
c00121b9:	09 ea                	or     edx,ebp
c00121bb:	89 c8                	mov    eax,ecx
c00121bd:	89 13                	mov    DWORD PTR [ebx],edx
c00121bf:	83 c4 0c             	add    esp,0xc
c00121c2:	5b                   	pop    ebx
c00121c3:	5e                   	pop    esi
c00121c4:	5f                   	pop    edi
c00121c5:	5d                   	pop    ebp
c00121c6:	c3                   	ret    

c00121c7 <Virt::virtualMemorySetup()>:
c00121c7:	53                   	push   ebx
c00121c8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00121cd:	6a 0f                	push   0xf
c00121cf:	53                   	push   ebx
c00121d0:	83 c3 01             	add    ebx,0x1
c00121d3:	e8 be fd ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121d8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00121de:	58                   	pop    eax
c00121df:	5a                   	pop    edx
c00121e0:	75 eb                	jne    c00121cd <Virt::virtualMemorySetup()+0x6>
c00121e2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00121e7:	6a 00                	push   0x0
c00121e9:	53                   	push   ebx
c00121ea:	83 c3 01             	add    ebx,0x1
c00121ed:	e8 a4 fd ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121f2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00121f8:	59                   	pop    ecx
c00121f9:	58                   	pop    eax
c00121fa:	75 eb                	jne    c00121e7 <Virt::virtualMemorySetup()+0x20>
c00121fc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012201:	6a 0f                	push   0xf
c0012203:	53                   	push   ebx
c0012204:	83 c3 01             	add    ebx,0x1
c0012207:	e8 8a fd ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001220c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012212:	58                   	pop    eax
c0012213:	5a                   	pop    edx
c0012214:	75 eb                	jne    c0012201 <Virt::virtualMemorySetup()+0x3a>
c0012216:	5b                   	pop    ebx
c0012217:	c3                   	ret    

c0012218 <Virt::setupPageSwapping(int)>:
c0012218:	53                   	push   ebx
c0012219:	83 ec 0c             	sub    esp,0xc
c001221c:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c0012221:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012225:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001222b:	8b 10                	mov    edx,DWORD PTR [eax]
c001222d:	53                   	push   ebx
c001222e:	68 42 30 02 c0       	push   0xc0023042
c0012233:	50                   	push   eax
c0012234:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012237:	c1 e3 0b             	shl    ebx,0xb
c001223a:	89 1d 50 4d 02 c0    	mov    DWORD PTR ds:0xc0024d50,ebx
c0012240:	c1 eb 08             	shr    ebx,0x8
c0012243:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012246:	c6 05 58 4d 02 c0 43 	mov    BYTE PTR ds:0xc0024d58,0x43
c001224d:	c7 05 4c 4d 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0024d4c,0x8
c0012257:	a3 54 4d 02 c0       	mov    ds:0xc0024d54,eax
c001225c:	e8 4f c6 ff ff       	call   c000e8b0 <malloc>
c0012261:	31 d2                	xor    edx,edx
c0012263:	83 c4 0c             	add    esp,0xc
c0012266:	a3 cc ce 02 c0       	mov    ds:0xc002cecc,eax
c001226b:	89 c1                	mov    ecx,eax
c001226d:	a1 50 4d 02 c0       	mov    eax,ds:0xc0024d50
c0012272:	f7 35 4c 4d 02 c0    	div    DWORD PTR ds:0xc0024d4c
c0012278:	c1 e8 05             	shr    eax,0x5
c001227b:	50                   	push   eax
c001227c:	6a 00                	push   0x0
c001227e:	51                   	push   ecx
c001227f:	e8 6c e2 fe ff       	call   c00004f0 <memset>
c0012284:	83 c4 18             	add    esp,0x18
c0012287:	5b                   	pop    ebx
c0012288:	c3                   	ret    
c0012289:	90                   	nop

c001228a <VAS::setCPUSpecific(unsigned long)>:
c001228a:	c3                   	ret    
c001228b:	90                   	nop

c001228c <VAS::VAS(VAS*)>:
c001228c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012290:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001229b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00122a2:	90                   	nop
c00122a3:	c3                   	ret    

c00122a4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00122a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122a8:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00122ad:	89 c2                	mov    edx,eax
c00122af:	c1 ea 16             	shr    edx,0x16
c00122b2:	c1 e8 0a             	shr    eax,0xa
c00122b5:	83 f9 01             	cmp    ecx,0x1
c00122b8:	19 c9                	sbb    ecx,ecx
c00122ba:	25 fc 0f 00 00       	and    eax,0xffc
c00122bf:	c1 e2 0c             	shl    edx,0xc
c00122c2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00122c8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00122cf:	01 d0                	add    eax,edx
c00122d1:	c3                   	ret    

c00122d2 <VAS::getPageTableEntry(unsigned long)>:
c00122d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00122d6:	89 ca                	mov    edx,ecx
c00122d8:	c1 ea 16             	shr    edx,0x16
c00122db:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00122e1:	c1 e9 0a             	shr    ecx,0xa
c00122e4:	c1 e0 0c             	shl    eax,0xc
c00122e7:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00122ed:	8d 04 08             	lea    eax,[eax+ecx*1]
c00122f0:	c3                   	ret    

c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00122f1:	55                   	push   ebp
c00122f2:	57                   	push   edi
c00122f3:	bf 01 00 00 00       	mov    edi,0x1
c00122f8:	56                   	push   esi
c00122f9:	53                   	push   ebx
c00122fa:	83 ec 1c             	sub    esp,0x1c
c00122fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012301:	c1 ee 0c             	shr    esi,0xc
c0012304:	eb 48                	jmp    c001234e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012306:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001230b:	83 ec 08             	sub    esp,0x8
c001230e:	55                   	push   ebp
c001230f:	50                   	push   eax
c0012310:	e8 bd ff ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	8b 10                	mov    edx,DWORD PTR [eax]
c001231a:	f6 c6 04             	test   dh,0x4
c001231d:	75 70                	jne    c001238f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001231f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012325:	83 fb 04             	cmp    ebx,0x4
c0012328:	0f 84 8a 00 00 00    	je     c00123b8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001232e:	83 fb 02             	cmp    ebx,0x2
c0012331:	0f 84 9a 00 00 00    	je     c00123d1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012337:	83 fb 03             	cmp    ebx,0x3
c001233a:	0f 84 be 00 00 00    	je     c00123fe <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012340:	83 fb 01             	cmp    ebx,0x1
c0012343:	0f 84 a2 00 00 00    	je     c00123eb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012349:	83 c6 01             	add    esi,0x1
c001234c:	31 ff                	xor    edi,edi
c001234e:	56                   	push   esi
c001234f:	89 f5                	mov    ebp,esi
c0012351:	e8 7a fc ff ff       	call   c0011fd0 <Virt::getPageState(unsigned long)>
c0012356:	c1 e5 0c             	shl    ebp,0xc
c0012359:	5a                   	pop    edx
c001235a:	0f b6 d8             	movzx  ebx,al
c001235d:	85 db                	test   ebx,ebx
c001235f:	75 a5                	jne    c0012306 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012361:	83 ec 0c             	sub    esp,0xc
c0012364:	68 59 30 02 c0       	push   0xc0023059
c0012369:	e8 88 c8 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001236e:	5a                   	pop    edx
c001236f:	59                   	pop    ecx
c0012370:	55                   	push   ebp
c0012371:	8b 2d d0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002ced0
c0012377:	55                   	push   ebp
c0012378:	e8 55 ff ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	8b 10                	mov    edx,DWORD PTR [eax]
c0012382:	f6 c6 04             	test   dh,0x4
c0012385:	75 08                	jne    c001238f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012387:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001238d:	eb ba                	jmp    c0012349 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001238f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012393:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012399:	83 ec 0c             	sub    esp,0xc
c001239c:	52                   	push   edx
c001239d:	e8 e5 c9 ff ff       	call   c000ed87 <Phys::freePage(unsigned long)>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	83 fb 04             	cmp    ebx,0x4
c00123a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00123b2:	0f 85 76 ff ff ff    	jne    c001232e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00123b8:	83 e7 01             	and    edi,0x1
c00123bb:	75 46                	jne    c0012403 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00123bd:	c7 44 24 30 28 2b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022b28
c00123c5:	83 c4 1c             	add    esp,0x1c
c00123c8:	5b                   	pop    ebx
c00123c9:	5e                   	pop    esi
c00123ca:	5f                   	pop    edi
c00123cb:	5d                   	pop    ebp
c00123cc:	e9 25 c8 ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c00123d1:	83 e7 01             	and    edi,0x1
c00123d4:	75 15                	jne    c00123eb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00123d6:	83 ec 0c             	sub    esp,0xc
c00123d9:	68 75 30 02 c0       	push   0xc0023075
c00123de:	e8 13 c8 ff ff       	call   c000ebf6 <KePanic(char const*)>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	e9 5e ff ff ff       	jmp    c0012349 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00123eb:	83 ec 08             	sub    esp,0x8
c00123ee:	6a 00                	push   0x0
c00123f0:	56                   	push   esi
c00123f1:	e8 a0 fb ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123f6:	83 c4 10             	add    esp,0x10
c00123f9:	e9 4b ff ff ff       	jmp    c0012349 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00123fe:	83 e7 01             	and    edi,0x1
c0012401:	75 16                	jne    c0012419 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012403:	83 ec 08             	sub    esp,0x8
c0012406:	6a 00                	push   0x0
c0012408:	56                   	push   esi
c0012409:	e8 88 fb ff ff       	call   c0011f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	83 c4 1c             	add    esp,0x1c
c0012414:	5b                   	pop    ebx
c0012415:	5e                   	pop    esi
c0012416:	5f                   	pop    edi
c0012417:	5d                   	pop    ebp
c0012418:	c3                   	ret    
c0012419:	c7 44 24 30 91 30 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023091
c0012421:	83 c4 1c             	add    esp,0x1c
c0012424:	5b                   	pop    ebx
c0012425:	5e                   	pop    esi
c0012426:	5f                   	pop    edi
c0012427:	5d                   	pop    ebp
c0012428:	e9 c9 c7 ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c001242d:	90                   	nop

c001242e <VAS::freeAllocatedPages(unsigned long)>:
c001242e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012432:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012436:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001243a:	74 09                	je     c0012445 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001243c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012440:	e9 ac fe ff ff       	jmp    c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012445:	c7 44 24 04 4c 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b4c
c001244d:	e9 fc 4a ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012452 <VAS::virtualToPhysical(unsigned long)>:
c0012452:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012456:	50                   	push   eax
c0012457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001245b:	52                   	push   edx
c001245c:	e8 71 fe ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c0012461:	59                   	pop    ecx
c0012462:	5a                   	pop    edx
c0012463:	8b 00                	mov    eax,DWORD PTR [eax]
c0012465:	25 00 f0 ff ff       	and    eax,0xfffff000
c001246a:	c3                   	ret    
c001246b:	90                   	nop

c001246c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001246c:	55                   	push   ebp
c001246d:	57                   	push   edi
c001246e:	56                   	push   esi
c001246f:	53                   	push   ebx
c0012470:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012474:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012478:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001247c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012480:	85 db                	test   ebx,ebx
c0012482:	7e 24                	jle    c00124a8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012484:	c1 e3 0c             	shl    ebx,0xc
c0012487:	01 f3                	add    ebx,esi
c0012489:	56                   	push   esi
c001248a:	81 c6 00 10 00 00    	add    esi,0x1000
c0012490:	55                   	push   ebp
c0012491:	e8 3c fe ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c0012496:	5a                   	pop    edx
c0012497:	59                   	pop    ecx
c0012498:	8b 08                	mov    ecx,DWORD PTR [eax]
c001249a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001249e:	21 f9                	and    ecx,edi
c00124a0:	09 d1                	or     ecx,edx
c00124a2:	39 f3                	cmp    ebx,esi
c00124a4:	89 08                	mov    DWORD PTR [eax],ecx
c00124a6:	75 e1                	jne    c0012489 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00124a8:	5b                   	pop    ebx
c00124a9:	5e                   	pop    esi
c00124aa:	5f                   	pop    edi
c00124ab:	5d                   	pop    ebp
c00124ac:	c3                   	ret    
c00124ad:	90                   	nop

c00124ae <VAS::VAS()>:
c00124ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00124b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00124c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124c8:	a3 d0 ce 02 c0       	mov    ds:0xc002ced0,eax
c00124cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00124d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00124dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124e0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00124e7:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c00124ec:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00124f1:	29 c2                	sub    edx,eax
c00124f3:	89 d0                	mov    eax,edx
c00124f5:	05 ff 0f 00 00       	add    eax,0xfff
c00124fa:	c1 e8 0c             	shr    eax,0xc
c00124fd:	89 c2                	mov    edx,eax
c00124ff:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012504:	6a 04                	push   0x4
c0012506:	6a ff                	push   0xffffffff
c0012508:	52                   	push   edx
c0012509:	50                   	push   eax
c001250a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001250e:	e8 59 ff ff ff       	call   c001246c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012513:	83 c4 14             	add    esp,0x14
c0012516:	90                   	nop
c0012517:	c3                   	ret    

c0012518 <VAS::setToWriteCombining(unsigned long, int)>:
c0012518:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c001251d:	50                   	push   eax
c001251e:	6a ff                	push   0xffffffff
c0012520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012524:	52                   	push   edx
c0012525:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012529:	51                   	push   ecx
c001252a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001252e:	50                   	push   eax
c001252f:	e8 38 ff ff ff       	call   c001246c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012534:	83 c4 14             	add    esp,0x14
c0012537:	c3                   	ret    

c0012538 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001253c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001253f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012543:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012546:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001254b:	83 f8 01             	cmp    eax,0x1
c001254e:	19 c0                	sbb    eax,eax
c0012550:	83 ca 03             	or     edx,0x3
c0012553:	83 e0 fc             	and    eax,0xfffffffc
c0012556:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001255d:	0f 20 d8             	mov    eax,cr3
c0012560:	0f 22 d8             	mov    cr3,eax
c0012563:	c3                   	ret    

c0012564 <VAS::~VAS()>:
c0012564:	83 ec 2c             	sub    esp,0x2c
c0012567:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001256f:	fa                   	cli    
c0012570:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012575:	83 c0 01             	add    eax,0x1
c0012578:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c001257d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012582:	8b 00                	mov    eax,DWORD PTR [eax]
c0012584:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012587:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001258d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012591:	6a 01                	push   0x1
c0012593:	50                   	push   eax
c0012594:	e8 9f ff ff ff       	call   c0012538 <VAS::mapOtherVASIn(bool, VAS*)>
c0012599:	83 c4 0c             	add    esp,0xc
c001259c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125a4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00125ac:	0f 8f d8 00 00 00    	jg     c001268a <VAS::~VAS()+0x126>
c00125b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125bd:	c1 e2 02             	shl    edx,0x2
c00125c0:	01 d0                	add    eax,edx
c00125c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00125c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125cc:	83 e0 01             	and    eax,0x1
c00125cf:	0f 84 ab 00 00 00    	je     c0012680 <VAS::~VAS()+0x11c>
c00125d5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125dd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00125e5:	7f 74                	jg     c001265b <VAS::~VAS()+0xf7>
c00125e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125eb:	c1 e0 0a             	shl    eax,0xa
c00125ee:	89 c2                	mov    edx,eax
c00125f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125f4:	01 d0                	add    eax,edx
c00125f6:	c1 e0 0c             	shl    eax,0xc
c00125f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125fd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012602:	8b 00                	mov    eax,DWORD PTR [eax]
c0012604:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012607:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001260d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012611:	6a 01                	push   0x1
c0012613:	50                   	push   eax
c0012614:	e8 8b fc ff ff       	call   c00122a4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012619:	83 c4 0c             	add    esp,0xc
c001261c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012624:	8b 00                	mov    eax,DWORD PTR [eax]
c0012626:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001262a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001262e:	25 01 04 00 00       	and    eax,0x401
c0012633:	3d 01 04 00 00       	cmp    eax,0x401
c0012638:	75 1a                	jne    c0012654 <VAS::~VAS()+0xf0>
c001263a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001263e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012643:	83 ec 0c             	sub    esp,0xc
c0012646:	50                   	push   eax
c0012647:	e8 3b c7 ff ff       	call   c000ed87 <Phys::freePage(unsigned long)>
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012654:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0012659:	eb 82                	jmp    c00125dd <VAS::~VAS()+0x79>
c001265b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001265f:	25 00 04 00 00       	and    eax,0x400
c0012664:	74 1a                	je     c0012680 <VAS::~VAS()+0x11c>
c0012666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001266a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001266f:	83 ec 0c             	sub    esp,0xc
c0012672:	50                   	push   eax
c0012673:	e8 0f c7 ff ff       	call   c000ed87 <Phys::freePage(unsigned long)>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012680:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012685:	e9 1a ff ff ff       	jmp    c00125a4 <VAS::~VAS()+0x40>
c001268a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001268e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012691:	83 ec 0c             	sub    esp,0xc
c0012694:	50                   	push   eax
c0012695:	e8 57 fc ff ff       	call   c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00126a4:	83 ec 0c             	sub    esp,0xc
c00126a7:	50                   	push   eax
c00126a8:	e8 da c6 ff ff       	call   c000ed87 <Phys::freePage(unsigned long)>
c00126ad:	83 c4 10             	add    esp,0x10
c00126b0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126b5:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00126bd:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00126c2:	85 c0                	test   eax,eax
c00126c4:	75 01                	jne    c00126c7 <VAS::~VAS()+0x163>
c00126c6:	fb                   	sti    
c00126c7:	90                   	nop
c00126c8:	83 c4 2c             	add    esp,0x2c
c00126cb:	c3                   	ret    

c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00126cc:	55                   	push   ebp
c00126cd:	57                   	push   edi
c00126ce:	56                   	push   esi
c00126cf:	53                   	push   ebx
c00126d0:	83 ec 1c             	sub    esp,0x1c
c00126d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00126d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00126db:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00126df:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00126e5:	77 08                	ja     c00126ef <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00126e7:	0f 20 d8             	mov    eax,cr3
c00126ea:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00126ed:	75 43                	jne    c0012732 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00126ef:	89 d8                	mov    eax,ebx
c00126f1:	09 f8                	or     eax,edi
c00126f3:	a9 ff 0f 00 00       	test   eax,0xfff
c00126f8:	75 53                	jne    c001274d <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00126fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00126fd:	89 de                	mov    esi,ebx
c00126ff:	c1 ee 16             	shr    esi,0x16
c0012702:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012709:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001270d:	74 50                	je     c001275f <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c001270f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012713:	c1 eb 0a             	shr    ebx,0xa
c0012716:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001271c:	c1 e6 0c             	shl    esi,0xc
c001271f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012725:	09 c7                	or     edi,eax
c0012727:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001272a:	83 c4 1c             	add    esp,0x1c
c001272d:	5b                   	pop    ebx
c001272e:	5e                   	pop    esi
c001272f:	5f                   	pop    edi
c0012730:	5d                   	pop    ebp
c0012731:	c3                   	ret    
c0012732:	83 ec 0c             	sub    esp,0xc
c0012735:	68 70 2b 02 c0       	push   0xc0022b70
c001273a:	e8 0f 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001273f:	89 d8                	mov    eax,ebx
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	09 f8                	or     eax,edi
c0012746:	a9 ff 0f 00 00       	test   eax,0xfff
c001274b:	74 ad                	je     c00126fa <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001274d:	83 ec 0c             	sub    esp,0xc
c0012750:	68 d8 2b 02 c0       	push   0xc0022bd8
c0012755:	e8 9c c4 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001275a:	83 c4 10             	add    esp,0x10
c001275d:	eb 9b                	jmp    c00126fa <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001275f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012763:	e8 88 c6 ff ff       	call   c000edf0 <Phys::allocatePage()>
c0012768:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c001276e:	83 ec 0c             	sub    esp,0xc
c0012771:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012775:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012779:	6a 01                	push   0x1
c001277b:	e8 73 f8 ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c0012780:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012787:	6a 01                	push   0x1
c0012789:	50                   	push   eax
c001278a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001278e:	52                   	push   edx
c001278f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012793:	51                   	push   ecx
c0012794:	e8 2d 01 00 00       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012799:	83 c4 1c             	add    esp,0x1c
c001279c:	68 00 10 00 00       	push   0x1000
c00127a1:	6a 00                	push   0x0
c00127a3:	50                   	push   eax
c00127a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127a8:	e8 43 dd fe ff       	call   c00004f0 <memset>
c00127ad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127b4:	e8 38 fb ff ff       	call   c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c00127b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00127c7:	0d 07 04 00 00       	or     eax,0x407
c00127cc:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00127cf:	e9 3b ff ff ff       	jmp    c001270f <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00127d4 <VAS::allocatePages(int, int)>:
c00127d4:	55                   	push   ebp
c00127d5:	57                   	push   edi
c00127d6:	56                   	push   esi
c00127d7:	53                   	push   ebx
c00127d8:	83 ec 1c             	sub    esp,0x1c
c00127db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00127df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127e3:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00127e7:	75 75                	jne    c001285e <VAS::allocatePages(int, int)+0x8a>
c00127e9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00127ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f0:	85 c0                	test   eax,eax
c00127f2:	74 49                	je     c001283d <VAS::allocatePages(int, int)+0x69>
c00127f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127f8:	89 d5                	mov    ebp,edx
c00127fa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127fe:	c1 e5 0c             	shl    ebp,0xc
c0012801:	01 dd                	add    ebp,ebx
c0012803:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012806:	81 cf 00 04 00 00    	or     edi,0x400
c001280c:	85 d2                	test   edx,edx
c001280e:	7e 1b                	jle    c001282b <VAS::allocatePages(int, int)+0x57>
c0012810:	e8 db c5 ff ff       	call   c000edf0 <Phys::allocatePage()>
c0012815:	57                   	push   edi
c0012816:	53                   	push   ebx
c0012817:	81 c3 00 10 00 00    	add    ebx,0x1000
c001281d:	50                   	push   eax
c001281e:	56                   	push   esi
c001281f:	e8 a8 fe ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	39 dd                	cmp    ebp,ebx
c0012829:	75 e5                	jne    c0012810 <VAS::allocatePages(int, int)+0x3c>
c001282b:	0f 20 d8             	mov    eax,cr3
c001282e:	0f 22 d8             	mov    cr3,eax
c0012831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012835:	83 c4 1c             	add    esp,0x1c
c0012838:	5b                   	pop    ebx
c0012839:	5e                   	pop    esi
c001283a:	5f                   	pop    edi
c001283b:	5d                   	pop    ebp
c001283c:	c3                   	ret    
c001283d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	68 fc 2b 02 c0       	push   0xc0022bfc
c0012849:	e8 a8 c3 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001284e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012851:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012855:	83 c4 10             	add    esp,0x10
c0012858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001285c:	eb 96                	jmp    c00127f4 <VAS::allocatePages(int, int)+0x20>
c001285e:	83 ec 0c             	sub    esp,0xc
c0012861:	52                   	push   edx
c0012862:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0012866:	e8 88 f7 ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c001286b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001286f:	83 c4 10             	add    esp,0x10
c0012872:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012877:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001287b:	77 38                	ja     c00128b5 <VAS::allocatePages(int, int)+0xe1>
c001287d:	85 d2                	test   edx,edx
c001287f:	7e aa                	jle    c001282b <VAS::allocatePages(int, int)+0x57>
c0012881:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012885:	c1 e2 0c             	shl    edx,0xc
c0012888:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001288c:	81 cf 00 04 00 00    	or     edi,0x400
c0012892:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0012895:	e8 56 c5 ff ff       	call   c000edf0 <Phys::allocatePage()>
c001289a:	57                   	push   edi
c001289b:	53                   	push   ebx
c001289c:	81 c3 00 10 00 00    	add    ebx,0x1000
c00128a2:	50                   	push   eax
c00128a3:	56                   	push   esi
c00128a4:	e8 23 fe ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	39 dd                	cmp    ebp,ebx
c00128ae:	75 e5                	jne    c0012895 <VAS::allocatePages(int, int)+0xc1>
c00128b0:	e9 76 ff ff ff       	jmp    c001282b <VAS::allocatePages(int, int)+0x57>
c00128b5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00128b9:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c00128be:	09 c1                	or     ecx,eax
c00128c0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00128c4:	eb b7                	jmp    c001287d <VAS::allocatePages(int, int)+0xa9>

c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00128c6:	55                   	push   ebp
c00128c7:	57                   	push   edi
c00128c8:	56                   	push   esi
c00128c9:	53                   	push   ebx
c00128ca:	83 ec 1c             	sub    esp,0x1c
c00128cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00128d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00128d5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00128d9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00128dd:	85 db                	test   ebx,ebx
c00128df:	7e 2c                	jle    c001290d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00128e1:	c1 e3 0c             	shl    ebx,0xc
c00128e4:	8d 04 33             	lea    eax,[ebx+esi*1]
c00128e7:	89 f3                	mov    ebx,esi
c00128e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128ed:	55                   	push   ebp
c00128ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00128f2:	29 f2                	sub    edx,esi
c00128f4:	01 da                	add    edx,ebx
c00128f6:	52                   	push   edx
c00128f7:	53                   	push   ebx
c00128f8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00128fe:	57                   	push   edi
c00128ff:	e8 c8 fd ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012904:	83 c4 10             	add    esp,0x10
c0012907:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c001290b:	75 e0                	jne    c00128ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001290d:	0f 20 d8             	mov    eax,cr3
c0012910:	0f 22 d8             	mov    cr3,eax
c0012913:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012917:	83 c4 1c             	add    esp,0x1c
c001291a:	5b                   	pop    ebx
c001291b:	5e                   	pop    esi
c001291c:	5f                   	pop    edi
c001291d:	5d                   	pop    ebp
c001291e:	c3                   	ret    
c001291f:	90                   	nop

c0012920 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012920:	55                   	push   ebp
c0012921:	57                   	push   edi
c0012922:	56                   	push   esi
c0012923:	53                   	push   ebx
c0012924:	83 ec 1c             	sub    esp,0x1c
c0012927:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001292b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001292f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012933:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012937:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001293b:	09 d8                	or     eax,ebx
c001293d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012942:	75 4b                	jne    c001298f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012944:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012947:	89 de                	mov    esi,ebx
c0012949:	c1 ee 16             	shr    esi,0x16
c001294c:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0012953:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012957:	74 48                	je     c00129a1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0012959:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c001295e:	c1 eb 0a             	shr    ebx,0xa
c0012961:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012965:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0012969:	83 ff 01             	cmp    edi,0x1
c001296c:	19 c0                	sbb    eax,eax
c001296e:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012974:	c1 e6 0c             	shl    esi,0xc
c0012977:	25 00 00 c0 ff       	and    eax,0xffc00000
c001297c:	01 f3                	add    ebx,esi
c001297e:	09 ca                	or     edx,ecx
c0012980:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0012987:	83 c4 1c             	add    esp,0x1c
c001298a:	5b                   	pop    ebx
c001298b:	5e                   	pop    esi
c001298c:	5f                   	pop    edi
c001298d:	5d                   	pop    ebp
c001298e:	c3                   	ret    
c001298f:	83 ec 0c             	sub    esp,0xc
c0012992:	68 28 2c 02 c0       	push   0xc0022c28
c0012997:	e8 5a c2 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	eb a3                	jmp    c0012944 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00129a1:	e8 4a c4 ff ff       	call   c000edf0 <Phys::allocatePage()>
c00129a6:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c00129ac:	83 ec 0c             	sub    esp,0xc
c00129af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00129b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129b7:	6a 01                	push   0x1
c00129b9:	e8 35 f6 ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c00129be:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00129c5:	6a 01                	push   0x1
c00129c7:	50                   	push   eax
c00129c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129cc:	50                   	push   eax
c00129cd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00129d1:	51                   	push   ecx
c00129d2:	e8 ef fe ff ff       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129d7:	83 c4 1c             	add    esp,0x1c
c00129da:	68 00 10 00 00       	push   0x1000
c00129df:	6a 00                	push   0x0
c00129e1:	50                   	push   eax
c00129e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129e6:	e8 05 db fe ff       	call   c00004f0 <memset>
c00129eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00129ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00129f2:	e8 fa f8 ff ff       	call   c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c00129f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012a01:	81 ca 07 04 00 00    	or     edx,0x407
c0012a07:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0012a0a:	e9 4a ff ff ff       	jmp    c0012959 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0012a0f:	90                   	nop

c0012a10 <VAS::VAS(bool)>:
c0012a10:	53                   	push   ebx
c0012a11:	83 ec 28             	sub    esp,0x28
c0012a14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012a1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012a32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a36:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012a3a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012a3d:	e8 ae c3 ff ff       	call   c000edf0 <Phys::allocatePage()>
c0012a42:	89 c2                	mov    edx,eax
c0012a44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a48:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012a4b:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0012a51:	83 ec 0c             	sub    esp,0xc
c0012a54:	6a 01                	push   0x1
c0012a56:	e8 98 f5 ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c0012a5b:	83 c4 10             	add    esp,0x10
c0012a5e:	89 c2                	mov    edx,eax
c0012a60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a64:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012a67:	83 ec 0c             	sub    esp,0xc
c0012a6a:	6a 03                	push   0x3
c0012a6c:	6a 01                	push   0x1
c0012a6e:	52                   	push   edx
c0012a6f:	50                   	push   eax
c0012a70:	53                   	push   ebx
c0012a71:	e8 50 fe ff ff       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a76:	83 c4 20             	add    esp,0x20
c0012a79:	89 c2                	mov    edx,eax
c0012a7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a7f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012a82:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012a8a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012a92:	7f 1d                	jg     c0012ab1 <VAS::VAS(bool)+0xa1>
c0012a94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012a9f:	c1 e2 02             	shl    edx,0x2
c0012aa2:	01 d0                	add    eax,edx
c0012aa4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012aaa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012aaf:	eb d9                	jmp    c0012a8a <VAS::VAS(bool)+0x7a>
c0012ab1:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012ab9:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012ac1:	7f 59                	jg     c0012b1c <VAS::VAS(bool)+0x10c>
c0012ac3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ac7:	2d 00 02 00 00       	sub    eax,0x200
c0012acc:	c1 e0 0c             	shl    eax,0xc
c0012acf:	89 c2                	mov    edx,eax
c0012ad1:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012ad6:	89 d1                	mov    ecx,edx
c0012ad8:	09 c1                	or     ecx,eax
c0012ada:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ade:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ae1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012ae5:	c1 e2 02             	shl    edx,0x2
c0012ae8:	01 d0                	add    eax,edx
c0012aea:	83 c9 05             	or     ecx,0x5
c0012aed:	89 ca                	mov    edx,ecx
c0012aef:	89 10                	mov    DWORD PTR [eax],edx
c0012af1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012af5:	2d 40 03 00 00       	sub    eax,0x340
c0012afa:	83 f8 7f             	cmp    eax,0x7f
c0012afd:	77 16                	ja     c0012b15 <VAS::VAS(bool)+0x105>
c0012aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b06:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b0a:	c1 e2 02             	shl    edx,0x2
c0012b0d:	01 d0                	add    eax,edx
c0012b0f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b15:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012b1a:	eb 9d                	jmp    c0012ab9 <VAS::VAS(bool)+0xa9>
c0012b1c:	8b 15 68 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d768
c0012b22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b29:	05 20 0c 00 00       	add    eax,0xc20
c0012b2e:	81 ca 03 40 00 00    	or     edx,0x4003
c0012b34:	89 10                	mov    DWORD PTR [eax],edx
c0012b36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b3a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012b3d:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012b42:	09 c2                	or     edx,eax
c0012b44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b4b:	05 fc 0f 00 00       	add    eax,0xffc
c0012b50:	83 ca 03             	or     edx,0x3
c0012b53:	89 10                	mov    DWORD PTR [eax],edx
c0012b55:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012b5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b60:	83 ec 0c             	sub    esp,0xc
c0012b63:	50                   	push   eax
c0012b64:	e8 5b 67 ff ff       	call   c00092c4 <Device::getName()>
c0012b69:	83 c4 10             	add    esp,0x10
c0012b6c:	83 ec 08             	sub    esp,0x8
c0012b6f:	68 ab 30 02 c0       	push   0xc00230ab
c0012b74:	50                   	push   eax
c0012b75:	e8 06 dc fe ff       	call   c0000780 <strcmp>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	85 c0                	test   eax,eax
c0012b7f:	0f 94 c0             	sete   al
c0012b82:	0f b6 c0             	movzx  eax,al
c0012b85:	85 c0                	test   eax,eax
c0012b87:	74 68                	je     c0012bf1 <VAS::VAS(bool)+0x1e1>
c0012b89:	fa                   	cli    
c0012b8a:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012b8f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b95:	05 68 09 00 00       	add    eax,0x968
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	50                   	push   eax
c0012b9e:	e8 ef b6 ff ff       	call   c000e292 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012bab:	89 c3                	mov    ebx,eax
c0012bad:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012bb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bb8:	05 68 09 00 00       	add    eax,0x968
c0012bbd:	83 ec 0c             	sub    esp,0xc
c0012bc0:	50                   	push   eax
c0012bc1:	e8 cc b6 ff ff       	call   c000e292 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	83 ec 08             	sub    esp,0x8
c0012bcc:	50                   	push   eax
c0012bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bd1:	e8 fc f6 ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c0012bd6:	83 c4 10             	add    esp,0x10
c0012bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bdb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012be0:	6a 11                	push   0x11
c0012be2:	53                   	push   ebx
c0012be3:	50                   	push   eax
c0012be4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012be8:	e8 df fa ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012bed:	83 c4 10             	add    esp,0x10
c0012bf0:	fb                   	sti    
c0012bf1:	90                   	nop
c0012bf2:	83 c4 28             	add    esp,0x28
c0012bf5:	5b                   	pop    ebx
c0012bf6:	c3                   	ret    
c0012bf7:	90                   	nop

c0012bf8 <VAS::evict(unsigned long)>:
c0012bf8:	55                   	push   ebp
c0012bf9:	57                   	push   edi
c0012bfa:	56                   	push   esi
c0012bfb:	53                   	push   ebx
c0012bfc:	83 ec 24             	sub    esp,0x24
c0012bff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012c03:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012c07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c0b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012c10:	50                   	push   eax
c0012c11:	68 b9 30 02 c0       	push   0xc00230b9
c0012c16:	e8 33 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c1b:	e8 28 f5 ff ff       	call   c0012148 <Virt::allocateSwapfilePage()>
c0012c20:	83 c4 10             	add    esp,0x10
c0012c23:	89 c7                	mov    edi,eax
c0012c25:	a1 4c 4d 02 c0       	mov    eax,ds:0xc0024d4c
c0012c2a:	85 c0                	test   eax,eax
c0012c2c:	7e 40                	jle    c0012c6e <VAS::evict(unsigned long)+0x76>
c0012c2e:	89 ee                	mov    esi,ebp
c0012c30:	31 db                	xor    ebx,ebx
c0012c32:	83 ec 0c             	sub    esp,0xc
c0012c35:	57                   	push   edi
c0012c36:	e8 f7 f4 ff ff       	call   c0012132 <Virt::swapIDToSector(unsigned long)>
c0012c3b:	31 d2                	xor    edx,edx
c0012c3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c40:	81 c6 00 02 00 00    	add    esi,0x200
c0012c46:	6a 01                	push   0x1
c0012c48:	52                   	push   edx
c0012c49:	01 d8                	add    eax,ebx
c0012c4b:	83 c3 01             	add    ebx,0x1
c0012c4e:	50                   	push   eax
c0012c4f:	0f be 05 58 4d 02 c0 	movsx  eax,BYTE PTR ds:0xc0024d58
c0012c56:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0012c5d:	50                   	push   eax
c0012c5e:	e8 c5 74 ff ff       	call   c000a128 <LogicalDisk::write(unsigned long long, int, void*)>
c0012c63:	83 c4 20             	add    esp,0x20
c0012c66:	39 1d 4c 4d 02 c0    	cmp    DWORD PTR ds:0xc0024d4c,ebx
c0012c6c:	7f c4                	jg     c0012c32 <VAS::evict(unsigned long)+0x3a>
c0012c6e:	c1 e7 0c             	shl    edi,0xc
c0012c71:	83 ec 08             	sub    esp,0x8
c0012c74:	55                   	push   ebp
c0012c75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c79:	50                   	push   eax
c0012c7a:	e8 53 f6 ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c0012c7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c81:	89 d3                	mov    ebx,edx
c0012c83:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012c89:	09 d7                	or     edi,edx
c0012c8b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c91:	89 38                	mov    DWORD PTR [eax],edi
c0012c93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c96:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0012c9c:	83 c2 01             	add    edx,0x1
c0012c9f:	89 15 c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,edx
c0012ca5:	e8 dd c0 ff ff       	call   c000ed87 <Phys::freePage(unsigned long)>
c0012caa:	0f 20 d8             	mov    eax,cr3
c0012cad:	0f 22 d8             	mov    cr3,eax
c0012cb0:	8b 0d c8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cec8
c0012cb6:	51                   	push   ecx
c0012cb7:	55                   	push   ebp
c0012cb8:	53                   	push   ebx
c0012cb9:	68 4c 2c 02 c0       	push   0xc0022c4c
c0012cbe:	e8 8b 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cc3:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c0012cc8:	83 c4 18             	add    esp,0x18
c0012ccb:	50                   	push   eax
c0012ccc:	68 ce 30 02 c0       	push   0xc00230ce
c0012cd1:	8d 50 01             	lea    edx,[eax+0x1]
c0012cd4:	89 15 c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edx
c0012cda:	e8 6f 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cdf:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012ce4:	c7 44 24 40 e0 30 02 c0 	mov    DWORD PTR [esp+0x40],0xc00230e0
c0012cec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012cf0:	83 c4 2c             	add    esp,0x2c
c0012cf3:	5b                   	pop    ebx
c0012cf4:	5e                   	pop    esi
c0012cf5:	5f                   	pop    edi
c0012cf6:	5d                   	pop    ebp
c0012cf7:	e9 52 42 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012cfc <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012cfc:	55                   	push   ebp
c0012cfd:	57                   	push   edi
c0012cfe:	56                   	push   esi
c0012cff:	53                   	push   ebx
c0012d00:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0012d06:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0012d0d:	89 f3                	mov    ebx,esi
c0012d0f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d15:	53                   	push   ebx
c0012d16:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0012d1d:	50                   	push   eax
c0012d1e:	e8 af f5 ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c0012d23:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012d29:	5a                   	pop    edx
c0012d2a:	59                   	pop    ecx
c0012d2b:	89 c5                	mov    ebp,eax
c0012d2d:	0f 87 cb 00 00 00    	ja     c0012dfe <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012d33:	83 ec 08             	sub    esp,0x8
c0012d36:	56                   	push   esi
c0012d37:	68 80 2c 02 c0       	push   0xc0022c80
c0012d3c:	e8 0d 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d41:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012d46:	5e                   	pop    esi
c0012d47:	5f                   	pop    edi
c0012d48:	50                   	push   eax
c0012d49:	68 b0 2c 02 c0       	push   0xc0022cb0
c0012d4e:	e8 fb 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d53:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012d59:	58                   	pop    eax
c0012d5a:	5a                   	pop    edx
c0012d5b:	51                   	push   ecx
c0012d5c:	68 d4 2c 02 c0       	push   0xc0022cd4
c0012d61:	e8 e8 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d66:	83 c4 10             	add    esp,0x10
c0012d69:	85 db                	test   ebx,ebx
c0012d6b:	74 5b                	je     c0012dc8 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012d6d:	85 ed                	test   ebp,ebp
c0012d6f:	74 21                	je     c0012d92 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0012d71:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0012d74:	f7 c6 00 02 00 00    	test   esi,0x200
c0012d7a:	0f 85 c5 00 00 00    	jne    c0012e45 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0012d80:	89 f0                	mov    eax,esi
c0012d82:	25 01 04 00 00       	and    eax,0x401
c0012d87:	3d 00 04 00 00       	cmp    eax,0x400
c0012d8c:	0f 84 39 01 00 00    	je     c0012ecb <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0012d92:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012d97:	83 ec 08             	sub    esp,0x8
c0012d9a:	50                   	push   eax
c0012d9b:	68 c8 2e 02 c0       	push   0xc0022ec8
c0012da0:	e8 a9 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012da5:	8b 1d b0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6b0
c0012dab:	5a                   	pop    edx
c0012dac:	59                   	pop    ecx
c0012dad:	53                   	push   ebx
c0012dae:	68 ec 2e 02 c0       	push   0xc0022eec
c0012db3:	e8 96 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012db8:	83 c4 10             	add    esp,0x10
c0012dbb:	31 c0                	xor    eax,eax
c0012dbd:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012dc3:	5b                   	pop    ebx
c0012dc4:	5e                   	pop    esi
c0012dc5:	5f                   	pop    edi
c0012dc6:	5d                   	pop    ebp
c0012dc7:	c3                   	ret    
c0012dc8:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012dcd:	83 ec 08             	sub    esp,0x8
c0012dd0:	50                   	push   eax
c0012dd1:	68 f8 2c 02 c0       	push   0xc0022cf8
c0012dd6:	e8 73 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ddb:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012de1:	58                   	pop    eax
c0012de2:	5a                   	pop    edx
c0012de3:	51                   	push   ecx
c0012de4:	68 1c 2d 02 c0       	push   0xc0022d1c
c0012de9:	e8 60 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	31 c0                	xor    eax,eax
c0012df3:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012df9:	5b                   	pop    ebx
c0012dfa:	5e                   	pop    esi
c0012dfb:	5f                   	pop    edi
c0012dfc:	5d                   	pop    ebp
c0012dfd:	c3                   	ret    
c0012dfe:	83 ec 0c             	sub    esp,0xc
c0012e01:	68 f5 30 02 c0       	push   0xc00230f5
c0012e06:	e8 eb bd ff ff       	call   c000ebf6 <KePanic(char const*)>
c0012e0b:	5f                   	pop    edi
c0012e0c:	58                   	pop    eax
c0012e0d:	56                   	push   esi
c0012e0e:	68 80 2c 02 c0       	push   0xc0022c80
c0012e13:	e8 36 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e18:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c0012e1e:	58                   	pop    eax
c0012e1f:	5a                   	pop    edx
c0012e20:	51                   	push   ecx
c0012e21:	68 b0 2c 02 c0       	push   0xc0022cb0
c0012e26:	e8 23 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e2b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012e30:	5e                   	pop    esi
c0012e31:	5f                   	pop    edi
c0012e32:	50                   	push   eax
c0012e33:	68 d4 2c 02 c0       	push   0xc0022cd4
c0012e38:	e8 11 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e3d:	83 c4 10             	add    esp,0x10
c0012e40:	e9 28 ff ff ff       	jmp    c0012d6d <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0012e45:	83 ec 0c             	sub    esp,0xc
c0012e48:	68 40 2d 02 c0       	push   0xc0022d40
c0012e4d:	e8 fc 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e52:	e8 99 bf ff ff       	call   c000edf0 <Phys::allocatePage()>
c0012e57:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012e5a:	83 ca 01             	or     edx,0x1
c0012e5d:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012e60:	0f 20 da             	mov    edx,cr3
c0012e63:	0f 22 da             	mov    cr3,edx
c0012e66:	ba 00 10 00 00       	mov    edx,0x1000
c0012e6b:	89 de                	mov    esi,ebx
c0012e6d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e71:	89 d1                	mov    ecx,edx
c0012e73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e75:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012e78:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012e7e:	09 c8                	or     eax,ecx
c0012e80:	83 c8 02             	or     eax,0x2
c0012e83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012e86:	0f 20 d8             	mov    eax,cr3
c0012e89:	0f 22 d8             	mov    cr3,eax
c0012e8c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012e90:	89 df                	mov    edi,ebx
c0012e92:	89 d1                	mov    ecx,edx
c0012e94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e96:	59                   	pop    ecx
c0012e97:	8b 35 8c d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d68c
c0012e9d:	5b                   	pop    ebx
c0012e9e:	56                   	push   esi
c0012e9f:	68 60 2d 02 c0       	push   0xc0022d60
c0012ea4:	e8 a5 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ea9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012eae:	5f                   	pop    edi
c0012eaf:	5d                   	pop    ebp
c0012eb0:	50                   	push   eax
c0012eb1:	68 84 2d 02 c0       	push   0xc0022d84
c0012eb6:	e8 93 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ebb:	83 c4 10             	add    esp,0x10
c0012ebe:	b0 01                	mov    al,0x1
c0012ec0:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012ec6:	5b                   	pop    ebx
c0012ec7:	5e                   	pop    esi
c0012ec8:	5f                   	pop    edi
c0012ec9:	5d                   	pop    ebp
c0012eca:	c3                   	ret    
c0012ecb:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012ed0:	c1 ee 0c             	shr    esi,0xc
c0012ed3:	83 ec 08             	sub    esp,0x8
c0012ed6:	50                   	push   eax
c0012ed7:	68 a8 2d 02 c0       	push   0xc0022da8
c0012edc:	e8 6d 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ee1:	e8 0a bf ff ff       	call   c000edf0 <Phys::allocatePage()>
c0012ee6:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012eec:	89 c7                	mov    edi,eax
c0012eee:	58                   	pop    eax
c0012eef:	5a                   	pop    edx
c0012ef0:	51                   	push   ecx
c0012ef1:	68 cc 2d 02 c0       	push   0xc0022dcc
c0012ef6:	e8 53 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012efb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012f07:	09 fa                	or     edx,edi
c0012f09:	31 ff                	xor    edi,edi
c0012f0b:	81 ca 01 08 00 00    	or     edx,0x801
c0012f11:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012f14:	89 dd                	mov    ebp,ebx
c0012f16:	a1 4c 4d 02 c0       	mov    eax,ds:0xc0024d4c
c0012f1b:	85 c0                	test   eax,eax
c0012f1d:	7e 61                	jle    c0012f80 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c0012f1f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f24:	83 ec 08             	sub    esp,0x8
c0012f27:	50                   	push   eax
c0012f28:	68 80 2e 02 c0       	push   0xc0022e80
c0012f2d:	e8 1c 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f32:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f35:	e8 f8 f1 ff ff       	call   c0012132 <Virt::swapIDToSector(unsigned long)>
c0012f3a:	31 d2                	xor    edx,edx
c0012f3c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f3f:	81 c5 00 02 00 00    	add    ebp,0x200
c0012f45:	6a 01                	push   0x1
c0012f47:	52                   	push   edx
c0012f48:	01 f8                	add    eax,edi
c0012f4a:	83 c7 01             	add    edi,0x1
c0012f4d:	50                   	push   eax
c0012f4e:	0f be 05 58 4d 02 c0 	movsx  eax,BYTE PTR ds:0xc0024d58
c0012f55:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0012f5c:	50                   	push   eax
c0012f5d:	e8 5a 71 ff ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c0012f62:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f67:	83 c4 18             	add    esp,0x18
c0012f6a:	50                   	push   eax
c0012f6b:	68 a4 2e 02 c0       	push   0xc0022ea4
c0012f70:	e8 d9 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f75:	83 c4 10             	add    esp,0x10
c0012f78:	39 3d 4c 4d 02 c0    	cmp    DWORD PTR ds:0xc0024d4c,edi
c0012f7e:	7f 9f                	jg     c0012f1f <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c0012f80:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f85:	83 ec 08             	sub    esp,0x8
c0012f88:	50                   	push   eax
c0012f89:	68 f0 2d 02 c0       	push   0xc0022df0
c0012f8e:	e8 bb 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f93:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0012f98:	83 c4 0c             	add    esp,0xc
c0012f9b:	83 e8 01             	sub    eax,0x1
c0012f9e:	50                   	push   eax
c0012f9f:	53                   	push   ebx
c0012fa0:	68 07 31 02 c0       	push   0xc0023107
c0012fa5:	a3 c8 ce 02 c0       	mov    ds:0xc002cec8,eax
c0012faa:	e8 9f 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012faf:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fb2:	e8 58 f1 ff ff       	call   c001210f <Virt::freeSwapfilePage(unsigned long)>
c0012fb7:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012fbd:	58                   	pop    eax
c0012fbe:	5a                   	pop    edx
c0012fbf:	51                   	push   ecx
c0012fc0:	68 14 2e 02 c0       	push   0xc0022e14
c0012fc5:	e8 84 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fca:	0f 20 d8             	mov    eax,cr3
c0012fcd:	0f 22 d8             	mov    cr3,eax
c0012fd0:	c7 04 24 1c 31 02 c0 	mov    DWORD PTR [esp],0xc002311c
c0012fd7:	e8 72 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fdc:	8b 3d 8c d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d68c
c0012fe2:	5b                   	pop    ebx
c0012fe3:	5e                   	pop    esi
c0012fe4:	57                   	push   edi
c0012fe5:	68 38 2e 02 c0       	push   0xc0022e38
c0012fea:	e8 5f 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012fef:	5d                   	pop    ebp
c0012ff0:	58                   	pop    eax
c0012ff1:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012ff6:	50                   	push   eax
c0012ff7:	68 5c 2e 02 c0       	push   0xc0022e5c
c0012ffc:	e8 4d 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	b0 01                	mov    al,0x1
c0013006:	e9 b2 fd ff ff       	jmp    c0012dbd <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c001300b:	90                   	nop

c001300c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001300c:	55                   	push   ebp
c001300d:	57                   	push   edi
c001300e:	56                   	push   esi
c001300f:	53                   	push   ebx
c0013010:	83 ec 28             	sub    esp,0x28
c0013013:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013017:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001301b:	50                   	push   eax
c001301c:	e8 d2 ef ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c0013021:	83 c4 0c             	add    esp,0xc
c0013024:	6a 07                	push   0x7
c0013026:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001302a:	52                   	push   edx
c001302b:	89 c5                	mov    ebp,eax
c001302d:	53                   	push   ebx
c001302e:	e8 a1 f7 ff ff       	call   c00127d4 <VAS::allocatePages(int, int)>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001303a:	89 c7                	mov    edi,eax
c001303c:	85 c9                	test   ecx,ecx
c001303e:	74 2f                	je     c001306f <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013040:	31 f6                	xor    esi,esi
c0013042:	e8 a9 bd ff ff       	call   c000edf0 <Phys::allocatePage()>
c0013047:	83 c6 01             	add    esi,0x1
c001304a:	6a 03                	push   0x3
c001304c:	55                   	push   ebp
c001304d:	50                   	push   eax
c001304e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013052:	53                   	push   ebx
c0013053:	e8 74 f6 ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013058:	6a 07                	push   0x7
c001305a:	57                   	push   edi
c001305b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001305f:	50                   	push   eax
c0013060:	53                   	push   ebx
c0013061:	e8 66 f6 ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013066:	83 c4 20             	add    esp,0x20
c0013069:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c001306d:	75 d3                	jne    c0013042 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001306f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013073:	89 28                	mov    DWORD PTR [eax],ebp
c0013075:	83 c4 1c             	add    esp,0x1c
c0013078:	89 f8                	mov    eax,edi
c001307a:	5b                   	pop    ebx
c001307b:	5e                   	pop    esi
c001307c:	5f                   	pop    edi
c001307d:	5d                   	pop    ebp
c001307e:	c3                   	ret    
c001307f:	90                   	nop

c0013080 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013080:	53                   	push   ebx
c0013081:	83 ec 14             	sub    esp,0x14
c0013084:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013088:	68 10 2f 02 c0       	push   0xc0022f10
c001308d:	e8 bc 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013092:	c7 04 24 70 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f70
c0013099:	e8 b0 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001309e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00130a2:	83 c4 18             	add    esp,0x18
c00130a5:	5b                   	pop    ebx
c00130a6:	e9 46 f2 ff ff       	jmp    c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c00130ab:	90                   	nop

c00130ac <VAS::scanForEviction()>:
c00130ac:	57                   	push   edi
c00130ad:	56                   	push   esi
c00130ae:	31 f6                	xor    esi,esi
c00130b0:	53                   	push   ebx
c00130b1:	83 ec 18             	sub    esp,0x18
c00130b4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00130b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00130bd:	50                   	push   eax
c00130be:	68 ec 2f 02 c0       	push   0xc0022fec
c00130c3:	e8 86 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130c8:	c7 04 24 23 31 02 c0 	mov    DWORD PTR [esp],0xc0023123
c00130cf:	e8 7a 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00130d4:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00130d7:	83 c4 10             	add    esp,0x10
c00130da:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00130e0:	75 0e                	jne    c00130f0 <VAS::scanForEviction()+0x44>
c00130e2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00130e5:	89 da                	mov    edx,ebx
c00130e7:	c1 ea 16             	shr    edx,0x16
c00130ea:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00130ee:	74 5b                	je     c001314b <VAS::scanForEviction()+0x9f>
c00130f0:	83 ec 08             	sub    esp,0x8
c00130f3:	53                   	push   ebx
c00130f4:	57                   	push   edi
c00130f5:	e8 d8 f1 ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c00130fa:	83 c4 10             	add    esp,0x10
c00130fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00130ff:	89 d1                	mov    ecx,edx
c0013101:	c1 e9 0c             	shr    ecx,0xc
c0013104:	74 10                	je     c0013116 <VAS::scanForEviction()+0x6a>
c0013106:	89 d1                	mov    ecx,edx
c0013108:	81 e1 01 08 00 00    	and    ecx,0x801
c001310e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0013114:	74 40                	je     c0013156 <VAS::scanForEviction()+0xaa>
c0013116:	81 c3 00 10 00 00    	add    ebx,0x1000
c001311c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013122:	76 2d                	jbe    c0013151 <VAS::scanForEviction()+0xa5>
c0013124:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001312b:	83 c6 01             	add    esi,0x1
c001312e:	83 fe 03             	cmp    esi,0x3
c0013131:	74 32                	je     c0013165 <VAS::scanForEviction()+0xb9>
c0013133:	31 db                	xor    ebx,ebx
c0013135:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001313b:	75 b3                	jne    c00130f0 <VAS::scanForEviction()+0x44>
c001313d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013140:	89 da                	mov    edx,ebx
c0013142:	c1 ea 16             	shr    edx,0x16
c0013145:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013149:	75 a5                	jne    c00130f0 <VAS::scanForEviction()+0x44>
c001314b:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013151:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013154:	eb 84                	jmp    c00130da <VAS::scanForEviction()+0x2e>
c0013156:	f6 c2 20             	test   dl,0x20
c0013159:	74 13                	je     c001316e <VAS::scanForEviction()+0xc2>
c001315b:	83 e2 df             	and    edx,0xffffffdf
c001315e:	89 10                	mov    DWORD PTR [eax],edx
c0013160:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013163:	eb b1                	jmp    c0013116 <VAS::scanForEviction()+0x6a>
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	31 c0                	xor    eax,eax
c001316a:	5b                   	pop    ebx
c001316b:	5e                   	pop    esi
c001316c:	5f                   	pop    edi
c001316d:	c3                   	ret    
c001316e:	89 d0                	mov    eax,edx
c0013170:	83 ec 08             	sub    esp,0x8
c0013173:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013178:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001317c:	53                   	push   ebx
c001317d:	68 3f 31 02 c0       	push   0xc002313f
c0013182:	e8 c7 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013187:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001318a:	58                   	pop    eax
c001318b:	5a                   	pop    edx
c001318c:	51                   	push   ecx
c001318d:	57                   	push   edi
c001318e:	e8 65 fa ff ff       	call   c0012bf8 <VAS::evict(unsigned long)>
c0013193:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013196:	5b                   	pop    ebx
c0013197:	5e                   	pop    esi
c0013198:	50                   	push   eax
c0013199:	68 53 31 02 c0       	push   0xc0023153
c001319e:	e8 ab 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131a3:	58                   	pop    eax
c00131a4:	5a                   	pop    edx
c00131a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131a9:	50                   	push   eax
c00131aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131ae:	68 66 31 02 c0       	push   0xc0023166
c00131b3:	e8 96 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131b8:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00131bb:	81 c1 00 10 00 00    	add    ecx,0x1000
c00131c1:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00131c4:	8b 3d b0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6b0
c00131ca:	5b                   	pop    ebx
c00131cb:	5e                   	pop    esi
c00131cc:	57                   	push   edi
c00131cd:	68 0c 30 02 c0       	push   0xc002300c
c00131d2:	e8 77 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131d7:	83 c4 10             	add    esp,0x10
c00131da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	5b                   	pop    ebx
c00131e2:	5e                   	pop    esi
c00131e3:	5f                   	pop    edi
c00131e4:	c3                   	ret    

c00131e5 <mapVASFirstTime>:
c00131e5:	55                   	push   ebp
c00131e6:	57                   	push   edi
c00131e7:	56                   	push   esi
c00131e8:	53                   	push   ebx
c00131e9:	83 ec 0c             	sub    esp,0xc
c00131ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00131f4:	83 fa 01             	cmp    edx,0x1
c00131f7:	0f 84 cb 00 00 00    	je     c00132c8 <mapVASFirstTime+0xe3>
c00131fd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013200:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0013205:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001320a:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c001320d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0013213:	c1 e5 15             	shl    ebp,0x15
c0013216:	29 eb                	sub    ebx,ebp
c0013218:	29 ef                	sub    edi,ebp
c001321a:	e8 d1 bb ff ff       	call   c000edf0 <Phys::allocatePage()>
c001321f:	83 ec 0c             	sub    esp,0xc
c0013222:	68 03 04 00 00       	push   0x403
c0013227:	6a 01                	push   0x1
c0013229:	53                   	push   ebx
c001322a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013230:	50                   	push   eax
c0013231:	56                   	push   esi
c0013232:	e8 8f f6 ff ff       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013237:	83 c4 20             	add    esp,0x20
c001323a:	39 fb                	cmp    ebx,edi
c001323c:	75 dc                	jne    c001321a <mapVASFirstTime+0x35>
c001323e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0013243:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0013248:	29 eb                	sub    ebx,ebp
c001324a:	29 ef                	sub    edi,ebp
c001324c:	e8 9f bb ff ff       	call   c000edf0 <Phys::allocatePage()>
c0013251:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013255:	83 fa 01             	cmp    edx,0x1
c0013258:	19 d2                	sbb    edx,edx
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	83 e2 04             	and    edx,0x4
c0013260:	81 c2 03 04 00 00    	add    edx,0x403
c0013266:	52                   	push   edx
c0013267:	6a 01                	push   0x1
c0013269:	53                   	push   ebx
c001326a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013270:	50                   	push   eax
c0013271:	56                   	push   esi
c0013272:	e8 4f f6 ff ff       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013277:	83 c4 20             	add    esp,0x20
c001327a:	39 df                	cmp    edi,ebx
c001327c:	75 ce                	jne    c001324c <mapVASFirstTime+0x67>
c001327e:	83 ec 0c             	sub    esp,0xc
c0013281:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c0013286:	6a 04                	push   0x4
c0013288:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c001328e:	6a ff                	push   0xffffffff
c0013290:	c1 eb 0c             	shr    ebx,0xc
c0013293:	53                   	push   ebx
c0013294:	68 00 60 02 c0       	push   0xc0026000
c0013299:	56                   	push   esi
c001329a:	e8 cd f1 ff ff       	call   c001246c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001329f:	83 c4 14             	add    esp,0x14
c00132a2:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00132a7:	6a 04                	push   0x4
c00132a9:	6a ff                	push   0xffffffff
c00132ab:	53                   	push   ebx
c00132ac:	68 00 60 02 c0       	push   0xc0026000
c00132b1:	50                   	push   eax
c00132b2:	e8 b5 f1 ff ff       	call   c001246c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00132b7:	0f 20 d8             	mov    eax,cr3
c00132ba:	0f 22 d8             	mov    cr3,eax
c00132bd:	83 c4 20             	add    esp,0x20
c00132c0:	83 c4 0c             	add    esp,0xc
c00132c3:	5b                   	pop    ebx
c00132c4:	5e                   	pop    esi
c00132c5:	5f                   	pop    edi
c00132c6:	5d                   	pop    ebp
c00132c7:	c3                   	ret    
c00132c8:	83 ec 0c             	sub    esp,0xc
c00132cb:	68 73 31 02 c0       	push   0xc0023173
c00132d0:	e8 79 3c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	83 c4 0c             	add    esp,0xc
c00132db:	5b                   	pop    ebx
c00132dc:	5e                   	pop    esi
c00132dd:	5f                   	pop    edi
c00132de:	5d                   	pop    ebp
c00132df:	c3                   	ret    

c00132e0 <SysEject(regs*)>:
c00132e0:	83 ec 0c             	sub    esp,0xc
c00132e3:	83 ca ff             	or     edx,0xffffffff
c00132e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ea:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00132ed:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00132f2:	83 e9 41             	sub    ecx,0x41
c00132f5:	83 f9 19             	cmp    ecx,0x19
c00132f8:	77 18                	ja     c0013312 <SysEject(regs*)+0x32>
c00132fa:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0013301:	85 c9                	test   ecx,ecx
c0013303:	74 0d                	je     c0013312 <SysEject(regs*)+0x32>
c0013305:	83 ec 0c             	sub    esp,0xc
c0013308:	51                   	push   ecx
c0013309:	e8 44 6d ff ff       	call   c000a052 <LogicalDisk::eject()>
c001330e:	83 c4 10             	add    esp,0x10
c0013311:	99                   	cdq    
c0013312:	83 c4 0c             	add    esp,0xc
c0013315:	c3                   	ret    

c0013316 <SysExit(regs*)>:
c0013316:	83 ec 18             	sub    esp,0x18
c0013319:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001331d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013320:	e8 d3 2a 00 00       	call   c0015df8 <terminateTask(int)>
c0013325:	83 c8 ff             	or     eax,0xffffffff
c0013328:	83 c4 1c             	add    esp,0x1c
c001332b:	89 c2                	mov    edx,eax
c001332d:	c3                   	ret    

c001332e <SysGetCwd(regs*)>:
c001332e:	83 ec 10             	sub    esp,0x10
c0013331:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013335:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013338:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001333b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013340:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013343:	e8 64 4a ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c0013348:	83 c4 1c             	add    esp,0x1c
c001334b:	99                   	cdq    
c001334c:	c3                   	ret    

c001334d <SysGetPID(regs*)>:
c001334d:	83 ec 14             	sub    esp,0x14
c0013350:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013355:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013358:	ff 30                	push   DWORD PTR [eax]
c001335a:	68 8c 31 02 c0       	push   0xc002318c
c001335f:	e8 ea 3b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013364:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013369:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001336c:	8b 00                	mov    eax,DWORD PTR [eax]
c001336e:	83 c4 1c             	add    esp,0x1c
c0013371:	99                   	cdq    
c0013372:	c3                   	ret    

c0013373 <SysGetRAMData(regs*)>:
c0013373:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013378:	03 05 a8 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cda8
c001337e:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c0013384:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001338a:	99                   	cdq    
c001338b:	f7 f9                	idiv   ecx
c001338d:	c1 e0 18             	shl    eax,0x18
c0013390:	09 c8                	or     eax,ecx
c0013392:	99                   	cdq    
c0013393:	c3                   	ret    

c0013394 <SysGetVGAPtr(regs*)>:
c0013394:	55                   	push   ebp
c0013395:	57                   	push   edi
c0013396:	56                   	push   esi
c0013397:	53                   	push   ebx
c0013398:	83 ec 0c             	sub    esp,0xc
c001339b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001339f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00133a2:	83 f8 ff             	cmp    eax,0xffffffff
c00133a5:	74 1b                	je     c00133c2 <SysGetVGAPtr(regs*)+0x2e>
c00133a7:	83 ec 0c             	sub    esp,0xc
c00133aa:	50                   	push   eax
c00133ab:	e8 fc 24 00 00       	call   c00158ac <Thr::processFromPID(int)>
c00133b0:	83 c4 10             	add    esp,0x10
c00133b3:	31 d2                	xor    edx,edx
c00133b5:	89 c1                	mov    ecx,eax
c00133b7:	b8 01 00 00 00       	mov    eax,0x1
c00133bc:	85 c9                	test   ecx,ecx
c00133be:	75 0a                	jne    c00133ca <SysGetVGAPtr(regs*)+0x36>
c00133c0:	eb 61                	jmp    c0013423 <SysGetVGAPtr(regs*)+0x8f>
c00133c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133c7:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00133ca:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00133ce:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00133d4:	74 0c                	je     c00133e2 <SysGetVGAPtr(regs*)+0x4e>
c00133d6:	83 ec 0c             	sub    esp,0xc
c00133d9:	55                   	push   ebp
c00133da:	e8 ca dc ff ff       	call   c00110a9 <setActiveTerminal(VgaText*)>
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00133e5:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00133ea:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00133ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00133ef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00133f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133f5:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00133fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133fe:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013401:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013407:	50                   	push   eax
c0013408:	50                   	push   eax
c0013409:	68 9b 31 02 c0       	push   0xc002319b
c001340e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013411:	05 a8 0f 00 00       	add    eax,0xfa8
c0013416:	50                   	push   eax
c0013417:	e8 34 d2 fe ff       	call   c0000650 <strcpy>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	31 c0                	xor    eax,eax
c0013421:	31 d2                	xor    edx,edx
c0013423:	83 c4 0c             	add    esp,0xc
c0013426:	5b                   	pop    ebx
c0013427:	5e                   	pop    esi
c0013428:	5f                   	pop    edi
c0013429:	5d                   	pop    ebp
c001342a:	c3                   	ret    
c001342b:	90                   	nop

c001342c <SysKill(regs*)>:
c001342c:	53                   	push   ebx
c001342d:	83 ec 08             	sub    esp,0x8
c0013430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013434:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013438:	75 16                	jne    c0013450 <SysKill(regs*)+0x24>
c001343a:	83 ec 0c             	sub    esp,0xc
c001343d:	68 a5 31 02 c0       	push   0xc00231a5
c0013442:	e8 af b7 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	e9 89 00 00 00       	jmp    c00134d8 <SysKill(regs*)+0xac>
c001344f:	90                   	nop
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	68 cc d6 02 c0       	push   0xc002d6cc
c0013458:	e8 2b cf 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001345d:	8d 76 00             	lea    esi,[esi+0x0]
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	85 c0                	test   eax,eax
c0013465:	74 19                	je     c0013480 <SysKill(regs*)+0x54>
c0013467:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001346a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001346d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001346f:	74 33                	je     c00134a4 <SysKill(regs*)+0x78>
c0013471:	52                   	push   edx
c0013472:	52                   	push   edx
c0013473:	50                   	push   eax
c0013474:	68 cc d6 02 c0       	push   0xc002d6cc
c0013479:	e8 16 d4 00 00       	call   c0020894 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001347e:	eb e0                	jmp    c0013460 <SysKill(regs*)+0x34>
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	68 c0 d6 02 c0       	push   0xc002d6c0
c0013488:	e8 fb ce 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001348d:	8d 76 00             	lea    esi,[esi+0x0]
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	85 c0                	test   eax,eax
c0013495:	74 41                	je     c00134d8 <SysKill(regs*)+0xac>
c0013497:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001349a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001349d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001349f:	75 27                	jne    c00134c8 <SysKill(regs*)+0x9c>
c00134a1:	8d 76 00             	lea    esi,[esi+0x0]
c00134a4:	51                   	push   ecx
c00134a5:	51                   	push   ecx
c00134a6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134b1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00134b7:	e8 78 c8 ff ff       	call   c000fd34 <KeRaiseSignal(SigHandlerBlock*, int)>
c00134bc:	83 c4 10             	add    esp,0x10
c00134bf:	31 c0                	xor    eax,eax
c00134c1:	31 d2                	xor    edx,edx
c00134c3:	eb 1b                	jmp    c00134e0 <SysKill(regs*)+0xb4>
c00134c5:	8d 76 00             	lea    esi,[esi+0x0]
c00134c8:	52                   	push   edx
c00134c9:	52                   	push   edx
c00134ca:	50                   	push   eax
c00134cb:	68 c0 d6 02 c0       	push   0xc002d6c0
c00134d0:	e8 bf d3 00 00       	call   c0020894 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00134d5:	eb b9                	jmp    c0013490 <SysKill(regs*)+0x64>
c00134d7:	90                   	nop
c00134d8:	83 c8 ff             	or     eax,0xffffffff
c00134db:	89 c2                	mov    edx,eax
c00134dd:	8d 76 00             	lea    esi,[esi+0x0]
c00134e0:	83 c4 08             	add    esp,0x8
c00134e3:	5b                   	pop    ebx
c00134e4:	c3                   	ret    

c00134e5 <SysLoadDLL(regs*)>:
c00134e5:	56                   	push   esi
c00134e6:	31 d2                	xor    edx,edx
c00134e8:	53                   	push   ebx
c00134e9:	b8 01 00 00 00       	mov    eax,0x1
c00134ee:	51                   	push   ecx
c00134ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134f3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00134f7:	0f 84 8c 00 00 00    	je     c0013589 <SysLoadDLL(regs*)+0xa4>
c00134fd:	83 ec 0c             	sub    esp,0xc
c0013500:	68 14 01 00 00       	push   0x114
c0013505:	e8 a6 b3 ff ff       	call   c000e8b0 <malloc>
c001350a:	83 c4 0c             	add    esp,0xc
c001350d:	89 c3                	mov    ebx,eax
c001350f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013514:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013517:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001351a:	53                   	push   ebx
c001351b:	e8 0c 4c ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	31 d2                	xor    edx,edx
c0013525:	85 db                	test   ebx,ebx
c0013527:	b8 02 00 00 00       	mov    eax,0x2
c001352c:	74 5b                	je     c0013589 <SysLoadDLL(regs*)+0xa4>
c001352e:	83 ec 0c             	sub    esp,0xc
c0013531:	53                   	push   ebx
c0013532:	e8 d7 4e ff ff       	call   c000840e <File::exists()>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	84 c0                	test   al,al
c001353c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001353e:	75 11                	jne    c0013551 <SysLoadDLL(regs*)+0x6c>
c0013540:	83 ec 0c             	sub    esp,0xc
c0013543:	53                   	push   ebx
c0013544:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	b8 03 00 00 00       	mov    eax,0x3
c001354f:	eb 36                	jmp    c0013587 <SysLoadDLL(regs*)+0xa2>
c0013551:	83 ec 0c             	sub    esp,0xc
c0013554:	53                   	push   ebx
c0013555:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013558:	58                   	pop    eax
c0013559:	5a                   	pop    edx
c001355a:	6a 00                	push   0x0
c001355c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001355f:	e8 f6 15 00 00       	call   c0014b5a <Thr::loadDLL(char const*, bool)>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	31 d2                	xor    edx,edx
c0013569:	89 c1                	mov    ecx,eax
c001356b:	b8 04 00 00 00       	mov    eax,0x4
c0013570:	85 c9                	test   ecx,ecx
c0013572:	74 15                	je     c0013589 <SysLoadDLL(regs*)+0xa4>
c0013574:	53                   	push   ebx
c0013575:	53                   	push   ebx
c0013576:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c001357c:	51                   	push   ecx
c001357d:	e8 39 18 00 00       	call   c0014dbb <Thr::executeDLL(unsigned long, void*)>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	31 c0                	xor    eax,eax
c0013587:	31 d2                	xor    edx,edx
c0013589:	59                   	pop    ecx
c001358a:	5b                   	pop    ebx
c001358b:	5e                   	pop    esi
c001358c:	c3                   	ret    

c001358d <SysRead(regs*)>:
c001358d:	57                   	push   edi
c001358e:	56                   	push   esi
c001358f:	53                   	push   ebx
c0013590:	83 ec 10             	sub    esp,0x10
c0013593:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013597:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001359a:	83 f8 02             	cmp    eax,0x2
c001359d:	77 10                	ja     c00135af <SysRead(regs*)+0x22>
c001359f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135a7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00135ad:	eb 0e                	jmp    c00135bd <SysRead(regs*)+0x30>
c00135af:	83 ec 0c             	sub    esp,0xc
c00135b2:	50                   	push   eax
c00135b3:	e8 a1 e8 ff ff       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c00135b8:	83 c4 10             	add    esp,0x10
c00135bb:	89 c1                	mov    ecx,eax
c00135bd:	83 c8 ff             	or     eax,0xffffffff
c00135c0:	85 c9                	test   ecx,ecx
c00135c2:	89 c2                	mov    edx,eax
c00135c4:	74 28                	je     c00135ee <SysRead(regs*)+0x61>
c00135c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135ce:	83 ec 0c             	sub    esp,0xc
c00135d1:	31 ff                	xor    edi,edi
c00135d3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135d9:	52                   	push   edx
c00135da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135dd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135e0:	57                   	push   edi
c00135e1:	56                   	push   esi
c00135e2:	51                   	push   ecx
c00135e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135ea:	83 c4 20             	add    esp,0x20
c00135ed:	99                   	cdq    
c00135ee:	83 c4 10             	add    esp,0x10
c00135f1:	5b                   	pop    ebx
c00135f2:	5e                   	pop    esi
c00135f3:	5f                   	pop    edi
c00135f4:	c3                   	ret    

c00135f5 <SysRegisterSignal(regs*)>:
c00135f5:	83 ec 18             	sub    esp,0x18
c00135f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135fc:	6a 00                	push   0x0
c00135fe:	6a 00                	push   0x0
c0013600:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013603:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013606:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001360b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001360e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013614:	e8 e5 c6 ff ff       	call   c000fcfe <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013619:	83 c4 2c             	add    esp,0x2c
c001361c:	99                   	cdq    
c001361d:	c3                   	ret    

c001361e <SysRegistryGetTypeFromPath(regs*)>:
c001361e:	53                   	push   ebx
c001361f:	81 ec 40 01 00 00    	sub    esp,0x140
c0013625:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001362c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001362f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013632:	e8 34 9c ff ff       	call   c000d26b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013637:	83 c4 10             	add    esp,0x10
c001363a:	85 c0                	test   eax,eax
c001363c:	89 c1                	mov    ecx,eax
c001363e:	74 15                	je     c0013655 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0013640:	50                   	push   eax
c0013641:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013645:	50                   	push   eax
c0013646:	51                   	push   ecx
c0013647:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001364a:	e8 01 98 ff ff       	call   c000ce50 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001364f:	83 c4 10             	add    esp,0x10
c0013652:	99                   	cdq    
c0013653:	eb 05                	jmp    c001365a <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0013655:	83 c8 ff             	or     eax,0xffffffff
c0013658:	89 c2                	mov    edx,eax
c001365a:	81 c4 38 01 00 00    	add    esp,0x138
c0013660:	5b                   	pop    ebx
c0013661:	c3                   	ret    

c0013662 <SysRegistryReadExtent(regs*)>:
c0013662:	83 ec 1c             	sub    esp,0x1c
c0013665:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013669:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001366c:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001366f:	85 c0                	test   eax,eax
c0013671:	79 1f                	jns    c0013692 <SysRegistryReadExtent(regs*)+0x30>
c0013673:	52                   	push   edx
c0013674:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013679:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001367d:	52                   	push   edx
c001367e:	50                   	push   eax
c001367f:	51                   	push   ecx
c0013680:	e8 bd 96 ff ff       	call   c000cd42 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013685:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001368d:	83 c4 10             	add    esp,0x10
c0013690:	eb 14                	jmp    c00136a6 <SysRegistryReadExtent(regs*)+0x44>
c0013692:	83 ec 04             	sub    esp,0x4
c0013695:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013698:	50                   	push   eax
c0013699:	51                   	push   ecx
c001369a:	e8 41 91 ff ff       	call   c000c7e0 <CmGetString(Reghive_Tag*, int, char*)>
c001369f:	83 c4 10             	add    esp,0x10
c00136a2:	31 c0                	xor    eax,eax
c00136a4:	31 d2                	xor    edx,edx
c00136a6:	83 c4 1c             	add    esp,0x1c
c00136a9:	c3                   	ret    

c00136aa <SysRegistryPathToExtentLookup(regs*)>:
c00136aa:	83 ec 14             	sub    esp,0x14
c00136ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136b1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136b7:	e8 af 9b ff ff       	call   c000d26b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00136bc:	83 c4 1c             	add    esp,0x1c
c00136bf:	99                   	cdq    
c00136c0:	c3                   	ret    

c00136c1 <SysRegistryEnterDirectory(regs*)>:
c00136c1:	83 ec 14             	sub    esp,0x14
c00136c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136c8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00136cb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136ce:	e8 84 91 ff ff       	call   c000c857 <CmEnterDirectory(Reghive_Tag*, int)>
c00136d3:	83 c4 1c             	add    esp,0x1c
c00136d6:	99                   	cdq    
c00136d7:	c3                   	ret    

c00136d8 <SysRegistryGetNext(regs*)>:
c00136d8:	83 ec 14             	sub    esp,0x14
c00136db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136df:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00136e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136e5:	e8 ac 91 ff ff       	call   c000c896 <CmGetNext(Reghive_Tag*, int)>
c00136ea:	83 c4 1c             	add    esp,0x1c
c00136ed:	99                   	cdq    
c00136ee:	c3                   	ret    

c00136ef <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00136ef:	57                   	push   edi
c00136f0:	56                   	push   esi
c00136f1:	53                   	push   ebx
c00136f2:	81 ec 34 01 00 00    	sub    esp,0x134
c00136f8:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00136ff:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013703:	57                   	push   edi
c0013704:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013707:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001370a:	e8 41 97 ff ff       	call   c000ce50 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001370f:	89 c3                	mov    ebx,eax
c0013711:	58                   	pop    eax
c0013712:	5a                   	pop    edx
c0013713:	57                   	push   edi
c0013714:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013717:	e8 34 cf fe ff       	call   c0000650 <strcpy>
c001371c:	81 c4 40 01 00 00    	add    esp,0x140
c0013722:	89 d8                	mov    eax,ebx
c0013724:	5b                   	pop    ebx
c0013725:	99                   	cdq    
c0013726:	5e                   	pop    esi
c0013727:	5f                   	pop    edi
c0013728:	c3                   	ret    

c0013729 <SysRegistryOpen(regs*)>:
c0013729:	83 ec 18             	sub    esp,0x18
c001372c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013730:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013733:	e8 38 8f ff ff       	call   c000c670 <CmOpen(char const*)>
c0013738:	83 c4 1c             	add    esp,0x1c
c001373b:	99                   	cdq    
c001373c:	c3                   	ret    

c001373d <SysRegistryClose(regs*)>:
c001373d:	83 ec 18             	sub    esp,0x18
c0013740:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013744:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013747:	e8 42 90 ff ff       	call   c000c78e <CmClose(Reghive_Tag*)>
c001374c:	31 c0                	xor    eax,eax
c001374e:	31 d2                	xor    edx,edx
c0013750:	83 c4 1c             	add    esp,0x1c
c0013753:	c3                   	ret    

c0013754 <SysRegistryEasyReadString(regs*)>:
c0013754:	57                   	push   edi
c0013755:	56                   	push   esi
c0013756:	53                   	push   ebx
c0013757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001375b:	83 ec 0c             	sub    esp,0xc
c001375e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013761:	e8 0a 8f ff ff       	call   c000c670 <CmOpen(char const*)>
c0013766:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013769:	5a                   	pop    edx
c001376a:	59                   	pop    ecx
c001376b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001376e:	89 c3                	mov    ebx,eax
c0013770:	50                   	push   eax
c0013771:	e8 f5 9a ff ff       	call   c000d26b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013776:	83 c4 10             	add    esp,0x10
c0013779:	89 c1                	mov    ecx,eax
c001377b:	b8 01 00 00 00       	mov    eax,0x1
c0013780:	85 c9                	test   ecx,ecx
c0013782:	7e 16                	jle    c001379a <SysRegistryEasyReadString(regs*)+0x46>
c0013784:	50                   	push   eax
c0013785:	57                   	push   edi
c0013786:	51                   	push   ecx
c0013787:	53                   	push   ebx
c0013788:	e8 53 90 ff ff       	call   c000c7e0 <CmGetString(Reghive_Tag*, int, char*)>
c001378d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013790:	e8 f9 8f ff ff       	call   c000c78e <CmClose(Reghive_Tag*)>
c0013795:	83 c4 10             	add    esp,0x10
c0013798:	31 c0                	xor    eax,eax
c001379a:	5b                   	pop    ebx
c001379b:	31 d2                	xor    edx,edx
c001379d:	5e                   	pop    esi
c001379e:	5f                   	pop    edi
c001379f:	c3                   	ret    

c00137a0 <SysRegistryEasyReadInteger(regs*)>:
c00137a0:	56                   	push   esi
c00137a1:	53                   	push   ebx
c00137a2:	83 ec 10             	sub    esp,0x10
c00137a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00137a9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00137ac:	e8 bf 8e ff ff       	call   c000c670 <CmOpen(char const*)>
c00137b1:	5a                   	pop    edx
c00137b2:	59                   	pop    ecx
c00137b3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00137b6:	89 c3                	mov    ebx,eax
c00137b8:	50                   	push   eax
c00137b9:	e8 ad 9a ff ff       	call   c000d26b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	89 c1                	mov    ecx,eax
c00137c3:	b8 01 00 00 00       	mov    eax,0x1
c00137c8:	85 c9                	test   ecx,ecx
c00137ca:	7e 18                	jle    c00137e4 <SysRegistryEasyReadInteger(regs*)+0x44>
c00137cc:	50                   	push   eax
c00137cd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00137d0:	51                   	push   ecx
c00137d1:	53                   	push   ebx
c00137d2:	e8 6b 95 ff ff       	call   c000cd42 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00137d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137da:	e8 af 8f ff ff       	call   c000c78e <CmClose(Reghive_Tag*)>
c00137df:	83 c4 10             	add    esp,0x10
c00137e2:	31 c0                	xor    eax,eax
c00137e4:	59                   	pop    ecx
c00137e5:	31 d2                	xor    edx,edx
c00137e7:	5b                   	pop    ebx
c00137e8:	5e                   	pop    esi
c00137e9:	c3                   	ret    

c00137ea <SysSbrk(regs*)>:
c00137ea:	56                   	push   esi
c00137eb:	53                   	push   ebx
c00137ec:	50                   	push   eax
c00137ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137f9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00137fc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013802:	85 db                	test   ebx,ebx
c0013804:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013807:	74 02                	je     c001380b <SysSbrk(regs*)+0x21>
c0013809:	79 06                	jns    c0013811 <SysSbrk(regs*)+0x27>
c001380b:	89 f0                	mov    eax,esi
c001380d:	31 d2                	xor    edx,edx
c001380f:	eb 2a                	jmp    c001383b <SysSbrk(regs*)+0x51>
c0013811:	83 c8 ff             	or     eax,0xffffffff
c0013814:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001381a:	89 c2                	mov    edx,eax
c001381c:	77 1d                	ja     c001383b <SysSbrk(regs*)+0x51>
c001381e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013824:	50                   	push   eax
c0013825:	68 07 0c 00 00       	push   0xc07
c001382a:	c1 ea 0c             	shr    edx,0xc
c001382d:	52                   	push   edx
c001382e:	51                   	push   ecx
c001382f:	e8 a0 ef ff ff       	call   c00127d4 <VAS::allocatePages(int, int)>
c0013834:	89 f0                	mov    eax,esi
c0013836:	31 d2                	xor    edx,edx
c0013838:	83 c4 10             	add    esp,0x10
c001383b:	59                   	pop    ecx
c001383c:	5b                   	pop    ebx
c001383d:	5e                   	pop    esi
c001383e:	c3                   	ret    

c001383f <SysSetCwd(regs*)>:
c001383f:	83 ec 14             	sub    esp,0x14
c0013842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013846:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013849:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001384e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013851:	e8 57 4c ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c0013856:	83 c4 1c             	add    esp,0x1c
c0013859:	99                   	cdq    
c001385a:	c3                   	ret    

c001385b <SysSetTime(regs*)>:
c001385b:	55                   	push   ebp
c001385c:	31 c9                	xor    ecx,ecx
c001385e:	57                   	push   edi
c001385f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013864:	56                   	push   esi
c0013865:	53                   	push   ebx
c0013866:	31 db                	xor    ebx,ebx
c0013868:	83 ec 10             	sub    esp,0x10
c001386b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001386f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013872:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013875:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013878:	89 c2                	mov    edx,eax
c001387a:	c1 e8 05             	shr    eax,0x5
c001387d:	83 e2 1f             	and    edx,0x1f
c0013880:	42                   	inc    edx
c0013881:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013887:	c1 e7 10             	shl    edi,0x10
c001388a:	88 d1                	mov    cl,dl
c001388c:	31 d2                	xor    edx,edx
c001388e:	f7 f5                	div    ebp
c0013890:	89 dd                	mov    ebp,ebx
c0013892:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013898:	88 d5                	mov    ch,dl
c001389a:	31 d2                	xor    edx,edx
c001389c:	0f b7 c1             	movzx  eax,cx
c001389f:	09 f8                	or     eax,edi
c00138a1:	bf 3c 00 00 00       	mov    edi,0x3c
c00138a6:	89 c1                	mov    ecx,eax
c00138a8:	89 f0                	mov    eax,esi
c00138aa:	f7 f7                	div    edi
c00138ac:	c1 e2 10             	shl    edx,0x10
c00138af:	09 d5                	or     ebp,edx
c00138b1:	31 d2                	xor    edx,edx
c00138b3:	f7 f7                	div    edi
c00138b5:	89 eb                	mov    ebx,ebp
c00138b7:	bf 10 0e 00 00       	mov    edi,0xe10
c00138bc:	89 f0                	mov    eax,esi
c00138be:	88 d7                	mov    bh,dl
c00138c0:	31 d2                	xor    edx,edx
c00138c2:	f7 f7                	div    edi
c00138c4:	bf 18 00 00 00       	mov    edi,0x18
c00138c9:	31 d2                	xor    edx,edx
c00138cb:	f7 f7                	div    edi
c00138cd:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00138d2:	88 d3                	mov    bl,dl
c00138d4:	53                   	push   ebx
c00138d5:	51                   	push   ecx
c00138d6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00138dc:	e8 99 54 ff ff       	call   c0008d7a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00138e1:	83 c4 1c             	add    esp,0x1c
c00138e4:	31 d2                	xor    edx,edx
c00138e6:	5b                   	pop    ebx
c00138e7:	5e                   	pop    esi
c00138e8:	83 f0 01             	xor    eax,0x1
c00138eb:	5f                   	pop    edi
c00138ec:	0f b6 c0             	movzx  eax,al
c00138ef:	5d                   	pop    ebp
c00138f0:	c3                   	ret    

c00138f1 <SysSymlink(regs*)>:
c00138f1:	56                   	push   esi
c00138f2:	83 c8 ff             	or     eax,0xffffffff
c00138f5:	53                   	push   ebx
c00138f6:	89 c2                	mov    edx,eax
c00138f8:	81 ec 34 02 00 00    	sub    esp,0x234
c00138fe:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013905:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013909:	74 50                	je     c001395b <SysSymlink(regs*)+0x6a>
c001390b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001390e:	85 c9                	test   ecx,ecx
c0013910:	74 49                	je     c001395b <SysSymlink(regs*)+0x6a>
c0013912:	6a 01                	push   0x1
c0013914:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013919:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001391c:	05 0c 01 00 00       	add    eax,0x10c
c0013921:	50                   	push   eax
c0013922:	51                   	push   ecx
c0013923:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013927:	56                   	push   esi
c0013928:	e8 d3 44 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001392d:	6a 01                	push   0x1
c001392f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013934:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013937:	05 0c 01 00 00       	add    eax,0x10c
c001393c:	50                   	push   eax
c001393d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013940:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0013947:	53                   	push   ebx
c0013948:	e8 b3 44 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001394d:	83 c4 18             	add    esp,0x18
c0013950:	56                   	push   esi
c0013951:	53                   	push   ebx
c0013952:	e8 d7 40 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	99                   	cdq    
c001395b:	81 c4 34 02 00 00    	add    esp,0x234
c0013961:	5b                   	pop    ebx
c0013962:	5e                   	pop    esi
c0013963:	c3                   	ret    

c0013964 <SysTimezone(regs*)>:
c0013964:	83 ec 0c             	sub    esp,0xc
c0013967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001396b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001396f:	75 17                	jne    c0013988 <SysTimezone(regs*)+0x24>
c0013971:	83 ec 0c             	sub    esp,0xc
c0013974:	68 c6 31 02 c0       	push   0xc00231c6
c0013979:	e8 d0 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001397e:	83 c8 ff             	or     eax,0xffffffff
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	89 c2                	mov    edx,eax
c0013986:	eb 17                	jmp    c001399f <SysTimezone(regs*)+0x3b>
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	68 db 31 02 c0       	push   0xc00231db
c0013990:	e8 b9 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013995:	83 c4 10             	add    esp,0x10
c0013998:	b8 01 00 00 00       	mov    eax,0x1
c001399d:	31 d2                	xor    edx,edx
c001399f:	83 c4 0c             	add    esp,0xc
c00139a2:	c3                   	ret    

c00139a3 <SysTruncate(regs*)>:
c00139a3:	55                   	push   ebp
c00139a4:	57                   	push   edi
c00139a5:	31 ff                	xor    edi,edi
c00139a7:	56                   	push   esi
c00139a8:	53                   	push   ebx
c00139a9:	83 ec 0c             	sub    esp,0xc
c00139ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139b0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00139b3:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00139b7:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00139ba:	89 ce                	mov    esi,ecx
c00139bc:	0f 84 9a 00 00 00    	je     c0013a5c <SysTruncate(regs*)+0xb9>
c00139c2:	83 ec 0c             	sub    esp,0xc
c00139c5:	68 14 01 00 00       	push   0x114
c00139ca:	e8 e1 ae ff ff       	call   c000e8b0 <malloc>
c00139cf:	83 c4 0c             	add    esp,0xc
c00139d2:	89 c3                	mov    ebx,eax
c00139d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00139dc:	55                   	push   ebp
c00139dd:	53                   	push   ebx
c00139de:	e8 49 47 ff ff       	call   c000812c <File::File(char const*, Process*)>
c00139e3:	83 c4 10             	add    esp,0x10
c00139e6:	31 d2                	xor    edx,edx
c00139e8:	85 db                	test   ebx,ebx
c00139ea:	b8 03 00 00 00       	mov    eax,0x3
c00139ef:	0f 84 a2 00 00 00    	je     c0013a97 <SysTruncate(regs*)+0xf4>
c00139f5:	51                   	push   ecx
c00139f6:	51                   	push   ecx
c00139f7:	6a 02                	push   0x2
c00139f9:	53                   	push   ebx
c00139fa:	e8 4b 47 ff ff       	call   c000814a <File::open(FileOpenMode)>
c00139ff:	83 c4 10             	add    esp,0x10
c0013a02:	85 c0                	test   eax,eax
c0013a04:	74 13                	je     c0013a19 <SysTruncate(regs*)+0x76>
c0013a06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a08:	83 ec 0c             	sub    esp,0xc
c0013a0b:	53                   	push   ebx
c0013a0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	b8 04 00 00 00       	mov    eax,0x4
c0013a17:	eb 7c                	jmp    c0013a95 <SysTruncate(regs*)+0xf2>
c0013a19:	52                   	push   edx
c0013a1a:	57                   	push   edi
c0013a1b:	56                   	push   esi
c0013a1c:	53                   	push   ebx
c0013a1d:	e8 3c 48 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0013a22:	83 c4 10             	add    esp,0x10
c0013a25:	85 c0                	test   eax,eax
c0013a27:	74 1b                	je     c0013a44 <SysTruncate(regs*)+0xa1>
c0013a29:	83 ec 0c             	sub    esp,0xc
c0013a2c:	53                   	push   ebx
c0013a2d:	e8 76 47 ff ff       	call   c00081a8 <File::close()>
c0013a32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a3a:	83 c4 10             	add    esp,0x10
c0013a3d:	b8 05 00 00 00       	mov    eax,0x5
c0013a42:	eb 51                	jmp    c0013a95 <SysTruncate(regs*)+0xf2>
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	53                   	push   ebx
c0013a48:	e8 5b 47 ff ff       	call   c00081a8 <File::close()>
c0013a4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	31 c0                	xor    eax,eax
c0013a5a:	eb 39                	jmp    c0013a95 <SysTruncate(regs*)+0xf2>
c0013a5c:	31 d2                	xor    edx,edx
c0013a5e:	83 fd 02             	cmp    ebp,0x2
c0013a61:	b8 01 00 00 00       	mov    eax,0x1
c0013a66:	7e 2f                	jle    c0013a97 <SysTruncate(regs*)+0xf4>
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	51                   	push   ecx
c0013a6c:	e8 e8 e3 ff ff       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c0013a71:	83 c4 10             	add    esp,0x10
c0013a74:	31 d2                	xor    edx,edx
c0013a76:	89 c1                	mov    ecx,eax
c0013a78:	b8 02 00 00 00       	mov    eax,0x2
c0013a7d:	85 c9                	test   ecx,ecx
c0013a7f:	74 16                	je     c0013a97 <SysTruncate(regs*)+0xf4>
c0013a81:	50                   	push   eax
c0013a82:	57                   	push   edi
c0013a83:	56                   	push   esi
c0013a84:	51                   	push   ecx
c0013a85:	e8 d4 47 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	85 c0                	test   eax,eax
c0013a8f:	0f 95 c0             	setne  al
c0013a92:	0f b6 c0             	movzx  eax,al
c0013a95:	31 d2                	xor    edx,edx
c0013a97:	83 c4 0c             	add    esp,0xc
c0013a9a:	5b                   	pop    ebx
c0013a9b:	5e                   	pop    esi
c0013a9c:	5f                   	pop    edi
c0013a9d:	5d                   	pop    ebp
c0013a9e:	c3                   	ret    

c0013a9f <SysWrite(regs*)>:
c0013a9f:	57                   	push   edi
c0013aa0:	56                   	push   esi
c0013aa1:	53                   	push   ebx
c0013aa2:	83 ec 10             	sub    esp,0x10
c0013aa5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013aa9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013aac:	83 f8 02             	cmp    eax,0x2
c0013aaf:	77 10                	ja     c0013ac1 <SysWrite(regs*)+0x22>
c0013ab1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ab6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ab9:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013abf:	eb 0e                	jmp    c0013acf <SysWrite(regs*)+0x30>
c0013ac1:	83 ec 0c             	sub    esp,0xc
c0013ac4:	50                   	push   eax
c0013ac5:	e8 8f e3 ff ff       	call   c0011e59 <KeGetFileFromDescriptor(int)>
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	89 c1                	mov    ecx,eax
c0013acf:	83 c8 ff             	or     eax,0xffffffff
c0013ad2:	85 c9                	test   ecx,ecx
c0013ad4:	89 c2                	mov    edx,eax
c0013ad6:	74 28                	je     c0013b00 <SysWrite(regs*)+0x61>
c0013ad8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013ae0:	83 ec 0c             	sub    esp,0xc
c0013ae3:	31 ff                	xor    edi,edi
c0013ae5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ae9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aeb:	52                   	push   edx
c0013aec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013aef:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013af2:	57                   	push   edi
c0013af3:	56                   	push   esi
c0013af4:	51                   	push   ecx
c0013af5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013af8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013afc:	83 c4 20             	add    esp,0x20
c0013aff:	99                   	cdq    
c0013b00:	83 c4 10             	add    esp,0x10
c0013b03:	5b                   	pop    ebx
c0013b04:	5e                   	pop    esi
c0013b05:	5f                   	pop    edi
c0013b06:	c3                   	ret    

c0013b07 <SysWsbe(regs*)>:
c0013b07:	55                   	push   ebp
c0013b08:	57                   	push   edi
c0013b09:	56                   	push   esi
c0013b0a:	53                   	push   ebx
c0013b0b:	83 ec 3c             	sub    esp,0x3c
c0013b0e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013b12:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013b19:	75 2d                	jne    c0013b48 <SysWsbe(regs*)+0x41>
c0013b1b:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013b22:	75 24                	jne    c0013b48 <SysWsbe(regs*)+0x41>
c0013b24:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013b2b:	75 1b                	jne    c0013b48 <SysWsbe(regs*)+0x41>
c0013b2d:	6a 01                	push   0x1
c0013b2f:	6a 00                	push   0x0
c0013b31:	68 8d 95 00 c0       	push   0xc000958d
c0013b36:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0013b3c:	e8 bb 18 00 00       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c0013b41:	83 c4 10             	add    esp,0x10
c0013b44:	31 c0                	xor    eax,eax
c0013b46:	eb 52                	jmp    c0013b9a <SysWsbe(regs*)+0x93>
c0013b48:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013b4c:	be 1a 32 02 c0       	mov    esi,0xc002321a
c0013b51:	b9 0b 00 00 00       	mov    ecx,0xb
c0013b56:	fc                   	cld    
c0013b57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013b59:	83 ec 0c             	sub    esp,0xc
c0013b5c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b68:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b70:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013b73:	57                   	push   edi
c0013b74:	e8 07 ca fe ff       	call   c0000580 <strlen>
c0013b79:	5a                   	pop    edx
c0013b7a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013b7e:	52                   	push   edx
c0013b7f:	31 d2                	xor    edx,edx
c0013b81:	57                   	push   edi
c0013b82:	52                   	push   edx
c0013b83:	50                   	push   eax
c0013b84:	56                   	push   esi
c0013b85:	ff d5                	call   ebp
c0013b87:	83 c4 14             	add    esp,0x14
c0013b8a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013b8d:	e8 66 22 00 00       	call   c0015df8 <terminateTask(int)>
c0013b92:	83 c4 10             	add    esp,0x10
c0013b95:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013b9a:	83 c4 3c             	add    esp,0x3c
c0013b9d:	31 d2                	xor    edx,edx
c0013b9f:	5b                   	pop    ebx
c0013ba0:	5e                   	pop    esi
c0013ba1:	5f                   	pop    edi
c0013ba2:	5d                   	pop    ebp
c0013ba3:	c3                   	ret    

c0013ba4 <SysYield(regs*)>:
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	fa                   	cli    
c0013ba8:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013bae:	e8 95 1a 00 00       	call   c0015648 <schedule()>
c0013bb3:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013bba:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013bc1:	75 01                	jne    c0013bc4 <SysYield(regs*)+0x20>
c0013bc3:	fb                   	sti    
c0013bc4:	31 c0                	xor    eax,eax
c0013bc6:	31 d2                	xor    edx,edx
c0013bc8:	83 c4 0c             	add    esp,0xc
c0013bcb:	c3                   	ret    

c0013bcc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013bcc:	55                   	push   ebp
c0013bcd:	57                   	push   edi
c0013bce:	56                   	push   esi
c0013bcf:	53                   	push   ebx
c0013bd0:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013bd6:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013be1:	74 3b                	je     c0013c1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013be3:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013beb:	74 31                	je     c0013c1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013bed:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013bf5:	75 27                	jne    c0013c1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013bf7:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013bfe:	05 00 10 00 00       	add    eax,0x1000
c0013c03:	89 c2                	mov    edx,eax
c0013c05:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c0a:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013c11:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013c17:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013c1e:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013c25:	83 ec 0c             	sub    esp,0xc
c0013c28:	6a 01                	push   0x1
c0013c2a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013c30:	e8 be e3 ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013c3e:	89 c3                	mov    ebx,eax
c0013c40:	0f 86 27 01 00 00    	jbe    c0013d6d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0013c46:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013c4e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013c55:	c1 ee 0c             	shr    esi,0xc
c0013c58:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013c5c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013c63:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013c6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c6e:	29 ef                	sub    edi,ebp
c0013c70:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013c74:	0f 83 fa 00 00 00    	jae    c0013d74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013c7a:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013c80:	b8 00 10 00 00       	mov    eax,0x1000
c0013c85:	0f 47 f8             	cmova  edi,eax
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013c92:	31 d2                	xor    edx,edx
c0013c94:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c96:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c9a:	50                   	push   eax
c0013c9b:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013c9f:	56                   	push   esi
c0013ca0:	52                   	push   edx
c0013ca1:	57                   	push   edi
c0013ca2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013ca9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cac:	83 c4 20             	add    esp,0x20
c0013caf:	85 c0                	test   eax,eax
c0013cb1:	75 06                	jne    c0013cb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013cb3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013cb7:	74 13                	je     c0013ccc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013cb9:	83 ec 0c             	sub    esp,0xc
c0013cbc:	53                   	push   ebx
c0013cbd:	e8 2f e6 ff ff       	call   c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	31 c0                	xor    eax,eax
c0013cc7:	e9 80 01 00 00       	jmp    c0013e4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0013ccc:	fa                   	cli    
c0013ccd:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013cd3:	e8 18 b1 ff ff       	call   c000edf0 <Phys::allocatePage()>
c0013cd8:	6a 07                	push   0x7
c0013cda:	53                   	push   ebx
c0013cdb:	50                   	push   eax
c0013cdc:	89 c7                	mov    edi,eax
c0013cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ce6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013cec:	e8 db e9 ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013cf1:	83 c4 0c             	add    esp,0xc
c0013cf4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013cfb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d01:	6a 00                	push   0x0
c0013d03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d0b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d11:	e8 22 e8 ff ff       	call   c0012538 <VAS::mapOtherVASIn(bool, VAS*)>
c0013d16:	58                   	pop    eax
c0013d17:	5a                   	pop    edx
c0013d18:	68 07 0c 00 00       	push   0xc07
c0013d1d:	55                   	push   ebp
c0013d1e:	57                   	push   edi
c0013d1f:	89 df                	mov    edi,ebx
c0013d21:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013d28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d2e:	6a 00                	push   0x0
c0013d30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d35:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d38:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d3e:	e8 dd eb ff ff       	call   c0012920 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013d43:	b9 00 10 00 00       	mov    ecx,0x1000
c0013d48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d4a:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013d51:	83 c4 20             	add    esp,0x20
c0013d54:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013d5b:	75 01                	jne    c0013d5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0013d5d:	fb                   	sti    
c0013d5e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013d62:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013d68:	e9 ef fe ff ff       	jmp    c0013c5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013d6d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013d74:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013d7b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013d81:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013d87:	0f 86 b1 00 00 00    	jbe    c0013e3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013d8d:	fa                   	cli    
c0013d8e:	51                   	push   ecx
c0013d8f:	31 ff                	xor    edi,edi
c0013d91:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013d98:	c1 ee 0c             	shr    esi,0xc
c0013d9b:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013da1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013da7:	6a 00                	push   0x0
c0013da9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013db1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013db7:	e8 7c e7 ff ff       	call   c0012538 <VAS::mapOtherVASIn(bool, VAS*)>
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	e8 2c b0 ff ff       	call   c000edf0 <Phys::allocatePage()>
c0013dc4:	47                   	inc    edi
c0013dc5:	6a 07                	push   0x7
c0013dc7:	53                   	push   ebx
c0013dc8:	50                   	push   eax
c0013dc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dcd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013dd3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013dd6:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013ddc:	e8 eb e8 ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013de1:	58                   	pop    eax
c0013de2:	5a                   	pop    edx
c0013de3:	68 07 0c 00 00       	push   0xc07
c0013de8:	55                   	push   ebp
c0013de9:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013df3:	50                   	push   eax
c0013df4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013dfb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e01:	6a 00                	push   0x0
c0013e03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e0b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e11:	e8 0a eb ff ff       	call   c0012920 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013e16:	83 c4 1c             	add    esp,0x1c
c0013e19:	68 00 10 00 00       	push   0x1000
c0013e1e:	6a 00                	push   0x0
c0013e20:	53                   	push   ebx
c0013e21:	e8 ca c6 fe ff       	call   c00004f0 <memset>
c0013e26:	83 c4 10             	add    esp,0x10
c0013e29:	39 fe                	cmp    esi,edi
c0013e2b:	77 92                	ja     c0013dbf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0013e2d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013e34:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013e3b:	75 01                	jne    c0013e3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013e3d:	fb                   	sti    
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	53                   	push   ebx
c0013e42:	e8 aa e4 ff ff       	call   c00122f1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	b0 01                	mov    al,0x1
c0013e4c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013e52:	5b                   	pop    ebx
c0013e53:	5e                   	pop    esi
c0013e54:	5f                   	pop    edi
c0013e55:	5d                   	pop    ebp
c0013e56:	c3                   	ret    

c0013e57 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013e57:	55                   	push   ebp
c0013e58:	57                   	push   edi
c0013e59:	56                   	push   esi
c0013e5a:	53                   	push   ebx
c0013e5b:	83 ec 48             	sub    esp,0x48
c0013e5e:	68 14 01 00 00       	push   0x114
c0013e63:	e8 48 aa ff ff       	call   c000e8b0 <malloc>
c0013e68:	83 c4 0c             	add    esp,0xc
c0013e6b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013e6f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013e73:	89 c7                	mov    edi,eax
c0013e75:	50                   	push   eax
c0013e76:	e8 b1 42 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0013e7b:	58                   	pop    eax
c0013e7c:	5a                   	pop    edx
c0013e7d:	6a 01                	push   0x1
c0013e7f:	57                   	push   edi
c0013e80:	e8 c5 42 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	85 c0                	test   eax,eax
c0013e8a:	0f 85 4c 01 00 00    	jne    c0013fdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013e90:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013e98:	83 ec 0c             	sub    esp,0xc
c0013e9b:	6a 34                	push   0x34
c0013e9d:	e8 0e aa ff ff       	call   c000e8b0 <malloc>
c0013ea2:	89 c3                	mov    ebx,eax
c0013ea4:	58                   	pop    eax
c0013ea5:	8b 07                	mov    eax,DWORD PTR [edi]
c0013ea7:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013eab:	56                   	push   esi
c0013eac:	53                   	push   ebx
c0013ead:	6a 00                	push   0x0
c0013eaf:	6a 34                	push   0x34
c0013eb1:	57                   	push   edi
c0013eb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013eb5:	83 c4 20             	add    esp,0x20
c0013eb8:	85 c0                	test   eax,eax
c0013eba:	0f 85 1c 01 00 00    	jne    c0013fdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013ec0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013ec6:	0f 85 10 01 00 00    	jne    c0013fdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013ecc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ecf:	85 c0                	test   eax,eax
c0013ed1:	0f 84 05 01 00 00    	je     c0013fdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013ed7:	31 d2                	xor    edx,edx
c0013ed9:	55                   	push   ebp
c0013eda:	52                   	push   edx
c0013edb:	50                   	push   eax
c0013edc:	57                   	push   edi
c0013edd:	e8 26 43 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	85 c0                	test   eax,eax
c0013ee7:	0f 85 ef 00 00 00    	jne    c0013fdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013eed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013ef7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013efb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013eff:	0f af c2             	imul   eax,edx
c0013f02:	50                   	push   eax
c0013f03:	e8 a8 a9 ff ff       	call   c000e8b0 <malloc>
c0013f08:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013f0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013f11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f15:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013f19:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013f1d:	0f af c2             	imul   eax,edx
c0013f20:	99                   	cdq    
c0013f21:	52                   	push   edx
c0013f22:	50                   	push   eax
c0013f23:	57                   	push   edi
c0013f24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f27:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013f2a:	83 c4 20             	add    esp,0x20
c0013f2d:	85 c0                	test   eax,eax
c0013f2f:	0f 84 a7 00 00 00    	je     c0013fdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013f35:	31 d2                	xor    edx,edx
c0013f37:	51                   	push   ecx
c0013f38:	52                   	push   edx
c0013f39:	50                   	push   eax
c0013f3a:	57                   	push   edi
c0013f3b:	e8 c8 42 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0013f40:	83 c4 10             	add    esp,0x10
c0013f43:	85 c0                	test   eax,eax
c0013f45:	0f 85 91 00 00 00    	jne    c0013fdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013f4b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013f4f:	83 ec 0c             	sub    esp,0xc
c0013f52:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013f56:	0f af c2             	imul   eax,edx
c0013f59:	50                   	push   eax
c0013f5a:	e8 51 a9 ff ff       	call   c000e8b0 <malloc>
c0013f5f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013f61:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013f70:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013f74:	0f af c2             	imul   eax,edx
c0013f77:	99                   	cdq    
c0013f78:	52                   	push   edx
c0013f79:	50                   	push   eax
c0013f7a:	57                   	push   edi
c0013f7b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f7e:	83 c4 20             	add    esp,0x20
c0013f81:	31 c9                	xor    ecx,ecx
c0013f83:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f8b:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013f8f:	0f b7 e9             	movzx  ebp,cx
c0013f92:	0f 83 86 00 00 00    	jae    c001401e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013f98:	c1 e5 05             	shl    ebp,0x5
c0013f9b:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013f9f:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013fa3:	75 73                	jne    c0014018 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013fa5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013fac:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013faf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fb3:	52                   	push   edx
c0013fb4:	31 d2                	xor    edx,edx
c0013fb6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013fb9:	52                   	push   edx
c0013fba:	50                   	push   eax
c0013fbb:	57                   	push   edi
c0013fbc:	e8 47 42 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0013fc1:	83 c4 10             	add    esp,0x10
c0013fc4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013fc8:	85 c0                	test   eax,eax
c0013fca:	74 17                	je     c0013fe3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	68 46 32 02 c0       	push   0xc0023246
c0013fd4:	e8 75 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013fd9:	83 c4 10             	add    esp,0x10
c0013fdc:	31 c0                	xor    eax,eax
c0013fde:	e9 8b 00 00 00       	jmp    c001406e <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013fe3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013fe7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013fea:	83 ec 0c             	sub    esp,0xc
c0013fed:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013ff0:	50                   	push   eax
c0013ff1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013ff5:	56                   	push   esi
c0013ff6:	57                   	push   edi
c0013ff7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013ffb:	e8 cc fb ff ff       	call   c0013bcc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014000:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014004:	83 c4 20             	add    esp,0x20
c0014007:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001400b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001400f:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014014:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014018:	41                   	inc    ecx
c0014019:	e9 6d ff ff ff       	jmp    c0013f8b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001401e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014022:	83 ec 0c             	sub    esp,0xc
c0014025:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014029:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001402d:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014033:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014039:	25 00 f0 ff ff       	and    eax,0xfffff000
c001403e:	05 00 10 00 00       	add    eax,0x1000
c0014043:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001404a:	e8 71 a8 ff ff       	call   c000e8c0 <free>
c001404f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014052:	e8 69 a8 ff ff       	call   c000e8c0 <free>
c0014057:	58                   	pop    eax
c0014058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001405c:	e8 5f a8 ff ff       	call   c000e8c0 <free>
c0014061:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014064:	e8 3f 41 ff ff       	call   c00081a8 <File::close()>
c0014069:	83 c4 10             	add    esp,0x10
c001406c:	b0 01                	mov    al,0x1
c001406e:	83 c4 3c             	add    esp,0x3c
c0014071:	5b                   	pop    ebx
c0014072:	5e                   	pop    esi
c0014073:	5f                   	pop    edi
c0014074:	5d                   	pop    ebp
c0014075:	c3                   	ret    

c0014076 <Thr::runtimeReferenceHelper()>:
c0014076:	83 ec 18             	sub    esp,0x18
c0014079:	68 4e 32 02 c0       	push   0xc002324e
c001407e:	e8 cb 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014083:	fa                   	cli    
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	eb fe                	jmp    c0014087 <Thr::runtimeReferenceHelper()+0x11>

c0014089 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014089:	57                   	push   edi
c001408a:	56                   	push   esi
c001408b:	53                   	push   ebx
c001408c:	31 db                	xor    ebx,ebx
c001408e:	39 1d 80 d6 02 c0    	cmp    DWORD PTR ds:0xc002d680,ebx
c0014094:	7e 3c                	jle    c00140d2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014096:	8b 34 9d 00 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2a00]
c001409d:	31 ff                	xor    edi,edi
c001409f:	39 3c 9d 00 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2b00],edi
c00140a6:	7e 27                	jle    c00140cf <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00140a8:	50                   	push   eax
c00140a9:	50                   	push   eax
c00140aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00140b0:	03 04 9d 80 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a80]
c00140b7:	50                   	push   eax
c00140b8:	e8 c3 c6 fe ff       	call   c0000780 <strcmp>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	85 c0                	test   eax,eax
c00140c2:	75 05                	jne    c00140c9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00140c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00140c7:	eb 0b                	jmp    c00140d4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00140c9:	83 c6 10             	add    esi,0x10
c00140cc:	47                   	inc    edi
c00140cd:	eb d0                	jmp    c001409f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00140cf:	43                   	inc    ebx
c00140d0:	eb bc                	jmp    c001408e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00140d2:	31 c0                	xor    eax,eax
c00140d4:	5b                   	pop    ebx
c00140d5:	5e                   	pop    esi
c00140d6:	5f                   	pop    edi
c00140d7:	c3                   	ret    

c00140d8 <Thr::loadKernelSymbolTable(char const*)>:
c00140d8:	55                   	push   ebp
c00140d9:	57                   	push   edi
c00140da:	56                   	push   esi
c00140db:	53                   	push   ebx
c00140dc:	83 ec 68             	sub    esp,0x68
c00140df:	68 14 01 00 00       	push   0x114
c00140e4:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c00140ea:	e8 c1 a7 ff ff       	call   c000e8b0 <malloc>
c00140ef:	83 c4 0c             	add    esp,0xc
c00140f2:	56                   	push   esi
c00140f3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00140f7:	89 c3                	mov    ebx,eax
c00140f9:	50                   	push   eax
c00140fa:	e8 2d 40 ff ff       	call   c000812c <File::File(char const*, Process*)>
c00140ff:	5e                   	pop    esi
c0014100:	5f                   	pop    edi
c0014101:	6a 01                	push   0x1
c0014103:	53                   	push   ebx
c0014104:	e8 41 40 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014109:	83 c4 10             	add    esp,0x10
c001410c:	85 c0                	test   eax,eax
c001410e:	74 0a                	je     c001411a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014110:	83 ec 0c             	sub    esp,0xc
c0014113:	68 70 32 02 c0       	push   0xc0023270
c0014118:	eb 34                	jmp    c001414e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001411a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014122:	83 ec 0c             	sub    esp,0xc
c0014125:	6a 34                	push   0x34
c0014127:	e8 84 a7 ff ff       	call   c000e8b0 <malloc>
c001412c:	59                   	pop    ecx
c001412d:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014131:	89 c7                	mov    edi,eax
c0014133:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014135:	56                   	push   esi
c0014136:	57                   	push   edi
c0014137:	6a 00                	push   0x0
c0014139:	6a 34                	push   0x34
c001413b:	53                   	push   ebx
c001413c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001413f:	83 c4 20             	add    esp,0x20
c0014142:	85 c0                	test   eax,eax
c0014144:	74 17                	je     c001415d <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014146:	83 ec 0c             	sub    esp,0xc
c0014149:	68 87 32 02 c0       	push   0xc0023287
c001414e:	e8 a3 aa ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	31 c0                	xor    eax,eax
c0014158:	e9 31 02 00 00       	jmp    c001438e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001415d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014163:	75 e1                	jne    c0014146 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014165:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014168:	85 c0                	test   eax,eax
c001416a:	74 da                	je     c0014146 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001416c:	52                   	push   edx
c001416d:	31 d2                	xor    edx,edx
c001416f:	52                   	push   edx
c0014170:	50                   	push   eax
c0014171:	53                   	push   ebx
c0014172:	e8 91 40 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014177:	83 c4 10             	add    esp,0x10
c001417a:	85 c0                	test   eax,eax
c001417c:	75 c8                	jne    c0014146 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001417e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	31 ed                	xor    ebp,ebp
c0014187:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001418b:	0f af c2             	imul   eax,edx
c001418e:	50                   	push   eax
c001418f:	e8 1c a7 ff ff       	call   c000e8b0 <malloc>
c0014194:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014196:	89 34 24             	mov    DWORD PTR [esp],esi
c0014199:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001419d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141a1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00141a5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00141a9:	0f af c2             	imul   eax,edx
c00141ac:	99                   	cdq    
c00141ad:	52                   	push   edx
c00141ae:	50                   	push   eax
c00141af:	53                   	push   ebx
c00141b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b3:	83 c4 20             	add    esp,0x20
c00141b6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00141be:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00141c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00141ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141d6:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00141da:	0f b7 f5             	movzx  esi,bp
c00141dd:	0f 83 a7 00 00 00    	jae    c001428a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00141e3:	6b f6 28             	imul   esi,esi,0x28
c00141e6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00141ea:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00141ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00141f1:	50                   	push   eax
c00141f2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00141f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141fa:	8b 16                	mov    edx,DWORD PTR [esi]
c00141fc:	6b c0 28             	imul   eax,eax,0x28
c00141ff:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014203:	89 d0                	mov    eax,edx
c0014205:	31 d2                	xor    edx,edx
c0014207:	52                   	push   edx
c0014208:	50                   	push   eax
c0014209:	53                   	push   ebx
c001420a:	e8 f9 3f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001420f:	83 c4 0c             	add    esp,0xc
c0014212:	6a 20                	push   0x20
c0014214:	6a 00                	push   0x0
c0014216:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001421a:	52                   	push   edx
c001421b:	e8 d0 c2 fe ff       	call   c00004f0 <memset>
c0014220:	58                   	pop    eax
c0014221:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014223:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014227:	51                   	push   ecx
c0014228:	8d 54 24 40          	lea    edx,[esp+0x40]
c001422c:	52                   	push   edx
c001422d:	6a 00                	push   0x0
c001422f:	6a 1f                	push   0x1f
c0014231:	53                   	push   ebx
c0014232:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014235:	83 c4 18             	add    esp,0x18
c0014238:	68 9e 32 02 c0       	push   0xc002329e
c001423d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014241:	52                   	push   edx
c0014242:	e8 39 c5 fe ff       	call   c0000780 <strcmp>
c0014247:	83 c4 10             	add    esp,0x10
c001424a:	85 c0                	test   eax,eax
c001424c:	75 0f                	jne    c001425d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001424e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014251:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014255:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014259:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001425d:	50                   	push   eax
c001425e:	50                   	push   eax
c001425f:	68 a6 32 02 c0       	push   0xc00232a6
c0014264:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014268:	50                   	push   eax
c0014269:	e8 12 c5 fe ff       	call   c0000780 <strcmp>
c001426e:	83 c4 10             	add    esp,0x10
c0014271:	85 c0                	test   eax,eax
c0014273:	75 0f                	jne    c0014284 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014275:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014278:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001427c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014280:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014284:	45                   	inc    ebp
c0014285:	e9 4c ff ff ff       	jmp    c00141d6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001428a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001428f:	75 10                	jne    c00142a1 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014291:	83 ec 0c             	sub    esp,0xc
c0014294:	68 ae 32 02 c0       	push   0xc00232ae
c0014299:	e8 58 a9 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001429e:	83 c4 10             	add    esp,0x10
c00142a1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00142a6:	75 10                	jne    c00142b8 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00142a8:	83 ec 0c             	sub    esp,0xc
c00142ab:	68 ae 32 02 c0       	push   0xc00232ae
c00142b0:	e8 41 a9 ff ff       	call   c000ebf6 <KePanic(char const*)>
c00142b5:	83 c4 10             	add    esp,0x10
c00142b8:	50                   	push   eax
c00142b9:	31 d2                	xor    edx,edx
c00142bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142bf:	52                   	push   edx
c00142c0:	50                   	push   eax
c00142c1:	53                   	push   ebx
c00142c2:	e8 41 3f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00142c7:	5a                   	pop    edx
c00142c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142cc:	e8 df a5 ff ff       	call   c000e8b0 <malloc>
c00142d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142d5:	31 c9                	xor    ecx,ecx
c00142d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142dd:	5e                   	pop    esi
c00142de:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00142e2:	55                   	push   ebp
c00142e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142e7:	51                   	push   ecx
c00142e8:	52                   	push   edx
c00142e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00142ed:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00142f1:	53                   	push   ebx
c00142f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00142f5:	83 c4 14             	add    esp,0x14
c00142f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142fc:	e8 af a5 ff ff       	call   c000e8b0 <malloc>
c0014301:	89 c6                	mov    esi,eax
c0014303:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014305:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014308:	56                   	push   esi
c0014309:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001430d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014311:	51                   	push   ecx
c0014312:	52                   	push   edx
c0014313:	53                   	push   ebx
c0014314:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014317:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001431b:	83 c4 1c             	add    esp,0x1c
c001431e:	8b 15 80 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d680
c0014324:	c1 e8 04             	shr    eax,0x4
c0014327:	89 04 95 00 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b00],eax
c001432e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014332:	31 d2                	xor    edx,edx
c0014334:	52                   	push   edx
c0014335:	50                   	push   eax
c0014336:	53                   	push   ebx
c0014337:	e8 cc 3e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001433c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001433e:	31 d2                	xor    edx,edx
c0014340:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014343:	56                   	push   esi
c0014344:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014348:	52                   	push   edx
c0014349:	50                   	push   eax
c001434a:	53                   	push   ebx
c001434b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001434e:	83 c4 14             	add    esp,0x14
c0014351:	53                   	push   ebx
c0014352:	e8 51 3e ff ff       	call   c00081a8 <File::close()>
c0014357:	5d                   	pop    ebp
c0014358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001435c:	e8 5f a5 ff ff       	call   c000e8c0 <free>
c0014361:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014364:	e8 57 a5 ff ff       	call   c000e8c0 <free>
c0014369:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c001436e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014372:	83 c4 10             	add    esp,0x10
c0014375:	89 34 85 80 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a80],esi
c001437c:	8d 50 01             	lea    edx,[eax+0x1]
c001437f:	89 0c 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],ecx
c0014386:	b0 01                	mov    al,0x1
c0014388:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c001438e:	83 c4 5c             	add    esp,0x5c
c0014391:	5b                   	pop    ebx
c0014392:	5e                   	pop    esi
c0014393:	5f                   	pop    edi
c0014394:	5d                   	pop    ebp
c0014395:	c3                   	ret    

c0014396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014396:	55                   	push   ebp
c0014397:	57                   	push   edi
c0014398:	56                   	push   esi
c0014399:	53                   	push   ebx
c001439a:	81 ec 68 03 00 00    	sub    esp,0x368
c00143a0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00143a7:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c00143ad:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00143b1:	68 14 01 00 00       	push   0x114
c00143b6:	e8 f5 a4 ff ff       	call   c000e8b0 <malloc>
c00143bb:	83 c4 0c             	add    esp,0xc
c00143be:	56                   	push   esi
c00143bf:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00143c6:	50                   	push   eax
c00143c7:	89 c3                	mov    ebx,eax
c00143c9:	e8 5e 3d ff ff       	call   c000812c <File::File(char const*, Process*)>
c00143ce:	5f                   	pop    edi
c00143cf:	5d                   	pop    ebp
c00143d0:	6a 01                	push   0x1
c00143d2:	53                   	push   ebx
c00143d3:	e8 72 3d ff ff       	call   c000814a <File::open(FileOpenMode)>
c00143d8:	83 c4 10             	add    esp,0x10
c00143db:	85 c0                	test   eax,eax
c00143dd:	0f 85 b3 06 00 00    	jne    c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00143e3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00143eb:	83 ec 0c             	sub    esp,0xc
c00143ee:	6a 34                	push   0x34
c00143f0:	e8 bb a4 ff ff       	call   c000e8b0 <malloc>
c00143f5:	5e                   	pop    esi
c00143f6:	8d 74 24 54          	lea    esi,[esp+0x54]
c00143fa:	89 c5                	mov    ebp,eax
c00143fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143fe:	56                   	push   esi
c00143ff:	55                   	push   ebp
c0014400:	6a 00                	push   0x0
c0014402:	6a 34                	push   0x34
c0014404:	53                   	push   ebx
c0014405:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014408:	83 c4 20             	add    esp,0x20
c001440b:	85 c0                	test   eax,eax
c001440d:	0f 85 83 06 00 00    	jne    c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014413:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001441a:	0f 85 76 06 00 00    	jne    c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014420:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014423:	85 c0                	test   eax,eax
c0014425:	0f 84 6b 06 00 00    	je     c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001442b:	31 d2                	xor    edx,edx
c001442d:	51                   	push   ecx
c001442e:	52                   	push   edx
c001442f:	50                   	push   eax
c0014430:	53                   	push   ebx
c0014431:	e8 d2 3d ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	85 c0                	test   eax,eax
c001443b:	0f 85 55 06 00 00    	jne    c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014441:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014444:	83 ec 0c             	sub    esp,0xc
c0014447:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001444b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001444f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014453:	0f af c2             	imul   eax,edx
c0014456:	50                   	push   eax
c0014457:	e8 54 a4 ff ff       	call   c000e8b0 <malloc>
c001445c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001445e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014461:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014465:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014469:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001446d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014471:	0f af c2             	imul   eax,edx
c0014474:	99                   	cdq    
c0014475:	52                   	push   edx
c0014476:	50                   	push   eax
c0014477:	53                   	push   ebx
c0014478:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001447b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001447e:	83 c4 20             	add    esp,0x20
c0014481:	85 c0                	test   eax,eax
c0014483:	0f 84 0d 06 00 00    	je     c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014489:	52                   	push   edx
c001448a:	31 d2                	xor    edx,edx
c001448c:	52                   	push   edx
c001448d:	50                   	push   eax
c001448e:	53                   	push   ebx
c001448f:	e8 74 3d ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014494:	83 c4 10             	add    esp,0x10
c0014497:	85 c0                	test   eax,eax
c0014499:	0f 85 f7 05 00 00    	jne    c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001449f:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00144a3:	83 ec 0c             	sub    esp,0xc
c00144a6:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00144aa:	0f af c2             	imul   eax,edx
c00144ad:	50                   	push   eax
c00144ae:	e8 fd a3 ff ff       	call   c000e8b0 <malloc>
c00144b3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00144b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144c0:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00144c4:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00144c8:	0f af c2             	imul   eax,edx
c00144cb:	99                   	cdq    
c00144cc:	52                   	push   edx
c00144cd:	50                   	push   eax
c00144ce:	53                   	push   ebx
c00144cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144d2:	83 c4 20             	add    esp,0x20
c00144d5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00144db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00144de:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00144e2:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00144e6:	73 78                	jae    c0014560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00144e8:	c1 e7 05             	shl    edi,0x5
c00144eb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00144ef:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00144f2:	75 63                	jne    c0014557 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00144f4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00144f7:	31 d2                	xor    edx,edx
c00144f9:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00144fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014500:	50                   	push   eax
c0014501:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014504:	52                   	push   edx
c0014505:	50                   	push   eax
c0014506:	53                   	push   ebx
c0014507:	e8 fc 3c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001450c:	83 c4 10             	add    esp,0x10
c001450f:	85 c0                	test   eax,eax
c0014511:	0f 85 7f 05 00 00    	jne    c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014517:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	31 d2                	xor    edx,edx
c0014523:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014527:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014529:	01 c6                	add    esi,eax
c001452b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014532:	50                   	push   eax
c0014533:	56                   	push   esi
c0014534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014538:	52                   	push   edx
c0014539:	50                   	push   eax
c001453a:	53                   	push   ebx
c001453b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001453e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014541:	83 c4 1c             	add    esp,0x1c
c0014544:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014547:	50                   	push   eax
c0014548:	6a 00                	push   0x0
c001454a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001454e:	56                   	push   esi
c001454f:	e8 9c bf fe ff       	call   c00004f0 <memset>
c0014554:	83 c4 10             	add    esp,0x10
c0014557:	66 ff 04 24          	inc    WORD PTR [esp]
c001455b:	e9 7b ff ff ff       	jmp    c00144db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014560:	50                   	push   eax
c0014561:	68 00 01 00 00       	push   0x100
c0014566:	6a 00                	push   0x0
c0014568:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001456c:	50                   	push   eax
c001456d:	e8 7e bf fe ff       	call   c00004f0 <memset>
c0014572:	83 c4 0c             	add    esp,0xc
c0014575:	68 00 01 00 00       	push   0x100
c001457a:	6a 00                	push   0x0
c001457c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014583:	50                   	push   eax
c0014584:	e8 67 bf fe ff       	call   c00004f0 <memset>
c0014589:	83 c4 10             	add    esp,0x10
c001458c:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014593:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001459a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00145a2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00145aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00145ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145be:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c00145c2:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00145c7:	0f 83 16 01 00 00    	jae    c00146e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c00145cd:	6b ff 28             	imul   edi,edi,0x28
c00145d0:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c00145d4:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00145d7:	51                   	push   ecx
c00145d8:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00145dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00145e0:	8b 07                	mov    eax,DWORD PTR [edi]
c00145e2:	6b d2 28             	imul   edx,edx,0x28
c00145e5:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00145e9:	31 d2                	xor    edx,edx
c00145eb:	52                   	push   edx
c00145ec:	50                   	push   eax
c00145ed:	53                   	push   ebx
c00145ee:	e8 15 3c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00145f3:	83 c4 0c             	add    esp,0xc
c00145f6:	6a 20                	push   0x20
c00145f8:	6a 00                	push   0x0
c00145fa:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014601:	51                   	push   ecx
c0014602:	e8 e9 be fe ff       	call   c00004f0 <memset>
c0014607:	58                   	pop    eax
c0014608:	8b 03                	mov    eax,DWORD PTR [ebx]
c001460a:	8d 54 24 58          	lea    edx,[esp+0x58]
c001460e:	52                   	push   edx
c001460f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014616:	51                   	push   ecx
c0014617:	6a 00                	push   0x0
c0014619:	6a 1f                	push   0x1f
c001461b:	53                   	push   ebx
c001461c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001461f:	83 c4 1c             	add    esp,0x1c
c0014622:	6a 09                	push   0x9
c0014624:	68 c8 32 02 c0       	push   0xc00232c8
c0014629:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014630:	51                   	push   ecx
c0014631:	e8 4a bd fe ff       	call   c0000380 <memcmp>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	85 c0                	test   eax,eax
c001463b:	75 1a                	jne    c0014657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c001463d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014640:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014643:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014647:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001464a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014651:	89 d0                	mov    eax,edx
c0014653:	40                   	inc    eax
c0014654:	89 04 24             	mov    DWORD PTR [esp],eax
c0014657:	52                   	push   edx
c0014658:	6a 09                	push   0x9
c001465a:	68 d2 32 02 c0       	push   0xc00232d2
c001465f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014666:	50                   	push   eax
c0014667:	e8 14 bd fe ff       	call   c0000380 <memcmp>
c001466c:	83 c4 10             	add    esp,0x10
c001466f:	85 c0                	test   eax,eax
c0014671:	75 1a                	jne    c001468d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014673:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014676:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014679:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001467d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014680:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014687:	89 c8                	mov    eax,ecx
c0014689:	40                   	inc    eax
c001468a:	89 04 24             	mov    DWORD PTR [esp],eax
c001468d:	50                   	push   eax
c001468e:	50                   	push   eax
c001468f:	68 9e 32 02 c0       	push   0xc002329e
c0014694:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001469b:	50                   	push   eax
c001469c:	e8 df c0 fe ff       	call   c0000780 <strcmp>
c00146a1:	83 c4 10             	add    esp,0x10
c00146a4:	85 c0                	test   eax,eax
c00146a6:	75 0b                	jne    c00146b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00146a8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00146ac:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00146af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146b3:	50                   	push   eax
c00146b4:	50                   	push   eax
c00146b5:	68 a6 32 02 c0       	push   0xc00232a6
c00146ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00146c1:	50                   	push   eax
c00146c2:	e8 b9 c0 fe ff       	call   c0000780 <strcmp>
c00146c7:	83 c4 10             	add    esp,0x10
c00146ca:	85 c0                	test   eax,eax
c00146cc:	75 0b                	jne    c00146d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00146ce:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00146d2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00146d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146d9:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00146de:	e9 d7 fe ff ff       	jmp    c00145ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00146e3:	50                   	push   eax
c00146e4:	31 d2                	xor    edx,edx
c00146e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146ea:	52                   	push   edx
c00146eb:	50                   	push   eax
c00146ec:	53                   	push   ebx
c00146ed:	e8 16 3b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00146f2:	58                   	pop    eax
c00146f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146f7:	e8 b4 a1 ff ff       	call   c000e8b0 <malloc>
c00146fc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00146fe:	31 d2                	xor    edx,edx
c0014700:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014704:	58                   	pop    eax
c0014705:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014709:	56                   	push   esi
c001470a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001470e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014712:	52                   	push   edx
c0014713:	50                   	push   eax
c0014714:	53                   	push   ebx
c0014715:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014718:	83 c4 14             	add    esp,0x14
c001471b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471f:	e8 8c a1 ff ff       	call   c000e8b0 <malloc>
c0014724:	31 d2                	xor    edx,edx
c0014726:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001472a:	83 c4 0c             	add    esp,0xc
c001472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014731:	52                   	push   edx
c0014732:	50                   	push   eax
c0014733:	53                   	push   ebx
c0014734:	e8 cf 3a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014739:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001473b:	31 d2                	xor    edx,edx
c001473d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014740:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014744:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014748:	52                   	push   edx
c0014749:	50                   	push   eax
c001474a:	53                   	push   ebx
c001474b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001474e:	83 c4 20             	add    esp,0x20
c0014751:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014756:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001475e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014762:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014766:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014769:	0f 84 2b 03 00 00    	je     c0014a9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001476f:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014776:	31 d2                	xor    edx,edx
c0014778:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001477c:	c1 e8 03             	shr    eax,0x3
c001477f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014783:	51                   	push   ecx
c0014784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014788:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001478c:	52                   	push   edx
c001478d:	50                   	push   eax
c001478e:	53                   	push   ebx
c001478f:	e8 74 3a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014794:	5e                   	pop    esi
c0014795:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014799:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00147a0:	e8 0b a1 ff ff       	call   c000e8b0 <malloc>
c00147a5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147a7:	31 d2                	xor    edx,edx
c00147a9:	89 c7                	mov    edi,eax
c00147ab:	58                   	pop    eax
c00147ac:	8d 44 24 58          	lea    eax,[esp+0x58]
c00147b0:	50                   	push   eax
c00147b1:	57                   	push   edi
c00147b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147b6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00147bd:	52                   	push   edx
c00147be:	50                   	push   eax
c00147bf:	53                   	push   ebx
c00147c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147c3:	83 c4 20             	add    esp,0x20
c00147c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00147ce:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00147d2:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00147d6:	0f 8d a5 02 00 00    	jge    c0014a81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00147dc:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00147e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147e5:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00147e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00147ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147f0:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00147f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147f8:	c1 e8 08             	shr    eax,0x8
c00147fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00147ff:	89 c2                	mov    edx,eax
c0014801:	c1 e2 04             	shl    edx,0x4
c0014804:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014808:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c001480b:	85 f6                	test   esi,esi
c001480d:	0f 85 cf 00 00 00    	jne    c00148e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001481a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001481e:	03 02                	add    eax,DWORD PTR [edx]
c0014820:	50                   	push   eax
c0014821:	e8 63 f8 ff ff       	call   c0014089 <Thr::getAddressOfKernelSymbol(char const*)>
c0014826:	83 c4 10             	add    esp,0x10
c0014829:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001482d:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014832:	85 c0                	test   eax,eax
c0014834:	89 c6                	mov    esi,eax
c0014836:	0f 85 a6 00 00 00    	jne    c00148e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001483c:	83 ec 0c             	sub    esp,0xc
c001483f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014847:	03 02                	add    eax,DWORD PTR [edx]
c0014849:	50                   	push   eax
c001484a:	e8 31 ae ff ff       	call   c000f680 <KeResolveCompatibilitySymbol(char*)>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014856:	85 c0                	test   eax,eax
c0014858:	89 c6                	mov    esi,eax
c001485a:	0f 85 82 00 00 00    	jne    c00148e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014860:	50                   	push   eax
c0014861:	50                   	push   eax
c0014862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014866:	03 02                	add    eax,DWORD PTR [edx]
c0014868:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001486c:	50                   	push   eax
c001486d:	68 dc 32 02 c0       	push   0xc00232dc
c0014872:	e8 d7 26 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014877:	58                   	pop    eax
c0014878:	5a                   	pop    edx
c0014879:	68 f6 32 02 c0       	push   0xc00232f6
c001487e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014885:	51                   	push   ecx
c0014886:	e8 c5 bd fe ff       	call   c0000650 <strcpy>
c001488b:	59                   	pop    ecx
c001488c:	58                   	pop    eax
c001488d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014895:	03 02                	add    eax,DWORD PTR [edx]
c0014897:	50                   	push   eax
c0014898:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001489f:	51                   	push   ecx
c00148a0:	e8 cb bf fe ff       	call   c0000870 <strcat>
c00148a5:	58                   	pop    eax
c00148a6:	5a                   	pop    edx
c00148a7:	68 90 33 02 c0       	push   0xc0023390
c00148ac:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00148b3:	51                   	push   ecx
c00148b4:	e8 b7 bf fe ff       	call   c0000870 <strcat>
c00148b9:	83 c4 10             	add    esp,0x10
c00148bc:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00148c1:	0f 84 77 01 00 00    	je     c0014a3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00148c7:	83 ec 0c             	sub    esp,0xc
c00148ca:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00148d1:	51                   	push   ecx
c00148d2:	e8 1f a3 ff ff       	call   c000ebf6 <KePanic(char const*)>
c00148d7:	83 c4 10             	add    esp,0x10
c00148da:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00148de:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00148e2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00148e7:	83 f8 01             	cmp    eax,0x1
c00148ea:	0f 85 9b 00 00 00    	jne    c001498b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00148f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00148f4:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00148fb:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00148ff:	01 d0                	add    eax,edx
c0014901:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014909:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001490d:	0f 94 c0             	sete   al
c0014910:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014918:	0f 94 c1             	sete   cl
c001491b:	09 c1                	or     ecx,eax
c001491d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014921:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014926:	0f b6 c9             	movzx  ecx,cl
c0014929:	8b 00                	mov    eax,DWORD PTR [eax]
c001492b:	74 41                	je     c001496e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c001492d:	8d 14 06             	lea    edx,[esi+eax*1]
c0014930:	85 c9                	test   ecx,ecx
c0014932:	75 15                	jne    c0014949 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014934:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014938:	66 83 f8 0c          	cmp    ax,0xc
c001493c:	76 05                	jbe    c0014943 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001493e:	b8 0c 00 00 00       	mov    eax,0xc
c0014943:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014947:	76 37                	jbe    c0014980 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014949:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001494e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014952:	0f 84 e6 00 00 00    	je     c0014a3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014958:	83 ec 0c             	sub    esp,0xc
c001495b:	68 0d 33 02 c0       	push   0xc002330d
c0014960:	e8 91 a2 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001496c:	eb 12                	jmp    c0014980 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001496e:	01 c2                	add    edx,eax
c0014970:	85 c9                	test   ecx,ecx
c0014972:	75 0c                	jne    c0014980 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014974:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014978:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001497c:	77 02                	ja     c0014980 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001497e:	01 f2                	add    edx,esi
c0014980:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014984:	89 10                	mov    DWORD PTR [eax],edx
c0014986:	e9 ed 00 00 00       	jmp    c0014a78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001498b:	83 f8 02             	cmp    eax,0x2
c001498e:	0f 85 81 00 00 00    	jne    c0014a15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014994:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001499b:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001499f:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00149a3:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00149ab:	74 21                	je     c00149ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00149ad:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00149b5:	74 17                	je     c00149ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00149b7:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00149bb:	ba 0a 00 00 00       	mov    edx,0xa
c00149c0:	83 f9 0e             	cmp    ecx,0xe
c00149c3:	77 03                	ja     c00149c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00149c5:	8d 51 fc             	lea    edx,[ecx-0x4]
c00149c8:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00149cc:	76 1f                	jbe    c00149ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00149ce:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00149d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00149d7:	74 65                	je     c0014a3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00149d9:	83 ec 0c             	sub    esp,0xc
c00149dc:	68 29 33 02 c0       	push   0xc0023329
c00149e1:	e8 10 a2 ff ff       	call   c000ebf6 <KePanic(char const*)>
c00149e6:	83 c4 10             	add    esp,0x10
c00149e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149ed:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00149f4:	74 15                	je     c0014a0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00149f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00149fa:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014a01:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014a05:	01 d1                	add    ecx,edx
c0014a07:	01 ce                	add    esi,ecx
c0014a09:	eb 06                	jmp    c0014a11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014a0b:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014a0f:	01 d6                	add    esi,edx
c0014a11:	89 30                	mov    DWORD PTR [eax],esi
c0014a13:	eb 63                	jmp    c0014a78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014a15:	56                   	push   esi
c0014a16:	56                   	push   esi
c0014a17:	50                   	push   eax
c0014a18:	68 45 33 02 c0       	push   0xc0023345
c0014a1d:	e8 2c 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014a22:	83 c4 10             	add    esp,0x10
c0014a25:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014a2a:	74 12                	je     c0014a3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014a2c:	83 ec 0c             	sub    esp,0xc
c0014a2f:	68 50 33 02 c0       	push   0xc0023350
c0014a34:	e8 bd a1 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014a39:	83 c4 10             	add    esp,0x10
c0014a3c:	eb 3a                	jmp    c0014a78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014a3e:	83 ec 0c             	sub    esp,0xc
c0014a41:	53                   	push   ebx
c0014a42:	e8 61 37 ff ff       	call   c00081a8 <File::close()>
c0014a47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a52:	e8 69 9e ff ff       	call   c000e8c0 <free>
c0014a57:	59                   	pop    ecx
c0014a58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a5c:	e8 5f 9e ff ff       	call   c000e8c0 <free>
c0014a61:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a64:	e8 57 9e ff ff       	call   c000e8c0 <free>
c0014a69:	5b                   	pop    ebx
c0014a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a6e:	e8 4d 9e ff ff       	call   c000e8c0 <free>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	eb 1e                	jmp    c0014a96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a78:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014a7c:	e9 4d fd ff ff       	jmp    c00147ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014a81:	83 ec 0c             	sub    esp,0xc
c0014a84:	57                   	push   edi
c0014a85:	e8 36 9e ff ff       	call   c000e8c0 <free>
c0014a8a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014a8e:	83 c4 10             	add    esp,0x10
c0014a91:	e9 cc fc ff ff       	jmp    c0014762 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014a96:	31 c0                	xor    eax,eax
c0014a98:	eb 32                	jmp    c0014acc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	53                   	push   ebx
c0014a9e:	e8 05 37 ff ff       	call   c00081a8 <File::close()>
c0014aa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014aa5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014aab:	58                   	pop    eax
c0014aac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ab0:	e8 0b 9e ff ff       	call   c000e8c0 <free>
c0014ab5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ab8:	e8 03 9e ff ff       	call   c000e8c0 <free>
c0014abd:	5a                   	pop    edx
c0014abe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ac2:	e8 f9 9d ff ff       	call   c000e8c0 <free>
c0014ac7:	83 c4 10             	add    esp,0x10
c0014aca:	b0 01                	mov    al,0x1
c0014acc:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014ad2:	5b                   	pop    ebx
c0014ad3:	5e                   	pop    esi
c0014ad4:	5f                   	pop    edi
c0014ad5:	5d                   	pop    ebp
c0014ad6:	c3                   	ret    

c0014ad7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014ad7:	56                   	push   esi
c0014ad8:	31 d2                	xor    edx,edx
c0014ada:	53                   	push   ebx
c0014adb:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014ae1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ae5:	39 d3                	cmp    ebx,edx
c0014ae7:	7e 1b                	jle    c0014b04 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014ae9:	8b 04 95 00 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2f00]
c0014af0:	39 c8                	cmp    eax,ecx
c0014af2:	77 0d                	ja     c0014b01 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014af4:	8b 34 95 00 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3100]
c0014afb:	01 c6                	add    esi,eax
c0014afd:	39 ce                	cmp    esi,ecx
c0014aff:	77 05                	ja     c0014b06 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014b01:	42                   	inc    edx
c0014b02:	eb e1                	jmp    c0014ae5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014b04:	31 c0                	xor    eax,eax
c0014b06:	5b                   	pop    ebx
c0014b07:	5e                   	pop    esi
c0014b08:	c3                   	ret    

c0014b09 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014b09:	53                   	push   ebx
c0014b0a:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014b10:	31 c0                	xor    eax,eax
c0014b12:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014b16:	39 c3                	cmp    ebx,eax
c0014b18:	7e 22                	jle    c0014b3c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014b1a:	8b 14 85 00 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f00]
c0014b21:	39 ca                	cmp    edx,ecx
c0014b23:	77 14                	ja     c0014b39 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014b25:	03 14 85 00 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3100]
c0014b2c:	39 ca                	cmp    edx,ecx
c0014b2e:	76 09                	jbe    c0014b39 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014b30:	8b 04 85 00 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d00]
c0014b37:	eb 05                	jmp    c0014b3e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014b39:	40                   	inc    eax
c0014b3a:	eb da                	jmp    c0014b16 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014b3c:	31 c0                	xor    eax,eax
c0014b3e:	5b                   	pop    ebx
c0014b3f:	c3                   	ret    

c0014b40 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014b40:	53                   	push   ebx
c0014b41:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014b45:	53                   	push   ebx
c0014b46:	e8 8c ff ff ff       	call   c0014ad7 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014b4b:	5a                   	pop    edx
c0014b4c:	31 d2                	xor    edx,edx
c0014b4e:	85 c0                	test   eax,eax
c0014b50:	74 04                	je     c0014b56 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014b52:	89 da                	mov    edx,ebx
c0014b54:	29 c2                	sub    edx,eax
c0014b56:	5b                   	pop    ebx
c0014b57:	89 d0                	mov    eax,edx
c0014b59:	c3                   	ret    

c0014b5a <Thr::loadDLL(char const*, bool)>:
c0014b5a:	55                   	push   ebp
c0014b5b:	57                   	push   edi
c0014b5c:	56                   	push   esi
c0014b5d:	53                   	push   ebx
c0014b5e:	81 ec 34 01 00 00    	sub    esp,0x134
c0014b64:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014b6b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014b72:	56                   	push   esi
c0014b73:	68 68 33 02 c0       	push   0xc0023368
c0014b78:	e8 d1 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014b7d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014b84:	e8 27 9d ff ff       	call   c000e8b0 <malloc>
c0014b89:	83 c4 0c             	add    esp,0xc
c0014b8c:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0014b92:	56                   	push   esi
c0014b93:	50                   	push   eax
c0014b94:	89 c3                	mov    ebx,eax
c0014b96:	e8 91 35 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014b9b:	83 c4 10             	add    esp,0x10
c0014b9e:	85 db                	test   ebx,ebx
c0014ba0:	75 3c                	jne    c0014bde <Thr::loadDLL(char const*, bool)+0x84>
c0014ba2:	89 e8                	mov    eax,ebp
c0014ba4:	84 c0                	test   al,al
c0014ba6:	0f 84 02 02 00 00    	je     c0014dae <Thr::loadDLL(char const*, bool)+0x254>
c0014bac:	50                   	push   eax
c0014bad:	50                   	push   eax
c0014bae:	68 79 33 02 c0       	push   0xc0023379
c0014bb3:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014bb7:	57                   	push   edi
c0014bb8:	e8 93 ba fe ff       	call   c0000650 <strcpy>
c0014bbd:	58                   	pop    eax
c0014bbe:	5a                   	pop    edx
c0014bbf:	56                   	push   esi
c0014bc0:	57                   	push   edi
c0014bc1:	e8 aa bc fe ff       	call   c0000870 <strcat>
c0014bc6:	59                   	pop    ecx
c0014bc7:	58                   	pop    eax
c0014bc8:	68 90 33 02 c0       	push   0xc0023390
c0014bcd:	57                   	push   edi
c0014bce:	e8 9d bc fe ff       	call   c0000870 <strcat>
c0014bd3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bd6:	e8 1b a0 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	50                   	push   eax
c0014bdf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014be3:	50                   	push   eax
c0014be4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014be8:	50                   	push   eax
c0014be9:	53                   	push   ebx
c0014bea:	e8 5d 38 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0014bef:	83 c4 10             	add    esp,0x10
c0014bf2:	85 db                	test   ebx,ebx
c0014bf4:	89 c7                	mov    edi,eax
c0014bf6:	74 0c                	je     c0014c04 <Thr::loadDLL(char const*, bool)+0xaa>
c0014bf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bfa:	83 ec 0c             	sub    esp,0xc
c0014bfd:	53                   	push   ebx
c0014bfe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c01:	83 c4 10             	add    esp,0x10
c0014c04:	83 ec 0c             	sub    esp,0xc
c0014c07:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014c0c:	50                   	push   eax
c0014c0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c15:	57                   	push   edi
c0014c16:	68 92 33 02 c0       	push   0xc0023392
c0014c1b:	e8 2e 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014c20:	83 c4 20             	add    esp,0x20
c0014c23:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014c28:	75 0a                	jne    c0014c34 <Thr::loadDLL(char const*, bool)+0xda>
c0014c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c2e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014c32:	75 3e                	jne    c0014c72 <Thr::loadDLL(char const*, bool)+0x118>
c0014c34:	89 e8                	mov    eax,ebp
c0014c36:	31 db                	xor    ebx,ebx
c0014c38:	84 c0                	test   al,al
c0014c3a:	0f 84 6e 01 00 00    	je     c0014dae <Thr::loadDLL(char const*, bool)+0x254>
c0014c40:	50                   	push   eax
c0014c41:	50                   	push   eax
c0014c42:	68 b3 33 02 c0       	push   0xc00233b3
c0014c47:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014c4b:	53                   	push   ebx
c0014c4c:	e8 ff b9 fe ff       	call   c0000650 <strcpy>
c0014c51:	58                   	pop    eax
c0014c52:	5a                   	pop    edx
c0014c53:	56                   	push   esi
c0014c54:	53                   	push   ebx
c0014c55:	e8 16 bc fe ff       	call   c0000870 <strcat>
c0014c5a:	59                   	pop    ecx
c0014c5b:	5f                   	pop    edi
c0014c5c:	68 90 33 02 c0       	push   0xc0023390
c0014c61:	53                   	push   ebx
c0014c62:	e8 09 bc fe ff       	call   c0000870 <strcat>
c0014c67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c6a:	e8 87 9f ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014c6f:	83 c4 10             	add    esp,0x10
c0014c72:	53                   	push   ebx
c0014c73:	6a 03                	push   0x3
c0014c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014c7d:	05 ff 0f 00 00       	add    eax,0xfff
c0014c82:	83 d2 00             	adc    edx,0x0
c0014c85:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014c89:	50                   	push   eax
c0014c8a:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014c90:	e8 3f db ff ff       	call   c00127d4 <VAS::allocatePages(int, int)>
c0014c95:	89 c3                	mov    ebx,eax
c0014c97:	58                   	pop    eax
c0014c98:	5a                   	pop    edx
c0014c99:	53                   	push   ebx
c0014c9a:	68 ea 26 02 c0       	push   0xc00226ea
c0014c9f:	e8 aa 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014ca4:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ca7:	e8 d4 b8 fe ff       	call   c0000580 <strlen>
c0014cac:	8b 3d e0 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002cee0
c0014cb2:	40                   	inc    eax
c0014cb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cb6:	e8 f5 9b ff ff       	call   c000e8b0 <malloc>
c0014cbb:	59                   	pop    ecx
c0014cbc:	89 04 bd 00 d3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2d00],eax
c0014cc3:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014cc8:	5f                   	pop    edi
c0014cc9:	56                   	push   esi
c0014cca:	ff 34 85 00 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d00]
c0014cd1:	e8 7a b9 fe ff       	call   c0000650 <strcpy>
c0014cd6:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014cdb:	89 1c 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],ebx
c0014ce2:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce5:	89 15 e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,edx
c0014ceb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014cef:	83 c4 0c             	add    esp,0xc
c0014cf2:	6a 01                	push   0x1
c0014cf4:	53                   	push   ebx
c0014cf5:	56                   	push   esi
c0014cf6:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c0014cfd:	e8 94 f6 ff ff       	call   c0014396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014d02:	83 c4 10             	add    esp,0x10
c0014d05:	89 c7                	mov    edi,eax
c0014d07:	89 f8                	mov    eax,edi
c0014d09:	83 f0 01             	xor    eax,0x1
c0014d0c:	84 c0                	test   al,al
c0014d0e:	74 18                	je     c0014d28 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014d10:	89 e8                	mov    eax,ebp
c0014d12:	84 c0                	test   al,al
c0014d14:	74 12                	je     c0014d28 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014d16:	83 ec 0c             	sub    esp,0xc
c0014d19:	68 cc 33 02 c0       	push   0xc00233cc
c0014d1e:	e8 d3 9e ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014d23:	83 c4 10             	add    esp,0x10
c0014d26:	eb 06                	jmp    c0014d2e <Thr::loadDLL(char const*, bool)+0x1d4>
c0014d28:	89 f8                	mov    eax,edi
c0014d2a:	84 c0                	test   al,al
c0014d2c:	75 10                	jne    c0014d3e <Thr::loadDLL(char const*, bool)+0x1e4>
c0014d2e:	83 ec 0c             	sub    esp,0xc
c0014d31:	68 eb 33 02 c0       	push   0xc00233eb
c0014d36:	e8 bb 9e ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	31 f6                	xor    esi,esi
c0014d40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d48:	05 ff 0f 00 00       	add    eax,0xfff
c0014d4d:	83 d2 00             	adc    edx,0x0
c0014d50:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014d54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014d58:	c1 ea 0c             	shr    edx,0xc
c0014d5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d5f:	ba 00 00 00 00       	mov    edx,0x0
c0014d64:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014d68:	89 d0                	mov    eax,edx
c0014d6a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014d6e:	73 32                	jae    c0014da2 <Thr::loadDLL(char const*, bool)+0x248>
c0014d70:	50                   	push   eax
c0014d71:	50                   	push   eax
c0014d72:	89 f0                	mov    eax,esi
c0014d74:	c1 e0 0c             	shl    eax,0xc
c0014d77:	01 d8                	add    eax,ebx
c0014d79:	50                   	push   eax
c0014d7a:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014d80:	e8 4d d5 ff ff       	call   c00122d2 <VAS::getPageTableEntry(unsigned long)>
c0014d85:	83 c4 10             	add    esp,0x10
c0014d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8a:	a8 60                	test   al,0x60
c0014d8c:	75 11                	jne    c0014d9f <Thr::loadDLL(char const*, bool)+0x245>
c0014d8e:	83 ec 0c             	sub    esp,0xc
c0014d91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014d96:	50                   	push   eax
c0014d97:	e8 eb 9f ff ff       	call   c000ed87 <Phys::freePage(unsigned long)>
c0014d9c:	83 c4 10             	add    esp,0x10
c0014d9f:	46                   	inc    esi
c0014da0:	eb 9e                	jmp    c0014d40 <Thr::loadDLL(char const*, bool)+0x1e6>
c0014da2:	89 f8                	mov    eax,edi
c0014da4:	84 c0                	test   al,al
c0014da6:	b8 00 00 00 00       	mov    eax,0x0
c0014dab:	0f 44 d8             	cmove  ebx,eax
c0014dae:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014db4:	89 d8                	mov    eax,ebx
c0014db6:	5b                   	pop    ebx
c0014db7:	5e                   	pop    esi
c0014db8:	5f                   	pop    edi
c0014db9:	5d                   	pop    ebp
c0014dba:	c3                   	ret    

c0014dbb <Thr::executeDLL(unsigned long, void*)>:
c0014dbb:	56                   	push   esi
c0014dbc:	53                   	push   ebx
c0014dbd:	52                   	push   edx
c0014dbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014dc2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014dc6:	85 db                	test   ebx,ebx
c0014dc8:	75 10                	jne    c0014dda <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014dca:	83 ec 0c             	sub    esp,0xc
c0014dcd:	68 07 34 02 c0       	push   0xc0023407
c0014dd2:	e8 1f 9e ff ff       	call   c000ebf6 <KePanic(char const*)>
c0014dd7:	83 c4 10             	add    esp,0x10
c0014dda:	50                   	push   eax
c0014ddb:	50                   	push   eax
c0014ddc:	53                   	push   ebx
c0014ddd:	68 31 34 02 c0       	push   0xc0023431
c0014de2:	e8 67 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014de7:	89 d8                	mov    eax,ebx
c0014de9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014ded:	83 c4 14             	add    esp,0x14
c0014df0:	5b                   	pop    ebx
c0014df1:	5e                   	pop    esi
c0014df2:	ff e0                	jmp    eax

c0014df4 <KeProcessExec(Process*, char const*)>:
c0014df4:	56                   	push   esi
c0014df5:	53                   	push   ebx
c0014df6:	83 ec 04             	sub    esp,0x4
c0014df9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014dfd:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014e03:	85 f6                	test   esi,esi
c0014e05:	74 16                	je     c0014e1d <KeProcessExec(Process*, char const*)+0x29>
c0014e07:	83 ec 0c             	sub    esp,0xc
c0014e0a:	56                   	push   esi
c0014e0b:	e8 54 d7 ff ff       	call   c0012564 <VAS::~VAS()>
c0014e10:	58                   	pop    eax
c0014e11:	5a                   	pop    edx
c0014e12:	6a 14                	push   0x14
c0014e14:	56                   	push   esi
c0014e15:	e8 01 78 ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0014e1a:	83 c4 10             	add    esp,0x10
c0014e1d:	83 ec 0c             	sub    esp,0xc
c0014e20:	6a 14                	push   0x14
c0014e22:	e8 89 9a ff ff       	call   c000e8b0 <malloc>
c0014e27:	89 c6                	mov    esi,eax
c0014e29:	58                   	pop    eax
c0014e2a:	5a                   	pop    edx
c0014e2b:	6a 00                	push   0x0
c0014e2d:	56                   	push   esi
c0014e2e:	e8 dd db ff ff       	call   c0012a10 <VAS::VAS(bool)>
c0014e33:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014e39:	59                   	pop    ecx
c0014e3a:	5e                   	pop    esi
c0014e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e3f:	50                   	push   eax
c0014e40:	53                   	push   ebx
c0014e41:	e8 11 f0 ff ff       	call   c0013e57 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014e46:	83 c4 14             	add    esp,0x14
c0014e49:	31 c0                	xor    eax,eax
c0014e4b:	5b                   	pop    ebx
c0014e4c:	5e                   	pop    esi
c0014e4d:	c3                   	ret    
c0014e4e:	66 90                	xchg   ax,ax

c0014e50 <userModeEntryPoint(void*)>:
c0014e50:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0014e58:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0014e5d:	85 c0                	test   eax,eax
c0014e5f:	75 03                	jne    c0014e64 <userModeEntryPoint(void*)+0x14>
c0014e61:	fb                   	sti    
c0014e62:	66 90                	xchg   ax,ax
c0014e64:	fb                   	sti    
c0014e65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e6d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e77:	e9 c3 b3 fe ff       	jmp    c000023f <goToUsermode>

c0014e7c <changeTSS>:
c0014e7c:	83 ec 14             	sub    esp,0x14
c0014e7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e87:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014e8c:	c1 e2 15             	shl    edx,0x15
c0014e8f:	29 d0                	sub    eax,edx
c0014e91:	50                   	push   eax
c0014e92:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0014e97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014e9d:	05 68 11 00 00       	add    eax,0x1168
c0014ea2:	50                   	push   eax
c0014ea3:	e8 d0 c9 ff ff       	call   c0011878 <TSS::setESP(unsigned long)>
c0014ea8:	83 c4 1c             	add    esp,0x1c
c0014eab:	c3                   	ret    

c0014eac <switchToThread(ThreadControlBlock*)>:
c0014eac:	57                   	push   edi
c0014ead:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c0014eb3:	56                   	push   esi
c0014eb4:	53                   	push   ebx
c0014eb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014eb9:	85 c9                	test   ecx,ecx
c0014ebb:	0f 85 8b 00 00 00    	jne    c0014f4c <switchToThread(ThreadControlBlock*)+0xa0>
c0014ec1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014ec5:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014ecb:	74 7b                	je     c0014f48 <switchToThread(ThreadControlBlock*)+0x9c>
c0014ecd:	b8 00 04 00 00       	mov    eax,0x400
c0014ed2:	29 d0                	sub    eax,edx
c0014ed4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014ed7:	d1 f8                	sar    eax,1
c0014ed9:	01 d0                	add    eax,edx
c0014edb:	90                   	nop
c0014edc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014edf:	e8 1b 38 00 00       	call   c00186ff <HalQueryPerformanceCounter()>
c0014ee4:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0014ee9:	89 c6                	mov    esi,eax
c0014eeb:	89 d7                	mov    edi,edx
c0014eed:	2b 35 e0 d6 02 c0    	sub    esi,DWORD PTR ds:0xc002d6e0
c0014ef3:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0014ef8:	1b 3d e4 d6 02 c0    	sbb    edi,DWORD PTR ds:0xc002d6e4
c0014efe:	89 35 e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,esi
c0014f04:	89 15 f4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f4,edx
c0014f0a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014f10:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c0014f16:	89 3d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edi
c0014f1c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014f1f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014f22:	01 c6                	add    esi,eax
c0014f24:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014f27:	11 d7                	adc    edi,edx
c0014f29:	83 ec 0c             	sub    esp,0xc
c0014f2c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014f2f:	53                   	push   ebx
c0014f30:	e8 42 b3 fe ff       	call   c0000277 <switchToThreadASM>
c0014f35:	0f 20 c0             	mov    eax,cr0
c0014f38:	83 c8 08             	or     eax,0x8
c0014f3b:	0f 22 c0             	mov    cr0,eax
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	5b                   	pop    ebx
c0014f42:	5e                   	pop    esi
c0014f43:	5f                   	pop    edi
c0014f44:	c3                   	ret    
c0014f45:	8d 76 00             	lea    esi,[esi+0x0]
c0014f48:	31 c0                	xor    eax,eax
c0014f4a:	eb 90                	jmp    c0014edc <switchToThread(ThreadControlBlock*)+0x30>
c0014f4c:	5b                   	pop    ebx
c0014f4d:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c0014f57:	5e                   	pop    esi
c0014f58:	5f                   	pop    edi
c0014f59:	c3                   	ret    
c0014f5a:	66 90                	xchg   ax,ax

c0014f5c <Process::addArgs(char**)>:
c0014f5c:	57                   	push   edi
c0014f5d:	56                   	push   esi
c0014f5e:	53                   	push   ebx
c0014f5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f63:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014f67:	85 f6                	test   esi,esi
c0014f69:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014f73:	74 4f                	je     c0014fc4 <Process::addArgs(char**)+0x68>
c0014f75:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f77:	85 c0                	test   eax,eax
c0014f79:	74 49                	je     c0014fc4 <Process::addArgs(char**)+0x68>
c0014f7b:	31 db                	xor    ebx,ebx
c0014f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f80:	83 ec 0c             	sub    esp,0xc
c0014f83:	50                   	push   eax
c0014f84:	e8 f7 b5 fe ff       	call   c0000580 <strlen>
c0014f89:	83 c0 01             	add    eax,0x1
c0014f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f8f:	e8 1c 99 ff ff       	call   c000e8b0 <malloc>
c0014f94:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014f9b:	5a                   	pop    edx
c0014f9c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014f9f:	83 c3 01             	add    ebx,0x1
c0014fa2:	59                   	pop    ecx
c0014fa3:	52                   	push   edx
c0014fa4:	50                   	push   eax
c0014fa5:	e8 a6 b6 fe ff       	call   c0000650 <strcpy>
c0014faa:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014fb0:	83 c4 10             	add    esp,0x10
c0014fb3:	83 c1 01             	add    ecx,0x1
c0014fb6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014fbc:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014fbf:	85 c0                	test   eax,eax
c0014fc1:	75 bd                	jne    c0014f80 <Process::addArgs(char**)+0x24>
c0014fc3:	90                   	nop
c0014fc4:	5b                   	pop    ebx
c0014fc5:	5e                   	pop    esi
c0014fc6:	5f                   	pop    edi
c0014fc7:	c3                   	ret    

c0014fc8 <Process::Process(char const*, Process*, char**)>:
c0014fc8:	56                   	push   esi
c0014fc9:	53                   	push   ebx
c0014fca:	83 ec 14             	sub    esp,0x14
c0014fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fd1:	05 0c 02 00 00       	add    eax,0x20c
c0014fd6:	bb 07 00 00 00       	mov    ebx,0x7
c0014fdb:	89 c6                	mov    esi,eax
c0014fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0014fe0:	85 db                	test   ebx,ebx
c0014fe2:	78 14                	js     c0014ff8 <Process::Process(char const*, Process*, char**)+0x30>
c0014fe4:	83 ec 0c             	sub    esp,0xc
c0014fe7:	56                   	push   esi
c0014fe8:	e8 b3 b8 00 00       	call   c00208a0 <ThreadControlBlock::ThreadControlBlock()>
c0014fed:	83 c4 10             	add    esp,0x10
c0014ff0:	83 c6 5f             	add    esi,0x5f
c0014ff3:	83 eb 01             	sub    ebx,0x1
c0014ff6:	eb e8                	jmp    c0014fe0 <Process::Process(char const*, Process*, char**)+0x18>
c0014ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ffc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015007:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001500e:	83 ec 0c             	sub    esp,0xc
c0015011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015015:	e8 fe 8a ff ff       	call   c000db18 <KeNewProcessEnv(Process*)>
c001501a:	83 c4 10             	add    esp,0x10
c001501d:	89 c2                	mov    edx,eax
c001501f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015023:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001502d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015036:	a1 5c 4d 02 c0       	mov    eax,ds:0xc0024d5c
c001503b:	8d 50 01             	lea    edx,[eax+0x1]
c001503e:	89 15 5c 4d 02 c0    	mov    DWORD PTR ds:0xc0024d5c,edx
c0015044:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015048:	89 02                	mov    DWORD PTR [edx],eax
c001504a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015052:	83 ec 0c             	sub    esp,0xc
c0015055:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015059:	e8 52 98 ff ff       	call   c000e8b0 <malloc>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	89 c3                	mov    ebx,eax
c0015063:	83 ec 08             	sub    esp,0x8
c0015066:	6a 00                	push   0x0
c0015068:	53                   	push   ebx
c0015069:	e8 a2 d9 ff ff       	call   c0012a10 <VAS::VAS(bool)>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015075:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001507b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001507f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015089:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001508d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015091:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015097:	e8 13 ac ff ff       	call   c000fcaf <KeInitSignals()>
c001509c:	89 c2                	mov    edx,eax
c001509e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150a2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00150a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150ac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00150b2:	85 c0                	test   eax,eax
c00150b4:	74 42                	je     c00150f8 <Process::Process(char const*, Process*, char**)+0x130>
c00150b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150ba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00150c0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00150c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150ca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00150d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00150da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00150e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150e4:	05 0c 01 00 00       	add    eax,0x10c
c00150e9:	83 ec 08             	sub    esp,0x8
c00150ec:	52                   	push   edx
c00150ed:	50                   	push   eax
c00150ee:	e8 5d b5 fe ff       	call   c0000650 <strcpy>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	eb 64                	jmp    c001515c <Process::Process(char const*, Process*, char**)+0x194>
c00150f8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015100:	83 ec 0c             	sub    esp,0xc
c0015103:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015107:	e8 a4 97 ff ff       	call   c000e8b0 <malloc>
c001510c:	83 c4 10             	add    esp,0x10
c001510f:	89 c3                	mov    ebx,eax
c0015111:	83 ec 08             	sub    esp,0x8
c0015114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015118:	53                   	push   ebx
c0015119:	e8 88 c4 ff ff       	call   c00115a6 <VgaText::VgaText(char const*)>
c001511e:	83 c4 10             	add    esp,0x10
c0015121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015125:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001512b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001512f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015135:	83 ec 0c             	sub    esp,0xc
c0015138:	50                   	push   eax
c0015139:	e8 16 bd ff ff       	call   c0010e54 <addToTerminalCycle(VgaText*)>
c001513e:	83 c4 10             	add    esp,0x10
c0015141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015145:	05 0c 01 00 00       	add    eax,0x10c
c001514a:	83 ec 08             	sub    esp,0x8
c001514d:	68 50 34 02 c0       	push   0xc0023450
c0015152:	50                   	push   eax
c0015153:	e8 f8 b4 fe ff       	call   c0000650 <strcpy>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	90                   	nop
c001515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015160:	83 c0 0c             	add    eax,0xc
c0015163:	83 ec 08             	sub    esp,0x8
c0015166:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001516a:	50                   	push   eax
c001516b:	e8 e0 b4 fe ff       	call   c0000650 <strcpy>
c0015170:	83 c4 10             	add    esp,0x10
c0015173:	83 ec 08             	sub    esp,0x8
c0015176:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001517a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001517e:	e8 d9 fd ff ff       	call   c0014f5c <Process::addArgs(char**)>
c0015183:	83 c4 10             	add    esp,0x10
c0015186:	83 ec 08             	sub    esp,0x8
c0015189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001518d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015191:	e8 c1 ec ff ff       	call   c0013e57 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015196:	83 c4 10             	add    esp,0x10
c0015199:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001519d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00151a1:	83 f0 01             	xor    eax,0x1
c00151a4:	88 c2                	mov    dl,al
c00151a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151aa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00151b0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00151b5:	83 ec 04             	sub    esp,0x4
c00151b8:	50                   	push   eax
c00151b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151bd:	68 cc 34 02 c0       	push   0xc00234cc
c00151c2:	e8 87 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	90                   	nop
c00151cb:	83 c4 14             	add    esp,0x14
c00151ce:	5b                   	pop    ebx
c00151cf:	5e                   	pop    esi
c00151d0:	c3                   	ret    
c00151d1:	90                   	nop
c00151d2:	66 90                	xchg   ax,ax

c00151d4 <Process::Process(bool, char const*, Process*, char**)>:
c00151d4:	56                   	push   esi
c00151d5:	53                   	push   ebx
c00151d6:	83 ec 24             	sub    esp,0x24
c00151d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00151dd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00151e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151e5:	05 0c 02 00 00       	add    eax,0x20c
c00151ea:	bb 07 00 00 00       	mov    ebx,0x7
c00151ef:	89 c6                	mov    esi,eax
c00151f1:	8d 76 00             	lea    esi,[esi+0x0]
c00151f4:	85 db                	test   ebx,ebx
c00151f6:	78 14                	js     c001520c <Process::Process(bool, char const*, Process*, char**)+0x38>
c00151f8:	83 ec 0c             	sub    esp,0xc
c00151fb:	56                   	push   esi
c00151fc:	e8 9f b6 00 00       	call   c00208a0 <ThreadControlBlock::ThreadControlBlock()>
c0015201:	83 c4 10             	add    esp,0x10
c0015204:	83 c6 5f             	add    esi,0x5f
c0015207:	83 eb 01             	sub    ebx,0x1
c001520a:	eb e8                	jmp    c00151f4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001520c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015210:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001521b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015222:	83 ec 0c             	sub    esp,0xc
c0015225:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015229:	e8 ea 88 ff ff       	call   c000db18 <KeNewProcessEnv(Process*)>
c001522e:	83 c4 10             	add    esp,0x10
c0015231:	89 c2                	mov    edx,eax
c0015233:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015237:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001523d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015241:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001524a:	a1 5c 4d 02 c0       	mov    eax,ds:0xc0024d5c
c001524f:	8d 50 01             	lea    edx,[eax+0x1]
c0015252:	89 15 5c 4d 02 c0    	mov    DWORD PTR ds:0xc0024d5c,edx
c0015258:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001525c:	89 02                	mov    DWORD PTR [edx],eax
c001525e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015266:	83 ec 0c             	sub    esp,0xc
c0015269:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001526d:	e8 3e 96 ff ff       	call   c000e8b0 <malloc>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	89 c3                	mov    ebx,eax
c0015277:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001527c:	83 ec 08             	sub    esp,0x8
c001527f:	50                   	push   eax
c0015280:	53                   	push   ebx
c0015281:	e8 8a d7 ff ff       	call   c0012a10 <VAS::VAS(bool)>
c0015286:	83 c4 10             	add    esp,0x10
c0015289:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001528d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015297:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00152a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152a5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152a9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00152af:	e8 fb a9 ff ff       	call   c000fcaf <KeInitSignals()>
c00152b4:	89 c2                	mov    edx,eax
c00152b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152ba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00152c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00152ca:	85 c0                	test   eax,eax
c00152cc:	74 42                	je     c0015310 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00152ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152d2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00152d8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00152de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152e2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00152e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00152f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00152f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152fc:	05 0c 01 00 00       	add    eax,0x10c
c0015301:	83 ec 08             	sub    esp,0x8
c0015304:	52                   	push   edx
c0015305:	50                   	push   eax
c0015306:	e8 45 b3 fe ff       	call   c0000650 <strcpy>
c001530b:	83 c4 10             	add    esp,0x10
c001530e:	eb 64                	jmp    c0015374 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015310:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015318:	83 ec 0c             	sub    esp,0xc
c001531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001531f:	e8 8c 95 ff ff       	call   c000e8b0 <malloc>
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	89 c3                	mov    ebx,eax
c0015329:	83 ec 08             	sub    esp,0x8
c001532c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015330:	53                   	push   ebx
c0015331:	e8 70 c2 ff ff       	call   c00115a6 <VgaText::VgaText(char const*)>
c0015336:	83 c4 10             	add    esp,0x10
c0015339:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001533d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015347:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001534d:	83 ec 0c             	sub    esp,0xc
c0015350:	50                   	push   eax
c0015351:	e8 fe ba ff ff       	call   c0010e54 <addToTerminalCycle(VgaText*)>
c0015356:	83 c4 10             	add    esp,0x10
c0015359:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001535d:	05 0c 01 00 00       	add    eax,0x10c
c0015362:	83 ec 08             	sub    esp,0x8
c0015365:	68 50 34 02 c0       	push   0xc0023450
c001536a:	50                   	push   eax
c001536b:	e8 e0 b2 fe ff       	call   c0000650 <strcpy>
c0015370:	83 c4 10             	add    esp,0x10
c0015373:	90                   	nop
c0015374:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015378:	83 c0 0c             	add    eax,0xc
c001537b:	83 ec 08             	sub    esp,0x8
c001537e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015382:	50                   	push   eax
c0015383:	e8 c8 b2 fe ff       	call   c0000650 <strcpy>
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	83 ec 08             	sub    esp,0x8
c001538e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015392:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015396:	e8 c1 fb ff ff       	call   c0014f5c <Process::addArgs(char**)>
c001539b:	83 c4 10             	add    esp,0x10
c001539e:	90                   	nop
c001539f:	83 c4 24             	add    esp,0x24
c00153a2:	5b                   	pop    ebx
c00153a3:	5e                   	pop    esi
c00153a4:	c3                   	ret    
c00153a5:	8d 76 00             	lea    esi,[esi+0x0]

c00153a8 <taskStartupFunction>:
c00153a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ad:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00153b0:	c3                   	ret    
c00153b1:	8d 76 00             	lea    esi,[esi+0x0]

c00153b4 <KeDisablePreemption()>:
c00153b4:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00153b9:	85 c0                	test   eax,eax
c00153bb:	75 13                	jne    c00153d0 <KeDisablePreemption()+0x1c>
c00153bd:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c00153c3:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c00153ca:	88 15 88 d6 02 c0    	mov    BYTE PTR ds:0xc002d688,dl
c00153d0:	83 c0 01             	add    eax,0x1
c00153d3:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00153d8:	c3                   	ret    
c00153d9:	8d 76 00             	lea    esi,[esi+0x0]

c00153dc <KeRestorePreemption()>:
c00153dc:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00153e1:	83 e8 01             	sub    eax,0x1
c00153e4:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00153e9:	75 0d                	jne    c00153f8 <KeRestorePreemption()+0x1c>
c00153eb:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c00153f0:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c00153f5:	8d 76 00             	lea    esi,[esi+0x0]
c00153f8:	c3                   	ret    
c00153f9:	90                   	nop
c00153fa:	66 90                	xchg   ax,ax

c00153fc <Process::createThread(void (*)(void*), void*, int)>:
c00153fc:	57                   	push   edi
c00153fd:	31 c9                	xor    ecx,ecx
c00153ff:	56                   	push   esi
c0015400:	53                   	push   ebx
c0015401:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015405:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001540c:	89 f2                	mov    edx,esi
c001540e:	66 90                	xchg   ax,ax
c0015410:	0f b7 c2             	movzx  eax,dx
c0015413:	80 e2 01             	and    dl,0x1
c0015416:	74 14                	je     c001542c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015418:	d1 f8                	sar    eax,1
c001541a:	83 c1 01             	add    ecx,0x1
c001541d:	83 f9 10             	cmp    ecx,0x10
c0015420:	89 c2                	mov    edx,eax
c0015422:	75 ec                	jne    c0015410 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015424:	31 db                	xor    ebx,ebx
c0015426:	89 d8                	mov    eax,ebx
c0015428:	5b                   	pop    ebx
c0015429:	5e                   	pop    esi
c001542a:	5f                   	pop    edi
c001542b:	c3                   	ret    
c001542c:	b8 01 00 00 00       	mov    eax,0x1
c0015431:	d3 e0                	shl    eax,cl
c0015433:	09 c6                	or     esi,eax
c0015435:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001543c:	8d 04 49             	lea    eax,[ecx+ecx*2]
c001543f:	c1 e0 05             	shl    eax,0x5
c0015442:	29 c8                	sub    eax,ecx
c0015444:	01 d8                	add    eax,ebx
c0015446:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001544d:	75 0d                	jne    c001545c <Process::createThread(void (*)(void*), void*, int)+0x60>
c001544f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015459:	8d 76 00             	lea    esi,[esi+0x0]
c001545c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015462:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015465:	83 ec 0c             	sub    esp,0xc
c0015468:	c1 e6 05             	shl    esi,0x5
c001546b:	29 ce                	sub    esi,ecx
c001546d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015470:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015473:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015479:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c001547f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015485:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c001548c:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015492:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015496:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001549c:	89 ca                	mov    edx,ecx
c001549e:	f7 da                	neg    edx
c00154a0:	c1 e2 15             	shl    edx,0x15
c00154a3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00154a9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00154af:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00154b3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00154bd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00154c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154c7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00154cd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00154d7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00154e1:	68 00 01 00 00       	push   0x100
c00154e6:	e8 c5 93 ff ff       	call   c000e8b0 <malloc>
c00154eb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00154ee:	58                   	pop    eax
c00154ef:	5a                   	pop    edx
c00154f0:	53                   	push   ebx
c00154f1:	68 cc d6 02 c0       	push   0xc002d6cc
c00154f6:	e8 51 af 00 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	89 d8                	mov    eax,ebx
c0015500:	5b                   	pop    ebx
c0015501:	5e                   	pop    esi
c0015502:	5f                   	pop    edi
c0015503:	c3                   	ret    

c0015504 <Process::createUserThread()>:
c0015504:	83 ec 0c             	sub    esp,0xc
c0015507:	68 80 00 00 00       	push   0x80
c001550c:	6a 00                	push   0x0
c001550e:	68 50 4e 01 c0       	push   0xc0014e50
c0015513:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015517:	50                   	push   eax
c0015518:	e8 df fe ff ff       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c001551d:	83 c4 1c             	add    esp,0x1c
c0015520:	c3                   	ret    
c0015521:	8d 76 00             	lea    esi,[esi+0x0]

c0015524 <setupMultitasking(void (*)())>:
c0015524:	56                   	push   esi
c0015525:	53                   	push   ebx
c0015526:	83 ec 04             	sub    esp,0x4
c0015529:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001552d:	eb 11                	jmp    c0015540 <setupMultitasking(void (*)())+0x1c>
c001552f:	90                   	nop
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	68 cc d6 02 c0       	push   0xc002d6cc
c0015538:	e8 53 ae 00 00       	call   c0020390 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	68 cc d6 02 c0       	push   0xc002d6cc
c0015548:	e8 1f ae 00 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	84 c0                	test   al,al
c0015552:	74 dc                	je     c0015530 <setupMultitasking(void (*)())+0xc>
c0015554:	83 ec 0c             	sub    esp,0xc
c0015557:	68 24 07 00 00       	push   0x724
c001555c:	e8 4f 93 ff ff       	call   c000e8b0 <malloc>
c0015561:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015568:	6a 00                	push   0x0
c001556a:	68 54 34 02 c0       	push   0xc0023454
c001556f:	6a 01                	push   0x1
c0015571:	50                   	push   eax
c0015572:	89 c3                	mov    ebx,eax
c0015574:	e8 5b fc ff ff       	call   c00151d4 <Process::Process(bool, char const*, Process*, char**)>
c0015579:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001557f:	83 c4 14             	add    esp,0x14
c0015582:	89 1d d8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d8,ebx
c0015588:	50                   	push   eax
c0015589:	e8 1b bb ff ff       	call   c00110a9 <setActiveTerminal(VgaText*)>
c001558e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015595:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001559f:	83 c8 01             	or     eax,0x1
c00155a2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00155a9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00155af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155b2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00155bc:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00155c2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00155cc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00155d2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00155dc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00155e6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00155ec:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00155f2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00155fc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015606:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001560d:	e8 9e 92 ff ff       	call   c000e8b0 <malloc>
c0015612:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015618:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001561e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015624:	5a                   	pop    edx
c0015625:	59                   	pop    ecx
c0015626:	68 50 34 02 c0       	push   0xc0023450
c001562b:	50                   	push   eax
c001562c:	e8 1f b0 fe ff       	call   c0000650 <strcpy>
c0015631:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015638:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001563c:	83 c4 14             	add    esp,0x14
c001563f:	5b                   	pop    ebx
c0015640:	5e                   	pop    esi
c0015641:	e9 23 ac fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015646:	66 90                	xchg   ax,ax

c0015648 <schedule()>:
c0015648:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c001564e:	85 d2                	test   edx,edx
c0015650:	74 0e                	je     c0015660 <schedule()+0x18>
c0015652:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c001565c:	c3                   	ret    
c001565d:	8d 76 00             	lea    esi,[esi+0x0]
c0015660:	53                   	push   ebx
c0015661:	83 ec 14             	sub    esp,0x14
c0015664:	68 cc d6 02 c0       	push   0xc002d6cc
c0015669:	e8 fe ac 00 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	84 c0                	test   al,al
c0015673:	75 3f                	jne    c00156b4 <schedule()+0x6c>
c0015675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001567a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001567d:	83 fa 01             	cmp    edx,0x1
c0015680:	74 3a                	je     c00156bc <schedule()+0x74>
c0015682:	66 90                	xchg   ax,ax
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	68 cc d6 02 c0       	push   0xc002d6cc
c001568c:	e8 f7 ac 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015691:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015698:	89 c3                	mov    ebx,eax
c001569a:	e8 f1 ac 00 00       	call   c0020390 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001569f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00156a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156a9:	e8 fe f7 ff ff       	call   c0014eac <switchToThread(ThreadControlBlock*)>
c00156ae:	83 c4 10             	add    esp,0x10
c00156b1:	8d 76 00             	lea    esi,[esi+0x0]
c00156b4:	83 c4 08             	add    esp,0x8
c00156b7:	5b                   	pop    ebx
c00156b8:	c3                   	ret    
c00156b9:	8d 76 00             	lea    esi,[esi+0x0]
c00156bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00156c3:	83 ec 08             	sub    esp,0x8
c00156c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156cb:	50                   	push   eax
c00156cc:	68 cc d6 02 c0       	push   0xc002d6cc
c00156d1:	e8 76 ad 00 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	eb a9                	jmp    c0015684 <schedule()+0x3c>
c00156db:	90                   	nop

c00156dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00156dc:	83 ec 0c             	sub    esp,0xc
c00156df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156eb:	e8 58 ff ff ff       	call   c0015648 <schedule()>
c00156f0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00156f8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00156fd:	85 c0                	test   eax,eax
c00156ff:	75 03                	jne    c0015704 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0015701:	fb                   	sti    
c0015702:	66 90                	xchg   ax,ax
c0015704:	83 c4 0c             	add    esp,0xc
c0015707:	c3                   	ret    

c0015708 <blockTask(TaskState)>:
c0015708:	53                   	push   ebx
c0015709:	83 ec 10             	sub    esp,0x10
c001570c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015710:	fa                   	cli    
c0015711:	53                   	push   ebx
c0015712:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015717:	68 5b 34 02 c0       	push   0xc002345b
c001571c:	83 c0 01             	add    eax,0x1
c001571f:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015724:	e8 25 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015729:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001572e:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0015731:	e8 12 ff ff ff       	call   c0015648 <schedule()>
c0015736:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001573e:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015744:	83 c4 10             	add    esp,0x10
c0015747:	85 d2                	test   edx,edx
c0015749:	75 01                	jne    c001574c <blockTask(TaskState)+0x44>
c001574b:	fb                   	sti    
c001574c:	83 c4 08             	add    esp,0x8
c001574f:	5b                   	pop    ebx
c0015750:	c3                   	ret    
c0015751:	8d 76 00             	lea    esi,[esi+0x0]

c0015754 <waitTask(int, int*, int)>:
c0015754:	83 ec 18             	sub    esp,0x18
c0015757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001575c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015760:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015763:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001576c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001576f:	6a 07                	push   0x7
c0015771:	e8 92 ff ff ff       	call   c0015708 <blockTask(TaskState)>
c0015776:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001577b:	83 c4 10             	add    esp,0x10
c001577e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015781:	85 d2                	test   edx,edx
c0015783:	74 0b                	je     c0015790 <waitTask(int, int*, int)+0x3c>
c0015785:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015788:	89 02                	mov    DWORD PTR [edx],eax
c001578a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001578f:	90                   	nop
c0015790:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015793:	83 c4 0c             	add    esp,0xc
c0015796:	c3                   	ret    
c0015797:	90                   	nop

c0015798 <milliTenthSleepUntil(unsigned int)>:
c0015798:	83 ec 0c             	sub    esp,0xc
c001579b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579f:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c00157a5:	76 05                	jbe    c00157ac <milliTenthSleepUntil(unsigned int)+0x14>
c00157a7:	90                   	nop
c00157a8:	83 c4 0c             	add    esp,0xc
c00157ab:	c3                   	ret    
c00157ac:	fa                   	cli    
c00157ad:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00157b3:	83 ec 08             	sub    esp,0x8
c00157b6:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c00157bc:	83 c1 01             	add    ecx,0x1
c00157bf:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c00157c5:	83 c2 01             	add    edx,0x1
c00157c8:	89 15 ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,edx
c00157ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00157d4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00157d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157dd:	51                   	push   ecx
c00157de:	68 c0 d6 02 c0       	push   0xc002d6c0
c00157e3:	e8 64 ac 00 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157e8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00157ef:	e8 14 ff ff ff       	call   c0015708 <blockTask(TaskState)>
c00157f4:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00157f9:	83 c4 10             	add    esp,0x10
c00157fc:	83 e8 01             	sub    eax,0x1
c00157ff:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015804:	85 c0                	test   eax,eax
c0015806:	75 0c                	jne    c0015814 <milliTenthSleepUntil(unsigned int)+0x7c>
c0015808:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c001580e:	85 d2                	test   edx,edx
c0015810:	75 1a                	jne    c001582c <milliTenthSleepUntil(unsigned int)+0x94>
c0015812:	66 90                	xchg   ax,ax
c0015814:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001581c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015821:	85 c0                	test   eax,eax
c0015823:	75 83                	jne    c00157a8 <milliTenthSleepUntil(unsigned int)+0x10>
c0015825:	fb                   	sti    
c0015826:	83 c4 0c             	add    esp,0xc
c0015829:	c3                   	ret    
c001582a:	66 90                	xchg   ax,ax
c001582c:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015836:	e8 0d fe ff ff       	call   c0015648 <schedule()>
c001583b:	eb d7                	jmp    c0015814 <milliTenthSleepUntil(unsigned int)+0x7c>
c001583d:	8d 76 00             	lea    esi,[esi+0x0]

c0015840 <milliTenthSleep(unsigned int)>:
c0015840:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015844:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c0015849:	01 c2                	add    edx,eax
c001584b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001584f:	e9 44 ff ff ff       	jmp    c0015798 <milliTenthSleepUntil(unsigned int)>

c0015854 <sleep(unsigned int)>:
c0015854:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c001585c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015860:	eb de                	jmp    c0015840 <milliTenthSleep(unsigned int)>
c0015862:	66 90                	xchg   ax,ax

c0015864 <taskReturned>:
c0015864:	83 ec 18             	sub    esp,0x18
c0015867:	68 f8 34 02 c0       	push   0xc00234f8
c001586c:	e8 85 93 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0015871:	83 c4 10             	add    esp,0x10
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	6a 02                	push   0x2
c0015879:	e8 8a fe ff ff       	call   c0015708 <blockTask(TaskState)>
c001587e:	fa                   	cli    
c001587f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015884:	83 c0 01             	add    eax,0x1
c0015887:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c001588c:	e8 b7 fd ff ff       	call   c0015648 <schedule()>
c0015891:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015899:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c001589f:	83 c4 10             	add    esp,0x10
c00158a2:	85 d2                	test   edx,edx
c00158a4:	75 ce                	jne    c0015874 <taskReturned+0x10>
c00158a6:	fb                   	sti    
c00158a7:	eb cb                	jmp    c0015874 <taskReturned+0x10>
c00158a9:	8d 76 00             	lea    esi,[esi+0x0]

c00158ac <Thr::processFromPID(int)>:
c00158ac:	57                   	push   edi
c00158ad:	56                   	push   esi
c00158ae:	53                   	push   ebx
c00158af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158b3:	fa                   	cli    
c00158b4:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	68 cc d6 02 c0       	push   0xc002d6cc
c00158c2:	83 c1 01             	add    ecx,0x1
c00158c5:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c00158cb:	e8 b8 aa 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	89 c7                	mov    edi,eax
c00158d5:	eb 15                	jmp    c00158ec <Thr::processFromPID(int)+0x40>
c00158d7:	90                   	nop
c00158d8:	83 ec 0c             	sub    esp,0xc
c00158db:	68 cc d6 02 c0       	push   0xc002d6cc
c00158e0:	e8 a3 aa 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158e5:	83 c4 10             	add    esp,0x10
c00158e8:	39 f8                	cmp    eax,edi
c00158ea:	74 50                	je     c001593c <Thr::processFromPID(int)+0x90>
c00158ec:	83 ec 0c             	sub    esp,0xc
c00158ef:	68 cc d6 02 c0       	push   0xc002d6cc
c00158f4:	e8 8f aa 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158f9:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015900:	89 c3                	mov    ebx,eax
c0015902:	e8 89 aa 00 00       	call   c0020390 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015907:	58                   	pop    eax
c0015908:	5a                   	pop    edx
c0015909:	53                   	push   ebx
c001590a:	68 cc d6 02 c0       	push   0xc002d6cc
c001590f:	e8 38 ab 00 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015914:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	39 30                	cmp    DWORD PTR [eax],esi
c001591c:	75 ba                	jne    c00158d8 <Thr::processFromPID(int)+0x2c>
c001591e:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015926:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c001592c:	85 c9                	test   ecx,ecx
c001592e:	74 08                	je     c0015938 <Thr::processFromPID(int)+0x8c>
c0015930:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015933:	90                   	nop
c0015934:	5b                   	pop    ebx
c0015935:	5e                   	pop    esi
c0015936:	5f                   	pop    edi
c0015937:	c3                   	ret    
c0015938:	fb                   	sti    
c0015939:	eb f5                	jmp    c0015930 <Thr::processFromPID(int)+0x84>
c001593b:	90                   	nop
c001593c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015944:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c001594a:	31 c0                	xor    eax,eax
c001594c:	85 d2                	test   edx,edx
c001594e:	75 e4                	jne    c0015934 <Thr::processFromPID(int)+0x88>
c0015950:	fb                   	sti    
c0015951:	5b                   	pop    ebx
c0015952:	5e                   	pop    esi
c0015953:	5f                   	pop    edi
c0015954:	c3                   	ret    
c0015955:	8d 76 00             	lea    esi,[esi+0x0]

c0015958 <unblockTask(ThreadControlBlock*)>:
c0015958:	53                   	push   ebx
c0015959:	83 ec 08             	sub    esp,0x8
c001595c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015960:	fa                   	cli    
c0015961:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015967:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001596a:	83 c2 01             	add    edx,0x1
c001596d:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c0015973:	85 c0                	test   eax,eax
c0015975:	74 6d                	je     c00159e4 <unblockTask(ThreadControlBlock*)+0x8c>
c0015977:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001597a:	83 f8 01             	cmp    eax,0x1
c001597d:	74 39                	je     c00159b8 <unblockTask(ThreadControlBlock*)+0x60>
c001597f:	83 ec 0c             	sub    esp,0xc
c0015982:	68 cc d6 02 c0       	push   0xc002d6cc
c0015987:	e8 fc a9 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	85 c0                	test   eax,eax
c0015991:	75 1d                	jne    c00159b0 <unblockTask(ThreadControlBlock*)+0x58>
c0015993:	eb 63                	jmp    c00159f8 <unblockTask(ThreadControlBlock*)+0xa0>
c0015995:	8d 76 00             	lea    esi,[esi+0x0]
c0015998:	83 ec 08             	sub    esp,0x8
c001599b:	50                   	push   eax
c001599c:	68 cc d6 02 c0       	push   0xc002d6cc
c00159a1:	e8 ee ae 00 00       	call   c0020894 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	85 c0                	test   eax,eax
c00159ab:	74 4b                	je     c00159f8 <unblockTask(ThreadControlBlock*)+0xa0>
c00159ad:	8d 76 00             	lea    esi,[esi+0x0]
c00159b0:	39 c3                	cmp    ebx,eax
c00159b2:	75 e4                	jne    c0015998 <unblockTask(ThreadControlBlock*)+0x40>
c00159b4:	eb 12                	jmp    c00159c8 <unblockTask(ThreadControlBlock*)+0x70>
c00159b6:	66 90                	xchg   ax,ax
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	68 84 34 02 c0       	push   0xc0023484
c00159c0:	e8 89 15 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00159c5:	83 c4 10             	add    esp,0x10
c00159c8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00159d0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00159d5:	85 c0                	test   eax,eax
c00159d7:	75 03                	jne    c00159dc <unblockTask(ThreadControlBlock*)+0x84>
c00159d9:	fb                   	sti    
c00159da:	66 90                	xchg   ax,ax
c00159dc:	83 c4 08             	add    esp,0x8
c00159df:	5b                   	pop    ebx
c00159e0:	c3                   	ret    
c00159e1:	8d 76 00             	lea    esi,[esi+0x0]
c00159e4:	83 ec 0c             	sub    esp,0xc
c00159e7:	68 6d 34 02 c0       	push   0xc002346d
c00159ec:	e8 5d 15 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00159f1:	83 c4 10             	add    esp,0x10
c00159f4:	eb d2                	jmp    c00159c8 <unblockTask(ThreadControlBlock*)+0x70>
c00159f6:	66 90                	xchg   ax,ax
c00159f8:	83 ec 08             	sub    esp,0x8
c00159fb:	53                   	push   ebx
c00159fc:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a01:	e8 46 aa 00 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a06:	83 c4 10             	add    esp,0x10
c0015a09:	eb bd                	jmp    c00159c8 <unblockTask(ThreadControlBlock*)+0x70>
c0015a0b:	90                   	nop

c0015a0c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015a0c:	55                   	push   ebp
c0015a0d:	57                   	push   edi
c0015a0e:	56                   	push   esi
c0015a0f:	53                   	push   ebx
c0015a10:	83 ec 1c             	sub    esp,0x1c
c0015a13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015a17:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a1a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015a20:	85 ed                	test   ebp,ebp
c0015a22:	7e 28                	jle    c0015a4c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015a24:	31 f6                	xor    esi,esi
c0015a26:	66 90                	xchg   ax,ax
c0015a28:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015a2f:	83 ec 0c             	sub    esp,0xc
c0015a32:	83 c6 01             	add    esi,0x1
c0015a35:	57                   	push   edi
c0015a36:	e8 85 8e ff ff       	call   c000e8c0 <free>
c0015a3b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015a47:	7f df                	jg     c0015a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015a49:	8d 76 00             	lea    esi,[esi+0x0]
c0015a4c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a56:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015a5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015a5e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015a61:	d3 c0                	rol    eax,cl
c0015a63:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015a6a:	21 c8                	and    eax,ecx
c0015a6c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015a73:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a76:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015a7e:	89 f7                	mov    edi,esi
c0015a80:	0f 85 72 01 00 00    	jne    c0015bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a86:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015a8c:	85 ed                	test   ebp,ebp
c0015a8e:	74 1c                	je     c0015aac <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015a90:	83 ec 0c             	sub    esp,0xc
c0015a93:	55                   	push   ebp
c0015a94:	e8 9b 7f ff ff       	call   c000da34 <EnvVarContainer::~EnvVarContainer()>
c0015a99:	59                   	pop    ecx
c0015a9a:	5e                   	pop    esi
c0015a9b:	6a 0c                	push   0xc
c0015a9d:	55                   	push   ebp
c0015a9e:	e8 78 6b ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0015aa3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	89 f7                	mov    edi,esi
c0015aab:	90                   	nop
c0015aac:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015ab2:	85 c0                	test   eax,eax
c0015ab4:	0f 84 b2 00 00 00    	je     c0015b6c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015aba:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015abd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015ac1:	31 c9                	xor    ecx,ecx
c0015ac3:	eb 17                	jmp    c0015adc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ac8:	83 c1 01             	add    ecx,0x1
c0015acb:	83 f9 10             	cmp    ecx,0x10
c0015ace:	0f 84 98 00 00 00    	je     c0015b6c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015ad4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015ada:	66 90                	xchg   ax,ax
c0015adc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015ae3:	d3 fa                	sar    edx,cl
c0015ae5:	80 e2 01             	and    dl,0x1
c0015ae8:	74 de                	je     c0015ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015aea:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015aed:	c1 e2 05             	shl    edx,0x5
c0015af0:	29 ca                	sub    edx,ecx
c0015af2:	01 d0                	add    eax,edx
c0015af4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015afa:	83 fd 07             	cmp    ebp,0x7
c0015afd:	75 c9                	jne    c0015ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015aff:	05 40 02 00 00       	add    eax,0x240
c0015b04:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015b07:	83 fd ff             	cmp    ebp,0xffffffff
c0015b0a:	0f 8c f0 00 00 00    	jl     c0015c00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015b10:	0f 84 ae 01 00 00    	je     c0015cc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015b16:	85 ed                	test   ebp,ebp
c0015b18:	0f 84 92 01 00 00    	je     c0015cb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015b1e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015b20:	75 a6                	jne    c0015ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b22:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b26:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015b2c:	01 d0                	add    eax,edx
c0015b2e:	66 90                	xchg   ax,ax
c0015b30:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015b34:	83 ec 0c             	sub    esp,0xc
c0015b37:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015b3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b46:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015b4d:	50                   	push   eax
c0015b4e:	e8 05 fe ff ff       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b59:	89 f7                	mov    edi,esi
c0015b5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b5f:	83 c1 01             	add    ecx,0x1
c0015b62:	83 f9 10             	cmp    ecx,0x10
c0015b65:	0f 85 69 ff ff ff    	jne    c0015ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015b6b:	90                   	nop
c0015b6c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015b72:	85 c0                	test   eax,eax
c0015b74:	74 62                	je     c0015bd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015b76:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015b7c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015b82:	74 54                	je     c0015bd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015b84:	83 ec 0c             	sub    esp,0xc
c0015b87:	68 cc d6 02 c0       	push   0xc002d6cc
c0015b8c:	e8 f7 a7 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b91:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015b98:	89 c7                	mov    edi,eax
c0015b9a:	e8 cd a7 00 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b9f:	83 c4 10             	add    esp,0x10
c0015ba2:	84 c0                	test   al,al
c0015ba4:	0f 84 ce 00 00 00    	je     c0015c78 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015baa:	66 90                	xchg   ax,ax
c0015bac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015baf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bb5:	85 d2                	test   edx,edx
c0015bb7:	74 0f                	je     c0015bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015bb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0015bbb:	83 ec 0c             	sub    esp,0xc
c0015bbe:	52                   	push   edx
c0015bbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bc5:	83 c4 10             	add    esp,0x10
c0015bc8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015bd2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015bde:	85 db                	test   ebx,ebx
c0015be0:	74 16                	je     c0015bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015be2:	83 ec 0c             	sub    esp,0xc
c0015be5:	53                   	push   ebx
c0015be6:	e8 79 c9 ff ff       	call   c0012564 <VAS::~VAS()>
c0015beb:	58                   	pop    eax
c0015bec:	5a                   	pop    edx
c0015bed:	6a 14                	push   0x14
c0015bef:	53                   	push   ebx
c0015bf0:	e8 26 6a ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0015bf5:	83 c4 10             	add    esp,0x10
c0015bf8:	83 c4 1c             	add    esp,0x1c
c0015bfb:	5b                   	pop    ebx
c0015bfc:	5e                   	pop    esi
c0015bfd:	5f                   	pop    edi
c0015bfe:	5d                   	pop    ebp
c0015bff:	c3                   	ret    
c0015c00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c04:	83 ec 0c             	sub    esp,0xc
c0015c07:	68 2c 35 02 c0       	push   0xc002352c
c0015c0c:	e8 e5 8f ff ff       	call   c000ebf6 <KePanic(char const*)>
c0015c11:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	89 f7                	mov    edi,esi
c0015c19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c1d:	e9 a6 fe ff ff       	jmp    c0015ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015c22:	66 90                	xchg   ax,ax
c0015c24:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c2a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015c30:	75 1e                	jne    c0015c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015c32:	83 ec 0c             	sub    esp,0xc
c0015c35:	68 94 35 02 c0       	push   0xc0023594
c0015c3a:	e8 0f 13 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015c3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015c46:	e8 bd fa ff ff       	call   c0015708 <blockTask(TaskState)>
c0015c4b:	83 c4 10             	add    esp,0x10
c0015c4e:	66 90                	xchg   ax,ax
c0015c50:	83 ec 08             	sub    esp,0x8
c0015c53:	56                   	push   esi
c0015c54:	68 cc d6 02 c0       	push   0xc002d6cc
c0015c59:	e8 ee a7 00 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c5e:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015c65:	e8 1e a7 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	39 f8                	cmp    eax,edi
c0015c6f:	0f 84 37 ff ff ff    	je     c0015bac <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015c75:	8d 76 00             	lea    esi,[esi+0x0]
c0015c78:	83 ec 0c             	sub    esp,0xc
c0015c7b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015c80:	e8 03 a7 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c85:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015c8c:	89 c6                	mov    esi,eax
c0015c8e:	e8 fd a6 00 00       	call   c0020390 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c93:	83 c4 10             	add    esp,0x10
c0015c96:	39 f3                	cmp    ebx,esi
c0015c98:	74 b6                	je     c0015c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015c9a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015c9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ca0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015ca6:	75 a8                	jne    c0015c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015ca8:	e9 77 ff ff ff       	jmp    c0015c24 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015cad:	8d 76 00             	lea    esi,[esi+0x0]
c0015cb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015cb4:	83 ec 0c             	sub    esp,0xc
c0015cb7:	68 60 35 02 c0       	push   0xc0023560
c0015cbc:	e9 4b ff ff ff       	jmp    c0015c0c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cc4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015cc8:	8b 36                	mov    esi,DWORD PTR [esi]
c0015cca:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015ccd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cd0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015cd6:	01 d7                	add    edi,edx
c0015cd8:	89 f8                	mov    eax,edi
c0015cda:	e9 51 fe ff ff       	jmp    c0015b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015cdf:	90                   	nop

c0015ce0 <cleanerTaskFunction(void*)>:
c0015ce0:	53                   	push   ebx
c0015ce1:	83 ec 08             	sub    esp,0x8
c0015ce4:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015cec:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015cf1:	85 c0                	test   eax,eax
c0015cf3:	75 03                	jne    c0015cf8 <cleanerTaskFunction(void*)+0x18>
c0015cf5:	fb                   	sti    
c0015cf6:	66 90                	xchg   ax,ax
c0015cf8:	fa                   	cli    
c0015cf9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015cfe:	83 c0 01             	add    eax,0x1
c0015d01:	80 3d 94 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d694,0x0
c0015d08:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015d0d:	0f 85 c9 00 00 00    	jne    c0015ddc <cleanerTaskFunction(void*)+0xfc>
c0015d13:	83 ec 0c             	sub    esp,0xc
c0015d16:	6a 02                	push   0x2
c0015d18:	e8 bf f9 ff ff       	call   c00156dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d1d:	83 c4 10             	add    esp,0x10
c0015d20:	c6 05 94 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d694,0x0
c0015d27:	fa                   	cli    
c0015d28:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015d2e:	8b 1d ac d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6ac
c0015d34:	83 c1 01             	add    ecx,0x1
c0015d37:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015d3d:	83 c3 01             	add    ebx,0x1
c0015d40:	89 1d ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,ebx
c0015d46:	fa                   	cli    
c0015d47:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015d4c:	83 c0 01             	add    eax,0x1
c0015d4f:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015d54:	eb 2a                	jmp    c0015d80 <cleanerTaskFunction(void*)+0xa0>
c0015d56:	66 90                	xchg   ax,ax
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015d60:	e8 23 a6 00 00       	call   c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d65:	c7 04 24 b4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6b4
c0015d6c:	89 c3                	mov    ebx,eax
c0015d6e:	e8 1d a6 00 00       	call   c0020390 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d76:	e8 91 fc ff ff       	call   c0015a0c <cleanupTerminatedTask(ThreadControlBlock*)>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	66 90                	xchg   ax,ax
c0015d80:	83 ec 0c             	sub    esp,0xc
c0015d83:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015d88:	e8 df a5 00 00       	call   c002036c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	84 c0                	test   al,al
c0015d92:	74 c4                	je     c0015d58 <cleanerTaskFunction(void*)+0x78>
c0015d94:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015d9c:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015da2:	85 d2                	test   edx,edx
c0015da4:	75 02                	jne    c0015da8 <cleanerTaskFunction(void*)+0xc8>
c0015da6:	fb                   	sti    
c0015da7:	90                   	nop
c0015da8:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015dad:	83 e8 01             	sub    eax,0x1
c0015db0:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015db5:	0f 85 29 ff ff ff    	jne    c0015ce4 <cleanerTaskFunction(void*)+0x4>
c0015dbb:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0015dc0:	85 c0                	test   eax,eax
c0015dc2:	0f 84 1c ff ff ff    	je     c0015ce4 <cleanerTaskFunction(void*)+0x4>
c0015dc8:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015dd2:	e8 71 f8 ff ff       	call   c0015648 <schedule()>
c0015dd7:	e9 08 ff ff ff       	jmp    c0015ce4 <cleanerTaskFunction(void*)+0x4>
c0015ddc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015de4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015de9:	85 c0                	test   eax,eax
c0015deb:	0f 85 2f ff ff ff    	jne    c0015d20 <cleanerTaskFunction(void*)+0x40>
c0015df1:	fb                   	sti    
c0015df2:	e9 29 ff ff ff       	jmp    c0015d20 <cleanerTaskFunction(void*)+0x40>
c0015df7:	90                   	nop

c0015df8 <terminateTask(int)>:
c0015df8:	83 ec 18             	sub    esp,0x18
c0015dfb:	68 9b 34 02 c0       	push   0xc002349b
c0015e00:	e8 49 11 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015e05:	fa                   	cli    
c0015e06:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015e0b:	83 c0 01             	add    eax,0x1
c0015e0e:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015e13:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015e18:	83 c0 01             	add    eax,0x1
c0015e1b:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015e20:	fa                   	cli    
c0015e21:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015e26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e2a:	83 c0 01             	add    eax,0x1
c0015e2d:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015e32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e37:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015e3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e3f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015e42:	5a                   	pop    edx
c0015e43:	59                   	pop    ecx
c0015e44:	50                   	push   eax
c0015e45:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015e4a:	e8 fd a5 00 00       	call   c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e54:	83 c4 10             	add    esp,0x10
c0015e57:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015e5e:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0015e63:	85 c0                	test   eax,eax
c0015e65:	0f 84 81 00 00 00    	je     c0015eec <terminateTask(int)+0xf4>
c0015e6b:	c6 05 94 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d694,0x1
c0015e72:	83 ec 0c             	sub    esp,0xc
c0015e75:	50                   	push   eax
c0015e76:	e8 dd fa ff ff       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c0015e7b:	83 c4 10             	add    esp,0x10
c0015e7e:	66 90                	xchg   ax,ax
c0015e80:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015e88:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015e8d:	85 c0                	test   eax,eax
c0015e8f:	75 03                	jne    c0015e94 <terminateTask(int)+0x9c>
c0015e91:	fb                   	sti    
c0015e92:	66 90                	xchg   ax,ax
c0015e94:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015e99:	83 e8 01             	sub    eax,0x1
c0015e9c:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015ea1:	75 09                	jne    c0015eac <terminateTask(int)+0xb4>
c0015ea3:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c0015eaa:	75 54                	jne    c0015f00 <terminateTask(int)+0x108>
c0015eac:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015eb4:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015eba:	85 c9                	test   ecx,ecx
c0015ebc:	75 06                	jne    c0015ec4 <terminateTask(int)+0xcc>
c0015ebe:	66 90                	xchg   ax,ax
c0015ec0:	fb                   	sti    
c0015ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ec4:	fa                   	cli    
c0015ec5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015eca:	83 c0 01             	add    eax,0x1
c0015ecd:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015ed2:	e8 71 f7 ff ff       	call   c0015648 <schedule()>
c0015ed7:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015edf:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015ee5:	85 d2                	test   edx,edx
c0015ee7:	75 db                	jne    c0015ec4 <terminateTask(int)+0xcc>
c0015ee9:	eb d5                	jmp    c0015ec0 <terminateTask(int)+0xc8>
c0015eeb:	90                   	nop
c0015eec:	83 ec 0c             	sub    esp,0xc
c0015eef:	68 ae 34 02 c0       	push   0xc00234ae
c0015ef4:	e8 55 10 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015ef9:	83 c4 10             	add    esp,0x10
c0015efc:	eb 82                	jmp    c0015e80 <terminateTask(int)+0x88>
c0015efe:	66 90                	xchg   ax,ax
c0015f00:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015f0a:	e8 39 f7 ff ff       	call   c0015648 <schedule()>
c0015f0f:	eb 9b                	jmp    c0015eac <terminateTask(int)+0xb4>
c0015f11:	8d 76 00             	lea    esi,[esi+0x0]

c0015f14 <Thr::terminateFromIRQ(int)>:
c0015f14:	83 ec 18             	sub    esp,0x18
c0015f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f1b:	50                   	push   eax
c0015f1c:	e8 d7 fe ff ff       	call   c0015df8 <terminateTask(int)>
c0015f21:	8d 76 00             	lea    esi,[esi+0x0]

c0015f24 <__static_initialization_and_destruction_0(int, int)>:
c0015f24:	83 ec 0c             	sub    esp,0xc
c0015f27:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015f2c:	0f 85 8e 00 00 00    	jne    c0015fc0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f32:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015f3a:	0f 85 80 00 00 00    	jne    c0015fc0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f40:	83 ec 0c             	sub    esp,0xc
c0015f43:	68 cc d6 02 c0       	push   0xc002d6cc
c0015f48:	e8 9f a9 00 00       	call   c00208ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	83 ec 04             	sub    esp,0x4
c0015f53:	68 b0 45 02 c0       	push   0xc00245b0
c0015f58:	68 cc d6 02 c0       	push   0xc002d6cc
c0015f5d:	68 9c 08 02 c0       	push   0xc002089c
c0015f62:	e8 64 66 ff ff       	call   c000c5cb <__cxa_atexit>
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	83 ec 0c             	sub    esp,0xc
c0015f6d:	68 c0 d6 02 c0       	push   0xc002d6c0
c0015f72:	e8 75 a9 00 00       	call   c00208ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f77:	83 c4 10             	add    esp,0x10
c0015f7a:	83 ec 04             	sub    esp,0x4
c0015f7d:	68 b0 45 02 c0       	push   0xc00245b0
c0015f82:	68 c0 d6 02 c0       	push   0xc002d6c0
c0015f87:	68 9c 08 02 c0       	push   0xc002089c
c0015f8c:	e8 3a 66 ff ff       	call   c000c5cb <__cxa_atexit>
c0015f91:	83 c4 10             	add    esp,0x10
c0015f94:	83 ec 0c             	sub    esp,0xc
c0015f97:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015f9c:	e8 4b a9 00 00       	call   c00208ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015fa1:	83 c4 10             	add    esp,0x10
c0015fa4:	83 ec 04             	sub    esp,0x4
c0015fa7:	68 b0 45 02 c0       	push   0xc00245b0
c0015fac:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015fb1:	68 9c 08 02 c0       	push   0xc002089c
c0015fb6:	e8 10 66 ff ff       	call   c000c5cb <__cxa_atexit>
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	66 90                	xchg   ax,ax
c0015fc0:	90                   	nop
c0015fc1:	83 c4 0c             	add    esp,0xc
c0015fc4:	c3                   	ret    
c0015fc5:	8d 76 00             	lea    esi,[esi+0x0]

c0015fc8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	83 ec 08             	sub    esp,0x8
c0015fce:	68 ff ff 00 00       	push   0xffff
c0015fd3:	6a 01                	push   0x1
c0015fd5:	e8 4a ff ff ff       	call   c0015f24 <__static_initialization_and_destruction_0(int, int)>
c0015fda:	83 c4 10             	add    esp,0x10
c0015fdd:	83 c4 0c             	add    esp,0xc
c0015fe0:	c3                   	ret    

c0015fe1 <Vm::inbv(unsigned short)>:
c0015fe1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fe5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015fea:	75 06                	jne    c0015ff2 <Vm::inbv(unsigned short)+0x11>
c0015fec:	a0 10 d7 02 c0       	mov    al,ds:0xc002d710
c0015ff1:	c3                   	ret    
c0015ff2:	ec                   	in     al,dx
c0015ff3:	c3                   	ret    

c0015ff4 <Vm::outbv(unsigned short, unsigned char)>:
c0015ff4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ff8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ffc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016001:	75 25                	jne    c0016028 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016003:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0016009:	88 81 20 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28e0],al
c001600f:	8d 51 01             	lea    edx,[ecx+0x1]
c0016012:	89 15 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,edx
c0016018:	83 fa 20             	cmp    edx,0x20
c001601b:	75 0c                	jne    c0016029 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001601d:	c7 05 10 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x1f
c0016027:	c3                   	ret    
c0016028:	ee                   	out    dx,al
c0016029:	c3                   	ret    

c001602a <Vm::realToLinear(unsigned short, unsigned short)>:
c001602a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001602f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016034:	c1 e0 04             	shl    eax,0x4
c0016037:	01 d0                	add    eax,edx
c0016039:	c3                   	ret    

c001603a <Vm::getSegment(unsigned int)>:
c001603a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001603e:	c1 e8 10             	shr    eax,0x10
c0016041:	c3                   	ret    

c0016042 <Vm::getOffset(unsigned int)>:
c0016042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016046:	c3                   	ret    

c0016047 <Vm::mainloop2()>:
c0016047:	83 ec 18             	sub    esp,0x18
c001604a:	fa                   	cli    
c001604b:	6a 02                	push   0x2
c001604d:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016053:	c6 05 09 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d709,0x1
c001605a:	e8 7d f6 ff ff       	call   c00156dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001605f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016064:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016068:	52                   	push   edx
c0016069:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001606d:	52                   	push   edx
c001606e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016072:	52                   	push   edx
c0016073:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016077:	50                   	push   eax
c0016078:	e8 92 a1 fe ff       	call   c000020f <goToVM86>
c001607d:	83 c4 2c             	add    esp,0x2c
c0016080:	c3                   	ret    

c0016081 <Vm::mainVm8086Loop(void*)>:
c0016081:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016088:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001608f:	75 01                	jne    c0016092 <Vm::mainVm8086Loop(void*)+0x11>
c0016091:	fb                   	sti    
c0016092:	eb b3                	jmp    c0016047 <Vm::mainloop2()>

c0016094 <Vm::mainloop3(unsigned long)>:
c0016094:	83 ec 18             	sub    esp,0x18
c0016097:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001609b:	fa                   	cli    
c001609c:	6a 02                	push   0x2
c001609e:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00160a4:	c6 05 08 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d708,0x1
c00160ab:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c00160b0:	e8 27 f6 ff ff       	call   c00156dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00160b5:	83 c4 1c             	add    esp,0x1c
c00160b8:	eb 8d                	jmp    c0016047 <Vm::mainloop2()>

c00160ba <Vm::initialise8086()>:
c00160ba:	83 ec 0c             	sub    esp,0xc
c00160bd:	68 80 00 00 00       	push   0x80
c00160c2:	6a 00                	push   0x0
c00160c4:	68 81 60 01 c0       	push   0xc0016081
c00160c9:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00160cf:	e8 28 f3 ff ff       	call   c00153fc <Process::createThread(void (*)(void*), void*, int)>
c00160d4:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00160db:	68 10 01 00 00       	push   0x110
c00160e0:	6a 00                	push   0x0
c00160e2:	6a 00                	push   0x0
c00160e4:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c00160e9:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00160ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00160f4:	e8 cd c7 ff ff       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00160f9:	83 c4 2c             	add    esp,0x2c
c00160fc:	c3                   	ret    

c00160fd <Vm::resetConventionalMemory8086()>:
c00160fd:	c3                   	ret    

c00160fe <Vm::finish8086()>:
c00160fe:	53                   	push   ebx
c00160ff:	83 ec 08             	sub    esp,0x8
c0016102:	fa                   	cli    
c0016103:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016109:	80 3d 08 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d708,0x0
c0016110:	75 18                	jne    c001612a <Vm::finish8086()+0x2c>
c0016112:	e8 31 f5 ff ff       	call   c0015648 <schedule()>
c0016117:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001611e:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016125:	75 db                	jne    c0016102 <Vm::finish8086()+0x4>
c0016127:	fb                   	sti    
c0016128:	eb d8                	jmp    c0016102 <Vm::finish8086()+0x4>
c001612a:	c6 05 08 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d708,0x0
c0016131:	83 ec 0c             	sub    esp,0xc
c0016134:	8b 1d 04 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d704
c001613a:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016140:	e8 13 f8 ff ff       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c0016145:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001614c:	83 c4 10             	add    esp,0x10
c001614f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016156:	75 01                	jne    c0016159 <Vm::finish8086()+0x5b>
c0016158:	fb                   	sti    
c0016159:	83 c4 08             	add    esp,0x8
c001615c:	89 d8                	mov    eax,ebx
c001615e:	5b                   	pop    ebx
c001615f:	c3                   	ret    

c0016160 <Vm::getOutput8086(unsigned char*)>:
c0016160:	57                   	push   edi
c0016161:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0016167:	56                   	push   esi
c0016168:	be 20 d7 02 c0       	mov    esi,0xc002d720
c001616d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016171:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016173:	5e                   	pop    esi
c0016174:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c0016179:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016183:	5f                   	pop    edi
c0016184:	c3                   	ret    

c0016185 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016185:	55                   	push   ebp
c0016186:	57                   	push   edi
c0016187:	56                   	push   esi
c0016188:	53                   	push   ebx
c0016189:	83 ec 2c             	sub    esp,0x2c
c001618c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016190:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c0016197:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001619b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001619f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161a3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00161a7:	75 5d                	jne    c0016206 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00161a9:	83 ec 0c             	sub    esp,0xc
c00161ac:	68 14 01 00 00       	push   0x114
c00161b1:	e8 fa 86 ff ff       	call   c000e8b0 <malloc>
c00161b6:	83 c4 0c             	add    esp,0xc
c00161b9:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00161bf:	68 bc 35 02 c0       	push   0xc00235bc
c00161c4:	50                   	push   eax
c00161c5:	89 c7                	mov    edi,eax
c00161c7:	e8 60 1f ff ff       	call   c000812c <File::File(char const*, Process*)>
c00161cc:	58                   	pop    eax
c00161cd:	5a                   	pop    edx
c00161ce:	6a 12                	push   0x12
c00161d0:	57                   	push   edi
c00161d1:	e8 74 1f ff ff       	call   c000814a <File::open(FileOpenMode)>
c00161d6:	8b 07                	mov    eax,DWORD PTR [edi]
c00161d8:	59                   	pop    ecx
c00161d9:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00161dd:	51                   	push   ecx
c00161de:	6a 00                	push   0x0
c00161e0:	6a 00                	push   0x0
c00161e2:	68 00 00 11 00       	push   0x110000
c00161e7:	57                   	push   edi
c00161e8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00161eb:	83 c4 14             	add    esp,0x14
c00161ee:	57                   	push   edi
c00161ef:	e8 b4 1f ff ff       	call   c00081a8 <File::close()>
c00161f4:	8b 07                	mov    eax,DWORD PTR [edi]
c00161f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00161f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161fc:	83 c4 10             	add    esp,0x10
c00161ff:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c0016206:	fa                   	cli    
c0016207:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001620d:	80 3d 09 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d709,0x0
c0016214:	75 18                	jne    c001622e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0016216:	e8 2d f4 ff ff       	call   c0015648 <schedule()>
c001621b:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016222:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016229:	75 db                	jne    c0016206 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001622b:	fb                   	sti    
c001622c:	eb d8                	jmp    c0016206 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001622e:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016238:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001623c:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c0016241:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016245:	0f b7 f6             	movzx  esi,si
c0016248:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c001624c:	0f b7 db             	movzx  ebx,bx
c001624f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016253:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016257:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001625b:	50                   	push   eax
c001625c:	6a 20                	push   0x20
c001625e:	6a 00                	push   0x0
c0016260:	68 20 d7 02 c0       	push   0xc002d720
c0016265:	e8 86 a2 fe ff       	call   c00004f0 <memset>
c001626a:	5a                   	pop    edx
c001626b:	59                   	pop    ecx
c001626c:	56                   	push   esi
c001626d:	53                   	push   ebx
c001626e:	e8 b7 fd ff ff       	call   c001602a <Vm::realToLinear(unsigned short, unsigned short)>
c0016273:	83 c4 10             	add    esp,0x10
c0016276:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001627a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001627e:	89 c7                	mov    edi,eax
c0016280:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016282:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c0016289:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016290:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016297:	75 01                	jne    c001629a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016299:	fb                   	sti    
c001629a:	83 ec 0c             	sub    esp,0xc
c001629d:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c00162a3:	e8 b0 f6 ff ff       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c00162a8:	83 c4 3c             	add    esp,0x3c
c00162ab:	b0 01                	mov    al,0x1
c00162ad:	5b                   	pop    ebx
c00162ae:	5e                   	pop    esi
c00162af:	5f                   	pop    edi
c00162b0:	5d                   	pop    ebp
c00162b1:	c3                   	ret    

c00162b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00162b2:	55                   	push   ebp
c00162b3:	57                   	push   edi
c00162b4:	56                   	push   esi
c00162b5:	53                   	push   ebx
c00162b6:	83 ec 2c             	sub    esp,0x2c
c00162b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00162bd:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c00162c4:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00162c8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00162cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162d0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00162d4:	75 5d                	jne    c0016333 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00162d6:	83 ec 0c             	sub    esp,0xc
c00162d9:	68 14 01 00 00       	push   0x114
c00162de:	e8 cd 85 ff ff       	call   c000e8b0 <malloc>
c00162e3:	83 c4 0c             	add    esp,0xc
c00162e6:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00162ec:	68 bc 35 02 c0       	push   0xc00235bc
c00162f1:	50                   	push   eax
c00162f2:	89 c3                	mov    ebx,eax
c00162f4:	e8 33 1e ff ff       	call   c000812c <File::File(char const*, Process*)>
c00162f9:	58                   	pop    eax
c00162fa:	5a                   	pop    edx
c00162fb:	6a 12                	push   0x12
c00162fd:	53                   	push   ebx
c00162fe:	e8 47 1e ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016303:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016305:	59                   	pop    ecx
c0016306:	8d 54 24 24          	lea    edx,[esp+0x24]
c001630a:	52                   	push   edx
c001630b:	6a 00                	push   0x0
c001630d:	6a 00                	push   0x0
c001630f:	68 00 00 11 00       	push   0x110000
c0016314:	53                   	push   ebx
c0016315:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016318:	83 c4 14             	add    esp,0x14
c001631b:	53                   	push   ebx
c001631c:	e8 87 1e ff ff       	call   c00081a8 <File::close()>
c0016321:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016323:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016326:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016329:	83 c4 10             	add    esp,0x10
c001632c:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c0016333:	50                   	push   eax
c0016334:	50                   	push   eax
c0016335:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016339:	68 d7 35 02 c0       	push   0xc00235d7
c001633e:	e8 0b 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016343:	83 c4 10             	add    esp,0x10
c0016346:	fa                   	cli    
c0016347:	8a 1d 09 d7 02 c0    	mov    bl,BYTE PTR ds:0xc002d709
c001634d:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016353:	84 db                	test   bl,bl
c0016355:	75 18                	jne    c001636f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0016357:	e8 ec f2 ff ff       	call   c0015648 <schedule()>
c001635c:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016363:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001636a:	75 da                	jne    c0016346 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001636c:	fb                   	sti    
c001636d:	eb d7                	jmp    c0016346 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001636f:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016379:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001637d:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c0016382:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016386:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001638a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001638e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016392:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016396:	50                   	push   eax
c0016397:	6a 20                	push   0x20
c0016399:	6a 00                	push   0x0
c001639b:	68 20 d7 02 c0       	push   0xc002d720
c00163a0:	e8 4b a1 fe ff       	call   c00004f0 <memset>
c00163a5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00163ac:	e8 ff 84 ff ff       	call   c000e8b0 <malloc>
c00163b1:	83 c4 0c             	add    esp,0xc
c00163b4:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00163ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163be:	89 c5                	mov    ebp,eax
c00163c0:	50                   	push   eax
c00163c1:	e8 66 1d ff ff       	call   c000812c <File::File(char const*, Process*)>
c00163c6:	83 c4 10             	add    esp,0x10
c00163c9:	85 ed                	test   ebp,ebp
c00163cb:	75 0a                	jne    c00163d7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00163cd:	83 ec 0c             	sub    esp,0xc
c00163d0:	68 f9 35 02 c0       	push   0xc00235f9
c00163d5:	eb 2b                	jmp    c0016402 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c00163d7:	50                   	push   eax
c00163d8:	8d 44 24 17          	lea    eax,[esp+0x17]
c00163dc:	50                   	push   eax
c00163dd:	8d 44 24 20          	lea    eax,[esp+0x20]
c00163e1:	50                   	push   eax
c00163e2:	55                   	push   ebp
c00163e3:	e8 64 20 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00163e8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00163ec:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00163f8:	74 28                	je     c0016422 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	68 0d 36 02 c0       	push   0xc002360d
c0016402:	e8 ef 87 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0016407:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001640e:	83 c4 10             	add    esp,0x10
c0016411:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016418:	75 01                	jne    c001641b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c001641a:	fb                   	sti    
c001641b:	31 db                	xor    ebx,ebx
c001641d:	e9 92 00 00 00       	jmp    c00164b4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0016422:	51                   	push   ecx
c0016423:	51                   	push   ecx
c0016424:	6a 01                	push   0x1
c0016426:	55                   	push   ebp
c0016427:	e8 1e 1d ff ff       	call   c000814a <File::open(FileOpenMode)>
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	85 c0                	test   eax,eax
c0016431:	74 27                	je     c001645a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c0016433:	83 ec 0c             	sub    esp,0xc
c0016436:	68 26 36 02 c0       	push   0xc0023626
c001643b:	e8 b6 87 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0016440:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016451:	75 c8                	jne    c001641b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0016453:	fb                   	sti    
c0016454:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016458:	eb 5a                	jmp    c00164b4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c001645a:	50                   	push   eax
c001645b:	0f b7 ff             	movzx  edi,di
c001645e:	50                   	push   eax
c001645f:	0f b7 f6             	movzx  esi,si
c0016462:	57                   	push   edi
c0016463:	56                   	push   esi
c0016464:	e8 c1 fb ff ff       	call   c001602a <Vm::realToLinear(unsigned short, unsigned short)>
c0016469:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001646c:	5a                   	pop    edx
c001646d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016471:	56                   	push   esi
c0016472:	50                   	push   eax
c0016473:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016477:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001647b:	55                   	push   ebp
c001647c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001647f:	83 c4 14             	add    esp,0x14
c0016482:	55                   	push   ebp
c0016483:	e8 20 1d ff ff       	call   c00081a8 <File::close()>
c0016488:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c001648f:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016496:	83 c4 10             	add    esp,0x10
c0016499:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00164a0:	75 01                	jne    c00164a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c00164a2:	fb                   	sti    
c00164a3:	83 ec 0c             	sub    esp,0xc
c00164a6:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c00164ac:	e8 a7 f4 ff ff       	call   c0015958 <unblockTask(ThreadControlBlock*)>
c00164b1:	83 c4 10             	add    esp,0x10
c00164b4:	83 c4 2c             	add    esp,0x2c
c00164b7:	88 d8                	mov    al,bl
c00164b9:	5b                   	pop    ebx
c00164ba:	5e                   	pop    esi
c00164bb:	5f                   	pop    edi
c00164bc:	5d                   	pop    ebp
c00164bd:	c3                   	ret    

c00164be <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00164be:	57                   	push   edi
c00164bf:	56                   	push   esi
c00164c0:	53                   	push   ebx
c00164c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00164cd:	83 e8 06             	sub    eax,0x6
c00164d0:	0f b7 c0             	movzx  eax,ax
c00164d3:	50                   	push   eax
c00164d4:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00164d9:	50                   	push   eax
c00164da:	e8 4b fb ff ff       	call   c001602a <Vm::realToLinear(unsigned short, unsigned short)>
c00164df:	5a                   	pop    edx
c00164e0:	59                   	pop    ecx
c00164e1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00164e4:	8d 51 fa             	lea    edx,[ecx-0x6]
c00164e7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00164ea:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164f0:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00164f3:	8d 51 02             	lea    edx,[ecx+0x2]
c00164f6:	66 89 10             	mov    WORD PTR [eax],dx
c00164f9:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00164fd:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016501:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016505:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016508:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001650c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016512:	89 f1                	mov    ecx,esi
c0016514:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016518:	89 f2                	mov    edx,esi
c001651a:	0f b6 d6             	movzx  edx,dh
c001651d:	0f b6 f1             	movzx  esi,cl
c0016520:	74 0a                	je     c001652c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016522:	c1 e2 08             	shl    edx,0x8
c0016525:	09 f2                	or     edx,esi
c0016527:	80 ce 02             	or     dh,0x2
c001652a:	eb 08                	jmp    c0016534 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c001652c:	c1 e2 08             	shl    edx,0x8
c001652f:	09 f2                	or     edx,esi
c0016531:	80 e6 fd             	and    dh,0xfd
c0016534:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001653d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016541:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016549:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001654c:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016554:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016557:	5b                   	pop    ebx
c0016558:	5e                   	pop    esi
c0016559:	5f                   	pop    edi
c001655a:	c3                   	ret    

c001655b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001655b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016560:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016565:	c1 e0 04             	shl    eax,0x4
c0016568:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001656b:	c3                   	ret    

c001656c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001656c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016571:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016576:	c1 e0 04             	shl    eax,0x4
c0016579:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001657d:	c3                   	ret    

c001657e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001657e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016583:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016588:	c1 e0 04             	shl    eax,0x4
c001658b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001658e:	c3                   	ret    

c001658f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001658f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016594:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016599:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001659d:	c1 e0 04             	shl    eax,0x4
c00165a0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00165a3:	c3                   	ret    

c00165a4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00165a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00165a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00165ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165b2:	c1 e0 04             	shl    eax,0x4
c00165b5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00165b9:	c3                   	ret    

c00165ba <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00165ba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00165bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00165c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165c8:	c1 e0 04             	shl    eax,0x4
c00165cb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00165ce:	c3                   	ret    

c00165cf <Vm::faultHandler(regs*)>:
c00165cf:	55                   	push   ebp
c00165d0:	57                   	push   edi
c00165d1:	56                   	push   esi
c00165d2:	53                   	push   ebx
c00165d3:	83 ec 2c             	sub    esp,0x2c
c00165d6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00165da:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165dd:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00165e1:	0f b7 f8             	movzx  edi,ax
c00165e4:	0f b7 c0             	movzx  eax,ax
c00165e7:	52                   	push   edx
c00165e8:	50                   	push   eax
c00165e9:	e8 3c fa ff ff       	call   c001602a <Vm::realToLinear(unsigned short, unsigned short)>
c00165ee:	5a                   	pop    edx
c00165ef:	59                   	pop    ecx
c00165f0:	89 c1                	mov    ecx,eax
c00165f2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00165f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165f9:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00165fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016602:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016605:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016609:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001660e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016612:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001661a:	e8 0b fa ff ff       	call   c001602a <Vm::realToLinear(unsigned short, unsigned short)>
c001661f:	5e                   	pop    esi
c0016620:	be 06 00 00 00       	mov    esi,0x6
c0016625:	5d                   	pop    ebp
c0016626:	31 ed                	xor    ebp,ebp
c0016628:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001662d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016630:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016636:	0f 84 74 02 00 00    	je     c00168b0 <Vm::faultHandler(regs*)+0x2e1>
c001663c:	0f 87 94 00 00 00    	ja     c00166d6 <Vm::faultHandler(regs*)+0x107>
c0016642:	83 fa 66             	cmp    edx,0x66
c0016645:	0f 84 e2 01 00 00    	je     c001682d <Vm::faultHandler(regs*)+0x25e>
c001664b:	77 47                	ja     c0016694 <Vm::faultHandler(regs*)+0xc5>
c001664d:	83 fa 36             	cmp    edx,0x36
c0016650:	0f 84 ca 01 00 00    	je     c0016820 <Vm::faultHandler(regs*)+0x251>
c0016656:	77 1a                	ja     c0016672 <Vm::faultHandler(regs*)+0xa3>
c0016658:	83 fa 26             	cmp    edx,0x26
c001665b:	0f 84 98 01 00 00    	je     c00167f9 <Vm::faultHandler(regs*)+0x22a>
c0016661:	83 fa 2e             	cmp    edx,0x2e
c0016664:	0f 85 27 06 00 00    	jne    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c001666a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001666d:	31 f6                	xor    esi,esi
c001666f:	41                   	inc    ecx
c0016670:	eb bb                	jmp    c001662d <Vm::faultHandler(regs*)+0x5e>
c0016672:	83 fa 64             	cmp    edx,0x64
c0016675:	0f 84 8b 01 00 00    	je     c0016806 <Vm::faultHandler(regs*)+0x237>
c001667b:	0f 87 92 01 00 00    	ja     c0016813 <Vm::faultHandler(regs*)+0x244>
c0016681:	83 fa 3e             	cmp    edx,0x3e
c0016684:	0f 85 07 06 00 00    	jne    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c001668a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001668d:	be 01 00 00 00       	mov    esi,0x1
c0016692:	eb db                	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c0016694:	83 fa 6d             	cmp    edx,0x6d
c0016697:	0f 84 34 03 00 00    	je     c00169d1 <Vm::faultHandler(regs*)+0x402>
c001669d:	77 17                	ja     c00166b6 <Vm::faultHandler(regs*)+0xe7>
c001669f:	83 fa 67             	cmp    edx,0x67
c00166a2:	0f 84 92 01 00 00    	je     c001683a <Vm::faultHandler(regs*)+0x26b>
c00166a8:	83 fa 6c             	cmp    edx,0x6c
c00166ab:	0f 84 b1 02 00 00    	je     c0016962 <Vm::faultHandler(regs*)+0x393>
c00166b1:	e9 db 05 00 00       	jmp    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c00166b6:	83 fa 6f             	cmp    edx,0x6f
c00166b9:	0f 84 40 04 00 00    	je     c0016aff <Vm::faultHandler(regs*)+0x530>
c00166bf:	0f 82 a2 03 00 00    	jb     c0016a67 <Vm::faultHandler(regs*)+0x498>
c00166c5:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00166cb:	0f 84 76 01 00 00    	je     c0016847 <Vm::faultHandler(regs*)+0x278>
c00166d1:	e9 bb 05 00 00       	jmp    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c00166d6:	81 fa ec 00 00 00    	cmp    edx,0xec
c00166dc:	0f 84 57 05 00 00    	je     c0016c39 <Vm::faultHandler(regs*)+0x66a>
c00166e2:	0f 87 a9 00 00 00    	ja     c0016791 <Vm::faultHandler(regs*)+0x1c2>
c00166e8:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00166ee:	0f 84 d6 04 00 00    	je     c0016bca <Vm::faultHandler(regs*)+0x5fb>
c00166f4:	77 78                	ja     c001676e <Vm::faultHandler(regs*)+0x19f>
c00166f6:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00166fc:	0f 84 0e 02 00 00    	je     c0016910 <Vm::faultHandler(regs*)+0x341>
c0016702:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016708:	0f 85 83 05 00 00    	jne    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c001670e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016712:	89 d1                	mov    ecx,edx
c0016714:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016717:	c1 e1 08             	shl    ecx,0x8
c001671a:	09 ca                	or     edx,ecx
c001671c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001671f:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016723:	89 d1                	mov    ecx,edx
c0016725:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016729:	c1 e1 08             	shl    ecx,0x8
c001672c:	09 ca                	or     edx,ecx
c001672e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016731:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016735:	89 d1                	mov    ecx,edx
c0016737:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c001673b:	c1 e1 08             	shl    ecx,0x8
c001673e:	09 ca                	or     edx,ecx
c0016740:	81 ca 00 02 02 00    	or     edx,0x20200
c0016746:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016749:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001674d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016753:	d1 e8                	shr    eax,1
c0016755:	83 e0 01             	and    eax,0x1
c0016758:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001675b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001675e:	83 c0 06             	add    eax,0x6
c0016761:	25 ff ff 00 00       	and    eax,0xffff
c0016766:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016769:	e9 1f 05 00 00       	jmp    c0016c8d <Vm::faultHandler(regs*)+0x6be>
c001676e:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016774:	0f 84 95 04 00 00    	je     c0016c0f <Vm::faultHandler(regs*)+0x640>
c001677a:	0f 82 66 04 00 00    	jb     c0016be6 <Vm::faultHandler(regs*)+0x617>
c0016780:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016786:	0f 84 9a 04 00 00    	je     c0016c26 <Vm::faultHandler(regs*)+0x657>
c001678c:	e9 00 05 00 00       	jmp    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c0016791:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016797:	0f 84 dd 04 00 00    	je     c0016c7a <Vm::faultHandler(regs*)+0x6ab>
c001679d:	77 2e                	ja     c00167cd <Vm::faultHandler(regs*)+0x1fe>
c001679f:	81 fa ed 00 00 00    	cmp    edx,0xed
c00167a5:	0f 84 aa 04 00 00    	je     c0016c55 <Vm::faultHandler(regs*)+0x686>
c00167ab:	81 fa ee 00 00 00    	cmp    edx,0xee
c00167b1:	0f 85 da 04 00 00    	jne    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c00167b7:	50                   	push   eax
c00167b8:	50                   	push   eax
c00167b9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00167bd:	50                   	push   eax
c00167be:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167c2:	50                   	push   eax
c00167c3:	e8 2c f8 ff ff       	call   c0015ff4 <Vm::outbv(unsigned short, unsigned char)>
c00167c8:	e9 a5 04 00 00       	jmp    c0016c72 <Vm::faultHandler(regs*)+0x6a3>
c00167cd:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00167d3:	0f 84 6d 01 00 00    	je     c0016946 <Vm::faultHandler(regs*)+0x377>
c00167d9:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00167df:	0f 84 6f 01 00 00    	je     c0016954 <Vm::faultHandler(regs*)+0x385>
c00167e5:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00167eb:	0f 85 a0 04 00 00    	jne    c0016c91 <Vm::faultHandler(regs*)+0x6c2>
c00167f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167f4:	e9 76 fe ff ff       	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c00167f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167fc:	be 02 00 00 00       	mov    esi,0x2
c0016801:	e9 69 fe ff ff       	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c0016806:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016809:	be 03 00 00 00       	mov    esi,0x3
c001680e:	e9 5c fe ff ff       	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c0016813:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016816:	be 04 00 00 00       	mov    esi,0x4
c001681b:	e9 4f fe ff ff       	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c0016820:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016823:	be 05 00 00 00       	mov    esi,0x5
c0016828:	e9 42 fe ff ff       	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c001682d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016830:	bd 01 00 00 00       	mov    ebp,0x1
c0016835:	e9 35 fe ff ff       	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c001683a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001683d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016842:	e9 28 fe ff ff       	jmp    c001666f <Vm::faultHandler(regs*)+0xa0>
c0016847:	83 e5 01             	and    ebp,0x1
c001684a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001684d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016851:	74 30                	je     c0016883 <Vm::faultHandler(regs*)+0x2b4>
c0016853:	83 e9 04             	sub    ecx,0x4
c0016856:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001685c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016862:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016865:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016868:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001686e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016872:	0f 84 12 04 00 00    	je     c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016878:	80 ce 02             	or     dh,0x2
c001687b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001687e:	e9 07 04 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016883:	83 e9 02             	sub    ecx,0x2
c0016886:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001688c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001688f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016893:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016899:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001689d:	74 05                	je     c00168a4 <Vm::faultHandler(regs*)+0x2d5>
c001689f:	80 ce 02             	or     dh,0x2
c00168a2:	eb 03                	jmp    c00168a7 <Vm::faultHandler(regs*)+0x2d8>
c00168a4:	80 e6 fd             	and    dh,0xfd
c00168a7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00168ab:	e9 da 03 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c00168b0:	83 e5 01             	and    ebp,0x1
c00168b3:	74 2a                	je     c00168df <Vm::faultHandler(regs*)+0x310>
c00168b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00168b7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00168bd:	81 ca 00 02 02 00    	or     edx,0x20200
c00168c3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00168c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00168c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168ce:	c1 e8 09             	shr    eax,0x9
c00168d1:	83 e0 01             	and    eax,0x1
c00168d4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00168d7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00168da:	83 c0 04             	add    eax,0x4
c00168dd:	eb 24                	jmp    c0016903 <Vm::faultHandler(regs*)+0x334>
c00168df:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00168e2:	81 ca 00 02 02 00    	or     edx,0x20200
c00168e8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00168eb:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00168ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168f4:	c1 e8 09             	shr    eax,0x9
c00168f7:	83 e0 01             	and    eax,0x1
c00168fa:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00168fd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016900:	83 c0 02             	add    eax,0x2
c0016903:	25 ff ff 00 00       	and    eax,0xffff
c0016908:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001690b:	e9 7a 03 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016910:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016914:	3d ee 00 00 00       	cmp    eax,0xee
c0016919:	75 10                	jne    c001692b <Vm::faultHandler(regs*)+0x35c>
c001691b:	83 ec 0c             	sub    esp,0xc
c001691e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016921:	e8 6e f7 ff ff       	call   c0016094 <Vm::mainloop3(unsigned long)>
c0016926:	e9 4a 03 00 00       	jmp    c0016c75 <Vm::faultHandler(regs*)+0x6a6>
c001692b:	83 ec 0c             	sub    esp,0xc
c001692e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016936:	51                   	push   ecx
c0016937:	50                   	push   eax
c0016938:	53                   	push   ebx
c0016939:	e8 80 fb ff ff       	call   c00164be <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001693e:	83 c4 20             	add    esp,0x20
c0016941:	e9 47 03 00 00       	jmp    c0016c8d <Vm::faultHandler(regs*)+0x6be>
c0016946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001694b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001694f:	e9 36 03 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016954:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016959:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001695d:	e9 28 03 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016962:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016967:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001696a:	74 2b                	je     c0016997 <Vm::faultHandler(regs*)+0x3c8>
c001696c:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016973:	76 22                	jbe    c0016997 <Vm::faultHandler(regs*)+0x3c8>
c0016975:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016979:	50                   	push   eax
c001697a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001697e:	50                   	push   eax
c001697f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016983:	50                   	push   eax
c0016984:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016988:	50                   	push   eax
c0016989:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001698d:	50                   	push   eax
c001698e:	6a 6c                	push   0x6c
c0016990:	6a 6c                	push   0x6c
c0016992:	e9 c0 01 00 00       	jmp    c0016b57 <Vm::faultHandler(regs*)+0x588>
c0016997:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001699b:	83 ec 0c             	sub    esp,0xc
c001699e:	0f b7 f6             	movzx  esi,si
c00169a1:	50                   	push   eax
c00169a2:	e8 3a f6 ff ff       	call   c0015fe1 <Vm::inbv(unsigned short)>
c00169a7:	83 c4 0c             	add    esp,0xc
c00169aa:	0f b6 c0             	movzx  eax,al
c00169ad:	50                   	push   eax
c00169ae:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00169b2:	50                   	push   eax
c00169b3:	56                   	push   esi
c00169b4:	e8 d6 fb ff ff       	call   c001658f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00169bf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00169c3:	74 03                	je     c00169c8 <Vm::faultHandler(regs*)+0x3f9>
c00169c5:	48                   	dec    eax
c00169c6:	eb 01                	jmp    c00169c9 <Vm::faultHandler(regs*)+0x3fa>
c00169c8:	40                   	inc    eax
c00169c9:	0f b7 c0             	movzx  eax,ax
c00169cc:	e9 8e 00 00 00       	jmp    c0016a5f <Vm::faultHandler(regs*)+0x490>
c00169d1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00169d6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00169d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00169dc:	74 29                	je     c0016a07 <Vm::faultHandler(regs*)+0x438>
c00169de:	3d ff ff 00 00       	cmp    eax,0xffff
c00169e3:	76 22                	jbe    c0016a07 <Vm::faultHandler(regs*)+0x438>
c00169e5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169e9:	50                   	push   eax
c00169ea:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169ee:	50                   	push   eax
c00169ef:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169f3:	50                   	push   eax
c00169f4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169f8:	50                   	push   eax
c00169f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169fd:	50                   	push   eax
c00169fe:	6a 6d                	push   0x6d
c0016a00:	6a 6d                	push   0x6d
c0016a02:	e9 50 01 00 00       	jmp    c0016b57 <Vm::faultHandler(regs*)+0x588>
c0016a07:	83 e5 01             	and    ebp,0x1
c0016a0a:	0f b7 c8             	movzx  ecx,ax
c0016a0d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a10:	0f b7 f6             	movzx  esi,si
c0016a13:	74 1e                	je     c0016a33 <Vm::faultHandler(regs*)+0x464>
c0016a15:	ed                   	in     eax,dx
c0016a16:	55                   	push   ebp
c0016a17:	50                   	push   eax
c0016a18:	51                   	push   ecx
c0016a19:	56                   	push   esi
c0016a1a:	e8 9b fb ff ff       	call   c00165ba <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016a1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a22:	83 c4 10             	add    esp,0x10
c0016a25:	8d 50 04             	lea    edx,[eax+0x4]
c0016a28:	83 e8 04             	sub    eax,0x4
c0016a2b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016a31:	eb 20                	jmp    c0016a53 <Vm::faultHandler(regs*)+0x484>
c0016a33:	66 ed                	in     ax,dx
c0016a35:	57                   	push   edi
c0016a36:	0f b7 c0             	movzx  eax,ax
c0016a39:	50                   	push   eax
c0016a3a:	51                   	push   ecx
c0016a3b:	56                   	push   esi
c0016a3c:	e8 63 fb ff ff       	call   c00165a4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016a41:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	8d 50 02             	lea    edx,[eax+0x2]
c0016a4a:	83 e8 02             	sub    eax,0x2
c0016a4d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016a53:	25 ff ff 00 00       	and    eax,0xffff
c0016a58:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a5c:	0f 44 c2             	cmove  eax,edx
c0016a5f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016a62:	e9 23 02 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016a67:	8d 46 ff             	lea    eax,[esi-0x1]
c0016a6a:	0f b6 f0             	movzx  esi,al
c0016a6d:	83 fe 05             	cmp    esi,0x5
c0016a70:	77 23                	ja     c0016a95 <Vm::faultHandler(regs*)+0x4c6>
c0016a72:	ff 24 b5 9c 36 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc964]
c0016a79:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016a7e:	eb 15                	jmp    c0016a95 <Vm::faultHandler(regs*)+0x4c6>
c0016a80:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016a84:	eb 0f                	jmp    c0016a95 <Vm::faultHandler(regs*)+0x4c6>
c0016a86:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016a8a:	eb 09                	jmp    c0016a95 <Vm::faultHandler(regs*)+0x4c6>
c0016a8c:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016a90:	eb 03                	jmp    c0016a95 <Vm::faultHandler(regs*)+0x4c6>
c0016a92:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016a95:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a9a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016a9d:	74 29                	je     c0016ac8 <Vm::faultHandler(regs*)+0x4f9>
c0016a9f:	3d ff ff 00 00       	cmp    eax,0xffff
c0016aa4:	76 22                	jbe    c0016ac8 <Vm::faultHandler(regs*)+0x4f9>
c0016aa6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016aaa:	50                   	push   eax
c0016aab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016aaf:	50                   	push   eax
c0016ab0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ab4:	50                   	push   eax
c0016ab5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ab9:	50                   	push   eax
c0016aba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016abe:	50                   	push   eax
c0016abf:	6a 6e                	push   0x6e
c0016ac1:	6a 6e                	push   0x6e
c0016ac3:	e9 8f 00 00 00       	jmp    c0016b57 <Vm::faultHandler(regs*)+0x588>
c0016ac8:	52                   	push   edx
c0016ac9:	0f b7 c0             	movzx  eax,ax
c0016acc:	52                   	push   edx
c0016acd:	50                   	push   eax
c0016ace:	57                   	push   edi
c0016acf:	e8 87 fa ff ff       	call   c001655b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016ad4:	59                   	pop    ecx
c0016ad5:	5e                   	pop    esi
c0016ad6:	0f b6 c0             	movzx  eax,al
c0016ad9:	50                   	push   eax
c0016ada:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ade:	50                   	push   eax
c0016adf:	e8 10 f5 ff ff       	call   c0015ff4 <Vm::outbv(unsigned short, unsigned char)>
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016aea:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016aee:	74 03                	je     c0016af3 <Vm::faultHandler(regs*)+0x524>
c0016af0:	48                   	dec    eax
c0016af1:	eb 01                	jmp    c0016af4 <Vm::faultHandler(regs*)+0x525>
c0016af3:	40                   	inc    eax
c0016af4:	0f b7 c0             	movzx  eax,ax
c0016af7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016afa:	e9 8b 01 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016aff:	8d 46 ff             	lea    eax,[esi-0x1]
c0016b02:	0f b6 f0             	movzx  esi,al
c0016b05:	83 fe 05             	cmp    esi,0x5
c0016b08:	77 1e                	ja     c0016b28 <Vm::faultHandler(regs*)+0x559>
c0016b0a:	ff 24 b5 b4 36 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc94c]
c0016b11:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b15:	eb 11                	jmp    c0016b28 <Vm::faultHandler(regs*)+0x559>
c0016b17:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016b1a:	eb 0c                	jmp    c0016b28 <Vm::faultHandler(regs*)+0x559>
c0016b1c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016b1f:	eb 07                	jmp    c0016b28 <Vm::faultHandler(regs*)+0x559>
c0016b21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016b24:	eb 02                	jmp    c0016b28 <Vm::faultHandler(regs*)+0x559>
c0016b26:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016b28:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016b2d:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016b30:	74 37                	je     c0016b69 <Vm::faultHandler(regs*)+0x59a>
c0016b32:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016b38:	76 2f                	jbe    c0016b69 <Vm::faultHandler(regs*)+0x59a>
c0016b3a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b3e:	50                   	push   eax
c0016b3f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b43:	50                   	push   eax
c0016b44:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b48:	50                   	push   eax
c0016b49:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b4d:	50                   	push   eax
c0016b4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b52:	50                   	push   eax
c0016b53:	6a 6f                	push   0x6f
c0016b55:	6a 6f                	push   0x6f
c0016b57:	68 3f 36 02 c0       	push   0xc002363f
c0016b5c:	e8 ed 03 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016b61:	83 c4 20             	add    esp,0x20
c0016b64:	e9 86 01 00 00       	jmp    c0016cef <Vm::faultHandler(regs*)+0x720>
c0016b69:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016b6c:	0f b7 d7             	movzx  edx,di
c0016b6f:	0f b7 c6             	movzx  eax,si
c0016b72:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016b75:	81 e1 00 04 00 00    	and    ecx,0x400
c0016b7b:	83 e5 01             	and    ebp,0x1
c0016b7e:	74 1c                	je     c0016b9c <Vm::faultHandler(regs*)+0x5cd>
c0016b80:	55                   	push   ebp
c0016b81:	55                   	push   ebp
c0016b82:	50                   	push   eax
c0016b83:	52                   	push   edx
c0016b84:	e8 f5 f9 ff ff       	call   c001657e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016b89:	83 c4 10             	add    esp,0x10
c0016b8c:	89 fa                	mov    edx,edi
c0016b8e:	ef                   	out    dx,eax
c0016b8f:	8d 46 04             	lea    eax,[esi+0x4]
c0016b92:	83 ee 04             	sub    esi,0x4
c0016b95:	25 ff ff 00 00       	and    eax,0xffff
c0016b9a:	eb 1b                	jmp    c0016bb7 <Vm::faultHandler(regs*)+0x5e8>
c0016b9c:	55                   	push   ebp
c0016b9d:	55                   	push   ebp
c0016b9e:	50                   	push   eax
c0016b9f:	52                   	push   edx
c0016ba0:	e8 c7 f9 ff ff       	call   c001656c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016ba5:	83 c4 10             	add    esp,0x10
c0016ba8:	89 fa                	mov    edx,edi
c0016baa:	66 ef                	out    dx,ax
c0016bac:	8d 46 02             	lea    eax,[esi+0x2]
c0016baf:	83 ee 02             	sub    esi,0x2
c0016bb2:	25 ff ff 00 00       	and    eax,0xffff
c0016bb7:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016bbd:	85 c9                	test   ecx,ecx
c0016bbf:	0f 44 f0             	cmove  esi,eax
c0016bc2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016bc5:	e9 c0 00 00 00       	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016bca:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016bd1:	83 ec 0c             	sub    esp,0xc
c0016bd4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016bd8:	50                   	push   eax
c0016bd9:	e8 03 f4 ff ff       	call   c0015fe1 <Vm::inbv(unsigned short)>
c0016bde:	0f b6 c0             	movzx  eax,al
c0016be1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016be4:	eb 3a                	jmp    c0016c20 <Vm::faultHandler(regs*)+0x651>
c0016be6:	83 e5 01             	and    ebp,0x1
c0016be9:	74 07                	je     c0016bf2 <Vm::faultHandler(regs*)+0x623>
c0016beb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016bef:	ed                   	in     eax,dx
c0016bf0:	eb 14                	jmp    c0016c06 <Vm::faultHandler(regs*)+0x637>
c0016bf2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016bf5:	66 31 f6             	xor    si,si
c0016bf8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016bfb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016bff:	66 ed                	in     ax,dx
c0016c01:	0f b7 c0             	movzx  eax,ax
c0016c04:	09 f0                	or     eax,esi
c0016c06:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016c09:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016c0d:	eb 7e                	jmp    c0016c8d <Vm::faultHandler(regs*)+0x6be>
c0016c0f:	52                   	push   edx
c0016c10:	52                   	push   edx
c0016c11:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016c15:	50                   	push   eax
c0016c16:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c1a:	50                   	push   eax
c0016c1b:	e8 d4 f3 ff ff       	call   c0015ff4 <Vm::outbv(unsigned short, unsigned char)>
c0016c20:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016c24:	eb 4f                	jmp    c0016c75 <Vm::faultHandler(regs*)+0x6a6>
c0016c26:	83 e5 01             	and    ebp,0x1
c0016c29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016c2c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016c30:	74 03                	je     c0016c35 <Vm::faultHandler(regs*)+0x666>
c0016c32:	ef                   	out    dx,eax
c0016c33:	eb d4                	jmp    c0016c09 <Vm::faultHandler(regs*)+0x63a>
c0016c35:	66 ef                	out    dx,ax
c0016c37:	eb d0                	jmp    c0016c09 <Vm::faultHandler(regs*)+0x63a>
c0016c39:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016c3d:	83 ec 0c             	sub    esp,0xc
c0016c40:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016c47:	50                   	push   eax
c0016c48:	e8 94 f3 ff ff       	call   c0015fe1 <Vm::inbv(unsigned short)>
c0016c4d:	0f b6 c0             	movzx  eax,al
c0016c50:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016c53:	eb 1d                	jmp    c0016c72 <Vm::faultHandler(regs*)+0x6a3>
c0016c55:	83 e5 01             	and    ebp,0x1
c0016c58:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016c5b:	74 03                	je     c0016c60 <Vm::faultHandler(regs*)+0x691>
c0016c5d:	ed                   	in     eax,dx
c0016c5e:	eb 0d                	jmp    c0016c6d <Vm::faultHandler(regs*)+0x69e>
c0016c60:	66 ed                	in     ax,dx
c0016c62:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016c65:	0f b7 c0             	movzx  eax,ax
c0016c68:	66 31 d2             	xor    dx,dx
c0016c6b:	09 d0                	or     eax,edx
c0016c6d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016c70:	eb 18                	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016c72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c75:	83 c4 10             	add    esp,0x10
c0016c78:	eb 13                	jmp    c0016c8d <Vm::faultHandler(regs*)+0x6be>
c0016c7a:	83 e5 01             	and    ebp,0x1
c0016c7d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016c80:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016c83:	74 03                	je     c0016c88 <Vm::faultHandler(regs*)+0x6b9>
c0016c85:	ef                   	out    dx,eax
c0016c86:	eb 02                	jmp    c0016c8a <Vm::faultHandler(regs*)+0x6bb>
c0016c88:	66 ef                	out    dx,ax
c0016c8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c8d:	b0 01                	mov    al,0x1
c0016c8f:	eb 60                	jmp    c0016cf1 <Vm::faultHandler(regs*)+0x722>
c0016c91:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016c95:	50                   	push   eax
c0016c96:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016c9a:	50                   	push   eax
c0016c9b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016c9f:	50                   	push   eax
c0016ca0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ca4:	50                   	push   eax
c0016ca5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ca9:	50                   	push   eax
c0016caa:	52                   	push   edx
c0016cab:	52                   	push   edx
c0016cac:	68 6c 36 02 c0       	push   0xc002366c
c0016cb1:	e8 98 02 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016cb6:	83 c4 20             	add    esp,0x20
c0016cb9:	83 ec 0c             	sub    esp,0xc
c0016cbc:	6a 60                	push   0x60
c0016cbe:	e8 1e f3 ff ff       	call   c0015fe1 <Vm::inbv(unsigned short)>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	0f b6 d0             	movzx  edx,al
c0016cc9:	83 fa 1c             	cmp    edx,0x1c
c0016ccc:	74 05                	je     c0016cd3 <Vm::faultHandler(regs*)+0x704>
c0016cce:	83 fa 5a             	cmp    edx,0x5a
c0016cd1:	75 e6                	jne    c0016cb9 <Vm::faultHandler(regs*)+0x6ea>
c0016cd3:	0f b6 c0             	movzx  eax,al
c0016cd6:	83 f8 1c             	cmp    eax,0x1c
c0016cd9:	74 05                	je     c0016ce0 <Vm::faultHandler(regs*)+0x711>
c0016cdb:	83 f8 5a             	cmp    eax,0x5a
c0016cde:	75 0f                	jne    c0016cef <Vm::faultHandler(regs*)+0x720>
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	6a 60                	push   0x60
c0016ce5:	e8 f7 f2 ff ff       	call   c0015fe1 <Vm::inbv(unsigned short)>
c0016cea:	83 c4 10             	add    esp,0x10
c0016ced:	eb e4                	jmp    c0016cd3 <Vm::faultHandler(regs*)+0x704>
c0016cef:	31 c0                	xor    eax,eax
c0016cf1:	83 c4 2c             	add    esp,0x2c
c0016cf4:	5b                   	pop    ebx
c0016cf5:	5e                   	pop    esi
c0016cf6:	5f                   	pop    edi
c0016cf7:	5d                   	pop    ebp
c0016cf8:	c3                   	ret    
c0016cf9:	90                   	nop

c0016cfa <noCopro(unsigned long)>:
c0016cfa:	c3                   	ret    
c0016cfb:	90                   	nop

c0016cfc <CPU::close(int, int, void*)>:
c0016cfc:	31 c0                	xor    eax,eax
c0016cfe:	c3                   	ret    

c0016cff <x86ReadCMOS(unsigned char)>:
c0016cff:	83 ec 14             	sub    esp,0x14
c0016d02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d06:	88 04 24             	mov    BYTE PTR [esp],al
c0016d09:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016d0e:	0f b6 c0             	movzx  eax,al
c0016d11:	85 c0                	test   eax,eax
c0016d13:	74 04                	je     c0016d19 <x86ReadCMOS(unsigned char)+0x1a>
c0016d15:	b2 00                	mov    dl,0x0
c0016d17:	eb 02                	jmp    c0016d1b <x86ReadCMOS(unsigned char)+0x1c>
c0016d19:	b2 80                	mov    dl,0x80
c0016d1b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016d1e:	09 d0                	or     eax,edx
c0016d20:	0f b6 c0             	movzx  eax,al
c0016d23:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016d2a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016d2e:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016d32:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016d37:	ee                   	out    dx,al
c0016d38:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016d3f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016d44:	89 c2                	mov    edx,eax
c0016d46:	ec                   	in     al,dx
c0016d47:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d4b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016d4f:	83 c4 14             	add    esp,0x14
c0016d52:	c3                   	ret    

c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>:
c0016d53:	83 ec 18             	sub    esp,0x18
c0016d56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d5e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016d62:	88 d0                	mov    al,dl
c0016d64:	88 04 24             	mov    BYTE PTR [esp],al
c0016d67:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016d6c:	0f b6 c0             	movzx  eax,al
c0016d6f:	85 c0                	test   eax,eax
c0016d71:	74 04                	je     c0016d77 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016d73:	b2 00                	mov    dl,0x0
c0016d75:	eb 02                	jmp    c0016d79 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0016d77:	b2 80                	mov    dl,0x80
c0016d79:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016d7d:	09 d0                	or     eax,edx
c0016d7f:	0f b6 c0             	movzx  eax,al
c0016d82:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016d89:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d8d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016d91:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016d96:	ee                   	out    dx,al
c0016d97:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016d9b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016da2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016da6:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016daa:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016daf:	ee                   	out    dx,al
c0016db0:	90                   	nop
c0016db1:	83 c4 18             	add    esp,0x18
c0016db4:	c3                   	ret    

c0016db5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016db5:	60                   	pusha  
c0016db6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016dbe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016dc2:	9c                   	pushf  
c0016dc3:	fa                   	cli    
c0016dc4:	0f 09                	wbinvd 
c0016dc6:	0f 30                	wrmsr  
c0016dc8:	9d                   	popf   
c0016dc9:	89 c2                	mov    edx,eax
c0016dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dcf:	89 10                	mov    DWORD PTR [eax],edx
c0016dd1:	61                   	popa   
c0016dd2:	90                   	nop
c0016dd3:	c3                   	ret    

c0016dd4 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016dd4:	60                   	pusha  
c0016dd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dd9:	89 c1                	mov    ecx,eax
c0016ddb:	9c                   	pushf  
c0016ddc:	fa                   	cli    
c0016ddd:	0f 09                	wbinvd 
c0016ddf:	31 c0                	xor    eax,eax
c0016de1:	31 d2                	xor    edx,edx
c0016de3:	0f 32                	rdmsr  
c0016de5:	9d                   	popf   
c0016de6:	89 c2                	mov    edx,eax
c0016de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dec:	89 10                	mov    DWORD PTR [eax],edx
c0016dee:	61                   	popa   
c0016def:	90                   	nop
c0016df0:	c3                   	ret    

c0016df1 <AMD_K6_writeback(int, int, int)>:
c0016df1:	83 ec 20             	sub    esp,0x20
c0016df4:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c0016df9:	c1 e8 14             	shr    eax,0x14
c0016dfc:	c1 e8 02             	shr    eax,0x2
c0016dff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e03:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016e08:	0f 85 9e 00 00 00    	jne    c0016eac <AMD_K6_writeback(int, int, int)+0xbb>
c0016e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e16:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016e1b:	75 19                	jne    c0016e36 <AMD_K6_writeback(int, int, int)+0x45>
c0016e1d:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016e22:	7f 0a                	jg     c0016e2e <AMD_K6_writeback(int, int, int)+0x3d>
c0016e24:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016e2c:	eb 08                	jmp    c0016e36 <AMD_K6_writeback(int, int, int)+0x45>
c0016e2e:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016e36:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016e3b:	7c 6e                	jl     c0016eab <AMD_K6_writeback(int, int, int)+0xba>
c0016e3d:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016e42:	7e 09                	jle    c0016e4d <AMD_K6_writeback(int, int, int)+0x5c>
c0016e44:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016e49:	74 36                	je     c0016e81 <AMD_K6_writeback(int, int, int)+0x90>
c0016e4b:	eb 5e                	jmp    c0016eab <AMD_K6_writeback(int, int, int)+0xba>
c0016e4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e51:	50                   	push   eax
c0016e52:	68 82 00 00 c0       	push   0xc0000082
c0016e57:	e8 78 ff ff ff       	call   c0016dd4 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016e5c:	83 c4 08             	add    esp,0x8
c0016e5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e63:	d1 e0                	shl    eax,1
c0016e65:	83 e0 7f             	and    eax,0x7f
c0016e68:	89 c2                	mov    edx,eax
c0016e6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e6e:	50                   	push   eax
c0016e6f:	6a 00                	push   0x0
c0016e71:	52                   	push   edx
c0016e72:	68 82 00 00 c0       	push   0xc0000082
c0016e77:	e8 39 ff ff ff       	call   c0016db5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016e7c:	83 c4 10             	add    esp,0x10
c0016e7f:	eb 2b                	jmp    c0016eac <AMD_K6_writeback(int, int, int)+0xbb>
c0016e81:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e85:	50                   	push   eax
c0016e86:	68 82 00 00 c0       	push   0xc0000082
c0016e8b:	e8 44 ff ff ff       	call   c0016dd4 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016e90:	83 c4 08             	add    esp,0x8
c0016e93:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e97:	50                   	push   eax
c0016e98:	6a 00                	push   0x0
c0016e9a:	6a 00                	push   0x0
c0016e9c:	68 82 00 00 c0       	push   0xc0000082
c0016ea1:	e8 0f ff ff ff       	call   c0016db5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016ea6:	83 c4 10             	add    esp,0x10
c0016ea9:	eb 01                	jmp    c0016eac <AMD_K6_writeback(int, int, int)+0xbb>
c0016eab:	90                   	nop
c0016eac:	90                   	nop
c0016ead:	83 c4 20             	add    esp,0x20
c0016eb0:	c3                   	ret    

c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016eb1:	56                   	push   esi
c0016eb2:	53                   	push   ebx
c0016eb3:	a1 00 50 02 c0       	mov    eax,ds:0xc0025000
c0016eb8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016ebc:	75 32                	jne    c0016ef0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016ebe:	8b 15 60 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d760
c0016ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec8:	89 10                	mov    DWORD PTR [eax],edx
c0016eca:	8b 15 5c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d75c
c0016ed0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ed4:	89 10                	mov    DWORD PTR [eax],edx
c0016ed6:	8b 15 58 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d758
c0016edc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ee0:	89 10                	mov    DWORD PTR [eax],edx
c0016ee2:	8b 15 54 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d754
c0016ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016eec:	89 10                	mov    DWORD PTR [eax],edx
c0016eee:	eb 5c                	jmp    c0016f4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ef4:	ba 00 00 00 00       	mov    edx,0x0
c0016ef9:	89 d1                	mov    ecx,edx
c0016efb:	0f a2                	cpuid  
c0016efd:	89 c6                	mov    esi,eax
c0016eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f03:	89 30                	mov    DWORD PTR [eax],esi
c0016f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f09:	89 18                	mov    DWORD PTR [eax],ebx
c0016f0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f0f:	89 08                	mov    DWORD PTR [eax],ecx
c0016f11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f15:	89 10                	mov    DWORD PTR [eax],edx
c0016f17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f1b:	a3 00 50 02 c0       	mov    ds:0xc0025000,eax
c0016f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f24:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f26:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c0016f2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f31:	a3 5c d7 02 c0       	mov    ds:0xc002d75c,eax
c0016f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f3c:	a3 58 d7 02 c0       	mov    ds:0xc002d758,eax
c0016f41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f45:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f47:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c0016f4c:	5b                   	pop    ebx
c0016f4d:	5e                   	pop    esi
c0016f4e:	c3                   	ret    

c0016f4f <cpuidCheckEDX(unsigned int)>:
c0016f4f:	83 ec 10             	sub    esp,0x10
c0016f52:	89 e0                	mov    eax,esp
c0016f54:	50                   	push   eax
c0016f55:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f59:	50                   	push   eax
c0016f5a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016f5e:	50                   	push   eax
c0016f5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f63:	50                   	push   eax
c0016f64:	6a 01                	push   0x1
c0016f66:	e8 46 ff ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016f6b:	83 c4 14             	add    esp,0x14
c0016f6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016f71:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016f75:	0f 95 c0             	setne  al
c0016f78:	83 c4 10             	add    esp,0x10
c0016f7b:	c3                   	ret    

c0016f7c <cpuidCheckECX(unsigned int)>:
c0016f7c:	83 ec 10             	sub    esp,0x10
c0016f7f:	89 e0                	mov    eax,esp
c0016f81:	50                   	push   eax
c0016f82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f86:	50                   	push   eax
c0016f87:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016f8b:	50                   	push   eax
c0016f8c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f90:	50                   	push   eax
c0016f91:	6a 01                	push   0x1
c0016f93:	e8 19 ff ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016f98:	83 c4 14             	add    esp,0x14
c0016f9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f9f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016fa3:	0f 95 c0             	setne  al
c0016fa6:	83 c4 10             	add    esp,0x10
c0016fa9:	c3                   	ret    

c0016faa <cpuidCheckExtendedEBX(unsigned int)>:
c0016faa:	83 ec 10             	sub    esp,0x10
c0016fad:	89 e0                	mov    eax,esp
c0016faf:	50                   	push   eax
c0016fb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016fb4:	50                   	push   eax
c0016fb5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016fb9:	50                   	push   eax
c0016fba:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fbe:	50                   	push   eax
c0016fbf:	6a 07                	push   0x7
c0016fc1:	e8 eb fe ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016fc6:	83 c4 14             	add    esp,0x14
c0016fc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fcd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016fd1:	0f 95 c0             	setne  al
c0016fd4:	83 c4 10             	add    esp,0x10
c0016fd7:	c3                   	ret    

c0016fd8 <cpuidCheckExtendedECX(unsigned int)>:
c0016fd8:	83 ec 10             	sub    esp,0x10
c0016fdb:	89 e0                	mov    eax,esp
c0016fdd:	50                   	push   eax
c0016fde:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016fe2:	50                   	push   eax
c0016fe3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016fe7:	50                   	push   eax
c0016fe8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fec:	50                   	push   eax
c0016fed:	6a 07                	push   0x7
c0016fef:	e8 bd fe ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016ff4:	83 c4 14             	add    esp,0x14
c0016ff7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ffb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016fff:	0f 95 c0             	setne  al
c0017002:	83 c4 10             	add    esp,0x10
c0017005:	c3                   	ret    

c0017006 <HalDetectFeatures()>:
c0017006:	57                   	push   edi
c0017007:	56                   	push   esi
c0017008:	53                   	push   ebx
c0017009:	81 ec 90 00 00 00    	sub    esp,0x90
c001700f:	83 ec 04             	sub    esp,0x4
c0017012:	6a 08                	push   0x8
c0017014:	6a 00                	push   0x0
c0017016:	68 8c d7 02 c0       	push   0xc002d78c
c001701b:	e8 d0 94 fe ff       	call   c00004f0 <memset>
c0017020:	83 c4 10             	add    esp,0x10
c0017023:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017028:	83 c8 04             	or     eax,0x4
c001702b:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017030:	e8 c4 91 fe ff       	call   c00001f9 <detectCPUID>
c0017035:	85 c0                	test   eax,eax
c0017037:	0f 95 c0             	setne  al
c001703a:	83 e0 01             	and    eax,0x1
c001703d:	83 e0 01             	and    eax,0x1
c0017040:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017043:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017048:	83 e0 fd             	and    eax,0xfffffffd
c001704b:	88 c2                	mov    dl,al
c001704d:	88 c8                	mov    al,cl
c001704f:	09 d0                	or     eax,edx
c0017051:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017056:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001705b:	83 e0 02             	and    eax,0x2
c001705e:	0f b6 c0             	movzx  eax,al
c0017061:	85 c0                	test   eax,eax
c0017063:	0f 84 7f 02 00 00    	je     c00172e8 <HalDetectFeatures()+0x2e2>
c0017069:	83 ec 0c             	sub    esp,0xc
c001706c:	6a 20                	push   0x20
c001706e:	e8 dc fe ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	83 e0 01             	and    eax,0x1
c0017079:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017080:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017085:	83 e0 f7             	and    eax,0xfffffff7
c0017088:	88 c2                	mov    dl,al
c001708a:	88 c8                	mov    al,cl
c001708c:	09 d0                	or     eax,edx
c001708e:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017093:	83 ec 0c             	sub    esp,0xc
c0017096:	68 00 00 00 04       	push   0x4000000
c001709b:	e8 af fe ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c00170a0:	83 c4 10             	add    esp,0x10
c00170a3:	89 c1                	mov    ecx,eax
c00170a5:	83 e1 01             	and    ecx,0x1
c00170a8:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00170ad:	83 e0 fe             	and    eax,0xfffffffe
c00170b0:	88 c2                	mov    dl,al
c00170b2:	88 c8                	mov    al,cl
c00170b4:	09 d0                	or     eax,edx
c00170b6:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00170bb:	83 ec 0c             	sub    esp,0xc
c00170be:	68 80 00 00 00       	push   0x80
c00170c3:	e8 87 fe ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	89 c1                	mov    ecx,eax
c00170cd:	c1 e1 07             	shl    ecx,0x7
c00170d0:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00170d5:	83 e0 7f             	and    eax,0x7f
c00170d8:	88 c2                	mov    dl,al
c00170da:	88 c8                	mov    al,cl
c00170dc:	09 d0                	or     eax,edx
c00170de:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00170e3:	83 ec 0c             	sub    esp,0xc
c00170e6:	68 00 00 80 00       	push   0x800000
c00170eb:	e8 5f fe ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c00170f0:	83 c4 10             	add    esp,0x10
c00170f3:	83 e0 01             	and    eax,0x1
c00170f6:	89 c1                	mov    ecx,eax
c00170f8:	c1 e1 05             	shl    ecx,0x5
c00170fb:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017100:	83 e0 df             	and    eax,0xffffffdf
c0017103:	88 c2                	mov    dl,al
c0017105:	88 c8                	mov    al,cl
c0017107:	09 d0                	or     eax,edx
c0017109:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001710e:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0017113:	83 e0 01             	and    eax,0x1
c0017116:	75 0c                	jne    c0017124 <HalDetectFeatures()+0x11e>
c0017118:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c001711d:	25 00 04 00 00       	and    eax,0x400
c0017122:	74 0f                	je     c0017133 <HalDetectFeatures()+0x12d>
c0017124:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017129:	83 e0 fe             	and    eax,0xfffffffe
c001712c:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017131:	eb 28                	jmp    c001715b <HalDetectFeatures()+0x155>
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	68 00 02 00 00       	push   0x200
c001713b:	e8 0f fe ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c0017140:	83 c4 10             	add    esp,0x10
c0017143:	89 c1                	mov    ecx,eax
c0017145:	83 e1 01             	and    ecx,0x1
c0017148:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001714d:	83 e0 fe             	and    eax,0xfffffffe
c0017150:	88 c2                	mov    dl,al
c0017152:	88 c8                	mov    al,cl
c0017154:	09 d0                	or     eax,edx
c0017156:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001715b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017160:	83 e0 01             	and    eax,0x1
c0017163:	0f b6 c0             	movzx  eax,al
c0017166:	85 c0                	test   eax,eax
c0017168:	74 1c                	je     c0017186 <HalDetectFeatures()+0x180>
c001716a:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001716f:	83 e0 08             	and    eax,0x8
c0017172:	0f b6 c0             	movzx  eax,al
c0017175:	85 c0                	test   eax,eax
c0017177:	75 0d                	jne    c0017186 <HalDetectFeatures()+0x180>
c0017179:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001717e:	83 e0 fe             	and    eax,0xfffffffe
c0017181:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017186:	83 ec 0c             	sub    esp,0xc
c0017189:	68 cc 36 02 c0       	push   0xc00236cc
c001718e:	e8 bb fd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001719b:	83 e0 fe             	and    eax,0xfffffffe
c001719e:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00171a3:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00171ab:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00171b3:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00171bb:	85 c0                	test   eax,eax
c00171bd:	0f 84 ab 00 00 00    	je     c001726e <HalDetectFeatures()+0x268>
c00171c3:	83 ec 0c             	sub    esp,0xc
c00171c6:	6a 01                	push   0x1
c00171c8:	e8 af fd ff ff       	call   c0016f7c <cpuidCheckECX(unsigned int)>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	83 e0 01             	and    eax,0x1
c00171d3:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00171d6:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00171db:	83 e0 fd             	and    eax,0xfffffffd
c00171de:	88 c2                	mov    dl,al
c00171e0:	88 c8                	mov    al,cl
c00171e2:	09 d0                	or     eax,edx
c00171e4:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00171e9:	83 ec 0c             	sub    esp,0xc
c00171ec:	68 00 02 00 00       	push   0x200
c00171f1:	e8 86 fd ff ff       	call   c0016f7c <cpuidCheckECX(unsigned int)>
c00171f6:	83 c4 10             	add    esp,0x10
c00171f9:	83 e0 01             	and    eax,0x1
c00171fc:	89 c1                	mov    ecx,eax
c00171fe:	c1 e1 04             	shl    ecx,0x4
c0017201:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017206:	83 e0 ef             	and    eax,0xffffffef
c0017209:	88 c2                	mov    dl,al
c001720b:	88 c8                	mov    al,cl
c001720d:	09 d0                	or     eax,edx
c001720f:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017214:	83 ec 0c             	sub    esp,0xc
c0017217:	68 00 00 08 00       	push   0x80000
c001721c:	e8 5b fd ff ff       	call   c0016f7c <cpuidCheckECX(unsigned int)>
c0017221:	83 c4 10             	add    esp,0x10
c0017224:	83 e0 01             	and    eax,0x1
c0017227:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001722e:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017233:	83 e0 fb             	and    eax,0xfffffffb
c0017236:	88 c2                	mov    dl,al
c0017238:	88 c8                	mov    al,cl
c001723a:	09 d0                	or     eax,edx
c001723c:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017241:	83 ec 0c             	sub    esp,0xc
c0017244:	68 00 00 10 00       	push   0x100000
c0017249:	e8 2e fd ff ff       	call   c0016f7c <cpuidCheckECX(unsigned int)>
c001724e:	83 c4 10             	add    esp,0x10
c0017251:	83 e0 01             	and    eax,0x1
c0017254:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001725b:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017260:	83 e0 f7             	and    eax,0xfffffff7
c0017263:	88 c2                	mov    dl,al
c0017265:	88 c8                	mov    al,cl
c0017267:	09 d0                	or     eax,edx
c0017269:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c001726e:	83 ec 0c             	sub    esp,0xc
c0017271:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017275:	50                   	push   eax
c0017276:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001727a:	50                   	push   eax
c001727b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001727f:	50                   	push   eax
c0017280:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017284:	50                   	push   eax
c0017285:	68 00 00 00 80       	push   0x80000000
c001728a:	e8 22 fc ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001728f:	83 c4 20             	add    esp,0x20
c0017292:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017296:	3d 00 00 00 80       	cmp    eax,0x80000000
c001729b:	76 4b                	jbe    c00172e8 <HalDetectFeatures()+0x2e2>
c001729d:	83 ec 0c             	sub    esp,0xc
c00172a0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00172a4:	50                   	push   eax
c00172a5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00172a9:	50                   	push   eax
c00172aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00172ae:	50                   	push   eax
c00172af:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00172b3:	50                   	push   eax
c00172b4:	68 01 00 00 80       	push   0x80000001
c00172b9:	e8 f3 fb ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00172be:	83 c4 20             	add    esp,0x20
c00172c1:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00172c6:	83 e0 bf             	and    eax,0xffffffbf
c00172c9:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00172ce:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00172d3:	83 e0 fd             	and    eax,0xfffffffd
c00172d6:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00172db:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00172e0:	83 e0 fe             	and    eax,0xfffffffe
c00172e3:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00172e8:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00172ed:	25 00 04 00 00       	and    eax,0x400
c00172f2:	74 0d                	je     c0017301 <HalDetectFeatures()+0x2fb>
c00172f4:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00172f9:	83 e0 fb             	and    eax,0xfffffffb
c00172fc:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017301:	c6 05 88 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d788,0x1
c0017308:	83 ec 04             	sub    esp,0x4
c001730b:	6a 0d                	push   0xd
c001730d:	6a 00                	push   0x0
c001730f:	68 70 d7 02 c0       	push   0xc002d770
c0017314:	e8 d7 91 fe ff       	call   c00004f0 <memset>
c0017319:	83 c4 10             	add    esp,0x10
c001731c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017321:	83 e0 02             	and    eax,0x2
c0017324:	0f b6 c0             	movzx  eax,al
c0017327:	85 c0                	test   eax,eax
c0017329:	0f 84 16 08 00 00    	je     c0017b45 <HalDetectFeatures()+0xb3f>
c001732f:	83 ec 0c             	sub    esp,0xc
c0017332:	6a 10                	push   0x10
c0017334:	e8 16 fc ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c0017339:	83 c4 10             	add    esp,0x10
c001733c:	83 e0 01             	and    eax,0x1
c001733f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017346:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001734b:	83 e0 f7             	and    eax,0xfffffff7
c001734e:	88 c2                	mov    dl,al
c0017350:	88 c8                	mov    al,cl
c0017352:	09 d0                	or     eax,edx
c0017354:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017359:	83 ec 0c             	sub    esp,0xc
c001735c:	6a 40                	push   0x40
c001735e:	e8 ec fb ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	83 e0 01             	and    eax,0x1
c0017369:	89 c1                	mov    ecx,eax
c001736b:	c1 e1 04             	shl    ecx,0x4
c001736e:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017373:	83 e0 ef             	and    eax,0xffffffef
c0017376:	88 c2                	mov    dl,al
c0017378:	88 c8                	mov    al,cl
c001737a:	09 d0                	or     eax,edx
c001737c:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017381:	83 ec 0c             	sub    esp,0xc
c0017384:	6a 08                	push   0x8
c0017386:	e8 c4 fb ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c001738b:	83 c4 10             	add    esp,0x10
c001738e:	83 e0 01             	and    eax,0x1
c0017391:	89 c1                	mov    ecx,eax
c0017393:	c1 e1 05             	shl    ecx,0x5
c0017396:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001739b:	83 e0 df             	and    eax,0xffffffdf
c001739e:	88 c2                	mov    dl,al
c00173a0:	88 c8                	mov    al,cl
c00173a2:	09 d0                	or     eax,edx
c00173a4:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00173a9:	83 ec 0c             	sub    esp,0xc
c00173ac:	68 00 20 00 00       	push   0x2000
c00173b1:	e8 99 fb ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c00173b6:	83 c4 10             	add    esp,0x10
c00173b9:	83 e0 01             	and    eax,0x1
c00173bc:	89 c1                	mov    ecx,eax
c00173be:	c1 e1 06             	shl    ecx,0x6
c00173c1:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00173c6:	83 e0 bf             	and    eax,0xffffffbf
c00173c9:	88 c2                	mov    dl,al
c00173cb:	88 c8                	mov    al,cl
c00173cd:	09 d0                	or     eax,edx
c00173cf:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	68 00 00 01 00       	push   0x10000
c00173dc:	e8 6e fb ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c00173e1:	83 c4 10             	add    esp,0x10
c00173e4:	89 c1                	mov    ecx,eax
c00173e6:	c1 e1 07             	shl    ecx,0x7
c00173e9:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00173ee:	83 e0 7f             	and    eax,0x7f
c00173f1:	88 c2                	mov    dl,al
c00173f3:	88 c8                	mov    al,cl
c00173f5:	09 d0                	or     eax,edx
c00173f7:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00173fc:	83 ec 0c             	sub    esp,0xc
c00173ff:	6a 01                	push   0x1
c0017401:	e8 49 fb ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c0017406:	83 c4 10             	add    esp,0x10
c0017409:	83 e0 01             	and    eax,0x1
c001740c:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017413:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017418:	83 e0 f7             	and    eax,0xfffffff7
c001741b:	88 c2                	mov    dl,al
c001741d:	88 c8                	mov    al,cl
c001741f:	09 d0                	or     eax,edx
c0017421:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017426:	83 ec 0c             	sub    esp,0xc
c0017429:	68 00 08 00 00       	push   0x800
c001742e:	e8 1c fb ff ff       	call   c0016f4f <cpuidCheckEDX(unsigned int)>
c0017433:	83 c4 10             	add    esp,0x10
c0017436:	89 c1                	mov    ecx,eax
c0017438:	83 e1 01             	and    ecx,0x1
c001743b:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017440:	83 e0 fe             	and    eax,0xfffffffe
c0017443:	88 c2                	mov    dl,al
c0017445:	88 c8                	mov    al,cl
c0017447:	09 d0                	or     eax,edx
c0017449:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c001744e:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017453:	83 e0 40             	and    eax,0x40
c0017456:	0f b6 c0             	movzx  eax,al
c0017459:	85 c0                	test   eax,eax
c001745b:	74 0a                	je     c0017467 <HalDetectFeatures()+0x461>
c001745d:	c7 05 68 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d768,0x100
c0017467:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001746c:	83 e0 80             	and    eax,0xffffff80
c001746f:	0f b6 c0             	movzx  eax,al
c0017472:	85 c0                	test   eax,eax
c0017474:	74 0a                	je     c0017480 <HalDetectFeatures()+0x47a>
c0017476:	c7 05 64 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d764,0x80
c0017480:	83 ec 0c             	sub    esp,0xc
c0017483:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017487:	50                   	push   eax
c0017488:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001748c:	50                   	push   eax
c001748d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017491:	50                   	push   eax
c0017492:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017496:	50                   	push   eax
c0017497:	6a 00                	push   0x0
c0017499:	e8 13 fa ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001749e:	83 c4 20             	add    esp,0x20
c00174a1:	c7 44 24 48 70 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d770
c00174a9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00174ad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174b1:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00174b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00174c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174c5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00174c9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00174cd:	89 c6                	mov    esi,eax
c00174cf:	89 d7                	mov    edi,edx
c00174d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174d3:	89 c8                	mov    eax,ecx
c00174d5:	89 fa                	mov    edx,edi
c00174d7:	89 f3                	mov    ebx,esi
c00174d9:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00174dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00174e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174e5:	b8 74 d7 02 c0       	mov    eax,0xc002d774
c00174ea:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00174ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00174f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00174f6:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00174fe:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0017502:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0017506:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001750a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001750e:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0017512:	89 c6                	mov    esi,eax
c0017514:	89 d7                	mov    edi,edx
c0017516:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017518:	89 c8                	mov    eax,ecx
c001751a:	89 fa                	mov    edx,edi
c001751c:	89 f3                	mov    ebx,esi
c001751e:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0017522:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0017526:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001752a:	b8 78 d7 02 c0       	mov    eax,0xc002d778
c001752f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017536:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001753a:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001753e:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017546:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001754d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0017551:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017555:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001755c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0017560:	89 c6                	mov    esi,eax
c0017562:	89 d7                	mov    edi,edx
c0017564:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017566:	89 c8                	mov    eax,ecx
c0017568:	89 fa                	mov    edx,edi
c001756a:	89 f3                	mov    ebx,esi
c001756c:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0017570:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0017574:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0017578:	83 ec 08             	sub    esp,0x8
c001757b:	68 de 36 02 c0       	push   0xc00236de
c0017580:	68 70 d7 02 c0       	push   0xc002d770
c0017585:	e8 f6 91 fe ff       	call   c0000780 <strcmp>
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	85 c0                	test   eax,eax
c001758f:	74 19                	je     c00175aa <HalDetectFeatures()+0x5a4>
c0017591:	83 ec 08             	sub    esp,0x8
c0017594:	68 eb 36 02 c0       	push   0xc00236eb
c0017599:	68 70 d7 02 c0       	push   0xc002d770
c001759e:	e8 dd 91 fe ff       	call   c0000780 <strcmp>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	85 c0                	test   eax,eax
c00175a8:	75 04                	jne    c00175ae <HalDetectFeatures()+0x5a8>
c00175aa:	b0 01                	mov    al,0x1
c00175ac:	eb 02                	jmp    c00175b0 <HalDetectFeatures()+0x5aa>
c00175ae:	b0 00                	mov    al,0x0
c00175b0:	0f b6 c0             	movzx  eax,al
c00175b3:	85 c0                	test   eax,eax
c00175b5:	74 0f                	je     c00175c6 <HalDetectFeatures()+0x5c0>
c00175b7:	c7 05 84 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x2
c00175c1:	e9 0d 03 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c00175c6:	83 ec 08             	sub    esp,0x8
c00175c9:	68 f8 36 02 c0       	push   0xc00236f8
c00175ce:	68 70 d7 02 c0       	push   0xc002d770
c00175d3:	e8 a8 91 fe ff       	call   c0000780 <strcmp>
c00175d8:	83 c4 10             	add    esp,0x10
c00175db:	85 c0                	test   eax,eax
c00175dd:	74 19                	je     c00175f8 <HalDetectFeatures()+0x5f2>
c00175df:	83 ec 08             	sub    esp,0x8
c00175e2:	68 05 37 02 c0       	push   0xc0023705
c00175e7:	68 70 d7 02 c0       	push   0xc002d770
c00175ec:	e8 8f 91 fe ff       	call   c0000780 <strcmp>
c00175f1:	83 c4 10             	add    esp,0x10
c00175f4:	85 c0                	test   eax,eax
c00175f6:	75 04                	jne    c00175fc <HalDetectFeatures()+0x5f6>
c00175f8:	b0 01                	mov    al,0x1
c00175fa:	eb 02                	jmp    c00175fe <HalDetectFeatures()+0x5f8>
c00175fc:	b0 00                	mov    al,0x0
c00175fe:	0f b6 c0             	movzx  eax,al
c0017601:	85 c0                	test   eax,eax
c0017603:	74 0f                	je     c0017614 <HalDetectFeatures()+0x60e>
c0017605:	c7 05 84 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x4
c001760f:	e9 bf 02 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017614:	83 ec 08             	sub    esp,0x8
c0017617:	68 12 37 02 c0       	push   0xc0023712
c001761c:	68 70 d7 02 c0       	push   0xc002d770
c0017621:	e8 5a 91 fe ff       	call   c0000780 <strcmp>
c0017626:	83 c4 10             	add    esp,0x10
c0017629:	85 c0                	test   eax,eax
c001762b:	74 19                	je     c0017646 <HalDetectFeatures()+0x640>
c001762d:	83 ec 08             	sub    esp,0x8
c0017630:	68 1f 37 02 c0       	push   0xc002371f
c0017635:	68 70 d7 02 c0       	push   0xc002d770
c001763a:	e8 41 91 fe ff       	call   c0000780 <strcmp>
c001763f:	83 c4 10             	add    esp,0x10
c0017642:	85 c0                	test   eax,eax
c0017644:	75 04                	jne    c001764a <HalDetectFeatures()+0x644>
c0017646:	b0 01                	mov    al,0x1
c0017648:	eb 02                	jmp    c001764c <HalDetectFeatures()+0x646>
c001764a:	b0 00                	mov    al,0x0
c001764c:	0f b6 c0             	movzx  eax,al
c001764f:	85 c0                	test   eax,eax
c0017651:	74 0f                	je     c0017662 <HalDetectFeatures()+0x65c>
c0017653:	c7 05 84 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x5
c001765d:	e9 71 02 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017662:	83 ec 08             	sub    esp,0x8
c0017665:	68 2c 37 02 c0       	push   0xc002372c
c001766a:	68 70 d7 02 c0       	push   0xc002d770
c001766f:	e8 0c 91 fe ff       	call   c0000780 <strcmp>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	85 c0                	test   eax,eax
c0017679:	0f 94 c0             	sete   al
c001767c:	0f b6 c0             	movzx  eax,al
c001767f:	85 c0                	test   eax,eax
c0017681:	74 0f                	je     c0017692 <HalDetectFeatures()+0x68c>
c0017683:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c001768d:	e9 41 02 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017692:	83 ec 08             	sub    esp,0x8
c0017695:	68 39 37 02 c0       	push   0xc0023739
c001769a:	68 70 d7 02 c0       	push   0xc002d770
c001769f:	e8 dc 90 fe ff       	call   c0000780 <strcmp>
c00176a4:	83 c4 10             	add    esp,0x10
c00176a7:	85 c0                	test   eax,eax
c00176a9:	0f 94 c0             	sete   al
c00176ac:	0f b6 c0             	movzx  eax,al
c00176af:	85 c0                	test   eax,eax
c00176b1:	74 0f                	je     c00176c2 <HalDetectFeatures()+0x6bc>
c00176b3:	c7 05 84 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x3
c00176bd:	e9 11 02 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c00176c2:	83 ec 08             	sub    esp,0x8
c00176c5:	68 f8 36 02 c0       	push   0xc00236f8
c00176ca:	68 70 d7 02 c0       	push   0xc002d770
c00176cf:	e8 ac 90 fe ff       	call   c0000780 <strcmp>
c00176d4:	83 c4 10             	add    esp,0x10
c00176d7:	85 c0                	test   eax,eax
c00176d9:	0f 94 c0             	sete   al
c00176dc:	0f b6 c0             	movzx  eax,al
c00176df:	85 c0                	test   eax,eax
c00176e1:	74 0f                	je     c00176f2 <HalDetectFeatures()+0x6ec>
c00176e3:	c7 05 84 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x6
c00176ed:	e9 e1 01 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c00176f2:	83 ec 08             	sub    esp,0x8
c00176f5:	68 46 37 02 c0       	push   0xc0023746
c00176fa:	68 70 d7 02 c0       	push   0xc002d770
c00176ff:	e8 7c 90 fe ff       	call   c0000780 <strcmp>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	85 c0                	test   eax,eax
c0017709:	0f 94 c0             	sete   al
c001770c:	0f b6 c0             	movzx  eax,al
c001770f:	85 c0                	test   eax,eax
c0017711:	74 0f                	je     c0017722 <HalDetectFeatures()+0x71c>
c0017713:	c7 05 84 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x7
c001771d:	e9 b1 01 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017722:	83 ec 08             	sub    esp,0x8
c0017725:	68 53 37 02 c0       	push   0xc0023753
c001772a:	68 70 d7 02 c0       	push   0xc002d770
c001772f:	e8 4c 90 fe ff       	call   c0000780 <strcmp>
c0017734:	83 c4 10             	add    esp,0x10
c0017737:	85 c0                	test   eax,eax
c0017739:	0f 94 c0             	sete   al
c001773c:	0f b6 c0             	movzx  eax,al
c001773f:	85 c0                	test   eax,eax
c0017741:	74 0f                	je     c0017752 <HalDetectFeatures()+0x74c>
c0017743:	c7 05 84 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x8
c001774d:	e9 81 01 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017752:	83 ec 08             	sub    esp,0x8
c0017755:	68 60 37 02 c0       	push   0xc0023760
c001775a:	68 70 d7 02 c0       	push   0xc002d770
c001775f:	e8 1c 90 fe ff       	call   c0000780 <strcmp>
c0017764:	83 c4 10             	add    esp,0x10
c0017767:	85 c0                	test   eax,eax
c0017769:	0f 94 c0             	sete   al
c001776c:	0f b6 c0             	movzx  eax,al
c001776f:	85 c0                	test   eax,eax
c0017771:	74 0f                	je     c0017782 <HalDetectFeatures()+0x77c>
c0017773:	c7 05 84 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x9
c001777d:	e9 51 01 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017782:	83 ec 08             	sub    esp,0x8
c0017785:	68 6d 37 02 c0       	push   0xc002376d
c001778a:	68 70 d7 02 c0       	push   0xc002d770
c001778f:	e8 ec 8f fe ff       	call   c0000780 <strcmp>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	85 c0                	test   eax,eax
c0017799:	0f 94 c0             	sete   al
c001779c:	0f b6 c0             	movzx  eax,al
c001779f:	85 c0                	test   eax,eax
c00177a1:	74 0f                	je     c00177b2 <HalDetectFeatures()+0x7ac>
c00177a3:	c7 05 84 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xa
c00177ad:	e9 21 01 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c00177b2:	83 ec 08             	sub    esp,0x8
c00177b5:	68 7a 37 02 c0       	push   0xc002377a
c00177ba:	68 70 d7 02 c0       	push   0xc002d770
c00177bf:	e8 bc 8f fe ff       	call   c0000780 <strcmp>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	85 c0                	test   eax,eax
c00177c9:	0f 94 c0             	sete   al
c00177cc:	0f b6 c0             	movzx  eax,al
c00177cf:	85 c0                	test   eax,eax
c00177d1:	74 0f                	je     c00177e2 <HalDetectFeatures()+0x7dc>
c00177d3:	c7 05 84 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xb
c00177dd:	e9 f1 00 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c00177e2:	83 ec 08             	sub    esp,0x8
c00177e5:	68 87 37 02 c0       	push   0xc0023787
c00177ea:	68 70 d7 02 c0       	push   0xc002d770
c00177ef:	e8 8c 8f fe ff       	call   c0000780 <strcmp>
c00177f4:	83 c4 10             	add    esp,0x10
c00177f7:	85 c0                	test   eax,eax
c00177f9:	0f 94 c0             	sete   al
c00177fc:	0f b6 c0             	movzx  eax,al
c00177ff:	85 c0                	test   eax,eax
c0017801:	74 0f                	je     c0017812 <HalDetectFeatures()+0x80c>
c0017803:	c7 05 84 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xc
c001780d:	e9 c1 00 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017812:	83 ec 08             	sub    esp,0x8
c0017815:	68 94 37 02 c0       	push   0xc0023794
c001781a:	68 70 d7 02 c0       	push   0xc002d770
c001781f:	e8 5c 8f fe ff       	call   c0000780 <strcmp>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	85 c0                	test   eax,eax
c0017829:	0f 94 c0             	sete   al
c001782c:	0f b6 c0             	movzx  eax,al
c001782f:	85 c0                	test   eax,eax
c0017831:	74 0f                	je     c0017842 <HalDetectFeatures()+0x83c>
c0017833:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c001783d:	e9 91 00 00 00       	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c0017842:	83 ec 08             	sub    esp,0x8
c0017845:	68 a1 37 02 c0       	push   0xc00237a1
c001784a:	68 70 d7 02 c0       	push   0xc002d770
c001784f:	e8 2c 8f fe ff       	call   c0000780 <strcmp>
c0017854:	83 c4 10             	add    esp,0x10
c0017857:	85 c0                	test   eax,eax
c0017859:	0f 94 c0             	sete   al
c001785c:	0f b6 c0             	movzx  eax,al
c001785f:	85 c0                	test   eax,eax
c0017861:	74 0c                	je     c001786f <HalDetectFeatures()+0x869>
c0017863:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c001786d:	eb 64                	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c001786f:	83 ec 08             	sub    esp,0x8
c0017872:	68 ae 37 02 c0       	push   0xc00237ae
c0017877:	68 70 d7 02 c0       	push   0xc002d770
c001787c:	e8 ff 8e fe ff       	call   c0000780 <strcmp>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	85 c0                	test   eax,eax
c0017886:	0f 94 c0             	sete   al
c0017889:	0f b6 c0             	movzx  eax,al
c001788c:	85 c0                	test   eax,eax
c001788e:	74 0c                	je     c001789c <HalDetectFeatures()+0x896>
c0017890:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c001789a:	eb 37                	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c001789c:	83 ec 08             	sub    esp,0x8
c001789f:	68 bb 37 02 c0       	push   0xc00237bb
c00178a4:	68 70 d7 02 c0       	push   0xc002d770
c00178a9:	e8 d2 8e fe ff       	call   c0000780 <strcmp>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	85 c0                	test   eax,eax
c00178b3:	0f 94 c0             	sete   al
c00178b6:	0f b6 c0             	movzx  eax,al
c00178b9:	85 c0                	test   eax,eax
c00178bb:	74 0c                	je     c00178c9 <HalDetectFeatures()+0x8c3>
c00178bd:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c00178c7:	eb 0a                	jmp    c00178d3 <HalDetectFeatures()+0x8cd>
c00178c9:	c7 05 84 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x0
c00178d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178d7:	83 f8 06             	cmp    eax,0x6
c00178da:	0f 86 cc 00 00 00    	jbe    c00179ac <HalDetectFeatures()+0x9a6>
c00178e0:	83 ec 0c             	sub    esp,0xc
c00178e3:	68 80 00 00 00       	push   0x80
c00178e8:	e8 bd f6 ff ff       	call   c0016faa <cpuidCheckExtendedEBX(unsigned int)>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	89 c1                	mov    ecx,eax
c00178f2:	83 e1 01             	and    ecx,0x1
c00178f5:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c00178fa:	83 e0 fe             	and    eax,0xfffffffe
c00178fd:	88 c2                	mov    dl,al
c00178ff:	88 c8                	mov    al,cl
c0017901:	09 d0                	or     eax,edx
c0017903:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017908:	83 ec 0c             	sub    esp,0xc
c001790b:	68 00 00 10 00       	push   0x100000
c0017910:	e8 95 f6 ff ff       	call   c0016faa <cpuidCheckExtendedEBX(unsigned int)>
c0017915:	83 c4 10             	add    esp,0x10
c0017918:	83 e0 01             	and    eax,0x1
c001791b:	89 c1                	mov    ecx,eax
c001791d:	c1 e1 06             	shl    ecx,0x6
c0017920:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017925:	83 e0 bf             	and    eax,0xffffffbf
c0017928:	88 c2                	mov    dl,al
c001792a:	88 c8                	mov    al,cl
c001792c:	09 d0                	or     eax,edx
c001792e:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017933:	83 ec 0c             	sub    esp,0xc
c0017936:	68 00 00 04 00       	push   0x40000
c001793b:	e8 6a f6 ff ff       	call   c0016faa <cpuidCheckExtendedEBX(unsigned int)>
c0017940:	83 c4 10             	add    esp,0x10
c0017943:	83 e0 01             	and    eax,0x1
c0017946:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017949:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c001794e:	83 e0 fd             	and    eax,0xfffffffd
c0017951:	88 c2                	mov    dl,al
c0017953:	88 c8                	mov    al,cl
c0017955:	09 d0                	or     eax,edx
c0017957:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	6a 04                	push   0x4
c0017961:	e8 72 f6 ff ff       	call   c0016fd8 <cpuidCheckExtendedECX(unsigned int)>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	83 e0 01             	and    eax,0x1
c001796c:	89 c1                	mov    ecx,eax
c001796e:	c1 e1 05             	shl    ecx,0x5
c0017971:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017976:	83 e0 df             	and    eax,0xffffffdf
c0017979:	88 c2                	mov    dl,al
c001797b:	88 c8                	mov    al,cl
c001797d:	09 d0                	or     eax,edx
c001797f:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017984:	83 ec 0c             	sub    esp,0xc
c0017987:	6a 20                	push   0x20
c0017989:	e8 4a f6 ff ff       	call   c0016fd8 <cpuidCheckExtendedECX(unsigned int)>
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	83 e0 01             	and    eax,0x1
c0017994:	89 c1                	mov    ecx,eax
c0017996:	c1 e1 04             	shl    ecx,0x4
c0017999:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c001799e:	83 e0 ef             	and    eax,0xffffffef
c00179a1:	88 c2                	mov    dl,al
c00179a3:	88 c8                	mov    al,cl
c00179a5:	09 d0                	or     eax,edx
c00179a7:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c00179ac:	83 ec 0c             	sub    esp,0xc
c00179af:	8d 44 24 14          	lea    eax,[esp+0x14]
c00179b3:	50                   	push   eax
c00179b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00179b8:	50                   	push   eax
c00179b9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00179bd:	50                   	push   eax
c00179be:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00179c2:	50                   	push   eax
c00179c3:	6a 01                	push   0x1
c00179c5:	e8 e7 f4 ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00179ca:	83 c4 20             	add    esp,0x20
c00179cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179d1:	83 e0 0f             	and    eax,0xf
c00179d4:	a2 80 d7 02 c0       	mov    ds:0xc002d780,al
c00179d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179dd:	c1 e8 04             	shr    eax,0x4
c00179e0:	83 e0 0f             	and    eax,0xf
c00179e3:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c00179e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179ec:	c1 e8 08             	shr    eax,0x8
c00179ef:	83 e0 0f             	and    eax,0xf
c00179f2:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c00179f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179fb:	c1 e8 0c             	shr    eax,0xc
c00179fe:	83 e0 03             	and    eax,0x3
c0017a01:	a2 7f d7 02 c0       	mov    ds:0xc002d77f,al
c0017a06:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017a0b:	0f b6 c0             	movzx  eax,al
c0017a0e:	83 f8 06             	cmp    eax,0x6
c0017a11:	74 0d                	je     c0017a20 <HalDetectFeatures()+0xa1a>
c0017a13:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017a18:	0f b6 c0             	movzx  eax,al
c0017a1b:	83 f8 0f             	cmp    eax,0xf
c0017a1e:	75 18                	jne    c0017a38 <HalDetectFeatures()+0xa32>
c0017a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a24:	c1 e8 10             	shr    eax,0x10
c0017a27:	c1 e0 04             	shl    eax,0x4
c0017a2a:	88 c2                	mov    dl,al
c0017a2c:	a0 7e d7 02 c0       	mov    al,ds:0xc002d77e
c0017a31:	09 d0                	or     eax,edx
c0017a33:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017a38:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017a3d:	0f b6 c0             	movzx  eax,al
c0017a40:	83 f8 0f             	cmp    eax,0xf
c0017a43:	75 15                	jne    c0017a5a <HalDetectFeatures()+0xa54>
c0017a45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a49:	c1 e8 14             	shr    eax,0x14
c0017a4c:	88 c2                	mov    dl,al
c0017a4e:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017a53:	01 d0                	add    eax,edx
c0017a55:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017a5a:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017a62:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0017a6a:	85 c0                	test   eax,eax
c0017a6c:	74 2d                	je     c0017a9b <HalDetectFeatures()+0xa95>
c0017a6e:	83 ec 0c             	sub    esp,0xc
c0017a71:	68 00 00 00 40       	push   0x40000000
c0017a76:	e8 01 f5 ff ff       	call   c0016f7c <cpuidCheckECX(unsigned int)>
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	83 e0 01             	and    eax,0x1
c0017a81:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017a88:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017a8d:	83 e0 fb             	and    eax,0xfffffffb
c0017a90:	88 c2                	mov    dl,al
c0017a92:	88 c8                	mov    al,cl
c0017a94:	09 d0                	or     eax,edx
c0017a96:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017a9b:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017aa0:	83 c8 04             	or     eax,0x4
c0017aa3:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017aa8:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017aad:	83 c8 08             	or     eax,0x8
c0017ab0:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ab5:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017aba:	83 c8 10             	or     eax,0x10
c0017abd:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017ac9:	50                   	push   eax
c0017aca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017ace:	50                   	push   eax
c0017acf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017ad3:	50                   	push   eax
c0017ad4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017ad8:	50                   	push   eax
c0017ad9:	68 00 00 00 80       	push   0x80000000
c0017ade:	e8 ce f3 ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017ae3:	83 c4 20             	add    esp,0x20
c0017ae6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aea:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017aef:	0f 86 96 01 00 00    	jbe    c0017c8b <HalDetectFeatures()+0xc85>
c0017af5:	83 ec 0c             	sub    esp,0xc
c0017af8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017afc:	50                   	push   eax
c0017afd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017b01:	50                   	push   eax
c0017b02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017b06:	50                   	push   eax
c0017b07:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017b0b:	50                   	push   eax
c0017b0c:	68 01 00 00 80       	push   0x80000001
c0017b11:	e8 9b f3 ff ff       	call   c0016eb1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017b16:	83 c4 20             	add    esp,0x20
c0017b19:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b1e:	83 e0 7f             	and    eax,0x7f
c0017b21:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b26:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017b2b:	83 e0 fb             	and    eax,0xfffffffb
c0017b2e:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017b33:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017b38:	83 e0 fd             	and    eax,0xfffffffd
c0017b3b:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017b40:	e9 46 01 00 00       	jmp    c0017c8b <HalDetectFeatures()+0xc85>
c0017b45:	83 ec 08             	sub    esp,0x8
c0017b48:	68 2c 37 02 c0       	push   0xc002372c
c0017b4d:	68 70 d7 02 c0       	push   0xc002d770
c0017b52:	e8 f9 8a fe ff       	call   c0000650 <strcpy>
c0017b57:	83 c4 10             	add    esp,0x10
c0017b5a:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017b64:	e8 5a 86 fe ff       	call   c00001c3 <is486>
c0017b69:	85 c0                	test   eax,eax
c0017b6b:	0f 95 c0             	setne  al
c0017b6e:	0f b6 c0             	movzx  eax,al
c0017b71:	85 c0                	test   eax,eax
c0017b73:	0f 84 8d 00 00 00    	je     c0017c06 <HalDetectFeatures()+0xc00>
c0017b79:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b7e:	83 c8 04             	or     eax,0x4
c0017b81:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b86:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b8b:	83 c8 08             	or     eax,0x8
c0017b8e:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b93:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b98:	83 c8 10             	or     eax,0x10
c0017b9b:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ba0:	0f 20 c0             	mov    eax,cr0
c0017ba3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ba7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bab:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017bb2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017bb9:	83 e0 04             	and    eax,0x4
c0017bbc:	74 1e                	je     c0017bdc <HalDetectFeatures()+0xbd6>
c0017bbe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017bc5:	83 e0 10             	and    eax,0x10
c0017bc8:	75 12                	jne    c0017bdc <HalDetectFeatures()+0xbd6>
c0017bca:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017bcf:	83 e0 f7             	and    eax,0xfffffff7
c0017bd2:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017bd7:	e9 af 00 00 00       	jmp    c0017c8b <HalDetectFeatures()+0xc85>
c0017bdc:	e8 bd 85 fe ff       	call   c000019e <hasLegacyFPU>
c0017be1:	83 e0 01             	and    eax,0x1
c0017be4:	83 e0 01             	and    eax,0x1
c0017be7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017bee:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017bf3:	83 e0 f7             	and    eax,0xfffffff7
c0017bf6:	88 c2                	mov    dl,al
c0017bf8:	88 c8                	mov    al,cl
c0017bfa:	09 d0                	or     eax,edx
c0017bfc:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017c01:	e9 85 00 00 00       	jmp    c0017c8b <HalDetectFeatures()+0xc85>
c0017c06:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c0b:	83 e0 fb             	and    eax,0xfffffffb
c0017c0e:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c13:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c18:	83 e0 f7             	and    eax,0xfffffff7
c0017c1b:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c20:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c25:	83 e0 ef             	and    eax,0xffffffef
c0017c28:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c2d:	0f 20 c0             	mov    eax,cr0
c0017c30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c38:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017c3f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017c46:	83 e0 04             	and    eax,0x4
c0017c49:	74 1b                	je     c0017c66 <HalDetectFeatures()+0xc60>
c0017c4b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017c52:	83 e0 10             	and    eax,0x10
c0017c55:	75 0f                	jne    c0017c66 <HalDetectFeatures()+0xc60>
c0017c57:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017c5c:	83 e0 f7             	and    eax,0xfffffff7
c0017c5f:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017c64:	eb 25                	jmp    c0017c8b <HalDetectFeatures()+0xc85>
c0017c66:	e8 33 85 fe ff       	call   c000019e <hasLegacyFPU>
c0017c6b:	83 e0 01             	and    eax,0x1
c0017c6e:	83 e0 01             	and    eax,0x1
c0017c71:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017c78:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017c7d:	83 e0 f7             	and    eax,0xfffffff7
c0017c80:	88 c2                	mov    dl,al
c0017c82:	88 c8                	mov    al,cl
c0017c84:	09 d0                	or     eax,edx
c0017c86:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017c8b:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017c90:	83 e0 08             	and    eax,0x8
c0017c93:	0f b6 c0             	movzx  eax,al
c0017c96:	85 c0                	test   eax,eax
c0017c98:	75 25                	jne    c0017cbf <HalDetectFeatures()+0xcb9>
c0017c9a:	e8 ff 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017c9f:	83 e0 01             	and    eax,0x1
c0017ca2:	83 e0 01             	and    eax,0x1
c0017ca5:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017cac:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017cb1:	83 e0 f7             	and    eax,0xfffffff7
c0017cb4:	88 c2                	mov    dl,al
c0017cb6:	88 c8                	mov    al,cl
c0017cb8:	09 d0                	or     eax,edx
c0017cba:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017cbf:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017cc4:	83 e0 08             	and    eax,0x8
c0017cc7:	0f b6 c0             	movzx  eax,al
c0017cca:	85 c0                	test   eax,eax
c0017ccc:	74 0d                	je     c0017cdb <HalDetectFeatures()+0xcd5>
c0017cce:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017cd3:	83 c8 10             	or     eax,0x10
c0017cd6:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017cdb:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017ce0:	83 e0 10             	and    eax,0x10
c0017ce3:	0f b6 c0             	movzx  eax,al
c0017ce6:	85 c0                	test   eax,eax
c0017ce8:	75 23                	jne    c0017d0d <HalDetectFeatures()+0xd07>
c0017cea:	e8 a7 7f 00 00       	call   c001fc96 <x87Detect>
c0017cef:	83 e0 01             	and    eax,0x1
c0017cf2:	83 e0 01             	and    eax,0x1
c0017cf5:	89 c1                	mov    ecx,eax
c0017cf7:	c1 e1 04             	shl    ecx,0x4
c0017cfa:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017cff:	83 e0 ef             	and    eax,0xffffffef
c0017d02:	88 c2                	mov    dl,al
c0017d04:	88 c8                	mov    al,cl
c0017d06:	09 d0                	or     eax,edx
c0017d08:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017d0d:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017d12:	83 e0 01             	and    eax,0x1
c0017d15:	0f b6 c0             	movzx  eax,al
c0017d18:	85 c0                	test   eax,eax
c0017d1a:	75 2d                	jne    c0017d49 <HalDetectFeatures()+0xd43>
c0017d1c:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017d21:	83 e0 02             	and    eax,0x2
c0017d24:	0f b6 c0             	movzx  eax,al
c0017d27:	85 c0                	test   eax,eax
c0017d29:	75 1e                	jne    c0017d49 <HalDetectFeatures()+0xd43>
c0017d2b:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017d30:	83 e0 04             	and    eax,0x4
c0017d33:	0f b6 c0             	movzx  eax,al
c0017d36:	85 c0                	test   eax,eax
c0017d38:	75 0f                	jne    c0017d49 <HalDetectFeatures()+0xd43>
c0017d3a:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017d3f:	83 e0 08             	and    eax,0x8
c0017d42:	0f b6 c0             	movzx  eax,al
c0017d45:	85 c0                	test   eax,eax
c0017d47:	74 0d                	je     c0017d56 <HalDetectFeatures()+0xd50>
c0017d49:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017d4e:	83 c8 80             	or     eax,0xffffff80
c0017d51:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017d56:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017d5b:	83 e0 10             	and    eax,0x10
c0017d5e:	0f b6 c0             	movzx  eax,al
c0017d61:	85 c0                	test   eax,eax
c0017d63:	74 2f                	je     c0017d94 <HalDetectFeatures()+0xd8e>
c0017d65:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017d6a:	83 e0 80             	and    eax,0xffffff80
c0017d6d:	0f b6 c0             	movzx  eax,al
c0017d70:	85 c0                	test   eax,eax
c0017d72:	75 20                	jne    c0017d94 <HalDetectFeatures()+0xd8e>
c0017d74:	e8 d7 7e 00 00       	call   c001fc50 <sseDetect>
c0017d79:	83 e0 01             	and    eax,0x1
c0017d7c:	89 c1                	mov    ecx,eax
c0017d7e:	c1 e1 07             	shl    ecx,0x7
c0017d81:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017d86:	83 e0 7f             	and    eax,0x7f
c0017d89:	88 c2                	mov    dl,al
c0017d8b:	88 c8                	mov    al,cl
c0017d8d:	09 d0                	or     eax,edx
c0017d8f:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017d94:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017d99:	83 e0 80             	and    eax,0xffffff80
c0017d9c:	0f b6 c0             	movzx  eax,al
c0017d9f:	85 c0                	test   eax,eax
c0017da1:	74 1c                	je     c0017dbf <HalDetectFeatures()+0xdb9>
c0017da3:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017da8:	83 e0 20             	and    eax,0x20
c0017dab:	0f b6 c0             	movzx  eax,al
c0017dae:	85 c0                	test   eax,eax
c0017db0:	75 0d                	jne    c0017dbf <HalDetectFeatures()+0xdb9>
c0017db2:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017db7:	83 e0 df             	and    eax,0xffffffdf
c0017dba:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017dbf:	c6 05 88 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d788,0x0
c0017dc6:	90                   	nop
c0017dc7:	81 c4 90 00 00 00    	add    esp,0x90
c0017dcd:	5b                   	pop    ebx
c0017dce:	5e                   	pop    esi
c0017dcf:	5f                   	pop    edi
c0017dd0:	c3                   	ret    

c0017dd1 <HalEnableNMI()>:
c0017dd1:	c6 05 6c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d76c,0x1
c0017dd8:	6a 10                	push   0x10
c0017dda:	e8 20 ef ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c0017ddf:	83 c4 04             	add    esp,0x4
c0017de2:	90                   	nop
c0017de3:	c3                   	ret    

c0017de4 <HalDisableNMI()>:
c0017de4:	c6 05 6c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d76c,0x0
c0017deb:	6a 10                	push   0x10
c0017ded:	e8 0d ef ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c0017df2:	83 c4 04             	add    esp,0x4
c0017df5:	90                   	nop
c0017df6:	c3                   	ret    

c0017df7 <HalGetNMIState()>:
c0017df7:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0017dfc:	c3                   	ret    

c0017dfd <x86rdmsr(unsigned int)>:
c0017dfd:	83 ec 1c             	sub    esp,0x1c
c0017e00:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e05:	83 e0 08             	and    eax,0x8
c0017e08:	0f b6 c0             	movzx  eax,al
c0017e0b:	85 c0                	test   eax,eax
c0017e0d:	75 10                	jne    c0017e1f <x86rdmsr(unsigned int)+0x22>
c0017e0f:	83 ec 0c             	sub    esp,0xc
c0017e12:	68 c7 37 02 c0       	push   0xc00237c7
c0017e17:	e8 da 6d ff ff       	call   c000ebf6 <KePanic(char const*)>
c0017e1c:	83 c4 10             	add    esp,0x10
c0017e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e23:	89 c1                	mov    ecx,eax
c0017e25:	0f 32                	rdmsr  
c0017e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e37:	83 c4 1c             	add    esp,0x1c
c0017e3a:	c3                   	ret    

c0017e3b <x86wrmsr(unsigned int, unsigned long long)>:
c0017e3b:	83 ec 1c             	sub    esp,0x1c
c0017e3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e4e:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e53:	83 e0 08             	and    eax,0x8
c0017e56:	0f b6 c0             	movzx  eax,al
c0017e59:	85 c0                	test   eax,eax
c0017e5b:	75 10                	jne    c0017e6d <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017e5d:	83 ec 0c             	sub    esp,0xc
c0017e60:	68 cd 37 02 c0       	push   0xc00237cd
c0017e65:	e8 8c 6d ff ff       	call   c000ebf6 <KePanic(char const*)>
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e79:	0f 30                	wrmsr  
c0017e7b:	90                   	nop
c0017e7c:	83 c4 1c             	add    esp,0x1c
c0017e7f:	c3                   	ret    

c0017e80 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	83 ec 0c             	sub    esp,0xc
c0017e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e8a:	e8 40 e7 ff ff       	call   c00165cf <Vm::faultHandler(regs*)>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	83 c4 0c             	add    esp,0xc
c0017e95:	c3                   	ret    

c0017e96 <HalFindRSDP()>:
c0017e96:	83 ec 1c             	sub    esp,0x1c
c0017e99:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c0017e9e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017ea3:	7e 0c                	jle    c0017eb1 <HalFindRSDP()+0x1b>
c0017ea5:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0017eaa:	25 00 04 00 00       	and    eax,0x400
c0017eaf:	74 0d                	je     c0017ebe <HalFindRSDP()+0x28>
c0017eb1:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017eb6:	83 e0 fb             	and    eax,0xfffffffb
c0017eb9:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017ebe:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017ec3:	83 e0 04             	and    eax,0x4
c0017ec6:	0f b6 c0             	movzx  eax,al
c0017ec9:	85 c0                	test   eax,eax
c0017ecb:	75 07                	jne    c0017ed4 <HalFindRSDP()+0x3e>
c0017ecd:	b8 00 00 00 00       	mov    eax,0x0
c0017ed2:	eb 53                	jmp    c0017f27 <HalFindRSDP()+0x91>
c0017ed4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017edc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017ee4:	77 2f                	ja     c0017f15 <HalFindRSDP()+0x7f>
c0017ee6:	83 ec 04             	sub    esp,0x4
c0017ee9:	6a 08                	push   0x8
c0017eeb:	68 d3 37 02 c0       	push   0xc00237d3
c0017ef0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ef4:	e8 87 84 fe ff       	call   c0000380 <memcmp>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	85 c0                	test   eax,eax
c0017efe:	0f 94 c0             	sete   al
c0017f01:	0f b6 c0             	movzx  eax,al
c0017f04:	85 c0                	test   eax,eax
c0017f06:	74 06                	je     c0017f0e <HalFindRSDP()+0x78>
c0017f08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f0c:	eb 19                	jmp    c0017f27 <HalFindRSDP()+0x91>
c0017f0e:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017f13:	eb c7                	jmp    c0017edc <HalFindRSDP()+0x46>
c0017f15:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f1a:	83 e0 fb             	and    eax,0xfffffffb
c0017f1d:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017f22:	b8 00 00 00 00       	mov    eax,0x0
c0017f27:	83 c4 1c             	add    esp,0x1c
c0017f2a:	c3                   	ret    

c0017f2b <HalHandlePageFault(void*, void*)>:
c0017f2b:	83 ec 1c             	sub    esp,0x1c
c0017f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f32:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f35:	83 ec 08             	sub    esp,0x8
c0017f38:	50                   	push   eax
c0017f39:	68 18 3a 02 c0       	push   0xc0023a18
c0017f3e:	e8 0b f0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017f43:	83 c4 10             	add    esp,0x10
c0017f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f4d:	83 ec 08             	sub    esp,0x8
c0017f50:	50                   	push   eax
c0017f51:	68 dc 37 02 c0       	push   0xc00237dc
c0017f56:	e8 f3 ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017f63:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017f68:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017f6e:	0f 20 d2             	mov    edx,cr2
c0017f71:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017f75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f79:	83 ec 08             	sub    esp,0x8
c0017f7c:	52                   	push   edx
c0017f7d:	50                   	push   eax
c0017f7e:	e8 79 ad ff ff       	call   c0012cfc <VAS::tryLoadBackOffDisk(unsigned long)>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f91:	83 ec 08             	sub    esp,0x8
c0017f94:	50                   	push   eax
c0017f95:	68 f1 37 02 c0       	push   0xc00237f1
c0017f9a:	e8 af ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017f9f:	83 c4 10             	add    esp,0x10
c0017fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fa9:	83 ec 08             	sub    esp,0x8
c0017fac:	50                   	push   eax
c0017fad:	68 0b 38 02 c0       	push   0xc002380b
c0017fb2:	e8 97 ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017fb7:	83 c4 10             	add    esp,0x10
c0017fba:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017fbf:	83 ec 08             	sub    esp,0x8
c0017fc2:	50                   	push   eax
c0017fc3:	68 20 38 02 c0       	push   0xc0023820
c0017fc8:	e8 81 ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017fd4:	83 c4 1c             	add    esp,0x1c
c0017fd7:	c3                   	ret    

c0017fd8 <HalHandleOpcodeFault(void*, void*)>:
c0017fd8:	83 ec 1c             	sub    esp,0x1c
c0017fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fe3:	a0 88 d7 02 c0       	mov    al,ds:0xc002d788
c0017fe8:	0f b6 c0             	movzx  eax,al
c0017feb:	85 c0                	test   eax,eax
c0017fed:	74 25                	je     c0018014 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017fef:	83 ec 0c             	sub    esp,0xc
c0017ff2:	68 4c 3a 02 c0       	push   0xc0023a4c
c0017ff7:	e8 52 ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017ffc:	83 c4 10             	add    esp,0x10
c0017fff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018003:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018006:	8d 50 19             	lea    edx,[eax+0x19]
c0018009:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001800d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018010:	b0 01                	mov    al,0x1
c0018012:	eb 02                	jmp    c0018016 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0018014:	b0 00                	mov    al,0x0
c0018016:	83 c4 1c             	add    esp,0x1c
c0018019:	c3                   	ret    

c001801a <HalDisplayDebugInfo(void*)>:
c001801a:	83 ec 2c             	sub    esp,0x2c
c001801d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018021:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018025:	0f 20 c0             	mov    eax,cr0
c0018028:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001802c:	0f 20 d0             	mov    eax,cr2
c001802f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018033:	0f 20 d8             	mov    eax,cr3
c0018036:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001803a:	0f 20 e0             	mov    eax,cr4
c001803d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018041:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018045:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018048:	83 ec 08             	sub    esp,0x8
c001804b:	50                   	push   eax
c001804c:	68 3b 38 02 c0       	push   0xc002383b
c0018051:	e8 f8 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018056:	83 c4 10             	add    esp,0x10
c0018059:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001805d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018060:	83 ec 08             	sub    esp,0x8
c0018063:	50                   	push   eax
c0018064:	68 2c 38 02 c0       	push   0xc002382c
c0018069:	e8 e0 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001806e:	83 c4 10             	add    esp,0x10
c0018071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018075:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018078:	83 ec 08             	sub    esp,0x8
c001807b:	50                   	push   eax
c001807c:	68 37 38 02 c0       	push   0xc0023837
c0018081:	e8 c8 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018086:	83 c4 10             	add    esp,0x10
c0018089:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001808d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018090:	83 ec 08             	sub    esp,0x8
c0018093:	50                   	push   eax
c0018094:	68 46 38 02 c0       	push   0xc0023846
c0018099:	e8 b0 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001809e:	83 c4 10             	add    esp,0x10
c00180a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180a5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00180a8:	83 ec 08             	sub    esp,0x8
c00180ab:	50                   	push   eax
c00180ac:	68 51 38 02 c0       	push   0xc0023851
c00180b1:	e8 98 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180b6:	83 c4 10             	add    esp,0x10
c00180b9:	83 ec 08             	sub    esp,0x8
c00180bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180c0:	68 5c 38 02 c0       	push   0xc002385c
c00180c5:	e8 84 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180ca:	83 c4 10             	add    esp,0x10
c00180cd:	83 ec 08             	sub    esp,0x8
c00180d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180d4:	68 67 38 02 c0       	push   0xc0023867
c00180d9:	e8 70 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180de:	83 c4 10             	add    esp,0x10
c00180e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180e5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00180e8:	c1 e0 05             	shl    eax,0x5
c00180eb:	8d 90 60 4d 02 c0    	lea    edx,[eax-0x3ffdb2a0]
c00180f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180f5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00180f8:	83 ec 04             	sub    esp,0x4
c00180fb:	52                   	push   edx
c00180fc:	50                   	push   eax
c00180fd:	68 72 38 02 c0       	push   0xc0023872
c0018102:	e8 47 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001810f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018115:	83 ec 0c             	sub    esp,0xc
c0018118:	50                   	push   eax
c0018119:	e8 8b 8f ff ff       	call   c00110a9 <setActiveTerminal(VgaText*)>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018126:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001812c:	83 ec 08             	sub    esp,0x8
c001812f:	68 81 38 02 c0       	push   0xc0023881
c0018134:	50                   	push   eax
c0018135:	e8 ac 92 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001813a:	83 c4 10             	add    esp,0x10
c001813d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018142:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018148:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001814c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001814f:	83 ec 08             	sub    esp,0x8
c0018152:	52                   	push   edx
c0018153:	50                   	push   eax
c0018154:	e8 47 92 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018161:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018167:	83 ec 08             	sub    esp,0x8
c001816a:	68 8f 38 02 c0       	push   0xc002388f
c001816f:	50                   	push   eax
c0018170:	e8 71 92 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c0018175:	83 c4 10             	add    esp,0x10
c0018178:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001817d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018183:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018188:	8b 12                	mov    edx,DWORD PTR [edx]
c001818a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001818d:	83 c2 0c             	add    edx,0xc
c0018190:	83 ec 08             	sub    esp,0x8
c0018193:	52                   	push   edx
c0018194:	50                   	push   eax
c0018195:	e8 4c 92 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001819a:	83 c4 10             	add    esp,0x10
c001819d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00181a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181a8:	83 ec 08             	sub    esp,0x8
c00181ab:	68 98 38 02 c0       	push   0xc0023898
c00181b0:	50                   	push   eax
c00181b1:	e8 30 92 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00181b6:	83 c4 10             	add    esp,0x10
c00181b9:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00181be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181c8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00181cb:	83 ec 08             	sub    esp,0x8
c00181ce:	52                   	push   edx
c00181cf:	50                   	push   eax
c00181d0:	e8 cb 91 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00181dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181e3:	83 ec 08             	sub    esp,0x8
c00181e6:	68 a0 38 02 c0       	push   0xc00238a0
c00181eb:	50                   	push   eax
c00181ec:	e8 f5 91 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00181f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018203:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018206:	83 ec 08             	sub    esp,0x8
c0018209:	52                   	push   edx
c001820a:	50                   	push   eax
c001820b:	e8 90 91 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c0018210:	83 c4 10             	add    esp,0x10
c0018213:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018218:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001821e:	83 ec 08             	sub    esp,0x8
c0018221:	68 a8 38 02 c0       	push   0xc00238a8
c0018226:	50                   	push   eax
c0018227:	e8 ba 91 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018234:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001823a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001823e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018241:	83 ec 08             	sub    esp,0x8
c0018244:	52                   	push   edx
c0018245:	50                   	push   eax
c0018246:	e8 55 91 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018253:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018259:	83 ec 08             	sub    esp,0x8
c001825c:	68 b0 38 02 c0       	push   0xc00238b0
c0018261:	50                   	push   eax
c0018262:	e8 7f 91 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001826f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018275:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018279:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001827c:	83 ec 08             	sub    esp,0x8
c001827f:	52                   	push   edx
c0018280:	50                   	push   eax
c0018281:	e8 1a 91 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c0018286:	83 c4 10             	add    esp,0x10
c0018289:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001828e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018294:	83 ec 08             	sub    esp,0x8
c0018297:	68 b8 38 02 c0       	push   0xc00238b8
c001829c:	50                   	push   eax
c001829d:	e8 44 91 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00182a2:	83 c4 10             	add    esp,0x10
c00182a5:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182b4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00182b7:	83 ec 08             	sub    esp,0x8
c00182ba:	52                   	push   edx
c00182bb:	50                   	push   eax
c00182bc:	e8 df 90 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182cf:	83 ec 08             	sub    esp,0x8
c00182d2:	68 c0 38 02 c0       	push   0xc00238c0
c00182d7:	50                   	push   eax
c00182d8:	e8 09 91 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00182dd:	83 c4 10             	add    esp,0x10
c00182e0:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182ef:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00182f2:	83 ec 08             	sub    esp,0x8
c00182f5:	52                   	push   edx
c00182f6:	50                   	push   eax
c00182f7:	e8 a4 90 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018304:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001830a:	83 ec 08             	sub    esp,0x8
c001830d:	68 c8 38 02 c0       	push   0xc00238c8
c0018312:	50                   	push   eax
c0018313:	e8 ce 90 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c0018318:	83 c4 10             	add    esp,0x10
c001831b:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018320:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018326:	83 ec 08             	sub    esp,0x8
c0018329:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001832d:	50                   	push   eax
c001832e:	e8 6d 90 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001833b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018341:	83 ec 08             	sub    esp,0x8
c0018344:	68 d1 38 02 c0       	push   0xc00238d1
c0018349:	50                   	push   eax
c001834a:	e8 97 90 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018357:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001835d:	83 ec 08             	sub    esp,0x8
c0018360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018364:	50                   	push   eax
c0018365:	e8 36 90 ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c001836a:	83 c4 10             	add    esp,0x10
c001836d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018372:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018378:	83 ec 08             	sub    esp,0x8
c001837b:	68 d9 38 02 c0       	push   0xc00238d9
c0018380:	50                   	push   eax
c0018381:	e8 60 90 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c0018386:	83 c4 10             	add    esp,0x10
c0018389:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001838e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018394:	83 ec 08             	sub    esp,0x8
c0018397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001839b:	50                   	push   eax
c001839c:	e8 ff 8f ff ff       	call   c00113a0 <VgaText::putx(unsigned int)>
c00183a1:	83 c4 10             	add    esp,0x10
c00183a4:	fa                   	cli    
c00183a5:	f4                   	hlt    
c00183a6:	eb fe                	jmp    c00183a6 <HalDisplayDebugInfo(void*)+0x38c>

c00183a8 <HalReceivedNMI()>:
c00183a8:	83 ec 1c             	sub    esp,0x1c
c00183ab:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c00183b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183b6:	89 c2                	mov    edx,eax
c00183b8:	ec                   	in     al,dx
c00183b9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00183bd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00183c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183c5:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00183cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183d0:	89 c2                	mov    edx,eax
c00183d2:	ec                   	in     al,dx
c00183d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00183d7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00183db:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183df:	83 ec 0c             	sub    esp,0xc
c00183e2:	68 e1 38 02 c0       	push   0xc00238e1
c00183e7:	e8 62 eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00183f4:	83 e0 10             	and    eax,0x10
c00183f7:	74 10                	je     c0018409 <HalReceivedNMI()+0x61>
c00183f9:	83 ec 0c             	sub    esp,0xc
c00183fc:	68 f2 38 02 c0       	push   0xc00238f2
c0018401:	e8 f0 67 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018406:	83 c4 10             	add    esp,0x10
c0018409:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001840e:	83 e0 40             	and    eax,0x40
c0018411:	74 10                	je     c0018423 <HalReceivedNMI()+0x7b>
c0018413:	83 ec 0c             	sub    esp,0xc
c0018416:	68 ff 38 02 c0       	push   0xc00238ff
c001841b:	e8 d6 67 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018427:	0f be c0             	movsx  eax,al
c001842a:	85 c0                	test   eax,eax
c001842c:	79 10                	jns    c001843e <HalReceivedNMI()+0x96>
c001842e:	83 ec 0c             	sub    esp,0xc
c0018431:	68 09 39 02 c0       	push   0xc0023909
c0018436:	e8 bb 67 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001843b:	83 c4 10             	add    esp,0x10
c001843e:	90                   	nop
c001843f:	83 c4 1c             	add    esp,0x1c
c0018442:	c3                   	ret    

c0018443 <HalSystemIdle()>:
c0018443:	56                   	push   esi
c0018444:	53                   	push   ebx
c0018445:	83 ec 14             	sub    esp,0x14
c0018448:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c001844d:	83 e0 10             	and    eax,0x10
c0018450:	0f b6 c0             	movzx  eax,al
c0018453:	85 c0                	test   eax,eax
c0018455:	74 43                	je     c001849a <HalSystemIdle()+0x57>
c0018457:	83 ec 0c             	sub    esp,0xc
c001845a:	68 e1 00 00 00       	push   0xe1
c001845f:	e8 99 f9 ff ff       	call   c0017dfd <x86rdmsr(unsigned int)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001846b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001846f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018473:	83 e0 02             	and    eax,0x2
c0018476:	89 c3                	mov    ebx,eax
c0018478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001847c:	83 e0 00             	and    eax,0x0
c001847f:	89 c6                	mov    esi,eax
c0018481:	83 ec 04             	sub    esp,0x4
c0018484:	56                   	push   esi
c0018485:	53                   	push   ebx
c0018486:	68 e1 00 00 00       	push   0xe1
c001848b:	e8 ab f9 ff ff       	call   c0017e3b <x86wrmsr(unsigned int, unsigned long long)>
c0018490:	83 c4 10             	add    esp,0x10
c0018493:	e8 fc 7c fe ff       	call   c0000194 <doTPAUSE>
c0018498:	eb 01                	jmp    c001849b <HalSystemIdle()+0x58>
c001849a:	f4                   	hlt    
c001849b:	90                   	nop
c001849c:	83 c4 14             	add    esp,0x14
c001849f:	5b                   	pop    ebx
c00184a0:	5e                   	pop    esi
c00184a1:	c3                   	ret    

c00184a2 <i386SaveCoprocessor(void*)>:
c00184a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184a6:	83 c0 3f             	add    eax,0x3f
c00184a9:	83 e0 c0             	and    eax,0xffffffc0
c00184ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184b0:	ff 25 50 d7 02 c0    	jmp    DWORD PTR ds:0xc002d750

c00184b6 <i386LoadCoprocessor(void*)>:
c00184b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ba:	83 c0 3f             	add    eax,0x3f
c00184bd:	83 e0 c0             	and    eax,0xffffffc0
c00184c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184c4:	ff 25 4c d7 02 c0    	jmp    DWORD PTR ds:0xc002d74c

c00184ca <x87EmulHandler(regs*, void*)>:
c00184ca:	53                   	push   ebx
c00184cb:	83 ec 08             	sub    esp,0x8
c00184ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184d3:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00184d7:	74 10                	je     c00184e9 <x87EmulHandler(regs*, void*)+0x1f>
c00184d9:	83 ec 0c             	sub    esp,0xc
c00184dc:	68 16 39 02 c0       	push   0xc0023916
c00184e1:	e8 10 67 ff ff       	call   c000ebf6 <KePanic(char const*)>
c00184e6:	83 c4 10             	add    esp,0x10
c00184e9:	0f 20 c0             	mov    eax,cr0
c00184ec:	a8 08                	test   al,0x8
c00184ee:	74 59                	je     c0018549 <x87EmulHandler(regs*, void*)+0x7f>
c00184f0:	0f 06                	clts   
c00184f2:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00184f7:	85 c0                	test   eax,eax
c00184f9:	74 0e                	je     c0018509 <x87EmulHandler(regs*, void*)+0x3f>
c00184fb:	83 ec 0c             	sub    esp,0xc
c00184fe:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018501:	e8 9c ff ff ff       	call   c00184a2 <i386SaveCoprocessor(void*)>
c0018506:	83 c4 10             	add    esp,0x10
c0018509:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001850f:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018513:	75 12                	jne    c0018527 <x87EmulHandler(regs*, void*)+0x5d>
c0018515:	83 ec 0c             	sub    esp,0xc
c0018518:	68 40 02 00 00       	push   0x240
c001851d:	e8 8e 63 ff ff       	call   c000e8b0 <malloc>
c0018522:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018525:	eb 10                	jmp    c0018537 <x87EmulHandler(regs*, void*)+0x6d>
c0018527:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001852c:	83 ec 0c             	sub    esp,0xc
c001852f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018532:	e8 7f ff ff ff       	call   c00184b6 <i386LoadCoprocessor(void*)>
c0018537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001853c:	83 c4 10             	add    esp,0x10
c001853f:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c0018544:	83 c4 08             	add    esp,0x8
c0018547:	5b                   	pop    ebx
c0018548:	c3                   	ret    
c0018549:	83 ec 0c             	sub    esp,0xc
c001854c:	68 2a 39 02 c0       	push   0xc002392a
c0018551:	e8 f8 e9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018556:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001855e:	83 c4 18             	add    esp,0x18
c0018561:	5b                   	pop    ebx
c0018562:	e9 ad d9 ff ff       	jmp    c0015f14 <Thr::terminateFromIRQ(int)>

c0018567 <HalInitialiseCoprocessor()>:
c0018567:	83 ec 10             	sub    esp,0x10
c001856a:	6a 00                	push   0x0
c001856c:	68 ca 84 01 c0       	push   0xc00184ca
c0018571:	6a 07                	push   0x7
c0018573:	c7 05 48 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d748,0x0
c001857d:	e8 9d 06 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018582:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018587:	83 c4 10             	add    esp,0x10
c001858a:	a8 80                	test   al,0x80
c001858c:	74 1c                	je     c00185aa <HalInitialiseCoprocessor()+0x43>
c001858e:	c7 05 50 d7 02 c0 68 fc 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fc68
c0018598:	c7 05 4c d7 02 c0 70 fc 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fc70
c00185a2:	83 c4 0c             	add    esp,0xc
c00185a5:	e9 ce 76 00 00       	jmp    c001fc78 <sseInit>
c00185aa:	a8 10                	test   al,0x10
c00185ac:	74 1c                	je     c00185ca <HalInitialiseCoprocessor()+0x63>
c00185ae:	c7 05 50 d7 02 c0 b7 fc 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fcb7
c00185b8:	c7 05 4c d7 02 c0 be fc 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fcbe
c00185c2:	83 c4 0c             	add    esp,0xc
c00185c5:	e9 fb 76 00 00       	jmp    c001fcc5 <x87Init>
c00185ca:	c7 05 50 d7 02 c0 fa 6c 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc0016cfa
c00185d4:	c7 05 4c d7 02 c0 fa 6c 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc0016cfa
c00185de:	0f 20 c0             	mov    eax,cr0
c00185e1:	83 c8 04             	or     eax,0x4
c00185e4:	0f 22 c0             	mov    cr0,eax
c00185e7:	83 c4 0c             	add    esp,0xc
c00185ea:	c3                   	ret    

c00185eb <HalPanic(char const*)>:
c00185eb:	53                   	push   ebx
c00185ec:	83 ec 10             	sub    esp,0x10
c00185ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00185f3:	fa                   	cli    
c00185f4:	53                   	push   ebx
c00185f5:	68 40 39 02 c0       	push   0xc0023940
c00185fa:	e8 4f e9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00185ff:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c0018604:	83 c4 10             	add    esp,0x10
c0018607:	85 c0                	test   eax,eax
c0018609:	74 09                	je     c0018614 <HalPanic(char const*)+0x29>
c001860b:	83 ec 0c             	sub    esp,0xc
c001860e:	53                   	push   ebx
c001860f:	ff d0                	call   eax
c0018611:	83 c4 10             	add    esp,0x10
c0018614:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0018619:	85 c0                	test   eax,eax
c001861b:	0f 84 dc 00 00 00    	je     c00186fd <HalPanic(char const*)+0x112>
c0018621:	52                   	push   edx
c0018622:	6a 01                	push   0x1
c0018624:	6a 0f                	push   0xf
c0018626:	50                   	push   eax
c0018627:	e8 d8 88 ff ff       	call   c0010f04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001862c:	59                   	pop    ecx
c001862d:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018633:	e8 bc 8a ff ff       	call   c00110f4 <VgaText::clearScreen()>
c0018638:	58                   	pop    eax
c0018639:	5a                   	pop    edx
c001863a:	68 08 2a 02 c0       	push   0xc0022a08
c001863f:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018645:	e8 f2 88 ff ff       	call   c0010f3c <VgaText::setTitle(char*)>
c001864a:	83 c4 0c             	add    esp,0xc
c001864d:	6a 01                	push   0x1
c001864f:	6a 0f                	push   0xf
c0018651:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018657:	e8 a8 88 ff ff       	call   c0010f04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001865c:	59                   	pop    ecx
c001865d:	58                   	pop    eax
c001865e:	68 59 39 02 c0       	push   0xc0023959
c0018663:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018669:	e8 78 8d ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001866e:	83 c4 0c             	add    esp,0xc
c0018671:	6a 0f                	push   0xf
c0018673:	6a 01                	push   0x1
c0018675:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001867b:	e8 84 88 ff ff       	call   c0010f04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018680:	58                   	pop    eax
c0018681:	5a                   	pop    edx
c0018682:	68 62 39 02 c0       	push   0xc0023962
c0018687:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001868d:	e8 54 8d ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c0018692:	83 c4 0c             	add    esp,0xc
c0018695:	6a 01                	push   0x1
c0018697:	6a 0f                	push   0xf
c0018699:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001869f:	e8 60 88 ff ff       	call   c0010f04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00186a4:	59                   	pop    ecx
c00186a5:	58                   	pop    eax
c00186a6:	68 a6 39 02 c0       	push   0xc00239a6
c00186ab:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00186b1:	e8 30 8d ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00186b6:	58                   	pop    eax
c00186b7:	5a                   	pop    edx
c00186b8:	68 6f 39 02 c0       	push   0xc002396f
c00186bd:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00186c3:	e8 1e 8d ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00186c8:	59                   	pop    ecx
c00186c9:	58                   	pop    eax
c00186ca:	68 a9 39 02 c0       	push   0xc00239a9
c00186cf:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00186d5:	e8 0c 8d ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00186da:	58                   	pop    eax
c00186db:	5a                   	pop    edx
c00186dc:	53                   	push   ebx
c00186dd:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00186e3:	e8 fe 8c ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00186e8:	59                   	pop    ecx
c00186e9:	5b                   	pop    ebx
c00186ea:	68 a6 39 02 c0       	push   0xc00239a6
c00186ef:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00186f5:	e8 ec 8c ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c00186fa:	83 c4 10             	add    esp,0x10
c00186fd:	eb fe                	jmp    c00186fd <HalPanic(char const*)+0x112>

c00186ff <HalQueryPerformanceCounter()>:
c00186ff:	31 c0                	xor    eax,eax
c0018701:	31 d2                	xor    edx,edx
c0018703:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c001870a:	75 02                	jne    c001870e <HalQueryPerformanceCounter()+0xf>
c001870c:	0f 31                	rdtsc  
c001870e:	c3                   	ret    

c001870f <HalInitialise()>:
c001870f:	53                   	push   ebx
c0018710:	83 ec 08             	sub    esp,0x8
c0018713:	c6 05 40 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d740,0x0
c001871a:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001871f:	83 e0 fe             	and    eax,0xfffffffe
c0018722:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018727:	e8 d8 07 00 00       	call   c0018f04 <picOpen()>
c001872c:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c0018733:	74 0a                	je     c001873f <HalInitialise()+0x30>
c0018735:	e8 1a 07 00 00       	call   c0018e54 <picDisable()>
c001873a:	e8 05 6b 00 00       	call   c001f244 <apicOpen()>
c001873f:	50                   	push   eax
c0018740:	bb 0f 00 00 00       	mov    ebx,0xf
c0018745:	6a 00                	push   0x0
c0018747:	68 60 df 00 c0       	push   0xc000df60
c001874c:	6a 00                	push   0x0
c001874e:	e8 cc 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018753:	83 c4 0c             	add    esp,0xc
c0018756:	6a 00                	push   0x0
c0018758:	68 60 df 00 c0       	push   0xc000df60
c001875d:	6a 01                	push   0x1
c001875f:	e8 bb 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018764:	83 c4 0c             	add    esp,0xc
c0018767:	6a 00                	push   0x0
c0018769:	68 50 df 00 c0       	push   0xc000df50
c001876e:	6a 02                	push   0x2
c0018770:	e8 aa 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018775:	83 c4 0c             	add    esp,0xc
c0018778:	6a 00                	push   0x0
c001877a:	68 60 df 00 c0       	push   0xc000df60
c001877f:	6a 03                	push   0x3
c0018781:	e8 99 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018786:	83 c4 0c             	add    esp,0xc
c0018789:	6a 00                	push   0x0
c001878b:	68 60 df 00 c0       	push   0xc000df60
c0018790:	6a 04                	push   0x4
c0018792:	e8 88 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018797:	83 c4 0c             	add    esp,0xc
c001879a:	6a 00                	push   0x0
c001879c:	68 60 df 00 c0       	push   0xc000df60
c00187a1:	6a 05                	push   0x5
c00187a3:	e8 77 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00187a8:	83 c4 0c             	add    esp,0xc
c00187ab:	6a 00                	push   0x0
c00187ad:	68 94 df 00 c0       	push   0xc000df94
c00187b2:	6a 06                	push   0x6
c00187b4:	e8 66 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00187b9:	83 c4 0c             	add    esp,0xc
c00187bc:	6a 00                	push   0x0
c00187be:	68 e8 df 00 c0       	push   0xc000dfe8
c00187c3:	6a 08                	push   0x8
c00187c5:	e8 55 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00187ca:	83 c4 0c             	add    esp,0xc
c00187cd:	6a 00                	push   0x0
c00187cf:	68 60 df 00 c0       	push   0xc000df60
c00187d4:	6a 09                	push   0x9
c00187d6:	e8 44 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00187db:	83 c4 0c             	add    esp,0xc
c00187de:	6a 00                	push   0x0
c00187e0:	68 60 df 00 c0       	push   0xc000df60
c00187e5:	6a 0a                	push   0xa
c00187e7:	e8 33 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00187ec:	83 c4 0c             	add    esp,0xc
c00187ef:	6a 00                	push   0x0
c00187f1:	68 60 df 00 c0       	push   0xc000df60
c00187f6:	6a 0b                	push   0xb
c00187f8:	e8 22 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00187fd:	83 c4 0c             	add    esp,0xc
c0018800:	6a 00                	push   0x0
c0018802:	68 98 de 00 c0       	push   0xc000de98
c0018807:	6a 0d                	push   0xd
c0018809:	e8 11 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001880e:	83 c4 0c             	add    esp,0xc
c0018811:	6a 00                	push   0x0
c0018813:	68 ec de 00 c0       	push   0xc000deec
c0018818:	6a 0e                	push   0xe
c001881a:	e8 00 04 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	50                   	push   eax
c0018823:	6a 00                	push   0x0
c0018825:	68 60 df 00 c0       	push   0xc000df60
c001882a:	53                   	push   ebx
c001882b:	43                   	inc    ebx
c001882c:	e8 ee 03 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018831:	83 c4 10             	add    esp,0x10
c0018834:	83 fb 1e             	cmp    ebx,0x1e
c0018837:	75 e9                	jne    c0018822 <HalInitialise()+0x113>
c0018839:	50                   	push   eax
c001883a:	6a 00                	push   0x0
c001883c:	68 8a 0d 01 c0       	push   0xc0010d8a
c0018841:	6a 60                	push   0x60
c0018843:	e8 d7 03 00 00       	call   c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018848:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001884d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018857:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001885e:	e8 4d 60 ff ff       	call   c000e8b0 <malloc>
c0018863:	89 04 24             	mov    DWORD PTR [esp],eax
c0018866:	89 c3                	mov    ebx,eax
c0018868:	e8 ff 0d 00 00       	call   c001966c <RTC::RTC()>
c001886d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018877:	5a                   	pop    edx
c0018878:	59                   	pop    ecx
c0018879:	53                   	push   ebx
c001887a:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0018880:	e8 e1 07 ff ff       	call   c0009066 <Device::addChild(Device*)>
c0018885:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018887:	6a 00                	push   0x0
c0018889:	6a 00                	push   0x0
c001888b:	6a 00                	push   0x0
c001888d:	53                   	push   ebx
c001888e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018891:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018896:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001889c:	83 c4 28             	add    esp,0x28
c001889f:	5b                   	pop    ebx
c00188a0:	c3                   	ret    

c00188a1 <HalMakeBeep(int)>:
c00188a1:	53                   	push   ebx
c00188a2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00188a6:	85 db                	test   ebx,ebx
c00188a8:	75 07                	jne    c00188b1 <HalMakeBeep(int)+0x10>
c00188aa:	e4 61                	in     al,0x61
c00188ac:	83 e0 fc             	and    eax,0xfffffffc
c00188af:	eb 26                	jmp    c00188d7 <HalMakeBeep(int)+0x36>
c00188b1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00188b6:	99                   	cdq    
c00188b7:	f7 fb                	idiv   ebx
c00188b9:	89 c1                	mov    ecx,eax
c00188bb:	b0 b6                	mov    al,0xb6
c00188bd:	e6 43                	out    0x43,al
c00188bf:	88 c8                	mov    al,cl
c00188c1:	e6 42                	out    0x42,al
c00188c3:	89 c8                	mov    eax,ecx
c00188c5:	c1 e8 08             	shr    eax,0x8
c00188c8:	e6 42                	out    0x42,al
c00188ca:	e4 61                	in     al,0x61
c00188cc:	89 c2                	mov    edx,eax
c00188ce:	83 ca 03             	or     edx,0x3
c00188d1:	38 d0                	cmp    al,dl
c00188d3:	74 04                	je     c00188d9 <HalMakeBeep(int)+0x38>
c00188d5:	88 d0                	mov    al,dl
c00188d7:	e6 61                	out    0x61,al
c00188d9:	5b                   	pop    ebx
c00188da:	c3                   	ret    

c00188db <HalGetRand()>:
c00188db:	31 c0                	xor    eax,eax
c00188dd:	c3                   	ret    

c00188de <HalEndOfInterrupt(int)>:
c00188de:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c00188e5:	74 1d                	je     c0018904 <HalEndOfInterrupt(int)+0x26>
c00188e7:	83 ec 18             	sub    esp,0x18
c00188ea:	6a 1b                	push   0x1b
c00188ec:	e8 0c f5 ff ff       	call   c0017dfd <x86rdmsr(unsigned int)>
c00188f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00188f6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018900:	83 c4 1c             	add    esp,0x1c
c0018903:	c3                   	ret    
c0018904:	e9 7f 07 00 00       	jmp    c0019088 <picEOI(int)>

c0018909 <HalRestart()>:
c0018909:	c3                   	ret    

c001890a <HalShutdown()>:
c001890a:	c3                   	ret    

c001890b <HalSleep()>:
c001890b:	c3                   	ret    

c001890c <CPU::CPU()>:
c001890c:	83 ec 0c             	sub    esp,0xc
c001890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018913:	83 ec 08             	sub    esp,0x8
c0018916:	68 1b 37 02 c0       	push   0xc002371b
c001891b:	50                   	push   eax
c001891c:	e8 a7 08 ff ff       	call   c00091c8 <Device::Device(char const*)>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	ba 78 3a 02 c0       	mov    edx,0xc0023a78
c0018929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892d:	89 10                	mov    DWORD PTR [eax],edx
c001892f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018933:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018941:	05 64 01 00 00       	add    eax,0x164
c0018946:	83 ec 0c             	sub    esp,0xc
c0018949:	50                   	push   eax
c001894a:	e8 ed 56 ff ff       	call   c000e03c <GDT::GDT()>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018956:	05 68 09 00 00       	add    eax,0x968
c001895b:	83 ec 0c             	sub    esp,0xc
c001895e:	50                   	push   eax
c001895f:	e8 2c 59 ff ff       	call   c000e290 <IDT::IDT()>
c0018964:	83 c4 10             	add    esp,0x10
c0018967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001896b:	05 68 11 00 00       	add    eax,0x1168
c0018970:	83 ec 0c             	sub    esp,0xc
c0018973:	50                   	push   eax
c0018974:	e8 ef 8e ff ff       	call   c0011868 <TSS::TSS()>
c0018979:	83 c4 10             	add    esp,0x10
c001897c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018980:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001898a:	90                   	nop
c001898b:	83 c4 0c             	add    esp,0xc
c001898e:	c3                   	ret    
c001898f:	90                   	nop

c0018990 <CPU::setupSMEP()>:
c0018990:	0f 20 e0             	mov    eax,cr4
c0018993:	0d 00 00 10 00       	or     eax,0x100000
c0018998:	0f 22 e0             	mov    cr4,eax
c001899b:	c3                   	ret    

c001899c <CPU::setupUMIP()>:
c001899c:	0f 20 e0             	mov    eax,cr4
c001899f:	80 cc 08             	or     ah,0x8
c00189a2:	0f 22 e0             	mov    cr4,eax
c00189a5:	c3                   	ret    

c00189a6 <CPU::setupTSC()>:
c00189a6:	0f 20 e0             	mov    eax,cr4
c00189a9:	83 c8 04             	or     eax,0x4
c00189ac:	0f 22 e0             	mov    cr4,eax
c00189af:	c3                   	ret    

c00189b0 <CPU::setupLargePages()>:
c00189b0:	0f 20 e0             	mov    eax,cr4
c00189b3:	83 c8 10             	or     eax,0x10
c00189b6:	0f 22 e0             	mov    cr4,eax
c00189b9:	c3                   	ret    

c00189ba <CPU::setupPAT()>:
c00189ba:	f6 05 8c d7 02 c0 08 	test   BYTE PTR ds:0xc002d78c,0x8
c00189c1:	74 28                	je     c00189eb <CPU::setupPAT()+0x31>
c00189c3:	53                   	push   ebx
c00189c4:	83 ec 14             	sub    esp,0x14
c00189c7:	68 77 02 00 00       	push   0x277
c00189cc:	e8 2c f4 ff ff       	call   c0017dfd <x86rdmsr(unsigned int)>
c00189d1:	83 c4 0c             	add    esp,0xc
c00189d4:	83 e2 f8             	and    edx,0xfffffff8
c00189d7:	83 ca 01             	or     edx,0x1
c00189da:	52                   	push   edx
c00189db:	50                   	push   eax
c00189dc:	68 77 02 00 00       	push   0x277
c00189e1:	e8 55 f4 ff ff       	call   c0017e3b <x86wrmsr(unsigned int, unsigned long long)>
c00189e6:	83 c4 18             	add    esp,0x18
c00189e9:	5b                   	pop    ebx
c00189ea:	c3                   	ret    
c00189eb:	c3                   	ret    

c00189ec <CPU::setupMTRR()>:
c00189ec:	c3                   	ret    
c00189ed:	90                   	nop

c00189ee <CPU::setupGlobalPages()>:
c00189ee:	0f 20 e0             	mov    eax,cr4
c00189f1:	0c 80                	or     al,0x80
c00189f3:	0f 22 e0             	mov    cr4,eax
c00189f6:	c3                   	ret    
c00189f7:	90                   	nop

c00189f8 <CPU::allowUsermodeDataAccess()>:
c00189f8:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c00189ff:	74 03                	je     c0018a04 <CPU::allowUsermodeDataAccess()+0xc>
c0018a01:	0f 01 cb             	stac   
c0018a04:	c3                   	ret    
c0018a05:	90                   	nop

c0018a06 <CPU::prohibitUsermodeDataAccess()>:
c0018a06:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018a0d:	74 03                	je     c0018a12 <CPU::prohibitUsermodeDataAccess()+0xc>
c0018a0f:	0f 01 ca             	clac   
c0018a12:	c3                   	ret    
c0018a13:	90                   	nop

c0018a14 <CPU::setupSMAP()>:
c0018a14:	0f 20 e0             	mov    eax,cr4
c0018a17:	0d 00 00 20 00       	or     eax,0x200000
c0018a1c:	0f 22 e0             	mov    cr4,eax
c0018a1f:	eb e5                	jmp    c0018a06 <CPU::prohibitUsermodeDataAccess()>
c0018a21:	90                   	nop

c0018a22 <CPU::setupFeatures()>:
c0018a22:	53                   	push   ebx
c0018a23:	83 ec 08             	sub    esp,0x8
c0018a26:	f6 05 8f d7 02 c0 20 	test   BYTE PTR ds:0xc002d78f,0x20
c0018a2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018a31:	74 18                	je     c0018a4b <CPU::setupFeatures()+0x29>
c0018a33:	83 ec 0c             	sub    esp,0xc
c0018a36:	68 b4 39 02 c0       	push   0xc00239b4
c0018a3b:	e8 0e e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018a43:	e8 54 ff ff ff       	call   c001899c <CPU::setupUMIP()>
c0018a48:	83 c4 10             	add    esp,0x10
c0018a4b:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018a52:	74 18                	je     c0018a6c <CPU::setupFeatures()+0x4a>
c0018a54:	83 ec 0c             	sub    esp,0xc
c0018a57:	68 be 39 02 c0       	push   0xc00239be
c0018a5c:	e8 ed e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018a64:	e8 3d ff ff ff       	call   c00189a6 <CPU::setupTSC()>
c0018a69:	83 c4 10             	add    esp,0x10
c0018a6c:	f6 05 8e d7 02 c0 20 	test   BYTE PTR ds:0xc002d78e,0x20
c0018a73:	74 18                	je     c0018a8d <CPU::setupFeatures()+0x6b>
c0018a75:	83 ec 0c             	sub    esp,0xc
c0018a78:	68 c7 39 02 c0       	push   0xc00239c7
c0018a7d:	e8 cc e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018a85:	e8 26 ff ff ff       	call   c00189b0 <CPU::setupLargePages()>
c0018a8a:	83 c4 10             	add    esp,0x10
c0018a8d:	f6 05 8e d7 02 c0 40 	test   BYTE PTR ds:0xc002d78e,0x40
c0018a94:	74 18                	je     c0018aae <CPU::setupFeatures()+0x8c>
c0018a96:	83 ec 0c             	sub    esp,0xc
c0018a99:	68 d0 39 02 c0       	push   0xc00239d0
c0018a9e:	e8 ab e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018aa6:	e8 43 ff ff ff       	call   c00189ee <CPU::setupGlobalPages()>
c0018aab:	83 c4 10             	add    esp,0x10
c0018aae:	f6 05 8e d7 02 c0 80 	test   BYTE PTR ds:0xc002d78e,0x80
c0018ab5:	74 18                	je     c0018acf <CPU::setupFeatures()+0xad>
c0018ab7:	83 ec 0c             	sub    esp,0xc
c0018aba:	68 e2 39 02 c0       	push   0xc00239e2
c0018abf:	e8 8a e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ac7:	e8 ee fe ff ff       	call   c00189ba <CPU::setupPAT()>
c0018acc:	83 c4 10             	add    esp,0x10
c0018acf:	f6 05 90 d7 02 c0 04 	test   BYTE PTR ds:0xc002d790,0x4
c0018ad6:	74 11                	je     c0018ae9 <CPU::setupFeatures()+0xc7>
c0018ad8:	c7 44 24 10 eb 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc00239eb
c0018ae0:	83 c4 08             	add    esp,0x8
c0018ae3:	5b                   	pop    ebx
c0018ae4:	e9 65 e4 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0018ae9:	83 c4 08             	add    esp,0x8
c0018aec:	5b                   	pop    ebx
c0018aed:	c3                   	ret    

c0018aee <CPU::open(int, int, void*)>:
c0018aee:	55                   	push   ebp
c0018aef:	57                   	push   edi
c0018af0:	56                   	push   esi
c0018af1:	53                   	push   ebx
c0018af2:	83 ec 18             	sub    esp,0x18
c0018af5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018af9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018afd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018b01:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018b07:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018b0d:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018b13:	50                   	push   eax
c0018b14:	e8 85 55 ff ff       	call   c000e09e <GDT::setup()>
c0018b19:	83 c4 0c             	add    esp,0xc
c0018b1c:	6a 00                	push   0x0
c0018b1e:	68 ef be ad de       	push   0xdeadbeef
c0018b23:	55                   	push   ebp
c0018b24:	e8 83 8d ff ff       	call   c00118ac <TSS::setup(unsigned long, unsigned long)>
c0018b29:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018b2c:	e8 5b 8d ff ff       	call   c001188c <TSS::flush()>
c0018b31:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018b37:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b3a:	e8 c7 57 ff ff       	call   c000e306 <IDT::setup()>
c0018b3f:	b8 00 04 00 00       	mov    eax,0x400
c0018b44:	0f 23 f8             	mov    dr7,eax
c0018b47:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018b51:	e8 9a 62 ff ff       	call   c000edf0 <Phys::allocatePage()>
c0018b56:	83 c4 10             	add    esp,0x10
c0018b59:	85 f6                	test   esi,esi
c0018b5b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018b61:	89 38                	mov    DWORD PTR [eax],edi
c0018b63:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018b69:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018b6c:	74 10                	je     c0018b7e <CPU::open(int, int, void*)+0x90>
c0018b6e:	50                   	push   eax
c0018b6f:	50                   	push   eax
c0018b70:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018b76:	56                   	push   esi
c0018b77:	e8 0e 97 ff ff       	call   c001228a <VAS::setCPUSpecific(unsigned long)>
c0018b7c:	eb 0d                	jmp    c0018b8b <CPU::open(int, int, void*)+0x9d>
c0018b7e:	83 ec 0c             	sub    esp,0xc
c0018b81:	68 f5 39 02 c0       	push   0xc00239f5
c0018b86:	e8 6b 60 ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	83 ec 0c             	sub    esp,0xc
c0018b91:	68 03 3a 02 c0       	push   0xc0023a03
c0018b96:	e8 c0 39 ff ff       	call   c000c55b <KeSetBootMessage(char const*)>
c0018b9b:	e8 6f fb ff ff       	call   c001870f <HalInitialise()>
c0018ba0:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0018ba5:	83 e0 10             	and    eax,0x10
c0018ba8:	83 f8 01             	cmp    eax,0x1
c0018bab:	19 c0                	sbb    eax,eax
c0018bad:	83 e0 46             	and    eax,0x46
c0018bb0:	83 c0 1e             	add    eax,0x1e
c0018bb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bb6:	e8 46 1b ff ff       	call   c000a701 <setupTimer(int)>
c0018bbb:	83 c4 10             	add    esp,0x10
c0018bbe:	f6 05 90 cd 02 c0 20 	test   BYTE PTR ds:0xc002cd90,0x20
c0018bc5:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018bcb:	74 0c                	je     c0018bd9 <CPU::open(int, int, void*)+0xeb>
c0018bcd:	83 ec 0c             	sub    esp,0xc
c0018bd0:	53                   	push   ebx
c0018bd1:	e8 4c fe ff ff       	call   c0018a22 <CPU::setupFeatures()>
c0018bd6:	83 c4 10             	add    esp,0x10
c0018bd9:	83 c4 0c             	add    esp,0xc
c0018bdc:	31 c0                	xor    eax,eax
c0018bde:	5b                   	pop    ebx
c0018bdf:	5e                   	pop    esi
c0018be0:	5f                   	pop    edi
c0018be1:	5d                   	pop    ebp
c0018be2:	c3                   	ret    

c0018be3 <convertLegacyIRQNumber(int)>:
c0018be3:	83 ec 0c             	sub    esp,0xc
c0018be6:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bf1:	74 0c                	je     c0018bff <convertLegacyIRQNumber(int)+0x1c>
c0018bf3:	83 f8 0f             	cmp    eax,0xf
c0018bf6:	7f 0b                	jg     c0018c03 <convertLegacyIRQNumber(int)+0x20>
c0018bf8:	0f b6 80 e8 45 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdba18]
c0018bff:	83 c4 0c             	add    esp,0xc
c0018c02:	c3                   	ret    
c0018c03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c07:	83 ec 0c             	sub    esp,0xc
c0018c0a:	68 9c 3a 02 c0       	push   0xc0023a9c
c0018c0f:	e8 e2 5f ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018c14:	83 c4 10             	add    esp,0x10
c0018c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c1b:	83 c4 0c             	add    esp,0xc
c0018c1e:	c3                   	ret    

c0018c1f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018c1f:	56                   	push   esi
c0018c20:	31 c0                	xor    eax,eax
c0018c22:	53                   	push   ebx
c0018c23:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018c2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018c2f:	89 ca                	mov    edx,ecx
c0018c31:	c1 e2 04             	shl    edx,0x4
c0018c34:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c0018c3c:	74 17                	je     c0018c55 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018c3e:	83 c0 01             	add    eax,0x1
c0018c41:	83 f8 04             	cmp    eax,0x4
c0018c44:	75 ee                	jne    c0018c34 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018c46:	c7 44 24 0c fd 3a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023afd
c0018c4e:	5b                   	pop    ebx
c0018c4f:	5e                   	pop    esi
c0018c50:	e9 a1 5f ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c0018c55:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018c58:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c0018c5f:	5b                   	pop    ebx
c0018c60:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c0018c67:	5e                   	pop    esi
c0018c68:	c3                   	ret    

c0018c69 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018c69:	55                   	push   ebp
c0018c6a:	57                   	push   edi
c0018c6b:	56                   	push   esi
c0018c6c:	53                   	push   ebx
c0018c6d:	83 ec 0c             	sub    esp,0xc
c0018c70:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0018c74:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018c7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c7f:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018c82:	74 57                	je     c0018cdb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018c84:	84 c0                	test   al,al
c0018c86:	89 c7                	mov    edi,eax
c0018c88:	74 1d                	je     c0018ca7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018c8a:	83 fe 0f             	cmp    esi,0xf
c0018c8d:	0f 8f d9 00 00 00    	jg     c0018d6c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c0018c93:	0f b6 b6 e8 45 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdba18]
c0018c9a:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c0018ca2:	d1 ef                	shr    edi,1
c0018ca4:	83 e7 01             	and    edi,0x1
c0018ca7:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018cac:	83 ec 08             	sub    esp,0x8
c0018caf:	31 db                	xor    ebx,ebx
c0018cb1:	50                   	push   eax
c0018cb2:	68 0a 3b 02 c0       	push   0xc0023b0a
c0018cb7:	e8 92 e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018cbc:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018cc1:	83 c4 10             	add    esp,0x10
c0018cc4:	85 c0                	test   eax,eax
c0018cc6:	7f 59                	jg     c0018d21 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c0018cc8:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018ccb:	83 ec 0c             	sub    esp,0xc
c0018cce:	68 21 3b 02 c0       	push   0xc0023b21
c0018cd3:	e8 1e 5f ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018cd8:	83 c4 10             	add    esp,0x10
c0018cdb:	89 e8                	mov    eax,ebp
c0018cdd:	31 d2                	xor    edx,edx
c0018cdf:	c1 e0 04             	shl    eax,0x4
c0018ce2:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c0018ce9:	85 c9                	test   ecx,ecx
c0018ceb:	0f 84 92 00 00 00    	je     c0018d83 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c0018cf1:	83 c2 01             	add    edx,0x1
c0018cf4:	83 fa 04             	cmp    edx,0x4
c0018cf7:	75 e9                	jne    c0018ce2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c0018cf9:	83 ec 0c             	sub    esp,0xc
c0018cfc:	68 d8 3a 02 c0       	push   0xc0023ad8
c0018d01:	e8 f0 5e ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018d06:	83 c4 10             	add    esp,0x10
c0018d09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018d0e:	83 c4 0c             	add    esp,0xc
c0018d11:	5b                   	pop    ebx
c0018d12:	5e                   	pop    esi
c0018d13:	5f                   	pop    edi
c0018d14:	5d                   	pop    ebp
c0018d15:	c3                   	ret    
c0018d16:	83 c3 01             	add    ebx,0x1
c0018d19:	39 1d e0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e0,ebx
c0018d1f:	7e a7                	jle    c0018cc8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c0018d21:	8b 2c 9d 00 e1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd1f00]
c0018d28:	83 ec 08             	sub    esp,0x8
c0018d2b:	56                   	push   esi
c0018d2c:	55                   	push   ebp
c0018d2d:	e8 9e 66 00 00       	call   c001f3d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018d32:	83 c4 10             	add    esp,0x10
c0018d35:	84 c0                	test   al,al
c0018d37:	74 dd                	je     c0018d16 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018d39:	89 f8                	mov    eax,edi
c0018d3b:	83 ec 04             	sub    esp,0x4
c0018d3e:	8b 1c 9d 00 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1f00]
c0018d45:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018d48:	0f b6 f8             	movzx  edi,al
c0018d4b:	57                   	push   edi
c0018d4c:	89 e8                	mov    eax,ebp
c0018d4e:	6a 00                	push   0x0
c0018d50:	0f b6 c0             	movzx  eax,al
c0018d53:	50                   	push   eax
c0018d54:	89 f0                	mov    eax,esi
c0018d56:	6a 00                	push   0x0
c0018d58:	0f b6 c0             	movzx  eax,al
c0018d5b:	6a 00                	push   0x0
c0018d5d:	50                   	push   eax
c0018d5e:	53                   	push   ebx
c0018d5f:	e8 d8 67 00 00       	call   c001f53c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018d64:	83 c4 20             	add    esp,0x20
c0018d67:	e9 6f ff ff ff       	jmp    c0018cdb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018d6c:	83 ec 0c             	sub    esp,0xc
c0018d6f:	31 ff                	xor    edi,edi
c0018d71:	68 9c 3a 02 c0       	push   0xc0023a9c
c0018d76:	e8 7b 5e ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	e9 24 ff ff ff       	jmp    c0018ca7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018d83:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0018d86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d8a:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c0018d91:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018d95:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018d9c:	83 c4 0c             	add    esp,0xc
c0018d9f:	89 f0                	mov    eax,esi
c0018da1:	5b                   	pop    ebx
c0018da2:	5e                   	pop    esi
c0018da3:	5f                   	pop    edi
c0018da4:	5d                   	pop    ebp
c0018da5:	c3                   	ret    

c0018da6 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018daa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018dae:	c1 e0 04             	shl    eax,0x4
c0018db1:	8d 50 10             	lea    edx,[eax+0x10]
c0018db4:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c0018dba:	74 08                	je     c0018dc4 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018dbc:	83 c0 04             	add    eax,0x4
c0018dbf:	39 d0                	cmp    eax,edx
c0018dc1:	75 f1                	jne    c0018db4 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018dc3:	c3                   	ret    
c0018dc4:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018dce:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018dd8:	eb e2                	jmp    c0018dbc <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018dda <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018dda:	56                   	push   esi
c0018ddb:	53                   	push   ebx
c0018ddc:	83 ec 04             	sub    esp,0x4
c0018ddf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018de4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018de8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018dec:	74 09                	je     c0018df7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018dee:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018df5:	75 34                	jne    c0018e2b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0018df7:	8d 43 20             	lea    eax,[ebx+0x20]
c0018dfa:	c1 e0 04             	shl    eax,0x4
c0018dfd:	8d 50 10             	lea    edx,[eax+0x10]
c0018e00:	39 b0 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],esi
c0018e06:	74 0d                	je     c0018e15 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0018e08:	83 c0 04             	add    eax,0x4
c0018e0b:	39 d0                	cmp    eax,edx
c0018e0d:	75 f1                	jne    c0018e00 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0018e0f:	83 c4 04             	add    esp,0x4
c0018e12:	5b                   	pop    ebx
c0018e13:	5e                   	pop    esi
c0018e14:	c3                   	ret    
c0018e15:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018e1f:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018e29:	eb dd                	jmp    c0018e08 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0018e2b:	83 fb 0f             	cmp    ebx,0xf
c0018e2e:	7f 09                	jg     c0018e39 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0018e30:	0f b6 9b e8 45 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdba18]
c0018e37:	eb be                	jmp    c0018df7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018e39:	83 ec 0c             	sub    esp,0xc
c0018e3c:	68 2e 3b 02 c0       	push   0xc0023b2e
c0018e41:	e8 b0 5d ff ff       	call   c000ebf6 <KePanic(char const*)>
c0018e46:	83 c4 10             	add    esp,0x10
c0018e49:	eb ac                	jmp    c0018df7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018e4b:	90                   	nop

c0018e4c <picIoWait()>:
c0018e4c:	eb 00                	jmp    c0018e4e <picIoWait()+0x2>
c0018e4e:	eb 00                	jmp    c0018e50 <picIoWait()+0x4>
c0018e50:	90                   	nop
c0018e51:	c3                   	ret    
c0018e52:	66 90                	xchg   ax,ax

c0018e54 <picDisable()>:
c0018e54:	83 ec 10             	sub    esp,0x10
c0018e57:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018e5e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018e63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018e6c:	ee                   	out    dx,al
c0018e6d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018e74:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018e79:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018e7d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018e82:	ee                   	out    dx,al
c0018e83:	90                   	nop
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	c3                   	ret    

c0018e88 <picGetIRQReg(int)>:
c0018e88:	83 ec 10             	sub    esp,0x10
c0018e8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e8f:	0f b6 c0             	movzx  eax,al
c0018e92:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018e99:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018e9d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018ea1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018ea6:	ee                   	out    dx,al
c0018ea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eab:	0f b6 c0             	movzx  eax,al
c0018eae:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018eb5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018eb9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018ebd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018ec2:	ee                   	out    dx,al
c0018ec3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018eca:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018ecf:	89 c2                	mov    edx,eax
c0018ed1:	ec                   	in     al,dx
c0018ed2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ed6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018eda:	0f b6 c0             	movzx  eax,al
c0018edd:	c1 e0 08             	shl    eax,0x8
c0018ee0:	89 c1                	mov    ecx,eax
c0018ee2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018ee9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018eee:	89 c2                	mov    edx,eax
c0018ef0:	ec                   	in     al,dx
c0018ef1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ef5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018ef9:	0f b6 c0             	movzx  eax,al
c0018efc:	09 c8                	or     eax,ecx
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	c3                   	ret    
c0018f02:	66 90                	xchg   ax,ax

c0018f04 <picOpen()>:
c0018f04:	83 ec 50             	sub    esp,0x50
c0018f07:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018f0e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018f13:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f1b:	ee                   	out    dx,al
c0018f1c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018f23:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018f28:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f30:	ee                   	out    dx,al
c0018f31:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018f39:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018f41:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018f48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f4c:	89 c2                	mov    edx,eax
c0018f4e:	ec                   	in     al,dx
c0018f4f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018f53:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f57:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018f5b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018f62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f66:	89 c2                	mov    edx,eax
c0018f68:	ec                   	in     al,dx
c0018f69:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f6d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f71:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018f75:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018f7c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018f81:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f89:	ee                   	out    dx,al
c0018f8a:	e8 bd fe ff ff       	call   c0018e4c <picIoWait()>
c0018f8f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018f96:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018f9b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018f9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018fa3:	ee                   	out    dx,al
c0018fa4:	e8 a3 fe ff ff       	call   c0018e4c <picIoWait()>
c0018fa9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018fad:	0f b6 c0             	movzx  eax,al
c0018fb0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018fb7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018fbb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018fbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018fc3:	ee                   	out    dx,al
c0018fc4:	e8 83 fe ff ff       	call   c0018e4c <picIoWait()>
c0018fc9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018fcd:	0f b6 c0             	movzx  eax,al
c0018fd0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018fd7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018fdb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018fdf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018fe3:	ee                   	out    dx,al
c0018fe4:	e8 63 fe ff ff       	call   c0018e4c <picIoWait()>
c0018fe9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018ff0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018ff5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018ff9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ffd:	ee                   	out    dx,al
c0018ffe:	e8 49 fe ff ff       	call   c0018e4c <picIoWait()>
c0019003:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001900a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001900f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019013:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019017:	ee                   	out    dx,al
c0019018:	e8 2f fe ff ff       	call   c0018e4c <picIoWait()>
c001901d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019024:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019029:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001902d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019031:	ee                   	out    dx,al
c0019032:	e8 15 fe ff ff       	call   c0018e4c <picIoWait()>
c0019037:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001903e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0019043:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019047:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001904b:	ee                   	out    dx,al
c001904c:	e8 fb fd ff ff       	call   c0018e4c <picIoWait()>
c0019051:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019056:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001905d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019061:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019065:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019069:	ee                   	out    dx,al
c001906a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001906f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019076:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001907a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001907e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019082:	ee                   	out    dx,al
c0019083:	90                   	nop
c0019084:	83 c4 50             	add    esp,0x50
c0019087:	c3                   	ret    

c0019088 <picEOI(int)>:
c0019088:	83 ec 10             	sub    esp,0x10
c001908b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019090:	75 1e                	jne    c00190b0 <picEOI(int)+0x28>
c0019092:	6a 0b                	push   0xb
c0019094:	e8 ef fd ff ff       	call   c0018e88 <picGetIRQReg(int)>
c0019099:	83 c4 04             	add    esp,0x4
c001909c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00190a1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00190a6:	25 80 00 00 00       	and    eax,0x80
c00190ab:	74 73                	je     c0019120 <picEOI(int)+0x98>
c00190ad:	8d 76 00             	lea    esi,[esi+0x0]
c00190b0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00190b5:	75 31                	jne    c00190e8 <picEOI(int)+0x60>
c00190b7:	6a 0b                	push   0xb
c00190b9:	e8 ca fd ff ff       	call   c0018e88 <picGetIRQReg(int)>
c00190be:	83 c4 04             	add    esp,0x4
c00190c1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00190c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190ca:	98                   	cwde   
c00190cb:	85 c0                	test   eax,eax
c00190cd:	78 19                	js     c00190e8 <picEOI(int)+0x60>
c00190cf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00190d6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00190db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00190e4:	ee                   	out    dx,al
c00190e5:	eb 3d                	jmp    c0019124 <picEOI(int)+0x9c>
c00190e7:	90                   	nop
c00190e8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00190ed:	7e 19                	jle    c0019108 <picEOI(int)+0x80>
c00190ef:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00190f6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00190fb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00190ff:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019104:	ee                   	out    dx,al
c0019105:	8d 76 00             	lea    esi,[esi+0x0]
c0019108:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001910f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019114:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019118:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001911d:	ee                   	out    dx,al
c001911e:	eb 04                	jmp    c0019124 <picEOI(int)+0x9c>
c0019120:	90                   	nop
c0019121:	8d 76 00             	lea    esi,[esi+0x0]
c0019124:	83 c4 10             	add    esp,0x10
c0019127:	c3                   	ret    

c0019128 <RTC::open(int, int, void*)>:
c0019128:	31 c0                	xor    eax,eax
c001912a:	c3                   	ret    
c001912b:	90                   	nop

c001912c <RTC::close(int, int, void*)>:
c001912c:	31 c0                	xor    eax,eax
c001912e:	c3                   	ret    
c001912f:	90                   	nop

c0019130 <RTC::timeInSecondsUTC()>:
c0019130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019134:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001913a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019140:	c3                   	ret    
c0019141:	90                   	nop

c0019142 <RTC::timeInDatetimeUTC()>:
c0019142:	53                   	push   ebx
c0019143:	83 ec 14             	sub    esp,0x14
c0019146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001914a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001914e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019150:	50                   	push   eax
c0019151:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019154:	83 c4 0c             	add    esp,0xc
c0019157:	52                   	push   edx
c0019158:	50                   	push   eax
c0019159:	53                   	push   ebx
c001915a:	e8 7b fc fe ff       	call   c0008dda <KeSecondsToDatetime(unsigned long long)>
c001915f:	89 d8                	mov    eax,ebx
c0019161:	83 c4 14             	add    esp,0x14
c0019164:	5b                   	pop    ebx
c0019165:	c2 04 00             	ret    0x4

c0019168 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019168:	56                   	push   esi
c0019169:	53                   	push   ebx
c001916a:	83 ec 14             	sub    esp,0x14
c001916d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019171:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019173:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019176:	8d 44 24 08          	lea    eax,[esp+0x8]
c001917a:	52                   	push   edx
c001917b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001917f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019183:	50                   	push   eax
c0019184:	e8 51 fc fe ff       	call   c0008dda <KeSecondsToDatetime(unsigned long long)>
c0019189:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001918d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019191:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019195:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019199:	89 f0                	mov    eax,esi
c001919b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001919f:	83 c4 20             	add    esp,0x20
c00191a2:	5b                   	pop    ebx
c00191a3:	5e                   	pop    esi
c00191a4:	ff e0                	jmp    eax

c00191a6 <RTC::~RTC()>:
c00191a6:	83 ec 0c             	sub    esp,0xc
c00191a9:	ba 58 3b 02 c0       	mov    edx,0xc0023b58
c00191ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191b2:	89 10                	mov    DWORD PTR [eax],edx
c00191b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	50                   	push   eax
c00191bc:	e8 a5 f9 fe ff       	call   c0008b66 <Clock::~Clock()>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	90                   	nop
c00191c5:	83 c4 0c             	add    esp,0xc
c00191c8:	c3                   	ret    
c00191c9:	90                   	nop

c00191ca <RTC::~RTC()>:
c00191ca:	83 ec 0c             	sub    esp,0xc
c00191cd:	83 ec 0c             	sub    esp,0xc
c00191d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191d4:	e8 cd ff ff ff       	call   c00191a6 <RTC::~RTC()>
c00191d9:	83 c4 10             	add    esp,0x10
c00191dc:	83 ec 08             	sub    esp,0x8
c00191df:	68 60 01 00 00       	push   0x160
c00191e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191e8:	e8 2e 34 ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	83 c4 0c             	add    esp,0xc
c00191f3:	c3                   	ret    

c00191f4 <RTC::get_update_in_progress_flag()>:
c00191f4:	83 ec 18             	sub    esp,0x18
c00191f7:	6a 0a                	push   0xa
c00191f9:	e8 01 db ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c00191fe:	83 c4 1c             	add    esp,0x1c
c0019201:	0f b6 c0             	movzx  eax,al
c0019204:	c1 e8 07             	shr    eax,0x7
c0019207:	c3                   	ret    

c0019208 <RTC::completeRTCRefresh()>:
c0019208:	55                   	push   ebp
c0019209:	57                   	push   edi
c001920a:	56                   	push   esi
c001920b:	53                   	push   ebx
c001920c:	83 ec 3c             	sub    esp,0x3c
c001920f:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019215:	83 ec 0c             	sub    esp,0xc
c0019218:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001921c:	e8 d3 ff ff ff       	call   c00191f4 <RTC::get_update_in_progress_flag()>
c0019221:	83 c4 10             	add    esp,0x10
c0019224:	84 c0                	test   al,al
c0019226:	74 0e                	je     c0019236 <RTC::completeRTCRefresh()+0x2e>
c0019228:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001922e:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019234:	73 df                	jae    c0019215 <RTC::completeRTCRefresh()+0xd>
c0019236:	83 ec 0c             	sub    esp,0xc
c0019239:	6a 00                	push   0x0
c001923b:	e8 bf da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c0019240:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019247:	89 c7                	mov    edi,eax
c0019249:	e8 b1 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c001924e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019255:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019259:	e8 a1 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c001925e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019265:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019269:	e8 91 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c001926e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019275:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019279:	e8 81 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c001927e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019285:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019289:	e8 71 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c001928e:	0f b6 c0             	movzx  eax,al
c0019291:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c001929e:	83 ec 0c             	sub    esp,0xc
c00192a1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00192a5:	e8 4a ff ff ff       	call   c00191f4 <RTC::get_update_in_progress_flag()>
c00192aa:	83 c4 10             	add    esp,0x10
c00192ad:	84 c0                	test   al,al
c00192af:	74 0e                	je     c00192bf <RTC::completeRTCRefresh()+0xb7>
c00192b1:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00192b7:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c00192bd:	73 df                	jae    c001929e <RTC::completeRTCRefresh()+0x96>
c00192bf:	83 ec 0c             	sub    esp,0xc
c00192c2:	6a 00                	push   0x0
c00192c4:	e8 36 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c00192c9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00192d0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00192d4:	e8 26 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c00192d9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00192e0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00192e4:	e8 16 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c00192e9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00192f0:	88 c3                	mov    bl,al
c00192f2:	e8 08 da ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c00192f7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00192fe:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019302:	e8 f8 d9 ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c0019307:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001930e:	89 c6                	mov    esi,eax
c0019310:	e8 ea d9 ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c0019315:	89 f9                	mov    ecx,edi
c0019317:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001931b:	83 c4 10             	add    esp,0x10
c001931e:	0f b6 e8             	movzx  ebp,al
c0019321:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019326:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001932a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001932e:	74 27                	je     c0019357 <RTC::completeRTCRefresh()+0x14f>
c0019330:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0019334:	89 f0                	mov    eax,esi
c0019336:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001933a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001933e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019342:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019346:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001934a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001934e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019352:	e9 41 ff ff ff       	jmp    c0019298 <RTC::completeRTCRefresh()+0x90>
c0019357:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001935c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019360:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019364:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019368:	75 c6                	jne    c0019330 <RTC::completeRTCRefresh()+0x128>
c001936a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001936f:	89 f1                	mov    ecx,esi
c0019371:	0f b6 fb             	movzx  edi,bl
c0019374:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019378:	0f b6 c9             	movzx  ecx,cl
c001937b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001937f:	89 f1                	mov    ecx,esi
c0019381:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019385:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019389:	0f 94 c2             	sete   dl
c001938c:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019390:	0f 94 c0             	sete   al
c0019393:	21 d0                	and    eax,edx
c0019395:	31 d2                	xor    edx,edx
c0019397:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001939b:	0f 94 c2             	sete   dl
c001939e:	85 c2                	test   edx,eax
c00193a0:	74 8e                	je     c0019330 <RTC::completeRTCRefresh()+0x128>
c00193a2:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00193a6:	75 88                	jne    c0019330 <RTC::completeRTCRefresh()+0x128>
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	6a 0b                	push   0xb
c00193ad:	e8 4d d9 ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	a8 04                	test   al,0x4
c00193b7:	75 7a                	jne    c0019433 <RTC::completeRTCRefresh()+0x22b>
c00193b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00193bd:	c1 ef 04             	shr    edi,0x4
c00193c0:	83 e6 0f             	and    esi,0xf
c00193c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00193c7:	c1 ed 04             	shr    ebp,0x4
c00193ca:	6b ed 0a             	imul   ebp,ebp,0xa
c00193cd:	c1 ea 04             	shr    edx,0x4
c00193d0:	6b d2 0a             	imul   edx,edx,0xa
c00193d3:	83 e1 0f             	and    ecx,0xf
c00193d6:	01 d1                	add    ecx,edx
c00193d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00193dc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00193e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193e4:	c1 ea 04             	shr    edx,0x4
c00193e7:	6b d2 0a             	imul   edx,edx,0xa
c00193ea:	83 e1 0f             	and    ecx,0xf
c00193ed:	01 d1                	add    ecx,edx
c00193ef:	89 fa                	mov    edx,edi
c00193f1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00193f5:	83 e2 07             	and    edx,0x7
c00193f8:	89 d9                	mov    ecx,ebx
c00193fa:	6b d2 0a             	imul   edx,edx,0xa
c00193fd:	83 e1 0f             	and    ecx,0xf
c0019400:	83 e3 80             	and    ebx,0xffffff80
c0019403:	01 d1                	add    ecx,edx
c0019405:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019409:	09 cb                	or     ebx,ecx
c001940b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001940f:	c1 ea 04             	shr    edx,0x4
c0019412:	6b d2 0a             	imul   edx,edx,0xa
c0019415:	83 e1 0f             	and    ecx,0xf
c0019418:	01 d1                	add    ecx,edx
c001941a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001941e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0019422:	c1 ea 04             	shr    edx,0x4
c0019425:	6b d2 0a             	imul   edx,edx,0xa
c0019428:	01 d6                	add    esi,edx
c001942a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001942e:	83 e2 0f             	and    edx,0xf
c0019431:	01 d5                	add    ebp,edx
c0019433:	a8 02                	test   al,0x2
c0019435:	75 15                	jne    c001944c <RTC::completeRTCRefresh()+0x244>
c0019437:	f6 c3 80             	test   bl,0x80
c001943a:	74 10                	je     c001944c <RTC::completeRTCRefresh()+0x244>
c001943c:	83 e3 7f             	and    ebx,0x7f
c001943f:	b9 18 00 00 00       	mov    ecx,0x18
c0019444:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019447:	99                   	cdq    
c0019448:	f7 f9                	idiv   ecx
c001944a:	88 d3                	mov    bl,dl
c001944c:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0019452:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0019458:	77 06                	ja     c0019460 <RTC::completeRTCRefresh()+0x258>
c001945a:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0019460:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019465:	31 c9                	xor    ecx,ecx
c0019467:	31 d2                	xor    edx,edx
c0019469:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001946d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019471:	89 cd                	mov    ebp,ecx
c0019473:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0019477:	c1 e7 10             	shl    edi,0x10
c001947a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0019480:	c1 e0 10             	shl    eax,0x10
c0019483:	09 c5                	or     ebp,eax
c0019485:	89 e9                	mov    ecx,ebp
c0019487:	0f b7 c2             	movzx  eax,dx
c001948a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001948e:	09 f8                	or     eax,edi
c0019490:	89 c2                	mov    edx,eax
c0019492:	50                   	push   eax
c0019493:	50                   	push   eax
c0019494:	88 d9                	mov    cl,bl
c0019496:	51                   	push   ecx
c0019497:	52                   	push   edx
c0019498:	e8 b8 f7 fe ff       	call   c0008c55 <KeDatetimeToSeconds(datetime_t)>
c001949d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00194a1:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00194a7:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00194ad:	83 c4 4c             	add    esp,0x4c
c00194b0:	5b                   	pop    ebx
c00194b1:	5e                   	pop    esi
c00194b2:	5f                   	pop    edi
c00194b3:	5d                   	pop    ebp
c00194b4:	c3                   	ret    
c00194b5:	90                   	nop

c00194b6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00194b6:	55                   	push   ebp
c00194b7:	57                   	push   edi
c00194b8:	56                   	push   esi
c00194b9:	53                   	push   ebx
c00194ba:	83 ec 34             	sub    esp,0x34
c00194bd:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00194c1:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00194c5:	6a 00                	push   0x0
c00194c7:	6a 00                	push   0x0
c00194c9:	e8 85 d8 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c00194ce:	5d                   	pop    ebp
c00194cf:	89 fb                	mov    ebx,edi
c00194d1:	58                   	pop    eax
c00194d2:	6a 00                	push   0x0
c00194d4:	6a 02                	push   0x2
c00194d6:	e8 78 d8 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c00194db:	89 f8                	mov    eax,edi
c00194dd:	89 f9                	mov    ecx,edi
c00194df:	0f b6 c4             	movzx  eax,ah
c00194e2:	31 d2                	xor    edx,edx
c00194e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00194e8:	c1 e9 10             	shr    ecx,0x10
c00194eb:	89 f0                	mov    eax,esi
c00194ed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00194f1:	89 f0                	mov    eax,esi
c00194f3:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00194f7:	0f b6 c4             	movzx  eax,ah
c00194fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00194fe:	89 f0                	mov    eax,esi
c0019500:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019504:	c1 e8 10             	shr    eax,0x10
c0019507:	b9 64 00 00 00       	mov    ecx,0x64
c001950c:	f7 f1                	div    ecx
c001950e:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0019515:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019519:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001951d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019521:	e8 d9 d7 ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	a8 04                	test   al,0x4
c001952b:	89 c5                	mov    ebp,eax
c001952d:	75 6e                	jne    c001959d <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001952f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019533:	31 d2                	xor    edx,edx
c0019535:	0f b6 c1             	movzx  eax,cl
c0019538:	b9 0a 00 00 00       	mov    ecx,0xa
c001953d:	f7 f1                	div    ecx
c001953f:	c1 e0 04             	shl    eax,0x4
c0019542:	09 d0                	or     eax,edx
c0019544:	31 d2                	xor    edx,edx
c0019546:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001954a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001954f:	f7 f1                	div    ecx
c0019551:	c1 e0 04             	shl    eax,0x4
c0019554:	09 d0                	or     eax,edx
c0019556:	31 d2                	xor    edx,edx
c0019558:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001955c:	0f b6 c3             	movzx  eax,bl
c001955f:	f7 f1                	div    ecx
c0019561:	c1 e0 04             	shl    eax,0x4
c0019564:	09 d0                	or     eax,edx
c0019566:	31 d2                	xor    edx,edx
c0019568:	89 c3                	mov    ebx,eax
c001956a:	89 f0                	mov    eax,esi
c001956c:	0f b6 c0             	movzx  eax,al
c001956f:	f7 f1                	div    ecx
c0019571:	c1 e0 04             	shl    eax,0x4
c0019574:	09 d0                	or     eax,edx
c0019576:	31 d2                	xor    edx,edx
c0019578:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001957c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019581:	f7 f1                	div    ecx
c0019583:	c1 e0 04             	shl    eax,0x4
c0019586:	09 d0                	or     eax,edx
c0019588:	31 d2                	xor    edx,edx
c001958a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001958e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019592:	f7 f1                	div    ecx
c0019594:	c1 e0 04             	shl    eax,0x4
c0019597:	09 d0                	or     eax,edx
c0019599:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001959d:	83 e5 02             	and    ebp,0x2
c00195a0:	75 1e                	jne    c00195c0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00195a2:	0f b6 c3             	movzx  eax,bl
c00195a5:	83 f8 0b             	cmp    eax,0xb
c00195a8:	76 10                	jbe    c00195ba <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c00195aa:	8d 53 f4             	lea    edx,[ebx-0xc]
c00195ad:	84 d2                	test   dl,dl
c00195af:	88 d3                	mov    bl,dl
c00195b1:	75 02                	jne    c00195b5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c00195b3:	b3 0c                	mov    bl,0xc
c00195b5:	83 cb 80             	or     ebx,0xffffff80
c00195b8:	eb 06                	jmp    c00195c0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00195ba:	85 c0                	test   eax,eax
c00195bc:	75 02                	jne    c00195c0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00195be:	b3 0c                	mov    bl,0xc
c00195c0:	50                   	push   eax
c00195c1:	0f b6 db             	movzx  ebx,bl
c00195c4:	50                   	push   eax
c00195c5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00195ca:	52                   	push   edx
c00195cb:	6a 00                	push   0x0
c00195cd:	e8 81 d7 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c00195d2:	5a                   	pop    edx
c00195d3:	59                   	pop    ecx
c00195d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195d9:	50                   	push   eax
c00195da:	6a 02                	push   0x2
c00195dc:	e8 72 d7 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c00195e1:	5e                   	pop    esi
c00195e2:	5f                   	pop    edi
c00195e3:	53                   	push   ebx
c00195e4:	6a 04                	push   0x4
c00195e6:	e8 68 d7 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c00195eb:	5d                   	pop    ebp
c00195ec:	58                   	pop    eax
c00195ed:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00195f2:	52                   	push   edx
c00195f3:	6a 07                	push   0x7
c00195f5:	e8 59 d7 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c00195fa:	58                   	pop    eax
c00195fb:	5a                   	pop    edx
c00195fc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019601:	50                   	push   eax
c0019602:	6a 08                	push   0x8
c0019604:	e8 4a d7 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c0019609:	59                   	pop    ecx
c001960a:	5b                   	pop    ebx
c001960b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0019610:	55                   	push   ebp
c0019611:	6a 09                	push   0x9
c0019613:	e8 3b d7 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c0019618:	5e                   	pop    esi
c0019619:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001961d:	e8 e6 fb ff ff       	call   c0019208 <RTC::completeRTCRefresh()>
c0019622:	83 c4 3c             	add    esp,0x3c
c0019625:	b0 01                	mov    al,0x1
c0019627:	5b                   	pop    ebx
c0019628:	5e                   	pop    esi
c0019629:	5f                   	pop    edi
c001962a:	5d                   	pop    ebp
c001962b:	c3                   	ret    

c001962c <rtcIRQHandler(regs*, void*)>:
c001962c:	53                   	push   ebx
c001962d:	83 ec 14             	sub    esp,0x14
c0019630:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019634:	6a 0c                	push   0xc
c0019636:	e8 c4 d6 ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	a8 80                	test   al,0x80
c0019640:	74 24                	je     c0019666 <rtcIRQHandler(regs*, void*)+0x3a>
c0019642:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019649:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019650:	66 ff 05 94 d7 02 c0 	inc    WORD PTR ds:0xc002d794
c0019657:	75 0d                	jne    c0019666 <rtcIRQHandler(regs*, void*)+0x3a>
c0019659:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001965d:	83 c4 08             	add    esp,0x8
c0019660:	5b                   	pop    ebx
c0019661:	e9 a2 fb ff ff       	jmp    c0019208 <RTC::completeRTCRefresh()>
c0019666:	83 c4 08             	add    esp,0x8
c0019669:	5b                   	pop    ebx
c001966a:	c3                   	ret    
c001966b:	90                   	nop

c001966c <RTC::RTC()>:
c001966c:	83 ec 1c             	sub    esp,0x1c
c001966f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019673:	83 ec 08             	sub    esp,0x8
c0019676:	68 3b 3b 02 c0       	push   0xc0023b3b
c001967b:	50                   	push   eax
c001967c:	e8 af f4 fe ff       	call   c0008b30 <Clock::Clock(char const*)>
c0019681:	83 c4 10             	add    esp,0x10
c0019684:	ba 58 3b 02 c0       	mov    edx,0xc0023b58
c0019689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001968d:	89 10                	mov    DWORD PTR [eax],edx
c001968f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019693:	83 ec 0c             	sub    esp,0xc
c0019696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001969a:	6a 01                	push   0x1
c001969c:	68 2c 96 01 c0       	push   0xc001962c
c00196a1:	6a 08                	push   0x8
c00196a3:	50                   	push   eax
c00196a4:	e8 69 f9 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196a9:	83 c4 20             	add    esp,0x20
c00196ac:	89 c2                	mov    edx,eax
c00196ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196b2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00196b8:	fa                   	cli    
c00196b9:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00196be:	83 c0 01             	add    eax,0x1
c00196c1:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00196c6:	83 ec 0c             	sub    esp,0xc
c00196c9:	6a 0b                	push   0xb
c00196cb:	e8 2f d6 ff ff       	call   c0016cff <x86ReadCMOS(unsigned char)>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00196d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00196db:	83 c8 10             	or     eax,0x10
c00196de:	0f b6 c0             	movzx  eax,al
c00196e1:	83 ec 08             	sub    esp,0x8
c00196e4:	50                   	push   eax
c00196e5:	6a 0b                	push   0xb
c00196e7:	e8 67 d6 ff ff       	call   c0016d53 <x86WriteCMOS(unsigned char, unsigned char)>
c00196ec:	83 c4 10             	add    esp,0x10
c00196ef:	83 ec 0c             	sub    esp,0xc
c00196f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00196f6:	e8 0d fb ff ff       	call   c0019208 <RTC::completeRTCRefresh()>
c00196fb:	83 c4 10             	add    esp,0x10
c00196fe:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0019706:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001970b:	85 c0                	test   eax,eax
c001970d:	75 01                	jne    c0019710 <RTC::RTC()+0xa4>
c001970f:	fb                   	sti    
c0019710:	90                   	nop
c0019711:	83 c4 1c             	add    esp,0x1c
c0019714:	c3                   	ret    
c0019715:	66 90                	xchg   ax,ax
c0019717:	90                   	nop

c0019718 <HalConsoleScroll(int, int)>:
c0019718:	83 ec 10             	sub    esp,0x10
c001971b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0019723:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001972b:	90                   	nop
c001972c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019731:	0f 8f e1 00 00 00    	jg     c0019818 <HalConsoleScroll(int, int)+0x100>
c0019737:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001973f:	90                   	nop
c0019740:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019748:	0f 8f be 00 00 00    	jg     c001980c <HalConsoleScroll(int, int)+0xf4>
c001974e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019752:	89 d0                	mov    eax,edx
c0019754:	c1 e0 02             	shl    eax,0x2
c0019757:	01 d0                	add    eax,edx
c0019759:	c1 e0 05             	shl    eax,0x5
c001975c:	89 c2                	mov    edx,eax
c001975e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019762:	01 d0                	add    eax,edx
c0019764:	89 c2                	mov    edx,eax
c0019766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001976a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001976d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019771:	89 d0                	mov    eax,edx
c0019773:	c1 e0 02             	shl    eax,0x2
c0019776:	01 d0                	add    eax,edx
c0019778:	c1 e0 05             	shl    eax,0x5
c001977b:	89 c2                	mov    edx,eax
c001977d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019781:	01 d0                	add    eax,edx
c0019783:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001978d:	01 d0                	add    eax,edx
c001978f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0019791:	88 10                	mov    BYTE PTR [eax],dl
c0019793:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019798:	75 66                	jne    c0019800 <HalConsoleScroll(int, int)+0xe8>
c001979a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001979e:	83 e0 01             	and    eax,0x1
c00197a1:	74 39                	je     c00197dc <HalConsoleScroll(int, int)+0xc4>
c00197a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197a7:	83 e0 0f             	and    eax,0xf
c00197aa:	88 c2                	mov    dl,al
c00197ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197b0:	c1 e0 04             	shl    eax,0x4
c00197b3:	09 d0                	or     eax,edx
c00197b5:	88 c1                	mov    cl,al
c00197b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197bb:	89 d0                	mov    eax,edx
c00197bd:	c1 e0 02             	shl    eax,0x2
c00197c0:	01 d0                	add    eax,edx
c00197c2:	c1 e0 05             	shl    eax,0x5
c00197c5:	89 c2                	mov    edx,eax
c00197c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197cb:	01 d0                	add    eax,edx
c00197cd:	89 c2                	mov    edx,eax
c00197cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197d3:	01 d0                	add    eax,edx
c00197d5:	88 ca                	mov    dl,cl
c00197d7:	88 10                	mov    BYTE PTR [eax],dl
c00197d9:	eb 25                	jmp    c0019800 <HalConsoleScroll(int, int)+0xe8>
c00197db:	90                   	nop
c00197dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197e0:	89 d0                	mov    eax,edx
c00197e2:	c1 e0 02             	shl    eax,0x2
c00197e5:	01 d0                	add    eax,edx
c00197e7:	c1 e0 05             	shl    eax,0x5
c00197ea:	89 c2                	mov    edx,eax
c00197ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f0:	01 d0                	add    eax,edx
c00197f2:	89 c2                	mov    edx,eax
c00197f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197f8:	01 d0                	add    eax,edx
c00197fa:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00197fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019800:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0019805:	e9 36 ff ff ff       	jmp    c0019740 <HalConsoleScroll(int, int)+0x28>
c001980a:	66 90                	xchg   ax,ax
c001980c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019811:	e9 16 ff ff ff       	jmp    c001972c <HalConsoleScroll(int, int)+0x14>
c0019816:	66 90                	xchg   ax,ax
c0019818:	90                   	nop
c0019819:	83 c4 10             	add    esp,0x10
c001981c:	c3                   	ret    
c001981d:	8d 76 00             	lea    esi,[esi+0x0]

c0019820 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019820:	83 ec 14             	sub    esp,0x14
c0019823:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019827:	88 04 24             	mov    BYTE PTR [esp],al
c001982a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001982d:	0f b6 c0             	movzx  eax,al
c0019830:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019834:	89 d1                	mov    ecx,edx
c0019836:	83 e1 0f             	and    ecx,0xf
c0019839:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001983d:	c1 e2 04             	shl    edx,0x4
c0019840:	0f b6 d2             	movzx  edx,dl
c0019843:	09 ca                	or     edx,ecx
c0019845:	c1 e2 08             	shl    edx,0x8
c0019848:	09 d0                	or     eax,edx
c001984a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001984f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019857:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001985b:	89 d0                	mov    eax,edx
c001985d:	c1 e0 02             	shl    eax,0x2
c0019860:	01 d0                	add    eax,edx
c0019862:	c1 e0 04             	shl    eax,0x4
c0019865:	89 c2                	mov    edx,eax
c0019867:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001986b:	01 d0                	add    eax,edx
c001986d:	d1 e0                	shl    eax,1
c001986f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019873:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019877:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001987c:	66 89 10             	mov    WORD PTR [eax],dx
c001987f:	90                   	nop
c0019880:	83 c4 14             	add    esp,0x14
c0019883:	c3                   	ret    

c0019884 <HalConsoleCursorUpdate(int, int)>:
c0019884:	83 ec 20             	sub    esp,0x20
c0019887:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001988b:	89 c2                	mov    edx,eax
c001988d:	c1 e2 02             	shl    edx,0x2
c0019890:	01 d0                	add    eax,edx
c0019892:	c1 e0 04             	shl    eax,0x4
c0019895:	89 c2                	mov    edx,eax
c0019897:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001989b:	01 d0                	add    eax,edx
c001989d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00198a2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00198a9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00198ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00198b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198b6:	ee                   	out    dx,al
c00198b7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00198bc:	0f b6 c0             	movzx  eax,al
c00198bf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00198c6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00198ca:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00198ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00198d2:	ee                   	out    dx,al
c00198d3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00198da:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00198df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00198e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00198e7:	ee                   	out    dx,al
c00198e8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00198ed:	c1 e8 08             	shr    eax,0x8
c00198f0:	0f b6 c0             	movzx  eax,al
c00198f3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00198fa:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00198fe:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019902:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019906:	ee                   	out    dx,al
c0019907:	90                   	nop
c0019908:	83 c4 20             	add    esp,0x20
c001990b:	c3                   	ret    

c001990c <FAT::getName()>:
c001990c:	b8 8c 3b 02 c0       	mov    eax,0xc0023b8c
c0019911:	c3                   	ret    
c0019912:	66 90                	xchg   ax,ax

c0019914 <FAT::tell(void*, unsigned long long*)>:
c0019914:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019919:	75 09                	jne    c0019924 <FAT::tell(void*, unsigned long long*)+0x10>
c001991b:	b8 04 00 00 00       	mov    eax,0x4
c0019920:	c3                   	ret    
c0019921:	8d 76 00             	lea    esi,[esi+0x0]
c0019924:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019929:	75 09                	jne    c0019934 <FAT::tell(void*, unsigned long long*)+0x20>
c001992b:	b8 04 00 00 00       	mov    eax,0x4
c0019930:	c3                   	ret    
c0019931:	8d 76 00             	lea    esi,[esi+0x0]
c0019934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019938:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001993b:	ba 00 00 00 00       	mov    edx,0x0
c0019940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019944:	89 01                	mov    DWORD PTR [ecx],eax
c0019946:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019949:	b8 00 00 00 00       	mov    eax,0x0
c001994e:	c3                   	ret    
c001994f:	90                   	nop

c0019950 <FAT::stat(void*, unsigned long long*)>:
c0019950:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019955:	75 09                	jne    c0019960 <FAT::stat(void*, unsigned long long*)+0x10>
c0019957:	b8 04 00 00 00       	mov    eax,0x4
c001995c:	c3                   	ret    
c001995d:	8d 76 00             	lea    esi,[esi+0x0]
c0019960:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019965:	75 09                	jne    c0019970 <FAT::stat(void*, unsigned long long*)+0x20>
c0019967:	b8 04 00 00 00       	mov    eax,0x4
c001996c:	c3                   	ret    
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019977:	ba 00 00 00 00       	mov    edx,0x0
c001997c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019980:	89 01                	mov    DWORD PTR [ecx],eax
c0019982:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019985:	b8 00 00 00 00       	mov    eax,0x0
c001998a:	c3                   	ret    
c001998b:	90                   	nop

c001998c <FAT::~FAT()>:
c001998c:	83 ec 0c             	sub    esp,0xc
c001998f:	ba d8 3b 02 c0       	mov    edx,0xc0023bd8
c0019994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019998:	89 10                	mov    DWORD PTR [eax],edx
c001999a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001999e:	83 ec 0c             	sub    esp,0xc
c00199a1:	50                   	push   eax
c00199a2:	e8 d3 e3 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c00199a7:	83 c4 10             	add    esp,0x10
c00199aa:	90                   	nop
c00199ab:	83 c4 0c             	add    esp,0xc
c00199ae:	c3                   	ret    
c00199af:	90                   	nop

c00199b0 <FAT::~FAT()>:
c00199b0:	83 ec 0c             	sub    esp,0xc
c00199b3:	83 ec 0c             	sub    esp,0xc
c00199b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199ba:	e8 cd ff ff ff       	call   c001998c <FAT::~FAT()>
c00199bf:	83 c4 10             	add    esp,0x10
c00199c2:	83 ec 08             	sub    esp,0x8
c00199c5:	6a 08                	push   0x8
c00199c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199cb:	e8 4b 2c ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c00199d0:	83 c4 10             	add    esp,0x10
c00199d3:	83 c4 0c             	add    esp,0xc
c00199d6:	c3                   	ret    
c00199d7:	90                   	nop

c00199d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00199d8:	83 ec 1c             	sub    esp,0x1c
c00199db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00199e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00199e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00199eb:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c00199f2:	83 f8 ff             	cmp    eax,0xffffffff
c00199f5:	75 35                	jne    c0019a2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00199f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00199fb:	88 c2                	mov    dl,al
c00199fd:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019a02:	01 d0                	add    eax,edx
c0019a04:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019a08:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019a0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a12:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019a19:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019a1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019a22:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019a29:	eb 19                	jmp    c0019a44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019a2b:	90                   	nop
c0019a2c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019a30:	88 c2                	mov    dl,al
c0019a32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a36:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019a3d:	01 d0                	add    eax,edx
c0019a3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019a43:	90                   	nop
c0019a44:	83 ec 04             	sub    esp,0x4
c0019a47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a4f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019a53:	50                   	push   eax
c0019a54:	e8 7b b7 fe ff       	call   c00051d4 <f_getlabel>
c0019a59:	83 c4 10             	add    esp,0x10
c0019a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019a65:	75 09                	jne    c0019a70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019a67:	b8 00 00 00 00       	mov    eax,0x0
c0019a6c:	eb 0a                	jmp    c0019a78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019a6e:	66 90                	xchg   ax,ax
c0019a70:	b8 01 00 00 00       	mov    eax,0x1
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	83 c4 1c             	add    esp,0x1c
c0019a7b:	c3                   	ret    

c0019a7c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019a7c:	53                   	push   ebx
c0019a7d:	83 ec 58             	sub    esp,0x58
c0019a80:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019a88:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019a8c:	b9 00 00 00 00       	mov    ecx,0x0
c0019a91:	b8 3c 00 00 00       	mov    eax,0x3c
c0019a96:	83 e0 f8             	and    eax,0xfffffff8
c0019a99:	89 c3                	mov    ebx,eax
c0019a9b:	b8 00 00 00 00       	mov    eax,0x0
c0019aa0:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019aa4:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019aa8:	83 c0 08             	add    eax,0x8
c0019aab:	39 d8                	cmp    eax,ebx
c0019aad:	72 f1                	jb     c0019aa0 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0019aaf:	01 c2                	add    edx,eax
c0019ab1:	89 0a                	mov    DWORD PTR [edx],ecx
c0019ab3:	83 c2 04             	add    edx,0x4
c0019ab6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019aba:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019ac1:	83 f8 ff             	cmp    eax,0xffffffff
c0019ac4:	75 36                	jne    c0019afc <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019ac6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019aca:	88 c2                	mov    dl,al
c0019acc:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019ad1:	01 d0                	add    eax,edx
c0019ad3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ad7:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019add:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ae1:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019ae8:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019aed:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019af1:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019af8:	eb 1a                	jmp    c0019b14 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019afa:	66 90                	xchg   ax,ax
c0019afc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b00:	88 c2                	mov    dl,al
c0019b02:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019b06:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019b0d:	01 d0                	add    eax,edx
c0019b0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b13:	90                   	nop
c0019b14:	83 ec 08             	sub    esp,0x8
c0019b17:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019b1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b1f:	50                   	push   eax
c0019b20:	e8 4b 6d fe ff       	call   c0000870 <strcat>
c0019b25:	83 c4 10             	add    esp,0x10
c0019b28:	83 ec 0c             	sub    esp,0xc
c0019b2b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b2f:	50                   	push   eax
c0019b30:	e8 f3 b7 fe ff       	call   c0005328 <f_setlabel>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019b3c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019b41:	75 09                	jne    c0019b4c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0019b43:	b8 00 00 00 00       	mov    eax,0x0
c0019b48:	eb 0a                	jmp    c0019b54 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019b4a:	66 90                	xchg   ax,ax
c0019b4c:	b8 01 00 00 00       	mov    eax,0x1
c0019b51:	8d 76 00             	lea    esi,[esi+0x0]
c0019b54:	83 c4 58             	add    esp,0x58
c0019b57:	5b                   	pop    ebx
c0019b58:	c3                   	ret    
c0019b59:	90                   	nop
c0019b5a:	66 90                	xchg   ax,ax

c0019b5c <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019b5c:	83 ec 2c             	sub    esp,0x2c
c0019b5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019b67:	83 ec 08             	sub    esp,0x8
c0019b6a:	68 b0 3b 02 c0       	push   0xc0023bb0
c0019b6f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b73:	e8 08 6c fe ff       	call   c0000780 <strcmp>
c0019b78:	83 c4 10             	add    esp,0x10
c0019b7b:	85 c0                	test   eax,eax
c0019b7d:	0f 94 c0             	sete   al
c0019b80:	0f b6 c0             	movzx  eax,al
c0019b83:	85 c0                	test   eax,eax
c0019b85:	74 0d                	je     c0019b94 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019b87:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019b8f:	e9 c0 00 00 00       	jmp    c0019c54 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019b94:	83 ec 08             	sub    esp,0x8
c0019b97:	68 a2 3b 02 c0       	push   0xc0023ba2
c0019b9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019ba0:	e8 db 6b fe ff       	call   c0000780 <strcmp>
c0019ba5:	83 c4 10             	add    esp,0x10
c0019ba8:	85 c0                	test   eax,eax
c0019baa:	0f 94 c0             	sete   al
c0019bad:	0f b6 c0             	movzx  eax,al
c0019bb0:	85 c0                	test   eax,eax
c0019bb2:	74 10                	je     c0019bc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019bb4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019bbc:	e9 93 00 00 00       	jmp    c0019c54 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc4:	83 ec 08             	sub    esp,0x8
c0019bc7:	68 a8 3b 02 c0       	push   0xc0023ba8
c0019bcc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019bd0:	e8 ab 6b fe ff       	call   c0000780 <strcmp>
c0019bd5:	83 c4 10             	add    esp,0x10
c0019bd8:	85 c0                	test   eax,eax
c0019bda:	0f 94 c0             	sete   al
c0019bdd:	0f b6 c0             	movzx  eax,al
c0019be0:	85 c0                	test   eax,eax
c0019be2:	74 0c                	je     c0019bf0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019be4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019bec:	eb 66                	jmp    c0019c54 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019bee:	66 90                	xchg   ax,ax
c0019bf0:	83 ec 08             	sub    esp,0x8
c0019bf3:	68 dc 0d 02 c0       	push   0xc0020ddc
c0019bf8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019bfc:	e8 7f 6b fe ff       	call   c0000780 <strcmp>
c0019c01:	83 c4 10             	add    esp,0x10
c0019c04:	85 c0                	test   eax,eax
c0019c06:	0f 94 c0             	sete   al
c0019c09:	0f b6 c0             	movzx  eax,al
c0019c0c:	85 c0                	test   eax,eax
c0019c0e:	74 0c                	je     c0019c1c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019c10:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019c18:	eb 3a                	jmp    c0019c54 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019c1a:	66 90                	xchg   ax,ax
c0019c1c:	83 ec 08             	sub    esp,0x8
c0019c1f:	68 ae 3b 02 c0       	push   0xc0023bae
c0019c24:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c28:	e8 53 6b fe ff       	call   c0000780 <strcmp>
c0019c2d:	83 c4 10             	add    esp,0x10
c0019c30:	85 c0                	test   eax,eax
c0019c32:	0f 94 c0             	sete   al
c0019c35:	0f b6 c0             	movzx  eax,al
c0019c38:	85 c0                	test   eax,eax
c0019c3a:	74 0c                	je     c0019c48 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019c3c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019c44:	eb 0e                	jmp    c0019c54 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019c46:	66 90                	xchg   ax,ax
c0019c48:	b8 08 00 00 00       	mov    eax,0x8
c0019c4d:	e9 ea 00 00 00       	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019c52:	66 90                	xchg   ax,ax
c0019c54:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019c5b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019c60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c64:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019c6b:	83 f8 ff             	cmp    eax,0xffffffff
c0019c6e:	75 34                	jne    c0019ca4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019c70:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019c74:	88 c2                	mov    dl,al
c0019c76:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019c7b:	01 d0                	add    eax,edx
c0019c7d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019c81:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019c87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c8b:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019c92:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019c97:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019c9b:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019ca2:	eb 18                	jmp    c0019cbc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019ca4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019ca8:	88 c2                	mov    dl,al
c0019caa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cae:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019cb5:	01 d0                	add    eax,edx
c0019cb7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019cbb:	90                   	nop
c0019cbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cc0:	88 04 24             	mov    BYTE PTR [esp],al
c0019cc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ccb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019cd3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019cd8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019ce0:	83 ec 0c             	sub    esp,0xc
c0019ce3:	68 00 20 00 00       	push   0x2000
c0019ce8:	e8 c3 4b ff ff       	call   c000e8b0 <malloc>
c0019ced:	83 c4 10             	add    esp,0x10
c0019cf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019cf4:	68 00 20 00 00       	push   0x2000
c0019cf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cfd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d01:	50                   	push   eax
c0019d02:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019d06:	50                   	push   eax
c0019d07:	e8 19 b9 fe ff       	call   c0005625 <f_mkfs>
c0019d0c:	83 c4 10             	add    esp,0x10
c0019d0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d18:	75 0a                	jne    c0019d24 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019d1a:	b8 00 00 00 00       	mov    eax,0x0
c0019d1f:	eb 1b                	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019d21:	8d 76 00             	lea    esi,[esi+0x0]
c0019d24:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019d29:	75 09                	jne    c0019d34 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019d2b:	b8 09 00 00 00       	mov    eax,0x9
c0019d30:	eb 0a                	jmp    c0019d3c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019d32:	66 90                	xchg   ax,ax
c0019d34:	b8 01 00 00 00       	mov    eax,0x1
c0019d39:	8d 76 00             	lea    esi,[esi+0x0]
c0019d3c:	83 c4 2c             	add    esp,0x2c
c0019d3f:	c3                   	ret    

c0019d40 <FAT::tryMount(LogicalDisk*, int)>:
c0019d40:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019d46:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019d4b:	83 f8 14             	cmp    eax,0x14
c0019d4e:	75 18                	jne    c0019d68 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019d50:	83 ec 0c             	sub    esp,0xc
c0019d53:	68 b4 3b 02 c0       	push   0xc0023bb4
c0019d58:	e8 99 4e ff ff       	call   c000ebf6 <KePanic(char const*)>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	b0 00                	mov    al,0x0
c0019d62:	e9 ed 01 00 00       	jmp    c0019f54 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019d67:	90                   	nop
c0019d68:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019d6f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019d75:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019d7b:	3d 00 02 00 00       	cmp    eax,0x200
c0019d80:	74 0a                	je     c0019d8c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019d82:	b0 00                	mov    al,0x0
c0019d84:	e9 cb 01 00 00       	jmp    c0019f54 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019d89:	8d 76 00             	lea    esi,[esi+0x0]
c0019d8c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019d94:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019d9b:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019da2:	83 f8 ff             	cmp    eax,0xffffffff
c0019da5:	74 09                	je     c0019db0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019da7:	b0 01                	mov    al,0x1
c0019da9:	e9 a6 01 00 00       	jmp    c0019f54 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019dae:	66 90                	xchg   ax,ax
c0019db0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019dba:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019dc2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019dc9:	88 c2                	mov    dl,al
c0019dcb:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019dd0:	01 d0                	add    eax,edx
c0019dd2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019dd9:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019ddf:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019de6:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019ded:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019df2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019df9:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019e00:	83 ec 0c             	sub    esp,0xc
c0019e03:	68 34 02 00 00       	push   0x234
c0019e08:	e8 a3 4a ff ff       	call   c000e8b0 <malloc>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019e17:	83 ec 04             	sub    esp,0x4
c0019e1a:	6a 00                	push   0x0
c0019e1c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019e23:	50                   	push   eax
c0019e24:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019e2b:	e8 ef 9f fe ff       	call   c0003e1f <f_mount>
c0019e30:	83 c4 10             	add    esp,0x10
c0019e33:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019e3a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019e42:	74 1c                	je     c0019e60 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019e44:	83 ec 0c             	sub    esp,0xc
c0019e47:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019e4e:	e8 7d 4a ff ff       	call   c000e8d0 <rfree>
c0019e53:	83 c4 10             	add    esp,0x10
c0019e56:	b0 00                	mov    al,0x0
c0019e58:	e9 f7 00 00 00       	jmp    c0019f54 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e60:	83 ec 04             	sub    esp,0x4
c0019e63:	68 00 01 00 00       	push   0x100
c0019e68:	6a 00                	push   0x0
c0019e6a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019e71:	50                   	push   eax
c0019e72:	e8 79 66 fe ff       	call   c00004f0 <memset>
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	83 ec 08             	sub    esp,0x8
c0019e7d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019e84:	50                   	push   eax
c0019e85:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019e8c:	50                   	push   eax
c0019e8d:	e8 de 69 fe ff       	call   c0000870 <strcat>
c0019e92:	83 c4 10             	add    esp,0x10
c0019e95:	83 ec 08             	sub    esp,0x8
c0019e98:	68 c2 3b 02 c0       	push   0xc0023bc2
c0019e9d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019ea4:	50                   	push   eax
c0019ea5:	e8 c6 69 fe ff       	call   c0000870 <strcat>
c0019eaa:	83 c4 10             	add    esp,0x10
c0019ead:	83 ec 04             	sub    esp,0x4
c0019eb0:	6a 01                	push   0x1
c0019eb2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019eb9:	50                   	push   eax
c0019eba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ebe:	50                   	push   eax
c0019ebf:	e8 bd 9f fe ff       	call   c0003e81 <f_open>
c0019ec4:	83 c4 10             	add    esp,0x10
c0019ec7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019ece:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019ed5:	85 c0                	test   eax,eax
c0019ed7:	74 0b                	je     c0019ee4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019ed9:	78 31                	js     c0019f0c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019edb:	83 e8 04             	sub    eax,0x4
c0019ede:	83 f8 01             	cmp    eax,0x1
c0019ee1:	77 29                	ja     c0019f0c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019ee3:	90                   	nop
c0019ee4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019eec:	83 ec 0c             	sub    esp,0xc
c0019eef:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ef3:	50                   	push   eax
c0019ef4:	e8 38 a7 fe ff       	call   c0004631 <f_close>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	90                   	nop
c0019efd:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019f05:	85 c0                	test   eax,eax
c0019f07:	74 43                	je     c0019f4c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019f09:	eb 31                	jmp    c0019f3c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019f0b:	90                   	nop
c0019f0c:	83 ec 0c             	sub    esp,0xc
c0019f0f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019f16:	e8 b5 49 ff ff       	call   c000e8d0 <rfree>
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	83 ec 04             	sub    esp,0x4
c0019f21:	6a 00                	push   0x0
c0019f23:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019f2a:	50                   	push   eax
c0019f2b:	6a 00                	push   0x0
c0019f2d:	e8 ed 9e fe ff       	call   c0003e1f <f_mount>
c0019f32:	83 c4 10             	add    esp,0x10
c0019f35:	b0 00                	mov    al,0x0
c0019f37:	eb 1b                	jmp    c0019f54 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019f39:	8d 76 00             	lea    esi,[esi+0x0]
c0019f3c:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019f41:	83 c0 01             	add    eax,0x1
c0019f44:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c0019f49:	8d 76 00             	lea    esi,[esi+0x0]
c0019f4c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019f53:	90                   	nop
c0019f54:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019f5a:	c3                   	ret    
c0019f5b:	90                   	nop

c0019f5c <FAT::allocateSwapfile(char const*, int)>:
c0019f5c:	55                   	push   ebp
c0019f5d:	57                   	push   edi
c0019f5e:	56                   	push   esi
c0019f5f:	53                   	push   ebx
c0019f60:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019f66:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019f71:	83 ec 0c             	sub    esp,0xc
c0019f74:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019f7b:	e8 30 49 ff ff       	call   c000e8b0 <malloc>
c0019f80:	83 c4 10             	add    esp,0x10
c0019f83:	89 c7                	mov    edi,eax
c0019f85:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0019f8a:	83 ec 04             	sub    esp,0x4
c0019f8d:	50                   	push   eax
c0019f8e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019f95:	57                   	push   edi
c0019f96:	e8 91 e1 fe ff       	call   c000812c <File::File(char const*, Process*)>
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019fa5:	83 ec 04             	sub    esp,0x4
c0019fa8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019fac:	50                   	push   eax
c0019fad:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fb1:	50                   	push   eax
c0019fb2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019fb9:	e8 8e e4 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0019fbe:	83 c4 10             	add    esp,0x10
c0019fc1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019fc8:	c1 e0 14             	shl    eax,0x14
c0019fcb:	89 c7                	mov    edi,eax
c0019fcd:	89 c5                	mov    ebp,eax
c0019fcf:	c1 fd 1f             	sar    ebp,0x1f
c0019fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019fda:	89 f9                	mov    ecx,edi
c0019fdc:	31 c1                	xor    ecx,eax
c0019fde:	89 cb                	mov    ebx,ecx
c0019fe0:	89 e9                	mov    ecx,ebp
c0019fe2:	31 d1                	xor    ecx,edx
c0019fe4:	89 ce                	mov    esi,ecx
c0019fe6:	89 f0                	mov    eax,esi
c0019fe8:	09 d8                	or     eax,ebx
c0019fea:	0f 84 9c 00 00 00    	je     c001a08c <FAT::allocateSwapfile(char const*, int)+0x130>
c0019ff0:	83 ec 0c             	sub    esp,0xc
c0019ff3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019ffa:	e8 19 e3 fe ff       	call   c0008318 <File::unlink()>
c0019fff:	83 c4 10             	add    esp,0x10
c001a002:	83 ec 08             	sub    esp,0x8
c001a005:	6a 12                	push   0x12
c001a007:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a00e:	e8 37 e1 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a01d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a023:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a02a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a031:	c1 e0 14             	shl    eax,0x14
c001a034:	83 ec 04             	sub    esp,0x4
c001a037:	6a 01                	push   0x1
c001a039:	50                   	push   eax
c001a03a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a041:	e8 72 b4 fe ff       	call   c00054b8 <f_expand>
c001a046:	83 c4 10             	add    esp,0x10
c001a049:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a050:	8b 00                	mov    eax,DWORD PTR [eax]
c001a052:	83 c0 10             	add    eax,0x10
c001a055:	8b 00                	mov    eax,DWORD PTR [eax]
c001a057:	83 ec 0c             	sub    esp,0xc
c001a05a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a05e:	52                   	push   edx
c001a05f:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a063:	52                   	push   edx
c001a064:	6a 00                	push   0x0
c001a066:	68 00 04 00 00       	push   0x400
c001a06b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a072:	ff d0                	call   eax
c001a074:	83 c4 20             	add    esp,0x20
c001a077:	83 ec 0c             	sub    esp,0xc
c001a07a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a081:	e8 22 e1 fe ff       	call   c00081a8 <File::close()>
c001a086:	83 c4 10             	add    esp,0x10
c001a089:	8d 76 00             	lea    esi,[esi+0x0]
c001a08c:	83 ec 08             	sub    esp,0x8
c001a08f:	6a 01                	push   0x1
c001a091:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a098:	e8 ad e0 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001a09d:	83 c4 10             	add    esp,0x10
c001a0a0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a0a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0a9:	83 c0 0c             	add    eax,0xc
c001a0ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0ae:	83 ec 0c             	sub    esp,0xc
c001a0b1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a0b5:	52                   	push   edx
c001a0b6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001a0ba:	52                   	push   edx
c001a0bb:	6a 00                	push   0x0
c001a0bd:	6a 04                	push   0x4
c001a0bf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a0c6:	ff d0                	call   eax
c001a0c8:	83 c4 20             	add    esp,0x20
c001a0cb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a0d2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a0d8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a0df:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a0e6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a0e9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001a0f0:	83 ec 0c             	sub    esp,0xc
c001a0f3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a0fa:	e8 a9 e0 fe ff       	call   c00081a8 <File::close()>
c001a0ff:	83 c4 10             	add    esp,0x10
c001a102:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001a109:	ba 00 00 00 00       	mov    edx,0x0
c001a10e:	81 c4 3c 04 00 00    	add    esp,0x43c
c001a114:	5b                   	pop    ebx
c001a115:	5e                   	pop    esi
c001a116:	5f                   	pop    edi
c001a117:	5d                   	pop    ebp
c001a118:	c3                   	ret    
c001a119:	90                   	nop
c001a11a:	66 90                	xchg   ax,ax

c001a11c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a11c:	57                   	push   edi
c001a11d:	56                   	push   esi
c001a11e:	53                   	push   ebx
c001a11f:	81 ec 50 02 00 00    	sub    esp,0x250
c001a125:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001a12d:	74 0d                	je     c001a13c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001a12f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001a137:	75 0f                	jne    c001a148 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001a139:	8d 76 00             	lea    esi,[esi+0x0]
c001a13c:	b8 04 00 00 00       	mov    eax,0x4
c001a141:	e9 3a 01 00 00       	jmp    c001a280 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a146:	66 90                	xchg   ax,ax
c001a148:	83 ec 08             	sub    esp,0x8
c001a14b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a152:	50                   	push   eax
c001a153:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001a15a:	e8 9e a7 fe ff       	call   c00048fd <f_readdir>
c001a15f:	83 c4 10             	add    esp,0x10
c001a162:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001a169:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001a170:	83 ec 0c             	sub    esp,0xc
c001a173:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a17a:	83 c0 16             	add    eax,0x16
c001a17d:	50                   	push   eax
c001a17e:	e8 fd 63 fe ff       	call   c0000580 <strlen>
c001a183:	83 c4 10             	add    esp,0x10
c001a186:	ba 00 00 00 00       	mov    edx,0x0
c001a18b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a18f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a193:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001a19a:	0f b6 c0             	movzx  eax,al
c001a19d:	83 e0 10             	and    eax,0x10
c001a1a0:	74 0a                	je     c001a1ac <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001a1a2:	b8 02 00 00 00       	mov    eax,0x2
c001a1a7:	eb 0b                	jmp    c001a1b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001a1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1ac:	b8 01 00 00 00       	mov    eax,0x1
c001a1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1b8:	83 ec 08             	sub    esp,0x8
c001a1bb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a1c2:	83 c0 16             	add    eax,0x16
c001a1c5:	50                   	push   eax
c001a1c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1ca:	83 c0 10             	add    eax,0x10
c001a1cd:	50                   	push   eax
c001a1ce:	e8 7d 64 fe ff       	call   c0000650 <strcpy>
c001a1d3:	83 c4 10             	add    esp,0x10
c001a1d6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001a1dd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001a1e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a1e8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001a1ef:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001a1f6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001a1fd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001a204:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001a20b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001a212:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001a219:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001a220:	89 c6                	mov    esi,eax
c001a222:	89 d7                	mov    edi,edx
c001a224:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a226:	89 c8                	mov    eax,ecx
c001a228:	89 fa                	mov    edx,edi
c001a22a:	89 f3                	mov    ebx,esi
c001a22c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001a233:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001a23a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a241:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a248:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a24e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a255:	0f be c0             	movsx  eax,al
c001a258:	85 c0                	test   eax,eax
c001a25a:	75 08                	jne    c001a264 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a25c:	b8 07 00 00 00       	mov    eax,0x7
c001a261:	eb 1d                	jmp    c001a280 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a263:	90                   	nop
c001a264:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a26b:	85 c0                	test   eax,eax
c001a26d:	75 09                	jne    c001a278 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a26f:	b8 00 00 00 00       	mov    eax,0x0
c001a274:	eb 0a                	jmp    c001a280 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a276:	66 90                	xchg   ax,ax
c001a278:	b8 01 00 00 00       	mov    eax,0x1
c001a27d:	8d 76 00             	lea    esi,[esi+0x0]
c001a280:	81 c4 50 02 00 00    	add    esp,0x250
c001a286:	5b                   	pop    ebx
c001a287:	5e                   	pop    esi
c001a288:	5f                   	pop    edi
c001a289:	c3                   	ret    
c001a28a:	66 90                	xchg   ax,ax

c001a28c <FAT::read(void*, unsigned long, void*, int*)>:
c001a28c:	83 ec 1c             	sub    esp,0x1c
c001a28f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a294:	74 0a                	je     c001a2a0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a296:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a29b:	75 0b                	jne    c001a2a8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a29d:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a0:	b8 04 00 00 00       	mov    eax,0x4
c001a2a5:	eb 41                	jmp    c001a2e8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a2a7:	90                   	nop
c001a2a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2ac:	50                   	push   eax
c001a2ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a2b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2b9:	e8 86 9e fe ff       	call   c0004144 <f_read>
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2c9:	89 c2                	mov    edx,eax
c001a2cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a2cf:	89 10                	mov    DWORD PTR [eax],edx
c001a2d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a2d5:	85 c0                	test   eax,eax
c001a2d7:	75 07                	jne    c001a2e0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a2d9:	b8 00 00 00 00       	mov    eax,0x0
c001a2de:	eb 08                	jmp    c001a2e8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a2e0:	b8 01 00 00 00       	mov    eax,0x1
c001a2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2e8:	83 c4 1c             	add    esp,0x1c
c001a2eb:	c3                   	ret    

c001a2ec <FAT::write(void*, unsigned long, void*, int*)>:
c001a2ec:	83 ec 1c             	sub    esp,0x1c
c001a2ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a2f4:	74 0a                	je     c001a300 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a2f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a2fb:	75 0b                	jne    c001a308 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a300:	b8 04 00 00 00       	mov    eax,0x4
c001a305:	eb 41                	jmp    c001a348 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a307:	90                   	nop
c001a308:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a30c:	50                   	push   eax
c001a30d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a311:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a315:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a319:	e8 07 a0 fe ff       	call   c0004325 <f_write>
c001a31e:	83 c4 10             	add    esp,0x10
c001a321:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a325:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a329:	89 c2                	mov    edx,eax
c001a32b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a32f:	89 10                	mov    DWORD PTR [eax],edx
c001a331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a335:	85 c0                	test   eax,eax
c001a337:	75 07                	jne    c001a340 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a339:	b8 00 00 00 00       	mov    eax,0x0
c001a33e:	eb 08                	jmp    c001a348 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a340:	b8 01 00 00 00       	mov    eax,0x1
c001a345:	8d 76 00             	lea    esi,[esi+0x0]
c001a348:	83 c4 1c             	add    esp,0x1c
c001a34b:	c3                   	ret    

c001a34c <FAT::close(void*)>:
c001a34c:	83 ec 1c             	sub    esp,0x1c
c001a34f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a354:	75 0a                	jne    c001a360 <FAT::close(void*)+0x14>
c001a356:	b8 04 00 00 00       	mov    eax,0x4
c001a35b:	eb 3f                	jmp    c001a39c <FAT::close(void*)+0x50>
c001a35d:	8d 76 00             	lea    esi,[esi+0x0]
c001a360:	83 ec 0c             	sub    esp,0xc
c001a363:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a367:	e8 c5 a2 fe ff       	call   c0004631 <f_close>
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a373:	83 ec 0c             	sub    esp,0xc
c001a376:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a37a:	e8 41 45 ff ff       	call   c000e8c0 <free>
c001a37f:	83 c4 10             	add    esp,0x10
c001a382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a386:	85 c0                	test   eax,eax
c001a388:	75 0a                	jne    c001a394 <FAT::close(void*)+0x48>
c001a38a:	b8 00 00 00 00       	mov    eax,0x0
c001a38f:	eb 0b                	jmp    c001a39c <FAT::close(void*)+0x50>
c001a391:	8d 76 00             	lea    esi,[esi+0x0]
c001a394:	b8 01 00 00 00       	mov    eax,0x1
c001a399:	8d 76 00             	lea    esi,[esi+0x0]
c001a39c:	83 c4 1c             	add    esp,0x1c
c001a39f:	c3                   	ret    

c001a3a0 <FAT::closeDir(void*)>:
c001a3a0:	83 ec 1c             	sub    esp,0x1c
c001a3a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a3a8:	75 0a                	jne    c001a3b4 <FAT::closeDir(void*)+0x14>
c001a3aa:	b8 04 00 00 00       	mov    eax,0x4
c001a3af:	eb 3f                	jmp    c001a3f0 <FAT::closeDir(void*)+0x50>
c001a3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b4:	83 ec 0c             	sub    esp,0xc
c001a3b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a3bb:	e8 1b a5 fe ff       	call   c00048db <f_closedir>
c001a3c0:	83 c4 10             	add    esp,0x10
c001a3c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3c7:	83 ec 0c             	sub    esp,0xc
c001a3ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a3ce:	e8 ed 44 ff ff       	call   c000e8c0 <free>
c001a3d3:	83 c4 10             	add    esp,0x10
c001a3d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3da:	85 c0                	test   eax,eax
c001a3dc:	75 0a                	jne    c001a3e8 <FAT::closeDir(void*)+0x48>
c001a3de:	b8 00 00 00 00       	mov    eax,0x0
c001a3e3:	eb 0b                	jmp    c001a3f0 <FAT::closeDir(void*)+0x50>
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	b8 01 00 00 00       	mov    eax,0x1
c001a3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f0:	83 c4 1c             	add    esp,0x1c
c001a3f3:	c3                   	ret    

c001a3f4 <FAT::truncate(void*, unsigned long long)>:
c001a3f4:	83 ec 2c             	sub    esp,0x2c
c001a3f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a3ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a407:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a40c:	75 0a                	jne    c001a418 <FAT::truncate(void*, unsigned long long)+0x24>
c001a40e:	b8 04 00 00 00       	mov    eax,0x4
c001a413:	eb 47                	jmp    c001a45c <FAT::truncate(void*, unsigned long long)+0x68>
c001a415:	8d 76 00             	lea    esi,[esi+0x0]
c001a418:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a41c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a423:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a42b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a42f:	83 ec 08             	sub    esp,0x8
c001a432:	50                   	push   eax
c001a433:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a437:	e8 24 a2 fe ff       	call   c0004660 <f_lseek>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a443:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a447:	85 c0                	test   eax,eax
c001a449:	75 09                	jne    c001a454 <FAT::truncate(void*, unsigned long long)+0x60>
c001a44b:	b8 00 00 00 00       	mov    eax,0x0
c001a450:	eb 0a                	jmp    c001a45c <FAT::truncate(void*, unsigned long long)+0x68>
c001a452:	66 90                	xchg   ax,ax
c001a454:	b8 01 00 00 00       	mov    eax,0x1
c001a459:	8d 76 00             	lea    esi,[esi+0x0]
c001a45c:	83 c4 2c             	add    esp,0x2c
c001a45f:	c3                   	ret    

c001a460 <FAT::seek(void*, unsigned long long)>:
c001a460:	83 ec 2c             	sub    esp,0x2c
c001a463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a46b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a46f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a473:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a478:	75 0a                	jne    c001a484 <FAT::seek(void*, unsigned long long)+0x24>
c001a47a:	b8 04 00 00 00       	mov    eax,0x4
c001a47f:	eb 33                	jmp    c001a4b4 <FAT::seek(void*, unsigned long long)+0x54>
c001a481:	8d 76 00             	lea    esi,[esi+0x0]
c001a484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a488:	83 ec 08             	sub    esp,0x8
c001a48b:	50                   	push   eax
c001a48c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a490:	e8 cb a1 fe ff       	call   c0004660 <f_lseek>
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a49c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4a0:	85 c0                	test   eax,eax
c001a4a2:	75 08                	jne    c001a4ac <FAT::seek(void*, unsigned long long)+0x4c>
c001a4a4:	b8 00 00 00 00       	mov    eax,0x0
c001a4a9:	eb 09                	jmp    c001a4b4 <FAT::seek(void*, unsigned long long)+0x54>
c001a4ab:	90                   	nop
c001a4ac:	b8 01 00 00 00       	mov    eax,0x1
c001a4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b4:	83 c4 2c             	add    esp,0x2c
c001a4b7:	c3                   	ret    

c001a4b8 <fatWrapperReadDisk>:
c001a4b8:	53                   	push   ebx
c001a4b9:	83 ec 18             	sub    esp,0x18
c001a4bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a4c9:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a4d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a4d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4d8:	ba 00 00 00 00       	mov    edx,0x0
c001a4dd:	83 ec 0c             	sub    esp,0xc
c001a4e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4e4:	53                   	push   ebx
c001a4e5:	52                   	push   edx
c001a4e6:	50                   	push   eax
c001a4e7:	51                   	push   ecx
c001a4e8:	e8 cf fb fe ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c001a4ed:	83 c4 20             	add    esp,0x20
c001a4f0:	83 c4 18             	add    esp,0x18
c001a4f3:	5b                   	pop    ebx
c001a4f4:	c3                   	ret    
c001a4f5:	8d 76 00             	lea    esi,[esi+0x0]

c001a4f8 <fatWrapperWriteDisk>:
c001a4f8:	53                   	push   ebx
c001a4f9:	83 ec 18             	sub    esp,0x18
c001a4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a500:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a504:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a509:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a510:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a514:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a518:	ba 00 00 00 00       	mov    edx,0x0
c001a51d:	83 ec 0c             	sub    esp,0xc
c001a520:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a524:	53                   	push   ebx
c001a525:	52                   	push   edx
c001a526:	50                   	push   eax
c001a527:	51                   	push   ecx
c001a528:	e8 fb fb fe ff       	call   c000a128 <LogicalDisk::write(unsigned long long, int, void*)>
c001a52d:	83 c4 20             	add    esp,0x20
c001a530:	83 c4 18             	add    esp,0x18
c001a533:	5b                   	pop    ebx
c001a534:	c3                   	ret    
c001a535:	8d 76 00             	lea    esi,[esi+0x0]

c001a538 <fatWrapperIoctl>:
c001a538:	53                   	push   ebx
c001a539:	83 ec 28             	sub    esp,0x28
c001a53c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a540:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a544:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a548:	88 d0                	mov    al,dl
c001a54a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a54e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a553:	83 f8 02             	cmp    eax,0x2
c001a556:	75 34                	jne    c001a58c <fatWrapperIoctl+0x54>
c001a558:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a55c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a560:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a565:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a56c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a572:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a578:	89 c2                	mov    edx,eax
c001a57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a57e:	66 89 10             	mov    WORD PTR [eax],dx
c001a581:	b8 00 00 00 00       	mov    eax,0x0
c001a586:	e9 c5 00 00 00       	jmp    c001a650 <fatWrapperIoctl+0x118>
c001a58b:	90                   	nop
c001a58c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a591:	83 f8 01             	cmp    eax,0x1
c001a594:	75 6a                	jne    c001a600 <fatWrapperIoctl+0xc8>
c001a596:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a59a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a59e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5a3:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a5aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a5b0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a5b6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a5bc:	89 c8                	mov    eax,ecx
c001a5be:	89 da                	mov    edx,ebx
c001a5c0:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a5c4:	c1 e0 0a             	shl    eax,0xa
c001a5c7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a5cc:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001a5d3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a5d9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a5df:	89 cb                	mov    ebx,ecx
c001a5e1:	c1 fb 1f             	sar    ebx,0x1f
c001a5e4:	53                   	push   ebx
c001a5e5:	51                   	push   ecx
c001a5e6:	52                   	push   edx
c001a5e7:	50                   	push   eax
c001a5e8:	e8 e7 59 00 00       	call   c001ffd4 <__udivdi3>
c001a5ed:	83 c4 10             	add    esp,0x10
c001a5f0:	89 c2                	mov    edx,eax
c001a5f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a5f6:	89 10                	mov    DWORD PTR [eax],edx
c001a5f8:	b8 00 00 00 00       	mov    eax,0x0
c001a5fd:	eb 51                	jmp    c001a650 <fatWrapperIoctl+0x118>
c001a5ff:	90                   	nop
c001a600:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a605:	85 c0                	test   eax,eax
c001a607:	75 07                	jne    c001a610 <fatWrapperIoctl+0xd8>
c001a609:	b8 00 00 00 00       	mov    eax,0x0
c001a60e:	eb 40                	jmp    c001a650 <fatWrapperIoctl+0x118>
c001a610:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a615:	83 f8 03             	cmp    eax,0x3
c001a618:	75 1a                	jne    c001a634 <fatWrapperIoctl+0xfc>
c001a61a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a61e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a622:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a626:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a62c:	b8 00 00 00 00       	mov    eax,0x0
c001a631:	eb 1d                	jmp    c001a650 <fatWrapperIoctl+0x118>
c001a633:	90                   	nop
c001a634:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a639:	83 f8 04             	cmp    eax,0x4
c001a63c:	75 0a                	jne    c001a648 <fatWrapperIoctl+0x110>
c001a63e:	b8 00 00 00 00       	mov    eax,0x0
c001a643:	eb 0b                	jmp    c001a650 <fatWrapperIoctl+0x118>
c001a645:	8d 76 00             	lea    esi,[esi+0x0]
c001a648:	b8 04 00 00 00       	mov    eax,0x4
c001a64d:	8d 76 00             	lea    esi,[esi+0x0]
c001a650:	83 c4 28             	add    esp,0x28
c001a653:	5b                   	pop    ebx
c001a654:	c3                   	ret    
c001a655:	90                   	nop
c001a656:	66 90                	xchg   ax,ax

c001a658 <FAT::FAT()>:
c001a658:	83 ec 1c             	sub    esp,0x1c
c001a65b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a65f:	83 ec 0c             	sub    esp,0xc
c001a662:	50                   	push   eax
c001a663:	e8 ee d6 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a668:	83 c4 10             	add    esp,0x10
c001a66b:	ba d8 3b 02 c0       	mov    edx,0xc0023bd8
c001a670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a674:	89 10                	mov    DWORD PTR [eax],edx
c001a676:	c7 05 a0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a0,0x0
c001a680:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a688:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a68d:	7f 19                	jg     c001a6a8 <FAT::FAT()+0x50>
c001a68f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a693:	c7 04 85 c0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2840],0xffffffff
c001a69e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a6a3:	eb e3                	jmp    c001a688 <FAT::FAT()+0x30>
c001a6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6a8:	90                   	nop
c001a6a9:	83 c4 1c             	add    esp,0x1c
c001a6ac:	c3                   	ret    
c001a6ad:	90                   	nop
c001a6ae:	66 90                	xchg   ax,ax

c001a6b0 <FAT::fixFilepath(char*)>:
c001a6b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b6:	0f be c0             	movsx  eax,al
c001a6b9:	83 f8 40             	cmp    eax,0x40
c001a6bc:	7e 2e                	jle    c001a6ec <FAT::fixFilepath(char*)+0x3c>
c001a6be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6c2:	8a 00                	mov    al,BYTE PTR [eax]
c001a6c4:	83 e8 41             	sub    eax,0x41
c001a6c7:	88 c2                	mov    dl,al
c001a6c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6cd:	88 10                	mov    BYTE PTR [eax],dl
c001a6cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6d3:	8a 00                	mov    al,BYTE PTR [eax]
c001a6d5:	0f be c0             	movsx  eax,al
c001a6d8:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a6df:	83 c0 30             	add    eax,0x30
c001a6e2:	88 c2                	mov    dl,al
c001a6e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6e8:	88 10                	mov    BYTE PTR [eax],dl
c001a6ea:	66 90                	xchg   ax,ax
c001a6ec:	90                   	nop
c001a6ed:	c3                   	ret    
c001a6ee:	66 90                	xchg   ax,ax

c001a6f0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a6f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a6f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a6fe:	74 0c                	je     c001a70c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a700:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a708:	75 0e                	jne    c001a718 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a70a:	66 90                	xchg   ax,ax
c001a70c:	b8 04 00 00 00       	mov    eax,0x4
c001a711:	e9 46 01 00 00       	jmp    c001a85c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a716:	66 90                	xchg   ax,ax
c001a718:	83 ec 08             	sub    esp,0x8
c001a71b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a722:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a726:	50                   	push   eax
c001a727:	e8 24 5f fe ff       	call   c0000650 <strcpy>
c001a72c:	83 c4 10             	add    esp,0x10
c001a72f:	83 ec 08             	sub    esp,0x8
c001a732:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a736:	50                   	push   eax
c001a737:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a73e:	e8 6d ff ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001a743:	83 c4 10             	add    esp,0x10
c001a746:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a74e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a755:	83 e0 01             	and    eax,0x1
c001a758:	74 12                	je     c001a76c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a75a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a761:	83 c8 01             	or     eax,0x1
c001a764:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a76b:	90                   	nop
c001a76c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a773:	83 e0 04             	and    eax,0x4
c001a776:	74 24                	je     c001a79c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a778:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a77f:	83 c8 30             	or     eax,0x30
c001a782:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a789:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a790:	83 c8 02             	or     eax,0x2
c001a793:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a79a:	66 90                	xchg   ax,ax
c001a79c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7a3:	83 e0 02             	and    eax,0x2
c001a7a6:	74 14                	je     c001a7bc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a7a8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a7af:	83 c8 02             	or     eax,0x2
c001a7b2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7c3:	83 e0 08             	and    eax,0x8
c001a7c6:	74 14                	je     c001a7dc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a7c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a7cf:	83 c8 04             	or     eax,0x4
c001a7d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a7d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a7e3:	83 e0 10             	and    eax,0x10
c001a7e6:	74 14                	je     c001a7fc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a7e8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a7ef:	83 c8 08             	or     eax,0x8
c001a7f2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7fc:	83 ec 0c             	sub    esp,0xc
c001a7ff:	68 28 02 00 00       	push   0x228
c001a804:	e8 a7 40 ff ff       	call   c000e8b0 <malloc>
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	89 c2                	mov    edx,eax
c001a80e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a815:	89 10                	mov    DWORD PTR [eax],edx
c001a817:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a81f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a826:	8b 00                	mov    eax,DWORD PTR [eax]
c001a828:	83 ec 04             	sub    esp,0x4
c001a82b:	52                   	push   edx
c001a82c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a830:	52                   	push   edx
c001a831:	50                   	push   eax
c001a832:	e8 4a 96 fe ff       	call   c0003e81 <f_open>
c001a837:	83 c4 10             	add    esp,0x10
c001a83a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a841:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a849:	74 09                	je     c001a854 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a84b:	b8 01 00 00 00       	mov    eax,0x1
c001a850:	eb 0a                	jmp    c001a85c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a852:	66 90                	xchg   ax,ax
c001a854:	b8 00 00 00 00       	mov    eax,0x0
c001a859:	8d 76 00             	lea    esi,[esi+0x0]
c001a85c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a862:	c3                   	ret    
c001a863:	90                   	nop

c001a864 <FAT::openDir(char const*, void**)>:
c001a864:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a86a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a872:	74 0c                	je     c001a880 <FAT::openDir(char const*, void**)+0x1c>
c001a874:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a87c:	75 0e                	jne    c001a88c <FAT::openDir(char const*, void**)+0x28>
c001a87e:	66 90                	xchg   ax,ax
c001a880:	b8 04 00 00 00       	mov    eax,0x4
c001a885:	e9 82 00 00 00       	jmp    c001a90c <FAT::openDir(char const*, void**)+0xa8>
c001a88a:	66 90                	xchg   ax,ax
c001a88c:	83 ec 08             	sub    esp,0x8
c001a88f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a896:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a89a:	50                   	push   eax
c001a89b:	e8 b0 5d fe ff       	call   c0000650 <strcpy>
c001a8a0:	83 c4 10             	add    esp,0x10
c001a8a3:	83 ec 08             	sub    esp,0x8
c001a8a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8aa:	50                   	push   eax
c001a8ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8b2:	e8 f9 fd ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	83 ec 0c             	sub    esp,0xc
c001a8bd:	6a 30                	push   0x30
c001a8bf:	e8 ec 3f ff ff       	call   c000e8b0 <malloc>
c001a8c4:	83 c4 10             	add    esp,0x10
c001a8c7:	89 c2                	mov    edx,eax
c001a8c9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8d0:	89 10                	mov    DWORD PTR [eax],edx
c001a8d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8db:	83 ec 08             	sub    esp,0x8
c001a8de:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a8e2:	52                   	push   edx
c001a8e3:	50                   	push   eax
c001a8e4:	e8 27 9f fe ff       	call   c0004810 <f_opendir>
c001a8e9:	83 c4 10             	add    esp,0x10
c001a8ec:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a8f3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a8fb:	74 07                	je     c001a904 <FAT::openDir(char const*, void**)+0xa0>
c001a8fd:	b8 01 00 00 00       	mov    eax,0x1
c001a902:	eb 08                	jmp    c001a90c <FAT::openDir(char const*, void**)+0xa8>
c001a904:	b8 00 00 00 00       	mov    eax,0x0
c001a909:	8d 76 00             	lea    esi,[esi+0x0]
c001a90c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a912:	c3                   	ret    
c001a913:	90                   	nop

c001a914 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a914:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a91a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a922:	75 0c                	jne    c001a930 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a924:	b8 04 00 00 00       	mov    eax,0x4
c001a929:	e9 d6 00 00 00       	jmp    c001aa04 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a92e:	66 90                	xchg   ax,ax
c001a930:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a938:	75 0a                	jne    c001a944 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a93a:	b8 04 00 00 00       	mov    eax,0x4
c001a93f:	e9 c0 00 00 00       	jmp    c001aa04 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a944:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a94c:	75 0a                	jne    c001a958 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a94e:	b8 04 00 00 00       	mov    eax,0x4
c001a953:	e9 ac 00 00 00       	jmp    c001aa04 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a958:	83 ec 08             	sub    esp,0x8
c001a95b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a962:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a969:	50                   	push   eax
c001a96a:	e8 e1 5c fe ff       	call   c0000650 <strcpy>
c001a96f:	83 c4 10             	add    esp,0x10
c001a972:	83 ec 08             	sub    esp,0x8
c001a975:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a97c:	50                   	push   eax
c001a97d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a984:	e8 27 fd ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	83 ec 08             	sub    esp,0x8
c001a98f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a993:	50                   	push   eax
c001a994:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a99b:	50                   	push   eax
c001a99c:	e8 ee 9f fe ff       	call   c000498f <f_stat>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a9ab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a9b2:	85 c0                	test   eax,eax
c001a9b4:	74 0a                	je     c001a9c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a9b6:	83 f8 04             	cmp    eax,0x4
c001a9b9:	74 39                	je     c001a9f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a9bb:	eb 3f                	jmp    c001a9fc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a9c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a9c4:	0f b6 c0             	movzx  eax,al
c001a9c7:	83 e0 10             	and    eax,0x10
c001a9ca:	0f 95 c2             	setne  dl
c001a9cd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a9d4:	88 10                	mov    BYTE PTR [eax],dl
c001a9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9da:	ba 00 00 00 00       	mov    edx,0x0
c001a9df:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a9e6:	89 01                	mov    DWORD PTR [ecx],eax
c001a9e8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a9eb:	b8 00 00 00 00       	mov    eax,0x0
c001a9f0:	eb 12                	jmp    c001aa04 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a9f2:	66 90                	xchg   ax,ax
c001a9f4:	b8 02 00 00 00       	mov    eax,0x2
c001a9f9:	eb 09                	jmp    c001aa04 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a9fb:	90                   	nop
c001a9fc:	b8 01 00 00 00       	mov    eax,0x1
c001aa01:	8d 76 00             	lea    esi,[esi+0x0]
c001aa04:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aa0a:	c3                   	ret    
c001aa0b:	90                   	nop

c001aa0c <FAT::unlink(char const*)>:
c001aa0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa1a:	75 08                	jne    c001aa24 <FAT::unlink(char const*)+0x18>
c001aa1c:	b8 04 00 00 00       	mov    eax,0x4
c001aa21:	eb 61                	jmp    c001aa84 <FAT::unlink(char const*)+0x78>
c001aa23:	90                   	nop
c001aa24:	83 ec 08             	sub    esp,0x8
c001aa27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa32:	50                   	push   eax
c001aa33:	e8 18 5c fe ff       	call   c0000650 <strcpy>
c001aa38:	83 c4 10             	add    esp,0x10
c001aa3b:	83 ec 08             	sub    esp,0x8
c001aa3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa42:	50                   	push   eax
c001aa43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa4a:	e8 61 fc ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001aa4f:	83 c4 10             	add    esp,0x10
c001aa52:	83 ec 0c             	sub    esp,0xc
c001aa55:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa59:	50                   	push   eax
c001aa5a:	e8 a2 a1 fe ff       	call   c0004c01 <f_unlink>
c001aa5f:	83 c4 10             	add    esp,0x10
c001aa62:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa69:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aa70:	85 c0                	test   eax,eax
c001aa72:	75 08                	jne    c001aa7c <FAT::unlink(char const*)+0x70>
c001aa74:	b8 00 00 00 00       	mov    eax,0x0
c001aa79:	eb 09                	jmp    c001aa84 <FAT::unlink(char const*)+0x78>
c001aa7b:	90                   	nop
c001aa7c:	b8 01 00 00 00       	mov    eax,0x1
c001aa81:	8d 76 00             	lea    esi,[esi+0x0]
c001aa84:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa8a:	c3                   	ret    
c001aa8b:	90                   	nop

c001aa8c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001aa8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa92:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001aa99:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001aaa0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aaa4:	88 d0                	mov    al,dl
c001aaa6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001aaaa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aab2:	75 0c                	jne    c001aac0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001aab4:	b8 04 00 00 00       	mov    eax,0x4
c001aab9:	e9 7e 01 00 00       	jmp    c001ac3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001aabe:	66 90                	xchg   ax,ax
c001aac0:	83 ec 08             	sub    esp,0x8
c001aac3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001aaca:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aace:	50                   	push   eax
c001aacf:	e8 7c 5b fe ff       	call   c0000650 <strcpy>
c001aad4:	83 c4 10             	add    esp,0x10
c001aad7:	83 ec 08             	sub    esp,0x8
c001aada:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aade:	50                   	push   eax
c001aadf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001aae6:	e8 c5 fb ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001aaeb:	83 c4 10             	add    esp,0x10
c001aaee:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001aaf6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001aafe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab03:	83 e0 01             	and    eax,0x1
c001ab06:	74 14                	je     c001ab1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001ab08:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ab0f:	83 c8 01             	or     eax,0x1
c001ab12:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ab19:	8d 76 00             	lea    esi,[esi+0x0]
c001ab1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab21:	83 e0 02             	and    eax,0x2
c001ab24:	74 12                	je     c001ab38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001ab26:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ab2d:	83 c8 20             	or     eax,0x20
c001ab30:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ab37:	90                   	nop
c001ab38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab3d:	83 e0 04             	and    eax,0x4
c001ab40:	74 12                	je     c001ab54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ab42:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ab49:	83 c8 04             	or     eax,0x4
c001ab4c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ab53:	90                   	nop
c001ab54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab59:	83 e0 08             	and    eax,0x8
c001ab5c:	74 12                	je     c001ab70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001ab5e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ab65:	83 c8 02             	or     eax,0x2
c001ab68:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ab6f:	90                   	nop
c001ab70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab75:	83 e0 01             	and    eax,0x1
c001ab78:	74 12                	je     c001ab8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001ab7a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ab81:	83 c8 01             	or     eax,0x1
c001ab84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ab8b:	90                   	nop
c001ab8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab91:	83 e0 02             	and    eax,0x2
c001ab94:	74 12                	je     c001aba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001ab96:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ab9d:	83 c8 20             	or     eax,0x20
c001aba0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001aba7:	90                   	nop
c001aba8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abad:	83 e0 04             	and    eax,0x4
c001abb0:	74 12                	je     c001abc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001abb2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001abb9:	83 c8 04             	or     eax,0x4
c001abbc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001abc3:	90                   	nop
c001abc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abc9:	83 e0 08             	and    eax,0x8
c001abcc:	74 12                	je     c001abe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001abce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001abd5:	83 c8 02             	or     eax,0x2
c001abd8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001abdf:	90                   	nop
c001abe0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001abe7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001abee:	09 d0                	or     eax,edx
c001abf0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001abf7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001abff:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ac07:	83 ec 04             	sub    esp,0x4
c001ac0a:	52                   	push   edx
c001ac0b:	50                   	push   eax
c001ac0c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac10:	50                   	push   eax
c001ac11:	e8 5e a4 fe ff       	call   c0005074 <f_chmod>
c001ac16:	83 c4 10             	add    esp,0x10
c001ac19:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ac20:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ac27:	85 c0                	test   eax,eax
c001ac29:	75 09                	jne    c001ac34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001ac2b:	b8 00 00 00 00       	mov    eax,0x0
c001ac30:	eb 0a                	jmp    c001ac3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001ac32:	66 90                	xchg   ax,ax
c001ac34:	b8 01 00 00 00       	mov    eax,0x1
c001ac39:	8d 76 00             	lea    esi,[esi+0x0]
c001ac3c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ac42:	c3                   	ret    
c001ac43:	90                   	nop

c001ac44 <FAT::rename(char const*, char const*)>:
c001ac44:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ac4a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ac52:	74 0c                	je     c001ac60 <FAT::rename(char const*, char const*)+0x1c>
c001ac54:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ac5c:	75 0e                	jne    c001ac6c <FAT::rename(char const*, char const*)+0x28>
c001ac5e:	66 90                	xchg   ax,ax
c001ac60:	b8 04 00 00 00       	mov    eax,0x4
c001ac65:	e9 9e 00 00 00       	jmp    c001ad08 <FAT::rename(char const*, char const*)+0xc4>
c001ac6a:	66 90                	xchg   ax,ax
c001ac6c:	83 ec 08             	sub    esp,0x8
c001ac6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac76:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ac7d:	50                   	push   eax
c001ac7e:	e8 cd 59 fe ff       	call   c0000650 <strcpy>
c001ac83:	83 c4 10             	add    esp,0x10
c001ac86:	83 ec 08             	sub    esp,0x8
c001ac89:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ac90:	50                   	push   eax
c001ac91:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac98:	e8 13 fa ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001ac9d:	83 c4 10             	add    esp,0x10
c001aca0:	83 ec 08             	sub    esp,0x8
c001aca3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001acaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acae:	50                   	push   eax
c001acaf:	e8 9c 59 fe ff       	call   c0000650 <strcpy>
c001acb4:	83 c4 10             	add    esp,0x10
c001acb7:	83 ec 08             	sub    esp,0x8
c001acba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acbe:	50                   	push   eax
c001acbf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001acc6:	e8 e5 f9 ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001accb:	83 c4 10             	add    esp,0x10
c001acce:	83 ec 08             	sub    esp,0x8
c001acd1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acd5:	50                   	push   eax
c001acd6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001acdd:	50                   	push   eax
c001acde:	e8 d9 a1 fe ff       	call   c0004ebc <f_rename>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aced:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001acf4:	85 c0                	test   eax,eax
c001acf6:	75 08                	jne    c001ad00 <FAT::rename(char const*, char const*)+0xbc>
c001acf8:	b8 00 00 00 00       	mov    eax,0x0
c001acfd:	eb 09                	jmp    c001ad08 <FAT::rename(char const*, char const*)+0xc4>
c001acff:	90                   	nop
c001ad00:	b8 01 00 00 00       	mov    eax,0x1
c001ad05:	8d 76 00             	lea    esi,[esi+0x0]
c001ad08:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ad0e:	c3                   	ret    
c001ad0f:	90                   	nop

c001ad10 <FAT::mkdir(char const*)>:
c001ad10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ad16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ad1e:	75 08                	jne    c001ad28 <FAT::mkdir(char const*)+0x18>
c001ad20:	b8 04 00 00 00       	mov    eax,0x4
c001ad25:	eb 61                	jmp    c001ad88 <FAT::mkdir(char const*)+0x78>
c001ad27:	90                   	nop
c001ad28:	83 ec 08             	sub    esp,0x8
c001ad2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad32:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad36:	50                   	push   eax
c001ad37:	e8 14 59 fe ff       	call   c0000650 <strcpy>
c001ad3c:	83 c4 10             	add    esp,0x10
c001ad3f:	83 ec 08             	sub    esp,0x8
c001ad42:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad46:	50                   	push   eax
c001ad47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad4e:	e8 5d f9 ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	83 ec 0c             	sub    esp,0xc
c001ad59:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad5d:	50                   	push   eax
c001ad5e:	e8 be 9f fe ff       	call   c0004d21 <f_mkdir>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad6d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad74:	85 c0                	test   eax,eax
c001ad76:	75 08                	jne    c001ad80 <FAT::mkdir(char const*)+0x70>
c001ad78:	b8 00 00 00 00       	mov    eax,0x0
c001ad7d:	eb 09                	jmp    c001ad88 <FAT::mkdir(char const*)+0x78>
c001ad7f:	90                   	nop
c001ad80:	b8 01 00 00 00       	mov    eax,0x1
c001ad85:	8d 76 00             	lea    esi,[esi+0x0]
c001ad88:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad8e:	c3                   	ret    
c001ad8f:	90                   	nop

c001ad90 <FAT::exists(char const*)>:
c001ad90:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ad96:	83 ec 08             	sub    esp,0x8
c001ad99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ada0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ada4:	50                   	push   eax
c001ada5:	e8 a6 58 fe ff       	call   c0000650 <strcpy>
c001adaa:	83 c4 10             	add    esp,0x10
c001adad:	83 ec 08             	sub    esp,0x8
c001adb0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001adb4:	50                   	push   eax
c001adb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001adbc:	e8 ef f8 ff ff       	call   c001a6b0 <FAT::fixFilepath(char*)>
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	83 ec 08             	sub    esp,0x8
c001adc7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001adce:	50                   	push   eax
c001adcf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001add3:	50                   	push   eax
c001add4:	e8 b6 9b fe ff       	call   c000498f <f_stat>
c001add9:	83 c4 10             	add    esp,0x10
c001addc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ade3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001adea:	85 c0                	test   eax,eax
c001adec:	75 06                	jne    c001adf4 <FAT::exists(char const*)+0x64>
c001adee:	b0 01                	mov    al,0x1
c001adf0:	eb 06                	jmp    c001adf8 <FAT::exists(char const*)+0x68>
c001adf2:	66 90                	xchg   ax,ax
c001adf4:	b0 00                	mov    al,0x0
c001adf6:	66 90                	xchg   ax,ax
c001adf8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001adfe:	c3                   	ret    
c001adff:	90                   	nop

c001ae00 <isoReadDiscSectorHelper>:
c001ae00:	83 ec 2c             	sub    esp,0x2c
c001ae03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae0b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ae10:	83 e8 41             	sub    eax,0x41
c001ae13:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001ae1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae1e:	ba 00 00 00 00       	mov    edx,0x0
c001ae23:	83 ec 0c             	sub    esp,0xc
c001ae26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae2a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ae2e:	52                   	push   edx
c001ae2f:	50                   	push   eax
c001ae30:	51                   	push   ecx
c001ae31:	e8 86 f2 fe ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c001ae36:	83 c4 20             	add    esp,0x20
c001ae39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae3d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ae42:	74 0c                	je     c001ae50 <isoReadDiscSectorHelper+0x50>
c001ae44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae48:	c1 e0 0b             	shl    eax,0xb
c001ae4b:	eb 0b                	jmp    c001ae58 <isoReadDiscSectorHelper+0x58>
c001ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae50:	b8 00 00 00 00       	mov    eax,0x0
c001ae55:	8d 76 00             	lea    esi,[esi+0x0]
c001ae58:	83 c4 2c             	add    esp,0x2c
c001ae5b:	c3                   	ret    

c001ae5c <iso_kprintf>:
c001ae5c:	83 ec 0c             	sub    esp,0xc
c001ae5f:	83 ec 08             	sub    esp,0x8
c001ae62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae66:	68 7d 38 02 c0       	push   0xc002387d
c001ae6b:	e8 de c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae70:	83 c4 10             	add    esp,0x10
c001ae73:	90                   	nop
c001ae74:	83 c4 0c             	add    esp,0xc
c001ae77:	c3                   	ret    

c001ae78 <iso_kprintfd>:
c001ae78:	83 ec 0c             	sub    esp,0xc
c001ae7b:	83 ec 08             	sub    esp,0x8
c001ae7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae82:	68 49 1a 02 c0       	push   0xc0021a49
c001ae87:	e8 c2 c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae8c:	83 c4 10             	add    esp,0x10
c001ae8f:	90                   	nop
c001ae90:	83 c4 0c             	add    esp,0xc
c001ae93:	c3                   	ret    

c001ae94 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ae94:	b8 08 00 00 00       	mov    eax,0x8
c001ae99:	c3                   	ret    

c001ae9a <ISO9660::truncate(void*, unsigned long long)>:
c001ae9a:	b8 01 00 00 00       	mov    eax,0x1
c001ae9f:	c3                   	ret    

c001aea0 <ISO9660::getName()>:
c001aea0:	b8 3c 3c 02 c0       	mov    eax,0xc0023c3c
c001aea5:	c3                   	ret    

c001aea6 <ISO9660::closeDir(void*)>:
c001aea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeac:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001aeaf:	90                   	nop

c001aeb0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001aeb0:	b8 01 00 00 00       	mov    eax,0x1
c001aeb5:	c3                   	ret    

c001aeb6 <ISO9660::unlink(char const*)>:
c001aeb6:	b8 01 00 00 00       	mov    eax,0x1
c001aebb:	c3                   	ret    

c001aebc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001aebc:	b8 03 00 00 00       	mov    eax,0x3
c001aec1:	c3                   	ret    

c001aec2 <ISO9660::rename(char const*, char const*)>:
c001aec2:	b8 01 00 00 00       	mov    eax,0x1
c001aec7:	c3                   	ret    

c001aec8 <ISO9660::mkdir(char const*)>:
c001aec8:	b8 01 00 00 00       	mov    eax,0x1
c001aecd:	c3                   	ret    

c001aece <ISO9660::~ISO9660()>:
c001aece:	83 ec 0c             	sub    esp,0xc
c001aed1:	ba 7c 3d 02 c0       	mov    edx,0xc0023d7c
c001aed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeda:	89 10                	mov    DWORD PTR [eax],edx
c001aedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee0:	83 ec 0c             	sub    esp,0xc
c001aee3:	50                   	push   eax
c001aee4:	e8 91 ce fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	90                   	nop
c001aeed:	83 c4 0c             	add    esp,0xc
c001aef0:	c3                   	ret    
c001aef1:	90                   	nop

c001aef2 <ISO9660::~ISO9660()>:
c001aef2:	83 ec 0c             	sub    esp,0xc
c001aef5:	83 ec 0c             	sub    esp,0xc
c001aef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aefc:	e8 cd ff ff ff       	call   c001aece <ISO9660::~ISO9660()>
c001af01:	83 c4 10             	add    esp,0x10
c001af04:	83 ec 08             	sub    esp,0x8
c001af07:	6a 08                	push   0x8
c001af09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af0d:	e8 09 17 ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	83 c4 0c             	add    esp,0xc
c001af18:	c3                   	ret    
c001af19:	90                   	nop

c001af1a <ISO9660::exists(char const*)>:
c001af1a:	83 ec 18             	sub    esp,0x18
c001af1d:	68 57 3c 02 c0       	push   0xc0023c57
c001af22:	e8 cf 3c ff ff       	call   c000ebf6 <KePanic(char const*)>
c001af27:	31 c0                	xor    eax,eax
c001af29:	83 c4 1c             	add    esp,0x1c
c001af2c:	c3                   	ret    
c001af2d:	90                   	nop

c001af2e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001af2e:	56                   	push   esi
c001af2f:	53                   	push   ebx
c001af30:	53                   	push   ebx
c001af31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001af35:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001af39:	85 db                	test   ebx,ebx
c001af3b:	0f 84 ca 00 00 00    	je     c001b00b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001af41:	85 f6                	test   esi,esi
c001af43:	0f 84 c2 00 00 00    	je     c001b00b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001af49:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001af4e:	b8 03 00 00 00       	mov    eax,0x3
c001af53:	0f 85 b7 00 00 00    	jne    c001b010 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001af59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001af5b:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001af61:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001af68:	74 1b                	je     c001af85 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001af6a:	85 c0                	test   eax,eax
c001af6c:	74 10                	je     c001af7e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001af6e:	83 ec 0c             	sub    esp,0xc
c001af71:	68 75 3c 02 c0       	push   0xc0023c75
c001af76:	e8 7b 3c ff ff       	call   c000ebf6 <KePanic(char const*)>
c001af7b:	83 c4 10             	add    esp,0x10
c001af7e:	8a 03                	mov    al,BYTE PTR [ebx]
c001af80:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001af85:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af88:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001af8f:	85 c0                	test   eax,eax
c001af91:	74 09                	je     c001af9c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001af93:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001af9a:	74 48                	je     c001afe4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001af9c:	83 ec 0c             	sub    esp,0xc
c001af9f:	68 85 3c 02 c0       	push   0xc0023c85
c001afa4:	e8 a5 bf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001afa9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001afb6:	85 c0                	test   eax,eax
c001afb8:	74 17                	je     c001afd1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001afba:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001afc1:	83 ec 0c             	sub    esp,0xc
c001afc4:	68 a5 3c 02 c0       	push   0xc0023ca5
c001afc9:	e8 80 bf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001afce:	83 c4 10             	add    esp,0x10
c001afd1:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001afd8:	83 ec 0c             	sub    esp,0xc
c001afdb:	50                   	push   eax
c001afdc:	e8 66 bc fe ff       	call   c0006c47 <init_percd>
c001afe1:	83 c4 10             	add    esp,0x10
c001afe4:	51                   	push   ecx
c001afe5:	83 c3 03             	add    ebx,0x3
c001afe8:	51                   	push   ecx
c001afe9:	6a 00                	push   0x0
c001afeb:	53                   	push   ebx
c001afec:	e8 19 b7 fe ff       	call   c000670a <iso_open>
c001aff1:	83 c4 10             	add    esp,0x10
c001aff4:	89 c2                	mov    edx,eax
c001aff6:	b8 01 00 00 00       	mov    eax,0x1
c001affb:	83 fa ff             	cmp    edx,0xffffffff
c001affe:	74 10                	je     c001b010 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b000:	83 c2 32             	add    edx,0x32
c001b003:	31 c0                	xor    eax,eax
c001b005:	01 d2                	add    edx,edx
c001b007:	89 16                	mov    DWORD PTR [esi],edx
c001b009:	eb 05                	jmp    c001b010 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b00b:	b8 04 00 00 00       	mov    eax,0x4
c001b010:	5a                   	pop    edx
c001b011:	5b                   	pop    ebx
c001b012:	5e                   	pop    esi
c001b013:	c3                   	ret    

c001b014 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b014:	53                   	push   ebx
c001b015:	83 ec 08             	sub    esp,0x8
c001b018:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b01c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b020:	85 c0                	test   eax,eax
c001b022:	74 2d                	je     c001b051 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b024:	85 db                	test   ebx,ebx
c001b026:	74 29                	je     c001b051 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b028:	52                   	push   edx
c001b029:	b9 02 00 00 00       	mov    ecx,0x2
c001b02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b032:	99                   	cdq    
c001b033:	f7 f9                	idiv   ecx
c001b035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b039:	83 e8 32             	sub    eax,0x32
c001b03c:	50                   	push   eax
c001b03d:	e8 70 b7 fe ff       	call   c00067b2 <iso_read>
c001b042:	83 c4 10             	add    esp,0x10
c001b045:	89 03                	mov    DWORD PTR [ebx],eax
c001b047:	09 d0                	or     eax,edx
c001b049:	0f 94 c0             	sete   al
c001b04c:	0f b6 c0             	movzx  eax,al
c001b04f:	eb 05                	jmp    c001b056 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001b051:	b8 04 00 00 00       	mov    eax,0x4
c001b056:	83 c4 08             	add    esp,0x8
c001b059:	5b                   	pop    ebx
c001b05a:	c3                   	ret    
c001b05b:	90                   	nop

c001b05c <ISO9660::seek(void*, unsigned long long)>:
c001b05c:	57                   	push   edi
c001b05d:	b8 04 00 00 00       	mov    eax,0x4
c001b062:	56                   	push   esi
c001b063:	51                   	push   ecx
c001b064:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b068:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b06c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b070:	85 d2                	test   edx,edx
c001b072:	74 26                	je     c001b09a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001b074:	89 d0                	mov    eax,edx
c001b076:	b9 02 00 00 00       	mov    ecx,0x2
c001b07b:	6a 00                	push   0x0
c001b07d:	99                   	cdq    
c001b07e:	f7 f9                	idiv   ecx
c001b080:	57                   	push   edi
c001b081:	56                   	push   esi
c001b082:	83 e8 32             	sub    eax,0x32
c001b085:	50                   	push   eax
c001b086:	e8 3d b8 fe ff       	call   c00068c8 <iso_seek>
c001b08b:	83 c4 10             	add    esp,0x10
c001b08e:	31 f0                	xor    eax,esi
c001b090:	31 fa                	xor    edx,edi
c001b092:	09 d0                	or     eax,edx
c001b094:	0f 95 c0             	setne  al
c001b097:	0f b6 c0             	movzx  eax,al
c001b09a:	5a                   	pop    edx
c001b09b:	5e                   	pop    esi
c001b09c:	5f                   	pop    edi
c001b09d:	c3                   	ret    

c001b09e <ISO9660::tell(void*, unsigned long long*)>:
c001b09e:	53                   	push   ebx
c001b09f:	83 ec 08             	sub    esp,0x8
c001b0a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b0aa:	85 c0                	test   eax,eax
c001b0ac:	74 24                	je     c001b0d2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b0ae:	85 db                	test   ebx,ebx
c001b0b0:	74 20                	je     c001b0d2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b0b2:	b9 02 00 00 00       	mov    ecx,0x2
c001b0b7:	99                   	cdq    
c001b0b8:	f7 f9                	idiv   ecx
c001b0ba:	83 ec 0c             	sub    esp,0xc
c001b0bd:	83 e8 32             	sub    eax,0x32
c001b0c0:	50                   	push   eax
c001b0c1:	e8 86 b8 fe ff       	call   c000694c <iso_tell>
c001b0c6:	83 c4 10             	add    esp,0x10
c001b0c9:	89 03                	mov    DWORD PTR [ebx],eax
c001b0cb:	31 c0                	xor    eax,eax
c001b0cd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001b0d0:	eb 05                	jmp    c001b0d7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001b0d2:	b8 04 00 00 00       	mov    eax,0x4
c001b0d7:	83 c4 08             	add    esp,0x8
c001b0da:	5b                   	pop    ebx
c001b0db:	c3                   	ret    

c001b0dc <ISO9660::stat(void*, unsigned long long*)>:
c001b0dc:	56                   	push   esi
c001b0dd:	53                   	push   ebx
c001b0de:	83 ec 10             	sub    esp,0x10
c001b0e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b0e9:	68 c9 3c 02 c0       	push   0xc0023cc9
c001b0ee:	e8 5b be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b0f3:	83 c4 10             	add    esp,0x10
c001b0f6:	85 db                	test   ebx,ebx
c001b0f8:	74 2a                	je     c001b124 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b0fa:	85 f6                	test   esi,esi
c001b0fc:	74 26                	je     c001b124 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b0fe:	89 d8                	mov    eax,ebx
c001b100:	b9 02 00 00 00       	mov    ecx,0x2
c001b105:	99                   	cdq    
c001b106:	83 ec 0c             	sub    esp,0xc
c001b109:	f7 f9                	idiv   ecx
c001b10b:	83 e8 32             	sub    eax,0x32
c001b10e:	50                   	push   eax
c001b10f:	e8 69 b8 fe ff       	call   c000697d <iso_total>
c001b114:	83 c4 10             	add    esp,0x10
c001b117:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001b11e:	89 06                	mov    DWORD PTR [esi],eax
c001b120:	31 c0                	xor    eax,eax
c001b122:	eb 05                	jmp    c001b129 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001b124:	b8 04 00 00 00       	mov    eax,0x4
c001b129:	5a                   	pop    edx
c001b12a:	5b                   	pop    ebx
c001b12b:	5e                   	pop    esi
c001b12c:	c3                   	ret    
c001b12d:	90                   	nop

c001b12e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b12e:	55                   	push   ebp
c001b12f:	57                   	push   edi
c001b130:	56                   	push   esi
c001b131:	53                   	push   ebx
c001b132:	83 ec 18             	sub    esp,0x18
c001b135:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b139:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b13d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b141:	68 d1 3c 02 c0       	push   0xc0023cd1
c001b146:	e8 03 be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b14b:	83 c4 10             	add    esp,0x10
c001b14e:	85 ff                	test   edi,edi
c001b150:	0f 94 c0             	sete   al
c001b153:	85 f6                	test   esi,esi
c001b155:	0f 94 c2             	sete   dl
c001b158:	09 d0                	or     eax,edx
c001b15a:	a8 01                	test   al,0x1
c001b15c:	0f 85 dd 00 00 00    	jne    c001b23f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b162:	85 db                	test   ebx,ebx
c001b164:	0f 84 d5 00 00 00    	je     c001b23f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b16a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b16d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001b173:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b17a:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b181:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b183:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b189:	74 1b                	je     c001b1a6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001b18b:	85 c0                	test   eax,eax
c001b18d:	74 10                	je     c001b19f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001b18f:	83 ec 0c             	sub    esp,0xc
c001b192:	68 75 3c 02 c0       	push   0xc0023c75
c001b197:	e8 5a 3a ff ff       	call   c000ebf6 <KePanic(char const*)>
c001b19c:	83 c4 10             	add    esp,0x10
c001b19f:	8a 03                	mov    al,BYTE PTR [ebx]
c001b1a1:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b1a6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b1a9:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b1b0:	85 c0                	test   eax,eax
c001b1b2:	74 09                	je     c001b1bd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001b1b4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b1bb:	74 51                	je     c001b20e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b1bd:	83 ec 0c             	sub    esp,0xc
c001b1c0:	68 d9 3c 02 c0       	push   0xc0023cd9
c001b1c5:	e8 84 bd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b1ca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b1cd:	83 c4 10             	add    esp,0x10
c001b1d0:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001b1d8:	74 21                	je     c001b1fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001b1da:	83 ec 0c             	sub    esp,0xc
c001b1dd:	68 f9 3c 02 c0       	push   0xc0023cf9
c001b1e2:	e8 67 bd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b1e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b1ea:	83 c4 10             	add    esp,0x10
c001b1ed:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b1f4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b1fb:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b202:	83 ec 0c             	sub    esp,0xc
c001b205:	50                   	push   eax
c001b206:	e8 3c ba fe ff       	call   c0006c47 <init_percd>
c001b20b:	83 c4 10             	add    esp,0x10
c001b20e:	52                   	push   edx
c001b20f:	83 c3 03             	add    ebx,0x3
c001b212:	52                   	push   edx
c001b213:	6a 00                	push   0x0
c001b215:	53                   	push   ebx
c001b216:	e8 ef b4 fe ff       	call   c000670a <iso_open>
c001b21b:	83 c4 10             	add    esp,0x10
c001b21e:	83 f8 ff             	cmp    eax,0xffffffff
c001b221:	89 c5                	mov    ebp,eax
c001b223:	75 21                	jne    c001b246 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001b225:	50                   	push   eax
c001b226:	50                   	push   eax
c001b227:	6a 01                	push   0x1
c001b229:	53                   	push   ebx
c001b22a:	e8 db b4 fe ff       	call   c000670a <iso_open>
c001b22f:	83 c4 10             	add    esp,0x10
c001b232:	ba 02 00 00 00       	mov    edx,0x2
c001b237:	40                   	inc    eax
c001b238:	74 2b                	je     c001b265 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b23a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001b23d:	eb 24                	jmp    c001b263 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001b23f:	ba 04 00 00 00       	mov    edx,0x4
c001b244:	eb 1f                	jmp    c001b265 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b246:	83 ec 0c             	sub    esp,0xc
c001b249:	50                   	push   eax
c001b24a:	e8 2e b7 fe ff       	call   c000697d <iso_total>
c001b24f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b256:	89 07                	mov    DWORD PTR [edi],eax
c001b258:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b25b:	e8 34 b5 fe ff       	call   c0006794 <iso_close>
c001b260:	83 c4 10             	add    esp,0x10
c001b263:	31 d2                	xor    edx,edx
c001b265:	83 c4 0c             	add    esp,0xc
c001b268:	89 d0                	mov    eax,edx
c001b26a:	5b                   	pop    ebx
c001b26b:	5e                   	pop    esi
c001b26c:	5f                   	pop    edi
c001b26d:	5d                   	pop    ebp
c001b26e:	c3                   	ret    
c001b26f:	90                   	nop

c001b270 <ISO9660::close(void*)>:
c001b270:	83 ec 0c             	sub    esp,0xc
c001b273:	b8 04 00 00 00       	mov    eax,0x4
c001b278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b27c:	85 d2                	test   edx,edx
c001b27e:	74 1b                	je     c001b29b <ISO9660::close(void*)+0x2b>
c001b280:	89 d0                	mov    eax,edx
c001b282:	b9 02 00 00 00       	mov    ecx,0x2
c001b287:	99                   	cdq    
c001b288:	83 ec 0c             	sub    esp,0xc
c001b28b:	f7 f9                	idiv   ecx
c001b28d:	83 e8 32             	sub    eax,0x32
c001b290:	50                   	push   eax
c001b291:	e8 fe b4 fe ff       	call   c0006794 <iso_close>
c001b296:	83 c4 10             	add    esp,0x10
c001b299:	31 c0                	xor    eax,eax
c001b29b:	83 c4 0c             	add    esp,0xc
c001b29e:	c3                   	ret    
c001b29f:	90                   	nop

c001b2a0 <ISO9660::openDir(char const*, void**)>:
c001b2a0:	56                   	push   esi
c001b2a1:	53                   	push   ebx
c001b2a2:	50                   	push   eax
c001b2a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b2a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b2ab:	85 db                	test   ebx,ebx
c001b2ad:	0f 84 bd 00 00 00    	je     c001b370 <ISO9660::openDir(char const*, void**)+0xd0>
c001b2b3:	85 f6                	test   esi,esi
c001b2b5:	0f 84 b5 00 00 00    	je     c001b370 <ISO9660::openDir(char const*, void**)+0xd0>
c001b2bb:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b2bd:	38 15 a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,dl
c001b2c3:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b2ca:	74 1b                	je     c001b2e7 <ISO9660::openDir(char const*, void**)+0x47>
c001b2cc:	85 c0                	test   eax,eax
c001b2ce:	74 10                	je     c001b2e0 <ISO9660::openDir(char const*, void**)+0x40>
c001b2d0:	83 ec 0c             	sub    esp,0xc
c001b2d3:	68 75 3c 02 c0       	push   0xc0023c75
c001b2d8:	e8 19 39 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001b2dd:	83 c4 10             	add    esp,0x10
c001b2e0:	8a 03                	mov    al,BYTE PTR [ebx]
c001b2e2:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b2e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b2ea:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b2f1:	85 c0                	test   eax,eax
c001b2f3:	74 10                	je     c001b305 <ISO9660::openDir(char const*, void**)+0x65>
c001b2f5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b2fc:	74 1a                	je     c001b318 <ISO9660::openDir(char const*, void**)+0x78>
c001b2fe:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b305:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b30c:	83 ec 0c             	sub    esp,0xc
c001b30f:	50                   	push   eax
c001b310:	e8 32 b9 fe ff       	call   c0006c47 <init_percd>
c001b315:	83 c4 10             	add    esp,0x10
c001b318:	50                   	push   eax
c001b319:	83 c3 03             	add    ebx,0x3
c001b31c:	50                   	push   eax
c001b31d:	6a 01                	push   0x1
c001b31f:	53                   	push   ebx
c001b320:	e8 e5 b3 fe ff       	call   c000670a <iso_open>
c001b325:	83 c4 10             	add    esp,0x10
c001b328:	83 f8 ff             	cmp    eax,0xffffffff
c001b32b:	89 c3                	mov    ebx,eax
c001b32d:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b332:	75 1c                	jne    c001b350 <ISO9660::openDir(char const*, void**)+0xb0>
c001b334:	53                   	push   ebx
c001b335:	53                   	push   ebx
c001b336:	68 1d 3d 02 c0       	push   0xc0023d1d
c001b33b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b341:	e8 a0 60 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	b8 01 00 00 00       	mov    eax,0x1
c001b34e:	eb 25                	jmp    c001b375 <ISO9660::openDir(char const*, void**)+0xd5>
c001b350:	51                   	push   ecx
c001b351:	01 db                	add    ebx,ebx
c001b353:	51                   	push   ecx
c001b354:	83 c3 65             	add    ebx,0x65
c001b357:	68 30 3d 02 c0       	push   0xc0023d30
c001b35c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b362:	e8 7f 60 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001b367:	83 c4 10             	add    esp,0x10
c001b36a:	31 c0                	xor    eax,eax
c001b36c:	89 1e                	mov    DWORD PTR [esi],ebx
c001b36e:	eb 05                	jmp    c001b375 <ISO9660::openDir(char const*, void**)+0xd5>
c001b370:	b8 04 00 00 00       	mov    eax,0x4
c001b375:	5a                   	pop    edx
c001b376:	5b                   	pop    ebx
c001b377:	5e                   	pop    esi
c001b378:	c3                   	ret    
c001b379:	90                   	nop

c001b37a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b37a:	55                   	push   ebp
c001b37b:	57                   	push   edi
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b384:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b38b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b392:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b399:	85 db                	test   ebx,ebx
c001b39b:	0f 84 e4 00 00 00    	je     c001b485 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b3a1:	85 ed                	test   ebp,ebp
c001b3a3:	0f 84 dc 00 00 00    	je     c001b485 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b3a9:	83 ec 0c             	sub    esp,0xc
c001b3ac:	68 43 3d 02 c0       	push   0xc0023d43
c001b3b1:	e8 98 bb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b3b6:	89 d8                	mov    eax,ebx
c001b3b8:	b9 02 00 00 00       	mov    ecx,0x2
c001b3bd:	99                   	cdq    
c001b3be:	f7 f9                	idiv   ecx
c001b3c0:	83 e8 32             	sub    eax,0x32
c001b3c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3c6:	e8 04 b6 fe ff       	call   c00069cf <iso_readdir>
c001b3cb:	83 c4 10             	add    esp,0x10
c001b3ce:	85 c0                	test   eax,eax
c001b3d0:	89 c3                	mov    ebx,eax
c001b3d2:	75 38                	jne    c001b40c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b3d4:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b3d9:	53                   	push   ebx
c001b3da:	53                   	push   ebx
c001b3db:	68 4e 3d 02 c0       	push   0xc0023d4e
c001b3e0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b3e6:	e8 fb 5f ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001b3eb:	83 c4 0c             	add    esp,0xc
c001b3ee:	68 10 01 00 00       	push   0x110
c001b3f3:	6a 00                	push   0x0
c001b3f5:	57                   	push   edi
c001b3f6:	e8 f5 50 fe ff       	call   c00004f0 <memset>
c001b3fb:	83 c4 10             	add    esp,0x10
c001b3fe:	b8 01 00 00 00       	mov    eax,0x1
c001b403:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b40a:	eb 7e                	jmp    c001b48a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b40c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b412:	8d 70 08             	lea    esi,[eax+0x8]
c001b415:	83 ec 0c             	sub    esp,0xc
c001b418:	56                   	push   esi
c001b419:	e8 62 51 fe ff       	call   c0000580 <strlen>
c001b41e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b426:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b42a:	83 c4 10             	add    esp,0x10
c001b42d:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b431:	75 0a                	jne    c001b43d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b433:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b436:	b8 02 00 00 00       	mov    eax,0x2
c001b43b:	74 05                	je     c001b442 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b43d:	b8 01 00 00 00       	mov    eax,0x1
c001b442:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b446:	50                   	push   eax
c001b447:	50                   	push   eax
c001b448:	56                   	push   esi
c001b449:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b44d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b451:	50                   	push   eax
c001b452:	e8 f9 51 fe ff       	call   c0000650 <strcpy>
c001b457:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b45e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b460:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b467:	5a                   	pop    edx
c001b468:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b46d:	59                   	pop    ecx
c001b46e:	68 61 3d 02 c0       	push   0xc0023d61
c001b473:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b479:	e8 68 5f ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001b47e:	83 c4 10             	add    esp,0x10
c001b481:	31 c0                	xor    eax,eax
c001b483:	eb 05                	jmp    c001b48a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b485:	b8 04 00 00 00       	mov    eax,0x4
c001b48a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b490:	5b                   	pop    ebx
c001b491:	5e                   	pop    esi
c001b492:	5f                   	pop    edi
c001b493:	5d                   	pop    ebp
c001b494:	c3                   	ret    

c001b495 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b495:	57                   	push   edi
c001b496:	56                   	push   esi
c001b497:	53                   	push   ebx
c001b498:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b49c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4a0:	39 35 a4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a4,esi
c001b4a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b4aa:	0f be cb             	movsx  ecx,bl
c001b4ad:	75 0b                	jne    c001b4ba <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b4af:	0f be 05 04 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025004
c001b4b6:	39 c8                	cmp    eax,ecx
c001b4b8:	74 47                	je     c001b501 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b4ba:	83 ec 0c             	sub    esp,0xc
c001b4bd:	31 d2                	xor    edx,edx
c001b4bf:	68 c0 d8 02 c0       	push   0xc002d8c0
c001b4c4:	6a 01                	push   0x1
c001b4c6:	52                   	push   edx
c001b4c7:	56                   	push   esi
c001b4c8:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001b4cf:	e8 e8 eb fe ff       	call   c000a0bc <LogicalDisk::read(unsigned long long, int, void*)>
c001b4d4:	83 c4 20             	add    esp,0x20
c001b4d7:	85 c0                	test   eax,eax
c001b4d9:	75 0e                	jne    c001b4e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b4db:	89 35 a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,esi
c001b4e1:	88 1d 04 50 02 c0    	mov    BYTE PTR ds:0xc0025004,bl
c001b4e7:	eb 18                	jmp    c001b501 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b4e9:	50                   	push   eax
c001b4ea:	68 00 08 00 00       	push   0x800
c001b4ef:	6a 00                	push   0x0
c001b4f1:	57                   	push   edi
c001b4f2:	e8 f9 4f fe ff       	call   c00004f0 <memset>
c001b4f7:	83 c4 10             	add    esp,0x10
c001b4fa:	b8 01 00 00 00       	mov    eax,0x1
c001b4ff:	eb 0e                	jmp    c001b50f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b501:	be c0 d8 02 c0       	mov    esi,0xc002d8c0
c001b506:	b9 00 08 00 00       	mov    ecx,0x800
c001b50b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b50d:	31 c0                	xor    eax,eax
c001b50f:	5b                   	pop    ebx
c001b510:	5e                   	pop    esi
c001b511:	5f                   	pop    edi
c001b512:	c3                   	ret    
c001b513:	90                   	nop

c001b514 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b514:	53                   	push   ebx
c001b515:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b51b:	c7 05 a4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8a4,0xdeadbeef
c001b525:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b52c:	8d 58 41             	lea    ebx,[eax+0x41]
c001b52f:	0f be db             	movsx  ebx,bl
c001b532:	53                   	push   ebx
c001b533:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b537:	50                   	push   eax
c001b538:	6a 10                	push   0x10
c001b53a:	e8 56 ff ff ff       	call   c001b495 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b53f:	83 c4 10             	add    esp,0x10
c001b542:	31 d2                	xor    edx,edx
c001b544:	85 c0                	test   eax,eax
c001b546:	75 33                	jne    c001b57b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b548:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b54d:	75 2c                	jne    c001b57b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b54f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b554:	75 25                	jne    c001b57b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b556:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b55b:	75 1e                	jne    c001b57b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b55d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b562:	75 17                	jne    c001b57b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b564:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b569:	75 10                	jne    c001b57b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b56b:	83 ec 0c             	sub    esp,0xc
c001b56e:	53                   	push   ebx
c001b56f:	e8 d3 b6 fe ff       	call   c0006c47 <init_percd>
c001b574:	83 c4 10             	add    esp,0x10
c001b577:	40                   	inc    eax
c001b578:	0f 95 c2             	setne  dl
c001b57b:	81 c4 08 08 00 00    	add    esp,0x808
c001b581:	88 d0                	mov    al,dl
c001b583:	5b                   	pop    ebx
c001b584:	c3                   	ret    
c001b585:	90                   	nop

c001b586 <ISO9660::ISO9660()>:
c001b586:	83 ec 0c             	sub    esp,0xc
c001b589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58d:	83 ec 0c             	sub    esp,0xc
c001b590:	50                   	push   eax
c001b591:	e8 c0 c7 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	ba 7c 3d 02 c0       	mov    edx,0xc0023d7c
c001b59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a2:	89 10                	mov    DWORD PTR [eax],edx
c001b5a4:	e8 b0 b7 fe ff       	call   c0006d59 <fs_iso9660_init>
c001b5a9:	90                   	nop
c001b5aa:	83 c4 0c             	add    esp,0xc
c001b5ad:	c3                   	ret    

c001b5ae <SoundCard::beginPlayback()>:
c001b5ae:	c7 44 24 04 e0 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023de0
c001b5b6:	e9 3b 36 ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c001b5bb:	90                   	nop

c001b5bc <SoundCard::stopPlayback()>:
c001b5bc:	c7 44 24 04 e0 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023de0
c001b5c4:	e9 2d 36 ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c001b5c9:	90                   	nop

c001b5ca <SoundCard::SoundCard(char const*)>:
c001b5ca:	83 ec 1c             	sub    esp,0x1c
c001b5cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5d1:	83 ec 08             	sub    esp,0x8
c001b5d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5d8:	50                   	push   eax
c001b5d9:	e8 ea db fe ff       	call   c00091c8 <Device::Device(char const*)>
c001b5de:	83 c4 10             	add    esp,0x10
c001b5e1:	ba 2c 3e 02 c0       	mov    edx,0xc0023e2c
c001b5e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5ea:	89 10                	mov    DWORD PTR [eax],edx
c001b5ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5f0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5fb:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b609:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b617:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b625:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b62f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b637:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b63c:	7f 1a                	jg     c001b658 <SoundCard::SoundCard(char const*)+0x8e>
c001b63e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b646:	83 c2 54             	add    edx,0x54
c001b649:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b651:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b656:	eb df                	jmp    c001b637 <SoundCard::SoundCard(char const*)+0x6d>
c001b658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b65c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b663:	90                   	nop
c001b664:	83 c4 1c             	add    esp,0x1c
c001b667:	c3                   	ret    

c001b668 <SoundCard::~SoundCard()>:
c001b668:	83 ec 0c             	sub    esp,0xc
c001b66b:	ba 2c 3e 02 c0       	mov    edx,0xc0023e2c
c001b670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b674:	89 10                	mov    DWORD PTR [eax],edx
c001b676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67a:	83 ec 0c             	sub    esp,0xc
c001b67d:	50                   	push   eax
c001b67e:	e8 e5 d8 fe ff       	call   c0008f68 <Device::~Device()>
c001b683:	83 c4 10             	add    esp,0x10
c001b686:	90                   	nop
c001b687:	83 c4 0c             	add    esp,0xc
c001b68a:	c3                   	ret    
c001b68b:	90                   	nop

c001b68c <SoundCard::~SoundCard()>:
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	83 ec 0c             	sub    esp,0xc
c001b692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b696:	e8 cd ff ff ff       	call   c001b668 <SoundCard::~SoundCard()>
c001b69b:	83 c4 10             	add    esp,0x10
c001b69e:	83 ec 08             	sub    esp,0x8
c001b6a1:	68 e8 01 00 00       	push   0x1e8
c001b6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6aa:	e8 6c 0f ff ff       	call   c000c61b <operator delete(void*, unsigned long)>
c001b6af:	83 c4 10             	add    esp,0x10
c001b6b2:	83 c4 0c             	add    esp,0xc
c001b6b5:	c3                   	ret    

c001b6b6 <SoundCard::configureRates(int, int, int)>:
c001b6b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b6ba:	31 c0                	xor    eax,eax
c001b6bc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b6c3:	75 20                	jne    c001b6e5 <SoundCard::configureRates(int, int, int)+0x2f>
c001b6c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6c9:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b6cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6d3:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b6d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6dd:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b6e3:	b0 01                	mov    al,0x1
c001b6e5:	c3                   	ret    

c001b6e6 <SoundCard::getSamples16(int, short*)>:
c001b6e6:	55                   	push   ebp
c001b6e7:	57                   	push   edi
c001b6e8:	31 ff                	xor    edi,edi
c001b6ea:	56                   	push   esi
c001b6eb:	53                   	push   ebx
c001b6ec:	31 db                	xor    ebx,ebx
c001b6ee:	83 ec 10             	sub    esp,0x10
c001b6f1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b6f5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b6f9:	8d 04 36             	lea    eax,[esi+esi*1]
c001b6fc:	50                   	push   eax
c001b6fd:	6a 00                	push   0x0
c001b6ff:	55                   	push   ebp
c001b700:	e8 eb 4d fe ff       	call   c00004f0 <memset>
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b70c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001b713:	85 c0                	test   eax,eax
c001b715:	74 1a                	je     c001b731 <SoundCard::getSamples16(int, short*)+0x4b>
c001b717:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b71b:	75 14                	jne    c001b731 <SoundCard::getSamples16(int, short*)+0x4b>
c001b71d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b721:	55                   	push   ebp
c001b722:	56                   	push   esi
c001b723:	50                   	push   eax
c001b724:	e8 8f 03 00 00       	call   c001bab8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b729:	83 c4 10             	add    esp,0x10
c001b72c:	39 c3                	cmp    ebx,eax
c001b72e:	0f 4c d8             	cmovl  ebx,eax
c001b731:	47                   	inc    edi
c001b732:	83 ff 20             	cmp    edi,0x20
c001b735:	75 d1                	jne    c001b708 <SoundCard::getSamples16(int, short*)+0x22>
c001b737:	83 c4 0c             	add    esp,0xc
c001b73a:	89 d8                	mov    eax,ebx
c001b73c:	5b                   	pop    ebx
c001b73d:	5e                   	pop    esi
c001b73e:	5f                   	pop    edi
c001b73f:	5d                   	pop    ebp
c001b740:	c3                   	ret    
c001b741:	90                   	nop

c001b742 <SoundCard::getSamples32(int, int*)>:
c001b742:	55                   	push   ebp
c001b743:	57                   	push   edi
c001b744:	31 ff                	xor    edi,edi
c001b746:	56                   	push   esi
c001b747:	31 f6                	xor    esi,esi
c001b749:	53                   	push   ebx
c001b74a:	83 ec 10             	sub    esp,0x10
c001b74d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b751:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b755:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b759:	c1 e0 02             	shl    eax,0x2
c001b75c:	50                   	push   eax
c001b75d:	6a 00                	push   0x0
c001b75f:	55                   	push   ebp
c001b760:	e8 8b 4d fe ff       	call   c00004f0 <memset>
c001b765:	83 c4 10             	add    esp,0x10
c001b768:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b76f:	85 c0                	test   eax,eax
c001b771:	74 1a                	je     c001b78d <SoundCard::getSamples32(int, int*)+0x4b>
c001b773:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b777:	75 14                	jne    c001b78d <SoundCard::getSamples32(int, int*)+0x4b>
c001b779:	53                   	push   ebx
c001b77a:	55                   	push   ebp
c001b77b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b77f:	50                   	push   eax
c001b780:	e8 03 04 00 00       	call   c001bb88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	39 c6                	cmp    esi,eax
c001b78a:	0f 4c f0             	cmovl  esi,eax
c001b78d:	47                   	inc    edi
c001b78e:	83 ff 20             	cmp    edi,0x20
c001b791:	75 d5                	jne    c001b768 <SoundCard::getSamples32(int, int*)+0x26>
c001b793:	85 f6                	test   esi,esi
c001b795:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b79c:	75 0f                	jne    c001b7ad <SoundCard::getSamples32(int, int*)+0x6b>
c001b79e:	85 c0                	test   eax,eax
c001b7a0:	74 1b                	je     c001b7bd <SoundCard::getSamples32(int, int*)+0x7b>
c001b7a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7a4:	83 ec 0c             	sub    esp,0xc
c001b7a7:	53                   	push   ebx
c001b7a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b7ab:	eb 0d                	jmp    c001b7ba <SoundCard::getSamples32(int, int*)+0x78>
c001b7ad:	85 c0                	test   eax,eax
c001b7af:	75 0c                	jne    c001b7bd <SoundCard::getSamples32(int, int*)+0x7b>
c001b7b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7b3:	83 ec 0c             	sub    esp,0xc
c001b7b6:	53                   	push   ebx
c001b7b7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	83 c4 0c             	add    esp,0xc
c001b7c0:	89 f0                	mov    eax,esi
c001b7c2:	5b                   	pop    ebx
c001b7c3:	5e                   	pop    esi
c001b7c4:	5f                   	pop    edi
c001b7c5:	5d                   	pop    ebp
c001b7c6:	c3                   	ret    
c001b7c7:	90                   	nop

c001b7c8 <SoundCard::addChannel(SoundPort*)>:
c001b7c8:	83 ec 0c             	sub    esp,0xc
c001b7cb:	31 c0                	xor    eax,eax
c001b7cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7d1:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b7d9:	74 1b                	je     c001b7f6 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b7db:	40                   	inc    eax
c001b7dc:	83 f8 20             	cmp    eax,0x20
c001b7df:	75 f0                	jne    c001b7d1 <SoundCard::addChannel(SoundPort*)+0x9>
c001b7e1:	83 ec 0c             	sub    esp,0xc
c001b7e4:	68 05 3e 02 c0       	push   0xc0023e05
c001b7e9:	e8 08 34 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001b7ee:	83 c4 10             	add    esp,0x10
c001b7f1:	83 c8 ff             	or     eax,0xffffffff
c001b7f4:	eb 0b                	jmp    c001b801 <SoundCard::addChannel(SoundPort*)+0x39>
c001b7f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b7fa:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b801:	83 c4 0c             	add    esp,0xc
c001b804:	c3                   	ret    
c001b805:	90                   	nop

c001b806 <SoundCard::removeChannel(int)>:
c001b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b80a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b80e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b819:	c3                   	ret    
c001b81a:	66 90                	xchg   ax,ax

c001b81c <SoundPort::SoundPort(int, int, int, int)>:
c001b81c:	83 ec 0c             	sub    esp,0xc
c001b81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b823:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b836:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b83a:	89 10                	mov    DWORD PTR [eax],edx
c001b83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b840:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b844:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b84f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b852:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b857:	75 13                	jne    c001b86c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b85f:	05 a0 0f 00 00       	add    eax,0xfa0
c001b864:	d1 e0                	shl    eax,1
c001b866:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b86a:	66 90                	xchg   ax,ax
c001b86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b874:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b87b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b886:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b889:	c1 e0 02             	shl    eax,0x2
c001b88c:	83 ec 0c             	sub    esp,0xc
c001b88f:	50                   	push   eax
c001b890:	e8 1b 30 ff ff       	call   c000e8b0 <malloc>
c001b895:	83 c4 10             	add    esp,0x10
c001b898:	89 c2                	mov    edx,eax
c001b89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b8a1:	90                   	nop
c001b8a2:	83 c4 0c             	add    esp,0xc
c001b8a5:	c3                   	ret    
c001b8a6:	66 90                	xchg   ax,ax

c001b8a8 <SoundPort::~SoundPort()>:
c001b8a8:	83 ec 0c             	sub    esp,0xc
c001b8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b8b2:	85 c0                	test   eax,eax
c001b8b4:	74 1e                	je     c001b8d4 <SoundPort::~SoundPort()+0x2c>
c001b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b8bd:	83 ec 0c             	sub    esp,0xc
c001b8c0:	50                   	push   eax
c001b8c1:	e8 fa 2f ff ff       	call   c000e8c0 <free>
c001b8c6:	83 c4 10             	add    esp,0x10
c001b8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b8d4:	90                   	nop
c001b8d5:	83 c4 0c             	add    esp,0xc
c001b8d8:	c3                   	ret    
c001b8d9:	90                   	nop
c001b8da:	66 90                	xchg   ax,ax

c001b8dc <SoundPort::unpause()>:
c001b8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8e0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b8e4:	c3                   	ret    
c001b8e5:	90                   	nop
c001b8e6:	66 90                	xchg   ax,ax

c001b8e8 <SoundPort::pause()>:
c001b8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8ec:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b8f0:	c3                   	ret    
c001b8f1:	90                   	nop
c001b8f2:	66 90                	xchg   ax,ax

c001b8f4 <SoundPort::getBufferUsed()>:
c001b8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b8fb:	c3                   	ret    

c001b8fc <SoundPort::getBufferSize()>:
c001b8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b900:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b903:	c3                   	ret    

c001b904 <SoundPort::buffer8(signed char*, int)>:
c001b904:	55                   	push   ebp
c001b905:	57                   	push   edi
c001b906:	56                   	push   esi
c001b907:	53                   	push   ebx
c001b908:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b90c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b910:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b913:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b916:	74 70                	je     c001b988 <SoundPort::buffer8(signed char*, int)+0x84>
c001b918:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b91c:	85 c9                	test   ecx,ecx
c001b91e:	7e 68                	jle    c001b988 <SoundPort::buffer8(signed char*, int)+0x84>
c001b920:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001b924:	8d 48 01             	lea    ecx,[eax+0x1]
c001b927:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b92a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b92d:	89 f1                	mov    ecx,esi
c001b92f:	c1 e1 18             	shl    ecx,0x18
c001b932:	29 f1                	sub    ecx,esi
c001b934:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b937:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b93a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b93d:	74 51                	je     c001b990 <SoundPort::buffer8(signed char*, int)+0x8c>
c001b93f:	31 ff                	xor    edi,edi
c001b941:	eb 25                	jmp    c001b968 <SoundPort::buffer8(signed char*, int)+0x64>
c001b943:	90                   	nop
c001b944:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001b949:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b94c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001b94f:	89 f3                	mov    ebx,esi
c001b951:	c1 e3 18             	shl    ebx,0x18
c001b954:	29 f3                	sub    ebx,esi
c001b956:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001b959:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001b95c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b95f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b962:	74 1c                	je     c001b980 <SoundPort::buffer8(signed char*, int)+0x7c>
c001b964:	89 c7                	mov    edi,eax
c001b966:	66 90                	xchg   ax,ax
c001b968:	8d 47 01             	lea    eax,[edi+0x1]
c001b96b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b96f:	75 d3                	jne    c001b944 <SoundPort::buffer8(signed char*, int)+0x40>
c001b971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b975:	8d 76 00             	lea    esi,[esi+0x0]
c001b978:	5b                   	pop    ebx
c001b979:	5e                   	pop    esi
c001b97a:	5f                   	pop    edi
c001b97b:	5d                   	pop    ebp
c001b97c:	c3                   	ret    
c001b97d:	8d 76 00             	lea    esi,[esi+0x0]
c001b980:	5b                   	pop    ebx
c001b981:	8d 47 02             	lea    eax,[edi+0x2]
c001b984:	5e                   	pop    esi
c001b985:	5f                   	pop    edi
c001b986:	5d                   	pop    ebp
c001b987:	c3                   	ret    
c001b988:	5b                   	pop    ebx
c001b989:	31 c0                	xor    eax,eax
c001b98b:	5e                   	pop    esi
c001b98c:	5f                   	pop    edi
c001b98d:	5d                   	pop    ebp
c001b98e:	c3                   	ret    
c001b98f:	90                   	nop
c001b990:	b8 01 00 00 00       	mov    eax,0x1
c001b995:	eb e1                	jmp    c001b978 <SoundPort::buffer8(signed char*, int)+0x74>
c001b997:	90                   	nop

c001b998 <SoundPort::buffer16(short*, int)>:
c001b998:	55                   	push   ebp
c001b999:	57                   	push   edi
c001b99a:	56                   	push   esi
c001b99b:	53                   	push   ebx
c001b99c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9a0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b9a4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b9a7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b9aa:	74 70                	je     c001ba1c <SoundPort::buffer16(short*, int)+0x84>
c001b9ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b9b0:	85 c9                	test   ecx,ecx
c001b9b2:	7e 68                	jle    c001ba1c <SoundPort::buffer16(short*, int)+0x84>
c001b9b4:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001b9b8:	8d 48 01             	lea    ecx,[eax+0x1]
c001b9bb:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b9be:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b9c1:	89 f1                	mov    ecx,esi
c001b9c3:	c1 e1 10             	shl    ecx,0x10
c001b9c6:	29 f1                	sub    ecx,esi
c001b9c8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b9cb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b9ce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b9d1:	74 51                	je     c001ba24 <SoundPort::buffer16(short*, int)+0x8c>
c001b9d3:	31 ff                	xor    edi,edi
c001b9d5:	eb 25                	jmp    c001b9fc <SoundPort::buffer16(short*, int)+0x64>
c001b9d7:	90                   	nop
c001b9d8:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001b9dd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b9e0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001b9e3:	89 f3                	mov    ebx,esi
c001b9e5:	c1 e3 10             	shl    ebx,0x10
c001b9e8:	29 f3                	sub    ebx,esi
c001b9ea:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001b9ed:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001b9f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b9f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b9f6:	74 1c                	je     c001ba14 <SoundPort::buffer16(short*, int)+0x7c>
c001b9f8:	89 c7                	mov    edi,eax
c001b9fa:	66 90                	xchg   ax,ax
c001b9fc:	8d 47 01             	lea    eax,[edi+0x1]
c001b9ff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ba03:	75 d3                	jne    c001b9d8 <SoundPort::buffer16(short*, int)+0x40>
c001ba05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba09:	8d 76 00             	lea    esi,[esi+0x0]
c001ba0c:	5b                   	pop    ebx
c001ba0d:	5e                   	pop    esi
c001ba0e:	5f                   	pop    edi
c001ba0f:	5d                   	pop    ebp
c001ba10:	c3                   	ret    
c001ba11:	8d 76 00             	lea    esi,[esi+0x0]
c001ba14:	5b                   	pop    ebx
c001ba15:	8d 47 02             	lea    eax,[edi+0x2]
c001ba18:	5e                   	pop    esi
c001ba19:	5f                   	pop    edi
c001ba1a:	5d                   	pop    ebp
c001ba1b:	c3                   	ret    
c001ba1c:	5b                   	pop    ebx
c001ba1d:	31 c0                	xor    eax,eax
c001ba1f:	5e                   	pop    esi
c001ba20:	5f                   	pop    edi
c001ba21:	5d                   	pop    ebp
c001ba22:	c3                   	ret    
c001ba23:	90                   	nop
c001ba24:	b8 01 00 00 00       	mov    eax,0x1
c001ba29:	eb e1                	jmp    c001ba0c <SoundPort::buffer16(short*, int)+0x74>
c001ba2b:	90                   	nop

c001ba2c <SoundPort::buffer32(int*, int)>:
c001ba2c:	55                   	push   ebp
c001ba2d:	57                   	push   edi
c001ba2e:	56                   	push   esi
c001ba2f:	53                   	push   ebx
c001ba30:	83 ec 04             	sub    esp,0x4
c001ba33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba3f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba42:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba45:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba48:	74 5a                	je     c001baa4 <SoundPort::buffer32(int*, int)+0x78>
c001ba4a:	85 c0                	test   eax,eax
c001ba4c:	7e 56                	jle    c001baa4 <SoundPort::buffer32(int*, int)+0x78>
c001ba4e:	8d 71 01             	lea    esi,[ecx+0x1]
c001ba51:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ba54:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ba57:	8b 37                	mov    esi,DWORD PTR [edi]
c001ba59:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ba5c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba5f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba62:	74 4c                	je     c001bab0 <SoundPort::buffer32(int*, int)+0x84>
c001ba64:	31 f6                	xor    esi,esi
c001ba66:	eb 1c                	jmp    c001ba84 <SoundPort::buffer32(int*, int)+0x58>
c001ba68:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ba6b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ba6e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ba71:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ba74:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ba78:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba7b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba7e:	74 18                	je     c001ba98 <SoundPort::buffer32(int*, int)+0x6c>
c001ba80:	89 de                	mov    esi,ebx
c001ba82:	66 90                	xchg   ax,ax
c001ba84:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ba87:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ba8a:	75 dc                	jne    c001ba68 <SoundPort::buffer32(int*, int)+0x3c>
c001ba8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba8f:	90                   	nop
c001ba90:	83 c4 04             	add    esp,0x4
c001ba93:	5b                   	pop    ebx
c001ba94:	5e                   	pop    esi
c001ba95:	5f                   	pop    edi
c001ba96:	5d                   	pop    ebp
c001ba97:	c3                   	ret    
c001ba98:	8d 46 02             	lea    eax,[esi+0x2]
c001ba9b:	83 c4 04             	add    esp,0x4
c001ba9e:	5b                   	pop    ebx
c001ba9f:	5e                   	pop    esi
c001baa0:	5f                   	pop    edi
c001baa1:	5d                   	pop    ebp
c001baa2:	c3                   	ret    
c001baa3:	90                   	nop
c001baa4:	83 c4 04             	add    esp,0x4
c001baa7:	31 c0                	xor    eax,eax
c001baa9:	5b                   	pop    ebx
c001baaa:	5e                   	pop    esi
c001baab:	5f                   	pop    edi
c001baac:	5d                   	pop    ebp
c001baad:	c3                   	ret    
c001baae:	66 90                	xchg   ax,ax
c001bab0:	b8 01 00 00 00       	mov    eax,0x1
c001bab5:	eb d9                	jmp    c001ba90 <SoundPort::buffer32(int*, int)+0x64>
c001bab7:	90                   	nop

c001bab8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001bab8:	55                   	push   ebp
c001bab9:	57                   	push   edi
c001baba:	56                   	push   esi
c001babb:	53                   	push   ebx
c001babc:	83 ec 0c             	sub    esp,0xc
c001babf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bac3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bac7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bacb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bacf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001bad5:	39 03                	cmp    DWORD PTR [ebx],eax
c001bad7:	74 13                	je     c001baec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001bad9:	83 ec 0c             	sub    esp,0xc
c001badc:	68 58 3e 02 c0       	push   0xc0023e58
c001bae1:	e8 10 31 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bae6:	83 c4 10             	add    esp,0x10
c001bae9:	8d 76 00             	lea    esi,[esi+0x0]
c001baec:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001baf2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001baf5:	74 11                	je     c001bb08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001baf7:	83 ec 0c             	sub    esp,0xc
c001bafa:	68 97 3e 02 c0       	push   0xc0023e97
c001baff:	e8 f2 30 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bb04:	83 c4 10             	add    esp,0x10
c001bb07:	90                   	nop
c001bb08:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001bb0e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bb11:	74 11                	je     c001bb24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001bb13:	83 ec 0c             	sub    esp,0xc
c001bb16:	68 97 3e 02 c0       	push   0xc0023e97
c001bb1b:	e8 d6 30 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	90                   	nop
c001bb24:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001bb27:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001bb2b:	85 f6                	test   esi,esi
c001bb2d:	7e 2d                	jle    c001bb5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001bb2f:	31 c0                	xor    eax,eax
c001bb31:	8d 76 00             	lea    esi,[esi+0x0]
c001bb34:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bb37:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001bb3a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001bb40:	85 c9                	test   ecx,ecx
c001bb42:	0f 49 d1             	cmovns edx,ecx
c001bb45:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001bb49:	c1 fa 0f             	sar    edx,0xf
c001bb4c:	01 d1                	add    ecx,edx
c001bb4e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001bb52:	83 c0 01             	add    eax,0x1
c001bb55:	39 f0                	cmp    eax,esi
c001bb57:	75 db                	jne    c001bb34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001bb59:	8d 76 00             	lea    esi,[esi+0x0]
c001bb5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bb5f:	83 ec 04             	sub    esp,0x4
c001bb62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bb65:	29 f0                	sub    eax,esi
c001bb67:	c1 e0 02             	shl    eax,0x2
c001bb6a:	50                   	push   eax
c001bb6b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001bb6e:	50                   	push   eax
c001bb6f:	52                   	push   edx
c001bb70:	e8 5b 48 fe ff       	call   c00003d0 <memmove>
c001bb75:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bb78:	29 f0                	sub    eax,esi
c001bb7a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bb7d:	83 c4 1c             	add    esp,0x1c
c001bb80:	89 f0                	mov    eax,esi
c001bb82:	5b                   	pop    ebx
c001bb83:	5e                   	pop    esi
c001bb84:	5f                   	pop    edi
c001bb85:	5d                   	pop    ebp
c001bb86:	c3                   	ret    
c001bb87:	90                   	nop

c001bb88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001bb88:	55                   	push   ebp
c001bb89:	57                   	push   edi
c001bb8a:	56                   	push   esi
c001bb8b:	53                   	push   ebx
c001bb8c:	83 ec 0c             	sub    esp,0xc
c001bb8f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001bb93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb97:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001bb9b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bb9f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001bba5:	39 03                	cmp    DWORD PTR [ebx],eax
c001bba7:	74 13                	je     c001bbbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001bba9:	83 ec 0c             	sub    esp,0xc
c001bbac:	68 78 3e 02 c0       	push   0xc0023e78
c001bbb1:	e8 40 30 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bbb6:	83 c4 10             	add    esp,0x10
c001bbb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbbc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001bbc2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bbc5:	74 11                	je     c001bbd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	68 b3 3e 02 c0       	push   0xc0023eb3
c001bbcf:	e8 22 30 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bbd4:	83 c4 10             	add    esp,0x10
c001bbd7:	90                   	nop
c001bbd8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001bbde:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bbe1:	74 11                	je     c001bbf4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001bbe3:	83 ec 0c             	sub    esp,0xc
c001bbe6:	68 b3 3e 02 c0       	push   0xc0023eb3
c001bbeb:	e8 06 30 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bbf0:	83 c4 10             	add    esp,0x10
c001bbf3:	90                   	nop
c001bbf4:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001bbf7:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001bbfb:	85 ff                	test   edi,edi
c001bbfd:	7e 21                	jle    c001bc20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001bbff:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001bc06:	31 c0                	xor    eax,eax
c001bc08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bc0b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001bc0e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001bc11:	01 d5                	add    ebp,edx
c001bc13:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001bc16:	83 c0 04             	add    eax,0x4
c001bc19:	39 c1                	cmp    ecx,eax
c001bc1b:	75 eb                	jne    c001bc08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001bc1d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bc23:	83 ec 04             	sub    esp,0x4
c001bc26:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bc29:	29 f8                	sub    eax,edi
c001bc2b:	c1 e0 02             	shl    eax,0x2
c001bc2e:	50                   	push   eax
c001bc2f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bc32:	50                   	push   eax
c001bc33:	52                   	push   edx
c001bc34:	e8 97 47 fe ff       	call   c00003d0 <memmove>
c001bc39:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bc3c:	29 f8                	sub    eax,edi
c001bc3e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bc41:	83 c4 1c             	add    esp,0x1c
c001bc44:	89 f8                	mov    eax,edi
c001bc46:	5b                   	pop    ebx
c001bc47:	5e                   	pop    esi
c001bc48:	5f                   	pop    edi
c001bc49:	5d                   	pop    ebp
c001bc4a:	c3                   	ret    
c001bc4b:	90                   	nop

c001bc4c <PCI::open(int, int, void*)>:
c001bc4c:	83 ec 18             	sub    esp,0x18
c001bc4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bc5d:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc5f:	50                   	push   eax
c001bc60:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bc63:	31 c0                	xor    eax,eax
c001bc65:	83 c4 1c             	add    esp,0x1c
c001bc68:	c3                   	ret    
c001bc69:	90                   	nop

c001bc6a <PCI::close(int, int, void*)>:
c001bc6a:	31 c0                	xor    eax,eax
c001bc6c:	c3                   	ret    
c001bc6d:	90                   	nop

c001bc6e <PCI::PCI()>:
c001bc6e:	83 ec 0c             	sub    esp,0xc
c001bc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc75:	83 ec 08             	sub    esp,0x8
c001bc78:	68 cf 3e 02 c0       	push   0xc0023ecf
c001bc7d:	50                   	push   eax
c001bc7e:	e8 85 cc fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	ba dc 3f 02 c0       	mov    edx,0xc0023fdc
c001bc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc8f:	89 10                	mov    DWORD PTR [eax],edx
c001bc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc95:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001bc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca3:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c001bca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bcb2:	0f b6 d0             	movzx  edx,al
c001bcb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bcca:	0f b6 d0             	movzx  edx,al
c001bccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bce0:	8d 50 01             	lea    edx,[eax+0x1]
c001bce3:	88 d1                	mov    cl,dl
c001bce5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bce9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001bcef:	0f b6 d0             	movzx  edx,al
c001bcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bcfa:	83 c9 c0             	or     ecx,0xffffffc0
c001bcfd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bd01:	90                   	nop
c001bd02:	83 c4 0c             	add    esp,0xc
c001bd05:	c3                   	ret    

c001bd06 <PCI::readBAR8(unsigned int, int)>:
c001bd06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd0e:	f6 c2 01             	test   dl,0x1
c001bd11:	74 07                	je     c001bd1a <PCI::readBAR8(unsigned int, int)+0x14>
c001bd13:	83 e2 fc             	and    edx,0xfffffffc
c001bd16:	01 c2                	add    edx,eax
c001bd18:	ec                   	in     al,dx
c001bd19:	c3                   	ret    
c001bd1a:	83 e2 f0             	and    edx,0xfffffff0
c001bd1d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001bd20:	c3                   	ret    
c001bd21:	90                   	nop

c001bd22 <PCI::readBAR16(unsigned int, int)>:
c001bd22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd2a:	f6 c2 01             	test   dl,0x1
c001bd2d:	74 08                	je     c001bd37 <PCI::readBAR16(unsigned int, int)+0x15>
c001bd2f:	83 e2 fc             	and    edx,0xfffffffc
c001bd32:	01 c2                	add    edx,eax
c001bd34:	66 ed                	in     ax,dx
c001bd36:	c3                   	ret    
c001bd37:	83 e2 f0             	and    edx,0xfffffff0
c001bd3a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001bd3e:	c3                   	ret    
c001bd3f:	90                   	nop

c001bd40 <PCI::readBAR32(unsigned int, int)>:
c001bd40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd48:	f6 c2 01             	test   dl,0x1
c001bd4b:	74 07                	je     c001bd54 <PCI::readBAR32(unsigned int, int)+0x14>
c001bd4d:	83 e2 fc             	and    edx,0xfffffffc
c001bd50:	01 c2                	add    edx,eax
c001bd52:	ed                   	in     eax,dx
c001bd53:	c3                   	ret    
c001bd54:	83 e2 f0             	and    edx,0xfffffff0
c001bd57:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001bd5a:	c3                   	ret    
c001bd5b:	90                   	nop

c001bd5c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001bd5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bd68:	f6 c2 01             	test   dl,0x1
c001bd6b:	74 07                	je     c001bd74 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001bd6d:	83 e2 fc             	and    edx,0xfffffffc
c001bd70:	01 ca                	add    edx,ecx
c001bd72:	ee                   	out    dx,al
c001bd73:	c3                   	ret    
c001bd74:	83 e2 f0             	and    edx,0xfffffff0
c001bd77:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001bd7a:	c3                   	ret    
c001bd7b:	90                   	nop

c001bd7c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001bd7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bd88:	f6 c2 01             	test   dl,0x1
c001bd8b:	74 08                	je     c001bd95 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001bd8d:	83 e2 fc             	and    edx,0xfffffffc
c001bd90:	01 ca                	add    edx,ecx
c001bd92:	66 ef                	out    dx,ax
c001bd94:	c3                   	ret    
c001bd95:	83 e2 f0             	and    edx,0xfffffff0
c001bd98:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001bd9c:	c3                   	ret    
c001bd9d:	90                   	nop

c001bd9e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001bd9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bda2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bda6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bdaa:	f6 c2 01             	test   dl,0x1
c001bdad:	74 07                	je     c001bdb6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001bdaf:	83 e2 fc             	and    edx,0xfffffffc
c001bdb2:	01 ca                	add    edx,ecx
c001bdb4:	ef                   	out    dx,eax
c001bdb5:	c3                   	ret    
c001bdb6:	83 e2 f0             	and    edx,0xfffffff0
c001bdb9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001bdbc:	c3                   	ret    
c001bdbd:	90                   	nop

c001bdbe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bdbe:	55                   	push   ebp
c001bdbf:	57                   	push   edi
c001bdc0:	56                   	push   esi
c001bdc1:	53                   	push   ebx
c001bdc2:	83 ec 0c             	sub    esp,0xc
c001bdc5:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001bdca:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001bdce:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bdd2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bdd6:	83 fe 07             	cmp    esi,0x7
c001bdd9:	76 10                	jbe    c001bdeb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001bddb:	83 ec 0c             	sub    esp,0xc
c001bdde:	68 d7 3e 02 c0       	push   0xc0023ed7
c001bde3:	e8 0e 2e ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bde8:	83 c4 10             	add    esp,0x10
c001bdeb:	0f b6 db             	movzx  ebx,bl
c001bdee:	83 fb 0f             	cmp    ebx,0xf
c001bdf1:	76 10                	jbe    c001be03 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001bdf3:	83 ec 0c             	sub    esp,0xc
c001bdf6:	68 07 3f 02 c0       	push   0xc0023f07
c001bdfb:	e8 f6 2d ff ff       	call   c000ebf6 <KePanic(char const*)>
c001be00:	83 c4 10             	add    esp,0x10
c001be03:	8d 04 36             	lea    eax,[esi+esi*1]
c001be06:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be0b:	83 c8 f0             	or     eax,0xfffffff0
c001be0e:	ee                   	out    dx,al
c001be0f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001be14:	89 e8                	mov    eax,ebp
c001be16:	ee                   	out    dx,al
c001be17:	89 f9                	mov    ecx,edi
c001be19:	89 d8                	mov    eax,ebx
c001be1b:	0f b6 d9             	movzx  ebx,cl
c001be1e:	83 c4 0c             	add    esp,0xc
c001be21:	c1 e0 08             	shl    eax,0x8
c001be24:	83 e3 fc             	and    ebx,0xfffffffc
c001be27:	09 d8                	or     eax,ebx
c001be29:	5b                   	pop    ebx
c001be2a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001be2f:	5e                   	pop    esi
c001be30:	5f                   	pop    edi
c001be31:	5d                   	pop    ebp
c001be32:	c3                   	ret    
c001be33:	90                   	nop

c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001be34:	57                   	push   edi
c001be35:	56                   	push   esi
c001be36:	53                   	push   ebx
c001be37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be47:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001be4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be51:	83 ff 01             	cmp    edi,0x1
c001be54:	75 3f                	jne    c001be95 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001be56:	89 de                	mov    esi,ebx
c001be58:	0f b6 c0             	movzx  eax,al
c001be5b:	c1 e0 10             	shl    eax,0x10
c001be5e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001be64:	0f b6 c9             	movzx  ecx,cl
c001be67:	09 f0                	or     eax,esi
c001be69:	c1 e1 08             	shl    ecx,0x8
c001be6c:	0f b6 d2             	movzx  edx,dl
c001be6f:	c1 e2 0b             	shl    edx,0xb
c001be72:	09 c8                	or     eax,ecx
c001be74:	09 d0                	or     eax,edx
c001be76:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be7b:	0d 00 00 00 80       	or     eax,0x80000000
c001be80:	ef                   	out    dx,eax
c001be81:	ba fc 0c 00 00       	mov    edx,0xcfc
c001be86:	ed                   	in     eax,dx
c001be87:	83 e3 02             	and    ebx,0x2
c001be8a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001be91:	d3 e8                	shr    eax,cl
c001be93:	eb 44                	jmp    c001bed9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001be95:	83 ff 02             	cmp    edi,0x2
c001be98:	75 2d                	jne    c001bec7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001be9a:	83 ec 0c             	sub    esp,0xc
c001be9d:	0f b6 fb             	movzx  edi,bl
c001bea0:	57                   	push   edi
c001bea1:	0f b6 c9             	movzx  ecx,cl
c001bea4:	51                   	push   ecx
c001bea5:	0f b6 d2             	movzx  edx,dl
c001bea8:	52                   	push   edx
c001bea9:	0f b6 c0             	movzx  eax,al
c001beac:	50                   	push   eax
c001bead:	56                   	push   esi
c001beae:	e8 0b ff ff ff       	call   c001bdbe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001beb3:	89 c2                	mov    edx,eax
c001beb5:	ed                   	in     eax,dx
c001beb6:	83 e3 02             	and    ebx,0x2
c001beb9:	83 c4 20             	add    esp,0x20
c001bebc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bec3:	d3 e8                	shr    eax,cl
c001bec5:	eb 12                	jmp    c001bed9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bec7:	83 ec 0c             	sub    esp,0xc
c001beca:	68 37 3f 02 c0       	push   0xc0023f37
c001becf:	e8 22 2d ff ff       	call   c000ebf6 <KePanic(char const*)>
c001bed4:	83 c4 10             	add    esp,0x10
c001bed7:	31 c0                	xor    eax,eax
c001bed9:	5b                   	pop    ebx
c001beda:	5e                   	pop    esi
c001bedb:	5f                   	pop    edi
c001bedc:	c3                   	ret    
c001bedd:	90                   	nop

c001bede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bede:	83 ec 18             	sub    esp,0x18
c001bee1:	6a 00                	push   0x0
c001bee3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bee8:	50                   	push   eax
c001bee9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001beee:	50                   	push   eax
c001beef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bef4:	50                   	push   eax
c001bef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bef9:	e8 36 ff ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001befe:	83 c4 2c             	add    esp,0x2c
c001bf01:	c3                   	ret    

c001bf02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bf02:	83 ec 18             	sub    esp,0x18
c001bf05:	6a 0e                	push   0xe
c001bf07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf0c:	50                   	push   eax
c001bf0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf12:	50                   	push   eax
c001bf13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf18:	50                   	push   eax
c001bf19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf1d:	e8 12 ff ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf22:	83 c4 2c             	add    esp,0x2c
c001bf25:	0f b6 c0             	movzx  eax,al
c001bf28:	c3                   	ret    
c001bf29:	90                   	nop

c001bf2a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bf2a:	55                   	push   ebp
c001bf2b:	57                   	push   edi
c001bf2c:	56                   	push   esi
c001bf2d:	53                   	push   ebx
c001bf2e:	83 ec 18             	sub    esp,0x18
c001bf31:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bf36:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bf3b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bf40:	6a 0a                	push   0xa
c001bf42:	56                   	push   esi
c001bf43:	55                   	push   ebp
c001bf44:	57                   	push   edi
c001bf45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bf49:	e8 e6 fe ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf4e:	83 c4 14             	add    esp,0x14
c001bf51:	6a 0a                	push   0xa
c001bf53:	56                   	push   esi
c001bf54:	55                   	push   ebp
c001bf55:	57                   	push   edi
c001bf56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bf5a:	89 c3                	mov    ebx,eax
c001bf5c:	0f b6 db             	movzx  ebx,bl
c001bf5f:	e8 d0 fe ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf64:	83 c4 2c             	add    esp,0x2c
c001bf67:	25 00 ff 00 00       	and    eax,0xff00
c001bf6c:	09 d8                	or     eax,ebx
c001bf6e:	5b                   	pop    ebx
c001bf6f:	5e                   	pop    esi
c001bf70:	5f                   	pop    edi
c001bf71:	5d                   	pop    ebp
c001bf72:	c3                   	ret    
c001bf73:	90                   	nop

c001bf74 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bf74:	83 ec 18             	sub    esp,0x18
c001bf77:	6a 08                	push   0x8
c001bf79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf7e:	50                   	push   eax
c001bf7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf84:	50                   	push   eax
c001bf85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf8a:	50                   	push   eax
c001bf8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf8f:	e8 a0 fe ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf94:	83 c4 2c             	add    esp,0x2c
c001bf97:	0f b6 c4             	movzx  eax,ah
c001bf9a:	c3                   	ret    
c001bf9b:	90                   	nop

c001bf9c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bf9c:	83 ec 18             	sub    esp,0x18
c001bf9f:	6a 08                	push   0x8
c001bfa1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfa6:	50                   	push   eax
c001bfa7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfac:	50                   	push   eax
c001bfad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfb2:	50                   	push   eax
c001bfb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfb7:	e8 78 fe ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfbc:	83 c4 2c             	add    esp,0x2c
c001bfbf:	c3                   	ret    

c001bfc0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bfc0:	83 ec 18             	sub    esp,0x18
c001bfc3:	6a 3c                	push   0x3c
c001bfc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfca:	50                   	push   eax
c001bfcb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfd0:	50                   	push   eax
c001bfd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfd6:	50                   	push   eax
c001bfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfdb:	e8 54 fe ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfe0:	83 c4 2c             	add    esp,0x2c
c001bfe3:	c3                   	ret    

c001bfe4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bfe4:	83 ec 18             	sub    esp,0x18
c001bfe7:	6a 18                	push   0x18
c001bfe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfee:	50                   	push   eax
c001bfef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bff4:	50                   	push   eax
c001bff5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bffa:	50                   	push   eax
c001bffb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfff:	e8 30 fe ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c004:	83 c4 2c             	add    esp,0x2c
c001c007:	0f b6 c4             	movzx  eax,ah
c001c00a:	c3                   	ret    
c001c00b:	90                   	nop

c001c00c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c00c:	55                   	push   ebp
c001c00d:	57                   	push   edi
c001c00e:	56                   	push   esi
c001c00f:	53                   	push   ebx
c001c010:	83 ec 28             	sub    esp,0x28
c001c013:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c017:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001c01c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001c021:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001c026:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c02d:	8d 43 12             	lea    eax,[ebx+0x12]
c001c030:	83 c3 10             	add    ebx,0x10
c001c033:	0f b6 c0             	movzx  eax,al
c001c036:	0f b6 db             	movzx  ebx,bl
c001c039:	50                   	push   eax
c001c03a:	51                   	push   ecx
c001c03b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001c03f:	57                   	push   edi
c001c040:	55                   	push   ebp
c001c041:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c045:	e8 ea fd ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c04a:	83 c4 14             	add    esp,0x14
c001c04d:	53                   	push   ebx
c001c04e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c052:	51                   	push   ecx
c001c053:	89 c6                	mov    esi,eax
c001c055:	57                   	push   edi
c001c056:	55                   	push   ebp
c001c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c05b:	c1 e6 10             	shl    esi,0x10
c001c05e:	e8 d1 fd ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c063:	83 c4 3c             	add    esp,0x3c
c001c066:	5b                   	pop    ebx
c001c067:	0f b7 c0             	movzx  eax,ax
c001c06a:	09 f0                	or     eax,esi
c001c06c:	5e                   	pop    esi
c001c06d:	5f                   	pop    edi
c001c06e:	5d                   	pop    ebp
c001c06f:	c3                   	ret    

c001c070 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c070:	55                   	push   ebp
c001c071:	57                   	push   edi
c001c072:	56                   	push   esi
c001c073:	53                   	push   ebx
c001c074:	83 ec 0c             	sub    esp,0xc
c001c077:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c07b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c07f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c083:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001c087:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001c08d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c091:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c095:	83 f9 01             	cmp    ecx,0x1
c001c098:	75 5d                	jne    c001c0f7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001c09a:	0f b6 c8             	movzx  ecx,al
c001c09d:	89 f0                	mov    eax,esi
c001c09f:	25 fc 00 00 00       	and    eax,0xfc
c001c0a4:	0f b6 d2             	movzx  edx,dl
c001c0a7:	c1 e1 10             	shl    ecx,0x10
c001c0aa:	c1 e2 0b             	shl    edx,0xb
c001c0ad:	09 c1                	or     ecx,eax
c001c0af:	89 f8                	mov    eax,edi
c001c0b1:	0f b6 f8             	movzx  edi,al
c001c0b4:	c1 e7 08             	shl    edi,0x8
c001c0b7:	09 f9                	or     ecx,edi
c001c0b9:	09 d1                	or     ecx,edx
c001c0bb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c0c0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c0c6:	89 c8                	mov    eax,ecx
c001c0c8:	ef                   	out    dx,eax
c001c0c9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0ce:	ed                   	in     eax,dx
c001c0cf:	83 e6 02             	and    esi,0x2
c001c0d2:	0f b7 db             	movzx  ebx,bx
c001c0d5:	74 0a                	je     c001c0e1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001c0d7:	c1 e3 10             	shl    ebx,0x10
c001c0da:	0f b7 d0             	movzx  edx,ax
c001c0dd:	09 d3                	or     ebx,edx
c001c0df:	eb 05                	jmp    c001c0e6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001c0e1:	66 31 c0             	xor    ax,ax
c001c0e4:	09 c3                	or     ebx,eax
c001c0e6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c0eb:	89 c8                	mov    eax,ecx
c001c0ed:	ef                   	out    dx,eax
c001c0ee:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0f3:	89 d8                	mov    eax,ebx
c001c0f5:	eb 41                	jmp    c001c138 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001c0f7:	83 f9 02             	cmp    ecx,0x2
c001c0fa:	75 45                	jne    c001c141 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001c0fc:	89 f1                	mov    ecx,esi
c001c0fe:	83 ec 0c             	sub    esp,0xc
c001c101:	0f b6 f1             	movzx  esi,cl
c001c104:	89 f9                	mov    ecx,edi
c001c106:	56                   	push   esi
c001c107:	0f b6 f9             	movzx  edi,cl
c001c10a:	57                   	push   edi
c001c10b:	0f b6 d2             	movzx  edx,dl
c001c10e:	52                   	push   edx
c001c10f:	0f b6 c0             	movzx  eax,al
c001c112:	50                   	push   eax
c001c113:	55                   	push   ebp
c001c114:	e8 a5 fc ff ff       	call   c001bdbe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c119:	89 c2                	mov    edx,eax
c001c11b:	ed                   	in     eax,dx
c001c11c:	83 c4 20             	add    esp,0x20
c001c11f:	f6 c2 02             	test   dl,0x2
c001c122:	0f b7 db             	movzx  ebx,bx
c001c125:	74 0c                	je     c001c133 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001c127:	0f b7 c8             	movzx  ecx,ax
c001c12a:	89 d8                	mov    eax,ebx
c001c12c:	c1 e0 10             	shl    eax,0x10
c001c12f:	09 c8                	or     eax,ecx
c001c131:	eb 05                	jmp    c001c138 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001c133:	66 31 c0             	xor    ax,ax
c001c136:	09 d8                	or     eax,ebx
c001c138:	ef                   	out    dx,eax
c001c139:	83 c4 0c             	add    esp,0xc
c001c13c:	5b                   	pop    ebx
c001c13d:	5e                   	pop    esi
c001c13e:	5f                   	pop    edi
c001c13f:	5d                   	pop    ebp
c001c140:	c3                   	ret    
c001c141:	c7 44 24 20 37 3f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023f37
c001c149:	83 c4 0c             	add    esp,0xc
c001c14c:	5b                   	pop    ebx
c001c14d:	5e                   	pop    esi
c001c14e:	5f                   	pop    edi
c001c14f:	5d                   	pop    ebp
c001c150:	e9 a1 2a ff ff       	jmp    c000ebf6 <KePanic(char const*)>
c001c155:	90                   	nop

c001c156 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001c156:	55                   	push   ebp
c001c157:	57                   	push   edi
c001c158:	56                   	push   esi
c001c159:	53                   	push   ebx
c001c15a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001c160:	80 3d cc e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cc,0x0
c001c167:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001c16e:	0f 85 bd 00 00 00    	jne    c001c231 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001c174:	83 ec 0c             	sub    esp,0xc
c001c177:	68 14 01 00 00       	push   0x114
c001c17c:	e8 2f 27 ff ff       	call   c000e8b0 <malloc>
c001c181:	83 c4 0c             	add    esp,0xc
c001c184:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001c18a:	68 3d 3f 02 c0       	push   0xc0023f3d
c001c18f:	50                   	push   eax
c001c190:	89 c3                	mov    ebx,eax
c001c192:	e8 95 bf fe ff       	call   c000812c <File::File(char const*, Process*)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	85 db                	test   ebx,ebx
c001c19c:	0f 84 6b 02 00 00    	je     c001c40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c1a2:	57                   	push   edi
c001c1a3:	57                   	push   edi
c001c1a4:	6a 01                	push   0x1
c001c1a6:	53                   	push   ebx
c001c1a7:	e8 9e bf fe ff       	call   c000814a <File::open(FileOpenMode)>
c001c1ac:	83 c4 10             	add    esp,0x10
c001c1af:	85 c0                	test   eax,eax
c001c1b1:	0f 85 56 02 00 00    	jne    c001c40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c1b7:	52                   	push   edx
c001c1b8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001c1bc:	50                   	push   eax
c001c1bd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c1c1:	50                   	push   eax
c001c1c2:	53                   	push   ebx
c001c1c3:	e8 84 c2 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001c1c8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c1cc:	40                   	inc    eax
c001c1cd:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1d0:	e8 db 26 ff ff       	call   c000e8b0 <malloc>
c001c1d5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c1d9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001c1dd:	59                   	pop    ecx
c001c1de:	a3 c8 e0 02 c0       	mov    ds:0xc002e0c8,eax
c001c1e3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1e5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001c1e9:	51                   	push   ecx
c001c1ea:	50                   	push   eax
c001c1eb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c1ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c1f3:	53                   	push   ebx
c001c1f4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c1f7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001c1fb:	83 c4 20             	add    esp,0x20
c001c1fe:	89 c8                	mov    eax,ecx
c001c200:	99                   	cdq    
c001c201:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001c205:	0f 85 02 02 00 00    	jne    c001c40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c20b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001c20f:	0f 85 f8 01 00 00    	jne    c001c40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c215:	83 ec 0c             	sub    esp,0xc
c001c218:	53                   	push   ebx
c001c219:	e8 8a bf fe ff       	call   c00081a8 <File::close()>
c001c21e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c222:	83 c4 10             	add    esp,0x10
c001c225:	c6 05 cc e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0cc,0x1
c001c22c:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c001c231:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001c239:	31 c9                	xor    ecx,ecx
c001c23b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001c242:	8b 2d c4 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e0c4
c001c248:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001c24f:	8b 15 c8 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c8
c001c255:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c25a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001c262:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c267:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001c26f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c273:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001c27b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c27f:	39 cd                	cmp    ebp,ecx
c001c281:	0f 8e 86 01 00 00    	jle    c001c40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001c287:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001c28a:	d4 40                	aam    0x40
c001c28c:	d5 39                	aad    0x39
c001c28e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c292:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001c296:	d4 40                	aam    0x40
c001c298:	d5 39                	aad    0x39
c001c29a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c29e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001c2a2:	d4 40                	aam    0x40
c001c2a4:	d5 39                	aad    0x39
c001c2a6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c2aa:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001c2ae:	d4 40                	aam    0x40
c001c2b0:	d5 39                	aad    0x39
c001c2b2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c2b6:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001c2ba:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c2be:	3c 56                	cmp    al,0x56
c001c2c0:	74 47                	je     c001c309 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001c2c2:	d4 40                	aam    0x40
c001c2c4:	d5 39                	aad    0x39
c001c2c6:	8d 58 d0             	lea    ebx,[eax-0x30]
c001c2c9:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001c2cd:	0f b6 db             	movzx  ebx,bl
c001c2d0:	c1 e3 04             	shl    ebx,0x4
c001c2d3:	d4 40                	aam    0x40
c001c2d5:	d5 39                	aad    0x39
c001c2d7:	83 e8 30             	sub    eax,0x30
c001c2da:	0f b6 c0             	movzx  eax,al
c001c2dd:	09 c3                	or     ebx,eax
c001c2df:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001c2e3:	c1 e3 04             	shl    ebx,0x4
c001c2e6:	d4 40                	aam    0x40
c001c2e8:	d5 39                	aad    0x39
c001c2ea:	83 e8 30             	sub    eax,0x30
c001c2ed:	0f b6 c0             	movzx  eax,al
c001c2f0:	09 c3                	or     ebx,eax
c001c2f2:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001c2f6:	c1 e3 04             	shl    ebx,0x4
c001c2f9:	d4 40                	aam    0x40
c001c2fb:	d5 39                	aad    0x39
c001c2fd:	83 e8 30             	sub    eax,0x30
c001c300:	0f b6 c0             	movzx  eax,al
c001c303:	09 c3                	or     ebx,eax
c001c305:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001c309:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001c30d:	80 fb 58             	cmp    bl,0x58
c001c310:	74 49                	je     c001c35b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001c312:	88 d8                	mov    al,bl
c001c314:	d4 40                	aam    0x40
c001c316:	d5 39                	aad    0x39
c001c318:	83 e8 30             	sub    eax,0x30
c001c31b:	0f b6 f8             	movzx  edi,al
c001c31e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001c322:	c1 e7 04             	shl    edi,0x4
c001c325:	d4 40                	aam    0x40
c001c327:	d5 39                	aad    0x39
c001c329:	83 e8 30             	sub    eax,0x30
c001c32c:	0f b6 c0             	movzx  eax,al
c001c32f:	09 c7                	or     edi,eax
c001c331:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001c335:	c1 e7 04             	shl    edi,0x4
c001c338:	d4 40                	aam    0x40
c001c33a:	d5 39                	aad    0x39
c001c33c:	83 e8 30             	sub    eax,0x30
c001c33f:	0f b6 c0             	movzx  eax,al
c001c342:	09 c7                	or     edi,eax
c001c344:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001c348:	c1 e7 04             	shl    edi,0x4
c001c34b:	d4 40                	aam    0x40
c001c34d:	d5 39                	aad    0x39
c001c34f:	83 e8 30             	sub    eax,0x30
c001c352:	0f b6 c0             	movzx  eax,al
c001c355:	09 c7                	or     edi,eax
c001c357:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001c35b:	8d 41 10             	lea    eax,[ecx+0x10]
c001c35e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c362:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001c366:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c36a:	83 f9 0a             	cmp    ecx,0xa
c001c36d:	74 07                	je     c001c376 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001c36f:	47                   	inc    edi
c001c370:	39 c5                	cmp    ebp,eax
c001c372:	75 16                	jne    c001c38a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001c374:	89 e8                	mov    eax,ebp
c001c376:	83 f9 0a             	cmp    ecx,0xa
c001c379:	0f 94 c1             	sete   cl
c001c37c:	0f b6 c9             	movzx  ecx,cl
c001c37f:	01 c1                	add    ecx,eax
c001c381:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c386:	75 0f                	jne    c001c397 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001c388:	eb 1c                	jmp    c001c3a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001c38a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c38d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c391:	40                   	inc    eax
c001c392:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001c395:	eb cb                	jmp    c001c362 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001c397:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c39b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c3a0:	0f 85 d9 fe ff ff    	jne    c001c27f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c3a6:	80 fb 58             	cmp    bl,0x58
c001c3a9:	74 10                	je     c001c3bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001c3ab:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c3b0:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001c3b5:	0f 85 c4 fe ff ff    	jne    c001c27f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c3bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3bf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c3c3:	83 e8 30             	sub    eax,0x30
c001c3c6:	c1 e0 04             	shl    eax,0x4
c001c3c9:	83 eb 30             	sub    ebx,0x30
c001c3cc:	09 d8                	or     eax,ebx
c001c3ce:	0f b6 c0             	movzx  eax,al
c001c3d1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c3d5:	0f 85 a4 fe ff ff    	jne    c001c27f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3df:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c3e3:	83 e8 30             	sub    eax,0x30
c001c3e6:	c1 e0 04             	shl    eax,0x4
c001c3e9:	83 eb 30             	sub    ebx,0x30
c001c3ec:	09 d8                	or     eax,ebx
c001c3ee:	0f b6 c0             	movzx  eax,al
c001c3f1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c3f5:	0f 85 84 fe ff ff    	jne    c001c27f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c3fb:	50                   	push   eax
c001c3fc:	50                   	push   eax
c001c3fd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c401:	50                   	push   eax
c001c402:	56                   	push   esi
c001c403:	e8 48 42 fe ff       	call   c0000650 <strcpy>
c001c408:	83 c4 10             	add    esp,0x10
c001c40b:	eb 05                	jmp    c001c412 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c40d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c410:	31 f6                	xor    esi,esi
c001c412:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c418:	89 f0                	mov    eax,esi
c001c41a:	5b                   	pop    ebx
c001c41b:	5e                   	pop    esi
c001c41c:	5f                   	pop    edi
c001c41d:	5d                   	pop    ebp
c001c41e:	c3                   	ret    
c001c41f:	90                   	nop

c001c420 <PCI::checkBus(unsigned char)>:
c001c420:	56                   	push   esi
c001c421:	53                   	push   ebx
c001c422:	31 db                	xor    ebx,ebx
c001c424:	51                   	push   ecx
c001c425:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c42a:	52                   	push   edx
c001c42b:	53                   	push   ebx
c001c42c:	43                   	inc    ebx
c001c42d:	56                   	push   esi
c001c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c432:	e8 6f 03 00 00       	call   c001c7a6 <PCI::checkDevice(unsigned char, unsigned char)>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	83 fb 20             	cmp    ebx,0x20
c001c43d:	75 eb                	jne    c001c42a <PCI::checkBus(unsigned char)+0xa>
c001c43f:	58                   	pop    eax
c001c440:	5b                   	pop    ebx
c001c441:	5e                   	pop    esi
c001c442:	c3                   	ret    
c001c443:	90                   	nop

c001c444 <PCI::foundDevice(PCIDeviceInfo)>:
c001c444:	55                   	push   ebp
c001c445:	57                   	push   edi
c001c446:	56                   	push   esi
c001c447:	53                   	push   ebx
c001c448:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c44e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c456:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c45d:	3d ff ff 00 00       	cmp    eax,0xffff
c001c462:	0f 84 b6 01 00 00    	je     c001c61e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c468:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c470:	66 81 fd 06 04       	cmp    bp,0x406
c001c475:	75 32                	jne    c001c4a9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c477:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c47f:	50                   	push   eax
c001c480:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c488:	50                   	push   eax
c001c489:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c491:	50                   	push   eax
c001c492:	53                   	push   ebx
c001c493:	e8 4c fb ff ff       	call   c001bfe4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c498:	59                   	pop    ecx
c001c499:	5e                   	pop    esi
c001c49a:	0f b6 c0             	movzx  eax,al
c001c49d:	50                   	push   eax
c001c49e:	53                   	push   ebx
c001c49f:	e8 7c ff ff ff       	call   c001c420 <PCI::checkBus(unsigned char)>
c001c4a4:	e9 15 01 00 00       	jmp    c001c5be <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c4a9:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c4b1:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c4b7:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c4be:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c4c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4c9:	85 c0                	test   eax,eax
c001c4cb:	74 34                	je     c001c501 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c4cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4d0:	85 d2                	test   edx,edx
c001c4d2:	74 29                	je     c001c4fd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c4d4:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4da:	31 cf                	xor    edi,ecx
c001c4dc:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4e2:	75 19                	jne    c001c4fd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c4e4:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c4ea:	75 11                	jne    c001c4fd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c4ec:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c4f3:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c4f7:	0f 84 21 01 00 00    	je     c001c61e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c4fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ff:	eb c8                	jmp    c001c4c9 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c501:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c505:	be 70 3f 02 c0       	mov    esi,0xc0023f70
c001c50a:	b9 07 00 00 00       	mov    ecx,0x7
c001c50f:	fc                   	cld    
c001c510:	31 d2                	xor    edx,edx
c001c512:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c514:	b9 12 00 00 00       	mov    ecx,0x12
c001c519:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c520:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c524:	83 ec 0c             	sub    esp,0xc
c001c527:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c529:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c531:	b9 0a 00 00 00       	mov    ecx,0xa
c001c536:	f7 f1                	div    ecx
c001c538:	83 c0 30             	add    eax,0x30
c001c53b:	83 c2 30             	add    edx,0x30
c001c53e:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c542:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c54a:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c54e:	31 d2                	xor    edx,edx
c001c550:	f7 f1                	div    ecx
c001c552:	83 c0 30             	add    eax,0x30
c001c555:	83 c2 30             	add    edx,0x30
c001c558:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c55c:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c560:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c564:	50                   	push   eax
c001c565:	e8 f1 ff fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001c56a:	83 c4 10             	add    esp,0x10
c001c56d:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c573:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c57a:	75 47                	jne    c001c5c3 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	68 64 01 00 00       	push   0x164
c001c584:	e8 27 23 ff ff       	call   c000e8b0 <malloc>
c001c589:	89 04 24             	mov    DWORD PTR [esp],eax
c001c58c:	89 c5                	mov    ebp,eax
c001c58e:	e8 35 11 00 00       	call   c001d6c8 <SATABus::SATABus()>
c001c593:	58                   	pop    eax
c001c594:	5a                   	pop    edx
c001c595:	55                   	push   ebp
c001c596:	53                   	push   ebx
c001c597:	e8 ca ca fe ff       	call   c0009066 <Device::addChild(Device*)>
c001c59c:	83 ec 1c             	sub    esp,0x1c
c001c59f:	b9 09 00 00 00       	mov    ecx,0x9
c001c5a4:	89 e7                	mov    edi,esp
c001c5a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5a8:	55                   	push   ebp
c001c5a9:	e8 fe c9 fe ff       	call   c0008fac <Device::preOpenPCI(PCIDeviceInfo)>
c001c5ae:	83 c4 30             	add    esp,0x30
c001c5b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5b4:	6a 00                	push   0x0
c001c5b6:	6a 00                	push   0x0
c001c5b8:	6a 00                	push   0x0
c001c5ba:	55                   	push   ebp
c001c5bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5be:	83 c4 10             	add    esp,0x10
c001c5c1:	eb 5b                	jmp    c001c61e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c5c3:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c5c9:	75 19                	jne    c001c5e4 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c5cb:	83 ec 0c             	sub    esp,0xc
c001c5ce:	68 70 02 00 00       	push   0x270
c001c5d3:	e8 d8 22 ff ff       	call   c000e8b0 <malloc>
c001c5d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5db:	89 c5                	mov    ebp,eax
c001c5dd:	e8 94 02 00 00       	call   c001c876 <IDE::IDE()>
c001c5e2:	eb af                	jmp    c001c593 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	68 58 01 00 00       	push   0x158
c001c5ec:	e8 bf 22 ff ff       	call   c000e8b0 <malloc>
c001c5f1:	89 c5                	mov    ebp,eax
c001c5f3:	58                   	pop    eax
c001c5f4:	5a                   	pop    edx
c001c5f5:	68 56 3f 02 c0       	push   0xc0023f56
c001c5fa:	55                   	push   ebp
c001c5fb:	e8 1a cd fe ff       	call   c000931a <DriverlessDevice::DriverlessDevice(char const*)>
c001c600:	59                   	pop    ecx
c001c601:	5f                   	pop    edi
c001c602:	55                   	push   ebp
c001c603:	53                   	push   ebx
c001c604:	e8 5d ca fe ff       	call   c0009066 <Device::addChild(Device*)>
c001c609:	83 ec 1c             	sub    esp,0x1c
c001c60c:	b9 09 00 00 00       	mov    ecx,0x9
c001c611:	89 e7                	mov    edi,esp
c001c613:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c615:	55                   	push   ebp
c001c616:	e8 91 c9 fe ff       	call   c0008fac <Device::preOpenPCI(PCIDeviceInfo)>
c001c61b:	83 c4 30             	add    esp,0x30
c001c61e:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c624:	5b                   	pop    ebx
c001c625:	5e                   	pop    esi
c001c626:	5f                   	pop    edi
c001c627:	5d                   	pop    ebp
c001c628:	c3                   	ret    
c001c629:	90                   	nop

c001c62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c62a:	55                   	push   ebp
c001c62b:	57                   	push   edi
c001c62c:	56                   	push   esi
c001c62d:	53                   	push   ebx
c001c62e:	83 ec 68             	sub    esp,0x68
c001c631:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c638:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c63c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c640:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c647:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c64c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c650:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c657:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c65c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c660:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c665:	6a 0c                	push   0xc
c001c667:	57                   	push   edi
c001c668:	53                   	push   ebx
c001c669:	56                   	push   esi
c001c66a:	55                   	push   ebp
c001c66b:	e8 c4 f7 ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c670:	83 c4 20             	add    esp,0x20
c001c673:	57                   	push   edi
c001c674:	53                   	push   ebx
c001c675:	56                   	push   esi
c001c676:	55                   	push   ebp
c001c677:	e8 ae f8 ff ff       	call   c001bf2a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c67c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c681:	57                   	push   edi
c001c682:	53                   	push   ebx
c001c683:	56                   	push   esi
c001c684:	55                   	push   ebp
c001c685:	e8 36 f9 ff ff       	call   c001bfc0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c68a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c68e:	83 c4 14             	add    esp,0x14
c001c691:	6a 3c                	push   0x3c
c001c693:	57                   	push   edi
c001c694:	53                   	push   ebx
c001c695:	56                   	push   esi
c001c696:	55                   	push   ebp
c001c697:	e8 98 f7 ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c69c:	0f b6 c4             	movzx  eax,ah
c001c69f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c6a3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c6a7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c6ab:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001c6b0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c6b6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c6bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c6c0:	83 c4 20             	add    esp,0x20
c001c6c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c6c8:	74 30                	je     c001c6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c6ca:	31 c0                	xor    eax,eax
c001c6cc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c6d0:	7e 28                	jle    c001c6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c6d2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c6da:	39 cb                	cmp    ebx,ecx
c001c6dc:	75 19                	jne    c001c6f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c6de:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c6e6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c6ea:	75 0b                	jne    c001c6f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c6ec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c6f3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c6f7:	40                   	inc    eax
c001c6f8:	eb d2                	jmp    c001c6cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c6fa:	31 d2                	xor    edx,edx
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	57                   	push   edi
c001c700:	53                   	push   ebx
c001c701:	56                   	push   esi
c001c702:	52                   	push   edx
c001c703:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c707:	55                   	push   ebp
c001c708:	e8 ff f8 ff ff       	call   c001c00c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c70d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c711:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c715:	42                   	inc    edx
c001c716:	83 c4 20             	add    esp,0x20
c001c719:	83 fa 06             	cmp    edx,0x6
c001c71c:	75 de                	jne    c001c6fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c71e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c722:	83 ec 0c             	sub    esp,0xc
c001c725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c729:	c1 e2 08             	shl    edx,0x8
c001c72c:	0f b6 c4             	movzx  eax,ah
c001c72f:	09 d0                	or     eax,edx
c001c731:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c736:	6a 02                	push   0x2
c001c738:	57                   	push   edi
c001c739:	53                   	push   ebx
c001c73a:	56                   	push   esi
c001c73b:	55                   	push   ebp
c001c73c:	e8 f3 f6 ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c741:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c746:	83 c4 20             	add    esp,0x20
c001c749:	57                   	push   edi
c001c74a:	53                   	push   ebx
c001c74b:	56                   	push   esi
c001c74c:	55                   	push   ebp
c001c74d:	e8 22 f8 ff ff       	call   c001bf74 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c752:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c756:	57                   	push   edi
c001c757:	53                   	push   ebx
c001c758:	56                   	push   esi
c001c759:	55                   	push   ebp
c001c75a:	e8 7f f7 ff ff       	call   c001bede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c75f:	b9 09 00 00 00       	mov    ecx,0x9
c001c764:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c769:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c76d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c771:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c775:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c779:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c77d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c781:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c785:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c789:	83 ec 0c             	sub    esp,0xc
c001c78c:	fc                   	cld    
c001c78d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c791:	89 e7                	mov    edi,esp
c001c793:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c795:	55                   	push   ebp
c001c796:	e8 a9 fc ff ff       	call   c001c444 <PCI::foundDevice(PCIDeviceInfo)>
c001c79b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c7a1:	5b                   	pop    ebx
c001c7a2:	5e                   	pop    esi
c001c7a3:	5f                   	pop    edi
c001c7a4:	5d                   	pop    ebp
c001c7a5:	c3                   	ret    

c001c7a6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7a6:	55                   	push   ebp
c001c7a7:	57                   	push   edi
c001c7a8:	56                   	push   esi
c001c7a9:	53                   	push   ebx
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7b2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7bb:	6a 00                	push   0x0
c001c7bd:	56                   	push   esi
c001c7be:	57                   	push   edi
c001c7bf:	55                   	push   ebp
c001c7c0:	e8 19 f7 ff ff       	call   c001bede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7c5:	6a 00                	push   0x0
c001c7c7:	56                   	push   esi
c001c7c8:	57                   	push   edi
c001c7c9:	55                   	push   ebp
c001c7ca:	e8 5b fe ff ff       	call   c001c62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7cf:	83 c4 20             	add    esp,0x20
c001c7d2:	6a 00                	push   0x0
c001c7d4:	56                   	push   esi
c001c7d5:	57                   	push   edi
c001c7d6:	55                   	push   ebp
c001c7d7:	e8 26 f7 ff ff       	call   c001bf02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7dc:	83 c4 10             	add    esp,0x10
c001c7df:	a8 80                	test   al,0x80
c001c7e1:	74 2d                	je     c001c810 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c7e3:	bb 01 00 00 00       	mov    ebx,0x1
c001c7e8:	53                   	push   ebx
c001c7e9:	56                   	push   esi
c001c7ea:	57                   	push   edi
c001c7eb:	55                   	push   ebp
c001c7ec:	e8 ed f6 ff ff       	call   c001bede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7f1:	83 c4 10             	add    esp,0x10
c001c7f4:	0f b7 c0             	movzx  eax,ax
c001c7f7:	3d ff ff 00 00       	cmp    eax,0xffff
c001c7fc:	74 0c                	je     c001c80a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7fe:	53                   	push   ebx
c001c7ff:	56                   	push   esi
c001c800:	57                   	push   edi
c001c801:	55                   	push   ebp
c001c802:	e8 23 fe ff ff       	call   c001c62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	43                   	inc    ebx
c001c80b:	83 fb 08             	cmp    ebx,0x8
c001c80e:	75 d8                	jne    c001c7e8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c810:	83 c4 0c             	add    esp,0xc
c001c813:	5b                   	pop    ebx
c001c814:	5e                   	pop    esi
c001c815:	5f                   	pop    edi
c001c816:	5d                   	pop    ebp
c001c817:	c3                   	ret    

c001c818 <PCI::detect()>:
c001c818:	56                   	push   esi
c001c819:	53                   	push   ebx
c001c81a:	53                   	push   ebx
c001c81b:	31 db                	xor    ebx,ebx
c001c81d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c821:	6a 00                	push   0x0
c001c823:	6a 00                	push   0x0
c001c825:	6a 00                	push   0x0
c001c827:	56                   	push   esi
c001c828:	e8 d5 f6 ff ff       	call   c001bf02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c82d:	83 c4 10             	add    esp,0x10
c001c830:	a8 80                	test   al,0x80
c001c832:	75 21                	jne    c001c855 <PCI::detect()+0x3d>
c001c834:	51                   	push   ecx
c001c835:	51                   	push   ecx
c001c836:	6a 00                	push   0x0
c001c838:	56                   	push   esi
c001c839:	e8 e2 fb ff ff       	call   c001c420 <PCI::checkBus(unsigned char)>
c001c83e:	83 c4 10             	add    esp,0x10
c001c841:	eb 2a                	jmp    c001c86d <PCI::detect()+0x55>
c001c843:	52                   	push   edx
c001c844:	52                   	push   edx
c001c845:	53                   	push   ebx
c001c846:	43                   	inc    ebx
c001c847:	56                   	push   esi
c001c848:	e8 d3 fb ff ff       	call   c001c420 <PCI::checkBus(unsigned char)>
c001c84d:	83 c4 10             	add    esp,0x10
c001c850:	83 fb 08             	cmp    ebx,0x8
c001c853:	74 18                	je     c001c86d <PCI::detect()+0x55>
c001c855:	53                   	push   ebx
c001c856:	6a 00                	push   0x0
c001c858:	6a 00                	push   0x0
c001c85a:	56                   	push   esi
c001c85b:	e8 7e f6 ff ff       	call   c001bede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c860:	83 c4 10             	add    esp,0x10
c001c863:	0f b7 c0             	movzx  eax,ax
c001c866:	3d ff ff 00 00       	cmp    eax,0xffff
c001c86b:	74 d6                	je     c001c843 <PCI::detect()+0x2b>
c001c86d:	58                   	pop    eax
c001c86e:	5b                   	pop    ebx
c001c86f:	5e                   	pop    esi
c001c870:	c3                   	ret    
c001c871:	90                   	nop

c001c872 <IDE::close(int, int, void*)>:
c001c872:	83 c8 ff             	or     eax,0xffffffff
c001c875:	c3                   	ret    

c001c876 <IDE::IDE()>:
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87d:	83 ec 08             	sub    esp,0x8
c001c880:	68 00 40 02 c0       	push   0xc0024000
c001c885:	50                   	push   eax
c001c886:	e8 35 cb fe ff       	call   c00093c0 <HardDiskController::HardDiskController(char const*)>
c001c88b:	83 c4 10             	add    esp,0x10
c001c88e:	ba 2c 41 02 c0       	mov    edx,0xc002412c
c001c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c897:	89 10                	mov    DWORD PTR [eax],edx
c001c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c8a4:	90                   	nop
c001c8a5:	83 c4 0c             	add    esp,0xc
c001c8a8:	c3                   	ret    
c001c8a9:	90                   	nop

c001c8aa <IDE::prepareInterrupt(unsigned char)>:
c001c8aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8bb:	c3                   	ret    

c001c8bc <selectDrive(unsigned char, unsigned char)>:
c001c8bc:	c3                   	ret    
c001c8bd:	90                   	nop

c001c8be <IDE::getBase(unsigned char)>:
c001c8be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8cf:	c3                   	ret    

c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8d0:	55                   	push   ebp
c001c8d1:	57                   	push   edi
c001c8d2:	56                   	push   esi
c001c8d3:	53                   	push   ebx
c001c8d4:	83 ec 1c             	sub    esp,0x1c
c001c8d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8e7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8ea:	80 f9 03             	cmp    cl,0x3
c001c8ed:	77 4f                	ja     c001c93e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c8ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8f3:	0f b6 f2             	movzx  esi,dl
c001c8f6:	0f b6 db             	movzx  ebx,bl
c001c8f9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8fc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c901:	80 ca 80             	or     dl,0x80
c001c904:	52                   	push   edx
c001c905:	6a 0c                	push   0xc
c001c907:	56                   	push   esi
c001c908:	57                   	push   edi
c001c909:	e8 c2 ff ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c90e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c917:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c91b:	ee                   	out    dx,al
c001c91c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c921:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c925:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c929:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c931:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c935:	83 c4 2c             	add    esp,0x2c
c001c938:	5b                   	pop    ebx
c001c939:	5e                   	pop    esi
c001c93a:	5f                   	pop    edi
c001c93b:	5d                   	pop    ebp
c001c93c:	eb 92                	jmp    c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c93e:	0f b6 cb             	movzx  ecx,bl
c001c941:	83 f9 07             	cmp    ecx,0x7
c001c944:	77 12                	ja     c001c958 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c946:	0f b6 d2             	movzx  edx,dl
c001c949:	0f b6 db             	movzx  ebx,bl
c001c94c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001c954:	01 da                	add    edx,ebx
c001c956:	eb 2f                	jmp    c001c987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c958:	83 f9 0d             	cmp    ecx,0xd
c001c95b:	77 13                	ja     c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c95d:	0f b6 d2             	movzx  edx,dl
c001c960:	0f b6 db             	movzx  ebx,bl
c001c963:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c96a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c96e:	eb 17                	jmp    c001c987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c970:	83 f9 15             	cmp    ecx,0x15
c001c973:	77 13                	ja     c001c988 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c975:	0f b6 d2             	movzx  edx,dl
c001c978:	0f b6 db             	movzx  ebx,bl
c001c97b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c983:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c987:	ee                   	out    dx,al
c001c988:	83 c4 1c             	add    esp,0x1c
c001c98b:	5b                   	pop    ebx
c001c98c:	5e                   	pop    esi
c001c98d:	5f                   	pop    edi
c001c98e:	5d                   	pop    ebp
c001c98f:	c3                   	ret    

c001c990 <IDE::read(unsigned char, unsigned char)>:
c001c990:	57                   	push   edi
c001c991:	56                   	push   esi
c001c992:	53                   	push   ebx
c001c993:	83 ec 10             	sub    esp,0x10
c001c996:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c99a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c99e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c9a2:	8d 42 f8             	lea    eax,[edx-0x8]
c001c9a5:	3c 03                	cmp    al,0x3
c001c9a7:	77 48                	ja     c001c9f1 <IDE::read(unsigned char, unsigned char)+0x61>
c001c9a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c9ad:	0f b6 f1             	movzx  esi,cl
c001c9b0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001c9b3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001c9b8:	0c 80                	or     al,0x80
c001c9ba:	50                   	push   eax
c001c9bb:	6a 0c                	push   0xc
c001c9bd:	56                   	push   esi
c001c9be:	53                   	push   ebx
c001c9bf:	e8 0c ff ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c9c8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001c9cd:	0f b6 d2             	movzx  edx,dl
c001c9d0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c9d4:	ec                   	in     al,dx
c001c9d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c9d9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001c9de:	52                   	push   edx
c001c9df:	6a 0c                	push   0xc
c001c9e1:	56                   	push   esi
c001c9e2:	53                   	push   ebx
c001c9e3:	e8 e8 fe ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9e8:	83 c4 20             	add    esp,0x20
c001c9eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c9ef:	eb 4c                	jmp    c001ca3d <IDE::read(unsigned char, unsigned char)+0xad>
c001c9f1:	0f b6 f2             	movzx  esi,dl
c001c9f4:	83 fe 07             	cmp    esi,0x7
c001c9f7:	77 12                	ja     c001ca0b <IDE::read(unsigned char, unsigned char)+0x7b>
c001c9f9:	0f b6 c9             	movzx  ecx,cl
c001c9fc:	0f b6 d2             	movzx  edx,dl
c001c9ff:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ca07:	01 c2                	add    edx,eax
c001ca09:	eb 31                	jmp    c001ca3c <IDE::read(unsigned char, unsigned char)+0xac>
c001ca0b:	83 fe 0d             	cmp    esi,0xd
c001ca0e:	77 13                	ja     c001ca23 <IDE::read(unsigned char, unsigned char)+0x93>
c001ca10:	0f b6 c9             	movzx  ecx,cl
c001ca13:	0f b6 d2             	movzx  edx,dl
c001ca16:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ca1d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca21:	eb 19                	jmp    c001ca3c <IDE::read(unsigned char, unsigned char)+0xac>
c001ca23:	31 c0                	xor    eax,eax
c001ca25:	83 fe 15             	cmp    esi,0x15
c001ca28:	77 13                	ja     c001ca3d <IDE::read(unsigned char, unsigned char)+0xad>
c001ca2a:	0f b6 c9             	movzx  ecx,cl
c001ca2d:	0f b6 d2             	movzx  edx,dl
c001ca30:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ca38:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca3c:	ec                   	in     al,dx
c001ca3d:	83 c4 10             	add    esp,0x10
c001ca40:	5b                   	pop    ebx
c001ca41:	5e                   	pop    esi
c001ca42:	5f                   	pop    edi
c001ca43:	c3                   	ret    

c001ca44 <IDE::waitInterrupt(unsigned char)>:
c001ca44:	55                   	push   ebp
c001ca45:	57                   	push   edi
c001ca46:	56                   	push   esi
c001ca47:	53                   	push   ebx
c001ca48:	31 db                	xor    ebx,ebx
c001ca4a:	83 ec 0c             	sub    esp,0xc
c001ca4d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca51:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ca56:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ca5e:	89 e8                	mov    eax,ebp
c001ca60:	84 c0                	test   al,al
c001ca62:	75 30                	jne    c001ca94 <IDE::waitInterrupt(unsigned char)+0x50>
c001ca64:	50                   	push   eax
c001ca65:	6a 0c                	push   0xc
c001ca67:	56                   	push   esi
c001ca68:	57                   	push   edi
c001ca69:	e8 22 ff ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001ca6e:	83 c4 10             	add    esp,0x10
c001ca71:	a8 01                	test   al,0x1
c001ca73:	75 27                	jne    c001ca9c <IDE::waitInterrupt(unsigned char)+0x58>
c001ca75:	f6 c3 04             	test   bl,0x4
c001ca78:	75 12                	jne    c001ca8c <IDE::waitInterrupt(unsigned char)+0x48>
c001ca7a:	83 fb 32             	cmp    ebx,0x32
c001ca7d:	7e 0d                	jle    c001ca8c <IDE::waitInterrupt(unsigned char)+0x48>
c001ca7f:	83 ec 0c             	sub    esp,0xc
c001ca82:	6a 64                	push   0x64
c001ca84:	e8 b7 8d ff ff       	call   c0015840 <milliTenthSleep(unsigned int)>
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	83 fb 3c             	cmp    ebx,0x3c
c001ca8f:	74 0b                	je     c001ca9c <IDE::waitInterrupt(unsigned char)+0x58>
c001ca91:	43                   	inc    ebx
c001ca92:	eb c2                	jmp    c001ca56 <IDE::waitInterrupt(unsigned char)+0x12>
c001ca94:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ca9c:	83 c4 0c             	add    esp,0xc
c001ca9f:	89 e8                	mov    eax,ebp
c001caa1:	5b                   	pop    ebx
c001caa2:	5e                   	pop    esi
c001caa3:	5f                   	pop    edi
c001caa4:	5d                   	pop    ebp
c001caa5:	c3                   	ret    

c001caa6 <ideChannel0IRQHandler(regs*, void*)>:
c001caa6:	83 ec 10             	sub    esp,0x10
c001caa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cab4:	6a 07                	push   0x7
c001cab6:	6a 00                	push   0x0
c001cab8:	50                   	push   eax
c001cab9:	e8 d2 fe ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cabe:	83 c4 1c             	add    esp,0x1c
c001cac1:	c3                   	ret    

c001cac2 <ideChannel1IRQHandler(regs*, void*)>:
c001cac2:	83 ec 10             	sub    esp,0x10
c001cac5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cac9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cad0:	6a 07                	push   0x7
c001cad2:	6a 01                	push   0x1
c001cad4:	50                   	push   eax
c001cad5:	e8 b6 fe ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cada:	83 c4 1c             	add    esp,0x1c
c001cadd:	c3                   	ret    

c001cade <IDE::enableIRQs(unsigned char, bool)>:
c001cade:	57                   	push   edi
c001cadf:	b8 02 00 00 00       	mov    eax,0x2
c001cae4:	56                   	push   esi
c001cae5:	53                   	push   ebx
c001cae6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001caeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001caef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001caf3:	74 02                	je     c001caf7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001caf5:	31 c0                	xor    eax,eax
c001caf7:	0f b6 db             	movzx  ebx,bl
c001cafa:	bf 04 00 00 00       	mov    edi,0x4
c001caff:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001cb06:	50                   	push   eax
c001cb07:	6a 0c                	push   0xc
c001cb09:	53                   	push   ebx
c001cb0a:	56                   	push   esi
c001cb0b:	e8 c0 fd ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	50                   	push   eax
c001cb14:	6a 0c                	push   0xc
c001cb16:	53                   	push   ebx
c001cb17:	56                   	push   esi
c001cb18:	e8 73 fe ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cb1d:	83 c4 10             	add    esp,0x10
c001cb20:	4f                   	dec    edi
c001cb21:	75 f0                	jne    c001cb13 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001cb23:	5b                   	pop    ebx
c001cb24:	5e                   	pop    esi
c001cb25:	5f                   	pop    edi
c001cb26:	c3                   	ret    
c001cb27:	90                   	nop

c001cb28 <IDE::open(int, int, void*)>:
c001cb28:	55                   	push   ebp
c001cb29:	57                   	push   edi
c001cb2a:	56                   	push   esi
c001cb2b:	53                   	push   ebx
c001cb2c:	83 ec 1c             	sub    esp,0x1c
c001cb2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb33:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb3a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb43:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb4c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb53:	0f 85 80 02 00 00    	jne    c001cdd9 <IDE::open(int, int, void*)+0x2b1>
c001cb59:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb5f:	a8 70                	test   al,0x70
c001cb61:	75 44                	jne    c001cba7 <IDE::open(int, int, void*)+0x7f>
c001cb63:	ba 20 84 00 00       	mov    edx,0x8420
c001cb68:	0f a3 c2             	bt     edx,eax
c001cb6b:	73 3a                	jae    c001cba7 <IDE::open(int, int, void*)+0x7f>
c001cb6d:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb73:	83 ec 0c             	sub    esp,0xc
c001cb76:	83 e0 fc             	and    eax,0xfffffffc
c001cb79:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb80:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb86:	83 e0 fc             	and    eax,0xfffffffc
c001cb89:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb90:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb96:	83 e0 fc             	and    eax,0xfffffffc
c001cb99:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cba0:	68 85 18 02 c0       	push   0xc0021885
c001cba5:	eb 60                	jmp    c001cc07 <IDE::open(int, int, void*)+0xdf>
c001cba7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cbb1:	be 64 00 00 00       	mov    esi,0x64
c001cbb6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbc0:	57                   	push   edi
c001cbc1:	57                   	push   edi
c001cbc2:	68 18 40 02 c0       	push   0xc0024018
c001cbc7:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001cbcb:	57                   	push   edi
c001cbcc:	e8 7f 3a fe ff       	call   c0000650 <strcpy>
c001cbd1:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001cbd8:	31 d2                	xor    edx,edx
c001cbda:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbdd:	89 c8                	mov    eax,ecx
c001cbdf:	f7 f6                	div    esi
c001cbe1:	be 0a 00 00 00       	mov    esi,0xa
c001cbe6:	31 d2                	xor    edx,edx
c001cbe8:	83 c0 30             	add    eax,0x30
c001cbeb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cbef:	89 c8                	mov    eax,ecx
c001cbf1:	f7 f6                	div    esi
c001cbf3:	89 d1                	mov    ecx,edx
c001cbf5:	31 d2                	xor    edx,edx
c001cbf7:	f7 f6                	div    esi
c001cbf9:	83 c1 30             	add    ecx,0x30
c001cbfc:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001cc00:	83 c2 30             	add    edx,0x30
c001cc03:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001cc07:	e8 4f f9 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001cc0c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc13:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc18:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	89 fa                	mov    edx,edi
c001cc24:	c1 e1 10             	shl    ecx,0x10
c001cc27:	c1 e0 0b             	shl    eax,0xb
c001cc2a:	09 c1                	or     ecx,eax
c001cc2c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc33:	c1 e0 08             	shl    eax,0x8
c001cc36:	09 c1                	or     ecx,eax
c001cc38:	89 c8                	mov    eax,ecx
c001cc3a:	0d 08 00 00 80       	or     eax,0x80000008
c001cc3f:	ef                   	out    dx,eax
c001cc40:	be fc 0c 00 00       	mov    esi,0xcfc
c001cc45:	89 f2                	mov    edx,esi
c001cc47:	ed                   	in     eax,dx
c001cc48:	c1 e8 10             	shr    eax,0x10
c001cc4b:	3d ff ff 00 00       	cmp    eax,0xffff
c001cc50:	0f 84 e1 00 00 00    	je     c001cd37 <IDE::open(int, int, void*)+0x20f>
c001cc56:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc5c:	89 fa                	mov    edx,edi
c001cc5e:	89 c8                	mov    eax,ecx
c001cc60:	ef                   	out    dx,eax
c001cc61:	b0 fe                	mov    al,0xfe
c001cc63:	89 f2                	mov    edx,esi
c001cc65:	ee                   	out    dx,al
c001cc66:	89 c8                	mov    eax,ecx
c001cc68:	89 fa                	mov    edx,edi
c001cc6a:	ef                   	out    dx,eax
c001cc6b:	89 f2                	mov    edx,esi
c001cc6d:	ed                   	in     eax,dx
c001cc6e:	3c fe                	cmp    al,0xfe
c001cc70:	0f 85 83 00 00 00    	jne    c001ccf9 <IDE::open(int, int, void*)+0x1d1>
c001cc76:	83 ec 0c             	sub    esp,0xc
c001cc79:	68 bb 18 02 c0       	push   0xc00218bb
c001cc7e:	e8 d8 f8 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001cc83:	c7 04 24 1e 40 02 c0 	mov    DWORD PTR [esp],0xc002401e
c001cc8a:	e8 bf a2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cc8f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc99:	c7 04 24 ec 1a 02 c0 	mov    DWORD PTR [esp],0xc0021aec
c001cca0:	e8 b6 f8 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001cca5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ccac:	89 fa                	mov    edx,edi
c001ccae:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ccb5:	c1 e1 10             	shl    ecx,0x10
c001ccb8:	c1 e0 08             	shl    eax,0x8
c001ccbb:	09 c1                	or     ecx,eax
c001ccbd:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ccc4:	c1 e0 0b             	shl    eax,0xb
c001ccc7:	09 c1                	or     ecx,eax
c001ccc9:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cccf:	89 c8                	mov    eax,ecx
c001ccd1:	ef                   	out    dx,eax
c001ccd2:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001ccd8:	89 f2                	mov    edx,esi
c001ccda:	89 e8                	mov    eax,ebp
c001ccdc:	ee                   	out    dx,al
c001ccdd:	89 c8                	mov    eax,ecx
c001ccdf:	89 fa                	mov    edx,edi
c001cce1:	ef                   	out    dx,eax
c001cce2:	89 f2                	mov    edx,esi
c001cce4:	ed                   	in     eax,dx
c001cce5:	0f b6 c0             	movzx  eax,al
c001cce8:	83 c4 10             	add    esp,0x10
c001cceb:	39 e8                	cmp    eax,ebp
c001cced:	74 58                	je     c001cd47 <IDE::open(int, int, void*)+0x21f>
c001ccef:	83 ec 0c             	sub    esp,0xc
c001ccf2:	68 33 40 02 c0       	push   0xc0024033
c001ccf7:	eb 46                	jmp    c001cd3f <IDE::open(int, int, void*)+0x217>
c001ccf9:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cd02:	75 29                	jne    c001cd2d <IDE::open(int, int, void*)+0x205>
c001cd04:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001cd0b:	3d 8a 00 00 00       	cmp    eax,0x8a
c001cd10:	74 05                	je     c001cd17 <IDE::open(int, int, void*)+0x1ef>
c001cd12:	83 c0 80             	add    eax,0xffffff80
c001cd15:	75 16                	jne    c001cd2d <IDE::open(int, int, void*)+0x205>
c001cd17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cd1e:	83 ec 0c             	sub    esp,0xc
c001cd21:	68 01 2a 02 c0       	push   0xc0022a01
c001cd26:	e8 30 f8 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001cd2b:	eb 17                	jmp    c001cd44 <IDE::open(int, int, void*)+0x21c>
c001cd2d:	83 ec 0c             	sub    esp,0xc
c001cd30:	68 3b 40 02 c0       	push   0xc002403b
c001cd35:	eb 08                	jmp    c001cd3f <IDE::open(int, int, void*)+0x217>
c001cd37:	83 ec 0c             	sub    esp,0xc
c001cd3a:	68 6c 40 02 c0       	push   0xc002406c
c001cd3f:	e8 b2 1e ff ff       	call   c000ebf6 <KePanic(char const*)>
c001cd44:	83 c4 10             	add    esp,0x10
c001cd47:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001cd4e:	0f 84 bf 00 00 00    	je     c001ce13 <IDE::open(int, int, void*)+0x2eb>
c001cd54:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	83 e0 fc             	and    eax,0xfffffffc
c001cd60:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd67:	83 c0 08             	add    eax,0x8
c001cd6a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd71:	68 96 40 02 c0       	push   0xc0024096
c001cd76:	e8 d3 a1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cd7b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001cd82:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cd89:	50                   	push   eax
c001cd8a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cd91:	50                   	push   eax
c001cd92:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cd99:	50                   	push   eax
c001cd9a:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001cda0:	e8 8f f0 ff ff       	call   c001be34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cda5:	83 c4 18             	add    esp,0x18
c001cda8:	83 c8 07             	or     eax,0x7
c001cdab:	0f b7 c0             	movzx  eax,ax
c001cdae:	50                   	push   eax
c001cdaf:	6a 04                	push   0x4
c001cdb1:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cdb8:	50                   	push   eax
c001cdb9:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cdc0:	50                   	push   eax
c001cdc1:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cdc8:	50                   	push   eax
c001cdc9:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001cdcf:	e8 9c f2 ff ff       	call   c001c070 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001cdd4:	83 c4 20             	add    esp,0x20
c001cdd7:	eb 3a                	jmp    c001ce13 <IDE::open(int, int, void*)+0x2eb>
c001cdd9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cde0:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001cde6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cded:	05 06 02 00 00       	add    eax,0x206
c001cdf2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cdf9:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ce00:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ce07:	05 06 02 00 00       	add    eax,0x206
c001ce0c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ce13:	83 ec 0c             	sub    esp,0xc
c001ce16:	68 23 20 02 c0       	push   0xc0022023
c001ce1b:	e8 3b f7 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001ce20:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ce26:	83 c4 10             	add    esp,0x10
c001ce29:	89 c2                	mov    edx,eax
c001ce2b:	83 e2 0f             	and    edx,0xf
c001ce2e:	83 fa 08             	cmp    edx,0x8
c001ce31:	75 0a                	jne    c001ce3d <IDE::open(int, int, void*)+0x315>
c001ce33:	83 e8 02             	sub    eax,0x2
c001ce36:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ce3d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ce43:	89 c2                	mov    edx,eax
c001ce45:	83 e2 0f             	and    edx,0xf
c001ce48:	83 fa 08             	cmp    edx,0x8
c001ce4b:	75 0a                	jne    c001ce57 <IDE::open(int, int, void*)+0x32f>
c001ce4d:	83 e8 02             	sub    eax,0x2
c001ce50:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ce57:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ce5e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ce65:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ce68:	89 d0                	mov    eax,edx
c001ce6a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ce6e:	8d 7a 01             	lea    edi,[edx+0x1]
c001ce71:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ce75:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ce79:	83 e1 3f             	and    ecx,0x3f
c001ce7c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ce80:	89 f9                	mov    ecx,edi
c001ce82:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ce89:	8d 78 02             	lea    edi,[eax+0x2]
c001ce8c:	0f b6 c9             	movzx  ecx,cl
c001ce8f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ce92:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ce96:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ce9a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ce9e:	83 e2 3f             	and    edx,0x3f
c001cea1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cea5:	89 f9                	mov    ecx,edi
c001cea7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cead:	8d 78 03             	lea    edi,[eax+0x3]
c001ceb0:	0f b6 d1             	movzx  edx,cl
c001ceb3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ceb6:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ceba:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cebe:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cec2:	83 e1 3f             	and    ecx,0x3f
c001cec5:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cec9:	89 fa                	mov    edx,edi
c001cecb:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ced1:	8d 78 04             	lea    edi,[eax+0x4]
c001ced4:	0f b6 ca             	movzx  ecx,dl
c001ced7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ceda:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cede:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cee2:	89 fa                	mov    edx,edi
c001cee4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ceea:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ceee:	83 e2 3f             	and    edx,0x3f
c001cef1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cef5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cefc:	66 85 f6             	test   si,si
c001ceff:	74 24                	je     c001cf25 <IDE::open(int, int, void*)+0x3fd>
c001cf01:	89 f9                	mov    ecx,edi
c001cf03:	83 c0 05             	add    eax,0x5
c001cf06:	0f b6 d1             	movzx  edx,cl
c001cf09:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cf0c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cf10:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cf14:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cf1a:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cf1e:	83 e0 3f             	and    eax,0x3f
c001cf21:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cf25:	83 ec 0c             	sub    esp,0xc
c001cf28:	68 ae 40 02 c0       	push   0xc00240ae
c001cf2d:	e8 29 f6 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001cf32:	58                   	pop    eax
c001cf33:	5a                   	pop    edx
c001cf34:	6a 00                	push   0x0
c001cf36:	53                   	push   ebx
c001cf37:	e8 6e f9 ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001cf3c:	59                   	pop    ecx
c001cf3d:	5e                   	pop    esi
c001cf3e:	6a 01                	push   0x1
c001cf40:	53                   	push   ebx
c001cf41:	e8 64 f9 ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001cf46:	c7 04 24 fd 38 02 c0 	mov    DWORD PTR [esp],0xc00238fd
c001cf4d:	e8 09 f6 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001cf52:	83 c4 0c             	add    esp,0xc
c001cf55:	6a 00                	push   0x0
c001cf57:	6a 00                	push   0x0
c001cf59:	53                   	push   ebx
c001cf5a:	e8 7f fb ff ff       	call   c001cade <IDE::enableIRQs(unsigned char, bool)>
c001cf5f:	83 c4 0c             	add    esp,0xc
c001cf62:	6a 00                	push   0x0
c001cf64:	6a 01                	push   0x1
c001cf66:	53                   	push   ebx
c001cf67:	e8 72 fb ff ff       	call   c001cade <IDE::enableIRQs(unsigned char, bool)>
c001cf6c:	c7 04 24 b0 40 02 c0 	mov    DWORD PTR [esp],0xc00240b0
c001cf73:	e8 e3 f5 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001cf78:	83 c4 10             	add    esp,0x10
c001cf7b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cf82:	74 3c                	je     c001cfc0 <IDE::open(int, int, void*)+0x498>
c001cf84:	83 ec 0c             	sub    esp,0xc
c001cf87:	53                   	push   ebx
c001cf88:	6a 01                	push   0x1
c001cf8a:	68 a6 ca 01 c0       	push   0xc001caa6
c001cf8f:	6a 0e                	push   0xe
c001cf91:	53                   	push   ebx
c001cf92:	e8 7b c0 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cf97:	83 c4 14             	add    esp,0x14
c001cf9a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cfa0:	53                   	push   ebx
c001cfa1:	6a 01                	push   0x1
c001cfa3:	68 c2 ca 01 c0       	push   0xc001cac2
c001cfa8:	6a 0f                	push   0xf
c001cfaa:	53                   	push   ebx
c001cfab:	e8 62 c0 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cfb0:	83 c4 14             	add    esp,0x14
c001cfb3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cfb9:	68 f2 1c 02 c0       	push   0xc0021cf2
c001cfbe:	eb 40                	jmp    c001d000 <IDE::open(int, int, void*)+0x4d8>
c001cfc0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cfca:	83 ec 0c             	sub    esp,0xc
c001cfcd:	53                   	push   ebx
c001cfce:	6a 00                	push   0x0
c001cfd0:	68 a6 ca 01 c0       	push   0xc001caa6
c001cfd5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cfdb:	53                   	push   ebx
c001cfdc:	e8 31 c0 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cfe1:	83 c4 14             	add    esp,0x14
c001cfe4:	53                   	push   ebx
c001cfe5:	6a 00                	push   0x0
c001cfe7:	68 c2 ca 01 c0       	push   0xc001cac2
c001cfec:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cff2:	53                   	push   ebx
c001cff3:	e8 1a c0 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cff8:	83 c4 14             	add    esp,0x14
c001cffb:	68 f0 29 02 c0       	push   0xc00229f0
c001d000:	e8 56 f5 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d005:	83 c4 10             	add    esp,0x10
c001d008:	83 ec 0c             	sub    esp,0xc
c001d00b:	68 b2 40 02 c0       	push   0xc00240b2
c001d010:	e8 46 f5 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d015:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d017:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d01a:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001d01d:	c7 04 24 a9 30 02 c0 	mov    DWORD PTR [esp],0xc00230a9
c001d024:	e8 32 f5 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d029:	83 c4 0c             	add    esp,0xc
c001d02c:	6a 07                	push   0x7
c001d02e:	6a 00                	push   0x0
c001d030:	53                   	push   ebx
c001d031:	e8 5a f9 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d036:	83 c4 0c             	add    esp,0xc
c001d039:	6a 07                	push   0x7
c001d03b:	6a 01                	push   0x1
c001d03d:	53                   	push   ebx
c001d03e:	e8 4d f9 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d043:	c7 04 24 58 27 02 c0 	mov    DWORD PTR [esp],0xc0022758
c001d04a:	e8 0c f5 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d04f:	83 c4 0c             	add    esp,0xc
c001d052:	6a 01                	push   0x1
c001d054:	6a 00                	push   0x0
c001d056:	53                   	push   ebx
c001d057:	e8 82 fa ff ff       	call   c001cade <IDE::enableIRQs(unsigned char, bool)>
c001d05c:	83 c4 0c             	add    esp,0xc
c001d05f:	6a 01                	push   0x1
c001d061:	6a 01                	push   0x1
c001d063:	53                   	push   ebx
c001d064:	e8 75 fa ff ff       	call   c001cade <IDE::enableIRQs(unsigned char, bool)>
c001d069:	c7 04 24 b5 40 02 c0 	mov    DWORD PTR [esp],0xc00240b5
c001d070:	e8 e6 f4 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d075:	83 c4 2c             	add    esp,0x2c
c001d078:	31 c0                	xor    eax,eax
c001d07a:	5b                   	pop    ebx
c001d07b:	5e                   	pop    esi
c001d07c:	5f                   	pop    edi
c001d07d:	5d                   	pop    ebp
c001d07e:	c3                   	ret    
c001d07f:	90                   	nop

c001d080 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001d080:	55                   	push   ebp
c001d081:	57                   	push   edi
c001d082:	56                   	push   esi
c001d083:	53                   	push   ebx
c001d084:	83 ec 1c             	sub    esp,0x1c
c001d087:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d08b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d08f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d093:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d097:	8d 42 f8             	lea    eax,[edx-0x8]
c001d09a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d09e:	3c 03                	cmp    al,0x3
c001d0a0:	77 5a                	ja     c001d0fc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001d0a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d0a6:	0f b6 db             	movzx  ebx,bl
c001d0a9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d0ad:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001d0b0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d0b5:	0c 80                	or     al,0x80
c001d0b7:	50                   	push   eax
c001d0b8:	6a 0c                	push   0xc
c001d0ba:	53                   	push   ebx
c001d0bb:	56                   	push   esi
c001d0bc:	e8 0f f8 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d0c5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d0ca:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d0ce:	0f b6 d2             	movzx  edx,dl
c001d0d1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d0d5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d0d7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d0dc:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001d0e0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d0e4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d0ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d0f0:	83 c4 2c             	add    esp,0x2c
c001d0f3:	5b                   	pop    ebx
c001d0f4:	5e                   	pop    esi
c001d0f5:	5f                   	pop    edi
c001d0f6:	5d                   	pop    ebp
c001d0f7:	e9 d4 f7 ff ff       	jmp    c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0fc:	0f b6 c2             	movzx  eax,dl
c001d0ff:	83 f8 07             	cmp    eax,0x7
c001d102:	77 12                	ja     c001d116 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001d104:	0f b6 db             	movzx  ebx,bl
c001d107:	0f b6 c2             	movzx  eax,dl
c001d10a:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001d112:	01 c2                	add    edx,eax
c001d114:	eb 2f                	jmp    c001d145 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d116:	83 f8 0d             	cmp    eax,0xd
c001d119:	77 13                	ja     c001d12e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001d11b:	0f b6 db             	movzx  ebx,bl
c001d11e:	0f b6 d2             	movzx  edx,dl
c001d121:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001d128:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d12c:	eb 17                	jmp    c001d145 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d12e:	83 f8 15             	cmp    eax,0x15
c001d131:	77 14                	ja     c001d147 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001d133:	0f b6 db             	movzx  ebx,bl
c001d136:	0f b6 d2             	movzx  edx,dl
c001d139:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001d141:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d145:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d147:	83 c4 1c             	add    esp,0x1c
c001d14a:	5b                   	pop    ebx
c001d14b:	5e                   	pop    esi
c001d14c:	5f                   	pop    edi
c001d14d:	5d                   	pop    ebp
c001d14e:	c3                   	ret    
c001d14f:	90                   	nop

c001d150 <IDE::detect()>:
c001d150:	55                   	push   ebp
c001d151:	57                   	push   edi
c001d152:	56                   	push   esi
c001d153:	53                   	push   ebx
c001d154:	81 ec 28 02 00 00    	sub    esp,0x228
c001d15a:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001d161:	68 b7 40 02 c0       	push   0xc00240b7
c001d166:	e8 f0 f3 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d16b:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001d171:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001d175:	83 c4 10             	add    esp,0x10
c001d178:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001d17d:	0f 85 26 04 00 00    	jne    c001d5a9 <IDE::detect()+0x459>
c001d183:	83 ec 0c             	sub    esp,0xc
c001d186:	31 f6                	xor    esi,esi
c001d188:	68 ba 40 02 c0       	push   0xc00240ba
c001d18d:	31 ff                	xor    edi,edi
c001d18f:	e8 c7 f3 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d194:	83 c4 10             	add    esp,0x10
c001d197:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d19e:	83 ec 0c             	sub    esp,0xc
c001d1a1:	68 bd 40 02 c0       	push   0xc00240bd
c001d1a6:	e8 b0 f3 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d1ab:	83 c4 10             	add    esp,0x10
c001d1ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d1b5:	83 ec 0c             	sub    esp,0xc
c001d1b8:	31 ed                	xor    ebp,ebp
c001d1ba:	68 c0 40 02 c0       	push   0xc00240c0
c001d1bf:	e8 97 f3 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d1c4:	89 f8                	mov    eax,edi
c001d1c6:	c1 e0 06             	shl    eax,0x6
c001d1c9:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d1d1:	c7 04 24 c3 40 02 c0 	mov    DWORD PTR [esp],0xc00240c3
c001d1d8:	e8 7e f3 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d1dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d1e1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e9:	c1 e0 04             	shl    eax,0x4
c001d1ec:	83 c8 a0             	or     eax,0xffffffa0
c001d1ef:	0f b6 c0             	movzx  eax,al
c001d1f2:	50                   	push   eax
c001d1f3:	6a 06                	push   0x6
c001d1f5:	56                   	push   esi
c001d1f6:	53                   	push   ebx
c001d1f7:	e8 d4 f6 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1fc:	83 c4 1c             	add    esp,0x1c
c001d1ff:	6a 0c                	push   0xc
c001d201:	56                   	push   esi
c001d202:	53                   	push   ebx
c001d203:	e8 88 f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d208:	83 c4 0c             	add    esp,0xc
c001d20b:	6a 0c                	push   0xc
c001d20d:	56                   	push   esi
c001d20e:	53                   	push   ebx
c001d20f:	e8 7c f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d214:	83 c4 0c             	add    esp,0xc
c001d217:	6a 0c                	push   0xc
c001d219:	56                   	push   esi
c001d21a:	53                   	push   ebx
c001d21b:	e8 70 f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d220:	83 c4 0c             	add    esp,0xc
c001d223:	6a 0c                	push   0xc
c001d225:	56                   	push   esi
c001d226:	53                   	push   ebx
c001d227:	e8 64 f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d22c:	c7 04 24 c6 40 02 c0 	mov    DWORD PTR [esp],0xc00240c6
c001d233:	e8 23 f3 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d238:	68 ec 00 00 00       	push   0xec
c001d23d:	6a 07                	push   0x7
c001d23f:	56                   	push   esi
c001d240:	53                   	push   ebx
c001d241:	e8 8a f6 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d246:	83 c4 1c             	add    esp,0x1c
c001d249:	6a 0c                	push   0xc
c001d24b:	56                   	push   esi
c001d24c:	53                   	push   ebx
c001d24d:	e8 3e f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d252:	83 c4 0c             	add    esp,0xc
c001d255:	6a 0c                	push   0xc
c001d257:	56                   	push   esi
c001d258:	53                   	push   ebx
c001d259:	e8 32 f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d25e:	83 c4 0c             	add    esp,0xc
c001d261:	6a 0c                	push   0xc
c001d263:	56                   	push   esi
c001d264:	53                   	push   ebx
c001d265:	e8 26 f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d26a:	83 c4 0c             	add    esp,0xc
c001d26d:	6a 0c                	push   0xc
c001d26f:	56                   	push   esi
c001d270:	53                   	push   ebx
c001d271:	e8 1a f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d276:	c7 04 24 c9 40 02 c0 	mov    DWORD PTR [esp],0xc00240c9
c001d27d:	e8 d9 f2 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d282:	83 c4 0c             	add    esp,0xc
c001d285:	6a 0c                	push   0xc
c001d287:	56                   	push   esi
c001d288:	53                   	push   ebx
c001d289:	e8 02 f7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d28e:	83 c4 10             	add    esp,0x10
c001d291:	84 c0                	test   al,al
c001d293:	75 1f                	jne    c001d2b4 <IDE::detect()+0x164>
c001d295:	83 ec 0c             	sub    esp,0xc
c001d298:	68 cc 40 02 c0       	push   0xc00240cc
c001d29d:	e8 b9 f2 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d2a2:	e9 e0 02 00 00       	jmp    c001d587 <IDE::detect()+0x437>
c001d2a7:	a8 80                	test   al,0x80
c001d2a9:	74 21                	je     c001d2cc <IDE::detect()+0x17c>
c001d2ab:	45                   	inc    ebp
c001d2ac:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001d2b2:	7f 1e                	jg     c001d2d2 <IDE::detect()+0x182>
c001d2b4:	50                   	push   eax
c001d2b5:	6a 0c                	push   0xc
c001d2b7:	56                   	push   esi
c001d2b8:	53                   	push   ebx
c001d2b9:	e8 d2 f6 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d2be:	83 c4 10             	add    esp,0x10
c001d2c1:	a8 01                	test   al,0x1
c001d2c3:	74 e2                	je     c001d2a7 <IDE::detect()+0x157>
c001d2c5:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001d2ca:	eb 22                	jmp    c001d2ee <IDE::detect()+0x19e>
c001d2cc:	a8 08                	test   al,0x8
c001d2ce:	74 db                	je     c001d2ab <IDE::detect()+0x15b>
c001d2d0:	eb 17                	jmp    c001d2e9 <IDE::detect()+0x199>
c001d2d2:	83 ec 0c             	sub    esp,0xc
c001d2d5:	6a 32                	push   0x32
c001d2d7:	e8 64 85 ff ff       	call   c0015840 <milliTenthSleep(unsigned int)>
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001d2e5:	75 cd                	jne    c001d2b4 <IDE::detect()+0x164>
c001d2e7:	eb dc                	jmp    c001d2c5 <IDE::detect()+0x175>
c001d2e9:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001d2ee:	83 ec 0c             	sub    esp,0xc
c001d2f1:	68 cf 40 02 c0       	push   0xc00240cf
c001d2f6:	e8 60 f2 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d2fb:	83 c4 10             	add    esp,0x10
c001d2fe:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d303:	74 57                	je     c001d35c <IDE::detect()+0x20c>
c001d305:	50                   	push   eax
c001d306:	6a 04                	push   0x4
c001d308:	56                   	push   esi
c001d309:	53                   	push   ebx
c001d30a:	e8 81 f6 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d30f:	83 c4 0c             	add    esp,0xc
c001d312:	6a 05                	push   0x5
c001d314:	56                   	push   esi
c001d315:	53                   	push   ebx
c001d316:	89 c5                	mov    ebp,eax
c001d318:	e8 73 f6 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d31d:	89 e9                	mov    ecx,ebp
c001d31f:	83 c4 10             	add    esp,0x10
c001d322:	0f b6 e9             	movzx  ebp,cl
c001d325:	83 fd 14             	cmp    ebp,0x14
c001d328:	75 04                	jne    c001d32e <IDE::detect()+0x1de>
c001d32a:	3c eb                	cmp    al,0xeb
c001d32c:	74 11                	je     c001d33f <IDE::detect()+0x1ef>
c001d32e:	83 fd 69             	cmp    ebp,0x69
c001d331:	0f 85 53 02 00 00    	jne    c001d58a <IDE::detect()+0x43a>
c001d337:	3c 96                	cmp    al,0x96
c001d339:	0f 85 4b 02 00 00    	jne    c001d58a <IDE::detect()+0x43a>
c001d33f:	68 a1 00 00 00       	push   0xa1
c001d344:	6a 07                	push   0x7
c001d346:	56                   	push   esi
c001d347:	53                   	push   ebx
c001d348:	e8 83 f5 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d34d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d354:	e8 e7 84 ff ff       	call   c0015840 <milliTenthSleep(unsigned int)>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	83 ec 0c             	sub    esp,0xc
c001d35f:	89 fd                	mov    ebp,edi
c001d361:	68 d2 40 02 c0       	push   0xc00240d2
c001d366:	e8 f0 f1 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d36b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d36f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d376:	c1 e5 06             	shl    ebp,0x6
c001d379:	52                   	push   edx
c001d37a:	01 dd                	add    ebp,ebx
c001d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d380:	6a 00                	push   0x0
c001d382:	56                   	push   esi
c001d383:	53                   	push   ebx
c001d384:	e8 f7 fc ff ff       	call   c001d080 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d389:	83 c4 14             	add    esp,0x14
c001d38c:	68 d6 40 02 c0       	push   0xc00240d6
c001d391:	e8 c5 f1 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d396:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d39b:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d3a2:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d3a9:	89 f0                	mov    eax,esi
c001d3ab:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d3b1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d3b5:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d3bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3bf:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d3c6:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d3ce:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d3d5:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d3dd:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d3e3:	c7 04 24 da 40 02 c0 	mov    DWORD PTR [esp],0xc00240da
c001d3ea:	e8 6c f1 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d3ef:	83 c4 10             	add    esp,0x10
c001d3f2:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d3f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3fd:	74 09                	je     c001d408 <IDE::detect()+0x2b8>
c001d3ff:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d406:	eb 07                	jmp    c001d40f <IDE::detect()+0x2bf>
c001d408:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d40f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d413:	89 f8                	mov    eax,edi
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	c1 e0 06             	shl    eax,0x6
c001d41b:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d41e:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d424:	68 de 40 02 c0       	push   0xc00240de
c001d429:	e8 2d f1 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d42e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d432:	89 e8                	mov    eax,ebp
c001d434:	83 c4 10             	add    esp,0x10
c001d437:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d43a:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d43d:	83 c2 02             	add    edx,0x2
c001d440:	83 c0 02             	add    eax,0x2
c001d443:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d449:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d44c:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d452:	39 d5                	cmp    ebp,edx
c001d454:	75 e4                	jne    c001d43a <IDE::detect()+0x2ea>
c001d456:	89 f8                	mov    eax,edi
c001d458:	c1 e0 06             	shl    eax,0x6
c001d45b:	01 d8                	add    eax,ebx
c001d45d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d464:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d46b:	c1 ea 09             	shr    edx,0x9
c001d46e:	83 e2 01             	and    edx,0x1
c001d471:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d478:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d47e:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d482:	74 0c                	je     c001d490 <IDE::detect()+0x340>
c001d484:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d48d:	0f 95 c2             	setne  dl
c001d490:	89 fd                	mov    ebp,edi
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	c1 e5 06             	shl    ebp,0x6
c001d498:	01 dd                	add    ebp,ebx
c001d49a:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d4a0:	68 e2 40 02 c0       	push   0xc00240e2
c001d4a5:	e8 b1 f0 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d4aa:	83 c4 10             	add    esp,0x10
c001d4ad:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d4b2:	75 66                	jne    c001d51a <IDE::detect()+0x3ca>
c001d4b4:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d4bb:	0f 84 b8 00 00 00    	je     c001d579 <IDE::detect()+0x429>
c001d4c1:	83 ec 0c             	sub    esp,0xc
c001d4c4:	68 e6 40 02 c0       	push   0xc00240e6
c001d4c9:	e8 8d f0 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d4ce:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d4d5:	e8 d6 13 ff ff       	call   c000e8b0 <malloc>
c001d4da:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4dd:	89 c5                	mov    ebp,eax
c001d4df:	e8 44 05 00 00       	call   c001da28 <ATA::ATA()>
c001d4e4:	c7 04 24 ea 40 02 c0 	mov    DWORD PTR [esp],0xc00240ea
c001d4eb:	e8 6b f0 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d4f0:	59                   	pop    ecx
c001d4f1:	58                   	pop    eax
c001d4f2:	55                   	push   ebp
c001d4f3:	53                   	push   ebx
c001d4f4:	e8 6d bb fe ff       	call   c0009066 <Device::addChild(Device*)>
c001d4f9:	c7 04 24 ef 40 02 c0 	mov    DWORD PTR [esp],0xc00240ef
c001d500:	e8 56 f0 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d505:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d508:	53                   	push   ebx
c001d509:	57                   	push   edi
c001d50a:	6a 00                	push   0x0
c001d50c:	55                   	push   ebp
c001d50d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d510:	83 c4 14             	add    esp,0x14
c001d513:	68 f4 40 02 c0       	push   0xc00240f4
c001d518:	eb 57                	jmp    c001d571 <IDE::detect()+0x421>
c001d51a:	83 ec 0c             	sub    esp,0xc
c001d51d:	68 f9 40 02 c0       	push   0xc00240f9
c001d522:	e8 34 f0 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d527:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d52e:	e8 7d 13 ff ff       	call   c000e8b0 <malloc>
c001d533:	89 04 24             	mov    DWORD PTR [esp],eax
c001d536:	89 c5                	mov    ebp,eax
c001d538:	e8 b1 0c 00 00       	call   c001e1ee <ATAPI::ATAPI()>
c001d53d:	c7 04 24 ff 40 02 c0 	mov    DWORD PTR [esp],0xc00240ff
c001d544:	e8 12 f0 fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d549:	58                   	pop    eax
c001d54a:	5a                   	pop    edx
c001d54b:	55                   	push   ebp
c001d54c:	53                   	push   ebx
c001d54d:	e8 14 bb fe ff       	call   c0009066 <Device::addChild(Device*)>
c001d552:	c7 04 24 06 41 02 c0 	mov    DWORD PTR [esp],0xc0024106
c001d559:	e8 fd ef fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d55e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d561:	53                   	push   ebx
c001d562:	57                   	push   edi
c001d563:	6a 00                	push   0x0
c001d565:	55                   	push   ebp
c001d566:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d569:	83 c4 14             	add    esp,0x14
c001d56c:	68 0d 41 02 c0       	push   0xc002410d
c001d571:	e8 e5 ef fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d576:	83 c4 10             	add    esp,0x10
c001d579:	83 ec 0c             	sub    esp,0xc
c001d57c:	47                   	inc    edi
c001d57d:	68 14 41 02 c0       	push   0xc0024114
c001d582:	e8 d4 ef fe ff       	call   c000c55b <KeSetBootMessage(char const*)>
c001d587:	83 c4 10             	add    esp,0x10
c001d58a:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d58e:	74 0c                	je     c001d59c <IDE::detect()+0x44c>
c001d590:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d597:	e9 19 fc ff ff       	jmp    c001d1b5 <IDE::detect()+0x65>
c001d59c:	4e                   	dec    esi
c001d59d:	74 0a                	je     c001d5a9 <IDE::detect()+0x459>
c001d59f:	be 01 00 00 00       	mov    esi,0x1
c001d5a4:	e9 f5 fb ff ff       	jmp    c001d19e <IDE::detect()+0x4e>
c001d5a9:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d5af:	5b                   	pop    ebx
c001d5b0:	5e                   	pop    esi
c001d5b1:	5f                   	pop    edi
c001d5b2:	5d                   	pop    ebp
c001d5b3:	c3                   	ret    

c001d5b4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d5b4:	55                   	push   ebp
c001d5b5:	57                   	push   edi
c001d5b6:	56                   	push   esi
c001d5b7:	53                   	push   ebx
c001d5b8:	83 ec 1c             	sub    esp,0x1c
c001d5bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d5c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d5c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d5cf:	88 c3                	mov    bl,al
c001d5d1:	25 ff 00 00 00       	and    eax,0xff
c001d5d6:	0f 84 88 00 00 00    	je     c001d664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d5dc:	83 ec 0c             	sub    esp,0xc
c001d5df:	89 c7                	mov    edi,eax
c001d5e1:	68 18 41 02 c0       	push   0xc0024118
c001d5e6:	e8 63 99 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d5eb:	83 c4 10             	add    esp,0x10
c001d5ee:	83 ff 01             	cmp    edi,0x1
c001d5f1:	74 6b                	je     c001d65e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d5f3:	83 ff 02             	cmp    edi,0x2
c001d5f6:	75 58                	jne    c001d650 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d5f8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d5fd:	50                   	push   eax
c001d5fe:	6a 01                	push   0x1
c001d600:	01 ff                	add    edi,edi
c001d602:	09 fe                	or     esi,edi
c001d604:	89 f0                	mov    eax,esi
c001d606:	0f b6 f0             	movzx  esi,al
c001d609:	c1 e6 06             	shl    esi,0x6
c001d60c:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d614:	50                   	push   eax
c001d615:	55                   	push   ebp
c001d616:	e8 75 f3 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	a8 01                	test   al,0x1
c001d620:	74 02                	je     c001d624 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d622:	b3 07                	mov    bl,0x7
c001d624:	a8 02                	test   al,0x2
c001d626:	74 02                	je     c001d62a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d628:	b3 03                	mov    bl,0x3
c001d62a:	a8 04                	test   al,0x4
c001d62c:	74 02                	je     c001d630 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d62e:	b3 14                	mov    bl,0x14
c001d630:	a8 08                	test   al,0x8
c001d632:	74 02                	je     c001d636 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d634:	b3 03                	mov    bl,0x3
c001d636:	a8 10                	test   al,0x10
c001d638:	74 02                	je     c001d63c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d63a:	b3 15                	mov    bl,0x15
c001d63c:	a8 20                	test   al,0x20
c001d63e:	74 02                	je     c001d642 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d640:	b3 03                	mov    bl,0x3
c001d642:	a8 40                	test   al,0x40
c001d644:	74 02                	je     c001d648 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d646:	b3 16                	mov    bl,0x16
c001d648:	a8 80                	test   al,0x80
c001d64a:	74 18                	je     c001d664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d64c:	b3 0d                	mov    bl,0xd
c001d64e:	eb 14                	jmp    c001d664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d650:	83 ff 03             	cmp    edi,0x3
c001d653:	74 0d                	je     c001d662 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d655:	83 ff 04             	cmp    edi,0x4
c001d658:	75 0a                	jne    c001d664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d65a:	b3 08                	mov    bl,0x8
c001d65c:	eb 06                	jmp    c001d664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d65e:	b3 13                	mov    bl,0x13
c001d660:	eb 02                	jmp    c001d664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d662:	b3 17                	mov    bl,0x17
c001d664:	83 c4 1c             	add    esp,0x1c
c001d667:	88 d8                	mov    al,bl
c001d669:	5b                   	pop    ebx
c001d66a:	5e                   	pop    esi
c001d66b:	5f                   	pop    edi
c001d66c:	5d                   	pop    ebp
c001d66d:	c3                   	ret    

c001d66e <IDE::polling(unsigned char, unsigned int)>:
c001d66e:	57                   	push   edi
c001d66f:	56                   	push   esi
c001d670:	53                   	push   ebx
c001d671:	bb 04 00 00 00       	mov    ebx,0x4
c001d676:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d67a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d67f:	52                   	push   edx
c001d680:	6a 0c                	push   0xc
c001d682:	56                   	push   esi
c001d683:	57                   	push   edi
c001d684:	e8 07 f3 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d689:	83 c4 10             	add    esp,0x10
c001d68c:	4b                   	dec    ebx
c001d68d:	75 f0                	jne    c001d67f <IDE::polling(unsigned char, unsigned int)+0x11>
c001d68f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d694:	50                   	push   eax
c001d695:	6a 0c                	push   0xc
c001d697:	56                   	push   esi
c001d698:	57                   	push   edi
c001d699:	e8 f2 f2 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	a8 01                	test   al,0x1
c001d6a3:	75 17                	jne    c001d6bc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d6a5:	a8 20                	test   al,0x20
c001d6a7:	75 0f                	jne    c001d6b8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d6a9:	4b                   	dec    ebx
c001d6aa:	74 10                	je     c001d6bc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d6ac:	a8 80                	test   al,0x80
c001d6ae:	75 e4                	jne    c001d694 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d6b0:	a8 08                	test   al,0x8
c001d6b2:	74 e0                	je     c001d694 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d6b4:	31 c0                	xor    eax,eax
c001d6b6:	eb 06                	jmp    c001d6be <IDE::polling(unsigned char, unsigned int)+0x50>
c001d6b8:	b0 01                	mov    al,0x1
c001d6ba:	eb 02                	jmp    c001d6be <IDE::polling(unsigned char, unsigned int)+0x50>
c001d6bc:	b0 02                	mov    al,0x2
c001d6be:	5b                   	pop    ebx
c001d6bf:	5e                   	pop    esi
c001d6c0:	5f                   	pop    edi
c001d6c1:	c3                   	ret    

c001d6c2 <SATABus::close(int, int, void*)>:
c001d6c2:	31 c0                	xor    eax,eax
c001d6c4:	c3                   	ret    
c001d6c5:	90                   	nop

c001d6c6 <SATABus::detect()>:
c001d6c6:	c3                   	ret    
c001d6c7:	90                   	nop

c001d6c8 <SATABus::SATABus()>:
c001d6c8:	83 ec 0c             	sub    esp,0xc
c001d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6cf:	83 ec 08             	sub    esp,0x8
c001d6d2:	68 50 41 02 c0       	push   0xc0024150
c001d6d7:	50                   	push   eax
c001d6d8:	e8 e3 bc fe ff       	call   c00093c0 <HardDiskController::HardDiskController(char const*)>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	ba 7c 41 02 c0       	mov    edx,0xc002417c
c001d6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e9:	89 10                	mov    DWORD PTR [eax],edx
c001d6eb:	83 ec 0c             	sub    esp,0xc
c001d6ee:	6a 50                	push   0x50
c001d6f0:	e8 d9 17 ff ff       	call   c000eece <Phys::allocateContiguousPages(int)>
c001d6f5:	83 c4 10             	add    esp,0x10
c001d6f8:	89 c2                	mov    edx,eax
c001d6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d704:	83 ec 0c             	sub    esp,0xc
c001d707:	6a 50                	push   0x50
c001d709:	e8 e5 48 ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c001d70e:	83 c4 10             	add    esp,0x10
c001d711:	89 c2                	mov    edx,eax
c001d713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d717:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d71d:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001d722:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d726:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d72c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d730:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d736:	83 ec 0c             	sub    esp,0xc
c001d739:	6a 03                	push   0x3
c001d73b:	6a 50                	push   0x50
c001d73d:	51                   	push   ecx
c001d73e:	52                   	push   edx
c001d73f:	50                   	push   eax
c001d740:	e8 81 51 ff ff       	call   c00128c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d745:	83 c4 20             	add    esp,0x20
c001d748:	90                   	nop
c001d749:	83 c4 0c             	add    esp,0xc
c001d74c:	c3                   	ret    
c001d74d:	90                   	nop

c001d74e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d74e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d752:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d755:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d758:	09 c2                	or     edx,eax
c001d75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d75e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d764:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d766:	31 c0                	xor    eax,eax
c001d768:	c1 e9 08             	shr    ecx,0x8
c001d76b:	83 e1 0f             	and    ecx,0xf
c001d76e:	39 c8                	cmp    eax,ecx
c001d770:	74 0a                	je     c001d77c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d772:	f6 c2 01             	test   dl,0x1
c001d775:	74 08                	je     c001d77f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d777:	d1 ea                	shr    edx,1
c001d779:	40                   	inc    eax
c001d77a:	eb f2                	jmp    c001d76e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d77c:	83 c8 ff             	or     eax,0xffffffff
c001d77f:	c3                   	ret    

c001d780 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d780:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d784:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d787:	89 c2                	mov    edx,eax
c001d789:	c1 ea 08             	shr    edx,0x8
c001d78c:	83 e2 0f             	and    edx,0xf
c001d78f:	4a                   	dec    edx
c001d790:	75 32                	jne    c001d7c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d792:	83 e0 0f             	and    eax,0xf
c001d795:	83 f8 03             	cmp    eax,0x3
c001d798:	75 2a                	jne    c001d7c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d79a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d79d:	b8 02 00 00 00       	mov    eax,0x2
c001d7a2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d7a8:	74 1c                	je     c001d7c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d7aa:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d7b0:	b8 04 00 00 00       	mov    eax,0x4
c001d7b5:	74 0f                	je     c001d7c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d7b7:	31 c0                	xor    eax,eax
c001d7b9:	83 fa 03             	cmp    edx,0x3
c001d7bc:	0f 94 c0             	sete   al
c001d7bf:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d7c3:	c3                   	ret    
c001d7c4:	31 c0                	xor    eax,eax
c001d7c6:	c3                   	ret    
c001d7c7:	90                   	nop

c001d7c8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d7c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d7cf:	0f ba e2 0f          	bt     edx,0xf
c001d7d3:	72 f7                	jb     c001d7cc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d7d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d7d8:	83 ca 10             	or     edx,0x10
c001d7db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d7de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d7e1:	83 ca 01             	or     edx,0x1
c001d7e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d7e7:	c3                   	ret    

c001d7e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d7e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7ec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d7ef:	83 e2 fe             	and    edx,0xfffffffe
c001d7f2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d7f5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d7f8:	83 e2 ef             	and    edx,0xffffffef
c001d7fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d7fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d801:	0f ba e2 0e          	bt     edx,0xe
c001d805:	72 f7                	jb     c001d7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d807:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d80a:	0f ba e2 0f          	bt     edx,0xf
c001d80e:	72 ee                	jb     c001d7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d810:	c3                   	ret    
c001d811:	90                   	nop

c001d812 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d812:	55                   	push   ebp
c001d813:	57                   	push   edi
c001d814:	56                   	push   esi
c001d815:	53                   	push   ebx
c001d816:	83 ec 1c             	sub    esp,0x1c
c001d819:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d81d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d821:	53                   	push   ebx
c001d822:	57                   	push   edi
c001d823:	e8 c0 ff ff ff       	call   c001d7e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d828:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d82c:	83 ec 0c             	sub    esp,0xc
c001d82f:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d835:	c1 e5 0a             	shl    ebp,0xa
c001d838:	01 e8                	add    eax,ebp
c001d83a:	89 03                	mov    DWORD PTR [ebx],eax
c001d83c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d83e:	68 00 04 00 00       	push   0x400
c001d843:	6a 00                	push   0x0
c001d845:	50                   	push   eax
c001d846:	e8 a5 2c fe ff       	call   c00004f0 <memset>
c001d84b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d851:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001d855:	83 c4 1c             	add    esp,0x1c
c001d858:	01 e8                	add    eax,ebp
c001d85a:	89 03                	mov    DWORD PTR [ebx],eax
c001d85c:	c1 e6 08             	shl    esi,0x8
c001d85f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d866:	81 c6 00 80 00 00    	add    esi,0x8000
c001d86c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d872:	01 f0                	add    eax,esi
c001d874:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d877:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d87a:	68 00 01 00 00       	push   0x100
c001d87f:	6a 00                	push   0x0
c001d881:	50                   	push   eax
c001d882:	e8 69 2c fe ff       	call   c00004f0 <memset>
c001d887:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d88d:	31 d2                	xor    edx,edx
c001d88f:	01 f0                	add    eax,esi
c001d891:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d894:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d89b:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001d8a1:	01 ee                	add    esi,ebp
c001d8a3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d8a7:	83 c4 10             	add    esp,0x10
c001d8aa:	c1 e5 0d             	shl    ebp,0xd
c001d8ad:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001d8b3:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001d8b9:	83 c6 20             	add    esi,0x20
c001d8bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8c0:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d8c6:	01 e8                	add    eax,ebp
c001d8c8:	01 d0                	add    eax,edx
c001d8ca:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d8cd:	52                   	push   edx
c001d8ce:	68 00 01 00 00       	push   0x100
c001d8d3:	6a 00                	push   0x0
c001d8d5:	50                   	push   eax
c001d8d6:	e8 15 2c fe ff       	call   c00004f0 <memset>
c001d8db:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d8e1:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001d8e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8ec:	83 c4 10             	add    esp,0x10
c001d8ef:	01 e8                	add    eax,ebp
c001d8f1:	01 d0                	add    eax,edx
c001d8f3:	81 c2 00 01 00 00    	add    edx,0x100
c001d8f9:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d8fc:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001d902:	75 af                	jne    c001d8b3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001d904:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d90b:	50                   	push   eax
c001d90c:	50                   	push   eax
c001d90d:	53                   	push   ebx
c001d90e:	57                   	push   edi
c001d90f:	e8 b4 fe ff ff       	call   c001d7c8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d914:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d91b:	83 c4 2c             	add    esp,0x2c
c001d91e:	5b                   	pop    ebx
c001d91f:	5e                   	pop    esi
c001d920:	5f                   	pop    edi
c001d921:	5d                   	pop    ebp
c001d922:	c3                   	ret    
c001d923:	90                   	nop

c001d924 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d924:	55                   	push   ebp
c001d925:	57                   	push   edi
c001d926:	56                   	push   esi
c001d927:	53                   	push   ebx
c001d928:	31 db                	xor    ebx,ebx
c001d92a:	83 ec 0c             	sub    esp,0xc
c001d92d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d931:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d935:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d938:	f7 c7 01 00 00 00    	test   edi,0x1
c001d93e:	74 7a                	je     c001d9ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d940:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d944:	89 d8                	mov    eax,ebx
c001d946:	c1 e0 07             	shl    eax,0x7
c001d949:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d950:	55                   	push   ebp
c001d951:	56                   	push   esi
c001d952:	e8 29 fe ff ff       	call   c001d780 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d957:	5a                   	pop    edx
c001d958:	59                   	pop    ecx
c001d959:	83 f8 01             	cmp    eax,0x1
c001d95c:	75 21                	jne    c001d97f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d95e:	50                   	push   eax
c001d95f:	53                   	push   ebx
c001d960:	55                   	push   ebp
c001d961:	56                   	push   esi
c001d962:	e8 ab fe ff ff       	call   c001d812 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d967:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d96e:	e8 3d 0f ff ff       	call   c000e8b0 <malloc>
c001d973:	89 04 24             	mov    DWORD PTR [esp],eax
c001d976:	89 c5                	mov    ebp,eax
c001d978:	e8 37 0f 00 00       	call   c001e8b4 <SATA::SATA()>
c001d97d:	eb 24                	jmp    c001d9a3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d97f:	83 f8 04             	cmp    eax,0x4
c001d982:	75 36                	jne    c001d9ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d984:	51                   	push   ecx
c001d985:	53                   	push   ebx
c001d986:	55                   	push   ebp
c001d987:	56                   	push   esi
c001d988:	e8 85 fe ff ff       	call   c001d812 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d98d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d994:	e8 17 0f ff ff       	call   c000e8b0 <malloc>
c001d999:	89 04 24             	mov    DWORD PTR [esp],eax
c001d99c:	89 c5                	mov    ebp,eax
c001d99e:	e8 a7 12 00 00       	call   c001ec4a <SATAPI::SATAPI()>
c001d9a3:	58                   	pop    eax
c001d9a4:	5a                   	pop    edx
c001d9a5:	55                   	push   ebp
c001d9a6:	56                   	push   esi
c001d9a7:	e8 ba b6 fe ff       	call   c0009066 <Device::addChild(Device*)>
c001d9ac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d9af:	56                   	push   esi
c001d9b0:	6a 00                	push   0x0
c001d9b2:	53                   	push   ebx
c001d9b3:	55                   	push   ebp
c001d9b4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d9b7:	83 c4 20             	add    esp,0x20
c001d9ba:	d1 ef                	shr    edi,1
c001d9bc:	43                   	inc    ebx
c001d9bd:	83 fb 20             	cmp    ebx,0x20
c001d9c0:	0f 85 72 ff ff ff    	jne    c001d938 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d9c6:	83 c4 0c             	add    esp,0xc
c001d9c9:	5b                   	pop    ebx
c001d9ca:	5e                   	pop    esi
c001d9cb:	5f                   	pop    edi
c001d9cc:	5d                   	pop    ebp
c001d9cd:	c3                   	ret    

c001d9ce <SATABus::open(int, int, void*)>:
c001d9ce:	53                   	push   ebx
c001d9cf:	83 ec 08             	sub    esp,0x8
c001d9d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9d6:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d9dc:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d9e2:	e8 cd 79 ff ff       	call   c00153b4 <KeDisablePreemption()>
c001d9e7:	52                   	push   edx
c001d9e8:	52                   	push   edx
c001d9e9:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d9ef:	53                   	push   ebx
c001d9f0:	e8 2f ff ff ff       	call   c001d924 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d9f5:	e8 e2 79 ff ff       	call   c00153dc <KeRestorePreemption()>
c001d9fa:	83 c4 18             	add    esp,0x18
c001d9fd:	31 c0                	xor    eax,eax
c001d9ff:	5b                   	pop    ebx
c001da00:	c3                   	ret    
c001da01:	90                   	nop

c001da02 <ATA::close(int, int, void*)>:
c001da02:	83 ec 0c             	sub    esp,0xc
c001da05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da09:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da0f:	85 c0                	test   eax,eax
c001da11:	74 0c                	je     c001da1f <ATA::close(int, int, void*)+0x1d>
c001da13:	8b 10                	mov    edx,DWORD PTR [eax]
c001da15:	83 ec 0c             	sub    esp,0xc
c001da18:	50                   	push   eax
c001da19:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001da1c:	83 c4 10             	add    esp,0x10
c001da1f:	31 c0                	xor    eax,eax
c001da21:	83 c4 0c             	add    esp,0xc
c001da24:	c3                   	ret    
c001da25:	90                   	nop

c001da26 <ATA::powerSaving(PowerSavingLevel)>:
c001da26:	c3                   	ret    
c001da27:	90                   	nop

c001da28 <ATA::ATA()>:
c001da28:	83 ec 0c             	sub    esp,0xc
c001da2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da2f:	83 ec 04             	sub    esp,0x4
c001da32:	68 00 02 00 00       	push   0x200
c001da37:	68 fd 42 02 c0       	push   0xc00242fd
c001da3c:	50                   	push   eax
c001da3d:	e8 08 ba fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001da42:	83 c4 10             	add    esp,0x10
c001da45:	ba 64 42 02 c0       	mov    edx,0xc0024264
c001da4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da4e:	89 10                	mov    DWORD PTR [eax],edx
c001da50:	90                   	nop
c001da51:	83 c4 0c             	add    esp,0xc
c001da54:	c3                   	ret    
c001da55:	90                   	nop

c001da56 <ATA::flush(bool)>:
c001da56:	53                   	push   ebx
c001da57:	83 ec 08             	sub    esp,0x8
c001da5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001da5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da63:	83 f8 01             	cmp    eax,0x1
c001da66:	19 c0                	sbb    eax,eax
c001da68:	83 e0 fd             	and    eax,0xfffffffd
c001da6b:	05 ea 00 00 00       	add    eax,0xea
c001da70:	50                   	push   eax
c001da71:	6a 07                	push   0x7
c001da73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da7a:	50                   	push   eax
c001da7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da81:	e8 4a ee ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da86:	83 c4 0c             	add    esp,0xc
c001da89:	6a 00                	push   0x0
c001da8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da92:	50                   	push   eax
c001da93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da99:	e8 d0 fb ff ff       	call   c001d66e <IDE::polling(unsigned char, unsigned int)>
c001da9e:	83 c4 18             	add    esp,0x18
c001daa1:	5b                   	pop    ebx
c001daa2:	c3                   	ret    
c001daa3:	90                   	nop

c001daa4 <ATA::readyForCommand()>:
c001daa4:	56                   	push   esi
c001daa5:	53                   	push   ebx
c001daa6:	53                   	push   ebx
c001daa7:	31 db                	xor    ebx,ebx
c001daa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001daad:	51                   	push   ecx
c001daae:	6a 0c                	push   0xc
c001dab0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dab7:	50                   	push   eax
c001dab8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dabe:	e8 cd ee ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001dac3:	83 c4 10             	add    esp,0x10
c001dac6:	a8 88                	test   al,0x88
c001dac8:	74 1f                	je     c001dae9 <ATA::readyForCommand()+0x45>
c001daca:	43                   	inc    ebx
c001dacb:	83 fb 63             	cmp    ebx,0x63
c001dace:	7e dd                	jle    c001daad <ATA::readyForCommand()+0x9>
c001dad0:	83 ec 0c             	sub    esp,0xc
c001dad3:	6a 0a                	push   0xa
c001dad5:	e8 66 7d ff ff       	call   c0015840 <milliTenthSleep(unsigned int)>
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dae3:	75 c8                	jne    c001daad <ATA::readyForCommand()+0x9>
c001dae5:	31 c0                	xor    eax,eax
c001dae7:	eb 02                	jmp    c001daeb <ATA::readyForCommand()+0x47>
c001dae9:	b0 01                	mov    al,0x1
c001daeb:	5a                   	pop    edx
c001daec:	5b                   	pop    ebx
c001daed:	5e                   	pop    esi
c001daee:	c3                   	ret    
c001daef:	90                   	nop

c001daf0 <ATA::access(unsigned long long, int, void*, bool)>:
c001daf0:	55                   	push   ebp
c001daf1:	57                   	push   edi
c001daf2:	56                   	push   esi
c001daf3:	53                   	push   ebx
c001daf4:	83 ec 2c             	sub    esp,0x2c
c001daf7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dafb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001daff:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001db03:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001db07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db0b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001db0f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001db13:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001db19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db1d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001db23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db27:	c1 e0 06             	shl    eax,0x6
c001db2a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001db32:	74 5b                	je     c001db8f <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001db34:	89 fa                	mov    edx,edi
c001db36:	89 f0                	mov    eax,esi
c001db38:	c1 ea 1c             	shr    edx,0x1c
c001db3b:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001db3f:	89 d1                	mov    ecx,edx
c001db41:	09 c1                	or     ecx,eax
c001db43:	74 25                	je     c001db6a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001db45:	31 ed                	xor    ebp,ebp
c001db47:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001db4e:	89 fa                	mov    edx,edi
c001db50:	89 f0                	mov    eax,esi
c001db52:	0f ad d0             	shrd   eax,edx,cl
c001db55:	d3 ea                	shr    edx,cl
c001db57:	f6 c1 20             	test   cl,0x20
c001db5a:	74 02                	je     c001db5e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001db5c:	89 d0                	mov    eax,edx
c001db5e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001db62:	45                   	inc    ebp
c001db63:	83 fd 06             	cmp    ebp,0x6
c001db66:	75 df                	jne    c001db47 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001db68:	eb 71                	jmp    c001dbdb <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001db6a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001db6f:	89 f0                	mov    eax,esi
c001db71:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001db78:	0f ac f8 10          	shrd   eax,edi,0x10
c001db7c:	bf 01 00 00 00       	mov    edi,0x1
c001db81:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001db85:	c1 ee 18             	shr    esi,0x18
c001db88:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001db8d:	eb 53                	jmp    c001dbe2 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001db8f:	6a 00                	push   0x0
c001db91:	6a 3f                	push   0x3f
c001db93:	57                   	push   edi
c001db94:	56                   	push   esi
c001db95:	e8 3a 25 00 00       	call   c00200d4 <__umoddi3>
c001db9a:	83 c4 10             	add    esp,0x10
c001db9d:	40                   	inc    eax
c001db9e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001dba2:	6a 00                	push   0x0
c001dba4:	68 f0 03 00 00       	push   0x3f0
c001dba9:	57                   	push   edi
c001dbaa:	56                   	push   esi
c001dbab:	e8 24 24 00 00       	call   c001ffd4 <__udivdi3>
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001dbb8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dbbf:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dbc4:	6a 00                	push   0x0
c001dbc6:	6a 3f                	push   0x3f
c001dbc8:	57                   	push   edi
c001dbc9:	31 ff                	xor    edi,edi
c001dbcb:	56                   	push   esi
c001dbcc:	e8 03 24 00 00       	call   c001ffd4 <__udivdi3>
c001dbd1:	83 c4 10             	add    esp,0x10
c001dbd4:	83 e0 0f             	and    eax,0xf
c001dbd7:	89 c6                	mov    esi,eax
c001dbd9:	eb 07                	jmp    c001dbe2 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001dbdb:	31 f6                	xor    esi,esi
c001dbdd:	bf 02 00 00 00       	mov    edi,0x2
c001dbe2:	55                   	push   ebp
c001dbe3:	6a 00                	push   0x0
c001dbe5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dbec:	50                   	push   eax
c001dbed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbf1:	e8 e8 ee ff ff       	call   c001cade <IDE::enableIRQs(unsigned char, bool)>
c001dbf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbf9:	e8 a6 fe ff ff       	call   c001daa4 <ATA::readyForCommand()>
c001dbfe:	83 c4 10             	add    esp,0x10
c001dc01:	84 c0                	test   al,al
c001dc03:	75 0a                	jne    c001dc0f <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001dc05:	be 01 00 00 00       	mov    esi,0x1
c001dc0a:	e9 df 02 00 00       	jmp    c001deee <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001dc0f:	fa                   	cli    
c001dc10:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dc16:	f7 c7 03 00 00 00    	test   edi,0x3
c001dc1c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dc22:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dc28:	75 0a                	jne    c001dc34 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001dc2a:	c1 e0 04             	shl    eax,0x4
c001dc2d:	09 c6                	or     esi,eax
c001dc2f:	83 ce a0             	or     esi,0xffffffa0
c001dc32:	eb 08                	jmp    c001dc3c <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001dc34:	c1 e0 04             	shl    eax,0x4
c001dc37:	09 c6                	or     esi,eax
c001dc39:	83 ce e0             	or     esi,0xffffffe0
c001dc3c:	89 f0                	mov    eax,esi
c001dc3e:	0f b6 d2             	movzx  edx,dl
c001dc41:	0f b6 f0             	movzx  esi,al
c001dc44:	56                   	push   esi
c001dc45:	6a 06                	push   0x6
c001dc47:	52                   	push   edx
c001dc48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc4e:	e8 7d ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc53:	83 c4 10             	add    esp,0x10
c001dc56:	6a 00                	push   0x0
c001dc58:	6a 01                	push   0x1
c001dc5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc61:	50                   	push   eax
c001dc62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc68:	e8 63 ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc6d:	89 f8                	mov    eax,edi
c001dc6f:	83 c4 10             	add    esp,0x10
c001dc72:	0f b6 f0             	movzx  esi,al
c001dc75:	83 fe 02             	cmp    esi,0x2
c001dc78:	75 6e                	jne    c001dce8 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001dc7a:	6a 00                	push   0x0
c001dc7c:	6a 08                	push   0x8
c001dc7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc85:	50                   	push   eax
c001dc86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc8c:	e8 3f ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc91:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001dc96:	50                   	push   eax
c001dc97:	6a 09                	push   0x9
c001dc99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dca0:	50                   	push   eax
c001dca1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dca7:	e8 24 ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcac:	83 c4 20             	add    esp,0x20
c001dcaf:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001dcb4:	50                   	push   eax
c001dcb5:	6a 0a                	push   0xa
c001dcb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcbe:	50                   	push   eax
c001dcbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dcc5:	e8 06 ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcca:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001dccf:	50                   	push   eax
c001dcd0:	6a 0b                	push   0xb
c001dcd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcd9:	50                   	push   eax
c001dcda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dce0:	e8 eb eb ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dce5:	83 c4 20             	add    esp,0x20
c001dce8:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001dced:	50                   	push   eax
c001dcee:	6a 02                	push   0x2
c001dcf0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcf7:	50                   	push   eax
c001dcf8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dcfe:	e8 cd eb ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd03:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001dd08:	50                   	push   eax
c001dd09:	6a 03                	push   0x3
c001dd0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd12:	50                   	push   eax
c001dd13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd19:	e8 b2 eb ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd1e:	83 c4 20             	add    esp,0x20
c001dd21:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001dd26:	50                   	push   eax
c001dd27:	6a 04                	push   0x4
c001dd29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd30:	50                   	push   eax
c001dd31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd37:	e8 94 eb ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd3c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd41:	50                   	push   eax
c001dd42:	6a 05                	push   0x5
c001dd44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd4b:	50                   	push   eax
c001dd4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd52:	e8 79 eb ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd57:	83 c4 20             	add    esp,0x20
c001dd5a:	83 fe 02             	cmp    esi,0x2
c001dd5d:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001dd62:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001dd67:	85 c9                	test   ecx,ecx
c001dd69:	74 07                	je     c001dd72 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001dd6b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001dd70:	75 45                	jne    c001ddb7 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001dd72:	89 f8                	mov    eax,edi
c001dd74:	0f b6 f8             	movzx  edi,al
c001dd77:	31 c0                	xor    eax,eax
c001dd79:	4f                   	dec    edi
c001dd7a:	0f 94 c0             	sete   al
c001dd7d:	89 c6                	mov    esi,eax
c001dd7f:	75 0c                	jne    c001dd8d <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001dd81:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001dd86:	b8 30 00 00 00       	mov    eax,0x30
c001dd8b:	75 2f                	jne    c001ddbc <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001dd8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dd91:	83 f2 01             	xor    edx,0x1
c001dd94:	85 c9                	test   ecx,ecx
c001dd96:	74 09                	je     c001dda1 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001dd98:	84 d2                	test   dl,dl
c001dd9a:	b8 24 00 00 00       	mov    eax,0x24
c001dd9f:	75 1b                	jne    c001ddbc <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001dda1:	85 f6                	test   esi,esi
c001dda3:	0f 84 5c fe ff ff    	je     c001dc05 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001dda9:	84 d2                	test   dl,dl
c001ddab:	b8 20 00 00 00       	mov    eax,0x20
c001ddb0:	75 0a                	jne    c001ddbc <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001ddb2:	e9 4e fe ff ff       	jmp    c001dc05 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ddb7:	b8 34 00 00 00       	mov    eax,0x34
c001ddbc:	50                   	push   eax
c001ddbd:	6a 07                	push   0x7
c001ddbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddc6:	50                   	push   eax
c001ddc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddcd:	e8 fe ea ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddd2:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ddd9:	83 c4 10             	add    esp,0x10
c001dddc:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001dde3:	75 01                	jne    c001dde6 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001dde5:	fb                   	sti    
c001dde6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ddea:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001ddef:	85 f6                	test   esi,esi
c001ddf1:	0f 84 dd 00 00 00    	je     c001ded4 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001ddf7:	57                   	push   edi
c001ddf8:	6a 01                	push   0x1
c001ddfa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de01:	50                   	push   eax
c001de02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de08:	e8 61 f8 ff ff       	call   c001d66e <IDE::polling(unsigned char, unsigned int)>
c001de0d:	83 c4 10             	add    esp,0x10
c001de10:	0f b6 c0             	movzx  eax,al
c001de13:	85 c0                	test   eax,eax
c001de15:	74 23                	je     c001de3a <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001de17:	50                   	push   eax
c001de18:	89 c6                	mov    esi,eax
c001de1a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001de21:	50                   	push   eax
c001de22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de29:	50                   	push   eax
c001de2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de30:	e8 7f f7 ff ff       	call   c001d5b4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001de35:	e9 b1 00 00 00       	jmp    c001deeb <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001de3a:	85 ed                	test   ebp,ebp
c001de3c:	74 49                	je     c001de87 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001de3e:	fa                   	cli    
c001de3f:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001de45:	31 ff                	xor    edi,edi
c001de47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001de4b:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001de4f:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001de54:	51                   	push   ecx
c001de55:	51                   	push   ecx
c001de56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de5d:	50                   	push   eax
c001de5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de64:	e8 55 ea ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001de69:	89 c2                	mov    edx,eax
c001de6b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001de70:	66 ef                	out    dx,ax
c001de72:	47                   	inc    edi
c001de73:	83 c4 10             	add    esp,0x10
c001de76:	81 ff 00 01 00 00    	cmp    edi,0x100
c001de7c:	75 c9                	jne    c001de47 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001de7e:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001de85:	eb 35                	jmp    c001debc <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001de87:	fa                   	cli    
c001de88:	52                   	push   edx
c001de89:	52                   	push   edx
c001de8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de91:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001de97:	50                   	push   eax
c001de98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de9e:	e8 1b ea ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001dea3:	b9 00 01 00 00       	mov    ecx,0x100
c001dea8:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001deac:	89 c2                	mov    edx,eax
c001deae:	fc                   	cld    
c001deaf:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001deb2:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001deb9:	83 c4 10             	add    esp,0x10
c001debc:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001dec3:	75 01                	jne    c001dec6 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001dec5:	fb                   	sti    
c001dec6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001dece:	4e                   	dec    esi
c001decf:	e9 1b ff ff ff       	jmp    c001ddef <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ded4:	31 f6                	xor    esi,esi
c001ded6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001dedb:	74 11                	je     c001deee <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001dedd:	50                   	push   eax
c001dede:	50                   	push   eax
c001dedf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001dee4:	50                   	push   eax
c001dee5:	53                   	push   ebx
c001dee6:	e8 6b fb ff ff       	call   c001da56 <ATA::flush(bool)>
c001deeb:	83 c4 10             	add    esp,0x10
c001deee:	83 c4 2c             	add    esp,0x2c
c001def1:	89 f0                	mov    eax,esi
c001def3:	5b                   	pop    ebx
c001def4:	5e                   	pop    esi
c001def5:	5f                   	pop    edi
c001def6:	5d                   	pop    ebp
c001def7:	c3                   	ret    

c001def8 <ATA::read(unsigned long long, int, void*)>:
c001def8:	57                   	push   edi
c001def9:	b8 04 00 00 00       	mov    eax,0x4
c001defe:	56                   	push   esi
c001deff:	53                   	push   ebx
c001df00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df04:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001df0c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001df10:	8d 7a ff             	lea    edi,[edx-0x1]
c001df13:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df19:	77 25                	ja     c001df40 <ATA::read(unsigned long long, int, void*)+0x48>
c001df1b:	85 f6                	test   esi,esi
c001df1d:	b8 06 00 00 00       	mov    eax,0x6
c001df22:	74 1c                	je     c001df40 <ATA::read(unsigned long long, int, void*)+0x48>
c001df24:	50                   	push   eax
c001df25:	50                   	push   eax
c001df26:	6a 00                	push   0x0
c001df28:	56                   	push   esi
c001df29:	52                   	push   edx
c001df2a:	53                   	push   ebx
c001df2b:	51                   	push   ecx
c001df2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df30:	e8 bb fb ff ff       	call   c001daf0 <ATA::access(unsigned long long, int, void*, bool)>
c001df35:	83 c4 20             	add    esp,0x20
c001df38:	85 c0                	test   eax,eax
c001df3a:	0f 95 c0             	setne  al
c001df3d:	0f b6 c0             	movzx  eax,al
c001df40:	5b                   	pop    ebx
c001df41:	5e                   	pop    esi
c001df42:	5f                   	pop    edi
c001df43:	c3                   	ret    

c001df44 <ATA::write(unsigned long long, int, void*)>:
c001df44:	57                   	push   edi
c001df45:	b8 04 00 00 00       	mov    eax,0x4
c001df4a:	56                   	push   esi
c001df4b:	53                   	push   ebx
c001df4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df54:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001df58:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001df5c:	8d 7a ff             	lea    edi,[edx-0x1]
c001df5f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df65:	77 25                	ja     c001df8c <ATA::write(unsigned long long, int, void*)+0x48>
c001df67:	85 f6                	test   esi,esi
c001df69:	b8 06 00 00 00       	mov    eax,0x6
c001df6e:	74 1c                	je     c001df8c <ATA::write(unsigned long long, int, void*)+0x48>
c001df70:	50                   	push   eax
c001df71:	50                   	push   eax
c001df72:	6a 01                	push   0x1
c001df74:	56                   	push   esi
c001df75:	52                   	push   edx
c001df76:	53                   	push   ebx
c001df77:	51                   	push   ecx
c001df78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df7c:	e8 6f fb ff ff       	call   c001daf0 <ATA::access(unsigned long long, int, void*, bool)>
c001df81:	83 c4 20             	add    esp,0x20
c001df84:	85 c0                	test   eax,eax
c001df86:	0f 95 c0             	setne  al
c001df89:	0f b6 c0             	movzx  eax,al
c001df8c:	5b                   	pop    ebx
c001df8d:	5e                   	pop    esi
c001df8e:	5f                   	pop    edi
c001df8f:	c3                   	ret    

c001df90 <ATA::detectCHS()>:
c001df90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001df94:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001df9a:	c1 e0 06             	shl    eax,0x6
c001df9d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001dfa3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001dfad:	c7 44 24 04 a0 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc00241a0
c001dfb5:	e9 3c 0c ff ff       	jmp    c000ebf6 <KePanic(char const*)>

c001dfba <ATA::open(int, int, void*)>:
c001dfba:	53                   	push   ebx
c001dfbb:	83 ec 08             	sub    esp,0x8
c001dfbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dfc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dfc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dfd0:	c1 e0 06             	shl    eax,0x6
c001dfd3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dfd9:	01 d0                	add    eax,edx
c001dfdb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dfe2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dfe8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dfef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dff9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e000:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e006:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e00d:	75 0c                	jne    c001e01b <ATA::open(int, int, void*)+0x61>
c001e00f:	83 ec 0c             	sub    esp,0xc
c001e012:	53                   	push   ebx
c001e013:	e8 78 ff ff ff       	call   c001df90 <ATA::detectCHS()>
c001e018:	83 c4 10             	add    esp,0x10
c001e01b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e021:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e027:	c1 e0 06             	shl    eax,0x6
c001e02a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e031:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e03b:	d1 e8                	shr    eax,1
c001e03d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e043:	6a 04                	push   0x4
c001e045:	6a 0c                	push   0xc
c001e047:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e04e:	50                   	push   eax
c001e04f:	52                   	push   edx
c001e050:	e8 7b e8 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e055:	90                   	nop
c001e056:	90                   	nop
c001e057:	6a 00                	push   0x0
c001e059:	6a 0c                	push   0xc
c001e05b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e062:	50                   	push   eax
c001e063:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e069:	e8 62 e8 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e06e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e074:	83 c4 20             	add    esp,0x20
c001e077:	c1 e0 06             	shl    eax,0x6
c001e07a:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001e080:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001e087:	0f 84 00 01 00 00    	je     c001e18d <ATA::open(int, int, void*)+0x1d3>
c001e08d:	83 ec 0c             	sub    esp,0xc
c001e090:	6a 08                	push   0x8
c001e092:	e8 37 0e ff ff       	call   c000eece <Phys::allocateContiguousPages(int)>
c001e097:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e09d:	c7 04 24 b2 41 02 c0 	mov    DWORD PTR [esp],0xc00241b2
c001e0a4:	e8 a5 8e fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e0a9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001e0b0:	e8 3e 3f ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c001e0b5:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e0bb:	6a 03                	push   0x3
c001e0bd:	50                   	push   eax
c001e0be:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e0c4:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e0ca:	e8 fd 45 ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c001e0cf:	83 c4 20             	add    esp,0x20
c001e0d2:	e8 19 0d ff ff       	call   c000edf0 <Phys::allocatePage()>
c001e0d7:	83 ec 0c             	sub    esp,0xc
c001e0da:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001e0e0:	6a 01                	push   0x1
c001e0e2:	e8 0c 3f ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c001e0e7:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001e0ed:	6a 03                	push   0x3
c001e0ef:	50                   	push   eax
c001e0f0:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001e0f6:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e0fc:	e8 cb 45 ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c001e101:	83 c4 14             	add    esp,0x14
c001e104:	68 eb 41 02 c0       	push   0xc00241eb
c001e109:	e8 40 8e fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e10e:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001e115:	50                   	push   eax
c001e116:	6a 12                	push   0x12
c001e118:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e11f:	50                   	push   eax
c001e120:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e126:	e8 a5 e7 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e12b:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001e131:	83 c4 20             	add    esp,0x20
c001e134:	0f b6 c4             	movzx  eax,ah
c001e137:	50                   	push   eax
c001e138:	6a 13                	push   0x13
c001e13a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e141:	50                   	push   eax
c001e142:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e148:	e8 83 e7 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e14d:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001e154:	50                   	push   eax
c001e155:	6a 14                	push   0x14
c001e157:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e15e:	50                   	push   eax
c001e15f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e165:	e8 66 e7 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e16a:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001e171:	83 c4 20             	add    esp,0x20
c001e174:	50                   	push   eax
c001e175:	6a 15                	push   0x15
c001e177:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e17e:	50                   	push   eax
c001e17f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e185:	e8 46 e7 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	83 ec 0c             	sub    esp,0xc
c001e190:	53                   	push   ebx
c001e191:	e8 1c b3 fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001e196:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e199:	e8 b4 c1 fe ff       	call   c000a352 <createPartitionsForDisk(PhysicalDisk*)>
c001e19e:	83 c4 18             	add    esp,0x18
c001e1a1:	31 c0                	xor    eax,eax
c001e1a3:	5b                   	pop    ebx
c001e1a4:	c3                   	ret    

c001e1a5 <combineCharAndColour(char, unsigned char)>:
c001e1a5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e1aa:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001e1b0:	c1 e0 08             	shl    eax,0x8
c001e1b3:	09 d0                	or     eax,edx
c001e1b5:	c3                   	ret    

c001e1b6 <combineColours(unsigned char, unsigned char)>:
c001e1b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e1bb:	c1 e0 04             	shl    eax,0x4
c001e1be:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001e1c2:	c3                   	ret    
c001e1c3:	90                   	nop

c001e1c4 <ATAPI::write(unsigned long long, int, void*)>:
c001e1c4:	b8 03 00 00 00       	mov    eax,0x3
c001e1c9:	c3                   	ret    

c001e1ca <ATAPI::close(int, int, void*)>:
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e1d7:	85 c0                	test   eax,eax
c001e1d9:	74 0c                	je     c001e1e7 <ATAPI::close(int, int, void*)+0x1d>
c001e1db:	8b 10                	mov    edx,DWORD PTR [eax]
c001e1dd:	83 ec 0c             	sub    esp,0xc
c001e1e0:	50                   	push   eax
c001e1e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e1e4:	83 c4 10             	add    esp,0x10
c001e1e7:	31 c0                	xor    eax,eax
c001e1e9:	83 c4 0c             	add    esp,0xc
c001e1ec:	c3                   	ret    
c001e1ed:	90                   	nop

c001e1ee <ATAPI::ATAPI()>:
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f5:	83 ec 04             	sub    esp,0x4
c001e1f8:	68 00 08 00 00       	push   0x800
c001e1fd:	68 9d 43 02 c0       	push   0xc002439d
c001e202:	50                   	push   eax
c001e203:	e8 42 b2 fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	ba ac 42 02 c0       	mov    edx,0xc00242ac
c001e210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e214:	89 10                	mov    DWORD PTR [eax],edx
c001e216:	90                   	nop
c001e217:	83 c4 0c             	add    esp,0xc
c001e21a:	c3                   	ret    
c001e21b:	90                   	nop

c001e21c <ATAPI::readyForCommand()>:
c001e21c:	56                   	push   esi
c001e21d:	53                   	push   ebx
c001e21e:	53                   	push   ebx
c001e21f:	31 db                	xor    ebx,ebx
c001e221:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e225:	51                   	push   ecx
c001e226:	6a 0c                	push   0xc
c001e228:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e22f:	50                   	push   eax
c001e230:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e236:	e8 55 e7 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001e23b:	83 c4 10             	add    esp,0x10
c001e23e:	a8 88                	test   al,0x88
c001e240:	74 25                	je     c001e267 <ATAPI::readyForCommand()+0x4b>
c001e242:	43                   	inc    ebx
c001e243:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001e249:	7e da                	jle    c001e225 <ATAPI::readyForCommand()+0x9>
c001e24b:	83 ec 0c             	sub    esp,0xc
c001e24e:	68 5e 01 00 00       	push   0x15e
c001e253:	e8 e8 75 ff ff       	call   c0015840 <milliTenthSleep(unsigned int)>
c001e258:	83 c4 10             	add    esp,0x10
c001e25b:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001e261:	75 c2                	jne    c001e225 <ATAPI::readyForCommand()+0x9>
c001e263:	31 c0                	xor    eax,eax
c001e265:	eb 02                	jmp    c001e269 <ATAPI::readyForCommand()+0x4d>
c001e267:	b0 01                	mov    al,0x1
c001e269:	5a                   	pop    edx
c001e26a:	5b                   	pop    ebx
c001e26b:	5e                   	pop    esi
c001e26c:	c3                   	ret    
c001e26d:	90                   	nop

c001e26e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001e26e:	55                   	push   ebp
c001e26f:	57                   	push   edi
c001e270:	56                   	push   esi
c001e271:	53                   	push   ebx
c001e272:	83 ec 20             	sub    esp,0x20
c001e275:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e279:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e27d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001e281:	6a 01                	push   0x1
c001e283:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e28a:	50                   	push   eax
c001e28b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e291:	e8 48 e8 ff ff       	call   c001cade <IDE::enableIRQs(unsigned char, bool)>
c001e296:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e29d:	59                   	pop    ecx
c001e29e:	5e                   	pop    esi
c001e29f:	50                   	push   eax
c001e2a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e2a6:	e8 ff e5 ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001e2ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e2ae:	e8 69 ff ff ff       	call   c001e21c <ATAPI::readyForCommand()>
c001e2b3:	83 c4 10             	add    esp,0x10
c001e2b6:	84 c0                	test   al,al
c001e2b8:	75 0a                	jne    c001e2c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001e2ba:	bb 01 00 00 00       	mov    ebx,0x1
c001e2bf:	e9 5f 02 00 00       	jmp    c001e523 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e2c4:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001e2ca:	c1 e0 04             	shl    eax,0x4
c001e2cd:	0f b6 c0             	movzx  eax,al
c001e2d0:	50                   	push   eax
c001e2d1:	6a 06                	push   0x6
c001e2d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e2da:	50                   	push   eax
c001e2db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e2e1:	e8 ea e5 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2e6:	6a 00                	push   0x0
c001e2e8:	6a 01                	push   0x1
c001e2ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e2f1:	50                   	push   eax
c001e2f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e2f8:	e8 d3 e5 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2fd:	83 c4 20             	add    esp,0x20
c001e300:	0f b6 c3             	movzx  eax,bl
c001e303:	50                   	push   eax
c001e304:	0f b6 df             	movzx  ebx,bh
c001e307:	6a 04                	push   0x4
c001e309:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e310:	50                   	push   eax
c001e311:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e317:	e8 b4 e5 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e31c:	53                   	push   ebx
c001e31d:	6a 05                	push   0x5
c001e31f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e326:	50                   	push   eax
c001e327:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e32d:	e8 9e e5 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e332:	83 c4 20             	add    esp,0x20
c001e335:	68 a0 00 00 00       	push   0xa0
c001e33a:	6a 07                	push   0x7
c001e33c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e343:	50                   	push   eax
c001e344:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e34a:	e8 81 e5 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e34f:	83 c4 0c             	add    esp,0xc
c001e352:	6a 01                	push   0x1
c001e354:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e35b:	50                   	push   eax
c001e35c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e362:	e8 07 f3 ff ff       	call   c001d66e <IDE::polling(unsigned char, unsigned int)>
c001e367:	83 c4 10             	add    esp,0x10
c001e36a:	0f b6 d8             	movzx  ebx,al
c001e36d:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e373:	85 db                	test   ebx,ebx
c001e375:	74 20                	je     c001e397 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001e377:	53                   	push   ebx
c001e378:	0f b6 c0             	movzx  eax,al
c001e37b:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e382:	52                   	push   edx
c001e383:	50                   	push   eax
c001e384:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e38a:	e8 25 f2 ff ff       	call   c001d5b4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e38f:	83 c4 10             	add    esp,0x10
c001e392:	e9 8c 01 00 00       	jmp    c001e523 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e397:	52                   	push   edx
c001e398:	0f b6 c0             	movzx  eax,al
c001e39b:	52                   	push   edx
c001e39c:	50                   	push   eax
c001e39d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3a3:	e8 16 e5 ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001e3a8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e3ac:	b9 06 00 00 00       	mov    ecx,0x6
c001e3b1:	89 c2                	mov    edx,eax
c001e3b3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e3b6:	89 e8                	mov    eax,ebp
c001e3b8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e3bc:	83 c4 10             	add    esp,0x10
c001e3bf:	0f b6 c0             	movzx  eax,al
c001e3c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3c6:	85 db                	test   ebx,ebx
c001e3c8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e3ce:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e3d5:	0f 84 eb 00 00 00    	je     c001e4c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001e3db:	55                   	push   ebp
c001e3dc:	55                   	push   ebp
c001e3dd:	52                   	push   edx
c001e3de:	50                   	push   eax
c001e3df:	e8 60 e6 ff ff       	call   c001ca44 <IDE::waitInterrupt(unsigned char)>
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	84 c0                	test   al,al
c001e3e9:	0f 84 cb fe ff ff    	je     c001e2ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e3ef:	56                   	push   esi
c001e3f0:	56                   	push   esi
c001e3f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3f8:	50                   	push   eax
c001e3f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3ff:	e8 a6 e4 ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001e404:	83 c4 0c             	add    esp,0xc
c001e407:	6a 04                	push   0x4
c001e409:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e410:	50                   	push   eax
c001e411:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e417:	e8 74 e5 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001e41c:	83 c4 0c             	add    esp,0xc
c001e41f:	6a 05                	push   0x5
c001e421:	89 c6                	mov    esi,eax
c001e423:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e42a:	50                   	push   eax
c001e42b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e431:	e8 5a e5 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	0f b6 e8             	movzx  ebp,al
c001e43c:	89 f0                	mov    eax,esi
c001e43e:	c1 e5 08             	shl    ebp,0x8
c001e441:	0f b6 f0             	movzx  esi,al
c001e444:	09 f5                	or     ebp,esi
c001e446:	31 f6                	xor    esi,esi
c001e448:	d1 fd                	sar    ebp,1
c001e44a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e44f:	74 5c                	je     c001e4ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001e451:	39 ee                	cmp    esi,ebp
c001e453:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e459:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e460:	75 0d                	jne    c001e46f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001e462:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001e465:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001e469:	4b                   	dec    ebx
c001e46a:	e9 57 ff ff ff       	jmp    c001e3c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001e46f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e473:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001e477:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001e47c:	51                   	push   ecx
c001e47d:	51                   	push   ecx
c001e47e:	52                   	push   edx
c001e47f:	50                   	push   eax
c001e480:	e8 39 e4 ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001e485:	89 c2                	mov    edx,eax
c001e487:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e48c:	66 ef                	out    dx,ax
c001e48e:	46                   	inc    esi
c001e48f:	83 c4 10             	add    esp,0x10
c001e492:	eb bd                	jmp    c001e451 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001e494:	51                   	push   ecx
c001e495:	51                   	push   ecx
c001e496:	52                   	push   edx
c001e497:	50                   	push   eax
c001e498:	e8 21 e4 ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001e49d:	89 c2                	mov    edx,eax
c001e49f:	66 ed                	in     ax,dx
c001e4a1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001e4a5:	83 c4 10             	add    esp,0x10
c001e4a8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001e4ac:	46                   	inc    esi
c001e4ad:	39 ee                	cmp    esi,ebp
c001e4af:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e4b5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e4bc:	75 d6                	jne    c001e494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001e4be:	01 f6                	add    esi,esi
c001e4c0:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001e4c4:	eb a3                	jmp    c001e469 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001e4c6:	51                   	push   ecx
c001e4c7:	51                   	push   ecx
c001e4c8:	52                   	push   edx
c001e4c9:	50                   	push   eax
c001e4ca:	e8 75 e5 ff ff       	call   c001ca44 <IDE::waitInterrupt(unsigned char)>
c001e4cf:	83 c4 10             	add    esp,0x10
c001e4d2:	84 c0                	test   al,al
c001e4d4:	0f 84 e0 fd ff ff    	je     c001e2ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e4da:	52                   	push   edx
c001e4db:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e4e0:	52                   	push   edx
c001e4e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4e8:	50                   	push   eax
c001e4e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4ef:	e8 b6 e3 ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001e4f4:	83 c4 10             	add    esp,0x10
c001e4f7:	50                   	push   eax
c001e4f8:	50                   	push   eax
c001e4f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e500:	50                   	push   eax
c001e501:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e507:	e8 b2 e3 ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001e50c:	8d 50 07             	lea    edx,[eax+0x7]
c001e50f:	ec                   	in     al,dx
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	a8 88                	test   al,0x88
c001e515:	74 0a                	je     c001e521 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001e517:	4b                   	dec    ebx
c001e518:	75 dd                	jne    c001e4f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001e51a:	bb 02 00 00 00       	mov    ebx,0x2
c001e51f:	eb 02                	jmp    c001e523 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e521:	31 db                	xor    ebx,ebx
c001e523:	83 c4 1c             	add    esp,0x1c
c001e526:	89 d8                	mov    eax,ebx
c001e528:	5b                   	pop    ebx
c001e529:	5e                   	pop    esi
c001e52a:	5f                   	pop    edi
c001e52b:	5d                   	pop    ebp
c001e52c:	c3                   	ret    
c001e52d:	90                   	nop

c001e52e <ATAPI::diskRemoved()>:
c001e52e:	53                   	push   ebx
c001e52f:	83 ec 14             	sub    esp,0x14
c001e532:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e536:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e53d:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e543:	e8 fa ba fe ff       	call   c000a042 <LogicalDisk::unmount()>
c001e548:	58                   	pop    eax
c001e549:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e54f:	e8 88 c4 fe ff       	call   c000a9dc <VCache::writeWriteBuffer()>
c001e554:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e55a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e55e:	83 c4 18             	add    esp,0x18
c001e561:	5b                   	pop    ebx
c001e562:	e9 65 c4 fe ff       	jmp    c000a9cc <VCache::invalidateReadBuffer()>
c001e567:	90                   	nop

c001e568 <ATAPI::eject()>:
c001e568:	57                   	push   edi
c001e569:	b9 03 00 00 00       	mov    ecx,0x3
c001e56e:	53                   	push   ebx
c001e56f:	83 ec 14             	sub    esp,0x14
c001e572:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e576:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e57a:	fc                   	cld    
c001e57b:	31 c0                	xor    eax,eax
c001e57d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e57f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e584:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e589:	50                   	push   eax
c001e58a:	50                   	push   eax
c001e58b:	6a 00                	push   0x0
c001e58d:	6a 00                	push   0x0
c001e58f:	6a 00                	push   0x0
c001e591:	6a 02                	push   0x2
c001e593:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e597:	50                   	push   eax
c001e598:	53                   	push   ebx
c001e599:	e8 d0 fc ff ff       	call   c001e26e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e59e:	83 c4 14             	add    esp,0x14
c001e5a1:	53                   	push   ebx
c001e5a2:	e8 87 ff ff ff       	call   c001e52e <ATAPI::diskRemoved()>
c001e5a7:	83 c4 24             	add    esp,0x24
c001e5aa:	31 c0                	xor    eax,eax
c001e5ac:	5b                   	pop    ebx
c001e5ad:	5f                   	pop    edi
c001e5ae:	c3                   	ret    
c001e5af:	90                   	nop

c001e5b0 <ATAPI::diskInserted()>:
c001e5b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5b4:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e5bb:	c3                   	ret    

c001e5bc <ATAPI::detectMedia()>:
c001e5bc:	56                   	push   esi
c001e5bd:	53                   	push   ebx
c001e5be:	83 ec 28             	sub    esp,0x28
c001e5c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e5c5:	6a 0c                	push   0xc
c001e5c7:	6a 00                	push   0x0
c001e5c9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e5cd:	56                   	push   esi
c001e5ce:	e8 1d 1f fe ff       	call   c00004f0 <memset>
c001e5d3:	58                   	pop    eax
c001e5d4:	5a                   	pop    edx
c001e5d5:	6a 00                	push   0x0
c001e5d7:	6a 00                	push   0x0
c001e5d9:	6a 00                	push   0x0
c001e5db:	6a 00                	push   0x0
c001e5dd:	56                   	push   esi
c001e5de:	53                   	push   ebx
c001e5df:	e8 8a fc ff ff       	call   c001e26e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e5e4:	83 c4 1c             	add    esp,0x1c
c001e5e7:	6a 0c                	push   0xc
c001e5e9:	6a 00                	push   0x0
c001e5eb:	56                   	push   esi
c001e5ec:	e8 ff 1e fe ff       	call   c00004f0 <memset>
c001e5f1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e5f6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e5fb:	59                   	pop    ecx
c001e5fc:	58                   	pop    eax
c001e5fd:	6a 01                	push   0x1
c001e5ff:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e603:	50                   	push   eax
c001e604:	6a 00                	push   0x0
c001e606:	6a 12                	push   0x12
c001e608:	56                   	push   esi
c001e609:	53                   	push   ebx
c001e60a:	e8 5f fc ff ff       	call   c001e26e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e60f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e613:	83 c4 20             	add    esp,0x20
c001e616:	83 e0 7f             	and    eax,0x7f
c001e619:	83 f8 70             	cmp    eax,0x70
c001e61c:	74 15                	je     c001e633 <ATAPI::detectMedia()+0x77>
c001e61e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e625:	75 0c                	jne    c001e633 <ATAPI::detectMedia()+0x77>
c001e627:	83 ec 0c             	sub    esp,0xc
c001e62a:	53                   	push   ebx
c001e62b:	e8 80 ff ff ff       	call   c001e5b0 <ATAPI::diskInserted()>
c001e630:	83 c4 10             	add    esp,0x10
c001e633:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e637:	83 e0 0f             	and    eax,0xf
c001e63a:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e63f:	0f b6 c0             	movzx  eax,al
c001e642:	75 19                	jne    c001e65d <ATAPI::detectMedia()+0xa1>
c001e644:	83 f8 02             	cmp    eax,0x2
c001e647:	75 14                	jne    c001e65d <ATAPI::detectMedia()+0xa1>
c001e649:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e650:	74 24                	je     c001e676 <ATAPI::detectMedia()+0xba>
c001e652:	83 ec 0c             	sub    esp,0xc
c001e655:	53                   	push   ebx
c001e656:	e8 d3 fe ff ff       	call   c001e52e <ATAPI::diskRemoved()>
c001e65b:	eb 16                	jmp    c001e673 <ATAPI::detectMedia()+0xb7>
c001e65d:	85 c0                	test   eax,eax
c001e65f:	75 15                	jne    c001e676 <ATAPI::detectMedia()+0xba>
c001e661:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e668:	75 0c                	jne    c001e676 <ATAPI::detectMedia()+0xba>
c001e66a:	83 ec 0c             	sub    esp,0xc
c001e66d:	53                   	push   ebx
c001e66e:	e8 3d ff ff ff       	call   c001e5b0 <ATAPI::diskInserted()>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	83 c4 24             	add    esp,0x24
c001e679:	5b                   	pop    ebx
c001e67a:	5e                   	pop    esi
c001e67b:	c3                   	ret    

c001e67c <ATAPI::open(int, int, void*)>:
c001e67c:	56                   	push   esi
c001e67d:	53                   	push   ebx
c001e67e:	50                   	push   eax
c001e67f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e683:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e68b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e691:	c1 e0 06             	shl    eax,0x6
c001e694:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e69a:	01 d0                	add    eax,edx
c001e69c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e6a3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e6a9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e6b0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e6ba:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e6c1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e6c7:	6a 04                	push   0x4
c001e6c9:	6a 0c                	push   0xc
c001e6cb:	51                   	push   ecx
c001e6cc:	52                   	push   edx
c001e6cd:	e8 fe e1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6d2:	90                   	nop
c001e6d3:	90                   	nop
c001e6d4:	6a 00                	push   0x0
c001e6d6:	6a 0c                	push   0xc
c001e6d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6df:	50                   	push   eax
c001e6e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6e6:	e8 e5 e1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6eb:	83 c4 14             	add    esp,0x14
c001e6ee:	68 78 01 00 00       	push   0x178
c001e6f3:	e8 b8 01 ff ff       	call   c000e8b0 <malloc>
c001e6f8:	83 c4 0c             	add    esp,0xc
c001e6fb:	6a 00                	push   0x0
c001e6fd:	68 ff ff ff 7f       	push   0x7fffffff
c001e702:	6a 00                	push   0x0
c001e704:	6a 00                	push   0x0
c001e706:	53                   	push   ebx
c001e707:	68 4f 44 02 c0       	push   0xc002444f
c001e70c:	89 c6                	mov    esi,eax
c001e70e:	50                   	push   eax
c001e70f:	e8 6c b7 fe ff       	call   c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e714:	83 c4 14             	add    esp,0x14
c001e717:	56                   	push   esi
c001e718:	e8 23 b8 fe ff       	call   c0009f40 <LogicalDisk::assignDriveLetter()>
c001e71d:	5a                   	pop    edx
c001e71e:	59                   	pop    ecx
c001e71f:	0f be c0             	movsx  eax,al
c001e722:	50                   	push   eax
c001e723:	68 94 42 02 c0       	push   0xc0024294
c001e728:	e8 21 88 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e72d:	58                   	pop    eax
c001e72e:	5a                   	pop    edx
c001e72f:	56                   	push   esi
c001e730:	53                   	push   ebx
c001e731:	e8 30 a9 fe ff       	call   c0009066 <Device::addChild(Device*)>
c001e736:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e73c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e73f:	e8 6e ad fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001e744:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e74b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e74e:	e8 69 fe ff ff       	call   c001e5bc <ATAPI::detectMedia()>
c001e753:	83 c4 14             	add    esp,0x14
c001e756:	31 c0                	xor    eax,eax
c001e758:	5b                   	pop    ebx
c001e759:	5e                   	pop    esi
c001e75a:	c3                   	ret    
c001e75b:	90                   	nop

c001e75c <ATAPI::read(unsigned long long, int, void*)>:
c001e75c:	55                   	push   ebp
c001e75d:	57                   	push   edi
c001e75e:	56                   	push   esi
c001e75f:	53                   	push   ebx
c001e760:	83 ec 1c             	sub    esp,0x1c
c001e763:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e767:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e76b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e76f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e776:	74 3c                	je     c001e7b4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e778:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e77c:	b9 03 00 00 00       	mov    ecx,0x3
c001e781:	fc                   	cld    
c001e782:	31 c0                	xor    eax,eax
c001e784:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e786:	89 e8                	mov    eax,ebp
c001e788:	0f ce                	bswap  esi
c001e78a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e78e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e793:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e797:	50                   	push   eax
c001e798:	50                   	push   eax
c001e799:	55                   	push   ebp
c001e79a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e79e:	c1 e5 0b             	shl    ebp,0xb
c001e7a1:	6a 00                	push   0x0
c001e7a3:	55                   	push   ebp
c001e7a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e7a8:	50                   	push   eax
c001e7a9:	53                   	push   ebx
c001e7aa:	e8 bf fa ff ff       	call   c001e26e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e7af:	83 c4 20             	add    esp,0x20
c001e7b2:	eb 1a                	jmp    c001e7ce <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	53                   	push   ebx
c001e7b8:	e8 ff fd ff ff       	call   c001e5bc <ATAPI::detectMedia()>
c001e7bd:	83 c4 10             	add    esp,0x10
c001e7c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e7c7:	75 af                	jne    c001e778 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e7c9:	b8 02 00 00 00       	mov    eax,0x2
c001e7ce:	83 c4 1c             	add    esp,0x1c
c001e7d1:	5b                   	pop    ebx
c001e7d2:	5e                   	pop    esi
c001e7d3:	5f                   	pop    edi
c001e7d4:	5d                   	pop    ebp
c001e7d5:	c3                   	ret    

c001e7d6 <SATA::close(int, int, void*)>:
c001e7d6:	83 ec 0c             	sub    esp,0xc
c001e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7e3:	85 c0                	test   eax,eax
c001e7e5:	74 0c                	je     c001e7f3 <SATA::close(int, int, void*)+0x1d>
c001e7e7:	8b 10                	mov    edx,DWORD PTR [eax]
c001e7e9:	83 ec 0c             	sub    esp,0xc
c001e7ec:	50                   	push   eax
c001e7ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e7f0:	83 c4 10             	add    esp,0x10
c001e7f3:	31 c0                	xor    eax,eax
c001e7f5:	83 c4 0c             	add    esp,0xc
c001e7f8:	c3                   	ret    
c001e7f9:	90                   	nop

c001e7fa <SATA::powerSaving(PowerSavingLevel)>:
c001e7fa:	c3                   	ret    
c001e7fb:	90                   	nop

c001e7fc <SATA::open(int, int, void*)>:
c001e7fc:	56                   	push   esi
c001e7fd:	53                   	push   ebx
c001e7fe:	83 ec 10             	sub    esp,0x10
c001e801:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e805:	68 dc 42 02 c0       	push   0xc00242dc
c001e80a:	e8 3f 87 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e80f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e813:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e81d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e827:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e82d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e831:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e83b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e842:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e848:	e8 a3 05 ff ff       	call   c000edf0 <Phys::allocatePage()>
c001e84d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e853:	89 c6                	mov    esi,eax
c001e855:	e8 96 05 ff ff       	call   c000edf0 <Phys::allocatePage()>
c001e85a:	81 c6 00 10 00 00    	add    esi,0x1000
c001e860:	83 c4 10             	add    esp,0x10
c001e863:	39 c6                	cmp    esi,eax
c001e865:	74 10                	je     c001e877 <SATA::open(int, int, void*)+0x7b>
c001e867:	83 ec 0c             	sub    esp,0xc
c001e86a:	68 e8 42 02 c0       	push   0xc00242e8
c001e86f:	e8 82 03 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001e874:	83 c4 10             	add    esp,0x10
c001e877:	83 ec 0c             	sub    esp,0xc
c001e87a:	6a 02                	push   0x2
c001e87c:	e8 72 37 ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c001e881:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e887:	6a 03                	push   0x3
c001e889:	50                   	push   eax
c001e88a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e890:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e896:	e8 31 3e ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c001e89b:	83 c4 14             	add    esp,0x14
c001e89e:	53                   	push   ebx
c001e89f:	e8 0e ac fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001e8a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8a7:	e8 a6 ba fe ff       	call   c000a352 <createPartitionsForDisk(PhysicalDisk*)>
c001e8ac:	83 c4 14             	add    esp,0x14
c001e8af:	31 c0                	xor    eax,eax
c001e8b1:	5b                   	pop    ebx
c001e8b2:	5e                   	pop    esi
c001e8b3:	c3                   	ret    

c001e8b4 <SATA::SATA()>:
c001e8b4:	83 ec 0c             	sub    esp,0xc
c001e8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bb:	83 ec 04             	sub    esp,0x4
c001e8be:	68 00 02 00 00       	push   0x200
c001e8c3:	68 fc 42 02 c0       	push   0xc00242fc
c001e8c8:	50                   	push   eax
c001e8c9:	e8 7c ab fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	ba 6c 43 02 c0       	mov    edx,0xc002436c
c001e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8da:	89 10                	mov    DWORD PTR [eax],edx
c001e8dc:	90                   	nop
c001e8dd:	83 c4 0c             	add    esp,0xc
c001e8e0:	c3                   	ret    
c001e8e1:	90                   	nop

c001e8e2 <SATA::access(unsigned long long, int, void*, bool)>:
c001e8e2:	55                   	push   ebp
c001e8e3:	57                   	push   edi
c001e8e4:	56                   	push   esi
c001e8e5:	53                   	push   ebx
c001e8e6:	83 ec 2c             	sub    esp,0x2c
c001e8e9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e8ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e8f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e8f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e8f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e8fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e901:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e905:	fa                   	cli    
c001e906:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e90c:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e911:	7e 10                	jle    c001e923 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	68 0c 43 02 c0       	push   0xc002430c
c001e91b:	e8 d6 02 ff ff       	call   c000ebf6 <KePanic(char const*)>
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e929:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001e92f:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e935:	89 e8                	mov    eax,ebp
c001e937:	c1 e0 07             	shl    eax,0x7
c001e93a:	01 d0                	add    eax,edx
c001e93c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e946:	8d 45 02             	lea    eax,[ebp+0x2]
c001e949:	51                   	push   ecx
c001e94a:	c1 e0 07             	shl    eax,0x7
c001e94d:	51                   	push   ecx
c001e94e:	01 d0                	add    eax,edx
c001e950:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001e954:	50                   	push   eax
c001e955:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e95b:	e8 ee ed ff ff       	call   c001d74e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e960:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e964:	83 c4 10             	add    esp,0x10
c001e967:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001e96c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e970:	0f 84 a6 01 00 00    	je     c001eb1c <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001e976:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e97a:	c1 e0 09             	shl    eax,0x9
c001e97d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e982:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e986:	74 0e                	je     c001e996 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001e988:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e98e:	89 c1                	mov    ecx,eax
c001e990:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e994:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e996:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e99a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e9a0:	8d 45 02             	lea    eax,[ebp+0x2]
c001e9a3:	c1 e0 07             	shl    eax,0x7
c001e9a6:	01 d0                	add    eax,edx
c001e9a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9aa:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e9b0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e9b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9ba:	c1 e1 05             	shl    ecx,0x5
c001e9bd:	01 c8                	add    eax,ecx
c001e9bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e9c3:	83 e1 01             	and    ecx,0x1
c001e9c6:	89 ce                	mov    esi,ecx
c001e9c8:	8a 08                	mov    cl,BYTE PTR [eax]
c001e9ca:	c1 e6 06             	shl    esi,0x6
c001e9cd:	83 e1 bf             	and    ecx,0xffffffbf
c001e9d0:	09 f1                	or     ecx,esi
c001e9d2:	88 08                	mov    BYTE PTR [eax],cl
c001e9d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e9d6:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e9dc:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e9e2:	89 08                	mov    DWORD PTR [eax],ecx
c001e9e4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e9ea:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e9f0:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e9f6:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e9f9:	50                   	push   eax
c001e9fa:	68 90 00 00 00       	push   0x90
c001e9ff:	6a 00                	push   0x0
c001ea01:	56                   	push   esi
c001ea02:	e8 e9 1a fe ff       	call   c00004f0 <memset>
c001ea07:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ea0d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ea13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea17:	83 c4 10             	add    esp,0x10
c001ea1a:	48                   	dec    eax
c001ea1b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ea20:	89 c1                	mov    ecx,eax
c001ea22:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ea28:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ea2d:	09 c8                	or     eax,ecx
c001ea2f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ea35:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ea3b:	83 c8 80             	or     eax,0xffffff80
c001ea3e:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ea44:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ea47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea4b:	25 00 7f 00 00       	and    eax,0x7f00
c001ea50:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ea55:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ea5a:	66 89 06             	mov    WORD PTR [esi],ax
c001ea5d:	b0 35                	mov    al,0x35
c001ea5f:	75 02                	jne    c001ea63 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001ea61:	b0 25                	mov    al,0x25
c001ea63:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ea66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea6a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ea6e:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ea72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea76:	c1 e8 10             	shr    eax,0x10
c001ea79:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ea7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea80:	c1 e8 18             	shr    eax,0x18
c001ea83:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ea86:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ea8a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ea8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea91:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ea94:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ea98:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ea9c:	89 ee                	mov    esi,ebp
c001ea9e:	31 c0                	xor    eax,eax
c001eaa0:	c1 e6 07             	shl    esi,0x7
c001eaa3:	01 d6                	add    esi,edx
c001eaa5:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001eaab:	80 e1 88             	and    cl,0x88
c001eaae:	74 0a                	je     c001eaba <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001eab0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eab5:	74 0a                	je     c001eac1 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001eab7:	40                   	inc    eax
c001eab8:	eb eb                	jmp    c001eaa5 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001eaba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eabf:	75 0a                	jne    c001eacb <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001eac1:	83 ec 0c             	sub    esp,0xc
c001eac4:	68 45 43 02 c0       	push   0xc0024345
c001eac9:	eb 34                	jmp    c001eaff <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001eacb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001eacf:	c1 e5 07             	shl    ebp,0x7
c001ead2:	b8 01 00 00 00       	mov    eax,0x1
c001ead7:	01 ea                	add    edx,ebp
c001ead9:	d3 e0                	shl    eax,cl
c001eadb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001eae1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001eae7:	85 c8                	test   eax,ecx
c001eae9:	74 25                	je     c001eb10 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001eaeb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001eaf1:	0f ba e1 1e          	bt     ecx,0x1e
c001eaf5:	73 ea                	jae    c001eae1 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001eaf7:	83 ec 0c             	sub    esp,0xc
c001eafa:	68 53 43 02 c0       	push   0xc0024353
c001eaff:	e8 4a 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eb04:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001eb0b:	83 c4 10             	add    esp,0x10
c001eb0e:	eb 13                	jmp    c001eb23 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001eb10:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001eb16:	0f ba e0 1e          	bt     eax,0x1e
c001eb1a:	73 18                	jae    c001eb34 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001eb1c:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001eb23:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001eb2a:	75 01                	jne    c001eb2d <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001eb2c:	fb                   	sti    
c001eb2d:	b8 01 00 00 00       	mov    eax,0x1
c001eb32:	eb 2c                	jmp    c001eb60 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001eb34:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001eb39:	75 10                	jne    c001eb4b <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001eb3b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001eb41:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb4b:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001eb52:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001eb57:	85 c0                	test   eax,eax
c001eb59:	75 03                	jne    c001eb5e <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001eb5b:	fb                   	sti    
c001eb5c:	eb 02                	jmp    c001eb60 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001eb5e:	31 c0                	xor    eax,eax
c001eb60:	83 c4 2c             	add    esp,0x2c
c001eb63:	5b                   	pop    ebx
c001eb64:	5e                   	pop    esi
c001eb65:	5f                   	pop    edi
c001eb66:	5d                   	pop    ebp
c001eb67:	c3                   	ret    

c001eb68 <SATA::read(unsigned long long, int, void*)>:
c001eb68:	57                   	push   edi
c001eb69:	b8 04 00 00 00       	mov    eax,0x4
c001eb6e:	56                   	push   esi
c001eb6f:	53                   	push   ebx
c001eb70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eb78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eb7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001eb80:	8d 7a ff             	lea    edi,[edx-0x1]
c001eb83:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001eb89:	77 25                	ja     c001ebb0 <SATA::read(unsigned long long, int, void*)+0x48>
c001eb8b:	85 f6                	test   esi,esi
c001eb8d:	b8 06 00 00 00       	mov    eax,0x6
c001eb92:	74 1c                	je     c001ebb0 <SATA::read(unsigned long long, int, void*)+0x48>
c001eb94:	50                   	push   eax
c001eb95:	50                   	push   eax
c001eb96:	6a 00                	push   0x0
c001eb98:	56                   	push   esi
c001eb99:	52                   	push   edx
c001eb9a:	53                   	push   ebx
c001eb9b:	51                   	push   ecx
c001eb9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eba0:	e8 3d fd ff ff       	call   c001e8e2 <SATA::access(unsigned long long, int, void*, bool)>
c001eba5:	83 c4 20             	add    esp,0x20
c001eba8:	85 c0                	test   eax,eax
c001ebaa:	0f 95 c0             	setne  al
c001ebad:	0f b6 c0             	movzx  eax,al
c001ebb0:	5b                   	pop    ebx
c001ebb1:	5e                   	pop    esi
c001ebb2:	5f                   	pop    edi
c001ebb3:	c3                   	ret    

c001ebb4 <SATA::write(unsigned long long, int, void*)>:
c001ebb4:	55                   	push   ebp
c001ebb5:	b8 04 00 00 00       	mov    eax,0x4
c001ebba:	57                   	push   edi
c001ebbb:	56                   	push   esi
c001ebbc:	53                   	push   ebx
c001ebbd:	83 ec 0c             	sub    esp,0xc
c001ebc0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ebc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ebc8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ebcc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ebd0:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ebd3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ebd9:	77 3d                	ja     c001ec18 <SATA::write(unsigned long long, int, void*)+0x64>
c001ebdb:	85 ed                	test   ebp,ebp
c001ebdd:	b8 06 00 00 00       	mov    eax,0x6
c001ebe2:	74 34                	je     c001ec18 <SATA::write(unsigned long long, int, void*)+0x64>
c001ebe4:	c1 e3 09             	shl    ebx,0x9
c001ebe7:	01 eb                	add    ebx,ebp
c001ebe9:	50                   	push   eax
c001ebea:	89 d6                	mov    esi,edx
c001ebec:	50                   	push   eax
c001ebed:	83 c6 01             	add    esi,0x1
c001ebf0:	6a 01                	push   0x1
c001ebf2:	89 cf                	mov    edi,ecx
c001ebf4:	55                   	push   ebp
c001ebf5:	83 d7 00             	adc    edi,0x0
c001ebf8:	6a 01                	push   0x1
c001ebfa:	81 c5 00 02 00 00    	add    ebp,0x200
c001ec00:	51                   	push   ecx
c001ec01:	52                   	push   edx
c001ec02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ec06:	e8 d7 fc ff ff       	call   c001e8e2 <SATA::access(unsigned long long, int, void*, bool)>
c001ec0b:	83 c4 20             	add    esp,0x20
c001ec0e:	39 dd                	cmp    ebp,ebx
c001ec10:	89 f2                	mov    edx,esi
c001ec12:	89 f9                	mov    ecx,edi
c001ec14:	75 d3                	jne    c001ebe9 <SATA::write(unsigned long long, int, void*)+0x35>
c001ec16:	31 c0                	xor    eax,eax
c001ec18:	83 c4 0c             	add    esp,0xc
c001ec1b:	5b                   	pop    ebx
c001ec1c:	5e                   	pop    esi
c001ec1d:	5f                   	pop    edi
c001ec1e:	5d                   	pop    ebp
c001ec1f:	c3                   	ret    

c001ec20 <SATAPI::write(unsigned long long, int, void*)>:
c001ec20:	b8 03 00 00 00       	mov    eax,0x3
c001ec25:	c3                   	ret    

c001ec26 <SATAPI::close(int, int, void*)>:
c001ec26:	83 ec 0c             	sub    esp,0xc
c001ec29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec33:	85 c0                	test   eax,eax
c001ec35:	74 0c                	je     c001ec43 <SATAPI::close(int, int, void*)+0x1d>
c001ec37:	8b 10                	mov    edx,DWORD PTR [eax]
c001ec39:	83 ec 0c             	sub    esp,0xc
c001ec3c:	50                   	push   eax
c001ec3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	31 c0                	xor    eax,eax
c001ec45:	83 c4 0c             	add    esp,0xc
c001ec48:	c3                   	ret    
c001ec49:	90                   	nop

c001ec4a <SATAPI::SATAPI()>:
c001ec4a:	83 ec 0c             	sub    esp,0xc
c001ec4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec51:	83 ec 04             	sub    esp,0x4
c001ec54:	68 00 08 00 00       	push   0x800
c001ec59:	68 9c 43 02 c0       	push   0xc002439c
c001ec5e:	50                   	push   eax
c001ec5f:	e8 e6 a7 fe ff       	call   c000944a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ec64:	83 c4 10             	add    esp,0x10
c001ec67:	ba 90 44 02 c0       	mov    edx,0xc0024490
c001ec6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec70:	89 10                	mov    DWORD PTR [eax],edx
c001ec72:	90                   	nop
c001ec73:	83 c4 0c             	add    esp,0xc
c001ec76:	c3                   	ret    
c001ec77:	90                   	nop

c001ec78 <SATAPI::diskRemoved()>:
c001ec78:	c3                   	ret    
c001ec79:	90                   	nop

c001ec7a <SATAPI::diskInserted()>:
c001ec7a:	83 ec 18             	sub    esp,0x18
c001ec7d:	68 a8 43 02 c0       	push   0xc00243a8
c001ec82:	e8 c7 82 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ec87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec8b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ec92:	83 c4 1c             	add    esp,0x1c
c001ec95:	c3                   	ret    

c001ec96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ec96:	55                   	push   ebp
c001ec97:	57                   	push   edi
c001ec98:	56                   	push   esi
c001ec99:	53                   	push   ebx
c001ec9a:	83 ec 34             	sub    esp,0x34
c001ec9d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001eca1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001eca5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eca9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ecad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ecb1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ecb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ecbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ecc1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ecc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001eccb:	83 c0 02             	add    eax,0x2
c001ecce:	c1 e0 07             	shl    eax,0x7
c001ecd1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ecd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ecdd:	c1 e0 07             	shl    eax,0x7
c001ece0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ece4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ece8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ecf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ecf6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ecfc:	e8 4d ea ff ff       	call   c001d74e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	89 c2                	mov    edx,eax
c001ed06:	b8 01 00 00 00       	mov    eax,0x1
c001ed0b:	83 fa ff             	cmp    edx,0xffffffff
c001ed0e:	0f 84 5f 02 00 00    	je     c001ef73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001ed14:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ed18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed1c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ed22:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed24:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ed2a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ed30:	89 d1                	mov    ecx,edx
c001ed32:	c1 e1 05             	shl    ecx,0x5
c001ed35:	01 c8                	add    eax,ecx
c001ed37:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed39:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ed3f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ed45:	89 08                	mov    DWORD PTR [eax],ecx
c001ed47:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ed4d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ed53:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ed59:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ed5c:	50                   	push   eax
c001ed5d:	68 90 00 00 00       	push   0x90
c001ed62:	6a 00                	push   0x0
c001ed64:	53                   	push   ebx
c001ed65:	e8 86 17 fe ff       	call   c00004f0 <memset>
c001ed6a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ed6d:	b9 0c 00 00 00       	mov    ecx,0xc
c001ed72:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ed76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ed78:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ed7e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ed82:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ed86:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ed8c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ed90:	48                   	dec    eax
c001ed91:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ed96:	89 c1                	mov    ecx,eax
c001ed98:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ed9e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001eda3:	09 c8                	or     eax,ecx
c001eda5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001edab:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001edb1:	83 c8 80             	or     eax,0xffffff80
c001edb4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001edba:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001edbd:	25 00 7f 00 00       	and    eax,0x7f00
c001edc2:	0d 27 80 ff ff       	or     eax,0xffff8027
c001edc7:	66 89 03             	mov    WORD PTR [ebx],ax
c001edca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edce:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001edd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd6:	c1 e8 10             	shr    eax,0x10
c001edd9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001eddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede0:	c1 e8 18             	shr    eax,0x18
c001ede3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001ede6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001edea:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001eded:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001edf1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001edf4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001edf8:	83 c4 10             	add    esp,0x10
c001edfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001edff:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ee03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee07:	31 c0                	xor    eax,eax
c001ee09:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001ee0f:	80 e1 88             	and    cl,0x88
c001ee12:	74 0a                	je     c001ee1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001ee14:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ee19:	74 0a                	je     c001ee25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001ee1b:	40                   	inc    eax
c001ee1c:	eb eb                	jmp    c001ee09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001ee1e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ee23:	75 43                	jne    c001ee68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001ee25:	83 ec 0c             	sub    esp,0xc
c001ee28:	68 c0 43 02 c0       	push   0xc00243c0
c001ee2d:	e8 1c 81 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ee32:	58                   	pop    eax
c001ee33:	5a                   	pop    edx
c001ee34:	68 d5 43 02 c0       	push   0xc00243d5
c001ee39:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001ee3f:	e8 a2 25 ff ff       	call   c00113e6 <VgaText::puts(char const*)>
c001ee44:	59                   	pop    ecx
c001ee45:	5b                   	pop    ebx
c001ee46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ee4a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ee50:	e8 93 e9 ff ff       	call   c001d7e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ee55:	5e                   	pop    esi
c001ee56:	5f                   	pop    edi
c001ee57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ee5b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ee61:	e8 62 e9 ff ff       	call   c001d7c8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ee66:	eb 48                	jmp    c001eeb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001ee68:	b8 01 00 00 00       	mov    eax,0x1
c001ee6d:	88 d1                	mov    cl,dl
c001ee6f:	d3 e0                	shl    eax,cl
c001ee71:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001ee76:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001ee7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ee80:	89 c7                	mov    edi,eax
c001ee82:	c1 e3 07             	shl    ebx,0x7
c001ee85:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001ee89:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001ee8f:	85 c7                	test   edi,eax
c001ee91:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001ee97:	0f 84 a3 00 00 00    	je     c001ef40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001ee9d:	0f ba e0 1e          	bt     eax,0x1e
c001eea1:	73 1a                	jae    c001eebd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001eea3:	83 ec 0c             	sub    esp,0xc
c001eea6:	68 e7 43 02 c0       	push   0xc00243e7
c001eeab:	e8 9e 80 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eeb0:	83 c4 10             	add    esp,0x10
c001eeb3:	b8 01 00 00 00       	mov    eax,0x1
c001eeb8:	e9 b6 00 00 00       	jmp    c001ef73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001eebd:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001eec3:	83 f8 0d             	cmp    eax,0xd
c001eec6:	77 0a                	ja     c001eed2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	68 c8 00 00 00       	push   0xc8
c001eed0:	eb 28                	jmp    c001eefa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001eed2:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001eed8:	83 f8 0d             	cmp    eax,0xd
c001eedb:	77 0a                	ja     c001eee7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001eedd:	83 ec 0c             	sub    esp,0xc
c001eee0:	68 58 02 00 00       	push   0x258
c001eee5:	eb 13                	jmp    c001eefa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001eee7:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001eeed:	83 f8 06             	cmp    eax,0x6
c001eef0:	77 10                	ja     c001ef02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001eef2:	83 ec 0c             	sub    esp,0xc
c001eef5:	68 dc 05 00 00       	push   0x5dc
c001eefa:	e8 41 69 ff ff       	call   c0015840 <milliTenthSleep(unsigned int)>
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ef06:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ef09:	75 06                	jne    c001ef11 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001ef0b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ef0f:	74 15                	je     c001ef26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001ef11:	83 fe 06             	cmp    esi,0x6
c001ef14:	77 10                	ja     c001ef26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001ef16:	83 ec 0c             	sub    esp,0xc
c001ef19:	68 c4 09 00 00       	push   0x9c4
c001ef1e:	e8 1d 69 ff ff       	call   c0015840 <milliTenthSleep(unsigned int)>
c001ef23:	83 c4 10             	add    esp,0x10
c001ef26:	46                   	inc    esi
c001ef27:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001ef2d:	0f 85 56 ff ff ff    	jne    c001ee89 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001ef33:	83 ec 0c             	sub    esp,0xc
c001ef36:	68 fa 43 02 c0       	push   0xc00243fa
c001ef3b:	e9 6b ff ff ff       	jmp    c001eeab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ef40:	0f ba e0 1e          	bt     eax,0x1e
c001ef44:	73 0d                	jae    c001ef53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001ef46:	83 ec 0c             	sub    esp,0xc
c001ef49:	68 0e 44 02 c0       	push   0xc002440e
c001ef4e:	e9 58 ff ff ff       	jmp    c001eeab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ef53:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ef58:	74 17                	je     c001ef71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001ef5a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ef5f:	74 10                	je     c001ef71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001ef61:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ef67:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ef6b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ef6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ef71:	31 c0                	xor    eax,eax
c001ef73:	83 c4 2c             	add    esp,0x2c
c001ef76:	5b                   	pop    ebx
c001ef77:	5e                   	pop    esi
c001ef78:	5f                   	pop    edi
c001ef79:	5d                   	pop    ebp
c001ef7a:	c3                   	ret    
c001ef7b:	90                   	nop

c001ef7c <SATAPI::eject()>:
c001ef7c:	57                   	push   edi
c001ef7d:	b9 03 00 00 00       	mov    ecx,0x3
c001ef82:	83 ec 18             	sub    esp,0x18
c001ef85:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef89:	fc                   	cld    
c001ef8a:	31 c0                	xor    eax,eax
c001ef8c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef8e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef93:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef98:	50                   	push   eax
c001ef99:	6a 00                	push   0x0
c001ef9b:	6a 00                	push   0x0
c001ef9d:	6a 00                	push   0x0
c001ef9f:	6a 00                	push   0x0
c001efa1:	6a 02                	push   0x2
c001efa3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001efa7:	50                   	push   eax
c001efa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001efac:	e8 e5 fc ff ff       	call   c001ec96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001efb1:	83 c4 38             	add    esp,0x38
c001efb4:	31 c0                	xor    eax,eax
c001efb6:	5f                   	pop    edi
c001efb7:	c3                   	ret    

c001efb8 <SATAPI::detectMedia()>:
c001efb8:	53                   	push   ebx
c001efb9:	83 ec 14             	sub    esp,0x14
c001efbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001efc0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001efc6:	e8 11 ba fe ff       	call   c000a9dc <VCache::writeWriteBuffer()>
c001efcb:	59                   	pop    ecx
c001efcc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001efd2:	e8 f5 b9 fe ff       	call   c000a9cc <VCache::invalidateReadBuffer()>
c001efd7:	c7 04 24 23 44 02 c0 	mov    DWORD PTR [esp],0xc0024423
c001efde:	e8 6b 7f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001efe3:	83 c4 10             	add    esp,0x10
c001efe6:	31 c0                	xor    eax,eax
c001efe8:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001efef:	85 d2                	test   edx,edx
c001eff1:	74 0f                	je     c001f002 <SATAPI::detectMedia()+0x4a>
c001eff3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001eff9:	75 07                	jne    c001f002 <SATAPI::detectMedia()+0x4a>
c001effb:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001f002:	40                   	inc    eax
c001f003:	83 f8 1a             	cmp    eax,0x1a
c001f006:	75 e0                	jne    c001efe8 <SATAPI::detectMedia()+0x30>
c001f008:	83 c4 08             	add    esp,0x8
c001f00b:	5b                   	pop    ebx
c001f00c:	c3                   	ret    
c001f00d:	90                   	nop

c001f00e <SATAPI::open(int, int, void*)>:
c001f00e:	56                   	push   esi
c001f00f:	53                   	push   ebx
c001f010:	51                   	push   ecx
c001f011:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f019:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f023:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f029:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f02d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f037:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f041:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f048:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f04e:	e8 9d fd fe ff       	call   c000edf0 <Phys::allocatePage()>
c001f053:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f059:	89 c6                	mov    esi,eax
c001f05b:	e8 90 fd fe ff       	call   c000edf0 <Phys::allocatePage()>
c001f060:	81 c6 00 10 00 00    	add    esi,0x1000
c001f066:	39 c6                	cmp    esi,eax
c001f068:	74 10                	je     c001f07a <SATAPI::open(int, int, void*)+0x6c>
c001f06a:	83 ec 0c             	sub    esp,0xc
c001f06d:	68 38 44 02 c0       	push   0xc0024438
c001f072:	e8 7f fb fe ff       	call   c000ebf6 <KePanic(char const*)>
c001f077:	83 c4 10             	add    esp,0x10
c001f07a:	83 ec 0c             	sub    esp,0xc
c001f07d:	6a 02                	push   0x2
c001f07f:	e8 6f 2f ff ff       	call   c0011ff3 <Virt::allocateKernelVirtualPages(int)>
c001f084:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f08a:	6a 03                	push   0x3
c001f08c:	50                   	push   eax
c001f08d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f093:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001f099:	e8 2e 36 ff ff       	call   c00126cc <VAS::mapPage(unsigned long, unsigned long, int)>
c001f09e:	83 c4 14             	add    esp,0x14
c001f0a1:	68 78 01 00 00       	push   0x178
c001f0a6:	e8 05 f8 fe ff       	call   c000e8b0 <malloc>
c001f0ab:	83 c4 0c             	add    esp,0xc
c001f0ae:	6a 00                	push   0x0
c001f0b0:	68 ff ff ff 7f       	push   0x7fffffff
c001f0b5:	6a 00                	push   0x0
c001f0b7:	6a 00                	push   0x0
c001f0b9:	53                   	push   ebx
c001f0ba:	68 4e 44 02 c0       	push   0xc002444e
c001f0bf:	89 c6                	mov    esi,eax
c001f0c1:	50                   	push   eax
c001f0c2:	e8 b9 ad fe ff       	call   c0009e80 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f0c7:	83 c4 14             	add    esp,0x14
c001f0ca:	56                   	push   esi
c001f0cb:	e8 70 ae fe ff       	call   c0009f40 <LogicalDisk::assignDriveLetter()>
c001f0d0:	5a                   	pop    edx
c001f0d1:	59                   	pop    ecx
c001f0d2:	0f be c0             	movsx  eax,al
c001f0d5:	50                   	push   eax
c001f0d6:	68 94 42 02 c0       	push   0xc0024294
c001f0db:	e8 6e 7e fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f0e0:	58                   	pop    eax
c001f0e1:	5a                   	pop    edx
c001f0e2:	56                   	push   esi
c001f0e3:	53                   	push   ebx
c001f0e4:	e8 7d 9f fe ff       	call   c0009066 <Device::addChild(Device*)>
c001f0e9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001f0ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f0f2:	e8 bb a3 fe ff       	call   c00094b2 <PhysicalDisk::startCache()>
c001f0f7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f0fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f101:	e8 b2 fe ff ff       	call   c001efb8 <SATAPI::detectMedia()>
c001f106:	83 c4 14             	add    esp,0x14
c001f109:	31 c0                	xor    eax,eax
c001f10b:	5b                   	pop    ebx
c001f10c:	5e                   	pop    esi
c001f10d:	c3                   	ret    

c001f10e <SATAPI::read(unsigned long long, int, void*)>:
c001f10e:	55                   	push   ebp
c001f10f:	57                   	push   edi
c001f110:	56                   	push   esi
c001f111:	53                   	push   ebx
c001f112:	83 ec 3c             	sub    esp,0x3c
c001f115:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001f119:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f11d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f121:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f125:	83 fd 04             	cmp    ebp,0x4
c001f128:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f12c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f130:	7e 10                	jle    c001f142 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001f132:	83 ec 0c             	sub    esp,0xc
c001f135:	68 5c 44 02 c0       	push   0xc002445c
c001f13a:	e8 b7 fa fe ff       	call   c000ebf6 <KePanic(char const*)>
c001f13f:	83 c4 10             	add    esp,0x10
c001f142:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f148:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f14e:	51                   	push   ecx
c001f14f:	50                   	push   eax
c001f150:	83 c0 02             	add    eax,0x2
c001f153:	c1 e0 07             	shl    eax,0x7
c001f156:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001f15c:	50                   	push   eax
c001f15d:	52                   	push   edx
c001f15e:	e8 af e6 ff ff       	call   c001d812 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f163:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f167:	b9 03 00 00 00       	mov    ecx,0x3
c001f16c:	fc                   	cld    
c001f16d:	31 c0                	xor    eax,eax
c001f16f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f171:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001f176:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001f17b:	83 c4 0c             	add    esp,0xc
c001f17e:	6a 00                	push   0x0
c001f180:	6a 00                	push   0x0
c001f182:	6a 00                	push   0x0
c001f184:	6a 00                	push   0x0
c001f186:	6a 02                	push   0x2
c001f188:	8d 44 24 30          	lea    eax,[esp+0x30]
c001f18c:	50                   	push   eax
c001f18d:	53                   	push   ebx
c001f18e:	e8 03 fb ff ff       	call   c001ec96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f193:	83 c4 20             	add    esp,0x20
c001f196:	85 c0                	test   eax,eax
c001f198:	89 c6                	mov    esi,eax
c001f19a:	75 46                	jne    c001f1e2 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001f19c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f1a0:	b9 03 00 00 00       	mov    ecx,0x3
c001f1a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f1a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1ab:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001f1b0:	0f c8                	bswap  eax
c001f1b2:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001f1b6:	89 e8                	mov    eax,ebp
c001f1b8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001f1bc:	50                   	push   eax
c001f1bd:	55                   	push   ebp
c001f1be:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001f1c2:	c1 e5 0b             	shl    ebp,0xb
c001f1c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1cd:	55                   	push   ebp
c001f1ce:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001f1d2:	50                   	push   eax
c001f1d3:	53                   	push   ebx
c001f1d4:	e8 bd fa ff ff       	call   c001ec96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f1d9:	83 c4 20             	add    esp,0x20
c001f1dc:	85 c0                	test   eax,eax
c001f1de:	89 c6                	mov    esi,eax
c001f1e0:	74 0c                	je     c001f1ee <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001f1e2:	83 ec 0c             	sub    esp,0xc
c001f1e5:	53                   	push   ebx
c001f1e6:	e8 cd fd ff ff       	call   c001efb8 <SATAPI::detectMedia()>
c001f1eb:	83 c4 10             	add    esp,0x10
c001f1ee:	83 c4 3c             	add    esp,0x3c
c001f1f1:	89 f0                	mov    eax,esi
c001f1f3:	5b                   	pop    ebx
c001f1f4:	5e                   	pop    esi
c001f1f5:	5f                   	pop    edi
c001f1f6:	5d                   	pop    ebp
c001f1f7:	c3                   	ret    

c001f1f8 <IOAPIC::close(int, int, void*)>:
c001f1f8:	b8 00 00 00 00       	mov    eax,0x0
c001f1fd:	c3                   	ret    

c001f1fe <apicGetBase()>:
c001f1fe:	55                   	push   ebp
c001f1ff:	89 e5                	mov    ebp,esp
c001f201:	83 ec 08             	sub    esp,0x8
c001f204:	83 ec 0c             	sub    esp,0xc
c001f207:	68 c0 44 02 c0       	push   0xc00244c0
c001f20c:	e8 e5 f9 fe ff       	call   c000ebf6 <KePanic(char const*)>
c001f211:	83 c4 10             	add    esp,0x10
c001f214:	b8 00 00 00 00       	mov    eax,0x0
c001f219:	c9                   	leave  
c001f21a:	c3                   	ret    
c001f21b:	90                   	nop

c001f21c <IOAPIC::IOAPIC()>:
c001f21c:	83 ec 0c             	sub    esp,0xc
c001f21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f223:	83 ec 08             	sub    esp,0x8
c001f226:	68 cf 44 02 c0       	push   0xc00244cf
c001f22b:	50                   	push   eax
c001f22c:	e8 97 9f fe ff       	call   c00091c8 <Device::Device(char const*)>
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	ba f0 44 02 c0       	mov    edx,0xc00244f0
c001f239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23d:	89 10                	mov    DWORD PTR [eax],edx
c001f23f:	90                   	nop
c001f240:	83 c4 0c             	add    esp,0xc
c001f243:	c3                   	ret    

c001f244 <apicOpen()>:
c001f244:	55                   	push   ebp
c001f245:	89 e5                	mov    ebp,esp
c001f247:	53                   	push   ebx
c001f248:	83 ec 34             	sub    esp,0x34
c001f24b:	83 ec 0c             	sub    esp,0xc
c001f24e:	68 d7 44 02 c0       	push   0xc00244d7
c001f253:	e8 f6 7c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f258:	83 c4 10             	add    esp,0x10
c001f25b:	a0 20 e1 02 c0       	mov    al,ds:0xc002e120
c001f260:	83 f0 01             	xor    eax,0x1
c001f263:	0f b6 c0             	movzx  eax,al
c001f266:	85 c0                	test   eax,eax
c001f268:	0f 84 a3 00 00 00    	je     c001f311 <apicOpen()+0xcd>
c001f26e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001f272:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001f277:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f27b:	0f b6 c0             	movzx  eax,al
c001f27e:	39 c2                	cmp    edx,eax
c001f280:	0f 83 84 00 00 00    	jae    c001f30a <apicOpen()+0xc6>
c001f286:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001f28d:	83 ec 0c             	sub    esp,0xc
c001f290:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f293:	e8 18 f6 fe ff       	call   c000e8b0 <malloc>
c001f298:	83 c4 10             	add    esp,0x10
c001f29b:	89 c3                	mov    ebx,eax
c001f29d:	83 ec 0c             	sub    esp,0xc
c001f2a0:	53                   	push   ebx
c001f2a1:	e8 76 ff ff ff       	call   c001f21c <IOAPIC::IOAPIC()>
c001f2a6:	83 c4 10             	add    esp,0x10
c001f2a9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001f2ac:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001f2b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001f2b3:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001f2ba:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c001f2bf:	83 c0 01             	add    eax,0x1
c001f2c2:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001f2c7:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001f2cc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001f2d2:	83 ec 08             	sub    esp,0x8
c001f2d5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f2d8:	50                   	push   eax
c001f2d9:	e8 88 9d fe ff       	call   c0009066 <Device::addChild(Device*)>
c001f2de:	83 c4 10             	add    esp,0x10
c001f2e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f2e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2e6:	83 c0 08             	add    eax,0x8
c001f2e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2eb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f2ef:	6a 00                	push   0x0
c001f2f1:	6a 00                	push   0x0
c001f2f3:	52                   	push   edx
c001f2f4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f2f7:	ff d0                	call   eax
c001f2f9:	83 c4 10             	add    esp,0x10
c001f2fc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f2ff:	83 c0 01             	add    eax,0x1
c001f302:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f305:	e9 68 ff ff ff       	jmp    c001f272 <apicOpen()+0x2e>
c001f30a:	c6 05 20 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e120,0x1
c001f311:	e8 e8 fe ff ff       	call   c001f1fe <apicGetBase()>
c001f316:	05 f0 00 00 00       	add    eax,0xf0
c001f31b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f31e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f321:	8b 00                	mov    eax,DWORD PTR [eax]
c001f323:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f326:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f32d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f334:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f337:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f33a:	89 10                	mov    DWORD PTR [eax],edx
c001f33c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f343:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001f348:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f34b:	7d 7c                	jge    c001f3c9 <apicOpen()+0x185>
c001f34d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f350:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f357:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f35a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f35d:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f364:	c1 e8 08             	shr    eax,0x8
c001f367:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f36b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f36e:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f375:	c1 e8 18             	shr    eax,0x18
c001f378:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f37b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f37f:	3d ff 00 00 00       	cmp    eax,0xff
c001f384:	75 3a                	jne    c001f3c0 <apicOpen()+0x17c>
c001f386:	e8 73 fe ff ff       	call   c001f1fe <apicGetBase()>
c001f38b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f38f:	83 fa 01             	cmp    edx,0x1
c001f392:	75 07                	jne    c001f39b <apicOpen()+0x157>
c001f394:	ba 60 03 00 00       	mov    edx,0x360
c001f399:	eb 05                	jmp    c001f3a0 <apicOpen()+0x15c>
c001f39b:	ba 50 03 00 00       	mov    edx,0x350
c001f3a0:	01 d0                	add    eax,edx
c001f3a2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f3a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f3a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3aa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f3ad:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f3b4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f3b8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f3bb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f3be:	89 10                	mov    DWORD PTR [eax],edx
c001f3c0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f3c4:	e9 7a ff ff ff       	jmp    c001f343 <apicOpen()+0xff>
c001f3c9:	90                   	nop
c001f3ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f3cd:	c9                   	leave  
c001f3ce:	c3                   	ret    
c001f3cf:	90                   	nop

c001f3d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f3d0:	55                   	push   ebp
c001f3d1:	89 e5                	mov    ebp,esp
c001f3d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f3d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f3dc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f3df:	72 1d                	jb     c001f3fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f3e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f3e4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f3ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f3ed:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f3f3:	01 d0                	add    eax,edx
c001f3f5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f3f8:	73 04                	jae    c001f3fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f3fa:	b0 01                	mov    al,0x1
c001f3fc:	eb 02                	jmp    c001f400 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f3fe:	b0 00                	mov    al,0x0
c001f400:	5d                   	pop    ebp
c001f401:	c3                   	ret    

c001f402 <IOAPIC::read(int)>:
c001f402:	55                   	push   ebp
c001f403:	89 e5                	mov    ebp,esp
c001f405:	83 ec 10             	sub    esp,0x10
c001f408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f40b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f411:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f414:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f417:	0f b6 d0             	movzx  edx,al
c001f41a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f41d:	89 10                	mov    DWORD PTR [eax],edx
c001f41f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f422:	83 c0 10             	add    eax,0x10
c001f425:	8b 00                	mov    eax,DWORD PTR [eax]
c001f427:	c9                   	leave  
c001f428:	c3                   	ret    
c001f429:	90                   	nop

c001f42a <IOAPIC::open(int, int, void*)>:
c001f42a:	55                   	push   ebp
c001f42b:	89 e5                	mov    ebp,esp
c001f42d:	57                   	push   edi
c001f42e:	56                   	push   esi
c001f42f:	53                   	push   ebx
c001f430:	83 ec 04             	sub    esp,0x4
c001f433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f436:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f439:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f442:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f448:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c001f44f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f452:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f45b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f461:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c001f468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f46b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f474:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f47d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f483:	0f b6 f0             	movzx  esi,al
c001f486:	89 d0                	mov    eax,edx
c001f488:	ba 00 00 00 00       	mov    edx,0x0
c001f48d:	89 c7                	mov    edi,eax
c001f48f:	83 e7 ff             	and    edi,0xffffffff
c001f492:	89 f9                	mov    ecx,edi
c001f494:	0f b6 da             	movzx  ebx,dl
c001f497:	89 c8                	mov    eax,ecx
c001f499:	89 da                	mov    edx,ebx
c001f49b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f49e:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f4a1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f4a5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f4a9:	83 e0 00             	and    eax,0x0
c001f4ac:	09 d0                	or     eax,edx
c001f4ae:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4b5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f4bb:	8d 50 01             	lea    edx,[eax+0x1]
c001f4be:	88 d1                	mov    cl,dl
c001f4c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f4c3:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f4c9:	0f b6 d0             	movzx  edx,al
c001f4cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4cf:	83 c2 08             	add    edx,0x8
c001f4d2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f4d6:	0f b6 c9             	movzx  ecx,cl
c001f4d9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f4df:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f4e3:	6a 01                	push   0x1
c001f4e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f4e8:	e8 15 ff ff ff       	call   c001f402 <IOAPIC::read(int)>
c001f4ed:	83 c4 08             	add    esp,0x8
c001f4f0:	c1 f8 10             	sar    eax,0x10
c001f4f3:	0f b6 c0             	movzx  eax,al
c001f4f6:	8d 50 01             	lea    edx,[eax+0x1]
c001f4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4fc:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f502:	b8 00 00 00 00       	mov    eax,0x0
c001f507:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f50a:	5b                   	pop    ebx
c001f50b:	5e                   	pop    esi
c001f50c:	5f                   	pop    edi
c001f50d:	5d                   	pop    ebp
c001f50e:	c3                   	ret    
c001f50f:	90                   	nop

c001f510 <IOAPIC::write(int, int)>:
c001f510:	55                   	push   ebp
c001f511:	89 e5                	mov    ebp,esp
c001f513:	83 ec 10             	sub    esp,0x10
c001f516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f519:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f51f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f522:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f525:	0f b6 d0             	movzx  edx,al
c001f528:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f52b:	89 10                	mov    DWORD PTR [eax],edx
c001f52d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f530:	8d 50 10             	lea    edx,[eax+0x10]
c001f533:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f536:	89 02                	mov    DWORD PTR [edx],eax
c001f538:	90                   	nop
c001f539:	c9                   	leave  
c001f53a:	c3                   	ret    
c001f53b:	90                   	nop

c001f53c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f53c:	55                   	push   ebp
c001f53d:	89 e5                	mov    ebp,esp
c001f53f:	53                   	push   ebx
c001f540:	83 ec 2c             	sub    esp,0x2c
c001f543:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f546:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f549:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f54c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f54f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f552:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f555:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f558:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f55b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f55e:	88 d8                	mov    al,bl
c001f560:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f563:	88 c8                	mov    al,cl
c001f565:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f568:	88 d0                	mov    al,dl
c001f56a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f56d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f571:	83 c0 08             	add    eax,0x8
c001f574:	d1 e0                	shl    eax,1
c001f576:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f579:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f57d:	83 c0 08             	add    eax,0x8
c001f580:	d1 e0                	shl    eax,1
c001f582:	83 c0 01             	add    eax,0x1
c001f585:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f588:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f58b:	50                   	push   eax
c001f58c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f58f:	e8 6e fe ff ff       	call   c001f402 <IOAPIC::read(int)>
c001f594:	83 c4 08             	add    esp,0x8
c001f597:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f59a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f5a1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f5a4:	c1 e0 18             	shl    eax,0x18
c001f5a7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f5aa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f5ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f5b0:	52                   	push   edx
c001f5b1:	50                   	push   eax
c001f5b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f5b5:	e8 56 ff ff ff       	call   c001f510 <IOAPIC::write(int, int)>
c001f5ba:	83 c4 0c             	add    esp,0xc
c001f5bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f5c0:	50                   	push   eax
c001f5c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f5c4:	e8 39 fe ff ff       	call   c001f402 <IOAPIC::read(int)>
c001f5c9:	83 c4 08             	add    esp,0x8
c001f5cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f5cf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f5d6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f5dd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f5e4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f5e8:	85 c0                	test   eax,eax
c001f5ea:	74 09                	je     c001f5f5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f5ec:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f5f3:	eb 07                	jmp    c001f5fc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f5f5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f5fc:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f600:	85 c0                	test   eax,eax
c001f602:	74 09                	je     c001f60d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f604:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f60b:	eb 07                	jmp    c001f614 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f60d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f614:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f61b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f61f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f622:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f625:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f628:	52                   	push   edx
c001f629:	50                   	push   eax
c001f62a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f62d:	e8 de fe ff ff       	call   c001f510 <IOAPIC::write(int, int)>
c001f632:	83 c4 0c             	add    esp,0xc
c001f635:	90                   	nop
c001f636:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f639:	c9                   	leave  
c001f63a:	c3                   	ret    
c001f63b:	90                   	nop

c001f63c <APICTimer::close(int, int, void*)>:
c001f63c:	b8 00 00 00 00       	mov    eax,0x0
c001f641:	c3                   	ret    
c001f642:	66 90                	xchg   ax,ax

c001f644 <apicTimerHandler(regs*, void*)>:
c001f644:	83 ec 0c             	sub    esp,0xc
c001f647:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f64b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f64d:	b8 10 27 00 00       	mov    eax,0x2710
c001f652:	ba 00 00 00 00       	mov    edx,0x0
c001f657:	f7 f1                	div    ecx
c001f659:	83 ec 0c             	sub    esp,0xc
c001f65c:	50                   	push   eax
c001f65d:	e8 da b0 fe ff       	call   c000a73c <timerHandler(unsigned int)>
c001f662:	83 c4 10             	add    esp,0x10
c001f665:	90                   	nop
c001f666:	83 c4 0c             	add    esp,0xc
c001f669:	c3                   	ret    
c001f66a:	66 90                	xchg   ax,ax

c001f66c <APICTimer::open(int, int, void*)>:
c001f66c:	83 ec 0c             	sub    esp,0xc
c001f66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f673:	8b 00                	mov    eax,DWORD PTR [eax]
c001f675:	83 c0 24             	add    eax,0x24
c001f678:	8b 00                	mov    eax,DWORD PTR [eax]
c001f67a:	83 ec 08             	sub    esp,0x8
c001f67d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f685:	ff d0                	call   eax
c001f687:	83 c4 10             	add    esp,0x10
c001f68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f692:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f6a0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f6a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f6aa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f6b0:	83 ec 0c             	sub    esp,0xc
c001f6b3:	51                   	push   ecx
c001f6b4:	6a 01                	push   0x1
c001f6b6:	68 44 f6 01 c0       	push   0xc001f644
c001f6bb:	52                   	push   edx
c001f6bc:	50                   	push   eax
c001f6bd:	e8 50 99 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f6c2:	83 c4 20             	add    esp,0x20
c001f6c5:	89 c2                	mov    edx,eax
c001f6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f6d1:	b8 00 00 00 00       	mov    eax,0x0
c001f6d6:	83 c4 0c             	add    esp,0xc
c001f6d9:	c3                   	ret    
c001f6da:	66 90                	xchg   ax,ax

c001f6dc <APICTimer::write(int)>:
c001f6dc:	83 ec 0c             	sub    esp,0xc
c001f6df:	83 ec 0c             	sub    esp,0xc
c001f6e2:	68 14 45 02 c0       	push   0xc0024514
c001f6e7:	e8 0a f5 fe ff       	call   c000ebf6 <KePanic(char const*)>
c001f6ec:	83 c4 10             	add    esp,0x10
c001f6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f6fd:	90                   	nop
c001f6fe:	83 c4 0c             	add    esp,0xc
c001f701:	c3                   	ret    
c001f702:	66 90                	xchg   ax,ax

c001f704 <APICTimer::APICTimer()>:
c001f704:	83 ec 0c             	sub    esp,0xc
c001f707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70b:	83 ec 08             	sub    esp,0x8
c001f70e:	68 24 45 02 c0       	push   0xc0024524
c001f713:	50                   	push   eax
c001f714:	e8 57 af fe ff       	call   c000a670 <Timer::Timer(char const*)>
c001f719:	83 c4 10             	add    esp,0x10
c001f71c:	ba 38 45 02 c0       	mov    edx,0xc0024538
c001f721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f725:	89 10                	mov    DWORD PTR [eax],edx
c001f727:	90                   	nop
c001f728:	83 c4 0c             	add    esp,0xc
c001f72b:	c3                   	ret    

c001f72c <PIT::write(int)>:
c001f72c:	83 ec 10             	sub    esp,0x10
c001f72f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f733:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f737:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f73d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f741:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c001f746:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f74b:	89 c2                	mov    edx,eax
c001f74d:	c1 fa 1f             	sar    edx,0x1f
c001f750:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f758:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f75f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f764:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f768:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f76d:	ee                   	out    dx,al
c001f76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f772:	0f b6 c0             	movzx  eax,al
c001f775:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f77c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f780:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f784:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f789:	ee                   	out    dx,al
c001f78a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f78e:	c1 f8 08             	sar    eax,0x8
c001f791:	0f b6 c0             	movzx  eax,al
c001f794:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f79b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f79f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f7a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f7a8:	ee                   	out    dx,al
c001f7a9:	90                   	nop
c001f7aa:	83 c4 10             	add    esp,0x10
c001f7ad:	c3                   	ret    
c001f7ae:	66 90                	xchg   ax,ax

c001f7b0 <pitHandler(regs*, void*)>:
c001f7b0:	83 ec 0c             	sub    esp,0xc
c001f7b3:	8b 0d 24 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e124
c001f7b9:	b8 10 27 00 00       	mov    eax,0x2710
c001f7be:	89 c2                	mov    edx,eax
c001f7c0:	c1 fa 1f             	sar    edx,0x1f
c001f7c3:	f7 f9                	idiv   ecx
c001f7c5:	83 ec 0c             	sub    esp,0xc
c001f7c8:	50                   	push   eax
c001f7c9:	e8 6e af fe ff       	call   c000a73c <timerHandler(unsigned int)>
c001f7ce:	83 c4 10             	add    esp,0x10
c001f7d1:	90                   	nop
c001f7d2:	83 c4 0c             	add    esp,0xc
c001f7d5:	c3                   	ret    
c001f7d6:	66 90                	xchg   ax,ax

c001f7d8 <PIT::open(int, int, void*)>:
c001f7d8:	83 ec 0c             	sub    esp,0xc
c001f7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7df:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e1:	83 c0 24             	add    eax,0x24
c001f7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e6:	83 ec 08             	sub    esp,0x8
c001f7e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7f1:	ff d0                	call   eax
c001f7f3:	83 c4 10             	add    esp,0x10
c001f7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fa:	83 ec 0c             	sub    esp,0xc
c001f7fd:	6a 00                	push   0x0
c001f7ff:	6a 01                	push   0x1
c001f801:	68 b0 f7 01 c0       	push   0xc001f7b0
c001f806:	6a 00                	push   0x0
c001f808:	50                   	push   eax
c001f809:	e8 04 98 fe ff       	call   c0009012 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f80e:	83 c4 20             	add    esp,0x20
c001f811:	89 c2                	mov    edx,eax
c001f813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f817:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f81d:	b8 00 00 00 00       	mov    eax,0x0
c001f822:	83 c4 0c             	add    esp,0xc
c001f825:	c3                   	ret    
c001f826:	66 90                	xchg   ax,ax

c001f828 <PIT::close(int, int, void*)>:
c001f828:	83 ec 0c             	sub    esp,0xc
c001f82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83d:	6a 01                	push   0x1
c001f83f:	68 b0 f7 01 c0       	push   0xc001f7b0
c001f844:	6a 00                	push   0x0
c001f846:	50                   	push   eax
c001f847:	e8 fc 97 fe ff       	call   c0009048 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f84c:	83 c4 10             	add    esp,0x10
c001f84f:	b8 00 00 00 00       	mov    eax,0x0
c001f854:	83 c4 0c             	add    esp,0xc
c001f857:	c3                   	ret    

c001f858 <PIT::PIT()>:
c001f858:	83 ec 0c             	sub    esp,0xc
c001f85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85f:	83 ec 08             	sub    esp,0x8
c001f862:	68 60 45 02 c0       	push   0xc0024560
c001f867:	50                   	push   eax
c001f868:	e8 03 ae fe ff       	call   c000a670 <Timer::Timer(char const*)>
c001f86d:	83 c4 10             	add    esp,0x10
c001f870:	ba 88 45 02 c0       	mov    edx,0xc0024588
c001f875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f879:	89 10                	mov    DWORD PTR [eax],edx
c001f87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f885:	0f b6 d0             	movzx  edx,al
c001f888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f897:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f89d:	0f b6 d0             	movzx  edx,al
c001f8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f8b3:	8d 50 01             	lea    edx,[eax+0x1]
c001f8b6:	88 d1                	mov    cl,dl
c001f8b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8bc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f8c2:	0f b6 d0             	movzx  edx,al
c001f8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f8cd:	83 e1 3f             	and    ecx,0x3f
c001f8d0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f8d4:	90                   	nop
c001f8d5:	83 c4 0c             	add    esp,0xc
c001f8d8:	c3                   	ret    
c001f8d9:	66 90                	xchg   ax,ax
c001f8db:	66 90                	xchg   ax,ax
c001f8dd:	66 90                	xchg   ax,ax
c001f8df:	90                   	nop

c001f8e0 <avxDetect>:
c001f8e0:	b8 01 00 00 00       	mov    eax,0x1
c001f8e5:	0f a2                	cpuid  
c001f8e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f8ed:	74 15                	je     c001f904 <avxDetect.noAVX>
c001f8ef:	b8 01 00 00 00       	mov    eax,0x1
c001f8f4:	0f a2                	cpuid  
c001f8f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f8fc:	74 06                	je     c001f904 <avxDetect.noAVX>
c001f8fe:	b8 01 00 00 00       	mov    eax,0x1
c001f903:	c3                   	ret    

c001f904 <avxDetect.noAVX>:
c001f904:	b8 00 00 00 00       	mov    eax,0x0
c001f909:	c3                   	ret    

c001f90a <avxSave>:
c001f90a:	53                   	push   ebx
c001f90b:	52                   	push   edx
c001f90c:	31 c0                	xor    eax,eax
c001f90e:	48                   	dec    eax
c001f90f:	89 c2                	mov    edx,eax
c001f911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f915:	0f ae 23             	xsave  [ebx]
c001f918:	5a                   	pop    edx
c001f919:	5b                   	pop    ebx
c001f91a:	c3                   	ret    

c001f91b <avxLoad>:
c001f91b:	53                   	push   ebx
c001f91c:	52                   	push   edx
c001f91d:	31 c0                	xor    eax,eax
c001f91f:	48                   	dec    eax
c001f920:	89 c2                	mov    edx,eax
c001f922:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f926:	0f ae 2b             	xrstor [ebx]
c001f929:	5a                   	pop    edx
c001f92a:	5b                   	pop    ebx
c001f92b:	c3                   	ret    

c001f92c <avxInit>:
c001f92c:	e8 47 03 00 00       	call   c001fc78 <sseInit>
c001f931:	50                   	push   eax
c001f932:	51                   	push   ecx
c001f933:	0f 20 e0             	mov    eax,cr4
c001f936:	0d 00 00 04 00       	or     eax,0x40000
c001f93b:	0f 22 e0             	mov    cr4,eax
c001f93e:	31 c9                	xor    ecx,ecx
c001f940:	0f 01 d0             	xgetbv 
c001f943:	0d 07 00 00 00       	or     eax,0x7
c001f948:	0f 01 d1             	xsetbv 
c001f94b:	59                   	pop    ecx
c001f94c:	58                   	pop    eax
c001f94d:	c3                   	ret    

c001f94e <avxClose>:
c001f94e:	c3                   	ret    
c001f94f:	90                   	nop

c001f950 <isr0>:
c001f950:	fa                   	cli    
c001f951:	68 00 00 00 00       	push   0x0
c001f956:	68 00 00 00 00       	push   0x0
c001f95b:	e9 56 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f960 <isr1>:
c001f960:	fa                   	cli    
c001f961:	6a 00                	push   0x0
c001f963:	6a 01                	push   0x1
c001f965:	e9 4c 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f96a <isr2>:
c001f96a:	fa                   	cli    
c001f96b:	6a 00                	push   0x0
c001f96d:	6a 02                	push   0x2
c001f96f:	e9 42 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f974 <isr3>:
c001f974:	fa                   	cli    
c001f975:	6a 00                	push   0x0
c001f977:	6a 03                	push   0x3
c001f979:	e9 38 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f97e <isr4>:
c001f97e:	fa                   	cli    
c001f97f:	6a 00                	push   0x0
c001f981:	6a 04                	push   0x4
c001f983:	e9 2e 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f988 <isr5>:
c001f988:	fa                   	cli    
c001f989:	6a 00                	push   0x0
c001f98b:	6a 05                	push   0x5
c001f98d:	e9 24 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f992 <isr6>:
c001f992:	fa                   	cli    
c001f993:	6a 00                	push   0x0
c001f995:	6a 06                	push   0x6
c001f997:	e9 1a 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f99c <isr7>:
c001f99c:	fa                   	cli    
c001f99d:	6a 00                	push   0x0
c001f99f:	6a 07                	push   0x7
c001f9a1:	e9 10 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f9a6 <isr8>:
c001f9a6:	fa                   	cli    
c001f9a7:	6a 08                	push   0x8
c001f9a9:	e9 08 01 00 00       	jmp    c001fab6 <int_common_stub>

c001f9ae <isr9>:
c001f9ae:	fa                   	cli    
c001f9af:	6a 00                	push   0x0
c001f9b1:	6a 09                	push   0x9
c001f9b3:	e9 fe 00 00 00       	jmp    c001fab6 <int_common_stub>

c001f9b8 <isr10>:
c001f9b8:	fa                   	cli    
c001f9b9:	6a 0a                	push   0xa
c001f9bb:	e9 f6 00 00 00       	jmp    c001fab6 <int_common_stub>

c001f9c0 <isr11>:
c001f9c0:	fa                   	cli    
c001f9c1:	6a 0b                	push   0xb
c001f9c3:	e9 ee 00 00 00       	jmp    c001fab6 <int_common_stub>

c001f9c8 <isr12>:
c001f9c8:	fa                   	cli    
c001f9c9:	6a 0c                	push   0xc
c001f9cb:	e9 e6 00 00 00       	jmp    c001fab6 <int_common_stub>

c001f9d0 <isr13>:
c001f9d0:	fa                   	cli    
c001f9d1:	6a 0d                	push   0xd
c001f9d3:	53                   	push   ebx
c001f9d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f9d8:	81 fb a6 fb 01 c0    	cmp    ebx,0xc001fba6
c001f9de:	5b                   	pop    ebx
c001f9df:	0f 84 c3 01 00 00    	je     c001fba8 <finishSignal2>
c001f9e5:	e9 cc 00 00 00       	jmp    c001fab6 <int_common_stub>

c001f9ea <isr14>:
c001f9ea:	fa                   	cli    
c001f9eb:	6a 0e                	push   0xe
c001f9ed:	e9 c4 00 00 00       	jmp    c001fab6 <int_common_stub>

c001f9f2 <isr15>:
c001f9f2:	fa                   	cli    
c001f9f3:	6a 00                	push   0x0
c001f9f5:	6a 0f                	push   0xf
c001f9f7:	e9 ba 00 00 00       	jmp    c001fab6 <int_common_stub>

c001f9fc <isr16>:
c001f9fc:	fa                   	cli    
c001f9fd:	6a 00                	push   0x0
c001f9ff:	6a 10                	push   0x10
c001fa01:	e9 b0 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa06 <isr17>:
c001fa06:	fa                   	cli    
c001fa07:	6a 00                	push   0x0
c001fa09:	6a 11                	push   0x11
c001fa0b:	e9 a6 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa10 <isr18>:
c001fa10:	fa                   	cli    
c001fa11:	6a 00                	push   0x0
c001fa13:	6a 12                	push   0x12
c001fa15:	e9 9c 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa1a <irq3>:
c001fa1a:	fa                   	cli    
c001fa1b:	6a 00                	push   0x0
c001fa1d:	6a 23                	push   0x23
c001fa1f:	e9 92 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa24 <irq4>:
c001fa24:	fa                   	cli    
c001fa25:	6a 00                	push   0x0
c001fa27:	6a 24                	push   0x24
c001fa29:	e9 88 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa2e <irq5>:
c001fa2e:	fa                   	cli    
c001fa2f:	6a 00                	push   0x0
c001fa31:	6a 25                	push   0x25
c001fa33:	e9 7e 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa38 <irq6>:
c001fa38:	fa                   	cli    
c001fa39:	6a 00                	push   0x0
c001fa3b:	6a 26                	push   0x26
c001fa3d:	e9 74 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa42 <irq7>:
c001fa42:	fa                   	cli    
c001fa43:	6a 00                	push   0x0
c001fa45:	6a 27                	push   0x27
c001fa47:	e9 6a 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa4c <irq8>:
c001fa4c:	fa                   	cli    
c001fa4d:	6a 00                	push   0x0
c001fa4f:	6a 28                	push   0x28
c001fa51:	e9 60 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa56 <irq9>:
c001fa56:	fa                   	cli    
c001fa57:	6a 00                	push   0x0
c001fa59:	6a 29                	push   0x29
c001fa5b:	e9 56 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa60 <irq10>:
c001fa60:	fa                   	cli    
c001fa61:	6a 00                	push   0x0
c001fa63:	6a 2a                	push   0x2a
c001fa65:	e9 4c 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa6a <irq11>:
c001fa6a:	fa                   	cli    
c001fa6b:	6a 00                	push   0x0
c001fa6d:	6a 2b                	push   0x2b
c001fa6f:	e9 42 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa74 <irq12>:
c001fa74:	fa                   	cli    
c001fa75:	6a 00                	push   0x0
c001fa77:	6a 2c                	push   0x2c
c001fa79:	e9 38 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa7e <irq13>:
c001fa7e:	fa                   	cli    
c001fa7f:	6a 00                	push   0x0
c001fa81:	6a 2d                	push   0x2d
c001fa83:	e9 2e 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa88 <irq14>:
c001fa88:	fa                   	cli    
c001fa89:	6a 00                	push   0x0
c001fa8b:	6a 2e                	push   0x2e
c001fa8d:	e9 24 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa92 <irq15>:
c001fa92:	fa                   	cli    
c001fa93:	6a 00                	push   0x0
c001fa95:	6a 2f                	push   0x2f
c001fa97:	e9 1a 00 00 00       	jmp    c001fab6 <int_common_stub>

c001fa9c <irq1>:
c001fa9c:	fa                   	cli    
c001fa9d:	6a 00                	push   0x0
c001fa9f:	6a 21                	push   0x21
c001faa1:	eb 13                	jmp    c001fab6 <int_common_stub>

c001faa3 <irq2>:
c001faa3:	fa                   	cli    
c001faa4:	6a 00                	push   0x0
c001faa6:	6a 22                	push   0x22
c001faa8:	eb 0c                	jmp    c001fab6 <int_common_stub>

c001faaa <isr96>:
c001faaa:	6a 00                	push   0x0
c001faac:	6a 60                	push   0x60
c001faae:	fb                   	sti    
c001faaf:	eb 37                	jmp    c001fae8 <syscall_common_stub>

c001fab1 <irq0>:
c001fab1:	fa                   	cli    
c001fab2:	6a 00                	push   0x0
c001fab4:	6a 20                	push   0x20

c001fab6 <int_common_stub>:
c001fab6:	60                   	pusha  
c001fab7:	1e                   	push   ds
c001fab8:	06                   	push   es
c001fab9:	0f a0                	push   fs
c001fabb:	0f a8                	push   gs
c001fabd:	66 b8 10 00          	mov    ax,0x10
c001fac1:	66 8e d8             	mov    ds,ax
c001fac4:	66 8e c0             	mov    es,ax
c001fac7:	66 8e e0             	mov    fs,ax
c001faca:	66 8e e8             	mov    gs,ax
c001facd:	54                   	push   esp
c001face:	fc                   	cld    
c001facf:	e8 34 e2 fe ff       	call   c000dd08 <int_handler>
c001fad4:	81 c4 04 00 00 00    	add    esp,0x4
c001fada:	0f a9                	pop    gs
c001fadc:	0f a1                	pop    fs
c001fade:	07                   	pop    es
c001fadf:	1f                   	pop    ds
c001fae0:	61                   	popa   
c001fae1:	81 c4 08 00 00 00    	add    esp,0x8
c001fae7:	cf                   	iret   

c001fae8 <syscall_common_stub>:
c001fae8:	60                   	pusha  
c001fae9:	1e                   	push   ds
c001faea:	06                   	push   es
c001faeb:	0f a0                	push   fs
c001faed:	0f a8                	push   gs
c001faef:	66 b8 10 00          	mov    ax,0x10
c001faf3:	66 8e d8             	mov    ds,ax
c001faf6:	66 8e c0             	mov    es,ax
c001faf9:	66 8e e0             	mov    fs,ax
c001fafc:	66 8e e8             	mov    gs,ax
c001faff:	54                   	push   esp
c001fb00:	fc                   	cld    
c001fb01:	e8 02 e2 fe ff       	call   c000dd08 <int_handler>
c001fb06:	81 c4 04 00 00 00    	add    esp,0x4
c001fb0c:	0f a9                	pop    gs
c001fb0e:	0f a1                	pop    fs
c001fb10:	07                   	pop    es
c001fb11:	1f                   	pop    ds
c001fb12:	e8 91 03 ff ff       	call   c000fea8 <KiCheckSignalZ>
c001fb17:	3d 00 00 00 00       	cmp    eax,0x0
c001fb1c:	0f 84 c0 00 00 00    	je     c001fbe2 <skipSignals>
c001fb22:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001fb27:	61                   	popa   
c001fb28:	53                   	push   ebx
c001fb29:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001fb2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001fb32:	5b                   	pop    ebx
c001fb33:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001fb38:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001fb3b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001fb3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fb41:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001fb44:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001fb47:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001fb4a:	81 c4 08 00 00 00    	add    esp,0x8
c001fb50:	5e                   	pop    esi
c001fb51:	5b                   	pop    ebx
c001fb52:	59                   	pop    ecx
c001fb53:	5a                   	pop    edx
c001fb54:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001fb57:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001fb5a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fb5d:	52                   	push   edx
c001fb5e:	51                   	push   ecx
c001fb5f:	53                   	push   ebx
c001fb60:	56                   	push   esi
c001fb61:	81 ec 08 00 00 00    	sub    esp,0x8
c001fb67:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001fb6a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001fb6d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001fb70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fb73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fb76:	60                   	pusha  
c001fb77:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001fb7d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001fb80:	89 e3                	mov    ebx,esp
c001fb82:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001fb85:	52                   	push   edx
c001fb86:	68 a6 fb 01 c0       	push   0xc001fba6
c001fb8b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001fb8e:	89 dc                	mov    esp,ebx
c001fb90:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001fb93:	68 23 00 00 00       	push   0x23
c001fb98:	51                   	push   ecx
c001fb99:	68 02 02 00 00       	push   0x202
c001fb9e:	68 1b 00 00 00       	push   0x1b
c001fba3:	ff 36                	push   DWORD PTR [esi]
c001fba5:	cf                   	iret   

c001fba6 <finishSignal>:
c001fba6:	cd 0f                	int    0xf

c001fba8 <finishSignal2>:
c001fba8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001fbae:	e8 72 03 ff ff       	call   c000ff25 <KiFinishSignalZ>
c001fbb3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001fbb9:	68 23 00 00 00       	push   0x23
c001fbbe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001fbc1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001fbc4:	68 1b 00 00 00       	push   0x1b
c001fbc9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001fbcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fbcf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001fbd2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001fbd5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001fbd8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001fbdb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001fbde:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001fbe1:	cf                   	iret   

c001fbe2 <skipSignals>:
c001fbe2:	61                   	popa   
c001fbe3:	81 c4 08 00 00 00    	add    esp,0x8
c001fbe9:	cf                   	iret   
c001fbea:	90                   	nop
c001fbeb:	90                   	nop

c001fbec <irq16>:
c001fbec:	fa                   	cli    
c001fbed:	6a 00                	push   0x0
c001fbef:	6a 30                	push   0x30
c001fbf1:	e9 c0 fe ff ff       	jmp    c001fab6 <int_common_stub>

c001fbf6 <irq17>:
c001fbf6:	fa                   	cli    
c001fbf7:	6a 00                	push   0x0
c001fbf9:	6a 31                	push   0x31
c001fbfb:	e9 b6 fe ff ff       	jmp    c001fab6 <int_common_stub>

c001fc00 <irq18>:
c001fc00:	fa                   	cli    
c001fc01:	6a 00                	push   0x0
c001fc03:	6a 32                	push   0x32
c001fc05:	e9 ac fe ff ff       	jmp    c001fab6 <int_common_stub>

c001fc0a <irq19>:
c001fc0a:	fa                   	cli    
c001fc0b:	6a 00                	push   0x0
c001fc0d:	6a 33                	push   0x33
c001fc0f:	e9 a2 fe ff ff       	jmp    c001fab6 <int_common_stub>

c001fc14 <irq20>:
c001fc14:	fa                   	cli    
c001fc15:	6a 00                	push   0x0
c001fc17:	6a 34                	push   0x34
c001fc19:	e9 98 fe ff ff       	jmp    c001fab6 <int_common_stub>

c001fc1e <irq21>:
c001fc1e:	fa                   	cli    
c001fc1f:	6a 00                	push   0x0
c001fc21:	6a 35                	push   0x35
c001fc23:	e9 8e fe ff ff       	jmp    c001fab6 <int_common_stub>

c001fc28 <irq22>:
c001fc28:	fa                   	cli    
c001fc29:	6a 00                	push   0x0
c001fc2b:	6a 36                	push   0x36
c001fc2d:	e9 84 fe ff ff       	jmp    c001fab6 <int_common_stub>

c001fc32 <irq23>:
c001fc32:	fa                   	cli    
c001fc33:	6a 00                	push   0x0
c001fc35:	6a 37                	push   0x37
c001fc37:	e9 7a fe ff ff       	jmp    c001fab6 <int_common_stub>
c001fc3c:	66 90                	xchg   ax,ax
c001fc3e:	66 90                	xchg   ax,ax

c001fc40 <i386GetRDRAND>:
c001fc40:	b9 64 00 00 00       	mov    ecx,0x64

c001fc45 <retry>:
c001fc45:	0f c7 f0             	rdrand eax
c001fc48:	72 05                	jb     c001fc4f <retry.done>
c001fc4a:	e2 f9                	loop   c001fc45 <retry>

c001fc4c <retry.fail>:
c001fc4c:	31 c0                	xor    eax,eax
c001fc4e:	c3                   	ret    

c001fc4f <retry.done>:
c001fc4f:	c3                   	ret    

c001fc50 <sseDetect>:
c001fc50:	b8 01 00 00 00       	mov    eax,0x1
c001fc55:	0f a2                	cpuid  
c001fc57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001fc5d:	74 06                	je     c001fc65 <sseDetect.noSSE>
c001fc5f:	b8 01 00 00 00       	mov    eax,0x1
c001fc64:	c3                   	ret    

c001fc65 <sseDetect.noSSE>:
c001fc65:	31 c0                	xor    eax,eax
c001fc67:	c3                   	ret    

c001fc68 <sseSave>:
c001fc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6c:	0f ae 00             	fxsave [eax]
c001fc6f:	c3                   	ret    

c001fc70 <sseLoad>:
c001fc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc74:	0f ae 08             	fxrstor [eax]
c001fc77:	c3                   	ret    

c001fc78 <sseInit>:
c001fc78:	e8 48 00 00 00       	call   c001fcc5 <x87Init>
c001fc7d:	0f 20 e0             	mov    eax,cr4
c001fc80:	66 0d 00 06          	or     ax,0x600
c001fc84:	0f 22 e0             	mov    cr4,eax
c001fc87:	c3                   	ret    

c001fc88 <sseClose>:
c001fc88:	c3                   	ret    
c001fc89:	66 90                	xchg   ax,ax
c001fc8b:	66 90                	xchg   ax,ax
c001fc8d:	66 90                	xchg   ax,ax
c001fc8f:	90                   	nop

c001fc90 <value_37F>:
c001fc90:	7f 03                	jg     c001fc95 <value_37A+0x1>

c001fc92 <value_37E>:
c001fc92:	7e 03                	jle    c001fc97 <x87Detect+0x1>

c001fc94 <value_37A>:
c001fc94:	7a 03                	jp     c001fc99 <x87Detect+0x3>

c001fc96 <x87Detect>:
c001fc96:	53                   	push   ebx
c001fc97:	51                   	push   ecx
c001fc98:	52                   	push   edx
c001fc99:	b8 01 00 00 00       	mov    eax,0x1
c001fc9e:	0f a2                	cpuid  
c001fca0:	f7 c2 01 00 00 00    	test   edx,0x1
c001fca6:	74 06                	je     c001fcae <x87Detect.nox87>
c001fca8:	b8 01 00 00 00       	mov    eax,0x1
c001fcad:	c3                   	ret    

c001fcae <x87Detect.nox87>:
c001fcae:	b8 00 00 00 00       	mov    eax,0x0
c001fcb3:	5a                   	pop    edx
c001fcb4:	59                   	pop    ecx
c001fcb5:	5b                   	pop    ebx
c001fcb6:	c3                   	ret    

c001fcb7 <x87Save>:
c001fcb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcbb:	dd 30                	fnsave [eax]
c001fcbd:	c3                   	ret    

c001fcbe <x87Load>:
c001fcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc2:	dd 20                	frstor [eax]
c001fcc4:	c3                   	ret    

c001fcc5 <x87Init>:
c001fcc5:	0f 20 c0             	mov    eax,cr0
c001fcc8:	66 25 fb ff          	and    ax,0xfffb
c001fccc:	66 0d 22 00          	or     ax,0x22
c001fcd0:	0f 22 c0             	mov    cr0,eax
c001fcd3:	db e3                	fninit 
c001fcd5:	0f 06                	clts   
c001fcd7:	d9 2d 94 fc 01 c0    	fldcw  WORD PTR ds:0xc001fc94
c001fcdd:	c3                   	ret    

c001fcde <x87Close>:
c001fcde:	c3                   	ret    
c001fcdf:	90                   	nop

c001fce0 <__do_global_ctors_aux>:
c001fce0:	a1 94 0c 02 c0       	mov    eax,ds:0xc0020c94
c001fce5:	83 f8 ff             	cmp    eax,0xffffffff
c001fce8:	74 1a                	je     c001fd04 <__do_global_ctors_aux+0x24>
c001fcea:	55                   	push   ebp
c001fceb:	89 e5                	mov    ebp,esp
c001fced:	53                   	push   ebx
c001fcee:	52                   	push   edx
c001fcef:	bb 94 0c 02 c0       	mov    ebx,0xc0020c94
c001fcf4:	ff d0                	call   eax
c001fcf6:	83 eb 04             	sub    ebx,0x4
c001fcf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fcfb:	83 f8 ff             	cmp    eax,0xffffffff
c001fcfe:	75 f4                	jne    c001fcf4 <__do_global_ctors_aux+0x14>
c001fd00:	58                   	pop    eax
c001fd01:	5b                   	pop    ebx
c001fd02:	5d                   	pop    ebp
c001fd03:	c3                   	ret    
c001fd04:	c3                   	ret    
c001fd05:	66 90                	xchg   ax,ax
c001fd07:	90                   	nop

c001fd08 <__divdi3>:
c001fd08:	55                   	push   ebp
c001fd09:	57                   	push   edi
c001fd0a:	56                   	push   esi
c001fd0b:	53                   	push   ebx
c001fd0c:	83 ec 1c             	sub    esp,0x1c
c001fd0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001fd13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fd17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fd1a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fd1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd22:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fd26:	85 db                	test   ebx,ebx
c001fd28:	0f 88 8e 00 00 00    	js     c001fdbc <__divdi3+0xb4>
c001fd2e:	89 dd                	mov    ebp,ebx
c001fd30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fd38:	89 d3                	mov    ebx,edx
c001fd3a:	85 d2                	test   edx,edx
c001fd3c:	79 0d                	jns    c001fd4b <__divdi3+0x43>
c001fd3e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001fd42:	f7 d8                	neg    eax
c001fd44:	83 d2 00             	adc    edx,0x0
c001fd47:	f7 da                	neg    edx
c001fd49:	89 d3                	mov    ebx,edx
c001fd4b:	89 c7                	mov    edi,eax
c001fd4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fd50:	85 db                	test   ebx,ebx
c001fd52:	75 48                	jne    c001fd9c <__divdi3+0x94>
c001fd54:	39 ef                	cmp    edi,ebp
c001fd56:	76 24                	jbe    c001fd7c <__divdi3+0x74>
c001fd58:	89 ea                	mov    edx,ebp
c001fd5a:	f7 f7                	div    edi
c001fd5c:	89 c1                	mov    ecx,eax
c001fd5e:	31 f6                	xor    esi,esi
c001fd60:	89 c8                	mov    eax,ecx
c001fd62:	89 f2                	mov    edx,esi
c001fd64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fd68:	85 c9                	test   ecx,ecx
c001fd6a:	74 07                	je     c001fd73 <__divdi3+0x6b>
c001fd6c:	f7 d8                	neg    eax
c001fd6e:	83 d2 00             	adc    edx,0x0
c001fd71:	f7 da                	neg    edx
c001fd73:	83 c4 1c             	add    esp,0x1c
c001fd76:	5b                   	pop    ebx
c001fd77:	5e                   	pop    esi
c001fd78:	5f                   	pop    edi
c001fd79:	5d                   	pop    ebp
c001fd7a:	c3                   	ret    
c001fd7b:	90                   	nop
c001fd7c:	85 ff                	test   edi,edi
c001fd7e:	75 0b                	jne    c001fd8b <__divdi3+0x83>
c001fd80:	b8 01 00 00 00       	mov    eax,0x1
c001fd85:	31 d2                	xor    edx,edx
c001fd87:	f7 f3                	div    ebx
c001fd89:	89 c7                	mov    edi,eax
c001fd8b:	31 d2                	xor    edx,edx
c001fd8d:	89 e8                	mov    eax,ebp
c001fd8f:	f7 f7                	div    edi
c001fd91:	89 c6                	mov    esi,eax
c001fd93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fd96:	f7 f7                	div    edi
c001fd98:	89 c1                	mov    ecx,eax
c001fd9a:	eb c4                	jmp    c001fd60 <__divdi3+0x58>
c001fd9c:	39 eb                	cmp    ebx,ebp
c001fd9e:	77 3c                	ja     c001fddc <__divdi3+0xd4>
c001fda0:	0f bd f3             	bsr    esi,ebx
c001fda3:	83 f6 1f             	xor    esi,0x1f
c001fda6:	75 40                	jne    c001fde8 <__divdi3+0xe0>
c001fda8:	39 eb                	cmp    ebx,ebp
c001fdaa:	72 09                	jb     c001fdb5 <__divdi3+0xad>
c001fdac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fdaf:	0f 87 97 00 00 00    	ja     c001fe4c <__divdi3+0x144>
c001fdb5:	b9 01 00 00 00       	mov    ecx,0x1
c001fdba:	eb a4                	jmp    c001fd60 <__divdi3+0x58>
c001fdbc:	f7 d9                	neg    ecx
c001fdbe:	83 d3 00             	adc    ebx,0x0
c001fdc1:	f7 db                	neg    ebx
c001fdc3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fdc6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fdca:	89 dd                	mov    ebp,ebx
c001fdcc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001fdd4:	e9 5f ff ff ff       	jmp    c001fd38 <__divdi3+0x30>
c001fdd9:	8d 76 00             	lea    esi,[esi+0x0]
c001fddc:	31 f6                	xor    esi,esi
c001fdde:	31 c9                	xor    ecx,ecx
c001fde0:	e9 7b ff ff ff       	jmp    c001fd60 <__divdi3+0x58>
c001fde5:	8d 76 00             	lea    esi,[esi+0x0]
c001fde8:	b8 20 00 00 00       	mov    eax,0x20
c001fded:	29 f0                	sub    eax,esi
c001fdef:	89 f1                	mov    ecx,esi
c001fdf1:	d3 e3                	shl    ebx,cl
c001fdf3:	89 fa                	mov    edx,edi
c001fdf5:	88 c1                	mov    cl,al
c001fdf7:	d3 ea                	shr    edx,cl
c001fdf9:	09 da                	or     edx,ebx
c001fdfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fdff:	89 f1                	mov    ecx,esi
c001fe01:	d3 e7                	shl    edi,cl
c001fe03:	89 eb                	mov    ebx,ebp
c001fe05:	88 c1                	mov    cl,al
c001fe07:	d3 eb                	shr    ebx,cl
c001fe09:	89 f1                	mov    ecx,esi
c001fe0b:	d3 e5                	shl    ebp,cl
c001fe0d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001fe10:	88 c1                	mov    cl,al
c001fe12:	d3 ea                	shr    edx,cl
c001fe14:	09 d5                	or     ebp,edx
c001fe16:	89 e8                	mov    eax,ebp
c001fe18:	89 da                	mov    edx,ebx
c001fe1a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001fe1e:	89 d3                	mov    ebx,edx
c001fe20:	89 c5                	mov    ebp,eax
c001fe22:	f7 e7                	mul    edi
c001fe24:	39 d3                	cmp    ebx,edx
c001fe26:	72 18                	jb     c001fe40 <__divdi3+0x138>
c001fe28:	74 0a                	je     c001fe34 <__divdi3+0x12c>
c001fe2a:	89 e9                	mov    ecx,ebp
c001fe2c:	31 f6                	xor    esi,esi
c001fe2e:	e9 2d ff ff ff       	jmp    c001fd60 <__divdi3+0x58>
c001fe33:	90                   	nop
c001fe34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001fe37:	89 f1                	mov    ecx,esi
c001fe39:	d3 e7                	shl    edi,cl
c001fe3b:	39 c7                	cmp    edi,eax
c001fe3d:	73 eb                	jae    c001fe2a <__divdi3+0x122>
c001fe3f:	90                   	nop
c001fe40:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001fe43:	31 f6                	xor    esi,esi
c001fe45:	e9 16 ff ff ff       	jmp    c001fd60 <__divdi3+0x58>
c001fe4a:	66 90                	xchg   ax,ax
c001fe4c:	31 c9                	xor    ecx,ecx
c001fe4e:	e9 0d ff ff ff       	jmp    c001fd60 <__divdi3+0x58>
c001fe53:	90                   	nop

c001fe54 <__moddi3>:
c001fe54:	55                   	push   ebp
c001fe55:	57                   	push   edi
c001fe56:	56                   	push   esi
c001fe57:	53                   	push   ebx
c001fe58:	83 ec 2c             	sub    esp,0x2c
c001fe5b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001fe5f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fe63:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fe67:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001fe6b:	85 db                	test   ebx,ebx
c001fe6d:	0f 88 85 00 00 00    	js     c001fef8 <__moddi3+0xa4>
c001fe73:	89 de                	mov    esi,ebx
c001fe75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001fe7d:	89 d7                	mov    edi,edx
c001fe7f:	85 d2                	test   edx,edx
c001fe81:	79 09                	jns    c001fe8c <__moddi3+0x38>
c001fe83:	f7 d8                	neg    eax
c001fe85:	83 d2 00             	adc    edx,0x0
c001fe88:	f7 da                	neg    edx
c001fe8a:	89 d7                	mov    edi,edx
c001fe8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe90:	89 cd                	mov    ebp,ecx
c001fe92:	85 ff                	test   edi,edi
c001fe94:	75 52                	jne    c001fee8 <__moddi3+0x94>
c001fe96:	89 c3                	mov    ebx,eax
c001fe98:	39 f0                	cmp    eax,esi
c001fe9a:	76 24                	jbe    c001fec0 <__moddi3+0x6c>
c001fe9c:	89 c8                	mov    eax,ecx
c001fe9e:	89 f2                	mov    edx,esi
c001fea0:	f7 f3                	div    ebx
c001fea2:	89 d6                	mov    esi,edx
c001fea4:	89 f0                	mov    eax,esi
c001fea6:	31 d2                	xor    edx,edx
c001fea8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001feac:	85 c9                	test   ecx,ecx
c001feae:	74 07                	je     c001feb7 <__moddi3+0x63>
c001feb0:	f7 d8                	neg    eax
c001feb2:	83 d2 00             	adc    edx,0x0
c001feb5:	f7 da                	neg    edx
c001feb7:	83 c4 2c             	add    esp,0x2c
c001feba:	5b                   	pop    ebx
c001febb:	5e                   	pop    esi
c001febc:	5f                   	pop    edi
c001febd:	5d                   	pop    ebp
c001febe:	c3                   	ret    
c001febf:	90                   	nop
c001fec0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fec4:	85 db                	test   ebx,ebx
c001fec6:	75 0d                	jne    c001fed5 <__moddi3+0x81>
c001fec8:	b8 01 00 00 00       	mov    eax,0x1
c001fecd:	31 d2                	xor    edx,edx
c001fecf:	f7 f7                	div    edi
c001fed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fed5:	89 f0                	mov    eax,esi
c001fed7:	31 d2                	xor    edx,edx
c001fed9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fedd:	f7 f7                	div    edi
c001fedf:	89 e8                	mov    eax,ebp
c001fee1:	f7 f7                	div    edi
c001fee3:	89 d6                	mov    esi,edx
c001fee5:	eb bd                	jmp    c001fea4 <__moddi3+0x50>
c001fee7:	90                   	nop
c001fee8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001feec:	39 f7                	cmp    edi,esi
c001feee:	76 20                	jbe    c001ff10 <__moddi3+0xbc>
c001fef0:	89 c8                	mov    eax,ecx
c001fef2:	89 f2                	mov    edx,esi
c001fef4:	eb b2                	jmp    c001fea8 <__moddi3+0x54>
c001fef6:	66 90                	xchg   ax,ax
c001fef8:	f7 d9                	neg    ecx
c001fefa:	83 d3 00             	adc    ebx,0x0
c001fefd:	f7 db                	neg    ebx
c001feff:	89 de                	mov    esi,ebx
c001ff01:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ff09:	e9 6f ff ff ff       	jmp    c001fe7d <__moddi3+0x29>
c001ff0e:	66 90                	xchg   ax,ax
c001ff10:	0f bd c7             	bsr    eax,edi
c001ff13:	83 f0 1f             	xor    eax,0x1f
c001ff16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff1a:	75 24                	jne    c001ff40 <__moddi3+0xec>
c001ff1c:	39 f7                	cmp    edi,esi
c001ff1e:	72 06                	jb     c001ff26 <__moddi3+0xd2>
c001ff20:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001ff24:	77 0c                	ja     c001ff32 <__moddi3+0xde>
c001ff26:	89 e9                	mov    ecx,ebp
c001ff28:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ff2c:	19 fe                	sbb    esi,edi
c001ff2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ff32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ff36:	89 f2                	mov    edx,esi
c001ff38:	e9 6b ff ff ff       	jmp    c001fea8 <__moddi3+0x54>
c001ff3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ff40:	b8 20 00 00 00       	mov    eax,0x20
c001ff45:	89 c2                	mov    edx,eax
c001ff47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ff4b:	29 da                	sub    edx,ebx
c001ff4d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ff51:	88 d9                	mov    cl,bl
c001ff53:	d3 e7                	shl    edi,cl
c001ff55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff59:	88 d1                	mov    cl,dl
c001ff5b:	d3 e8                	shr    eax,cl
c001ff5d:	09 c7                	or     edi,eax
c001ff5f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001ff63:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ff67:	89 d8                	mov    eax,ebx
c001ff69:	88 d9                	mov    cl,bl
c001ff6b:	d3 e7                	shl    edi,cl
c001ff6d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ff71:	89 f3                	mov    ebx,esi
c001ff73:	88 d1                	mov    cl,dl
c001ff75:	d3 eb                	shr    ebx,cl
c001ff77:	89 c7                	mov    edi,eax
c001ff79:	88 c1                	mov    cl,al
c001ff7b:	d3 e6                	shl    esi,cl
c001ff7d:	89 e8                	mov    eax,ebp
c001ff7f:	88 d1                	mov    cl,dl
c001ff81:	d3 e8                	shr    eax,cl
c001ff83:	09 f0                	or     eax,esi
c001ff85:	89 f9                	mov    ecx,edi
c001ff87:	d3 e5                	shl    ebp,cl
c001ff89:	89 da                	mov    edx,ebx
c001ff8b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001ff8f:	89 d3                	mov    ebx,edx
c001ff91:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ff95:	89 c6                	mov    esi,eax
c001ff97:	89 d1                	mov    ecx,edx
c001ff99:	39 d3                	cmp    ebx,edx
c001ff9b:	72 27                	jb     c001ffc4 <__moddi3+0x170>
c001ff9d:	74 21                	je     c001ffc0 <__moddi3+0x16c>
c001ff9f:	29 f5                	sub    ebp,esi
c001ffa1:	19 cb                	sbb    ebx,ecx
c001ffa3:	89 de                	mov    esi,ebx
c001ffa5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001ffa9:	d3 e6                	shl    esi,cl
c001ffab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffaf:	89 f9                	mov    ecx,edi
c001ffb1:	d3 ed                	shr    ebp,cl
c001ffb3:	09 ee                	or     esi,ebp
c001ffb5:	89 f0                	mov    eax,esi
c001ffb7:	d3 eb                	shr    ebx,cl
c001ffb9:	89 da                	mov    edx,ebx
c001ffbb:	e9 e8 fe ff ff       	jmp    c001fea8 <__moddi3+0x54>
c001ffc0:	39 c5                	cmp    ebp,eax
c001ffc2:	73 db                	jae    c001ff9f <__moddi3+0x14b>
c001ffc4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ffc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001ffcc:	89 d1                	mov    ecx,edx
c001ffce:	89 c6                	mov    esi,eax
c001ffd0:	eb cd                	jmp    c001ff9f <__moddi3+0x14b>
c001ffd2:	66 90                	xchg   ax,ax

c001ffd4 <__udivdi3>:
c001ffd4:	55                   	push   ebp
c001ffd5:	57                   	push   edi
c001ffd6:	56                   	push   esi
c001ffd7:	53                   	push   ebx
c001ffd8:	83 ec 1c             	sub    esp,0x1c
c001ffdb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ffdf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ffe3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ffe7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ffeb:	85 d2                	test   edx,edx
c001ffed:	75 41                	jne    c0020030 <__udivdi3+0x5c>
c001ffef:	39 f7                	cmp    edi,esi
c001fff1:	76 15                	jbe    c0020008 <__udivdi3+0x34>
c001fff3:	89 e8                	mov    eax,ebp
c001fff5:	89 f2                	mov    edx,esi
c001fff7:	f7 f7                	div    edi
c001fff9:	31 db                	xor    ebx,ebx
c001fffb:	89 da                	mov    edx,ebx
c001fffd:	83 c4 1c             	add    esp,0x1c
c0020000:	5b                   	pop    ebx
c0020001:	5e                   	pop    esi
c0020002:	5f                   	pop    edi
c0020003:	5d                   	pop    ebp
c0020004:	c3                   	ret    
c0020005:	8d 76 00             	lea    esi,[esi+0x0]
c0020008:	89 f9                	mov    ecx,edi
c002000a:	85 ff                	test   edi,edi
c002000c:	75 0b                	jne    c0020019 <__udivdi3+0x45>
c002000e:	b8 01 00 00 00       	mov    eax,0x1
c0020013:	31 d2                	xor    edx,edx
c0020015:	f7 f7                	div    edi
c0020017:	89 c1                	mov    ecx,eax
c0020019:	31 d2                	xor    edx,edx
c002001b:	89 f0                	mov    eax,esi
c002001d:	f7 f1                	div    ecx
c002001f:	89 c3                	mov    ebx,eax
c0020021:	89 e8                	mov    eax,ebp
c0020023:	f7 f1                	div    ecx
c0020025:	89 da                	mov    edx,ebx
c0020027:	83 c4 1c             	add    esp,0x1c
c002002a:	5b                   	pop    ebx
c002002b:	5e                   	pop    esi
c002002c:	5f                   	pop    edi
c002002d:	5d                   	pop    ebp
c002002e:	c3                   	ret    
c002002f:	90                   	nop
c0020030:	39 f2                	cmp    edx,esi
c0020032:	77 1c                	ja     c0020050 <__udivdi3+0x7c>
c0020034:	0f bd da             	bsr    ebx,edx
c0020037:	83 f3 1f             	xor    ebx,0x1f
c002003a:	75 24                	jne    c0020060 <__udivdi3+0x8c>
c002003c:	39 f2                	cmp    edx,esi
c002003e:	72 08                	jb     c0020048 <__udivdi3+0x74>
c0020040:	39 ef                	cmp    edi,ebp
c0020042:	0f 87 84 00 00 00    	ja     c00200cc <__udivdi3+0xf8>
c0020048:	b8 01 00 00 00       	mov    eax,0x1
c002004d:	eb ac                	jmp    c001fffb <__udivdi3+0x27>
c002004f:	90                   	nop
c0020050:	31 db                	xor    ebx,ebx
c0020052:	31 c0                	xor    eax,eax
c0020054:	89 da                	mov    edx,ebx
c0020056:	83 c4 1c             	add    esp,0x1c
c0020059:	5b                   	pop    ebx
c002005a:	5e                   	pop    esi
c002005b:	5f                   	pop    edi
c002005c:	5d                   	pop    ebp
c002005d:	c3                   	ret    
c002005e:	66 90                	xchg   ax,ax
c0020060:	b8 20 00 00 00       	mov    eax,0x20
c0020065:	29 d8                	sub    eax,ebx
c0020067:	88 d9                	mov    cl,bl
c0020069:	d3 e2                	shl    edx,cl
c002006b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002006f:	89 fa                	mov    edx,edi
c0020071:	88 c1                	mov    cl,al
c0020073:	d3 ea                	shr    edx,cl
c0020075:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020079:	09 d1                	or     ecx,edx
c002007b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002007f:	88 d9                	mov    cl,bl
c0020081:	d3 e7                	shl    edi,cl
c0020083:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020087:	89 f7                	mov    edi,esi
c0020089:	88 c1                	mov    cl,al
c002008b:	d3 ef                	shr    edi,cl
c002008d:	88 d9                	mov    cl,bl
c002008f:	d3 e6                	shl    esi,cl
c0020091:	89 ea                	mov    edx,ebp
c0020093:	88 c1                	mov    cl,al
c0020095:	d3 ea                	shr    edx,cl
c0020097:	09 d6                	or     esi,edx
c0020099:	89 f0                	mov    eax,esi
c002009b:	89 fa                	mov    edx,edi
c002009d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00200a1:	89 d7                	mov    edi,edx
c00200a3:	89 c6                	mov    esi,eax
c00200a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00200a9:	39 d7                	cmp    edi,edx
c00200ab:	72 13                	jb     c00200c0 <__udivdi3+0xec>
c00200ad:	74 09                	je     c00200b8 <__udivdi3+0xe4>
c00200af:	89 f0                	mov    eax,esi
c00200b1:	31 db                	xor    ebx,ebx
c00200b3:	e9 43 ff ff ff       	jmp    c001fffb <__udivdi3+0x27>
c00200b8:	88 d9                	mov    cl,bl
c00200ba:	d3 e5                	shl    ebp,cl
c00200bc:	39 c5                	cmp    ebp,eax
c00200be:	73 ef                	jae    c00200af <__udivdi3+0xdb>
c00200c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00200c3:	31 db                	xor    ebx,ebx
c00200c5:	e9 31 ff ff ff       	jmp    c001fffb <__udivdi3+0x27>
c00200ca:	66 90                	xchg   ax,ax
c00200cc:	31 c0                	xor    eax,eax
c00200ce:	e9 28 ff ff ff       	jmp    c001fffb <__udivdi3+0x27>
c00200d3:	90                   	nop

c00200d4 <__umoddi3>:
c00200d4:	55                   	push   ebp
c00200d5:	57                   	push   edi
c00200d6:	56                   	push   esi
c00200d7:	53                   	push   ebx
c00200d8:	83 ec 1c             	sub    esp,0x1c
c00200db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00200df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00200e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00200e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00200eb:	89 da                	mov    edx,ebx
c00200ed:	85 c0                	test   eax,eax
c00200ef:	75 37                	jne    c0020128 <__umoddi3+0x54>
c00200f1:	39 df                	cmp    edi,ebx
c00200f3:	76 13                	jbe    c0020108 <__umoddi3+0x34>
c00200f5:	89 f0                	mov    eax,esi
c00200f7:	f7 f7                	div    edi
c00200f9:	89 d0                	mov    eax,edx
c00200fb:	31 d2                	xor    edx,edx
c00200fd:	83 c4 1c             	add    esp,0x1c
c0020100:	5b                   	pop    ebx
c0020101:	5e                   	pop    esi
c0020102:	5f                   	pop    edi
c0020103:	5d                   	pop    ebp
c0020104:	c3                   	ret    
c0020105:	8d 76 00             	lea    esi,[esi+0x0]
c0020108:	89 fd                	mov    ebp,edi
c002010a:	85 ff                	test   edi,edi
c002010c:	75 0b                	jne    c0020119 <__umoddi3+0x45>
c002010e:	b8 01 00 00 00       	mov    eax,0x1
c0020113:	31 d2                	xor    edx,edx
c0020115:	f7 f7                	div    edi
c0020117:	89 c5                	mov    ebp,eax
c0020119:	89 d8                	mov    eax,ebx
c002011b:	31 d2                	xor    edx,edx
c002011d:	f7 f5                	div    ebp
c002011f:	89 f0                	mov    eax,esi
c0020121:	f7 f5                	div    ebp
c0020123:	89 d0                	mov    eax,edx
c0020125:	eb d4                	jmp    c00200fb <__umoddi3+0x27>
c0020127:	90                   	nop
c0020128:	89 f1                	mov    ecx,esi
c002012a:	39 d8                	cmp    eax,ebx
c002012c:	76 0a                	jbe    c0020138 <__umoddi3+0x64>
c002012e:	89 f0                	mov    eax,esi
c0020130:	83 c4 1c             	add    esp,0x1c
c0020133:	5b                   	pop    ebx
c0020134:	5e                   	pop    esi
c0020135:	5f                   	pop    edi
c0020136:	5d                   	pop    ebp
c0020137:	c3                   	ret    
c0020138:	0f bd e8             	bsr    ebp,eax
c002013b:	83 f5 1f             	xor    ebp,0x1f
c002013e:	75 1c                	jne    c002015c <__umoddi3+0x88>
c0020140:	39 d8                	cmp    eax,ebx
c0020142:	72 04                	jb     c0020148 <__umoddi3+0x74>
c0020144:	39 f7                	cmp    edi,esi
c0020146:	77 08                	ja     c0020150 <__umoddi3+0x7c>
c0020148:	89 da                	mov    edx,ebx
c002014a:	29 fe                	sub    esi,edi
c002014c:	19 c2                	sbb    edx,eax
c002014e:	89 f1                	mov    ecx,esi
c0020150:	89 c8                	mov    eax,ecx
c0020152:	83 c4 1c             	add    esp,0x1c
c0020155:	5b                   	pop    ebx
c0020156:	5e                   	pop    esi
c0020157:	5f                   	pop    edi
c0020158:	5d                   	pop    ebp
c0020159:	c3                   	ret    
c002015a:	66 90                	xchg   ax,ax
c002015c:	ba 20 00 00 00       	mov    edx,0x20
c0020161:	29 ea                	sub    edx,ebp
c0020163:	89 e9                	mov    ecx,ebp
c0020165:	d3 e0                	shl    eax,cl
c0020167:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002016b:	89 f8                	mov    eax,edi
c002016d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020171:	88 d1                	mov    cl,dl
c0020173:	d3 e8                	shr    eax,cl
c0020175:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020179:	09 c1                	or     ecx,eax
c002017b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002017f:	89 e9                	mov    ecx,ebp
c0020181:	d3 e7                	shl    edi,cl
c0020183:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020187:	89 d8                	mov    eax,ebx
c0020189:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002018d:	88 d1                	mov    cl,dl
c002018f:	d3 e8                	shr    eax,cl
c0020191:	89 c7                	mov    edi,eax
c0020193:	89 e9                	mov    ecx,ebp
c0020195:	d3 e3                	shl    ebx,cl
c0020197:	89 f0                	mov    eax,esi
c0020199:	88 d1                	mov    cl,dl
c002019b:	d3 e8                	shr    eax,cl
c002019d:	09 d8                	or     eax,ebx
c002019f:	89 e9                	mov    ecx,ebp
c00201a1:	d3 e6                	shl    esi,cl
c00201a3:	89 f3                	mov    ebx,esi
c00201a5:	89 fa                	mov    edx,edi
c00201a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00201ab:	89 d1                	mov    ecx,edx
c00201ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00201b1:	89 c6                	mov    esi,eax
c00201b3:	89 d7                	mov    edi,edx
c00201b5:	39 d1                	cmp    ecx,edx
c00201b7:	72 27                	jb     c00201e0 <__umoddi3+0x10c>
c00201b9:	74 21                	je     c00201dc <__umoddi3+0x108>
c00201bb:	89 ca                	mov    edx,ecx
c00201bd:	29 f3                	sub    ebx,esi
c00201bf:	19 fa                	sbb    edx,edi
c00201c1:	89 d0                	mov    eax,edx
c00201c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00201c7:	d3 e0                	shl    eax,cl
c00201c9:	89 e9                	mov    ecx,ebp
c00201cb:	d3 eb                	shr    ebx,cl
c00201cd:	09 d8                	or     eax,ebx
c00201cf:	d3 ea                	shr    edx,cl
c00201d1:	83 c4 1c             	add    esp,0x1c
c00201d4:	5b                   	pop    ebx
c00201d5:	5e                   	pop    esi
c00201d6:	5f                   	pop    edi
c00201d7:	5d                   	pop    ebp
c00201d8:	c3                   	ret    
c00201d9:	8d 76 00             	lea    esi,[esi+0x0]
c00201dc:	39 c3                	cmp    ebx,eax
c00201de:	73 db                	jae    c00201bb <__umoddi3+0xe7>
c00201e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00201e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00201e8:	89 d7                	mov    edi,edx
c00201ea:	89 c6                	mov    esi,eax
c00201ec:	eb cd                	jmp    c00201bb <__umoddi3+0xe7>

Disassembly of section .init:

c00201ee <_init>:
c00201ee:	55                   	push   ebp
c00201ef:	89 e5                	mov    ebp,esp
c00201f1:	e8 fe fe fd ff       	call   c00000f4 <frame_dummy>
c00201f6:	e8 e5 fa ff ff       	call   c001fce0 <__do_global_ctors_aux>
c00201fb:	5d                   	pop    ebp
c00201fc:	c3                   	ret    

Disassembly of section .fini:

c00201fd <_fini>:
c00201fd:	55                   	push   ebp
c00201fe:	89 e5                	mov    ebp,esp
c0020200:	e8 7f fe fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020205:	5d                   	pop    ebp
c0020206:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020208 <DriverlessDevice::~DriverlessDevice()>:
c0020208:	ba a0 1b 02 c0       	mov    edx,0xc0021ba0
c002020d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020211:	89 10                	mov    DWORD PTR [eax],edx
c0020213:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020217:	50                   	push   eax
c0020218:	e8 4b 8d fe ff       	call   c0008f68 <Device::~Device()>
c002021d:	83 c4 04             	add    esp,0x4
c0020220:	90                   	nop
c0020221:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0020222 <DriverlessDevice::~DriverlessDevice()>:
c0020222:	83 ec 0c             	sub    esp,0xc
c0020225:	83 ec 0c             	sub    esp,0xc
c0020228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002022c:	e8 d7 ff ff ff       	call   c0020208 <DriverlessDevice::~DriverlessDevice()>
c0020231:	83 c4 10             	add    esp,0x10
c0020234:	83 ec 08             	sub    esp,0x8
c0020237:	68 58 01 00 00       	push   0x158
c002023c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020240:	e8 d6 c3 fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020245:	83 c4 10             	add    esp,0x10
c0020248:	83 c4 0c             	add    esp,0xc
c002024b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002024c <LinkedList<Device>::addElement(Device*)>:
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020254:	75 10                	jne    c0020266 <LinkedList<Device>::addElement(Device*)+0x1a>
c0020256:	83 ec 0c             	sub    esp,0xc
c0020259:	68 34 1b 02 c0       	push   0xc0021b34
c002025e:	e8 93 e9 fe ff       	call   c000ebf6 <KePanic(char const*)>
c0020263:	83 c4 10             	add    esp,0x10
c0020266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026a:	8b 00                	mov    eax,DWORD PTR [eax]
c002026c:	85 c0                	test   eax,eax
c002026e:	74 3a                	je     c00202aa <LinkedList<Device>::addElement(Device*)+0x5e>
c0020270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020277:	85 c0                	test   eax,eax
c0020279:	74 2f                	je     c00202aa <LinkedList<Device>::addElement(Device*)+0x5e>
c002027b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020282:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020286:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002028c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020290:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020294:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002029e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00202a8:	eb 68                	jmp    c0020312 <LinkedList<Device>::addElement(Device*)+0xc6>
c00202aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00202b0:	85 c0                	test   eax,eax
c00202b2:	75 4e                	jne    c0020302 <LinkedList<Device>::addElement(Device*)+0xb6>
c00202b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202bb:	85 c0                	test   eax,eax
c00202bd:	75 43                	jne    c0020302 <LinkedList<Device>::addElement(Device*)+0xb6>
c00202bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202c7:	89 10                	mov    DWORD PTR [eax],edx
c00202c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00202d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202db:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00202e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202ec:	85 c0                	test   eax,eax
c00202ee:	74 22                	je     c0020312 <LinkedList<Device>::addElement(Device*)+0xc6>
c00202f0:	83 ec 0c             	sub    esp,0xc
c00202f3:	68 56 1b 02 c0       	push   0xc0021b56
c00202f8:	e8 f9 e8 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00202fd:	83 c4 10             	add    esp,0x10
c0020300:	eb 10                	jmp    c0020312 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020302:	83 ec 0c             	sub    esp,0xc
c0020305:	68 60 1b 02 c0       	push   0xc0021b60
c002030a:	e8 e7 e8 fe ff       	call   c000ebf6 <KePanic(char const*)>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020316:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020319:	8d 50 01             	lea    edx,[eax+0x1]
c002031c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020320:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020323:	90                   	nop
c0020324:	83 c4 0c             	add    esp,0xc
c0020327:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020328 <LinkedList<Device>::LinkedList()>:
c0020328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002032c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020336:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002033d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020341:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002034c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020356:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002035d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020361:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020368:	90                   	nop
c0020369:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002036c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002036c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020370:	8b 00                	mov    eax,DWORD PTR [eax]
c0020372:	85 c0                	test   eax,eax
c0020374:	75 0e                	jne    c0020384 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002037a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002037d:	85 c0                	test   eax,eax
c002037f:	75 03                	jne    c0020384 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020381:	b0 01                	mov    al,0x1
c0020383:	c3                   	ret    
c0020384:	b0 00                	mov    al,0x0
c0020386:	90                   	nop
c0020387:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020388 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002038c:	8b 00                	mov    eax,DWORD PTR [eax]
c002038e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020390 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020390:	83 ec 0c             	sub    esp,0xc
c0020393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020397:	8b 00                	mov    eax,DWORD PTR [eax]
c0020399:	85 c0                	test   eax,eax
c002039b:	75 17                	jne    c00203b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002039d:	83 ec 0c             	sub    esp,0xc
c00203a0:	68 d0 1d 02 c0       	push   0xc0021dd0
c00203a5:	e8 4c e8 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00203aa:	83 c4 10             	add    esp,0x10
c00203ad:	e9 96 00 00 00       	jmp    c0020448 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00203b2:	66 90                	xchg   ax,ax
c00203b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00203bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00203be:	85 c0                	test   eax,eax
c00203c0:	0f 95 c0             	setne  al
c00203c3:	0f b6 c0             	movzx  eax,al
c00203c6:	85 c0                	test   eax,eax
c00203c8:	74 12                	je     c00203dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	68 1b 1e 02 c0       	push   0xc0021e1b
c00203d2:	e8 1f e8 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00203d7:	83 c4 10             	add    esp,0x10
c00203da:	66 90                	xchg   ax,ax
c00203dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00203e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00203e5:	85 c0                	test   eax,eax
c00203e7:	0f 94 c0             	sete   al
c00203ea:	0f b6 c0             	movzx  eax,al
c00203ed:	85 c0                	test   eax,eax
c00203ef:	74 33                	je     c0020424 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00203f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002040d:	83 f8 01             	cmp    eax,0x1
c0020410:	74 22                	je     c0020434 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	68 f4 1d 02 c0       	push   0xc0021df4
c002041a:	e8 d7 e7 fe ff       	call   c000ebf6 <KePanic(char const*)>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	eb 10                	jmp    c0020434 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020428:	8b 00                	mov    eax,DWORD PTR [eax]
c002042a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002042d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020431:	89 10                	mov    DWORD PTR [eax],edx
c0020433:	90                   	nop
c0020434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020438:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002043b:	8d 50 ff             	lea    edx,[eax-0x1]
c002043e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020442:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020445:	8d 76 00             	lea    esi,[esi+0x0]
c0020448:	83 c4 0c             	add    esp,0xc
c002044b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002044c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020454:	75 12                	jne    c0020468 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0020456:	83 ec 0c             	sub    esp,0xc
c0020459:	68 34 1b 02 c0       	push   0xc0021b34
c002045e:	e8 93 e7 fe ff       	call   c000ebf6 <KePanic(char const*)>
c0020463:	83 c4 10             	add    esp,0x10
c0020466:	66 90                	xchg   ax,ax
c0020468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046c:	8b 00                	mov    eax,DWORD PTR [eax]
c002046e:	85 c0                	test   eax,eax
c0020470:	74 36                	je     c00204a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020479:	85 c0                	test   eax,eax
c002047b:	74 2b                	je     c00204a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002047d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020481:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020484:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020488:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002048b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002048f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020493:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002049d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00204a4:	eb 6a                	jmp    c0020510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00204a6:	66 90                	xchg   ax,ax
c00204a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00204ae:	85 c0                	test   eax,eax
c00204b0:	75 4e                	jne    c0020500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00204b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204b9:	85 c0                	test   eax,eax
c00204bb:	75 43                	jne    c0020500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00204bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00204c5:	89 10                	mov    DWORD PTR [eax],edx
c00204c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00204cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00204d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00204e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204e7:	85 c0                	test   eax,eax
c00204e9:	74 25                	je     c0020510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00204eb:	83 ec 0c             	sub    esp,0xc
c00204ee:	68 56 1b 02 c0       	push   0xc0021b56
c00204f3:	e8 fe e6 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00204f8:	83 c4 10             	add    esp,0x10
c00204fb:	eb 13                	jmp    c0020510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00204fd:	8d 76 00             	lea    esi,[esi+0x0]
c0020500:	83 ec 0c             	sub    esp,0xc
c0020503:	68 60 1b 02 c0       	push   0xc0021b60
c0020508:	e8 e9 e6 fe ff       	call   c000ebf6 <KePanic(char const*)>
c002050d:	83 c4 10             	add    esp,0x10
c0020510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020514:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020517:	8d 50 01             	lea    edx,[eax+0x1]
c002051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020521:	90                   	nop
c0020522:	83 c4 0c             	add    esp,0xc
c0020525:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020528 <ACPI::~ACPI()>:
c0020528:	83 ec 0c             	sub    esp,0xc
c002052b:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0020530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020534:	89 10                	mov    DWORD PTR [eax],edx
c0020536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002053a:	83 ec 0c             	sub    esp,0xc
c002053d:	50                   	push   eax
c002053e:	e8 25 8a fe ff       	call   c0008f68 <Device::~Device()>
c0020543:	83 c4 10             	add    esp,0x10
c0020546:	90                   	nop
c0020547:	83 c4 0c             	add    esp,0xc
c002054a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002054c <ACPI::~ACPI()>:
c002054c:	83 ec 0c             	sub    esp,0xc
c002054f:	83 ec 0c             	sub    esp,0xc
c0020552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020556:	e8 cd ff ff ff       	call   c0020528 <ACPI::~ACPI()>
c002055b:	83 c4 10             	add    esp,0x10
c002055e:	83 ec 08             	sub    esp,0x8
c0020561:	68 64 12 00 00       	push   0x1264
c0020566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002056a:	e8 ac c0 fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c002056f:	83 c4 10             	add    esp,0x10
c0020572:	83 c4 0c             	add    esp,0xc
c0020575:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020578 <LinkedList<Device>::~LinkedList()>:
c0020578:	90                   	nop
c0020579:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002057c <LinkedList<Device>::isEmpty()>:
c002057c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020580:	8b 00                	mov    eax,DWORD PTR [eax]
c0020582:	85 c0                	test   eax,eax
c0020584:	75 0e                	jne    c0020594 <LinkedList<Device>::isEmpty()+0x18>
c0020586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002058a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002058d:	85 c0                	test   eax,eax
c002058f:	75 03                	jne    c0020594 <LinkedList<Device>::isEmpty()+0x18>
c0020591:	b0 01                	mov    al,0x1
c0020593:	c3                   	ret    
c0020594:	b0 00                	mov    al,0x0
c0020596:	90                   	nop
c0020597:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020598 <LinkedList<Device>::getFirstElement()>:
c0020598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002059c:	8b 00                	mov    eax,DWORD PTR [eax]
c002059e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00205a0 <LinkedList<Device>::removeFirst()>:
c00205a0:	83 ec 0c             	sub    esp,0xc
c00205a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00205a9:	85 c0                	test   eax,eax
c00205ab:	75 17                	jne    c00205c4 <LinkedList<Device>::removeFirst()+0x24>
c00205ad:	83 ec 0c             	sub    esp,0xc
c00205b0:	68 d0 1d 02 c0       	push   0xc0021dd0
c00205b5:	e8 3c e6 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00205ba:	83 c4 10             	add    esp,0x10
c00205bd:	e9 92 00 00 00       	jmp    c0020654 <LinkedList<Device>::removeFirst()+0xb4>
c00205c2:	66 90                	xchg   ax,ax
c00205c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205cb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00205d1:	85 c0                	test   eax,eax
c00205d3:	74 13                	je     c00205e8 <LinkedList<Device>::removeFirst()+0x48>
c00205d5:	83 ec 0c             	sub    esp,0xc
c00205d8:	68 1b 1e 02 c0       	push   0xc0021e1b
c00205dd:	e8 14 e6 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00205e2:	83 c4 10             	add    esp,0x10
c00205e5:	8d 76 00             	lea    esi,[esi+0x0]
c00205e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00205ee:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00205f4:	85 c0                	test   eax,eax
c00205f6:	75 34                	jne    c002062c <LinkedList<Device>::removeFirst()+0x8c>
c00205f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020606:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002060d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020611:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020614:	83 f8 01             	cmp    eax,0x1
c0020617:	74 27                	je     c0020640 <LinkedList<Device>::removeFirst()+0xa0>
c0020619:	83 ec 0c             	sub    esp,0xc
c002061c:	68 f4 1d 02 c0       	push   0xc0021df4
c0020621:	e8 d0 e5 fe ff       	call   c000ebf6 <KePanic(char const*)>
c0020626:	83 c4 10             	add    esp,0x10
c0020629:	eb 15                	jmp    c0020640 <LinkedList<Device>::removeFirst()+0xa0>
c002062b:	90                   	nop
c002062c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020630:	8b 00                	mov    eax,DWORD PTR [eax]
c0020632:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002063c:	89 10                	mov    DWORD PTR [eax],edx
c002063e:	66 90                	xchg   ax,ax
c0020640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020644:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020647:	8d 50 ff             	lea    edx,[eax-0x1]
c002064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020651:	8d 76 00             	lea    esi,[esi+0x0]
c0020654:	83 c4 0c             	add    esp,0xc
c0020657:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020658 <Computer::~Computer()>:
c0020658:	83 ec 0c             	sub    esp,0xc
c002065b:	ba 4c 24 02 c0       	mov    edx,0xc002244c
c0020660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020664:	89 10                	mov    DWORD PTR [eax],edx
c0020666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002066a:	83 ec 0c             	sub    esp,0xc
c002066d:	50                   	push   eax
c002066e:	e8 f5 88 fe ff       	call   c0008f68 <Device::~Device()>
c0020673:	83 c4 10             	add    esp,0x10
c0020676:	90                   	nop
c0020677:	83 c4 0c             	add    esp,0xc
c002067a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002067c <Computer::~Computer()>:
c002067c:	83 ec 0c             	sub    esp,0xc
c002067f:	83 ec 0c             	sub    esp,0xc
c0020682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020686:	e8 cd ff ff ff       	call   c0020658 <Computer::~Computer()>
c002068b:	83 c4 10             	add    esp,0x10
c002068e:	83 ec 08             	sub    esp,0x8
c0020691:	68 6c 01 00 00       	push   0x16c
c0020696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002069a:	e8 7c bf fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c002069f:	83 c4 10             	add    esp,0x10
c00206a2:	83 c4 0c             	add    esp,0xc
c00206a5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00206a6 <idleCommon()>:
c00206a6:	83 ec 0c             	sub    esp,0xc
c00206a9:	fa                   	cli    
c00206aa:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00206b0:	e8 93 4f ff ff       	call   c0015648 <schedule()>
c00206b5:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00206bc:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00206c3:	75 01                	jne    c00206c6 <idleCommon()+0x20>
c00206c5:	fb                   	sti    
c00206c6:	83 c4 0c             	add    esp,0xc
c00206c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00206ca <LinkedList<UnixFile>::~LinkedList()>:
c00206ca:	90                   	nop
c00206cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00206cc <LinkedList<UnixFile>::LinkedList()>:
c00206cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00206d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00206e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00206ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00206f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020705:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002070c:	90                   	nop
c002070d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002070e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002070e:	83 ec 0c             	sub    esp,0xc
c0020711:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020716:	75 10                	jne    c0020728 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020718:	83 ec 0c             	sub    esp,0xc
c002071b:	68 34 1b 02 c0       	push   0xc0021b34
c0020720:	e8 d1 e4 fe ff       	call   c000ebf6 <KePanic(char const*)>
c0020725:	83 c4 10             	add    esp,0x10
c0020728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002072c:	8b 00                	mov    eax,DWORD PTR [eax]
c002072e:	85 c0                	test   eax,eax
c0020730:	74 34                	je     c0020766 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020739:	85 c0                	test   eax,eax
c002073b:	74 29                	je     c0020766 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002073d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020741:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020748:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002074b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002074f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020753:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002075a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002075d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020764:	eb 65                	jmp    c00207cb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076a:	8b 00                	mov    eax,DWORD PTR [eax]
c002076c:	85 c0                	test   eax,eax
c002076e:	75 4b                	jne    c00207bb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020777:	85 c0                	test   eax,eax
c0020779:	75 40                	jne    c00207bb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002077b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002077f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020783:	89 10                	mov    DWORD PTR [eax],edx
c0020785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002078d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020794:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020797:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002079e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00207a5:	85 c0                	test   eax,eax
c00207a7:	74 22                	je     c00207cb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00207a9:	83 ec 0c             	sub    esp,0xc
c00207ac:	68 56 1b 02 c0       	push   0xc0021b56
c00207b1:	e8 40 e4 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00207b6:	83 c4 10             	add    esp,0x10
c00207b9:	eb 10                	jmp    c00207cb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00207bb:	83 ec 0c             	sub    esp,0xc
c00207be:	68 60 1b 02 c0       	push   0xc0021b60
c00207c3:	e8 2e e4 fe ff       	call   c000ebf6 <KePanic(char const*)>
c00207c8:	83 c4 10             	add    esp,0x10
c00207cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00207d2:	8d 50 01             	lea    edx,[eax+0x1]
c00207d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00207dc:	90                   	nop
c00207dd:	83 c4 0c             	add    esp,0xc
c00207e0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00207e2 <LinkedList<UnixFile>::getFirstElement()>:
c00207e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00207e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00207ea <LinkedList<UnixFile>::removeFirst()>:
c00207ea:	83 ec 0c             	sub    esp,0xc
c00207ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00207f3:	85 c0                	test   eax,eax
c00207f5:	75 12                	jne    c0020809 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00207f7:	83 ec 0c             	sub    esp,0xc
c00207fa:	68 d0 1d 02 c0       	push   0xc0021dd0
c00207ff:	e8 f2 e3 fe ff       	call   c000ebf6 <KePanic(char const*)>
c0020804:	83 c4 10             	add    esp,0x10
c0020807:	eb 7e                	jmp    c0020887 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002080d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020810:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020813:	85 c0                	test   eax,eax
c0020815:	74 10                	je     c0020827 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020817:	83 ec 0c             	sub    esp,0xc
c002081a:	68 1b 1e 02 c0       	push   0xc0021e1b
c002081f:	e8 d2 e3 fe ff       	call   c000ebf6 <KePanic(char const*)>
c0020824:	83 c4 10             	add    esp,0x10
c0020827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002082b:	8b 00                	mov    eax,DWORD PTR [eax]
c002082d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020830:	85 c0                	test   eax,eax
c0020832:	75 33                	jne    c0020867 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020838:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002083e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020842:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002084d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020850:	83 f8 01             	cmp    eax,0x1
c0020853:	74 21                	je     c0020876 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020855:	83 ec 0c             	sub    esp,0xc
c0020858:	68 f4 1d 02 c0       	push   0xc0021df4
c002085d:	e8 94 e3 fe ff       	call   c000ebf6 <KePanic(char const*)>
c0020862:	83 c4 10             	add    esp,0x10
c0020865:	eb 0f                	jmp    c0020876 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002086b:	8b 00                	mov    eax,DWORD PTR [eax]
c002086d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020874:	89 10                	mov    DWORD PTR [eax],edx
c0020876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002087a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002087d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020884:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020887:	83 c4 0c             	add    esp,0xc
c002088a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002088c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002088c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020890:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020893:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020894 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020898:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002089b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002089c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002089c:	90                   	nop
c002089d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00208a0 <ThreadControlBlock::ThreadControlBlock()>:
c00208a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208a4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00208ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208af:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00208b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208ba:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00208c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208c5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00208cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208d0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00208d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208db:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00208df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208e3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00208e7:	90                   	nop
c00208e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00208ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00208ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020901:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020905:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002090c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020910:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002091a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020925:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002092c:	90                   	nop
c002092d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002092e <CPU::~CPU()>:
c002092e:	83 ec 0c             	sub    esp,0xc
c0020931:	ba 78 3a 02 c0       	mov    edx,0xc0023a78
c0020936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002093a:	89 10                	mov    DWORD PTR [eax],edx
c002093c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020940:	83 ec 0c             	sub    esp,0xc
c0020943:	50                   	push   eax
c0020944:	e8 1f 86 fe ff       	call   c0008f68 <Device::~Device()>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	90                   	nop
c002094d:	83 c4 0c             	add    esp,0xc
c0020950:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020952 <CPU::~CPU()>:
c0020952:	83 ec 0c             	sub    esp,0xc
c0020955:	83 ec 0c             	sub    esp,0xc
c0020958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002095c:	e8 cd ff ff ff       	call   c002092e <CPU::~CPU()>
c0020961:	83 c4 10             	add    esp,0x10
c0020964:	83 ec 08             	sub    esp,0x8
c0020967:	68 78 11 00 00       	push   0x1178
c002096c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020970:	e8 a6 bc fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020975:	83 c4 10             	add    esp,0x10
c0020978:	83 c4 0c             	add    esp,0xc
c002097b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002097c <PCI::~PCI()>:
c002097c:	83 ec 0c             	sub    esp,0xc
c002097f:	ba dc 3f 02 c0       	mov    edx,0xc0023fdc
c0020984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020988:	89 10                	mov    DWORD PTR [eax],edx
c002098a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098e:	83 ec 0c             	sub    esp,0xc
c0020991:	50                   	push   eax
c0020992:	e8 a9 7f fe ff       	call   c0008940 <Bus::~Bus()>
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	90                   	nop
c002099b:	83 c4 0c             	add    esp,0xc
c002099e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00209a0 <PCI::~PCI()>:
c00209a0:	83 ec 0c             	sub    esp,0xc
c00209a3:	83 ec 0c             	sub    esp,0xc
c00209a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209aa:	e8 cd ff ff ff       	call   c002097c <PCI::~PCI()>
c00209af:	83 c4 10             	add    esp,0x10
c00209b2:	83 ec 08             	sub    esp,0x8
c00209b5:	68 5c 01 00 00       	push   0x15c
c00209ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209be:	e8 58 bc fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c00209c3:	83 c4 10             	add    esp,0x10
c00209c6:	83 c4 0c             	add    esp,0xc
c00209c9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00209ca <IDE::~IDE()>:
c00209ca:	83 ec 0c             	sub    esp,0xc
c00209cd:	ba 2c 41 02 c0       	mov    edx,0xc002412c
c00209d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d6:	89 10                	mov    DWORD PTR [eax],edx
c00209d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209dc:	83 ec 0c             	sub    esp,0xc
c00209df:	50                   	push   eax
c00209e0:	e8 13 8a fe ff       	call   c00093f8 <HardDiskController::~HardDiskController()>
c00209e5:	83 c4 10             	add    esp,0x10
c00209e8:	90                   	nop
c00209e9:	83 c4 0c             	add    esp,0xc
c00209ec:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00209ee <IDE::~IDE()>:
c00209ee:	83 ec 0c             	sub    esp,0xc
c00209f1:	83 ec 0c             	sub    esp,0xc
c00209f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209f8:	e8 cd ff ff ff       	call   c00209ca <IDE::~IDE()>
c00209fd:	83 c4 10             	add    esp,0x10
c0020a00:	83 ec 08             	sub    esp,0x8
c0020a03:	68 70 02 00 00       	push   0x270
c0020a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a0c:	e8 0a bc fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	83 c4 0c             	add    esp,0xc
c0020a17:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020a18 <SATABus::~SATABus()>:
c0020a18:	83 ec 0c             	sub    esp,0xc
c0020a1b:	ba 7c 41 02 c0       	mov    edx,0xc002417c
c0020a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a24:	89 10                	mov    DWORD PTR [eax],edx
c0020a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a2a:	83 ec 0c             	sub    esp,0xc
c0020a2d:	50                   	push   eax
c0020a2e:	e8 c5 89 fe ff       	call   c00093f8 <HardDiskController::~HardDiskController()>
c0020a33:	83 c4 10             	add    esp,0x10
c0020a36:	90                   	nop
c0020a37:	83 c4 0c             	add    esp,0xc
c0020a3a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020a3c <SATABus::~SATABus()>:
c0020a3c:	83 ec 0c             	sub    esp,0xc
c0020a3f:	83 ec 0c             	sub    esp,0xc
c0020a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a46:	e8 cd ff ff ff       	call   c0020a18 <SATABus::~SATABus()>
c0020a4b:	83 c4 10             	add    esp,0x10
c0020a4e:	83 ec 08             	sub    esp,0x8
c0020a51:	68 64 01 00 00       	push   0x164
c0020a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a5a:	e8 bc bb fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020a5f:	83 c4 10             	add    esp,0x10
c0020a62:	83 c4 0c             	add    esp,0xc
c0020a65:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020a66 <ATA::~ATA()>:
c0020a66:	83 ec 0c             	sub    esp,0xc
c0020a69:	ba 64 42 02 c0       	mov    edx,0xc0024264
c0020a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a72:	89 10                	mov    DWORD PTR [eax],edx
c0020a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a78:	83 ec 0c             	sub    esp,0xc
c0020a7b:	50                   	push   eax
c0020a7c:	e8 59 8a fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020a81:	83 c4 10             	add    esp,0x10
c0020a84:	90                   	nop
c0020a85:	83 c4 0c             	add    esp,0xc
c0020a88:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020a8a <ATA::~ATA()>:
c0020a8a:	83 ec 0c             	sub    esp,0xc
c0020a8d:	83 ec 0c             	sub    esp,0xc
c0020a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a94:	e8 cd ff ff ff       	call   c0020a66 <ATA::~ATA()>
c0020a99:	83 c4 10             	add    esp,0x10
c0020a9c:	83 ec 08             	sub    esp,0x8
c0020a9f:	68 8c 01 00 00       	push   0x18c
c0020aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aa8:	e8 6e bb fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020aad:	83 c4 10             	add    esp,0x10
c0020ab0:	83 c4 0c             	add    esp,0xc
c0020ab3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020ab4 <ATAPI::~ATAPI()>:
c0020ab4:	83 ec 0c             	sub    esp,0xc
c0020ab7:	ba ac 42 02 c0       	mov    edx,0xc00242ac
c0020abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac0:	89 10                	mov    DWORD PTR [eax],edx
c0020ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac6:	83 ec 0c             	sub    esp,0xc
c0020ac9:	50                   	push   eax
c0020aca:	e8 0b 8a fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020acf:	83 c4 10             	add    esp,0x10
c0020ad2:	90                   	nop
c0020ad3:	83 c4 0c             	add    esp,0xc
c0020ad6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020ad8 <ATAPI::~ATAPI()>:
c0020ad8:	83 ec 0c             	sub    esp,0xc
c0020adb:	83 ec 0c             	sub    esp,0xc
c0020ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ae2:	e8 cd ff ff ff       	call   c0020ab4 <ATAPI::~ATAPI()>
c0020ae7:	83 c4 10             	add    esp,0x10
c0020aea:	83 ec 08             	sub    esp,0x8
c0020aed:	68 84 01 00 00       	push   0x184
c0020af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020af6:	e8 20 bb fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020afb:	83 c4 10             	add    esp,0x10
c0020afe:	83 c4 0c             	add    esp,0xc
c0020b01:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020b02 <SATA::~SATA()>:
c0020b02:	83 ec 0c             	sub    esp,0xc
c0020b05:	ba 6c 43 02 c0       	mov    edx,0xc002436c
c0020b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0e:	89 10                	mov    DWORD PTR [eax],edx
c0020b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b14:	83 ec 0c             	sub    esp,0xc
c0020b17:	50                   	push   eax
c0020b18:	e8 bd 89 fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020b1d:	83 c4 10             	add    esp,0x10
c0020b20:	90                   	nop
c0020b21:	83 c4 0c             	add    esp,0xc
c0020b24:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020b26 <SATA::~SATA()>:
c0020b26:	83 ec 0c             	sub    esp,0xc
c0020b29:	83 ec 0c             	sub    esp,0xc
c0020b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b30:	e8 cd ff ff ff       	call   c0020b02 <SATA::~SATA()>
c0020b35:	83 c4 10             	add    esp,0x10
c0020b38:	83 ec 08             	sub    esp,0x8
c0020b3b:	68 7c 01 00 00       	push   0x17c
c0020b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b44:	e8 d2 ba fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020b49:	83 c4 10             	add    esp,0x10
c0020b4c:	83 c4 0c             	add    esp,0xc
c0020b4f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020b50 <SATAPI::~SATAPI()>:
c0020b50:	83 ec 0c             	sub    esp,0xc
c0020b53:	ba 90 44 02 c0       	mov    edx,0xc0024490
c0020b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b5c:	89 10                	mov    DWORD PTR [eax],edx
c0020b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b62:	83 ec 0c             	sub    esp,0xc
c0020b65:	50                   	push   eax
c0020b66:	e8 6f 89 fe ff       	call   c00094da <PhysicalDisk::~PhysicalDisk()>
c0020b6b:	83 c4 10             	add    esp,0x10
c0020b6e:	90                   	nop
c0020b6f:	83 c4 0c             	add    esp,0xc
c0020b72:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020b74 <SATAPI::~SATAPI()>:
c0020b74:	83 ec 0c             	sub    esp,0xc
c0020b77:	83 ec 0c             	sub    esp,0xc
c0020b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b7e:	e8 cd ff ff ff       	call   c0020b50 <SATAPI::~SATAPI()>
c0020b83:	83 c4 10             	add    esp,0x10
c0020b86:	83 ec 08             	sub    esp,0x8
c0020b89:	68 84 01 00 00       	push   0x184
c0020b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b92:	e8 84 ba fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020b97:	83 c4 10             	add    esp,0x10
c0020b9a:	83 c4 0c             	add    esp,0xc
c0020b9d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020b9e <IOAPIC::~IOAPIC()>:
c0020b9e:	83 ec 0c             	sub    esp,0xc
c0020ba1:	ba f0 44 02 c0       	mov    edx,0xc00244f0
c0020ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020baa:	89 10                	mov    DWORD PTR [eax],edx
c0020bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb0:	83 ec 0c             	sub    esp,0xc
c0020bb3:	50                   	push   eax
c0020bb4:	e8 af 83 fe ff       	call   c0008f68 <Device::~Device()>
c0020bb9:	83 c4 10             	add    esp,0x10
c0020bbc:	90                   	nop
c0020bbd:	83 c4 0c             	add    esp,0xc
c0020bc0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020bc2 <IOAPIC::~IOAPIC()>:
c0020bc2:	83 ec 0c             	sub    esp,0xc
c0020bc5:	83 ec 0c             	sub    esp,0xc
c0020bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bcc:	e8 cd ff ff ff       	call   c0020b9e <IOAPIC::~IOAPIC()>
c0020bd1:	83 c4 10             	add    esp,0x10
c0020bd4:	83 ec 08             	sub    esp,0x8
c0020bd7:	68 68 01 00 00       	push   0x168
c0020bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020be0:	e8 36 ba fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020be5:	83 c4 10             	add    esp,0x10
c0020be8:	83 c4 0c             	add    esp,0xc
c0020beb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020bec <APICTimer::~APICTimer()>:
c0020bec:	83 ec 0c             	sub    esp,0xc
c0020bef:	ba 38 45 02 c0       	mov    edx,0xc0024538
c0020bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf8:	89 10                	mov    DWORD PTR [eax],edx
c0020bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bfe:	83 ec 0c             	sub    esp,0xc
c0020c01:	50                   	push   eax
c0020c02:	e8 a1 9a fe ff       	call   c000a6a8 <Timer::~Timer()>
c0020c07:	83 c4 10             	add    esp,0x10
c0020c0a:	90                   	nop
c0020c0b:	83 c4 0c             	add    esp,0xc
c0020c0e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020c10 <APICTimer::~APICTimer()>:
c0020c10:	83 ec 0c             	sub    esp,0xc
c0020c13:	83 ec 0c             	sub    esp,0xc
c0020c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c1a:	e8 cd ff ff ff       	call   c0020bec <APICTimer::~APICTimer()>
c0020c1f:	83 c4 10             	add    esp,0x10
c0020c22:	83 ec 08             	sub    esp,0x8
c0020c25:	68 60 01 00 00       	push   0x160
c0020c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c2e:	e8 e8 b9 fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020c33:	83 c4 10             	add    esp,0x10
c0020c36:	83 c4 0c             	add    esp,0xc
c0020c39:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020c3c <PIT::~PIT()>:
c0020c3c:	83 ec 0c             	sub    esp,0xc
c0020c3f:	ba 88 45 02 c0       	mov    edx,0xc0024588
c0020c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c48:	89 10                	mov    DWORD PTR [eax],edx
c0020c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c4e:	83 ec 0c             	sub    esp,0xc
c0020c51:	50                   	push   eax
c0020c52:	e8 51 9a fe ff       	call   c000a6a8 <Timer::~Timer()>
c0020c57:	83 c4 10             	add    esp,0x10
c0020c5a:	90                   	nop
c0020c5b:	83 c4 0c             	add    esp,0xc
c0020c5e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020c60 <PIT::~PIT()>:
c0020c60:	83 ec 0c             	sub    esp,0xc
c0020c63:	83 ec 0c             	sub    esp,0xc
c0020c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c6a:	e8 cd ff ff ff       	call   c0020c3c <PIT::~PIT()>
c0020c6f:	83 c4 10             	add    esp,0x10
c0020c72:	83 ec 08             	sub    esp,0x8
c0020c75:	68 5c 01 00 00       	push   0x15c
c0020c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c7e:	e8 98 b9 fe ff       	call   c000c61b <operator delete(void*, unsigned long)>
c0020c83:	83 c4 10             	add    esp,0x10
c0020c86:	83 c4 0c             	add    esp,0xc
c0020c89:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be 2b 28 02 c0       	mov    esi,0xc002282b
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 47 28 02 c0       	mov    esi,0xc0022847
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
